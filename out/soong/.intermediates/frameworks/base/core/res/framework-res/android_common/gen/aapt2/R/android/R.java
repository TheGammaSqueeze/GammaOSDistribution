/* AUTO-GENERATED FILE. DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found. It
 * should not be modified by hand.
 */

package android;

public final class R {
  public static final class anim {
    public static final int accelerate_decelerate_interpolator=0x010a0004;
    /**
     * Acceleration curve matching Flash's quadratic ease out function.
     */
    public static final int accelerate_interpolator=0x010a0005;
    public static final int anticipate_interpolator=0x010a0007;
    public static final int anticipate_overshoot_interpolator=0x010a0009;
    public static final int bounce_interpolator=0x010a000a;
    public static final int cycle_interpolator=0x010a000c;
    /**
     * Acceleration curve matching Flash's quadratic ease in function.
     */
    public static final int decelerate_interpolator=0x010a0006;
    public static final int fade_in=0x010a0000;
    public static final int fade_out=0x010a0001;
    public static final int linear_interpolator=0x010a000b;
    public static final int overshoot_interpolator=0x010a0008;
    public static final int slide_in_left=0x010a0002;
    public static final int slide_out_right=0x010a0003;
  }
  public static final class animator {
    /**
     * A simple fade-in animation.
     */
    public static final int fade_in=0x010b0000;
    /**
     * A simple fade-out animation.
     */
    public static final int fade_out=0x010b0001;
  }
  public static final class array {
    /**
     * @hide  This shouldn't be public.
     * Array of "[keySystemName],[UuidOfMediaDrm]"
     */
    @android.annotation.SystemApi
    public static final int config_keySystemUuidMapping=0x01070005;
    /**
     * Email address types from android.provider.Contacts. This could be used when adding a new e-mail address for a contact, for example.
     */
    public static final int emailAddressTypes=0x01070000;
    /**
     * Instant Message protocols/providers from android.provider.Contacts
     */
    public static final int imProtocols=0x01070001;
    /**
     * Organization types from android.provider.Contacts. This could be used when adding a new organization for a contact, for example.
     */
    public static final int organizationTypes=0x01070002;
    /**
     * Phone number types from android.provider.Contacts. This could be used when adding a new phone number for a contact, for example.
     */
    public static final int phoneTypes=0x01070003;
    /**
     * Postal address types from android.provider.Contacts. This could be used when adding a new address for a contact, for example.
     */
    public static final int postalAddressTypes=0x01070004;
  }
  public static final class attr {
    /**
     * Default AbsListView style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int absListViewStyle=0x0101006a;
    /**
     * The event types this service would like to receive as specified in
     * {@link android.view.accessibility.AccessibilityEvent}. This setting
     * can be changed at runtime by calling
     * {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
     * android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>typeAllMask</td><td>ffffffff</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPES_ALL_MASK} i.e. all events.</td></tr>
     * <tr><td>typeAnnouncement</td><td>4000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_ANNOUNCEMENT} events.</td></tr>
     * <tr><td>typeAssistReadingContext</td><td>1000000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_ASSIST_READING_CONTEXT} events.</td></tr>
     * <tr><td>typeContextClicked</td><td>800000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_CONTEXT_CLICKED} events.</td></tr>
     * <tr><td>typeGestureDetectionEnd</td><td>80000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_GESTURE_DETECTION_END} events.</td></tr>
     * <tr><td>typeGestureDetectionStart</td><td>40000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_GESTURE_DETECTION_START} events.</td></tr>
     * <tr><td>typeNotificationStateChanged</td><td>40</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_NOTIFICATION_STATE_CHANGED} events.</td></tr>
     * <tr><td>typeTouchExplorationGestureEnd</td><td>400</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_TOUCH_EXPLORATION_GESTURE_END} events.</td></tr>
     * <tr><td>typeTouchExplorationGestureStart</td><td>200</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_TOUCH_EXPLORATION_GESTURE_START} events.</td></tr>
     * <tr><td>typeTouchInteractionEnd</td><td>200000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_TOUCH_INTERACTION_END} events.</td></tr>
     * <tr><td>typeTouchInteractionStart</td><td>100000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_TOUCH_INTERACTION_START} events.</td></tr>
     * <tr><td>typeViewAccessibilityFocusCleared</td><td>10000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED} events.</td></tr>
     * <tr><td>typeViewAccessibilityFocused</td><td>8000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_ACCESSIBILITY_FOCUSED} events.</td></tr>
     * <tr><td>typeViewClicked</td><td>1</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_CLICKED} events.</td></tr>
     * <tr><td>typeViewFocused</td><td>8</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_FOCUSED} events.</td></tr>
     * <tr><td>typeViewHoverEnter</td><td>80</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_HOVER_ENTER} events.</td></tr>
     * <tr><td>typeViewHoverExit</td><td>100</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_HOVER_EXIT} events.</td></tr>
     * <tr><td>typeViewLongClicked</td><td>2</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_LONG_CLICKED} events.</td></tr>
     * <tr><td>typeViewScrolled</td><td>1000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_SCROLLED} events.</td></tr>
     * <tr><td>typeViewSelected</td><td>4</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_SELECTED} events.</td></tr>
     * <tr><td>typeViewTextChanged</td><td>10</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_TEXT_CHANGED} events.</td></tr>
     * <tr><td>typeViewTextSelectionChanged</td><td>2000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_TEXT_SELECTION_CHANGED} events.</td></tr>
     * <tr><td>typeViewTextTraversedAtMovementGranularity</td><td>20000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY} events.</td></tr>
     * <tr><td>typeWindowContentChanged</td><td>800</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_WINDOW_CONTENT_CHANGED} events.</td></tr>
     * <tr><td>typeWindowStateChanged</td><td>20</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_WINDOW_STATE_CHANGED} events.</td></tr>
     * <tr><td>typeWindowsChanged</td><td>400000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_WINDOWS_CHANGED} events.</td></tr>
     * </table>
     */
    public static final int accessibilityEventTypes=0x01010380;
    /**
     * The feedback types this service provides as specified in
     * {@link android.accessibilityservice.AccessibilityServiceInfo}. This setting
     * can be changed at runtime by calling
     * {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
     * android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>feedbackAllMask</td><td>ffffffff</td><td>Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_ALL_MASK} feedback.</td></tr>
     * <tr><td>feedbackAudible</td><td>4</td><td>Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_AUDIBLE} feedback.</td></tr>
     * <tr><td>feedbackGeneric</td><td>10</td><td>Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_GENERIC} feedback.</td></tr>
     * <tr><td>feedbackHaptic</td><td>2</td><td>Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_HAPTIC} feedback.</td></tr>
     * <tr><td>feedbackSpoken</td><td>1</td><td>Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_SPOKEN} feedback.</td></tr>
     * <tr><td>feedbackVisual</td><td>8</td><td>Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_VISUAL} feedback.</td></tr>
     * </table>
     */
    public static final int accessibilityFeedbackType=0x01010382;
    /**
     * Additional flags as specified in
     * {@link android.accessibilityservice.AccessibilityServiceInfo}.
     * This setting can be changed at runtime by calling
     * {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
     * android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>flagDefault</td><td>1</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#DEFAULT}.</td></tr>
     * <tr><td>flagEnableAccessibilityVolume</td><td>80</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_ENABLE_ACCESSIBILITY_VOLUME}.</td></tr>
     * <tr><td>flagIncludeNotImportantViews</td><td>2</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_INCLUDE_NOT_IMPORTANT_VIEWS}.</td></tr>
     * <tr><td>flagReportViewIds</td><td>10</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REPORT_VIEW_IDS}.</td></tr>
     * <tr><td>flagRequestAccessibilityButton</td><td>100</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_ACCESSIBILITY_BUTTON}.</td></tr>
     * <tr><td>flagRequestEnhancedWebAccessibility</td><td>8</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_ENHANCED_WEB_ACCESSIBILITY}.
     * Not used by the framework.</td></tr>
     * <tr><td>flagRequestFilterKeyEvents</td><td>20</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_FILTER_KEY_EVENTS}.</td></tr>
     * <tr><td>flagRequestFingerprintGestures</td><td>200</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_FINGERPRINT_GESTURES}.</td></tr>
     * <tr><td>flagRequestMultiFingerGestures</td><td>1000</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_MULTI_FINGER_GESTURES}.</td></tr>
     * <tr><td>flagRequestShortcutWarningDialogSpokenFeedback</td><td>400</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_SHORTCUT_WARNING_DIALOG_SPOKEN_FEEDBACK}.</td></tr>
     * <tr><td>flagRequestTouchExplorationMode</td><td>4</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE}.</td></tr>
     * <tr><td>flagRetrieveInteractiveWindows</td><td>40</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_RETRIEVE_INTERACTIVE_WINDOWS}.</td></tr>
     * <tr><td>flagSendMotionEvents</td><td>4000</td><td></td></tr>
     * <tr><td>flagServiceHandlesDoubleTap</td><td>800</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_SERVICE_HANDLES_DOUBLE_TAP}.</td></tr>
     * </table>
     */
    public static final int accessibilityFlags=0x01010384;
    /**
     * Whether or not this view is a heading for accessibility purposes.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int accessibilityHeading=0x01010580;
    /**
     * Indicates to accessibility services whether the user should be notified when
     * this view changes.
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>assertive</td><td>2</td><td>Accessibility services should interrupt ongoing speech to immediately
     * announce changes to this view.</td></tr>
     * <tr><td>none</td><td>0</td><td>Accessibility services should not announce changes to this view.</td></tr>
     * <tr><td>polite</td><td>1</td><td>Accessibility services should announce changes to this view.</td></tr>
     * </table>
     */
    public static final int accessibilityLiveRegion=0x010103ee;
    /**
     * The title this view should present to accessibility as a pane title.
     * See {@link android.view.View#setAccessibilityPaneTitle(CharSequence)}
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int accessibilityPaneTitle=0x0101057c;
    /**
     * Sets the id of a view after which this one is visited in accessibility traversal.
     * A screen-reader must visit the content of the other view before the content of
     * this one.
     * {@see android.view.View#setAccessibilityTraversalAfter(int)}
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int accessibilityTraversalAfter=0x010104d2;
    /**
     * Sets the id of a view before which this one is visited in accessibility traversal.
     * A screen-reader must visit the content of this view before the content of the one
     * it precedes.
     * {@see android.view.View#setAccessibilityTraversalBefore(int)}
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int accessibilityTraversalBefore=0x010104d1;
    /**
     * A preferences.xml file for authenticator-specific settings.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int accountPreferences=0x0101029f;
    /**
     * The account type this authenticator handles.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int accountType=0x0101028f;
    /**
     * The action name to assign to the Intent, as per
     * {@link android.content.Intent#setAction Intent.setAction()}.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int action=0x0101002d;
    /**
     * Custom divider drawable to use for elements in the action bar.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int actionBarDivider=0x0101039b;
    /**
     * Custom item state list drawable background for action bar items.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int actionBarItemBackground=0x0101039c;
    /**
     * Reference to a theme that should be used to inflate popups
     * shown by widgets in the action bar.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int actionBarPopupTheme=0x0101048d;
    /**
     * Size of the Action Bar, including the contextual
     * bar used to present Action Modes.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>wrap_content</td><td>0</td><td></td></tr>
     * </table>
     */
    public static final int actionBarSize=0x010102eb;
    /**
     * Reference to a style for the split Action Bar. This style
     * controls the split component that holds the menu/action
     * buttons. actionBarStyle is still used for the primary
     * bar.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int actionBarSplitStyle=0x01010388;
    /**
     * Reference to a style for the Action Bar.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int actionBarStyle=0x010102ce;
    /**
     * Reference to a style for the Action Bar Tab Bar.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int actionBarTabBarStyle=0x010102f4;
    /**
     * Default style for tabs within an action bar.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int actionBarTabStyle=0x010102f3;
    /**
     * Reference to a style for the Action Bar Tab text.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int actionBarTabTextStyle=0x010102f5;
    /**
     * Reference to a theme that should be used to inflate the
     * action bar. This will be inherited by any widget inflated
     * into the action bar.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int actionBarTheme=0x01010431;
    /**
     * Reference to a theme that should be used to inflate widgets
     * and layouts destined for the action bar. Most of the time
     * this will be a reference to the current theme, but when
     * the action bar has a significantly different contrast
     * profile than the rest of the activity the difference
     * can become important. If this is set to @null the current
     * theme will be used.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int actionBarWidgetTheme=0x01010397;
    /**
     * Default action button style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int actionButtonStyle=0x010102d8;
    /**
     * Default ActionBar dropdown style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int actionDropDownStyle=0x010102d7;
    /**
     * An optional layout to be used as an action view.
     * See {@link android.view.MenuItem#setActionView(android.view.View)}
     * for more info.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int actionLayout=0x010102fb;
    /**
     * TextAppearance style that will be applied to text that
     * appears within action menu items.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int actionMenuTextAppearance=0x01010360;
    /**
     * Color for text that appears within action menu items.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int actionMenuTextColor=0x01010361;
    /**
     * Background drawable to use for action mode UI.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int actionModeBackground=0x010102db;
    /**
     * Reference to a style for the Action Mode close button.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int actionModeCloseButtonStyle=0x010102f7;
    /**
     * Drawable to use for the close action mode button.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int actionModeCloseDrawable=0x010102dc;
    /**
     * Drawable to use for the Copy action button in Contextual Action Bar.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int actionModeCopyDrawable=0x01010312;
    /**
     * Drawable to use for the Cut action button in Contextual Action Bar.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int actionModeCutDrawable=0x01010311;
    /**
     * Drawable to use for the Find action button in WebView selection action modes.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int actionModeFindDrawable=0x0101047a;
    /**
     * Drawable to use for the Paste action button in Contextual Action Bar.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int actionModePasteDrawable=0x01010313;
    /**
     * Drawable to use for the Select all action button in Contextual Action Bar.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int actionModeSelectAllDrawable=0x0101037e;
    /**
     * Drawable to use for the Share action button in WebView selection action modes.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int actionModeShareDrawable=0x01010479;
    /**
     * Background drawable to use for action mode UI in the lower split bar.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int actionModeSplitBackground=0x0101039d;
    /**
     * Reference to a style for the Action Mode.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int actionModeStyle=0x01010394;
    /**
     * Drawable to use for the Web Search action button in WebView selection action modes.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int actionModeWebSearchDrawable=0x0101047b;
    /**
     * Reference to a style for Action Bar overflow buttons.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int actionOverflowButtonStyle=0x010102f6;
    /**
     * Reference to a style for the Action Bar menu.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int actionOverflowMenuStyle=0x01010444;
    /**
     * The name of an optional ActionProvider class to instantiate an action view
     * and perform operations such as default action for that menu item.
     * See {@link android.view.MenuItem#setActionProvider(android.view.ActionProvider)}
     * for more info.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int actionProviderClass=0x01010389;
    /**
     * The name of an optional View class to instantiate and use as an
     * action view. See {@link android.view.MenuItem#setActionView(android.view.View)}
     * for more info.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int actionViewClass=0x010102fc;
    /**
     * Drawable used as a background for activated items.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int activatedBackgroundIndicator=0x010102fd;
    /**
     * When closing the current activity, this is the animation that is
     * run on the next activity (which is entering the screen).
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int activityCloseEnterAnimation=0x010100ba;
    /**
     * When closing the current activity, this is the animation that is
     * run on the current activity (which is exiting the screen).
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int activityCloseExitAnimation=0x010100bb;
    /**
     * When opening a new activity, this is the animation that is
     * run on the next activity (which is entering the screen).
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int activityOpenEnterAnimation=0x010100b8;
    /**
     * When opening a new activity, this is the animation that is
     * run on the previous activity (which is exiting the screen).
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int activityOpenExitAnimation=0x010100b9;
    /**
     * Fully qualified class name of an activity that allows the user to manually
     * add printers to this print service.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int addPrintersActivity=0x010103e6;
    /**
     * Sets whether this ViewGroup's drawable states also include
     * its children's drawable states.  This is used, for example, to
     * make a group appear to be focused when its child EditText or button
     * is focused.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int addStatesFromChildren=0x010100f0;
    /**
     * Set this to true if you want the ImageView to adjust its bounds
     * to preserve the aspect ratio of its drawable.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int adjustViewBounds=0x0101011e;
    /**
     * Fully qualified class name of an activity with advanced print options
     * specific to this print service.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int advancedPrintOptionsActivity=0x010103f1;
    /**
     * Icon drawable to use for alerts.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int alertDialogIcon=0x01010355;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int alertDialogStyle=0x0101005d;
    /**
     * Theme to use for alert dialogs spawned from this theme.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int alertDialogTheme=0x01010309;
    /**
     * Alignment constants.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>alignBounds</td><td>0</td><td>Align the bounds of the children.
     * See {@link android.widget.GridLayout#ALIGN_BOUNDS}.</td></tr>
     * <tr><td>alignMargins</td><td>1</td><td>Align the margins of the children.
     * See {@link android.widget.GridLayout#ALIGN_MARGINS}.</td></tr>
     * </table>
     */
    public static final int alignmentMode=0x0101037a;
    /**
     * Resource representing the term "All Contacts" (for example, "All Friends" or
     * "All connections"). Optional (Default is "All Contacts").
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int allContactsName=0x010102cc;
    /**
     * If {@code true} the app's non sensitive audio can be captured by other apps with
     * {@link android.media.AudioPlaybackCaptureConfiguration} and a
     * {@link android.media.projection.MediaProjection}.
     * If {@code false} the audio played by the application will never be captured by non
     * system apps. It is equivalent to limiting
     * {@link android.media.AudioManager#setAllowedCapturePolicy(int)} to
     * {@link android.media.AudioAttributes#ALLOW_CAPTURE_BY_SYSTEM}.
     * <p>
     * Non sensitive audio is defined as audio whose {@code AttributeUsage} is
     * {@code USAGE_UNKNOWN}), {@code USAGE_MEDIA}) or {@code USAGE_GAME}).
     * All other usages like {@code USAGE_VOICE_COMMUNICATION} will not be captured.
     * <p>
     * The default value is:
     * - {@code true} for apps with targetSdkVersion >= 29 (Q).
     * - {@code false} for apps with targetSdkVersion < 29.
     * <p>
     * See {@link android.media.AudioPlaybackCaptureConfiguration} for more detail.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int allowAudioPlaybackCapture=0x01010601;
    /**
     * Whether to allow the application to participate in the backup
     * and restore infrastructure.  If this attribute is set to <code>false</code>,
     * no backup or restore of the application will ever be performed, even by a
     * full-system backup that would otherwise cause all application data to be saved
     * via adb.  The default value of this attribute is <code>true</code>.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int allowBackup=0x01010280;
    /**
     * Option to let applications specify that user data can/cannot be
     * cleared. This flag is turned on by default.
     * <p>Starting from API level 29 this flag only controls if the user can
     * clear app data from Settings. To control clearing the data after a
     * failed restore use allowClearUserDataOnFailedRestore flag.
     * <p><em>This attribute is usable only by applications
     * included in the system image. Third-party apps cannot use it.</em>
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int allowClearUserData=0x01010005;
    /**
     * @hide
     * If {@code true} the system will clear app's data if a restore operation fails.
     * This flag is turned on by default. <em>This attribute is usable only by system apps.
     * </em>
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    @android.annotation.SystemApi
    public static final int allowClearUserDataOnFailedRestore=0x01010600;
    /**
     * Whether or not allow clicks on disabled view.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int allowClickWhenDisabled=0x01010618;
    /**
     * Indicate that the activity can be launched as the embedded child of another
     * activity. Particularly in the case where the child lives in a container
     * such as a Display owned by another activity.
     * <p>The default value of this attribute is <code>false</code>.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int allowEmbedded=0x010103f5;
    /**
     * If {@code true} this app will receive tagged pointers to native heap allocations
     * from functions like malloc() on compatible devices. Note that this may not always
     * be respected due to policy or backwards compatibility reasons. See the
     * <a href="https://source.android.com/devices/tech/debug/tagged-pointers">Tagged Pointers</a>
     * document for more information on this feature.
     * The default value is {@code true}.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int allowNativeHeapPointerTagging=0x01010612;
    /**
     * Set to true to tell the SyncManager that this SyncAdapter supports
     * multiple simultaneous syncs for the same account type and authority.
     * Otherwise the SyncManager will be sure not to issue a start sync request
     * to this SyncAdapter if the SyncAdapter is already syncing another account.
     * Defaults to false.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int allowParallelSyncs=0x01010332;
    /**
     * Indicates whether the drawer can be opened/closed by a single tap
     * on the handle.  (If false, the user must drag or fling, or click
     * using the trackball, to open/close the drawer.)  Default is true.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int allowSingleTap=0x01010259;
    /**
     * Specify that an activity can be moved out of a task it is in to
     * the task it has an affinity for when appropriate.  Use with the
     * application tag (to supply a default for all activities in the
     * application), or with an activity tag (to supply a specific
     * setting for that component).
     * <p>Normally when an application is started, it is associated with
     * the task of the activity that started it and stays there for its
     * entire lifetime.  You can use the allowTaskReparenting feature to force an
     * activity to be re-parented to a different task when the task it is
     * in goes to the background.  Typically this is used to cause the
     * activities of an application to move back to the main task associated
     * with that application.  The activity is re-parented to the task
     * with the same {@link android.R.attr#taskAffinity} as it has.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int allowTaskReparenting=0x01010204;
    /**
     * Whether undo should be allowed for editable text. Defaults to true.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int allowUndo=0x010104df;
    /**
     * alpha property of the view, as a value between 0 (completely transparent) and 1
     * (completely opaque).
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int alpha=0x0101031f;
    /**
     * The alphabetic modifier key. This is the modifier when using a keyboard
     * with alphabetic keys. The values should be kept in sync with KeyEvent
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>ALT</td><td>2</td><td></td></tr>
     * <tr><td>CTRL</td><td>1000</td><td></td></tr>
     * <tr><td>FUNCTION</td><td>8</td><td></td></tr>
     * <tr><td>META</td><td>10000</td><td></td></tr>
     * <tr><td>SHIFT</td><td>1</td><td></td></tr>
     * <tr><td>SYM</td><td>4</td><td></td></tr>
     * </table>
     */
    public static final int alphabeticModifiers=0x0101054e;
    /**
     * The alphabetic shortcut key.  This is the shortcut when using a keyboard
     * with alphabetic keys.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int alphabeticShortcut=0x010101e3;
    /**
     * Defines whether the ViewGroup should always draw its children using their
     * drawing cache or not. The default value is true.
     * Deprecated: The view drawing cache was largely made obsolete with the introduction of
     * hardware-accelerated rendering in API 11.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int alwaysDrawnWithCache=0x010100ef;
    /**
     * Specify whether an acitivty's task state should always be maintained
     * by the system, or if it is allowed to reset the task to its initial
     * state in certain situations.
     * <p>Normally the system will reset a task (remove all activities from
     * the stack and reset the root activity) in certain situations when
     * the user re-selects that task from the home screen.  Typically this
     * will be done if the user hasn't visited that task for a certain
     * amount of time, such as 30 minutes.
     * <p>By setting this attribute, the user will always return to your
     * task in its last state, regardless of how they get there.  This is
     * useful, for example, in an application like the web browser where there
     * is a lot of state (such as multiple open tabs) that the application
     * would not like to lose.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int alwaysRetainTaskState=0x01010203;
    /**
     * The background color state list for the AM/PM selectors.
     * {@deprecated Use headerBackground instead.}
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    @Deprecated
    public static final int amPmBackgroundColor=0x010104a5;
    /**
     * The color for the AM/PM selectors.
     * {@deprecated Use headerTextColor instead.}
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    @Deprecated
    public static final int amPmTextColor=0x010104a4;
    /**
     * Alpha value of the ambient shadow projected by elevated views, between 0 and 1.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int ambientShadowAlpha=0x010104be;
    /**
     * Angle of the gradient, used only with linear gradient. Must be a multiple of 45 in the
     * range [0, 315].
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int angle=0x010101a0;
    /**
     * Defines whether to animate the current View when the ViewAnimation
     * is first displayed.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int animateFirstView=0x010102d5;
    /**
     * Defines whether changes in layout (caused by adding and removing items) should
     * cause a LayoutTransition to run. When this flag is set to true, a default
     * LayoutTransition object will be set on the ViewGroup container and default
     * animations will run when these layout changes occur.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int animateLayoutChanges=0x010102f2;
    /**
     * Indicates whether the drawer should be opened/closed with an animation
     * when the user clicks the handle. Default is true.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int animateOnClick=0x0101025c;
    /**
     * Animated image of the target of accessibility shortcut purpose or behavior, to help
     * users understand how the target of accessibility shortcut can help them.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int animatedImageDrawable=0x0101060a;
    /**
     * Animation to use on each child.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int animation=0x010101cd;
    /**
     * Defines whether layout animations should create a drawing cache for their
     * children. Enabling the animation cache consumes more memory and requires
     * a longer initialization but provides better performance. The animation
     * cache is enabled by default.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int animationCache=0x010100ed;
    /**
     * Sets how long a transition animation should run (in milliseconds)
     * when layout has changed.  Only relevant if animation is turned on.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int animationDuration=0x01010112;
    /**
     * The order in which the animations will be started.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>normal</td><td>0</td><td>Animations are started in the natural order.</td></tr>
     * <tr><td>random</td><td>2</td><td>Animations are started randomly.</td></tr>
     * <tr><td>reverse</td><td>1</td><td>Animations are started in the reverse order.</td></tr>
     * </table>
     */
    public static final int animationOrder=0x010101ce;
    /**
     * @deprecated Not used by the framework.
     * Timeout between frames of animation in milliseconds.
     * {@deprecated Not used by the framework}.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    @Deprecated
    public static final int animationResolution=0x0101031a;
    /**
     * Enables or disables antialiasing. Antialiasing can be used to smooth the
     * edges of a bitmap when rotated. Default value is false.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int antialias=0x0101011a;
    /**
     * Indicates whether the application can accommodate any screen
     * density. This is assumed true if targetSdkVersion is 4 or higher.
     * @deprecated Should always be true by default and not overridden.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    @Deprecated
    public static final int anyDensity=0x0101026c;
    /**
     * A drawable that can be rendered in Android's system UI for representing
     * the service.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int apduServiceBanner=0x010103ed;
    /**
     * Value is a string that specifies the Maps API Key to use.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int apiKey=0x01010211;
    /**
     * Declare the category of this app. Categories are used to cluster multiple apps
     * together into meaningful groups, such as when summarizing battery, network, or
     * disk usage. Apps should only define this value when they fit well into one of
     * the specific categories.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>accessibility</td><td>8</td><td>Apps which are primarily accessibility apps, such as screen-readers.</td></tr>
     * <tr><td>audio</td><td>1</td><td>Apps which primarily work with audio or music, such as music players.</td></tr>
     * <tr><td>game</td><td>0</td><td>Apps which are primarily games.</td></tr>
     * <tr><td>image</td><td>3</td><td>Apps which primarily work with images or photos, such as camera or gallery apps.</td></tr>
     * <tr><td>maps</td><td>6</td><td>Apps which are primarily maps apps, such as navigation apps.</td></tr>
     * <tr><td>news</td><td>5</td><td>Apps which are primarily news apps, such as newspapers, magazines, or sports apps.</td></tr>
     * <tr><td>productivity</td><td>7</td><td>Apps which are primarily productivity apps, such as cloud storage or workplace apps.</td></tr>
     * <tr><td>social</td><td>4</td><td>Apps which are primarily social apps, such as messaging, communication, email, or social network apps.</td></tr>
     * <tr><td>video</td><td>2</td><td>Apps which primarily work with video or movies, such as streaming video apps.</td></tr>
     * </table>
     */
    public static final int appCategory=0x01010545;
    /**
     * The (optional) fully-qualified name for a subclass of
     * {@link android.app.AppComponentFactory} that the system uses to instantiate
     * every other manifest defined class. Most applications
     * don't need this attribute. If it's not specified, the system
     * instantiates items without it.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int appComponentFactory=0x0101057a;
    /**
     * Attribution tag to be used for permission sub-attribution if a
     * permission is checked in  {@link android.content.Context#sendBroadcast(Intent, String)}.
     * Multiple tags can be specified separated by '|'.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int attributionTags=0x01010642;
    /**
     * Whether attributions provided are meant to be user-visible.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int attributionsAreUserVisible=0x0101064b;
    /**
     * Name of the author and/or source/collection of this component, for example,
     * Art Collection, Picasso.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int author=0x010102b4;
    /**
     * Specify the authorities under which this content provider can be
     * found.  Multiple authorities may be supplied by separating them
     * with a semicolon.  Authority names should use a Java-style naming
     * convention (such as <code>com.google.provider.MyProvider</code>)
     * in order to avoid conflicts.  Typically this name is the same
     * as the class implementation describing the provider's data structure.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int authorities=0x01010018;
    /**
     * The view id of the AppWidget subview which should be auto-advanced.
     * by the widget's host.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int autoAdvanceViewId=0x0101030f;
    /**
     * Default AutoCompleteTextView style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int autoCompleteTextViewStyle=0x0101006b;
    /**
     * Controls whether links such as urls and email addresses are
     * automatically found and converted to clickable links.  The default
     * value is "none", disabling this feature.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>all</td><td>f</td><td>Match all patterns (equivalent to web|email|phone|map).</td></tr>
     * <tr><td>email</td><td>2</td><td>Match email addresses.</td></tr>
     * <tr><td>map</td><td>8</td><td>Match map addresses.
     * Deprecated: see {@link android.text.util.Linkify#MAP_ADDRESSES}.</td></tr>
     * <tr><td>none</td><td>0</td><td>Match no patterns (default).</td></tr>
     * <tr><td>phone</td><td>4</td><td>Match phone numbers.</td></tr>
     * <tr><td>web</td><td>1</td><td>Match Web URLs.</td></tr>
     * </table>
     */
    public static final int autoLink=0x010100b0;
    /**
     * Indicates if the drawable needs to be mirrored when its layout direction is
     * RTL (right-to-left).  See
     * {@link android.graphics.drawable.Drawable#setAutoMirrored}.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int autoMirrored=0x010103ea;
    /**
     * Tasks launched by activities with this attribute will remain in the recent tasks
     * list until the last activity in the task is completed.  When that happens the task
     * will be automatically removed from the recent tasks list.  This overrides the caller's
     * use of {@link android.content.Intent#FLAG_ACTIVITY_RETAIN_IN_RECENTS
     * Intent.FLAG_ACTIVITY_RETAIN_IN_RECENTS}
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int autoRemoveFromRecents=0x01010447;
    /**
     * No longer used. Declaring this does nothing
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>allowed</td><td>0</td><td>No longer used</td></tr>
     * <tr><td>disallowed</td><td>2</td><td>No longer used</td></tr>
     * <tr><td>discouraged</td><td>1</td><td>No longer used</td></tr>
     * </table>
     */
    public static final int autoRevokePermissions=0x01010613;
    /**
     * The maximum text size constraint to be used when auto-sizing text.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int autoSizeMaxTextSize=0x01010546;
    /**
     * The minimum text size constraint to be used when auto-sizing text.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int autoSizeMinTextSize=0x01010538;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int autoSizePresetSizes=0x01010537;
    /**
     * Specify the auto-size step size if <code>autoSizeTextType</code> is set to
     * <code>uniform</code>. The default is 1px. Overwrites
     * <code>autoSizePresetSizes</code> if set.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int autoSizeStepGranularity=0x01010536;
    /**
     * Specify the type of auto-size. Note that this feature is not supported by EditText,
     * works only for TextView.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>none</td><td>0</td><td>No auto-sizing (default).</td></tr>
     * <tr><td>uniform</td><td>1</td><td>Uniform horizontal and vertical text size scaling to fit within the
     * container.</td></tr>
     * </table>
     */
    public static final int autoSizeTextType=0x01010535;
    /**
     * When true, automatically start animating.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int autoStart=0x010102b5;
    /**
     * If set, specifies that this TextView has a textual input method
     * and automatically corrects some common spelling errors.
     * The default is "false".
     * {@deprecated Use inputType instead.}
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    @Deprecated
    public static final int autoText=0x0101016a;
    /**
     * If provided and <code>true</code>, URLs entered in the search dialog while searching
     * within this activity would be detected and treated as URLs (show a 'go' button in the
     * keyboard and invoke the browser directly when user launches the URL instead of passing
     * the URL to the activity). If set to <code>false</code> any URLs entered are treated as
     * normal query text.
     * The default value is <code>false</code>. <i>Optional attribute.</i>.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int autoUrlDetect=0x0101028c;
    /**
     * Specify whether an activity intent filter will need to be verified thru its set
     * of data URIs. This will only be used when the Intent's action is set to
     * {@link android.content.Intent#ACTION_VIEW Intent.ACTION_VIEW} and the Intent's category is
     * set to {@link android.content.Intent#CATEGORY_BROWSABLE Intent.CATEGORY_BROWSABLE} and the
     * intern filter data scheme is set to "http" or "https". When set to true, the intent filter
     * will need to use its data tag for getting the URIs to verify with.
     * For each URI, an HTTPS network request will be done to <code>/.well-known/statements.json</code>
     * host to verify that the web site is okay with the app intercepting the URI.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int autoVerify=0x010104ee;
    /**
     * Describes the content of a view so that a autofill service can fill in the appropriate
     * data. Multiple hints can be combined in a comma separated list or an array of strings
     * to mean e.g. emailAddress or postalAddress.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int autofillHints=0x01010556;
    /**
     * Drawable to be drawn over the view to mark it as autofilled
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int autofilledHighlight=0x01010568;
    /**
     * A drawable to use as the background.  This can be either a reference
     * to a full drawable resource (such as a PNG image, 9-patch,
     * XML state list description, etc), or a solid color such as "#ff000000"
     * (black).
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int background=0x010100d4;
    /**
     * Default background dim amount when a menu, dialog, or something similar pops up.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int backgroundDimAmount=0x01010032;
    /**
     * Control whether dimming behind the window is enabled.  The default
     * theme does not set this value, meaning it is based on whether the
     * window is floating.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int backgroundDimEnabled=0x0101021f;
    /**
     * Specifies a background drawable for the bottom component of a split action bar.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int backgroundSplit=0x0101038b;
    /**
     * Specifies a background drawable for a second stacked row of the action bar.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int backgroundStacked=0x0101038a;
    /**
     * Tint to apply to the background.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int backgroundTint=0x0101046b;
    /**
     * Blending mode used to apply the background tint.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     */
    public static final int backgroundTintMode=0x0101046c;
    /**
     * The name of the class subclassing <code>BackupAgent</code> to manage
     * backup and restore of the application's data on external storage.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int backupAgent=0x0101027f;
    /**
     * Indicates that full-data backup operations for this application may
     * be performed even if the application is in a foreground-equivalent
     * state.  <em>Use with caution!</em>  Setting this flag to <code>true</code>
     * can impact app behavior while the user is interacting with the device.
     * <p>If unspecified, the default value of this attribute is <code>false</code>,
     * which means that the OS will avoid backing up the application while it is
     * running in the foreground (such as a music app that is actively playing
     * music via a service in the startForeground() state).
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int backupInForeground=0x0101051a;
    /**
     * A Drawable resource providing an extended graphical banner for its
     * associated item. Use with the application tag (to supply a default
     * banner for all application activities), or with the activity, tag to
     * supply a banner for a specific activity.
     * <p>The given banner will be used to display to the user a graphical
     * representation of an activity in the Leanback application launcher.
     * Since banners are displayed only in the Leanback launcher, they should
     * only be used with activities (and applications) that support Leanback
     * mode. These are activities that handle Intents of category
     * {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
     * Intent.CATEGORY_LEANBACK_LAUNCHER}.
     * <p>This must be a reference to a Drawable resource containing the image definition.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int banner=0x010103f2;
    /**
     * The offset of the baseline within this view. See {see android.view.View#getBaseline}
     * for details
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int baseline=0x0101031c;
    /**
     * If true, the image view will be baseline aligned with based on its
     * bottom edge.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int baselineAlignBottom=0x01010122;
    /**
     * When set to false, prevents the layout from aligning its children's
     * baselines. This attribute is particularly useful when the children
     * use different values for gravity. The default value is true.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int baselineAligned=0x01010126;
    /**
     * When a linear layout is part of another layout that is baseline
     * aligned, it can specify which of its children to baseline align to
     * (that is, which child TextView).
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int baselineAlignedChildIndex=0x01010127;
    /**
     * Drawable to use as the icon bitmap.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int bitmap=0x01010516;
    /**
     * Style for buttons without an explicit border, often used in groups.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int borderlessButtonStyle=0x0101032b;
    /**
     * Amount of bottom padding inside the gradient shape.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int bottom=0x010101b0;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int bottomBright=0x010100cd;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int bottomDark=0x010100c9;
    /**
     * Radius of the bottom left corner.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int bottomLeftRadius=0x010101ab;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int bottomMedium=0x010100ce;
    /**
     * Extra offset for the handle at the bottom of the SlidingDrawer.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int bottomOffset=0x01010257;
    /**
     * Radius of the bottom right corner.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int bottomRightRadius=0x010101ac;
    /**
     * The short title for the bread crumb of this item.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int breadCrumbShortTitle=0x01010304;
    /**
     * The title for the bread crumb of this item.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int breadCrumbTitle=0x01010303;
    /**
     * Break strategy (control over paragraph layout).
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>balanced</td><td>2</td><td>Line breaking strategy balances line lengths.</td></tr>
     * <tr><td>high_quality</td><td>1</td><td>Line breaking uses high-quality strategy, including hyphenation.</td></tr>
     * <tr><td>simple</td><td>0</td><td>Line breaking uses simple strategy.</td></tr>
     * </table>
     */
    public static final int breakStrategy=0x010104dd;
    /**
     * Determines the minimum type that getText() will return.
     * The default is "normal".
     * Note that EditText and LogTextBox always return Editable,
     * even if you specify something less powerful here.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>editable</td><td>2</td><td>Can only return Spannable and Editable.</td></tr>
     * <tr><td>normal</td><td>0</td><td>Can return any CharSequence, possibly a
     * Spanned one if the source text was Spanned.</td></tr>
     * <tr><td>spannable</td><td>1</td><td>Can only return Spannable.</td></tr>
     * </table>
     */
    public static final int bufferType=0x0101014e;
    /**
     * Drawable used for the button graphic (for example, checkbox and radio button).
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int button=0x01010107;
    /**
     * Style for buttons within button bars.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int buttonBarButtonStyle=0x0101032f;
    /**
     * Style for the "negative" buttons within button bars.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int buttonBarNegativeButtonStyle=0x0101048b;
    /**
     * Style for the "neutral" buttons within button bars.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int buttonBarNeutralButtonStyle=0x0101048a;
    /**
     * Style for the "positive" buttons within button bars.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int buttonBarPositiveButtonStyle=0x01010489;
    /**
     * Style for button bars.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int buttonBarStyle=0x0101032e;
    /**
     * Corner radius of buttons.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int buttonCornerRadius=0x01010575;
    /**
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
     * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
     * </table>
     */
    public static final int buttonGravity=0x010104fe;
    /**
     * Normal Button style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int buttonStyle=0x01010048;
    /**
     * Button style to inset into an EditText.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int buttonStyleInset=0x0101004a;
    /**
     * Small Button style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int buttonStyleSmall=0x01010049;
    /**
     * ToggleButton style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int buttonStyleToggle=0x0101004b;
    /**
     * Tint to apply to the button graphic.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int buttonTint=0x0101046f;
    /**
     * Blending mode used to apply the button graphic tint.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     */
    public static final int buttonTintMode=0x01010470;
    /**
     * Indicates that this list will always be drawn on top of solid, single-color
     * opaque background. This allows the list to optimize drawing.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int cacheColorHint=0x01010101;
    /**
     * The text color list of the calendar.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int calendarTextColor=0x0101049b;
    /**
     * Whether the calendar view is shown. Only valid for "spinner" mode.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int calendarViewShown=0x0101034c;
    /**
     * The CalendarView style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int calendarViewStyle=0x0101035d;
    /**
     * Attribute whether the accessibility service wants to be able to control
     * display magnification.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int canControlMagnification=0x01010507;
    /**
     * Attribute whether the TV input service can pause recording programs.
     * This value can be changed at runtime by calling
     * {@link android.media.tv.TvInputManager#updateTvInputInfo(android.media.tv.TvInputInfo)}
     * .
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int canPauseRecording=0x0101061a;
    /**
     * Attribute whether the accessibility service wants to be able to perform gestures.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int canPerformGestures=0x0101050d;
    /**
     * Attribute whether the TV input service can record programs. This value can be changed
     * at runtime by calling
     * {@link android.media.tv.TvInputManager#updateTvInputInfo(android.media.tv.TvInputInfo)}.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int canRecord=0x0101051c;
    /**
     * Attribute whether the accessibility service wants to be able to request enhanced
     * web accessibility enhancements.
     * {@deprecated Not used by the framework}
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    @Deprecated
    public static final int canRequestEnhancedWebAccessibility=0x010103d8;
    /**
     * Attribute whether the accessibility service wants to be able to request to
     * filter key events.
     * <p>
     * Required to allow setting the {@link android.accessibilityservice
     * #AccessibilityServiceInfo#FLAG_REQUEST_FILTER_KEY_EVENTS} flag.
     * </p>
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int canRequestFilterKeyEvents=0x010103d9;
    /**
     * Attribute whether the accessibility service wants to be able to capture gestures from
     * the fingerprint sensor.
     * <p>
     * Required to allow setting the {@link android.accessibilityservice
     * #AccessibilityServiceInfo#FLAG_REQUEST_FINGERPRINT_GESTURES} flag to have any effect.
     * </p>
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int canRequestFingerprintGestures=0x0101054d;
    /**
     * Attribute whether the accessibility service wants to be able to request touch
     * exploration mode in which touched items are spoken aloud and the UI can be
     * explored via gestures.
     * <p>
     * Required to allow setting the {@link android.accessibilityservice
     * #AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE} flag.
     * </p>
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int canRequestTouchExplorationMode=0x010103d7;
    /**
     * Attribute whether the accessibility service wants to be able to retrieve the
     * active window content. This setting cannot be changed at runtime.
     * <p>
     * Required to allow setting the {@link android.accessibilityservice
     * #AccessibilityServiceInfo#FLAG_RETRIEVE_INTERACTIVE_WINDOWS} flag.
     * </p>
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int canRetrieveWindowContent=0x01010385;
    /**
     * Attribute whether the accessibility service wants to be able to take screenshot.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int canTakeScreenshot=0x0101060f;
    /**
     * A styled string, specifying the style to be used for showing
     * inline candidate text when composing with an input method.  The
     * text itself will be ignored, but the style spans will be applied
     * to the candidate text as it is edited.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int candidatesTextStyleSpans=0x01010230;
    /**
     * Declare that this application can't participate in the normal
     * state save/restore mechanism.  Since it is not able to save and
     * restore its state on demand,
     * it can not participate in the normal activity lifecycle.  It will
     * not be killed while in the background; the user must explicitly
     * quit it.  Only one such app can be running at a time; if the user
     * tries to launch a second such app, they will be prompted
     * to quit the first before doing so.  While the
     * application is running, the user will be informed of this.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int cantSaveState=0x0101056e;
    /**
     * If set, specifies that this TextView has a textual input method
     * and should automatically capitalize what the user types.
     * The default is "none".
     * {@deprecated Use inputType instead.}
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>characters</td><td>3</td><td>Capitalize every character.</td></tr>
     * <tr><td>none</td><td>0</td><td>Don't automatically capitalize anything.</td></tr>
     * <tr><td>sentences</td><td>1</td><td>Capitalize the first word of each sentence.</td></tr>
     * <tr><td>words</td><td>2</td><td>Capitalize the first letter of every word.</td></tr>
     * </table>
     */
    @Deprecated
    public static final int capitalize=0x01010169;
    /**
     * The category attribute will be used by the Android platform to present
     * multiple applications that register ISO 7816 Application IDs (AIDs) in the
     * same category uniformly.
     * Additionally, when a category is specified, Android will ensure that either
     * all AIDs in this group are routed to this application, or none at all.
     * This attribute is optional.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int category=0x010103e8;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int centerBright=0x010100cc;
    /**
     * Optional center color. For linear gradients, use centerX or centerY to place the center
     * color.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int centerColor=0x0101020b;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int centerDark=0x010100c8;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int centerMedium=0x010100cf;
    /**
     * X-position of the center point of the gradient within the shape as a fraction of the
     * width. The default value is 0.5.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int centerX=0x010101a2;
    /**
     * Y-position of the center point of the gradient within the shape as a fraction of the
     * height. The default value is 0.5.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int centerY=0x010101a3;
    /**
     * Optional SHA-256 digest of the package signing certificate.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int certDigest=0x01010548;
    /**
     * Default style for CheckBoxPreference.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int checkBoxPreferenceStyle=0x0101008f;
    /**
     * Drawable used for the check mark graphic.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int checkMark=0x01010108;
    /**
     * Tint to apply to the check mark.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int checkMarkTint=0x010104a7;
    /**
     * Blending mode used to apply the check mark tint.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     */
    public static final int checkMarkTintMode=0x010104a8;
    /**
     * Whether the item is capable of displaying a check mark.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int checkable=0x010101e5;
    /**
     * Whether the items are capable of displaying a check mark.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>all</td><td>1</td><td>The items are all checkable.</td></tr>
     * <tr><td>none</td><td>0</td><td>The items are not checkable.</td></tr>
     * <tr><td>single</td><td>2</td><td>The items are checkable and there will only be a single checked item in
     * this group.</td></tr>
     * </table>
     */
    public static final int checkableBehavior=0x010101e0;
    /**
     * Default Checkbox style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int checkboxStyle=0x0101006c;
    /**
     * Indicates the initial checked state of this button.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int checked=0x01010106;
    /**
     * The id of the child radio button that should be checked by default
     * within this radio group.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int checkedButton=0x01010148;
    /**
     * Default CheckedTextView style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int checkedTextViewStyle=0x010103c8;
    /**
     * Drawable or color that is used as a divider for children. (It will drawn
     * below and above child items.) The height of this will be the same as
     * the height of the normal list item divider.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int childDivider=0x01010111;
    /**
     * Indicator shown beside the child View. This can be a stateful Drawable.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int childIndicator=0x0101010c;
    /**
     * The end bound for a child's indicator.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int childIndicatorEnd=0x010103d4;
    /**
     * The left bound for a child's indicator.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int childIndicatorLeft=0x0101010f;
    /**
     * The right bound for a child's indicator.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int childIndicatorRight=0x01010110;
    /**
     * The start bound for a child's indicator.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int childIndicatorStart=0x010103d3;
    /**
     * Defines the choice behavior for the view. By default, lists do not have
     * any choice behavior. By setting the choiceMode to singleChoice, the list
     * allows up to one item to be in a chosen state. By setting the choiceMode to
     * multipleChoice, the list allows any number of items to be chosen.
     * Finally, by setting the choiceMode to multipleChoiceModal the list allows
     * any number of items to be chosen in a special selection mode.
     * The application will supply a
     * {@link android.widget.AbsListView.MultiChoiceModeListener} using
     * {@link android.widget.AbsListView#setMultiChoiceModeListener} to control the
     * selection mode. This uses the {@link android.view.ActionMode} API.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>multipleChoice</td><td>2</td><td>The list allows multiple choices.</td></tr>
     * <tr><td>multipleChoiceModal</td><td>3</td><td>The list allows multiple choices in a custom selection mode.</td></tr>
     * <tr><td>none</td><td>0</td><td>Normal list that does not indicate choices.</td></tr>
     * <tr><td>singleChoice</td><td>1</td><td>The list allows up to one choice.</td></tr>
     * </table>
     */
    public static final int choiceMode=0x0101012b;
    /**
     * The classname of the classloader used to load the application's classes
     * from its APK. The APK in question can either be the 'base' APK or any
     * of the application's 'split' APKs if it's using a feature split.
     * <p>
     * The supported values for this attribute are
     * <code>dalvik.system.PathClassLoader</code> and
     * <code>dalvik.system.DelegateLastClassLoader</code>. If unspecified,
     * the default value of this attribute is <code>dalvik.system.PathClassLoader</code>.
     * If an unknown classloader is provided, a PackageParserException with cause
     * <code>PackageManager.INSTALL_PARSE_FAILED_MANIFEST_MALFORMED</code> will be
     * thrown and the app will not be installed.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int classLoader=0x0101056b;
    /**
     * Specify whether an activity's task should be cleared when it
     * is re-launched from the home screen.  As a result, every time the
     * user starts the task, they will be brought to its root activity,
     * regardless of whether they used BACK or HOME to last leave it.
     * This flag only applies to activities that
     * are used to start the root of a new task.
     * <p>An example of the use of this flag would be for the case where
     * a user launches activity A from home, and from there goes to
     * activity B.  They now press home, and then return to activity A.
     * Normally they would see activity B, since that is what they were
     * last doing in A's task.  However, if A has set this flag to true,
     * then upon going to the background all of the tasks on top of it (B
     * in this case) are removed, so when the user next returns to A they
     * will restart at its original activity.
     * <p>When this option is used in conjunction with
     * {@link android.R.attr#allowTaskReparenting}, the allowTaskReparenting trumps the
     * clear.  That is, all activities above the root activity of the
     * task will be removed: those that have an affinity will be moved
     * to the task they are associated with, otherwise they will simply
     * be dropped as described here.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int clearTaskOnLaunch=0x01010015;
    /**
     * Defines whether this view reacts to click events.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int clickable=0x010100e5;
    /**
     * Defines whether a child is limited to draw inside of its bounds or not.
     * This is useful with animations that scale the size of the children to more
     * than 100% for instance. In such a case, this property should be set to false
     * to allow the children to draw outside of their bounds. The default value of
     * this property is true.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int clipChildren=0x010100ea;
    /**
     * The orientation for the clip.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>horizontal</td><td>1</td><td>Clip the drawable horizontally.</td></tr>
     * <tr><td>vertical</td><td>2</td><td>Clip the drawable vertically.</td></tr>
     * </table>
     */
    public static final int clipOrientation=0x0101020a;
    /**
     * <p>Whether the View's Outline should be used to clip the contents of the View.
     * <p>Only a single non-rectangular clip can be applied on a View at any time. Circular
     * clips from a
     * {@link android.view.ViewAnimationUtils#createCircularReveal(View, int, int, float,
     * float)} circular reveal animation take priority over Outline clipping, and child
     * Outline clipping takes priority over Outline clipping done by a parent.
     * <p>Note that this flag will only be respected if the View's Outline returns true from
     * {@link android.graphics.Outline#canClip()}.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int clipToOutline=0x01010628;
    /**
     * Defines whether the ViewGroup will clip its children and resize (but not clip) any
     * EdgeEffect to its padding, if padding is not zero. This property is set to true by
     * default.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int clipToPadding=0x010100eb;
    /**
     * Close button icon.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int closeIcon=0x01010481;
    /**
     * The unicode value or comma-separated values that this key outputs.
     * {@deprecated Copy this definition into your own application project.}
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     * <p>May be an integer value, such as "<code>100</code>".
     */
    @Deprecated
    public static final int codes=0x01010242;
    /**
     * The zero-based index of the columns to collapse. The column indices
     * must be separated by a comma: 1, 2, 5. Illegal and duplicate
     * indices are ignored.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int collapseColumns=0x0101014b;
    /**
     * Text to set as the content description for the collapse button.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int collapseContentDescription=0x010104d0;
    /**
     * Icon drawable to use for the collapse button.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int collapseIcon=0x010104ff;
    /**
     * Solid color for the gradient shape.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int color=0x010101a5;
    /**
     * Bright complement to the primary branding color. By default, this is the color applied
     * to framework controls (via colorControlActivated).
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int colorAccent=0x01010435;
    /**
     * Default highlight color for items that are
     * activated. (Activated meaning persistent selection.)
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int colorActivatedHighlight=0x01010390;
    /**
     * Default color of background imagery, ex. full-screen windows.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int colorBackground=0x01010031;
    /**
     * This is a hint for a solid color that can be used for caching
     * rendered views.  This should be the color of the background when
     * there is a solid background color; it should be null when the
     * background is a texture or translucent.  When a device is able
     * to use accelerated drawing (thus setting state_accelerated), the
     * cache hint is ignored and always assumed to be transparent.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int colorBackgroundCacheHint=0x010102ab;
    /**
     * Default color of background imagery for floating components, ex. dialogs, popups, and cards.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int colorBackgroundFloating=0x010104e2;
    /**
     * The color applied to framework buttons in their normal state.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int colorButtonNormal=0x0101042b;
    /**
     * The color applied to framework controls in their activated (ex. checked) state.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int colorControlActivated=0x0101042a;
    /**
     * The color applied to framework control highlights (ex. ripples, list selectors).
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int colorControlHighlight=0x0101042c;
    /**
     * The color applied to framework controls in their normal state.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int colorControlNormal=0x01010429;
    /**
     * The color applied to the edge effect on scrolling containers.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int colorEdgeEffect=0x010104ce;
    /**
     * Color used for error states and things that need to be drawn to
     * the users attention..
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int colorError=0x01010543;
    /**
     * Default highlight color for items that are
     * focused. (Focused meaning cursor-based selection.)
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int colorFocusedHighlight=0x0101038f;
    /**
     * Default color of foreground imagery.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int colorForeground=0x01010030;
    /**
     * Default color of foreground imagery on an inverted background.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int colorForegroundInverse=0x01010206;
    /**
     * Default highlight color for items that are long-pressed.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int colorLongPressedHighlight=0x0101038e;
    /**
     * Specify the color mode the activity desires. The requested color mode may be ignored
     * depending on the capabilities of the display the activity is displayed on.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>default</td><td>0</td><td>The default color mode (typically sRGB, low-dynamic range).</td></tr>
     * <tr><td>hdr</td><td>2</td><td>High dynamic range color mode.</td></tr>
     * <tr><td>wideColorGamut</td><td>1</td><td>Wide color gamut color mode.</td></tr>
     * </table>
     */
    public static final int colorMode=0x0101054a;
    /**
     * Default highlight color for items in multiple selection
     * mode.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int colorMultiSelectHighlight=0x01010391;
    /**
     * Default highlight color for items that are pressed.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int colorPressedHighlight=0x0101038d;
    /**
     * The primary branding color for the app. By default, this is the color applied to the
     * action bar background.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int colorPrimary=0x01010433;
    /**
     * Dark variant of the primary branding color. By default, this is the color applied to
     * the status bar (via statusBarColor) and navigation bar (via navigationBarColor).
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int colorPrimaryDark=0x01010434;
    /**
     * The secondary branding color for the app.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int colorSecondary=0x01010530;
    /**
     * The maximum number of columns to create when automatically positioning children.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int columnCount=0x01010377;
    /**
     * Fraction of the animation duration used to delay the beginning of
     * the animation of each column.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int columnDelay=0x010101cf;
    /**
     * When set to true, forces column boundaries to appear in the same order
     * as column indices.
     * The default is true.
     * See {@link android.widget.GridLayout#setColumnOrderPreserved(boolean)}.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int columnOrderPreserved=0x01010378;
    /**
     * Specifies the fixed width for each column.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int columnWidth=0x01010117;
    /**
     * Commit icon shown in the query suggestion row.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int commitIcon=0x01010485;
    /**
     * Starting with {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2},
     * this is the new way to specify the largest screens an application is
     * compatible with.  This attribute provides the maximum
     * "smallest screen width" (as per the -swNNNdp resource configuration)
     * that the application is designed for.  If this value is smaller than
     * the "smallest screen width" of the device it is running on, the user
     * is offered to run it in a compatibility mode that emulates a
     * smaller screen and zooms it to fit the screen. Currently the compatibility mode only
     * emulates phone screens with a 320dp width, so compatibility mode is not applied if the
     * value for compatibleWidthLimitDp is larger than 320.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int compatibleWidthLimitDp=0x01010365;
    /**
     * @hide For use by platform and tools only. Developers should not specify this value.
     * The user-visible SDK version (ex. 26) of the framework against which the application was
     * compiled. This attribute is automatically specified by the Android build tools and should
     * NOT be manually specified.
     * <p>
     * This attribute is the compile-time equivalent of
     * {@link android.os.Build.VERSION#SDK_INT Build.VERSION.SDK_INT}.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int compileSdkVersion=0x01010572;
    /**
     * @hide For use by platform and tools only. Developers should not specify this value.
     * The development codename (ex. "O") of the framework against which the application was
     * compiled, or "REL" if the application was compiled against a release build. This attribute
     * is automatically specified by the Android build tools and should NOT be manually
     * specified.
     * <p>
     * This attribute is the compile-time equivalent of
     * {@link android.os.Build.VERSION#CODENAME Build.VERSION.CODENAME}.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int compileSdkVersionCodename=0x01010573;
    /**
     * Defines the hint displayed in the drop down menu.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int completionHint=0x01010172;
    /**
     * Defines the hint view displayed in the drop down menu.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int completionHintView=0x01010173;
    /**
     * Defines the number of characters that the user must type before
     * completion suggestions are displayed in a drop down menu.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int completionThreshold=0x01010174;
    /**
     * Specify one or more configuration changes that the activity will
     * handle itself.  If not specified, the activity will be restarted
     * if any of these configuration changes happen in the system.  Otherwise,
     * the activity will remain running and its
     * {@link android.app.Activity#onConfigurationChanged Activity.onConfigurationChanged}
     * method called with the new configuration.
     * <p>Note that all of these configuration changes can impact the
     * resource values seen by the application, so you will generally need
     * to re-retrieve all resources (including view layouts, drawables, etc)
     * to correctly handle any configuration change.
     * <p>These values must be kept in sync with those in
     * {@link android.content.pm.ActivityInfo} and
     * include/utils/ResourceTypes.h.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>colorMode</td><td>4000</td><td>The color mode of the screen has changed (color gamut or dynamic range).</td></tr>
     * <tr><td>density</td><td>1000</td><td>The display density has changed. This might be caused by the user
     * specifying a different display scale, or it might be caused by a
     * different display being activated.</td></tr>
     * <tr><td>fontScale</td><td>40000000</td><td>The font scaling factor has changed, that is the user has
     * selected a new global font size.</td></tr>
     * <tr><td>fontWeightAdjustment</td><td>10000000</td><td>The font weight adjustment value has changed. Used to reflect the user increasing font
     * weight.</td></tr>
     * <tr><td>keyboard</td><td>10</td><td>The keyboard type has changed, for example the user has plugged
     * in an external keyboard.</td></tr>
     * <tr><td>keyboardHidden</td><td>20</td><td>The keyboard or navigation accessibility has changed, for example
     * the user has slid the keyboard out to expose it.  Note that
     * despite its name, this applied to any accessibility: keyboard
     * or navigation.</td></tr>
     * <tr><td>layoutDirection</td><td>2000</td><td>The layout direction has changed. For example going from LTR to RTL.</td></tr>
     * <tr><td>locale</td><td>4</td><td>The locale has changed, that is the user has selected a new
     * language that text should be displayed in.</td></tr>
     * <tr><td>mcc</td><td>1</td><td>The IMSI MCC has changed, that is a SIM has been detected and
     * updated the Mobile Country Code. By default from Android O, we
     * don't recreate the activity even the app doesn't specify mcc in
     * configChanges. If the app wants to recreate the activity, specify
     * mcc in recreateOnConfigChanges.</td></tr>
     * <tr><td>mnc</td><td>2</td><td>The IMSI MNC has changed, that is a SIM has been detected and
     * updated the Mobile Network Code. By default from Android O, we
     * don't recreate the activity even the app doesn't specify mnc in
     * configChanges. If the app wants to recreate the acvitity, specify
     * mnc in recreateOnConfigChanges.</td></tr>
     * <tr><td>navigation</td><td>40</td><td>The navigation type has changed.  Should never normally happen.</td></tr>
     * <tr><td>orientation</td><td>80</td><td>The screen orientation has changed, that is the user has
     * rotated the device.</td></tr>
     * <tr><td>screenLayout</td><td>100</td><td>The screen layout has changed.  This might be caused by a
     * different display being activated.</td></tr>
     * <tr><td>screenSize</td><td>400</td><td>The current available screen size has changed.  If applications don't
     * target at least {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2}
     * then the activity will always handle this itself (the change
     * will not result in a restart).  This represents a change in the
     * currently available size, so will change when the user switches
     * between landscape and portrait.</td></tr>
     * <tr><td>smallestScreenSize</td><td>800</td><td>The physical screen size has changed.  If applications don't
     * target at least {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2}
     * then the activity will always handle this itself (the change
     * will not result in a restart).  This represents a change in size
     * regardless of orientation, so will only change when the actual
     * physical screen size has changed such as switching to an external
     * display.</td></tr>
     * <tr><td>touchscreen</td><td>8</td><td>The touchscreen has changed.  Should never normally happen.</td></tr>
     * <tr><td>uiMode</td><td>200</td><td>The global user interface mode has changed.  For example,
     * going in or out of car mode, night mode changing, etc.</td></tr>
     * </table>
     */
    public static final int configChanges=0x0101001f;
    /**
     * A class name in the AppWidget's package to be launched to configure.
     * If not supplied, then no activity will be launched.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int configure=0x0101025d;
    /**
     * If true, the drawable's reported internal size will remain
     * constant as the state changes; the size is the maximum of all
     * of the states.  If false, the size will vary based on the
     * current state.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int constantSize=0x01010196;
    /**
     * Identifier for the child that represents the drawer's content.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int content=0x0101025b;
    /**
     * The age associated with the content rating. The content of this rating is suitable for
     * people of this age or above.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int contentAgeHint=0x010104b9;
    /**
     * the authority of a content provider.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int contentAuthority=0x01010290;
    /**
     * The content description associated with the item.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int contentDescription=0x01010273;
    /**
     * Minimum inset for content views within a bar. Navigation buttons and
     * menu views are excepted. Only valid for some themes and configurations.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int contentInsetEnd=0x01010454;
    /**
     * Minimum inset for content views within a bar when actions from a menu
     * are present. Only valid for some themes and configurations.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int contentInsetEndWithActions=0x01010523;
    /**
     * Minimum inset for content views within a bar. Navigation buttons and
     * menu views are excepted. Only valid for some themes and configurations.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int contentInsetLeft=0x01010455;
    /**
     * Minimum inset for content views within a bar. Navigation buttons and
     * menu views are excepted. Only valid for some themes and configurations.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int contentInsetRight=0x01010456;
    /**
     * Minimum inset for content views within a bar. Navigation buttons and
     * menu views are excepted. Only valid for some themes and configurations.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int contentInsetStart=0x01010453;
    /**
     * Minimum inset for content views within a bar when a navigation button
     * is present, such as the Up button. Only valid for some themes and configurations.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int contentInsetStartWithNavigation=0x01010522;
    /**
     * Defines whether this view reacts to context click events.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int contextClickable=0x010104e7;
    /**
     * Title of the uri that specifies a link for further context of this wallpaper,
     * for example, Explore collection.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int contextDescription=0x0101052e;
    /**
     * Default context menu PopupMenu style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int contextPopupMenuStyle=0x01010501;
    /**
     * Uri that specifies a link for further context of this wallpaper, for example,
     * http://www.picasso.org.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int contextUri=0x0101052d;
    /**
     * The x coordinate of the first control point of the cubic Bezier.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int controlX1=0x010103fc;
    /**
     * The x coordinate of the second control point of the cubic Bezier.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int controlX2=0x010103fe;
    /**
     * The y coordinate of the first control point of the cubic Bezier.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int controlY1=0x010103fd;
    /**
     * The y coordinate of the second control point of the cubic Bezier.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int controlY2=0x010103ff;
    /**
     * Specifies whether this Chronometer counts down or counts up from the base.
     * If not specified this is false and the Chronometer counts up.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int countDown=0x0101051b;
    /**
     * The country code associated with the content rating system, which consists of two
     * uppercase letters that conform to the ISO 3166 standard.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int country=0x010104ba;
    /**
     * If true, the image will be cropped to fit within its padding.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int cropToPadding=0x01010123;
    /**
     * If {@code true} indicates that this application is capable of presenting a unified
     * interface representing multiple profiles.
     * The default value is {@code false}.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int crossProfile=0x0101060e;
    /**
     * Makes the cursor visible (the default) or invisible.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int cursorVisible=0x01010152;
    /**
     * Specifies a layout for custom navigation. Overrides navigationMode.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int customNavigationLayout=0x010102d2;
    /**
     * Account handles its own token storage and permissions.
     * Default to false
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int customTokens=0x0101033b;
    /**
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int cycles=0x010101d4;
    /**
     * Gap between dashes in the stroke.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int dashGap=0x010101a7;
    /**
     * Length of a dash in the stroke.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int dashWidth=0x010101a6;
    /**
     * The data URI to assign to the Intent, as per
     * {@link android.content.Intent#setData Intent.setData()}.
     * <p><em>Note: scheme and host name matching in the Android framework is
     * case-sensitive, unlike the formal RFC.  As a result,
     * URIs here should always be normalized to use lower case letters
     * for these elements (as well as other proper Uri normalization).</em></p>
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int data=0x0101002e;
    /**
     * Applications can set this attribute to an xml resource within their app where they
     * specified the rules determining which files and directories can be copied from the device
     * as part of backup or transfer operations.
     * See the <a href="{@docRoot}about/versions/12/backup-restore">Changes in backup and restore</a>
     * document for the format of the XML file.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int dataExtractionRules=0x0101063e;
    /**
     * The DatePicker dialog theme.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int datePickerDialogTheme=0x010104ac;
    /**
     * Defines the look of the widget. Prior to the L release, the only choice was
     * spinner. As of L, with the Material theme selected, the default layout is calendar,
     * but this attribute can be used to force spinner to be used instead.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>calendar</td><td>2</td><td>Date picker with calendar to select the date.</td></tr>
     * <tr><td>spinner</td><td>1</td><td>Date picker with spinner controls to select the date.</td></tr>
     * </table>
     */
    public static final int datePickerMode=0x010104b3;
    /**
     * The DatePicker style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int datePickerStyle=0x0101035c;
    /**
     * The text appearance for the day numbers in the calendar grid.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int dateTextAppearance=0x01010349;
    /**
     * The background color for the header's day of week.
     * {@deprecated No longer displayed.}
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    @Deprecated
    public static final int dayOfWeekBackground=0x01010494;
    /**
     * The text color for the header's day of week.
     * {@deprecated No longer displayed.}
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    @Deprecated
    public static final int dayOfWeekTextAppearance=0x01010495;
    /**
     * Flag indicating whether the application can be debugged, even when
     * running on a device that is running in user mode.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int debuggable=0x0101000f;
    /**
     * Whether this View should use a default focus highlight when it gets focused but
     * doesn't have {@link android.R.attr#state_focused} defined in its background.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int defaultFocusHighlightEnabled=0x01010562;
    /**
     * Default height of the activity. Can be either a fixed value or fraction, in which case
     * the height will be constructed as a fraction of the total available height.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int defaultHeight=0x010104f5;
    /**
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int defaultToDeviceProtectedStorage=0x01010504;
    /**
     * The default value for the preference, which will be set either if persistence
     * is off or persistence is on and the preference is not found in the persistent
     * storage.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int defaultValue=0x010101ed;
    /**
     * Default width of the activity. Can be either a fixed value or fraction, in which case
     * the width will be constructed as a fraction of the total available width.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int defaultWidth=0x010104f4;
    /**
     * Fraction of the animation duration used to delay the beginning of
     * the animation of each child.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int delay=0x010101cc;
    /**
     * The key of another Preference that this Preference will depend on.  If the other
     * Preference is not set or is off, this Preference will be disabled.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int dependency=0x010101ec;
    /**
     * Defines the relationship between the ViewGroup and its descendants
     * when looking for a View to take focus.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>afterDescendants</td><td>1</td><td>The ViewGroup will get focus only if none of its descendants want it.</td></tr>
     * <tr><td>beforeDescendants</td><td>0</td><td>The ViewGroup will get focus before any of its descendants.</td></tr>
     * <tr><td>blocksDescendants</td><td>2</td><td>The ViewGroup will block its descendants from receiving focus.</td></tr>
     * </table>
     */
    public static final int descendantFocusability=0x010100f1;
    /**
     * Descriptive text for the associated data.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int description=0x01010020;
    /**
     * Special option for window animations: if this window is on top
     * of a wallpaper, don't animate the wallpaper with it.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int detachWallpaper=0x010102a6;
    /**
     * Column in data table that contains details for this data.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int detailColumn=0x010102a3;
    /**
     * Flag indicating that detail should be built from SocialProvider.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int detailSocialSummary=0x010102a4;
    /**
     * Background that can be used behind parts of a UI that provide
     * details on data the user is selecting.  For example, this is
     * the background element of PreferenceActivity's embedded
     * preference fragment.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int detailsElementBackground=0x0101034e;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int dial=0x01010102;
    /**
     * Tint to apply to the dial graphic.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int dialTint=0x01010636;
    /**
     * Blending mode used to apply the dial graphic tint.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     */
    public static final int dialTintMode=0x01010637;
    /**
     * Corner radius of dialogs.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int dialogCornerRadius=0x01010571;
    /**
     * The icon for the dialog.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int dialogIcon=0x010101f4;
    /**
     * A layout to be used as the content View for the dialog. By default, this shouldn't
     * be needed. If a custom DialogPreference is required, this should be set. For example,
     * the EditTextPreference uses a layout with an EditText as this attribute.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int dialogLayout=0x010101f7;
    /**
     * The message in the dialog. If a dialogLayout is provided and contains
     * a TextView with ID android:id/message, this message will be placed in there.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int dialogMessage=0x010101f3;
    /**
     * Default style for DialogPreference.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int dialogPreferenceStyle=0x01010091;
    /**
     * Preferred padding for dialog content.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int dialogPreferredPadding=0x010104d3;
    /**
     * Theme to use for dialogs spawned from this theme.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int dialogTheme=0x01010308;
    /**
     * The title in the dialog.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int dialogTitle=0x010101f2;
    /**
     * If set, specifies that this TextView has a numeric input method
     * and that these specific characters are the ones that it will
     * accept.
     * If this is set, numeric is implied to be true.
     * The default is false.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int digits=0x01010166;
    /**
     * Indicate if this component is aware of direct boot lifecycle, and can be
     * safely run before the user has entered their credentials (such as a lock
     * pattern or PIN).
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int directBootAware=0x01010505;
    /**
     * Direction of the animation in the grid.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom_to_top</td><td>2</td><td>Animates rows from bottom to top.</td></tr>
     * <tr><td>left_to_right</td><td>0</td><td>Animates columns from left to right.</td></tr>
     * <tr><td>right_to_left</td><td>1</td><td>Animates columns from right to left.</td></tr>
     * <tr><td>top_to_bottom</td><td>0</td><td>Animates rows from top to bottom.</td></tr>
     * </table>
     */
    public static final int direction=0x010101d1;
    /**
     * @deprecated Removed.
     * Reference to an array resource that be used to announce the directions with targets around the circle.
     * {@deprecated Removed.}
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    @Deprecated
    public static final int directionDescriptions=0x010103a1;
    /**
     * Priority of the rows and columns. When the priority is none,
     * both rows and columns have the same priority. When the priority is
     * column, the animations will be applied on the columns first. The same
     * goes for rows.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>column</td><td>1</td><td>Columns are animated first.</td></tr>
     * <tr><td>none</td><td>0</td><td>Rows and columns are animated at the same time.</td></tr>
     * <tr><td>row</td><td>2</td><td>Rows are animated first.</td></tr>
     * </table>
     */
    public static final int directionPriority=0x010101d2;
    /**
     * The state (true for on, or false for off) that causes dependents to be disabled. By default,
     * dependents will be disabled when this is unchecked, so the value of this preference is false.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int disableDependentsState=0x010101f1;
    /**
     * Default disabled alpha for widgets that set enabled/disabled alpha programmatically.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int disabledAlpha=0x01010033;
    /**
     * Options affecting how the action bar is displayed.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>disableHome</td><td>20</td><td></td></tr>
     * <tr><td>homeAsUp</td><td>4</td><td></td></tr>
     * <tr><td>none</td><td>0</td><td></td></tr>
     * <tr><td>showCustom</td><td>10</td><td></td></tr>
     * <tr><td>showHome</td><td>2</td><td></td></tr>
     * <tr><td>showTitle</td><td>8</td><td></td></tr>
     * <tr><td>useLogo</td><td>1</td><td></td></tr>
     * </table>
     */
    public static final int displayOptions=0x010102d0;
    /**
     * Enables or disables dithering of the bitmap if the bitmap does not have the
     * same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
     * an RGB 565 screen).
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int dither=0x0101011c;
    /**
     * Drawable or color to draw between list items.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int divider=0x01010129;
    /**
     * Height of the divider. Will use the intrinsic height of the divider if this
     * is not specified.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int dividerHeight=0x0101012a;
    /**
     * Drawable to use for generic horizontal dividers.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int dividerHorizontal=0x0101032c;
    /**
     * Size of padding on either end of a divider.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int dividerPadding=0x0101032a;
    /**
     * Drawable to use for generic vertical dividers.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int dividerVertical=0x0101030a;
    /**
     * This attribute specifies that an activity shall become the root activity of a
     * new task each time it is launched. Using this attribute permits the user to
     * have multiple documents from the same applications appear in the recent tasks list.
     * <p>Such a document is any kind of item for which an application may want to
     * maintain multiple simultaneous instances. Examples might be text files, web
     * pages, spreadsheets, or emails. Each such document will be in a separate
     * task in the recent taskss list.
     * <p>This attribute is equivalent to adding the flag {@link
     * android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT} to every Intent used to launch
     * the activity.
     * <p>The documentLaunchMode attribute may be assigned one of four values, "none",
     * "intoExisting", "always" and "never", described in detail below. For values other than
     * <code>none</code> and <code>never</code> the activity must be defined with
     * {@link android.R.attr#launchMode} <code>standard</code>.
     * If this attribute is not specified, <code>none</code> will be used.
     * Note that <code>none</code> can be overridden at run time if the Intent used
     * to launch it contains the flag {@link android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT
     * Intent.FLAG_ACTIVITY_NEW_DOCUMENT}.
     * Similarly <code>intoExisting</code> will be overridden by the flag
     * {@link android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT
     * Intent.FLAG_ACTIVITY_NEW_DOCUMENT} combined with
     * {@link android.content.Intent#FLAG_ACTIVITY_MULTIPLE_TASK
     * Intent.FLAG_ACTIVITY_MULTIPLE_TASK}. If the value of
     * documentLaunchModes is <code>never</code> then any use of
     * {@link android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT
     * Intent.FLAG_ACTIVITY_NEW_DOCUMENT} to launch this activity will be ignored.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>always</td><td>2</td><td>A new task rooted at this activity will be created. This will happen whether or
     * not there is an existing task whose ComponentName and data URI match
     * that of the launcing intent This is the equivalent of launching an activity
     * with {@link
     * android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT Intent.FLAG_ACTIVITY_NEW_DOCUMENT}
     * and {@link android.content.Intent#FLAG_ACTIVITY_MULTIPLE_TASK
     * Intent.FLAG_ACTIVITY_MULTIPLE_TASK} both set.</td></tr>
     * <tr><td>intoExisting</td><td>1</td><td>All tasks will be searched for one whose base Intent's ComponentName and
     * data URI match those of the launching Intent. If such a task is found
     * that task will be cleared and restarted with the root activity receiving a call
     * to {@link android.app.Activity#onNewIntent Activity.onNewIntent}. If no
     * such task is found a new task will be created.
     * <p>This is the equivalent of launching an activity with {@link
     * android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT Intent.FLAG_ACTIVITY_NEW_DOCUMENT}
     * set and without {@link android.content.Intent#FLAG_ACTIVITY_MULTIPLE_TASK
     * Intent.FLAG_ACTIVITY_MULTIPLE_TASK} set.</td></tr>
     * <tr><td>never</td><td>3</td><td>This activity will not be launched into a new document even if the Intent contains
     * {@link android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT
     * Intent.FLAG_ACTIVITY_NEW_DOCUMENT}. This gives the activity writer ultimate
     * control over how their activity is used. Note that applications prior to api
     * 21 will default to documentLaunchMode="none" so only activities that explicitly
     * opt out with <code>"never"</code> may do so.</td></tr>
     * <tr><td>none</td><td>0</td><td>The default mode, which will create a new task only when
     * {@link android.content.Intent#FLAG_ACTIVITY_NEW_TASK
     * Intent.FLAG_ACTIVITY_NEW_TASK} is set.</td></tr>
     * </table>
     */
    public static final int documentLaunchMode=0x01010445;
    /**
     * When set to true, the selector will be drawn over the selected item.
     * Otherwise the selector is drawn behind the selected item. The default
     * value is false.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int drawSelectorOnTop=0x010100fc;
    /**
     * Reference to a drawable resource to use for the frame.  If not
     * given, the drawable must be defined by the first child tag.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int drawable=0x01010199;
    /**
     * The drawable to be drawn below the text.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int drawableBottom=0x0101016e;
    /**
     * The drawable to be drawn to the end of the text.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int drawableEnd=0x01010393;
    /**
     * The drawable to be drawn to the left of the text.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int drawableLeft=0x0101016f;
    /**
     * The padding between the drawables and the text.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int drawablePadding=0x01010171;
    /**
     * The drawable to be drawn to the right of the text.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int drawableRight=0x01010170;
    /**
     * The drawable to be drawn to the start of the text.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int drawableStart=0x01010392;
    /**
     * Tint to apply to the compound (left, top, etc.) drawables.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int drawableTint=0x010104d6;
    /**
     * Blending mode used to apply the compound (left, top, etc.) drawables tint.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     */
    public static final int drawableTintMode=0x010104d7;
    /**
     * The drawable to be drawn above the text.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int drawableTop=0x0101016d;
    /**
     * Defines the quality of translucent drawing caches. This property is used
     * only when the drawing cache is enabled and translucent. The default value is auto.
     * Deprecated: The view drawing cache was largely made obsolete with the introduction of
     * hardware-accelerated rendering in API 11.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>auto</td><td>0</td><td>Lets the framework decide what quality level should be used
     * for the drawing cache.
     * Deprecated: The view drawing cache was largely made obsolete with the introduction
     * of hardware-accelerated rendering in API 11.</td></tr>
     * <tr><td>high</td><td>2</td><td>High quality. When set to high quality, the drawing cache uses a higher
     * color depth but uses more memory.
     * Deprecated: The view drawing cache was largely made obsolete with the introduction
     * of hardware-accelerated rendering in API 11.</td></tr>
     * <tr><td>low</td><td>1</td><td>Low quality. When set to low quality, the drawing cache uses a lower color
     * depth, thus losing precision in rendering gradients, but uses less memory.
     * Deprecated: The view drawing cache was largely made obsolete with the introduction
     * of hardware-accelerated rendering in API 11.</td></tr>
     * </table>
     */
    public static final int drawingCacheQuality=0x010100e8;
    /**
     * View to anchor the auto-complete dropdown to. If not specified, the text view itself
     * is used.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int dropDownAnchor=0x01010263;
    /**
     * Specifies the basic height of the dropdown. Its value may
     * be a dimension (such as "12dip") for a constant height,
     * fill_parent or match_parent to fill the height of the
     * screen, or wrap_content to match the height of
     * the content of the drop down.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>fill_parent</td><td>ffffffff</td><td>The dropdown should fit the height of the screen.
     * This constant is deprecated starting from API Level 8 and
     * is replaced by {@code match_parent}.</td></tr>
     * <tr><td>match_parent</td><td>ffffffff</td><td>The dropdown should fit the height of the screen.
     * Introduced in API Level 8.</td></tr>
     * <tr><td>wrap_content</td><td>fffffffe</td><td>The dropdown should fit the height of the content.</td></tr>
     * </table>
     */
    public static final int dropDownHeight=0x01010283;
    /**
     * Default style for drop down hints.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int dropDownHintAppearance=0x01010088;
    /**
     * Amount of pixels by which the drop down should be offset horizontally.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int dropDownHorizontalOffset=0x010102ac;
    /**
     * Default style for drop down items.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int dropDownItemStyle=0x01010086;
    /**
     * Default ListView style for drop downs.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int dropDownListViewStyle=0x0101006d;
    /**
     * Selector in a drop down list.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int dropDownSelector=0x01010175;
    /**
     * Default dropdown Spinner style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int dropDownSpinnerStyle=0x010102d6;
    /**
     * Amount of pixels by which the drop down should be offset vertically.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int dropDownVerticalOffset=0x010102ad;
    /**
     * Specifies the basic width of the dropdown. Its value may
     * be a dimension (such as "12dip") for a constant width,
     * fill_parent or match_parent to match the width of the
     * screen, or wrap_content to match the width of
     * the anchored view.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>fill_parent</td><td>ffffffff</td><td>The dropdown should fill the width of the screen.
     * This constant is deprecated starting from API Level 8 and
     * is replaced by {@code match_parent}.</td></tr>
     * <tr><td>match_parent</td><td>ffffffff</td><td>The dropdown should fit the width of the screen.
     * Introduced in API Level 8.</td></tr>
     * <tr><td>wrap_content</td><td>fffffffe</td><td>The dropdown should fit the width of its anchor.</td></tr>
     * </table>
     */
    public static final int dropDownWidth=0x01010262;
    /**
     * When this attribute is set to true, the view gets its drawable state
     * (focused, pressed, etc.) from its direct parent rather than from itself.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int duplicateParentState=0x010100e9;
    /**
     * Amount of time (in milliseconds) to display this frame.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int duration=0x01010198;
    /**
     * EditText background drawable.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int editTextBackground=0x01010352;
    /**
     * EditText text foreground color.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int editTextColor=0x01010351;
    /**
     * Default style for EditTextPreference.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int editTextPreferenceStyle=0x01010092;
    /**
     * Default EditText style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int editTextStyle=0x0101006e;
    /**
     * If set, specifies that this TextView has an input method.
     * It will be a textual one unless it has otherwise been specified.
     * For TextView, this is false by default.  For EditText, it is
     * true by default.
     * {@deprecated Use inputType instead.}
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    @Deprecated
    public static final int editable=0x0101016b;
    /**
     * Reference to an
     * {@link android.R.styleable#InputExtras &lt;input-extras&gt;}
     * XML resource containing additional data to
     * supply to an input method, which is private to the implementation
     * of the input method.  This simply fills in
     * the {@link android.view.inputmethod.EditorInfo#extras
     * EditorInfo.extras} field when the input
     * method is connected.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int editorExtras=0x01010224;
    /**
     * Color applied to effects.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int effectColor=0x01010649;
    /**
     * Elegant text height, especially for less compacted complex script text.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int elegantTextHeight=0x0101045d;
    /**
     * base z depth of the view.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int elevation=0x01010440;
    /**
     * Where to ellipsize text.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>end</td><td>3</td><td></td></tr>
     * <tr><td>marquee</td><td>4</td><td></td></tr>
     * <tr><td>middle</td><td>2</td><td></td></tr>
     * <tr><td>none</td><td>0</td><td></td></tr>
     * <tr><td>start</td><td>1</td><td></td></tr>
     * </table>
     */
    public static final int ellipsize=0x010100ab;
    /**
     * Makes the TextView be exactly this many ems wide.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int ems=0x01010158;
    /**
     * Flag declaring that this activity will be run in VR mode, and specifying
     * the component of the {@link android.service.vr.VrListenerService} that should be
     * bound while this Activity is visible if it is installed and enabled on this device.
     * This is equivalent to calling {@link android.app.Activity#setVrModeEnabled} with the
     * the given component name within the Activity that this attribute is set for.
     * Declaring this will prevent the system from leaving VR mode during an Activity
     * transtion from one VR activity to another.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int enableVrMode=0x01010525;
    /**
     * Specifies whether the widget is enabled. The interpretation of the enabled state varies by subclass.
     * For example, a non-enabled EditText prevents the user from editing the contained text, and
     * a non-enabled Button prevents the user from tapping the button.
     * The appearance of enabled and non-enabled widgets may differ, if the drawables referenced
     * from evaluating state_enabled differ.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int enabled=0x0101000e;
    /**
     * End inset to apply to the layer. Overrides {@code left} or
     * {@code right} depending on layout direction.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int end=0x010104dc;
    /**
     * End color of the gradient.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int endColor=0x0101019e;
    /**
     * X coordinate of the end point origin of the gradient.
     * Defined in same coordinates as the path itself
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int endX=0x01010512;
    /**
     * Y coordinate of the end point of the gradient within the shape.
     * Defined in same coordinates as the path itself
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int endY=0x01010513;
    /**
     * {@deprecated Use maxDate instead.}
     * The last year (inclusive), for example "2010".
     * {@deprecated Use maxDate instead.}
     * <p>May be an integer value, such as "<code>100</code>".
     */
    @Deprecated
    public static final int endYear=0x0101017d;
    /**
     * Sets whether the system should ensure that the navigation bar has enough
     * contrast when a fully transparent background is requested.
     * <p>If set to this value, the system will determine whether a scrim is necessary
     * to ensure that the navigation bar has enough contrast with the contents of
     * this app, and set an appropriate effective bar background color accordingly.
     * <p>When the navigation bar color has a non-zero alpha value, the value of this
     * attribute has no effect.
     * <p>If the app does not target at least {@link android.os.Build.VERSION_CODES#Q Q},
     * this attribute is ignored.
     * @see android.view.Window#setNavigationBarContrastEnforced
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int enforceNavigationBarContrast=0x01010605;
    /**
     * Sets whether the system should ensure that the status bar has enough
     * contrast when a fully transparent background is requested.
     * <p>If set to this value, the system will determine whether a scrim is necessary
     * to ensure that the status bar has enough contrast with the contents of
     * this app, and set an appropriate effective bar background color accordingly.
     * <p>When the status bar color has a non-zero alpha value, the value of this
     * attribute has no effect.
     * <p>If the app does not target at least {@link android.os.Build.VERSION_CODES#Q Q},
     * this attribute is ignored.
     * @see android.view.Window#setStatusBarContrastEnforced
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int enforceStatusBarContrast=0x01010604;
    /**
     * Amount of time (in milliseconds) to fade in a new state drawable.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int enterFadeDuration=0x0101030c;
    /**
     * Reference to an array resource that will populate a list/adapter.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int entries=0x010100b2;
    /**
     * The array to find the value to save for a preference when an entry from
     * entries is selected. If a user clicks on the second item in entries, the
     * second item in this array will be saved to the preference.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int entryValues=0x010101f8;
    /**
     * Defines whether the overlay should intercept the motion events when a gesture
     * is recognized.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int eventsInterceptionEnabled=0x0101027d;
    /**
     * The fully-qualified name of the Class to exclude from this transition.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int excludeClass=0x01010442;
    /**
     * Indicates that an Activity should be excluded from the list of
     * recently launched activities.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int excludeFromRecents=0x01010017;
    /**
     * The id of a target to exclude from this transition.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int excludeId=0x01010441;
    /**
     * The transitionName of the target to exclude from this transition.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int excludeName=0x0101044e;
    /**
     * Amount of time (in milliseconds) to fade out an old state drawable.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int exitFadeDuration=0x0101030d;
    /**
     * The preferred left bound for an expandable list child's indicator.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int expandableListPreferredChildIndicatorLeft=0x01010052;
    /**
     * The preferred right bound for an expandable list child's indicator.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int expandableListPreferredChildIndicatorRight=0x01010053;
    /**
     * The preferred left padding for an expandable list item that is a child.
     * If this is not provided, it defaults to the expandableListPreferredItemPaddingLeft.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int expandableListPreferredChildPaddingLeft=0x0101004f;
    /**
     * The preferred left bound for an expandable list item's indicator. For a child-specific
     * indicator, use expandableListPreferredChildIndicatorLeft.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int expandableListPreferredItemIndicatorLeft=0x01010050;
    /**
     * The preferred right bound for an expandable list item's indicator. For a child-specific
     * indicator, use expandableListPreferredChildIndicatorRight.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int expandableListPreferredItemIndicatorRight=0x01010051;
    /**
     * The preferred left padding for an expandable list item (for child-specific layouts,
     * use expandableListPreferredChildPaddingLeft). This takes into account
     * the indicator that will be shown to next to the item.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int expandableListPreferredItemPaddingLeft=0x0101004e;
    /**
     * Default ExpandableListView style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int expandableListViewStyle=0x0101006f;
    /**
     * ExpandableListView with white background.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int expandableListViewWhiteStyle=0x010102b6;
    /**
     * Flag indicating whether the given application component is available
     * to other applications.  If false, it can only be accessed by
     * applications with its same user id (which usually means only by
     * code in its own package).  If true, it can be invoked by external
     * entities, though which ones can do so may be controlled through
     * permissions.  The default value is false for activity, receiver,
     * and service components that do not specify any intent filters; it
     * is true for activity, receiver, and service components that do
     * have intent filters (implying they expect to be invoked by others
     * who do not know their particular component name) and for all
     * content providers.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int exported=0x01010010;
    /**
     * If the service is an {@link android.R.attr#isolatedProcess} service, this permits a
     * client to bind to the service as if it were running it its own package.  The service
     * must also be {@link android.R.attr#exported} if this flag is set.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int externalService=0x0101050e;
    /**
     * This is the amount by which to multiply the tension.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int extraTension=0x0101026b;
    /**
     * When set installer will extract native libraries. If set to false
     * libraries in the apk must be stored and page-aligned.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int extractNativeLibs=0x010104ea;
    /**
     * This is the amount of deceleration to add when easing in.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int factor=0x010101d3;
    /**
     * Duration, in milliseconds, of the fade out effect after the user is done
     * drawing a gesture.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int fadeDuration=0x01010278;
    /**
     * Defines whether the gesture will automatically fade out after being recognized.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int fadeEnabled=0x0101027e;
    /**
     * Time, in milliseconds, to wait before the gesture fades out after the user
     * is done drawing it.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int fadeOffset=0x01010277;
    /**
     * Defines whether to fade out scrollbars when they are not in use.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int fadeScrollbars=0x010102aa;
    /**
     * This attribute is ignored in API level 14
     * ({@link android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH}) and higher.
     * Using fading edges may introduce noticeable performance
     * degradations and should be used only when required by the application's
     * visual design. To request fading edges with API level 14 and above,
     * use the <code>android:requiresFadingEdge</code> attribute instead.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>horizontal</td><td>1000</td><td>Fades horizontal edges only.</td></tr>
     * <tr><td>none</td><td>0</td><td>No edge is faded.</td></tr>
     * <tr><td>vertical</td><td>2000</td><td>Fades vertical edges only.</td></tr>
     * </table>
     */
    public static final int fadingEdge=0x010100df;
    /**
     * Defines the length of the fading edges.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int fadingEdgeLength=0x010100e0;
    /**
     * Equivalent to <code>transitionVisibilityMode</code>, fadingMode works only
     * with the Fade transition.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>fade_in</td><td>1</td><td>Fade will only fade appearing items in.</td></tr>
     * <tr><td>fade_in_out</td><td>3</td><td>Fade will fade appearing items in and disappearing items out.</td></tr>
     * <tr><td>fade_out</td><td>2</td><td>Fade will only fade disappearing items out.</td></tr>
     * </table>
     */
    public static final int fadingMode=0x010103e1;
    /**
     * Whether to respect the ascent and descent of the fallback fonts that are used in
     * displaying the text. When true, fallback fonts that end up getting used can increase
     * the ascent and descent of the lines that they are used on.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int fallbackLineSpacing=0x0101057b;
    /**
     * When set to true, the list will always show the fast scroll interface.
     * This setting implies fastScrollEnabled.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int fastScrollAlwaysVisible=0x01010335;
    /**
     * Enables the fast scroll thumb that can be dragged to quickly scroll through
     * the list.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int fastScrollEnabled=0x01010226;
    /**
     * Position of the fast scroll index overlay window.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>aboveThumb</td><td>2</td><td></td></tr>
     * <tr><td>atThumb</td><td>1</td><td></td></tr>
     * <tr><td>floating</td><td>0</td><td></td></tr>
     * </table>
     */
    public static final int fastScrollOverlayPosition=0x0101033a;
    /**
     * Drawable to use as the fast scroll index preview window background
     * when shown on the left.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int fastScrollPreviewBackgroundLeft=0x01010337;
    /**
     * Drawable to use as the fast scroll index preview window background
     * when shown on the right.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int fastScrollPreviewBackgroundRight=0x01010338;
    /**
     * Specifies the style of the fast scroll decorations.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int fastScrollStyle=0x010103f7;
    /**
     * Text color for the fast scroll index overlay. Make sure it
     * plays nicely with fastScrollPreviewBackground[Left|Right].
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int fastScrollTextColor=0x01010359;
    /**
     * Drawable to use as the fast scroll thumb.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int fastScrollThumbDrawable=0x01010336;
    /**
     * Drawable to use as the track for the fast scroll thumb.
     * This may be null.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int fastScrollTrackDrawable=0x01010339;
    /**
     * When set to true, the animation transformation is applied after the animation is
     * over. The default value is false. If fillEnabled is not set to true and the
     * animation is not set on a View, fillAfter is assumed to be true.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int fillAfter=0x010101bd;
    /**
     * The alpha of the path fill, as a value between 0 (completely transparent)
     * and 1 (completely opaque).
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int fillAlpha=0x010104cc;
    /**
     * When set to true or when fillEnabled is not set to true, the animation transformation
     * is applied before the animation has started. The default value is true.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int fillBefore=0x010101bc;
    /**
     * The color to fill the path if not defined implies no fill.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int fillColor=0x01010404;
    /**
     * When set to true, the value of fillBefore is taken into account.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int fillEnabled=0x0101024f;
    /**
     * sets the fillType for a path. It is the same as SVG's "fill-rule" properties.
     * For more details, see https://www.w3.org/TR/SVG/painting.html#FillRuleProperty.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>evenOdd</td><td>1</td><td></td></tr>
     * <tr><td>nonZero</td><td>0</td><td></td></tr>
     * </table>
     */
    public static final int fillType=0x0101051e;
    /**
     * Defines whether the scrollview should stretch its content to fill the viewport.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int fillViewport=0x0101017a;
    /**
     * Enables or disables bitmap filtering. Filtering is used when the bitmap is
     * shrunk or stretched to smooth its apperance. Default value is true.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int filter=0x0101011b;
    /**
     * Specifies whether to filter touches when the view's window is obscured by
     * another visible window.  When set to true, the view will not receive touches
     * whenever a toast, dialog or other window appears above the view's window.
     * Refer to the {@link android.view.View} security documentation for more details.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int filterTouchesWhenObscured=0x010102c4;
    /**
     * Icon that should be used to indicate that an app is waiting for a fingerprint scan.
     * This should be used whenever an app is requesting the user to place a finger on the
     * fingerprint sensor. It can be combined with other drawables such as colored circles, so
     * the appearance matches the branding of the app requesting the fingerprint scan.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int fingerprintAuthDrawable=0x010104e8;
    /**
     * Specify whether an activity should be finished when a "close system
     * windows" request has been made.  This happens, for example, when
     * the home key is pressed, when the device is locked, when a system
     * dialog showing recent applications is displayed, etc.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int finishOnCloseSystemDialogs=0x010102a7;
    /**
     * Specify whether an activity should be finished when its task is
     * brought to the foreground by relaunching from the home screen.
     * <p>If both this option and {@link android.R.attr#allowTaskReparenting} are
     * specified, the finish trumps the affinity: the affinity will be
     * ignored and the activity simply finished.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int finishOnTaskLaunch=0x01010014;
    /**
     * Distance from the top of the TextView to the first text baseline. If set, this
     * overrides the value set for paddingTop.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int firstBaselineToTopHeight=0x0101057d;
    /**
     * The first day of week according to {@link java.util.Calendar}.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int firstDayOfWeek=0x0101033d;
    /**
     * Boolean internal attribute to adjust view layout based on
     * system windows such as the status bar.
     * If true, adjusts the padding of this view to leave space for the system windows.
     * Will only take effect if this view is in a non-embedded activity.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int fitsSystemWindows=0x010100dd;
    /**
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int flipInterval=0x01010179;
    /**
     * Controls whether a view can take focus.  By default, this is "auto" which lets the
     * framework determine whether a user can move focus to a view.  By setting this attribute
     * to true the view is allowed to take focus. By setting it to "false" the view will not
     * take focus. This value does not impact the behavior of
     * directly calling {@link android.view.View#requestFocus}, which will
     * always request focus regardless of this view.  It only impacts where
     * focus navigation will try to move focus.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>auto</td><td>10</td><td></td></tr>
     * </table>
     */
    public static final int focusable=0x010100da;
    /**
     * Boolean that controls whether a view can take focus while in touch mode.
     * If this is true for a view, that view can gain focus when clicked on, and can keep
     * focus if another view is clicked on that doesn't have this attribute set to true.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int focusableInTouchMode=0x010100db;
    /**
     * Whether this view is a default-focus view.
     * Only one view per keyboard navigation cluster can have this attribute set to true.
     * See {@link android.view.View#setFocusedByDefault(boolean)}.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int focusedByDefault=0x01010544;
    /**
     * @deprecated The color for the dates of the focused month.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    @Deprecated
    public static final int focusedMonthDateColor=0x01010343;
    /**
     * The reference to the font file to be used. This should be a file in the res/font folder
     * and should therefore have an R reference value. E.g. @font/myfont
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int font=0x01010532;
    /**
     * Default font family.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int fontFamily=0x010103ac;
    /**
     * Font feature settings.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int fontFeatureSettings=0x010104b7;
    /**
     * The authority of the Font Provider to be used for the request.
     * {@deprecated Use app:fontProviderAuthority with Jetpack Core library instead for
     * consistent behavior across all devices.}
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    @Deprecated
    public static final int fontProviderAuthority=0x01010550;
    /**
     * The sets of hashes for the certificates the provider should be signed with. This is
     * used to verify the identity of the provider, and is only required if the provider is not
     * part of the system image. This value may point to one list or a list of lists, where each
     * individual list represents one collection of signature hashes. Refer to your font provider's
     * documentation for these values.
     * {@deprecated Use app:fontProviderCerts with Jetpack Core library instead.}
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    @Deprecated
    public static final int fontProviderCerts=0x0101055d;
    /**
     * The package for the Font Provider to be used for the request. This is used to verify
     * the identity of the provider.
     * {@deprecated Use app:fontProviderPackage with Jetpack Core library instead.}
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    @Deprecated
    public static final int fontProviderPackage=0x01010557;
    /**
     * The query to be sent over to the provider. Refer to your font provider's documentation
     * on the format of this string.
     * {@deprecated Use app:fontProviderQuery with Jetpack Core library instead.}
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    @Deprecated
    public static final int fontProviderQuery=0x01010551;
    /**
     * Provides the system font family name to check before downloading the font. For example
     * if the fontProviderQuery asked for "Sans Serif", it is possible to define
     * fontProviderSystemFontFamily as "sans-serif" to tell the system to use "sans-serif" font
     * family if it exists on the system.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int fontProviderSystemFontFamily=0x01010622;
    /**
     * The style of the given font file. This will be used when the font is being loaded into
     * the font stack and will override any style information in the font's header tables. If
     * unspecified, the value in the font's header tables will be used.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>italic</td><td>1</td><td></td></tr>
     * <tr><td>normal</td><td>0</td><td></td></tr>
     * </table>
     */
    public static final int fontStyle=0x0101053f;
    /**
     * The variation settings to be applied to the font. The string should be in the following
     * format: "'tag1' value1, 'tag2' value2, ...". If the default variation settings should be
     * used, or the font used does not support variation settings, this attribute needs not be
     * specified.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int fontVariationSettings=0x01010570;
    /**
     * The weight of the given font file. This will be used when the font is being loaded into
     * the font stack and will override any weight information in the font's header tables. Must
     * be a positive number, a multiple of 100, and between 100 and 900, inclusive. The most
     * common values are 400 for regular weight and 700 for bold weight. If unspecified, the value
     * in the font's header tables will be used.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int fontWeight=0x01010533;
    /**
     * When set to false, the ListView will not draw the divider before each footer view.
     * The default value is true.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int footerDividersEnabled=0x0101022f;
    /**
     * <p>Whether or not the force dark feature is allowed to be applied to this View.
     * <p>Setting this to false will disable the auto-dark feature on this View draws
     * including any descendants.
     * <p>Setting this to true will allow this view to be automatically made dark, however
     * a value of 'true' will not override any 'false' value in its parent chain nor will
     * it prevent any 'false' in any of its children.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int forceDarkAllowed=0x0101058c;
    /**
     * Whether this view has elements that may overlap when drawn. See
     * {@link android.view.View#forceHasOverlappingRendering(boolean)}.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int forceHasOverlappingRendering=0x01010521;
    /**
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int forceQueryable=0x01010608;
    /**
     * If true, the system will always create URI permission grants
     * in the cases where {@link android.content.Intent#FLAG_GRANT_READ_URI_PERMISSION}
     * or {@link android.content.Intent#FLAG_GRANT_WRITE_URI_PERMISSION} would apply.
     * This is useful for a content provider that dynamically enforces permissions
     * on calls in to the provider, instead of through the manifest: the system
     * needs to know that it should always apply permission grants, even if it
     * looks like the target of the grant would already have access to the URI.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int forceUriPermissions=0x0101059f;
    /**
     * Defines the drawable to draw over the content. This can be used as an overlay.
     * The foreground drawable participates in the padding of the content if the gravity
     * is set to fill.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int foreground=0x01010109;
    /**
     * Defines the gravity to apply to the foreground drawable. The gravity defaults
     * to fill.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
     * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
     * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
     * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
     * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the horizontal gravity: a left gravity will clip the right
     * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
     * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the vertical gravity: a top gravity will clip the bottom
     * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
     * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
     * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
     * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
     * </table>
     */
    public static final int foregroundGravity=0x01010200;
    /**
     * Specify the type of foreground service. Multiple types can be specified by ORing the flags
     * together.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>camera</td><td>40</td><td>Use the camera device or record video.
     * <p>For apps with <code>targetSdkVersion</code> {@link android.os.Build.VERSION_CODES#R}
     * and above, a foreground service will not be able to access the camera if this type is
     * not specified in the manifest and in
     * {@link android.app.Service#startForeground(int, android.app.Notification, int)}.</td></tr>
     * <tr><td>connectedDevice</td><td>10</td><td>Auto, bluetooth, TV or other devices connection, monitoring and interaction.</td></tr>
     * <tr><td>dataSync</td><td>1</td><td>Data (photo, file, account) upload/download, backup/restore, import/export, fetch,
     * transfer over network between device and cloud.</td></tr>
     * <tr><td>location</td><td>8</td><td>GPS, map, navigation location update.</td></tr>
     * <tr><td>mediaPlayback</td><td>2</td><td>Music, video, news or other media play.</td></tr>
     * <tr><td>mediaProjection</td><td>20</td><td>Managing a media projection session, e.g, for screen recording or taking
     * screenshots.</td></tr>
     * <tr><td>microphone</td><td>80</td><td>Use the microphone device or record audio.
     * <p>For apps with <code>targetSdkVersion</code> {@link android.os.Build.VERSION_CODES#R}
     * and above, a foreground service will not be able to access the microphone if this type
     * is not specified in the manifest and in
     * {@link android.app.Service#startForeground(int, android.app.Notification, int)}.</td></tr>
     * <tr><td>phoneCall</td><td>4</td><td>Ongoing operations related to phone calls, video conferencing,
     * or similar interactive communication.</td></tr>
     * </table>
     */
    public static final int foregroundServiceType=0x01010599;
    /**
     * Tint to apply to the foreground.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int foregroundTint=0x0101046d;
    /**
     * Blending mode used to apply the foreground tint.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     */
    public static final int foregroundTintMode=0x0101046e;
    /**
     * Format string: if specified, the Chronometer will display this
     * string, with the first "%s" replaced by the current timer value
     * in "MM:SS" or "H:MM:SS" form.
     * If no format string is specified, the Chronometer will simply display
     * "MM:SS" or "H:MM:SS".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int format=0x01010105;
    /**
     * Specifies the formatting pattern used to show the time and/or date
     * in 12-hour mode. Please refer to {@link android.text.format.DateFormat}
     * for a complete description of accepted formatting patterns.
     * The default pattern is a locale-appropriate equivalent of "h:mm a".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int format12Hour=0x010103ca;
    /**
     * Specifies the formatting pattern used to show the time and/or date
     * in 24-hour mode. Please refer to {@link android.text.format.DateFormat}
     * for a complete description of accepted formatting patterns.
     * The default pattern is a locale-appropriate equivalent of "H:mm".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int format24Hour=0x010103cb;
    /**
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int fraction=0x010104d8;
    /**
     * The fragment that is displayed when the user selects this item.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int fragment=0x010102e3;
    /**
     * Sets whether the enter and exit transitions should overlap when transitioning
     * forward.
     * Corresponds to {@link android.app.Fragment#setAllowEnterTransitionOverlap(
     * boolean)}
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int fragmentAllowEnterTransitionOverlap=0x010104c8;
    /**
     * Sets whether the enter and exit transitions should overlap when transitioning
     * because of popping the back stack.
     * Corresponds to {@link android.app.Fragment#setAllowReturnTransitionOverlap(
     * boolean)}
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int fragmentAllowReturnTransitionOverlap=0x010104c9;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int fragmentCloseEnterAnimation=0x010102e7;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int fragmentCloseExitAnimation=0x010102e8;
    /**
     * The Transition that will be used to move Views into the initial scene.
     * Corresponds to {@link android.app.Fragment#setEnterTransition(
     * android.transition.Transition)}
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int fragmentEnterTransition=0x010104c3;
    /**
     * The Transition that will be used to move Views out of the scene when the
     * fragment is removed, hidden, or detached when not popping the back stack.
     * Corresponds to {@link android.app.Fragment#setExitTransition(
     * android.transition.Transition)}
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int fragmentExitTransition=0x010104c2;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int fragmentFadeEnterAnimation=0x010102e9;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int fragmentFadeExitAnimation=0x010102ea;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int fragmentOpenEnterAnimation=0x010102e5;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int fragmentOpenExitAnimation=0x010102e6;
    /**
     * The Transition that will be used to move Views in to the scene when returning due
     * to popping a back stack.
     * Corresponds to {@link android.app.Fragment#setReenterTransition(
     * android.transition.Transition)}
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int fragmentReenterTransition=0x010104c7;
    /**
     * The Transition that will be used to move Views out of the scene when the Fragment is
     * preparing to be removed, hidden, or detached because of popping the back stack.
     * Corresponds to {@link android.app.Fragment#setReturnTransition(
     * android.transition.Transition)}
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int fragmentReturnTransition=0x010104c5;
    /**
     * The Transition that will be used for shared elements transferred into the content
     * Scene.
     * Corresponds to {@link android.app.Fragment#setSharedElementEnterTransition(
     * android.transition.Transition)}
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int fragmentSharedElementEnterTransition=0x010104c4;
    /**
     * The Transition that will be used for shared elements transferred back during a
     * pop of the back stack. This Transition acts in the leaving Fragment.
     * Corresponds to {@link android.app.Fragment#setSharedElementReturnTransition(
     * android.transition.Transition)}
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int fragmentSharedElementReturnTransition=0x010104c6;
    /**
     * If set, the text view will include its current complete text
     * inside of its frozen icicle in addition to meta-data such as
     * the current cursor position.  By default this is disabled;
     * it can be useful when the contents of a text view is not stored
     * in a persistent place such as a content provider. For
     * {@link android.widget.EditText} it is always enabled, regardless
     * of the value of the attribute.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int freezesText=0x0101016c;
    /**
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int fromAlpha=0x010101ca;
    /**
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int fromDegrees=0x010101b3;
    /**
     * Keyframe identifier for the starting state.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int fromId=0x0101044a;
    /**
     * The originating scene in this scene change.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int fromScene=0x010103dd;
    /**
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int fromXDelta=0x010101c6;
    /**
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int fromXScale=0x010101c2;
    /**
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int fromYDelta=0x010101c8;
    /**
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int fromYScale=0x010101c4;
    /**
     * Applications will set this in their manifest to opt-in to or out of full app data back-up
     * and restore. Alternatively they can set it to an xml resource within their app that will
     * be parsed by the BackupAgent to selectively backup files indicated within that xml.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int fullBackupContent=0x010104eb;
    /**
     * Indicates that even though the application provides a <code>BackupAgent</code>,
     * only full-data streaming backup operations are to be performed to save the app's
     * data.  This lets the app rely on full-data backups while still participating in
     * the backup and restore process via the BackupAgent's full-data backup APIs.
     * When this attribute is <code>true</code> the app's BackupAgent overrides of
     * the onBackup() and onRestore() callbacks can be empty stubs.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int fullBackupOnly=0x01010473;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int fullBright=0x010100ca;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int fullDark=0x010100c6;
    /**
     * Flag indicating that an Instrumentation class should be run as a
     * functional test.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int functionalTest=0x01010023;
    /**
     * The preferred background for gallery items. This should be set
     * as the background of any Views you provide from the Adapter.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int galleryItemBackground=0x0101004c;
    /**
     * Default Gallery style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int galleryStyle=0x01010070;
    /**
     * Color used to draw a gesture.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int gestureColor=0x01010275;
    /**
     * Minimum curve angle a stroke must contain before it is recognized as a gesture.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int gestureStrokeAngleThreshold=0x0101027c;
    /**
     * Minimum length of a stroke before it is recognized as a gesture.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int gestureStrokeLengthThreshold=0x0101027a;
    /**
     * Squareness threshold of a stroke before it is recognized as a gesture.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int gestureStrokeSquarenessThreshold=0x0101027b;
    /**
     * Defines the type of strokes that define a gesture.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>multiple</td><td>1</td><td>A gesture is made of multiple strokes.</td></tr>
     * <tr><td>single</td><td>0</td><td>A gesture is made of only one stroke.</td></tr>
     * </table>
     */
    public static final int gestureStrokeType=0x01010279;
    /**
     * Width of the stroke used to draw the gesture.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int gestureStrokeWidth=0x01010274;
    /**
     * The GLES driver version number needed by an application.
     * The higher 16 bits represent the major number and the lower 16 bits
     * represent the minor number. For example for GL 1.2 referring to
     * 0x00000102, the actual value should be set as 0x00010002.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int glEsVersion=0x01010281;
    /**
     * Go button icon.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int goIcon=0x01010482;
    /**
     * Radius of the gradient, used only with radial gradient. May be an explicit dimension
     * or a fractional value relative to the shape's minimum dimension.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int gradientRadius=0x010101a4;
    /**
     * If true, the {@link android.content.Context#grantUriPermission
     * Context.grantUriPermission} or corresponding Intent flags can
     * be used to allow others to access specific URIs in the content
     * provider, even if they do not have an explicit read or write
     * permission.  If you are supporting this feature, you must be
     * sure to call {@link android.content.Context#revokeUriPermission
     * Context.revokeUriPermission} when URIs are deleted from your
     * provider.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int grantUriPermissions=0x0101001b;
    /**
     * Specifies how an object should position its content, on both the X and Y axes,
     * within its own bounds.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
     * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
     * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
     * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
     * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the horizontal gravity: a left gravity will clip the right
     * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
     * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the vertical gravity: a top gravity will clip the bottom
     * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
     * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
     * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
     * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
     * </table>
     */
    public static final int gravity=0x010100af;
    /**
     * Default GridView style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int gridViewStyle=0x01010071;
    /**
     * Indicator shown beside the group View. This can be a stateful Drawable.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int groupIndicator=0x0101010b;
    /**
     * Enable sampled memory bug detection in this process.
     * When enabled, a very small, random subset of native
     * memory allocations are protected with guard pages, providing an
     * ASan-like error report in case of a memory corruption bug.
     * GWP-ASan is a recursive acronym. It stands for “GWP-ASan Will Provide Allocation SANity”.
     * See the <a href="http://llvm.org/docs/GwpAsan.html">LLVM documentation</a>
     * for more information about this feature.
     * <p>This attribute can be applied to a
     * {@link android.R.styleable#AndroidManifestProcess process} tag, or to an
     * {@link android.R.styleable#AndroidManifestApplication application} tag (to supply
     * a default setting for all application components).
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>always</td><td>1</td><td>Always enable GwpAsan.</td></tr>
     * <tr><td>default</td><td>ffffffff</td><td>Default behavior: GwpAsan is disabled in user apps, randomly enabled in system apps.</td></tr>
     * <tr><td>never</td><td>0</td><td>Never enable GwpAsan.</td></tr>
     * </table>
     */
    public static final int gwpAsanMode=0x01010616;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int hand_hour=0x01010103;
    /**
     * Tint to apply to the hour hand graphic.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int hand_hourTint=0x01010638;
    /**
     * Blending mode used to apply the hour hand graphic tint.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     */
    public static final int hand_hourTintMode=0x01010639;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int hand_minute=0x01010104;
    /**
     * Tint to apply to the minute hand graphic.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int hand_minuteTint=0x0101063a;
    /**
     * Blending mode used to apply the minute hand graphic tint.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     */
    public static final int hand_minuteTintMode=0x0101063b;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int hand_second=0x01010623;
    /**
     * Tint to apply to the second hand graphic.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int hand_secondTint=0x0101063c;
    /**
     * Blending mode used to apply the second hand graphic tint.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     */
    public static final int hand_secondTintMode=0x0101063d;
    /**
     * Identifier for the child that represents the drawer's handle.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int handle=0x0101025a;
    /**
     * Flag indicating that an Instrumentation class wants to take care
     * of starting/stopping profiling itself, rather than relying on
     * the default behavior of profiling the complete time it is running.
     * This allows it to target profiling data at a specific set of
     * operations.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int handleProfiling=0x01010022;
    /**
     * Boolean that controls whether a view should have haptic feedback
     * enabled for events such as long presses.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int hapticFeedbackEnabled=0x0101025e;
    /**
     * <p>Flag indicating whether the application's rendering should be hardware
     * accelerated if possible. This flag is turned on by default for applications
     * that are targeting {@link android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH}
     * or later.</p>
     * <p>This flag can be set on the application and any activity declared
     * in the manifest. When enabled for the application, each activity is
     * automatically assumed to be hardware accelerated. This flag can be
     * overridden in the activity tags, either turning it off (if on for the
     * application) or on (if off for the application.)</p>
     * <p>When this flag is turned on for an activity (either directly or via
     * the application tag), every window created from the activity, including
     * the activity's own window, will be hardware accelerated, if possible.</p>
     * <p>Please refer to the documentation of
     * {@link android.view.WindowManager.LayoutParams#FLAG_HARDWARE_ACCELERATED}
     * for more information on how to control this flag programmatically.</p>
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int hardwareAccelerated=0x010102d3;
    /**
     * Indicate whether this application contains code.  If set to false,
     * there is no code associated with it and thus the system will not
     * try to load its code when launching components.  The default is true
     * for normal behavior.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int hasCode=0x0101000c;
    /**
     * If {@code true} the user is prompted to keep the app's data on uninstall
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int hasFragileUserData=0x0101059a;
    /**
     * The SHA-512 hash of the only APK that can be used to update a package.
     * <p>NOTE: This is only applicable to system packages.
     * @hide
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int hash=0x01010526;
    /**
     * The text appearance for the AM/PM header.
     * @deprecated Use headerTextColor instead.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    @Deprecated
    public static final int headerAmPmTextAppearance=0x010104a0;
    /**
     * Default background for the menu header.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int headerBackground=0x0101012f;
    /**
     * The text appearance for the day of month (ex. 28) in the selected date header.
     * {@deprecated Use headerTextColor instead.}
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    @Deprecated
    public static final int headerDayOfMonthTextAppearance=0x01010497;
    /**
     * When set to false, the ListView will not draw the divider after each header view.
     * The default value is true.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int headerDividersEnabled=0x0101022e;
    /**
     * The text appearance for the month (ex. May) in the selected date header.
     * {@deprecated Use headerTextColor instead.}
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    @Deprecated
    public static final int headerMonthTextAppearance=0x01010496;
    /**
     * The text appearance for the time header.
     * @deprecated Use headerTextColor instead.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    @Deprecated
    public static final int headerTimeTextAppearance=0x0101049f;
    /**
     * The text appearance for the year (ex. 2014) in the selected date header.
     * {@deprecated Use headerTextColor instead.}
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    @Deprecated
    public static final int headerYearTextAppearance=0x01010498;
    /**
     * Makes the TextView be exactly this tall.
     * You could get the same effect by specifying this number in the
     * layout parameters.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int height=0x01010155;
    /**
     * Set true to hide the action bar on a vertical nested scroll of content.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int hideOnContentScroll=0x01010443;
    /**
     * Hint text to display when the text is empty.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int hint=0x01010150;
    /**
     * Specifies a drawable to use for the 'home as up' indicator.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int homeAsUpIndicator=0x0101030b;
    /**
     * Specifies a layout to use for the "home" section of the action bar.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int homeLayout=0x0101031d;
    /**
     * Default horizontal divider between rows of menu items.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int horizontalDivider=0x0101012d;
    /**
     * Default horizontal gap between keys.
     * {@deprecated Copy this definition into your own application project.}
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    @Deprecated
    public static final int horizontalGap=0x0101023f;
    /**
     * Default HorizontalScrollView style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int horizontalScrollViewStyle=0x01010353;
    /**
     * Defines the default horizontal spacing between columns.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int horizontalSpacing=0x01010114;
    /**
     * Specify a URI authority host that is handled, as per
     * {@link android.content.IntentFilter#addDataAuthority
     * IntentFilter.addDataAuthority()}.
     * <p><em>Note: host name matching in the Android framework is
     * case-sensitive, unlike the formal RFC.  As a result,
     * host names here should always use lower case letters.</em></p>
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int host=0x01010028;
    /**
     * X coordinate of the icon hot spot.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int hotSpotX=0x01010517;
    /**
     * Y coordinate of the icon hot spot.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int hotSpotY=0x01010518;
    /**
     * @hide
     * The service that provides {@link android.service.voice.HotwordDetectionService}.
     * @hide
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    @android.annotation.SystemApi
    public static final int hotwordDetectionService=0x01010626;
    /**
     * Html description of the target of accessibility shortcut purpose or behavior, to help
     * users understand how the target of accessibility shortcut can help them.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int htmlDescription=0x0101060b;
    /**
     * Frequency of automatic hyphenation.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>full</td><td>2</td><td>Standard amount of hyphenation, useful for running text and for
     * screens with limited space for text.</td></tr>
     * <tr><td>none</td><td>0</td><td>No hyphenation.</td></tr>
     * <tr><td>normal</td><td>1</td><td>Less frequent hyphenation, useful for informal use cases, such
     * as chat messages.</td></tr>
     * </table>
     */
    public static final int hyphenationFrequency=0x010104de;
    /**
     * A Drawable resource providing a graphical representation of its
     * associated item.  Use with the
     * application tag (to supply a default icon for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific icon for that component).  It may also be
     * used with the intent-filter tag to supply an icon to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given icon will be used to display to the user a graphical
     * representation of its associated component; for example, as the icon
     * for main activity that is displayed in the launcher.  This must be
     * a reference to a Drawable resource containing the image definition.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int icon=0x01010002;
    /**
     * The icon to show in the popup preview.
     * {@deprecated Copy this definition into your own application project.}
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    @Deprecated
    public static final int iconPreview=0x01010249;
    /**
     * Whether the space for the preference icon view will be reserved. By default, preference
     * icon view visibility will be set to GONE when there is no icon provided, so the default
     * value of this attribute is false.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int iconSpaceReserved=0x01010561;
    /**
     * Tint to apply to the icon.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int iconTint=0x0101055e;
    /**
     * Blending mode used to apply the icon tint.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and icon color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the icon with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the icon, but with the icon’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the icon. The icon’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the icon.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     */
    public static final int iconTintMode=0x0101055f;
    /**
     * The default state of the SearchView. If true, it will be iconified when not in
     * use and expanded when clicked.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int iconifiedByDefault=0x010102fa;
    /**
     * Supply an identifier name for this view, to later retrieve it
     * with {@link android.view.View#findViewById View.findViewById()} or
     * {@link android.app.Activity#findViewById Activity.findViewById()}.
     * This must be a
     * resource reference; typically you set this using the
     * <code>@+</code> syntax to create a new ID resources.
     * For example: <code>android:id="@+id/my_id"</code> which
     * allows you to later retrieve the view
     * with <code>findViewById(R.id.my_id)</code>.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int id=0x010100d0;
    /**
     * The identifier to assign to the intent, as per
     * {@link android.content.Intent#setIdentifier Intent.setIdentifier()}.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int identifier=0x01010606;
    /**
     * Indicates what view should not be affected by gravity.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int ignoreGravity=0x010101ff;
    /**
     * The style resource to use for an ImageButton.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int imageButtonStyle=0x01010072;
    /**
     * The style resource to use for an ImageButton that is an image well.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int imageWellStyle=0x01010073;
    /**
     * Supply a value for
     * {@link android.view.inputmethod.EditorInfo#actionId EditorInfo.actionId}
     * used when an input method is connected to the text view.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int imeActionId=0x01010266;
    /**
     * Supply a value for
     * {@link android.view.inputmethod.EditorInfo#actionLabel EditorInfo.actionLabel}
     * used when an input method is connected to the text view.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int imeActionLabel=0x01010265;
    /**
     * Animation to use when showing the fullscreen extract UI after
     * it had previously been hidden.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int imeExtractEnterAnimation=0x01010268;
    /**
     * Animation to use when hiding the fullscreen extract UI after
     * it had previously been shown.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int imeExtractExitAnimation=0x01010269;
    /**
     * Background to use for entire input method when it is being
     * shown in fullscreen mode with the extract view, to ensure
     * that it completely covers the application.  This allows,
     * for example, the candidate view to be hidden
     * while in fullscreen mode without having the application show through
     * behind it.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int imeFullscreenBackground=0x0101022c;
    /**
     * Additional features you can enable in an IME associated with an editor
     * to improve the integration with your application.  The constants
     * here correspond to those defined by
     * {@link android.view.inputmethod.EditorInfo#imeOptions}.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>actionDone</td><td>6</td><td>The action key performs a "done"
     * operation, closing the soft input method.
     * Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_ACTION_DONE}.</td></tr>
     * <tr><td>actionGo</td><td>2</td><td>The action key performs a "go"
     * operation to take the user to the target of the text they typed.
     * Typically used, for example, when entering a URL.
     * Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_ACTION_GO}.</td></tr>
     * <tr><td>actionNext</td><td>5</td><td>The action key performs a "next"
     * operation, taking the user to the next field that will accept text.
     * Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_ACTION_NEXT}.</td></tr>
     * <tr><td>actionNone</td><td>1</td><td>This editor has no action associated with it.
     * Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_ACTION_NONE}.</td></tr>
     * <tr><td>actionPrevious</td><td>7</td><td>The action key performs a "previous"
     * operation, taking the user to the previous field that will accept text.
     * Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_ACTION_PREVIOUS}.</td></tr>
     * <tr><td>actionSearch</td><td>3</td><td>The action key performs a "search"
     * operation, taking the user to the results of searching for the text
     * the have typed (in whatever context is appropriate).
     * Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_ACTION_SEARCH}.</td></tr>
     * <tr><td>actionSend</td><td>4</td><td>The action key performs a "send"
     * operation, delivering the text to its target.  This is typically used
     * when composing a message.
     * Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_ACTION_SEND}.</td></tr>
     * <tr><td>actionUnspecified</td><td>0</td><td>There is no specific action associated with this editor, let the
     * editor come up with its own if it can.
     * Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_NULL}.</td></tr>
     * <tr><td>flagForceAscii</td><td>80000000</td><td>Used to request that the IME should be capable of inputting ASCII
     * characters.  The intention of this flag is to ensure that the user
     * can type Roman alphabet characters in a {@link android.widget.TextView}
     * used for, typically, account ID or password input.  It is expected that IMEs
     * normally are able to input ASCII even without being told so (such IMEs
     * already respect this flag in a sense), but there could be some cases they
     * aren't when, for instance, only non-ASCII input languages like Arabic,
     * Greek, Hebrew, Russian are enabled in the IME.  Applications need to be
     * aware that the flag is not a guarantee, and not all IMEs will respect it.
     * However, it is strongly recommended for IME authors to respect this flag
     * especially when their IME could end up with a state that has only non-ASCII
     * input languages enabled.
     * <p>Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_FLAG_FORCE_ASCII}.</td></tr>
     * <tr><td>flagNavigateNext</td><td>8000000</td><td>Used to specify that there is something
     * interesting that a forward navigation can focus on. This is like using
     * actionNext, except allows the IME to be multiline (with
     * an enter key) as well as provide forward navigation.  Note that some
     * IMEs may not be able to do this, especially when running on a small
     * screen where there is little space.  In that case it does not need to
     * present a UI for this option.  Like actionNext, if the
     * user selects the IME's facility to forward navigate, this will show up
     * in the application at
     * {@link android.view.inputmethod.InputConnection#performEditorAction(int)
     * InputConnection.performEditorAction(int)}.
     * <p>Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NAVIGATE_NEXT}.</td></tr>
     * <tr><td>flagNavigatePrevious</td><td>4000000</td><td>Like flagNavigateNext, but
     * specifies there is something interesting that a backward navigation
     * can focus on.  If the user selects the IME's facility to backward
     * navigate, this will show up in the application as an actionPrevious
     * at {@link android.view.inputmethod.InputConnection#performEditorAction(int)
     * InputConnection.performEditorAction(int)}.
     * <p>Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NAVIGATE_PREVIOUS}.</td></tr>
     * <tr><td>flagNoAccessoryAction</td><td>20000000</td><td>Used in conjunction with a custom action, this indicates that the
     * action should not be available as an accessory button when the
     * input method is full-screen.
     * Note that by setting this flag, there can be cases where the action
     * is simply never available to the user.  Setting this generally means
     * that you think showing text being edited is more important than the
     * action you have supplied.
     * <p>Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_ACCESSORY_ACTION}.</td></tr>
     * <tr><td>flagNoEnterAction</td><td>40000000</td><td>Used in conjunction with a custom action,
     * this indicates that the action should not be available in-line as
     * a replacement for the "enter" key.  Typically this is
     * because the action has such a significant impact or is not recoverable
     * enough that accidentally hitting it should be avoided, such as sending
     * a message.    Note that {@link android.widget.TextView} will
     * automatically set this flag for you on multi-line text views.
     * <p>Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_ENTER_ACTION}.</td></tr>
     * <tr><td>flagNoExtractUi</td><td>10000000</td><td>Used to specify that the IME does not need
     * to show its extracted text UI.  For input methods that may be fullscreen,
     * often when in landscape mode, this allows them to be smaller and let part
     * of the application be shown behind.  Though there will likely be limited
     * access to the application available from the user, it can make the
     * experience of a (mostly) fullscreen IME less jarring.  Note that when
     * this flag is specified the IME may <em>not</em> be set up to be able
     * to display text, so it should only be used in situations where this is
     * not needed.
     * <p>Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_EXTRACT_UI}.</td></tr>
     * <tr><td>flagNoFullscreen</td><td>2000000</td><td>Used to request that the IME never go
     * into fullscreen mode.  Applications need to be aware that the flag is not
     * a guarantee, and not all IMEs will respect it.
     * <p>Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_FULLSCREEN}.</td></tr>
     * <tr><td>flagNoPersonalizedLearning</td><td>1000000</td><td>Used to request that the IME should not update any personalized data such as typing
     * history and personalized language model based on what the user typed on this text
     * editing object. Typical use cases are:
     * <ul>
     * <li>When the application is in a special mode, where user's activities are expected
     * to be not recorded in the application's history. Some web browsers and chat
     * applications may have this kind of modes.</li>
     * <li>When storing typing history does not make much sense.  Specifying this flag in
     * typing games may help to avoid typing history from being filled up with words that
     * the user is less likely to type in their daily life.  Another example is that when
     * the application already knows that the expected input is not a valid word (e.g. a
     * promotion code that is not a valid word in any natural language).</li>
     * </ul>
     * <p>Applications need to be aware that the flag is not a guarantee, and some IMEs may
     * not respect it.</p></td></tr>
     * <tr><td>normal</td><td>0</td><td>There are no special semantics associated with this editor.</td></tr>
     * </table>
     */
    public static final int imeOptions=0x01010264;
    /**
     * The extra value of the subtype. This string can be any string and will be passed to
     * the IME when the framework calls the IME with the subtype.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int imeSubtypeExtraValue=0x010102ee;
    /**
     * The locale of the subtype. This string should be a locale (for example en_US and fr_FR)
     * and will be passed to the IME when the framework calls the IME
     * with the subtype. This is also used by the framework to know the supported locales
     * of the IME.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int imeSubtypeLocale=0x010102ec;
    /**
     * The mode of the subtype. This string can be a mode (for example, voice and keyboard)
     * and this string will be passed to the IME when the framework calls the IME with the
     * subtype.  {@link android.view.inputmethod.InputMethodSubtype#getLocale()} returns the
     * value specified in this attribute.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int imeSubtypeMode=0x010102ed;
    /**
     * Flag declaring this activity to be 'immersive'; immersive activities
     * should not be interrupted with other activities or notifications.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int immersive=0x010102c0;
    /**
     * Describes whether or not this view is important for accessibility.
     * If it is important, the view fires accessibility events and is
     * reported to accessibility services that query the screen. Note:
     * While not recommended, an accessibility service may decide to
     * ignore this attribute and operate on all views in the view tree.
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>auto</td><td>0</td><td>The system determines whether the view is important for accessibility - default
     * (recommended).</td></tr>
     * <tr><td>no</td><td>2</td><td>The view is not important for accessibility.</td></tr>
     * <tr><td>noHideDescendants</td><td>4</td><td>The view is not important for accessibility, nor are any of its descendant
     * views.</td></tr>
     * <tr><td>yes</td><td>1</td><td>The view is important for accessibility.</td></tr>
     * </table>
     */
    public static final int importantForAccessibility=0x010103aa;
    /**
     * Hints the Android System whether the view node associated with this View should be
     * included in a view structure used for autofill purposes.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>auto</td><td>0</td><td>Let the Android System use its heuristics to determine if the view is important for autofill.</td></tr>
     * <tr><td>no</td><td>2</td><td>Hint the Android System that this view is *not* important for autofill,
     * but its children (if any) will be traversed..</td></tr>
     * <tr><td>noExcludeDescendants</td><td>8</td><td>Hint the Android System that this view is *not* important for autofill,
     * and its children (if any) will not be traversed.</td></tr>
     * <tr><td>yes</td><td>1</td><td>Hint the Android System that this view is important for autofill,
     * and its children (if any) will be traversed..</td></tr>
     * <tr><td>yesExcludeDescendants</td><td>4</td><td>Hint the Android System that this view is important for autofill,
     * but its children (if any) will not be traversed.</td></tr>
     * </table>
     */
    public static final int importantForAutofill=0x01010558;
    /**
     * Hints the Android System whether the view node associated with this View should be
     * use for content capture purposes.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>auto</td><td>0</td><td>Let the Android System use its heuristics to determine if the view is important for content capture.</td></tr>
     * <tr><td>no</td><td>2</td><td>Hint the Android System that this view is *not* important for content capture,
     * but its children (if any) will be traversed..</td></tr>
     * <tr><td>noExcludeDescendants</td><td>8</td><td>Hint the Android System that this view is *not* important for content capture,
     * and its children (if any) will not be traversed.</td></tr>
     * <tr><td>yes</td><td>1</td><td>Hint the Android System that this view is important for content capture,
     * and its children (if any) will be traversed..</td></tr>
     * <tr><td>yesExcludeDescendants</td><td>4</td><td>Hint the Android System that this view is important for content capture,
     * but its children (if any) will not be traversed.</td></tr>
     * </table>
     */
    public static final int importantForContentCapture=0x01010607;
    /**
     * Identifier for the animation to use when a view is shown.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int inAnimation=0x01010177;
    /**
     * Leave enough room for ascenders and descenders instead of
     * using the font ascent and descent strictly.  (Normally true).
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int includeFontPadding=0x0101015f;
    /**
     * If provided and <code>true</code>, this searchable activity will be
     * included in any global lists of search targets.
     * The default value is <code>false</code>. <i>Optional attribute.</i>.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int includeInGlobalSearch=0x0101026e;
    /**
     * Allows to enable the indeterminate mode. In this mode the progress
     * bar plays an infinite looping animation.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int indeterminate=0x01010139;
    /**
     * Defines how the indeterminate mode should behave when the progress reaches max. Only
     * affects the indeterminate animation if the indeterminate Drawable does not implement
     * android.graphics.drawable.Animatable.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>cycle</td><td>2</td><td>Progress keeps the current value and goes back to 0.</td></tr>
     * <tr><td>repeat</td><td>1</td><td>Progress starts over from 0.</td></tr>
     * </table>
     */
    public static final int indeterminateBehavior=0x0101013e;
    /**
     * Drawable used for the indeterminate mode. One that implements Animatable offers more
     * control over the animation.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int indeterminateDrawable=0x0101013b;
    /**
     * Duration of the indeterminate animation. Only affects the indeterminate animation
     * if the indeterminate Drawable does not implement
     * android.graphics.drawable.Animatable.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int indeterminateDuration=0x0101013d;
    /**
     * Restricts to ONLY indeterminate mode (state-keeping progress mode will not work).
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int indeterminateOnly=0x0101013a;
    /**
     * Specifies a style resource to use for an indeterminate progress spinner.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int indeterminateProgressStyle=0x01010318;
    /**
     * Tint to apply to the indeterminate progress indicator.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int indeterminateTint=0x01010469;
    /**
     * Blending mode used to apply the indeterminate progress indicator tint.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     */
    public static final int indeterminateTintMode=0x0101046a;
    /**
     * The end bound for an item's indicator. To specify a right bound specific to children,
     * use childIndicatorEnd.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int indicatorEnd=0x010103d2;
    /**
     * The left bound for an item's indicator. To specify a left bound specific to children,
     * use childIndicatorLeft.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int indicatorLeft=0x0101010d;
    /**
     * The right bound for an item's indicator. To specify a right bound specific to children,
     * use childIndicatorRight.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int indicatorRight=0x0101010e;
    /**
     * The start bound for an item's indicator. To specify a start bound specific to children,
     * use childIndicatorStart.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int indicatorStart=0x010103d1;
    /**
     * Overrides the id of the inflated View with this value.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int inflatedId=0x010100f3;
    /**
     * Specifies whether this {@link android.app.Activity} should be shown on
     * top of the lock screen whenever the lockscreen is up and this activity has another
     * activity behind it with the {@link android.R.attr#showWhenLocked} attribute set. That
     * is, this activity is only visible on the lock screen if there is another activity with
     * the {@link android.R.attr#showWhenLocked} attribute visible at the same time on the
     * lock screen. A use case for this is permission dialogs, that should only be visible on
     * the lock screen if their requesting activity is also visible.
     * <p>The default value of this attribute is <code>false</code>.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int inheritShowWhenLocked=0x0101059c;
    /**
     * Specify the order in which content providers hosted by a process
     * are instantiated when that process is created.  Not needed unless
     * you have providers with dependencies between each other, to make
     * sure that they are created in the order needed by those dependencies.
     * The value is a simple integer, with higher numbers being
     * initialized first.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int initOrder=0x0101001a;
    /**
     * A resource id of a layout.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int initialKeyguardLayout=0x010103c2;
    /**
     * A resource id of a layout.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int initialLayout=0x01010251;
    /**
     * Inner radius of the ring. When defined, innerRadiusRatio is ignored.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int innerRadius=0x0101025f;
    /**
     * Inner radius of the ring expressed as a ratio of the ring's width. For instance,
     * if innerRadiusRatio=9, then the inner radius equals the ring's width divided by 9.
     * This value is ignored if innerRadius is defined. Default value is 9.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int innerRadiusRatio=0x0101019b;
    /**
     * If set, specifies that this TextView should use the specified
     * input method (specified by fully-qualified class name).
     * {@deprecated Use inputType instead.}
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    @Deprecated
    public static final int inputMethod=0x01010168;
    /**
     * The type of data being placed in a text field, used to help an
     * input method decide how to let the user enter text.  The constants
     * here correspond to those defined by
     * {@link android.text.InputType}.  Generally you can select
     * a single value, though some can be combined together as
     * indicated.  Setting this attribute to anything besides
     * <var>none</var> also implies that the text is editable.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>date</td><td>14</td><td>For entering a date.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_DATETIME} |
     * {@link android.text.InputType#TYPE_DATETIME_VARIATION_DATE}.</td></tr>
     * <tr><td>datetime</td><td>4</td><td>For entering a date and time.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_DATETIME} |
     * {@link android.text.InputType#TYPE_DATETIME_VARIATION_NORMAL}.</td></tr>
     * <tr><td>none</td><td>0</td><td>There is no content type.  The text is not editable.</td></tr>
     * <tr><td>number</td><td>2</td><td>A numeric only field.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
     * {@link android.text.InputType#TYPE_NUMBER_VARIATION_NORMAL}.</td></tr>
     * <tr><td>numberDecimal</td><td>2002</td><td>Can be combined with <var>number</var> and its other options to
     * allow a decimal (fractional) number.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
     * {@link android.text.InputType#TYPE_NUMBER_FLAG_DECIMAL}.</td></tr>
     * <tr><td>numberPassword</td><td>12</td><td>A numeric password field.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
     * {@link android.text.InputType#TYPE_NUMBER_VARIATION_PASSWORD}.</td></tr>
     * <tr><td>numberSigned</td><td>1002</td><td>Can be combined with <var>number</var> and its other options to
     * allow a signed number.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
     * {@link android.text.InputType#TYPE_NUMBER_FLAG_SIGNED}.</td></tr>
     * <tr><td>phone</td><td>3</td><td>For entering a phone number.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_PHONE}.</td></tr>
     * <tr><td>text</td><td>1</td><td>Just plain old text.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_NORMAL}.</td></tr>
     * <tr><td>textAutoComplete</td><td>10001</td><td>Can be combined with <var>text</var> and its variations to
     * specify that this field will be doing its own auto-completion and
     * talking with the input method appropriately.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_AUTO_COMPLETE}.</td></tr>
     * <tr><td>textAutoCorrect</td><td>8001</td><td>Can be combined with <var>text</var> and its variations to
     * request auto-correction of text being input.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_AUTO_CORRECT}.</td></tr>
     * <tr><td>textCapCharacters</td><td>1001</td><td>Can be combined with <var>text</var> and its variations to
     * request capitalization of all characters.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_CHARACTERS}.</td></tr>
     * <tr><td>textCapSentences</td><td>4001</td><td>Can be combined with <var>text</var> and its variations to
     * request capitalization of the first character of every sentence.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_SENTENCES}.</td></tr>
     * <tr><td>textCapWords</td><td>2001</td><td>Can be combined with <var>text</var> and its variations to
     * request capitalization of the first character of every word.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_WORDS}.</td></tr>
     * <tr><td>textEmailAddress</td><td>21</td><td>Text that will be used as an e-mail address.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_EMAIL_ADDRESS}.</td></tr>
     * <tr><td>textEmailSubject</td><td>31</td><td>Text that is being supplied as the subject of an e-mail.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_EMAIL_SUBJECT}.</td></tr>
     * <tr><td>textFilter</td><td>b1</td><td>Text that is filtering some other data.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_FILTER}.</td></tr>
     * <tr><td>textImeMultiLine</td><td>40001</td><td>Can be combined with <var>text</var> and its variations to
     * indicate that though the regular text view should not be multiple
     * lines, the IME should provide multiple lines if it can.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_IME_MULTI_LINE}.</td></tr>
     * <tr><td>textLongMessage</td><td>51</td><td>Text that is the content of a long message.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_LONG_MESSAGE}.</td></tr>
     * <tr><td>textMultiLine</td><td>20001</td><td>Can be combined with <var>text</var> and its variations to
     * allow multiple lines of text in the field.  If this flag is not set,
     * the text field will be constrained to a single line.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_MULTI_LINE}.
     * Note: If this flag is not set and the text field doesn't have max length limit, the
     * framework automatically set maximum length of the characters to 5000 for the
     * performance reasons.</td></tr>
     * <tr><td>textNoSuggestions</td><td>80001</td><td>Can be combined with <var>text</var> and its variations to
     * indicate that the IME should not show any
     * dictionary-based word suggestions.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_NO_SUGGESTIONS}.</td></tr>
     * <tr><td>textPassword</td><td>81</td><td>Text that is a password.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_PASSWORD}.</td></tr>
     * <tr><td>textPersonName</td><td>61</td><td>Text that is the name of a person.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_PERSON_NAME}.</td></tr>
     * <tr><td>textPhonetic</td><td>c1</td><td>Text that is for phonetic pronunciation, such as a phonetic name
     * field in a contact entry.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_PHONETIC}.</td></tr>
     * <tr><td>textPostalAddress</td><td>71</td><td>Text that is being supplied as a postal mailing address.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_POSTAL_ADDRESS}.</td></tr>
     * <tr><td>textShortMessage</td><td>41</td><td>Text that is the content of a short message.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_SHORT_MESSAGE}.</td></tr>
     * <tr><td>textUri</td><td>11</td><td>Text that will be used as a URI.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_URI}.</td></tr>
     * <tr><td>textVisiblePassword</td><td>91</td><td>Text that is a password that should be visible.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_VISIBLE_PASSWORD}.</td></tr>
     * <tr><td>textWebEditText</td><td>a1</td><td>Text that is being supplied as text in a web form.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_EDIT_TEXT}.</td></tr>
     * <tr><td>textWebEmailAddress</td><td>d1</td><td>Text that will be used as an e-mail address on a web form.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS}.</td></tr>
     * <tr><td>textWebPassword</td><td>e1</td><td>Text that will be used as a password on a web form.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_PASSWORD}.</td></tr>
     * <tr><td>time</td><td>24</td><td>For entering a time.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_DATETIME} |
     * {@link android.text.InputType#TYPE_DATETIME_VARIATION_TIME}.</td></tr>
     * </table>
     */
    public static final int inputType=0x01010220;
    /**
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int inset=0x010104b5;
    /**
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int insetBottom=0x010101ba;
    /**
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int insetLeft=0x010101b7;
    /**
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int insetRight=0x010101b8;
    /**
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int insetTop=0x010101b9;
    /**
     * The default install location defined by an application.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>auto</td><td>0</td><td>Let the system decide ideal install location</td></tr>
     * <tr><td>internalOnly</td><td>1</td><td>Explicitly request to be installed on internal phone storage
     * only.</td></tr>
     * <tr><td>preferExternal</td><td>2</td><td>Prefer to be installed on SD card. There is no guarantee that
     * the system will honor this request. The application might end
     * up being installed on internal storage if external media
     * is unavailable or too full.</td></tr>
     * </table>
     */
    public static final int installLocation=0x010102b7;
    /**
     * A recommended timeout in milliseconds used in
     * {@link android.view.accessibility.AccessibilityManager#getRecommendedTimeoutMillis(int, int)
     * android.view.accessibility.AccessibilityManager.getRecommendedTimeoutMillis(int, int)}
     * to return a suitable value for interactive controls.
     * This setting can be changed at runtime by calling
     * {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
     * android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int interactiveUiTimeout=0x01010595;
    /**
     * Sets the acceleration curve for the indeterminate animation. Defaults to a linear
     * interpolation. Only affects the indeterminate animation if the indeterminate Drawable
     * does not implement android.graphics.drawable.Animatable.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int interpolator=0x01010141;
    /**
     * Attribute indicating whether the accessibility service is used to assist users with
     * disabilities. This criteria might be defined by the installer. The default is false.
     * <p>
     * Note: If this flag is false, system will show a notification after a duration to
     * inform the user about the privacy implications of the service.
     * </p>
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int isAccessibilityTool=0x01010641;
    /**
     * Set to true to tell the SyncManager to automatically call setIsSyncable(..., ..., 1)
     * for the SyncAdapter instead of issuaing an initialization sync to the SyncAdapter.
     * Defaults to false.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int isAlwaysSyncable=0x01010333;
    /**
     * Set to {@code true} if this subtype is ASCII capable. If the subtype is ASCII
     * capable, it should guarantee that the user can input ASCII characters with
     * this subtype. This is important because many password fields only allow
     * ASCII-characters.
     * <p>Note: In order to avoid some known system issues on
     * {@link android.os.Build.VERSION_CODES#P} and prior OSes, you may want to include
     * {@code "AsciiCapable"} in
     * {@link android.R.styleable#InputMethod_Subtype_imeSubtypeExtraValue} when you specify
     * {@code true} to this attribute.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int isAsciiCapable=0x010103e9;
    /**
     * Set true if the subtype is auxiliary.  An auxiliary subtype won't be shown in the
     * input method selection list in the settings app.
     * InputMethodManager#switchToLastInputMethod will ignore auxiliary subtypes when it
     * chooses a target subtype.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int isAuxiliary=0x0101037f;
    /**
     * Set to true in all of the configurations for which this input
     * method should be considered an option as the default.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int isDefault=0x01010221;
    /**
     * If set to <code>true</code>, indicates to the platform that this APK is
     * a 'feature' split and that it implicitly depends on the base APK. This distinguishes
     * this split APK from a 'configuration' split, which provides resource overrides
     * for a particular 'feature' split. Only useful when the base APK specifies
     * <code>android:isolatedSplits="true"</code>.
     * <p>The default value of this attribute is <code>false</code>.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int isFeatureSplit=0x0101055b;
    /**
     * A boolean flag used to indicate if an application is a Game or not.
     * <p>This information can be used by the system to group together
     * applications that are classified as games, and display them separately
     * from the other applications.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int isGame=0x010103f4;
    /**
     * Whether this rating bar is an indicator (and non-changeable by the user).
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int isIndicator=0x01010147;
    /**
     * Specifies that a theme has a light background with dark text on top.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int isLightTheme=0x01010590;
    /**
     * Whether this is a modifier key such as Alt or Shift.
     * {@deprecated Copy this definition into your own application project.}
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    @Deprecated
    public static final int isModifier=0x01010246;
    /**
     * Whether long-pressing on this key will make it repeat.
     * {@deprecated Copy this definition into your own application project.}
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    @Deprecated
    public static final int isRepeatable=0x01010248;
    /**
     * Set this if the view will serve as a scrolling container, meaning
     * that it can be resized to shrink its overall window so that there
     * will be space for an input method.  If not set, the default
     * value will be true if "scrollbars" has the vertical scrollbar
     * set, else it will be false.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int isScrollContainer=0x0101024e;
    /**
     * Flag to specify if this APK requires at least one split [either feature or
     * resource] to be present in order to function. Default value is false.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int isSplitRequired=0x01010591;
    /**
     * Whether the given RRO is static or not.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int isStatic=0x0101055a;
    /**
     * Whether this is a toggle key.
     * {@deprecated Copy this definition into your own application project.}
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    @Deprecated
    public static final int isSticky=0x01010247;
    /**
     * @hide
     * Specifies if an IME can only be used while a device is in VR mode or on a dedicated
     * device
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    @android.annotation.SystemApi
    public static final int isVrOnly=0x01010578;
    /**
     * If set to true, this service will run under a special process
     * that is isolated from the rest of the system.  The only communication
     * with it is through the Service API (binding and starting).
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int isolatedProcess=0x010103a9;
    /**
     * If set to <code>true</code>, indicates to the platform that any split APKs
     * installed for this application should be loaded into their own Context
     * objects and not appear in the base application's Context.
     * <p>The default value of this attribute is <code>false</code>.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int isolatedSplits=0x0101054b;
    /**
     * Default background for each menu item.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int itemBackground=0x01010130;
    /**
     * Default disabled icon alpha for each menu item that shows an icon.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int itemIconDisabledAlpha=0x01010131;
    /**
     * Specifies padding that should be applied to the left and right sides of
     * system-provided items in the bar.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int itemPadding=0x0101032d;
    /**
     * Default appearance of menu item text.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int itemTextAppearance=0x0101012c;
    /**
     * Mode for justification.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>inter_word</td><td>1</td><td>Justification by stretching word spacing.</td></tr>
     * <tr><td>none</td><td>0</td><td>No justification.</td></tr>
     * </table>
     */
    public static final int justificationMode=0x01010567;
    /**
     * Controls whether the view's window should keep the screen on
     * while visible.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int keepScreenOn=0x01010216;
    /**
     * The key to store the Preference value.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int key=0x010101e8;
    /**
     * Image for the key. This image needs to be a StateListDrawable, with the following
     * possible states: normal, pressed, checkable, checkable+pressed, checkable+checked,
     * checkable+checked+pressed.
     * {@deprecated Copy this definition into your own application project.}
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    @Deprecated
    public static final int keyBackground=0x01010233;
    /**
     * Key edge flags.
     * {@deprecated Copy this definition into your own application project.}
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>left</td><td>1</td><td>Key is anchored to the left of the keyboard.
     * {@deprecated Copy this definition into your own application project.}</td></tr>
     * <tr><td>right</td><td>2</td><td>Key is anchored to the right of the keyboard.
     * {@deprecated Copy this definition into your own application project.}</td></tr>
     * </table>
     */
    @Deprecated
    public static final int keyEdgeFlags=0x01010245;
    /**
     * Default height of a key, in pixels or percentage of display width.
     * {@deprecated Copy this definition into your own application project.}
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    @Deprecated
    public static final int keyHeight=0x0101023e;
    /**
     * The icon to display on the key instead of the label.
     * {@deprecated Copy this definition into your own application project.}
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    @Deprecated
    public static final int keyIcon=0x0101024c;
    /**
     * The label to display on the key.
     * {@deprecated Copy this definition into your own application project.}
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    @Deprecated
    public static final int keyLabel=0x0101024b;
    /**
     * The string of characters to output when this key is pressed.
     * {@deprecated Copy this definition into your own application project.}
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    @Deprecated
    public static final int keyOutputText=0x0101024a;
    /**
     * Height of the key press feedback popup.
     * {@deprecated Copy this definition into your own application project.}
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    @Deprecated
    public static final int keyPreviewHeight=0x01010239;
    /**
     * Layout resource for key press feedback.
     * {@deprecated Copy this definition into your own application project.}
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    @Deprecated
    public static final int keyPreviewLayout=0x01010237;
    /**
     * Vertical offset of the key press feedback from the key.
     * {@deprecated Copy this definition into your own application project.}
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    @Deprecated
    public static final int keyPreviewOffset=0x01010238;
    /**
     * Groups signing keys into a {@code KeySet} for easier reference in
     * other APIs. However, currently no APIs use this.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int keySet=0x010103db;
    /**
     * Color to use for the label in a key.
     * {@deprecated Copy this definition into your own application project.}
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    @Deprecated
    public static final int keyTextColor=0x01010236;
    /**
     * Size of the text for character keys.
     * {@deprecated Copy this definition into your own application project.}
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    @Deprecated
    public static final int keyTextSize=0x01010234;
    /**
     * Default width of a key, in pixels or percentage of display width.
     * {@deprecated Copy this definition into your own application project.}
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    @Deprecated
    public static final int keyWidth=0x0101023d;
    /**
     * The key character map file resource.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int keyboardLayout=0x010103ab;
    /**
     * Mode of the keyboard. If the mode doesn't match the
     * requested keyboard mode, the row will be skipped.
     * {@deprecated Copy this definition into your own application project.}
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    @Deprecated
    public static final int keyboardMode=0x0101024d;
    /**
     * Whether this view is a root of a keyboard navigation cluster.
     * See {@link android.view.View#setKeyboardNavigationCluster(boolean)}.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int keyboardNavigationCluster=0x01010540;
    /**
     * This enum provides the same keycode values as can be found in
     * {@link android.view.KeyEvent}.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>KEYCODE_0</td><td>7</td><td></td></tr>
     * <tr><td>KEYCODE_1</td><td>8</td><td></td></tr>
     * <tr><td>KEYCODE_11</td><td>e3</td><td></td></tr>
     * <tr><td>KEYCODE_12</td><td>e4</td><td></td></tr>
     * <tr><td>KEYCODE_2</td><td>9</td><td></td></tr>
     * <tr><td>KEYCODE_3</td><td>a</td><td></td></tr>
     * <tr><td>KEYCODE_3D_MODE</td><td>ce</td><td></td></tr>
     * <tr><td>KEYCODE_4</td><td>b</td><td></td></tr>
     * <tr><td>KEYCODE_5</td><td>c</td><td></td></tr>
     * <tr><td>KEYCODE_6</td><td>d</td><td></td></tr>
     * <tr><td>KEYCODE_7</td><td>e</td><td></td></tr>
     * <tr><td>KEYCODE_8</td><td>f</td><td></td></tr>
     * <tr><td>KEYCODE_9</td><td>10</td><td></td></tr>
     * <tr><td>KEYCODE_A</td><td>1d</td><td></td></tr>
     * <tr><td>KEYCODE_ALL_APPS</td><td>11c</td><td></td></tr>
     * <tr><td>KEYCODE_ALT_LEFT</td><td>39</td><td></td></tr>
     * <tr><td>KEYCODE_ALT_RIGHT</td><td>3a</td><td></td></tr>
     * <tr><td>KEYCODE_APOSTROPHE</td><td>4b</td><td></td></tr>
     * <tr><td>KEYCODE_APP_SWITCH</td><td>bb</td><td></td></tr>
     * <tr><td>KEYCODE_ASSIST</td><td>db</td><td></td></tr>
     * <tr><td>KEYCODE_AT</td><td>4d</td><td></td></tr>
     * <tr><td>KEYCODE_AVR_INPUT</td><td>b6</td><td></td></tr>
     * <tr><td>KEYCODE_AVR_POWER</td><td>b5</td><td></td></tr>
     * <tr><td>KEYCODE_B</td><td>1e</td><td></td></tr>
     * <tr><td>KEYCODE_BACK</td><td>4</td><td></td></tr>
     * <tr><td>KEYCODE_BACKSLASH</td><td>49</td><td></td></tr>
     * <tr><td>KEYCODE_BOOKMARK</td><td>ae</td><td></td></tr>
     * <tr><td>KEYCODE_BREAK</td><td>79</td><td></td></tr>
     * <tr><td>KEYCODE_BRIGHTNESS_DOWN</td><td>dc</td><td></td></tr>
     * <tr><td>KEYCODE_BRIGHTNESS_UP</td><td>dd</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_1</td><td>bc</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_10</td><td>c5</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_11</td><td>c6</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_12</td><td>c7</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_13</td><td>c8</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_14</td><td>c9</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_15</td><td>ca</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_16</td><td>cb</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_2</td><td>bd</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_3</td><td>be</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_4</td><td>bf</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_5</td><td>c0</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_6</td><td>c1</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_7</td><td>c2</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_8</td><td>c3</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_9</td><td>c4</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_A</td><td>60</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_B</td><td>61</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_C</td><td>62</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_L1</td><td>66</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_L2</td><td>68</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_MODE</td><td>6e</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_R1</td><td>67</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_R2</td><td>69</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_SELECT</td><td>6d</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_START</td><td>6c</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_THUMBL</td><td>6a</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_THUMBR</td><td>6b</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_X</td><td>63</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_Y</td><td>64</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_Z</td><td>65</td><td></td></tr>
     * <tr><td>KEYCODE_C</td><td>1f</td><td></td></tr>
     * <tr><td>KEYCODE_CALCULATOR</td><td>d2</td><td></td></tr>
     * <tr><td>KEYCODE_CALENDAR</td><td>d0</td><td></td></tr>
     * <tr><td>KEYCODE_CALL</td><td>5</td><td></td></tr>
     * <tr><td>KEYCODE_CAMERA</td><td>1b</td><td></td></tr>
     * <tr><td>KEYCODE_CAPS_LOCK</td><td>73</td><td></td></tr>
     * <tr><td>KEYCODE_CAPTIONS</td><td>af</td><td></td></tr>
     * <tr><td>KEYCODE_CHANNEL_DOWN</td><td>a7</td><td></td></tr>
     * <tr><td>KEYCODE_CHANNEL_UP</td><td>a6</td><td></td></tr>
     * <tr><td>KEYCODE_CLEAR</td><td>1c</td><td></td></tr>
     * <tr><td>KEYCODE_COMMA</td><td>37</td><td></td></tr>
     * <tr><td>KEYCODE_CONTACTS</td><td>cf</td><td></td></tr>
     * <tr><td>KEYCODE_COPY</td><td>116</td><td></td></tr>
     * <tr><td>KEYCODE_CTRL_LEFT</td><td>71</td><td></td></tr>
     * <tr><td>KEYCODE_CTRL_RIGHT</td><td>72</td><td></td></tr>
     * <tr><td>KEYCODE_CUT</td><td>115</td><td></td></tr>
     * <tr><td>KEYCODE_D</td><td>20</td><td></td></tr>
     * <tr><td>KEYCODE_DEL</td><td>43</td><td></td></tr>
     * <tr><td>KEYCODE_DPAD_CENTER</td><td>17</td><td></td></tr>
     * <tr><td>KEYCODE_DPAD_DOWN</td><td>14</td><td></td></tr>
     * <tr><td>KEYCODE_DPAD_DOWN_LEFT</td><td>10d</td><td></td></tr>
     * <tr><td>KEYCODE_DPAD_DOWN_RIGHT</td><td>10f</td><td></td></tr>
     * <tr><td>KEYCODE_DPAD_LEFT</td><td>15</td><td></td></tr>
     * <tr><td>KEYCODE_DPAD_RIGHT</td><td>16</td><td></td></tr>
     * <tr><td>KEYCODE_DPAD_UP</td><td>13</td><td></td></tr>
     * <tr><td>KEYCODE_DPAD_UP_LEFT</td><td>10c</td><td></td></tr>
     * <tr><td>KEYCODE_DPAD_UP_RIGHT</td><td>10e</td><td></td></tr>
     * <tr><td>KEYCODE_DVR</td><td>ad</td><td></td></tr>
     * <tr><td>KEYCODE_E</td><td>21</td><td></td></tr>
     * <tr><td>KEYCODE_EISU</td><td>d4</td><td></td></tr>
     * <tr><td>KEYCODE_ENDCALL</td><td>6</td><td></td></tr>
     * <tr><td>KEYCODE_ENTER</td><td>42</td><td></td></tr>
     * <tr><td>KEYCODE_ENVELOPE</td><td>41</td><td></td></tr>
     * <tr><td>KEYCODE_EQUALS</td><td>46</td><td></td></tr>
     * <tr><td>KEYCODE_ESCAPE</td><td>6f</td><td></td></tr>
     * <tr><td>KEYCODE_EXPLORER</td><td>40</td><td></td></tr>
     * <tr><td>KEYCODE_F</td><td>22</td><td></td></tr>
     * <tr><td>KEYCODE_F1</td><td>83</td><td></td></tr>
     * <tr><td>KEYCODE_F10</td><td>8c</td><td></td></tr>
     * <tr><td>KEYCODE_F11</td><td>8d</td><td></td></tr>
     * <tr><td>KEYCODE_F12</td><td>8e</td><td></td></tr>
     * <tr><td>KEYCODE_F2</td><td>84</td><td></td></tr>
     * <tr><td>KEYCODE_F3</td><td>85</td><td></td></tr>
     * <tr><td>KEYCODE_F4</td><td>86</td><td></td></tr>
     * <tr><td>KEYCODE_F5</td><td>87</td><td></td></tr>
     * <tr><td>KEYCODE_F6</td><td>88</td><td></td></tr>
     * <tr><td>KEYCODE_F7</td><td>89</td><td></td></tr>
     * <tr><td>KEYCODE_F8</td><td>8a</td><td></td></tr>
     * <tr><td>KEYCODE_F9</td><td>8b</td><td></td></tr>
     * <tr><td>KEYCODE_FOCUS</td><td>50</td><td></td></tr>
     * <tr><td>KEYCODE_FORWARD</td><td>7d</td><td></td></tr>
     * <tr><td>KEYCODE_FORWARD_DEL</td><td>70</td><td></td></tr>
     * <tr><td>KEYCODE_FUNCTION</td><td>77</td><td></td></tr>
     * <tr><td>KEYCODE_G</td><td>23</td><td></td></tr>
     * <tr><td>KEYCODE_GRAVE</td><td>44</td><td></td></tr>
     * <tr><td>KEYCODE_GUIDE</td><td>ac</td><td></td></tr>
     * <tr><td>KEYCODE_H</td><td>24</td><td></td></tr>
     * <tr><td>KEYCODE_HEADSETHOOK</td><td>4f</td><td></td></tr>
     * <tr><td>KEYCODE_HELP</td><td>103</td><td></td></tr>
     * <tr><td>KEYCODE_HENKAN</td><td>d6</td><td></td></tr>
     * <tr><td>KEYCODE_HOME</td><td>3</td><td></td></tr>
     * <tr><td>KEYCODE_I</td><td>25</td><td></td></tr>
     * <tr><td>KEYCODE_INFO</td><td>a5</td><td></td></tr>
     * <tr><td>KEYCODE_INSERT</td><td>7c</td><td></td></tr>
     * <tr><td>KEYCODE_J</td><td>26</td><td></td></tr>
     * <tr><td>KEYCODE_K</td><td>27</td><td></td></tr>
     * <tr><td>KEYCODE_KANA</td><td>da</td><td></td></tr>
     * <tr><td>KEYCODE_KATAKANA_HIRAGANA</td><td>d7</td><td></td></tr>
     * <tr><td>KEYCODE_L</td><td>28</td><td></td></tr>
     * <tr><td>KEYCODE_LANGUAGE_SWITCH</td><td>cc</td><td></td></tr>
     * <tr><td>KEYCODE_LAST_CHANNEL</td><td>e5</td><td></td></tr>
     * <tr><td>KEYCODE_LEFT_BRACKET</td><td>47</td><td></td></tr>
     * <tr><td>KEYCODE_M</td><td>29</td><td></td></tr>
     * <tr><td>KEYCODE_MANNER_MODE</td><td>cd</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_AUDIO_TRACK</td><td>de</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_CLOSE</td><td>80</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_EJECT</td><td>81</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_FAST_FORWARD</td><td>5a</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_NEXT</td><td>57</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_PAUSE</td><td>7f</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_PLAY</td><td>7e</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_PLAY_PAUSE</td><td>55</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_PREVIOUS</td><td>58</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_RECORD</td><td>82</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_REWIND</td><td>59</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_SKIP_BACKWARD</td><td>111</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_SKIP_FORWARD</td><td>110</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_SLEEP</td><td>df</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_STEP_BACKWARD</td><td>113</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_STEP_FORWARD</td><td>112</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_STOP</td><td>56</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_TOP_MENU</td><td>e2</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_WAKEUP</td><td>e0</td><td></td></tr>
     * <tr><td>KEYCODE_MENU</td><td>52</td><td></td></tr>
     * <tr><td>KEYCODE_META_LEFT</td><td>75</td><td></td></tr>
     * <tr><td>KEYCODE_META_RIGHT</td><td>76</td><td></td></tr>
     * <tr><td>KEYCODE_MINUS</td><td>45</td><td></td></tr>
     * <tr><td>KEYCODE_MOVE_END</td><td>7b</td><td></td></tr>
     * <tr><td>KEYCODE_MOVE_HOME</td><td>7a</td><td></td></tr>
     * <tr><td>KEYCODE_MUHENKAN</td><td>d5</td><td></td></tr>
     * <tr><td>KEYCODE_MUSIC</td><td>d1</td><td></td></tr>
     * <tr><td>KEYCODE_MUTE</td><td>5b</td><td></td></tr>
     * <tr><td>KEYCODE_N</td><td>2a</td><td></td></tr>
     * <tr><td>KEYCODE_NAVIGATE_IN</td><td>106</td><td></td></tr>
     * <tr><td>KEYCODE_NAVIGATE_NEXT</td><td>105</td><td></td></tr>
     * <tr><td>KEYCODE_NAVIGATE_OUT</td><td>107</td><td></td></tr>
     * <tr><td>KEYCODE_NAVIGATE_PREVIOUS</td><td>104</td><td></td></tr>
     * <tr><td>KEYCODE_NOTIFICATION</td><td>53</td><td></td></tr>
     * <tr><td>KEYCODE_NUM</td><td>4e</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_0</td><td>90</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_1</td><td>91</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_2</td><td>92</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_3</td><td>93</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_4</td><td>94</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_5</td><td>95</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_6</td><td>96</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_7</td><td>97</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_8</td><td>98</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_9</td><td>99</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_ADD</td><td>9d</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_COMMA</td><td>9f</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_DIVIDE</td><td>9a</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_DOT</td><td>9e</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_ENTER</td><td>a0</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_EQUALS</td><td>a1</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_LEFT_PAREN</td><td>a2</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_MULTIPLY</td><td>9b</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_RIGHT_PAREN</td><td>a3</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_SUBTRACT</td><td>9c</td><td></td></tr>
     * <tr><td>KEYCODE_NUM_LOCK</td><td>8f</td><td></td></tr>
     * <tr><td>KEYCODE_O</td><td>2b</td><td></td></tr>
     * <tr><td>KEYCODE_P</td><td>2c</td><td></td></tr>
     * <tr><td>KEYCODE_PAGE_DOWN</td><td>5d</td><td></td></tr>
     * <tr><td>KEYCODE_PAGE_UP</td><td>5c</td><td></td></tr>
     * <tr><td>KEYCODE_PAIRING</td><td>e1</td><td></td></tr>
     * <tr><td>KEYCODE_PASTE</td><td>117</td><td></td></tr>
     * <tr><td>KEYCODE_PERIOD</td><td>38</td><td></td></tr>
     * <tr><td>KEYCODE_PICTSYMBOLS</td><td>5e</td><td></td></tr>
     * <tr><td>KEYCODE_PLUS</td><td>51</td><td></td></tr>
     * <tr><td>KEYCODE_POUND</td><td>12</td><td></td></tr>
     * <tr><td>KEYCODE_POWER</td><td>1a</td><td></td></tr>
     * <tr><td>KEYCODE_PROFILE_SWITCH</td><td>120</td><td></td></tr>
     * <tr><td>KEYCODE_PROG_BLUE</td><td>ba</td><td></td></tr>
     * <tr><td>KEYCODE_PROG_GRED</td><td>b7</td><td></td></tr>
     * <tr><td>KEYCODE_PROG_GREEN</td><td>b8</td><td></td></tr>
     * <tr><td>KEYCODE_PROG_YELLOW</td><td>b9</td><td></td></tr>
     * <tr><td>KEYCODE_Q</td><td>2d</td><td></td></tr>
     * <tr><td>KEYCODE_R</td><td>2e</td><td></td></tr>
     * <tr><td>KEYCODE_REFRESH</td><td>11d</td><td></td></tr>
     * <tr><td>KEYCODE_RIGHT_BRACKET</td><td>48</td><td></td></tr>
     * <tr><td>KEYCODE_RO</td><td>d9</td><td></td></tr>
     * <tr><td>KEYCODE_S</td><td>2f</td><td></td></tr>
     * <tr><td>KEYCODE_SCROLL_LOCK</td><td>74</td><td></td></tr>
     * <tr><td>KEYCODE_SEARCH</td><td>54</td><td></td></tr>
     * <tr><td>KEYCODE_SEMICOLON</td><td>4a</td><td></td></tr>
     * <tr><td>KEYCODE_SETTINGS</td><td>b0</td><td></td></tr>
     * <tr><td>KEYCODE_SHIFT_LEFT</td><td>3b</td><td></td></tr>
     * <tr><td>KEYCODE_SHIFT_RIGHT</td><td>3c</td><td></td></tr>
     * <tr><td>KEYCODE_SLASH</td><td>4c</td><td></td></tr>
     * <tr><td>KEYCODE_SOFT_LEFT</td><td>1</td><td></td></tr>
     * <tr><td>KEYCODE_SOFT_RIGHT</td><td>2</td><td></td></tr>
     * <tr><td>KEYCODE_SOFT_SLEEP</td><td>114</td><td></td></tr>
     * <tr><td>KEYCODE_SPACE</td><td>3e</td><td></td></tr>
     * <tr><td>KEYCODE_STAR</td><td>11</td><td></td></tr>
     * <tr><td>KEYCODE_STB_INPUT</td><td>b4</td><td></td></tr>
     * <tr><td>KEYCODE_STB_POWER</td><td>b3</td><td></td></tr>
     * <tr><td>KEYCODE_STEM_1</td><td>109</td><td></td></tr>
     * <tr><td>KEYCODE_STEM_2</td><td>10a</td><td></td></tr>
     * <tr><td>KEYCODE_STEM_3</td><td>10b</td><td></td></tr>
     * <tr><td>KEYCODE_STEM_PRIMARY</td><td>108</td><td></td></tr>
     * <tr><td>KEYCODE_SWITCH_CHARSET</td><td>5f</td><td></td></tr>
     * <tr><td>KEYCODE_SYM</td><td>3f</td><td></td></tr>
     * <tr><td>KEYCODE_SYSRQ</td><td>78</td><td></td></tr>
     * <tr><td>KEYCODE_SYSTEM_NAVIGATION_DOWN</td><td>119</td><td></td></tr>
     * <tr><td>KEYCODE_SYSTEM_NAVIGATION_LEFT</td><td>11a</td><td></td></tr>
     * <tr><td>KEYCODE_SYSTEM_NAVIGATION_RIGHT</td><td>11b</td><td></td></tr>
     * <tr><td>KEYCODE_SYSTEM_NAVIGATION_UP</td><td>118</td><td></td></tr>
     * <tr><td>KEYCODE_T</td><td>30</td><td></td></tr>
     * <tr><td>KEYCODE_TAB</td><td>3d</td><td></td></tr>
     * <tr><td>KEYCODE_THUMBS_DOWN</td><td>11f</td><td></td></tr>
     * <tr><td>KEYCODE_THUMBS_UP</td><td>11e</td><td></td></tr>
     * <tr><td>KEYCODE_TV</td><td>aa</td><td></td></tr>
     * <tr><td>KEYCODE_TV_ANTENNA_CABLE</td><td>f2</td><td></td></tr>
     * <tr><td>KEYCODE_TV_AUDIO_DESCRIPTION</td><td>fc</td><td></td></tr>
     * <tr><td>KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN</td><td>fe</td><td></td></tr>
     * <tr><td>KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP</td><td>fd</td><td></td></tr>
     * <tr><td>KEYCODE_TV_CONTENTS_MENU</td><td>100</td><td></td></tr>
     * <tr><td>KEYCODE_TV_DATA_SERVICE</td><td>e6</td><td></td></tr>
     * <tr><td>KEYCODE_TV_INPUT</td><td>b2</td><td></td></tr>
     * <tr><td>KEYCODE_TV_INPUT_COMPONENT_1</td><td>f9</td><td></td></tr>
     * <tr><td>KEYCODE_TV_INPUT_COMPONENT_2</td><td>fa</td><td></td></tr>
     * <tr><td>KEYCODE_TV_INPUT_COMPOSITE_1</td><td>f7</td><td></td></tr>
     * <tr><td>KEYCODE_TV_INPUT_COMPOSITE_2</td><td>f8</td><td></td></tr>
     * <tr><td>KEYCODE_TV_INPUT_HDMI_1</td><td>f3</td><td></td></tr>
     * <tr><td>KEYCODE_TV_INPUT_HDMI_2</td><td>f4</td><td></td></tr>
     * <tr><td>KEYCODE_TV_INPUT_HDMI_3</td><td>f5</td><td></td></tr>
     * <tr><td>KEYCODE_TV_INPUT_HDMI_4</td><td>f6</td><td></td></tr>
     * <tr><td>KEYCODE_TV_INPUT_VGA_1</td><td>fb</td><td></td></tr>
     * <tr><td>KEYCODE_TV_MEDIA_CONTEXT_MENU</td><td>101</td><td></td></tr>
     * <tr><td>KEYCODE_TV_NETWORK</td><td>f1</td><td></td></tr>
     * <tr><td>KEYCODE_TV_NUMBER_ENTRY</td><td>ea</td><td></td></tr>
     * <tr><td>KEYCODE_TV_POWER</td><td>b1</td><td></td></tr>
     * <tr><td>KEYCODE_TV_RADIO_SERVICE</td><td>e8</td><td></td></tr>
     * <tr><td>KEYCODE_TV_SATELLITE</td><td>ed</td><td></td></tr>
     * <tr><td>KEYCODE_TV_SATELLITE_BS</td><td>ee</td><td></td></tr>
     * <tr><td>KEYCODE_TV_SATELLITE_CS</td><td>ef</td><td></td></tr>
     * <tr><td>KEYCODE_TV_SATELLITE_SERVICE</td><td>f0</td><td></td></tr>
     * <tr><td>KEYCODE_TV_TELETEXT</td><td>e9</td><td></td></tr>
     * <tr><td>KEYCODE_TV_TERRESTRIAL_ANALOG</td><td>eb</td><td></td></tr>
     * <tr><td>KEYCODE_TV_TERRESTRIAL_DIGITAL</td><td>ec</td><td></td></tr>
     * <tr><td>KEYCODE_TV_TIMER_PROGRAMMING</td><td>102</td><td></td></tr>
     * <tr><td>KEYCODE_TV_ZOOM_MODE</td><td>ff</td><td></td></tr>
     * <tr><td>KEYCODE_U</td><td>31</td><td></td></tr>
     * <tr><td>KEYCODE_UNKNOWN</td><td>0</td><td></td></tr>
     * <tr><td>KEYCODE_V</td><td>32</td><td></td></tr>
     * <tr><td>KEYCODE_VOICE_ASSIST</td><td>e7</td><td></td></tr>
     * <tr><td>KEYCODE_VOLUME_DOWN</td><td>19</td><td></td></tr>
     * <tr><td>KEYCODE_VOLUME_MUTE</td><td>a4</td><td></td></tr>
     * <tr><td>KEYCODE_VOLUME_UP</td><td>18</td><td></td></tr>
     * <tr><td>KEYCODE_W</td><td>33</td><td></td></tr>
     * <tr><td>KEYCODE_WINDOW</td><td>ab</td><td></td></tr>
     * <tr><td>KEYCODE_X</td><td>34</td><td></td></tr>
     * <tr><td>KEYCODE_Y</td><td>35</td><td></td></tr>
     * <tr><td>KEYCODE_YEN</td><td>d8</td><td></td></tr>
     * <tr><td>KEYCODE_Z</td><td>36</td><td></td></tr>
     * <tr><td>KEYCODE_ZENKAKU_HANKAKU</td><td>d3</td><td></td></tr>
     * <tr><td>KEYCODE_ZOOM_IN</td><td>a8</td><td></td></tr>
     * <tr><td>KEYCODE_ZOOM_OUT</td><td>a9</td><td></td></tr>
     * </table>
     */
    public static final int keycode=0x010100c5;
    /**
     * Whether the application in question should be terminated after its
     * settings have been restored during a full-system restore operation.
     * Single-package restore operations will never cause the application to
     * be shut down.  Full-system restore operations typically only occur once,
     * when the phone is first set up.  Third-party applications will not usually
     * need to use this attribute.
     * <p>The default is <code>true</code>, which means that after the application
     * has finished processing its data during a full-system restore, it will be
     * terminated.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int killAfterRestore=0x0101029c;
    /**
     * <public type="attr" name="__removed3" id="0x01010629" />
     * A reference to an array resource containing the signing certificate digests to be granted
     * this permission when using the {@code knownSigner} protection flag. The digest should
     * be computed over the DER encoding of the trusted certificate using the SHA-256 digest
     * algorithm.
     * <p>
     * If only a single signer is declared this can also be a string resource, or the digest
     * can be declared inline as the value for this attribute.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int knownCerts=0x0101062a;
    /**
     * Perceptual luminance of a color, in accessibility friendly color space. From 0 to 100.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int lStar=0x01010647;
    /**
     * A user-legible name for the given item.  Use with the
     * application tag (to supply a default label for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific label for that component).  It may also be
     * used with the intent-filter tag to supply a label to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given label will be used wherever the user sees information
     * about its associated component; for example, as the name of a
     * main activity that is displayed in the launcher.  You should
     * generally set this to a reference to a string resource, so that
     * it can be localized, however it is also allowed to supply a plain
     * string for quick and dirty programming.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int label=0x01010001;
    /**
     * Specifies the id of a view for which this view serves as a label for
     * accessibility purposes. For example, a TextView before an EditText in
     * the UI usually specifies what infomation is contained in the EditText.
     * Hence, the TextView is a label for the EditText.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int labelFor=0x010103c6;
    /**
     * Size of the text for custom keys with some text and no icon.
     * {@deprecated Copy this definition into your own application project.}
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    @Deprecated
    public static final int labelTextSize=0x01010235;
    /**
     * The BCP-47 Language Tag of the subtype.  This replaces
     * {@link android.R.styleable#InputMethod_Subtype_imeSubtypeLocale}.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int languageTag=0x01010508;
    /**
     * Request that your application's processes be created with
     * a large Dalvik heap.  This applies to <em>all</em> processes
     * created for the application.  It only applies to the first
     * application loaded into a process; if using a sharedUserId
     * to allow multiple applications to use a process, they all must
     * use this option consistently or will get unpredictable results.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int largeHeap=0x0101035a;
    /**
     * Indicates whether the application supports larger screen form-factors.
     * A large screen is defined as a screen that is significantly larger
     * than a normal phone screen, and thus may require some special care
     * on the application's part to make good use of it.  An example would
     * be a VGA <em>normal density</em> screen, though even larger screens
     * are certainly possible.  An application that does not support
     * large screens will be placed as a postage stamp on such a
     * screen, so that it retains the dimensions it was originally
     * designed for.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int largeScreens=0x01010286;
    /**
     * Starting with {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2},
     * this is the new way to specify the screens an application is
     * compatible with.  This attribute provides the maximum
     * "smallest screen width" (as per the -swNNNdp resource configuration)
     * that the application can work well on.  If this value is smaller than
     * the "smallest screen width" of the device it is running on, the
     * application will be forced in to screen compatibility mode with
     * no way for the user to turn it off. Currently the compatibility mode only
     * emulates phone screens with a 320dp width, so compatibility mode is not applied if the
     * value for largestWidthLimitDp is larger than 320.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int largestWidthLimitDp=0x01010366;
    /**
     * Distance from the bottom of the TextView to the last text baseline. If set, this
     * overrides the value set for paddingBottom.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int lastBaselineToBottomHeight=0x0101057e;
    /**
     * Specify how an activity should be launched.  See the
     * <a href="{@docRoot}guide/topics/fundamentals/tasks-and-back-stack.html">Tasks and Back
     * Stack</a> document for important information on how these options impact
     * the behavior of your application.
     * <p>If this attribute is not specified, <code>standard</code> launch
     * mode will be used.  Note that the particular launch behavior can
     * be changed in some ways at runtime through the
     * {@link android.content.Intent} flags
     * {@link android.content.Intent#FLAG_ACTIVITY_SINGLE_TOP},
     * {@link android.content.Intent#FLAG_ACTIVITY_NEW_TASK}, and
     * {@link android.content.Intent#FLAG_ACTIVITY_MULTIPLE_TASK}.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>singleInstance</td><td>3</td><td>Only allow one instance of this activity to ever be
     * running.  This activity gets a unique task with only itself running
     * in it; if it is ever launched again with the same Intent, then that
     * task will be brought forward and its
     * {@link android.app.Activity#onNewIntent Activity.onNewIntent()}
     * method called.  If this
     * activity tries to start a new activity, that new activity will be
     * launched in a separate task.  See the
     * <a href="{@docRoot}guide/topics/fundamentals/tasks-and-back-stack.html">Tasks and Back
     * Stack</a> document for more details about tasks.</td></tr>
     * <tr><td>singleInstancePerTask</td><td>4</td><td>The activity can only be running as the root activity of the task, the first activity
     * that created the task, and therefore there will only be one instance of this activity
     * in a task. In constrast to the {@code singleTask} launch mode, this activity can be
     * started in multiple instances in different tasks if the
     * {@code FLAG_ACTIVITY_MULTIPLE_TASK} or {@code FLAG_ACTIVITY_NEW_DOCUMENT} is set.</td></tr>
     * <tr><td>singleTask</td><td>2</td><td>If, when starting the activity, there is already a task running
     * that starts with this activity, then instead of starting a new
     * instance the current task is brought to the front.  The existing
     * instance will receive a call to {@link android.app.Activity#onNewIntent
     * Activity.onNewIntent()}
     * with the new Intent that is being started, and with the
     * {@link android.content.Intent#FLAG_ACTIVITY_BROUGHT_TO_FRONT
     * Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT} flag set.  This is a superset
     * of the singleTop mode, where if there is already an instance
     * of the activity being started at the top of the stack, it will
     * receive the Intent as described there (without the
     * FLAG_ACTIVITY_BROUGHT_TO_FRONT flag set).  See the
     * <a href="{@docRoot}guide/topics/fundamentals/tasks-and-back-stack.html">Tasks and Back
     * Stack</a> document for more details about tasks.</td></tr>
     * <tr><td>singleTop</td><td>1</td><td>If, when starting the activity, there is already an
     * instance of the same activity class in the foreground that is
     * interacting with the user, then
     * re-use that instance.  This existing instance will receive a call to
     * {@link android.app.Activity#onNewIntent Activity.onNewIntent()} with
     * the new Intent that is being started.</td></tr>
     * <tr><td>standard</td><td>0</td><td>The default mode, which will usually create a new instance of
     * the activity when it is started, though this behavior may change
     * with the introduction of other options such as
     * {@link android.content.Intent#FLAG_ACTIVITY_NEW_TASK
     * Intent.FLAG_ACTIVITY_NEW_TASK}.</td></tr>
     * </table>
     */
    public static final int launchMode=0x0101001d;
    /**
     * When opening an activity in a new task using Intent.FLAG_ACTIVITY_LAUNCH_BEHIND,
     * this is the animation that is run on the activity of the old task (which is
     * already on the screen and then stays on).
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int launchTaskBehindSourceAnimation=0x01010492;
    /**
     * When opening an activity in a new task using Intent/FLAG_ACTIVITY_LAUNCH_BEHIND,
     * this is the animation that is run on the activity of the new task (which is
     * entering the screen and then leaving).
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int launchTaskBehindTargetAnimation=0x01010491;
    /**
     * Specifies the type of layer backing this view. The default value is none.
     * Refer to {@link android.view.View#setLayerType(int, android.graphics.Paint)}
     * for more information.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>hardware</td><td>2</td><td>Use a hardware layer. Refer to
     * {@link android.view.View#setLayerType(int, android.graphics.Paint)} for
     * more information.</td></tr>
     * <tr><td>none</td><td>0</td><td>Don't use a layer.</td></tr>
     * <tr><td>software</td><td>1</td><td>Use a software layer. Refer to
     * {@link android.view.View#setLayerType(int, android.graphics.Paint)} for
     * more information.</td></tr>
     * </table>
     */
    public static final int layerType=0x01010354;
    /**
     * Supply an identifier for the layout resource to inflate when the ViewStub
     * becomes visible or when forced to do so. The layout resource must be a
     * valid reference to a layout.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int layout=0x010100f2;
    /**
     * Defines the layout animation to use the first time the ViewGroup is laid out.
     * Layout animations can also be started manually after the first layout.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int layoutAnimation=0x010100ec;
    /**
     * Defines the direction of layout drawing. This typically is associated with writing
     * direction of the language script used. The possible values are "ltr" for Left-to-Right,
     * "rtl" for Right-to-Left, "locale", and "inherit" from parent view. If there is nothing
     * to inherit, "locale" is used. "locale" falls back to "en-US". "ltr" is the direction
     * used in "en-US". The default for this attribute is "inherit".
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>inherit</td><td>2</td><td>Inherit from parent.</td></tr>
     * <tr><td>locale</td><td>3</td><td>Locale.</td></tr>
     * <tr><td>ltr</td><td>0</td><td>Left-to-Right.</td></tr>
     * <tr><td>rtl</td><td>1</td><td>Right-to-Left.</td></tr>
     * </table>
     */
    public static final int layoutDirection=0x010103b2;
    /**
     * Defines the layout mode of this ViewGroup.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>clipBounds</td><td>0</td><td>Use the children's clip bounds when laying out this container.</td></tr>
     * <tr><td>opticalBounds</td><td>1</td><td>Use the children's optical bounds when laying out this container.</td></tr>
     * </table>
     */
    public static final int layoutMode=0x010103da;
    /**
     * Positions the bottom edge of this view above the given anchor view ID.
     * Accommodates bottom margin of this view and top margin of anchor view.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int layout_above=0x01010184;
    /**
     * Positions the baseline of this view on the baseline of the given anchor view ID.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int layout_alignBaseline=0x01010186;
    /**
     * Makes the bottom edge of this view match the bottom edge of the given anchor view ID.
     * Accommodates bottom margin.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int layout_alignBottom=0x0101018a;
    /**
     * Makes the end edge of this view match the end edge of the given anchor view ID.
     * Accommodates end margin.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int layout_alignEnd=0x010103ba;
    /**
     * Makes the left edge of this view match the left edge of the given anchor view ID.
     * Accommodates left margin.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int layout_alignLeft=0x01010187;
    /**
     * If true, makes the bottom edge of this view match the bottom edge of the parent.
     * Accommodates bottom margin.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int layout_alignParentBottom=0x0101018e;
    /**
     * If true, makes the end edge of this view match the end edge of the parent.
     * Accommodates end margin.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int layout_alignParentEnd=0x010103bc;
    /**
     * If true, makes the left edge of this view match the left edge of the parent.
     * Accommodates left margin.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int layout_alignParentLeft=0x0101018b;
    /**
     * If true, makes the right edge of this view match the right edge of the parent.
     * Accommodates right margin.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int layout_alignParentRight=0x0101018d;
    /**
     * If true, makes the start edge of this view match the start edge of the parent.
     * Accommodates start margin.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int layout_alignParentStart=0x010103bb;
    /**
     * If true, makes the top edge of this view match the top edge of the parent.
     * Accommodates top margin.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int layout_alignParentTop=0x0101018c;
    /**
     * Makes the right edge of this view match the right edge of the given anchor view ID.
     * Accommodates right margin.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int layout_alignRight=0x01010189;
    /**
     * Makes the start edge of this view match the start edge of the given anchor view ID.
     * Accommodates start margin.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int layout_alignStart=0x010103b9;
    /**
     * Makes the top edge of this view match the top edge of the given anchor view ID.
     * Accommodates top margin.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int layout_alignTop=0x01010188;
    /**
     * If set to true, the parent will be used as the anchor when the anchor cannot be
     * be found for layout_toLeftOf, layout_toRightOf, etc.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int layout_alignWithParentIfMissing=0x01010192;
    /**
     * Positions the top edge of this view below the given anchor view ID.
     * Accommodates top margin of this view and bottom margin of anchor view.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int layout_below=0x01010185;
    /**
     * If true, centers this child horizontally within its parent.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int layout_centerHorizontal=0x01010190;
    /**
     * If true, centers this child horizontally and vertically within its parent.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int layout_centerInParent=0x0101018f;
    /**
     * If true, centers this child vertically within its parent.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int layout_centerVertical=0x01010191;
    /**
     * The index of the column in which this child should be.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int layout_column=0x0101014c;
    /**
     * The column span: the difference between the right and left
     * boundaries delimiting the group of cells occupied by this view.
     * The default is one.
     * See {@link android.widget.GridLayout.Spec}.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int layout_columnSpan=0x0101037d;
    /**
     * The relative proportion of horizontal space that should be allocated to this view
     * during excess space distribution.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int layout_columnWeight=0x01010459;
    /**
     * Standard gravity constant that a child supplies to its parent.
     * Defines how the child view should be positioned, on both the X and Y axes, within its enclosing layout.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
     * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
     * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
     * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
     * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the horizontal gravity: a left gravity will clip the right
     * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
     * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the vertical gravity: a top gravity will clip the bottom
     * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
     * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
     * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
     * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
     * </table>
     */
    public static final int layout_gravity=0x010100b3;
    /**
     * Specifies the basic height of the view.  This is a required attribute
     * for any view inside of a containing layout manager.  Its value may
     * be a dimension (such as "12dip") for a constant height or one of
     * the special constants.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>fill_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
     * This constant is deprecated starting from API Level 8 and
     * is replaced by {@code match_parent}.</td></tr>
     * <tr><td>match_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
     * Introduced in API Level 8.</td></tr>
     * <tr><td>wrap_content</td><td>fffffffe</td><td>The view should be only big enough to enclose its content (plus padding).</td></tr>
     * </table>
     */
    public static final int layout_height=0x010100f5;
    /**
     * Specifies extra space on the left, top, right and bottom
     * sides of this view.  If both layout_margin and any of layout_marginLeft,
     * layout_marginRight, layout_marginStart, layout_marginEnd,
     * layout_marginTop, and layout_marginBottom are
     * also specified, the layout_margin value will take precedence over the
     * edge-specific values. This space is outside this view's bounds.
     * Margin values should be positive.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int layout_margin=0x010100f6;
    /**
     * Specifies extra space on the bottom side of this view.
     * This space is outside this view's bounds.
     * Margin values should be positive.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int layout_marginBottom=0x010100fa;
    /**
     * Specifies extra space on the end side of this view.
     * This space is outside this view's bounds.
     * Margin values should be positive.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int layout_marginEnd=0x010103b6;
    /**
     * Specifies extra space on the left and right sides of this view.
     * Specifying layout_marginHorizontal is equivalent to specifying
     * layout_marginLeft and layout_marginRight.
     * If both layout_marginHorizontal and either/both of layout_marginLeft
     * and layout_marginRight are also specified, the layout_marginHorizontal
     * value will take precedence over the
     * edge-specific values. Also, layout_margin will always take precedence over
     * any of these values, including layout_marginHorizontal.
     * This space is outside this view's bounds.
     * Margin values should be positive.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int layout_marginHorizontal=0x0101053b;
    /**
     * Specifies extra space on the left side of this view.
     * This space is outside this view's bounds.
     * Margin values should be positive.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int layout_marginLeft=0x010100f7;
    /**
     * Specifies extra space on the right side of this view.
     * This space is outside this view's bounds.
     * Margin values should be positive.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int layout_marginRight=0x010100f9;
    /**
     * Specifies extra space on the start side of this view.
     * This space is outside this view's bounds.
     * Margin values should be positive.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int layout_marginStart=0x010103b5;
    /**
     * Specifies extra space on the top side of this view.
     * This space is outside this view's bounds.
     * Margin values should be positive.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int layout_marginTop=0x010100f8;
    /**
     * Specifies extra space on the top and bottom sides of this view.
     * Specifying layout_marginVertical is equivalent to specifying
     * layout_marginTop and layout_marginBottom with that same value.
     * If both layout_marginVertical and either/both of layout_marginTop and
     * layout_marginBottom are also specified, the layout_marginVertical value
     * will take precedence over the edge-specific values.
     * Also, layout_margin will always take precedence over
     * any of these values, including layout_marginVertical.
     * This space is outside this view's bounds.
     * Margin values should be positive.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int layout_marginVertical=0x0101053c;
    /**
     * The row boundary delimiting the top of the group of cells
     * occupied by this view.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int layout_row=0x0101037b;
    /**
     * The row span: the difference between the top and bottom
     * boundaries delimiting the group of cells occupied by this view.
     * The default is one.
     * See {@link android.widget.GridLayout.Spec}.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int layout_rowSpan=0x0101037c;
    /**
     * The relative proportion of vertical space that should be allocated to this view
     * during excess space distribution.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int layout_rowWeight=0x01010458;
    /**
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int layout_scale=0x01010193;
    /**
     * Defines how many columns this child should span.  Must be >= 1.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int layout_span=0x0101014d;
    /**
     * Positions the start edge of this view to the end of the given anchor view ID.
     * Accommodates start margin of this view and end margin of anchor view.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int layout_toEndOf=0x010103b8;
    /**
     * Positions the right edge of this view to the left of the given anchor view ID.
     * Accommodates right margin of this view and left margin of anchor view.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int layout_toLeftOf=0x01010182;
    /**
     * Positions the left edge of this view to the right of the given anchor view ID.
     * Accommodates left margin of this view and right margin of anchor view.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int layout_toRightOf=0x01010183;
    /**
     * Positions the end edge of this view to the start of the given anchor view ID.
     * Accommodates end margin of this view and start margin of anchor view.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int layout_toStartOf=0x010103b7;
    /**
     * Indicates how much of the extra space in the LinearLayout is
     * allocated to the view associated with these LayoutParams. Specify
     * 0 if the view should not be stretched. Otherwise the extra pixels
     * will be pro-rated among all views whose weight is greater than 0.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int layout_weight=0x01010181;
    /**
     * Specifies the basic width of the view.  This is a required attribute
     * for any view inside of a containing layout manager.  Its value may
     * be a dimension (such as "12dip") for a constant width or one of
     * the special constants.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>fill_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
     * This constant is deprecated starting from API Level 8 and
     * is replaced by {@code match_parent}.</td></tr>
     * <tr><td>match_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
     * Introduced in API Level 8.</td></tr>
     * <tr><td>wrap_content</td><td>fffffffe</td><td>The view should be only big enough to enclose its content (plus padding).</td></tr>
     * </table>
     */
    public static final int layout_width=0x010100f4;
    /**
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int layout_x=0x0101017f;
    /**
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int layout_y=0x01010180;
    /**
     * Amount of left padding inside the gradient shape.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int left=0x010101ad;
    /**
     * Text letter-spacing.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int letterSpacing=0x010104b6;
    /**
     * Specifies the initial drawable level in the range 0 to 10000.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int level=0x01010500;
    /**
     * Explicit height between lines of text. If set, this will override the values set
     * for lineSpacingExtra and lineSpacingMultiplier.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int lineHeight=0x0101057f;
    /**
     * Extra spacing between lines of text. The value will not be applied for the last
     * line of text.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int lineSpacingExtra=0x01010217;
    /**
     * Extra spacing between lines of text, as a multiplier. The value will not be applied
     * for the last line of text.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int lineSpacingMultiplier=0x01010218;
    /**
     * Makes the TextView be exactly this many lines tall.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int lines=0x01010154;
    /**
     * If set to false, keeps the movement method from being set
     * to the link movement method even if autoLink causes links
     * to be found.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int linksClickable=0x010100b1;
    /**
     * Drawable used as a background for selected list items.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int listChoiceBackgroundIndicator=0x010102f0;
    /**
     * Drawable to use for multiple choice indicators.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int listChoiceIndicatorMultiple=0x0101021a;
    /**
     * Drawable to use for single choice indicators.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int listChoiceIndicatorSingle=0x01010219;
    /**
     * The drawable for the list divider.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int listDivider=0x01010214;
    /**
     * The list divider used in alert dialogs.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int listDividerAlertDialog=0x01010305;
    /**
     * Default menu-style ListView style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int listMenuViewStyle=0x010104f2;
    /**
     * Default ListPopupWindow style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int listPopupWindowStyle=0x010102ff;
    /**
     * The preferred list item height.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int listPreferredItemHeight=0x0101004d;
    /**
     * A larger, more robust list item height.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int listPreferredItemHeightLarge=0x01010386;
    /**
     * A smaller, sleeker list item height.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int listPreferredItemHeightSmall=0x01010387;
    /**
     * The preferred padding along the end edge of list items.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int listPreferredItemPaddingEnd=0x010103be;
    /**
     * The preferred padding along the left edge of list items.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int listPreferredItemPaddingLeft=0x010103a3;
    /**
     * The preferred padding along the right edge of list items.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int listPreferredItemPaddingRight=0x010103a4;
    /**
     * The preferred padding along the start edge of list items.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int listPreferredItemPaddingStart=0x010103bd;
    /**
     * Drawable used to indicate the currently selected item in the list.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int listSelector=0x010100fb;
    /**
     * TextView style for list separators.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int listSeparatorTextViewStyle=0x01010208;
    /**
     * Default ListView style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int listViewStyle=0x01010074;
    /**
     * ListView with white background.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int listViewWhiteStyle=0x01010075;
    /**
     * This value indicates how tasks rooted at this activity will behave in lockTask mode.
     * While in lockTask mode the system will not launch non-permitted tasks until
     * lockTask mode is disabled.
     * <p>While in lockTask mode with multiple permitted tasks running, each launched task is
     * permitted to finish, transitioning to the previous locked task, until there is only one
     * task remaining. At that point the last task running is not permitted to finish, unless it
     * uses the value always.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>always</td><td>2</td><td>Tasks rooted at this activity will always launch into lockTask mode. If the system is
     * already in lockTask mode when this task is launched then the new task will be launched
     * on top of the current task. Tasks launched in this mode are capable of exiting
     * lockTask mode using {@link android.app.Activity#finish()}.
     * <p>Note: This mode is only available to system and privileged applications.
     * Non-privileged apps with this value will be treated as normal.</td></tr>
     * <tr><td>if_whitelisted</td><td>3</td><td>If the DevicePolicyManager (DPM) authorizes this package ({@link
     * android.app.admin.DevicePolicyManager#setLockTaskPackages}) then this mode is
     * identical to always, except that the activity needs to call
     * {@link android.app.Activity#stopLockTask} before being able to finish if it is the last
     * locked task.
     * If the DPM does not authorize this package then this mode is identical to normal.</td></tr>
     * <tr><td>never</td><td>1</td><td>Tasks will not launch into lockTask mode and cannot be placed there using
     * {@link android.app.Activity#startLockTask} or be pinned from the Overview screen.
     * If the system is already in lockTask mode when a new task rooted at this activity is
     * launched that task will not be started.
     * <p>Note: This mode is only available to system and privileged applications.
     * Non-privileged apps with this value will be treated as normal.</td></tr>
     * <tr><td>normal</td><td>0</td><td>This is the default value. Tasks will not launch into lockTask mode but can be
     * placed there by calling {@link android.app.Activity#startLockTask}. If a task with
     * this mode has been allowlisted using {@link
     * android.app.admin.DevicePolicyManager#setLockTaskPackages} then calling
     * {@link android.app.Activity#startLockTask} will enter lockTask mode immediately,
     * otherwise the user will be presented with a dialog to approve entering pinned mode.
     * <p>If the system is already in lockTask mode when a new task rooted at this activity
     * is launched that task will or will not start depending on whether the package of this
     * activity has been allowlisted.
     * <p>Tasks rooted at this activity can only exit lockTask mode using
     * {@link android.app.Activity#stopLockTask}.</td></tr>
     * </table>
     */
    public static final int lockTaskMode=0x010104ed;
    /**
     * A Drawable resource providing an extended graphical logo for its
     * associated item. Use with the application tag (to supply a default
     * logo for all application components), or with the activity, receiver,
     * service, or instrumentation tag (to supply a specific logo for that
     * component). It may also be used with the intent-filter tag to supply
     * a logo to show to the user when an activity is being selected based
     * on a particular Intent.
     * <p>The given logo will be used to display to the user a graphical
     * representation of its associated component; for example as the
     * header in the Action Bar. The primary differences between an icon
     * and a logo are that logos are often wider and more detailed, and are
     * used without an accompanying text caption. This must be a reference
     * to a Drawable resource containing the image definition.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int logo=0x010102be;
    /**
     * A content description string to describe the appearance of the
     * associated logo image.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int logoDescription=0x010104e9;
    /**
     * Defines whether this view reacts to long click events.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int longClickable=0x010100e6;
    /**
     * Defines whether the animator loops to the first view once it
     * has reached the end of the list.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int loopViews=0x01010307;
    /**
     * Name of the activity to be launched to manage application's space on
     * device. The specified activity gets automatically launched when the
     * application's space needs to be managed and is usually invoked
     * through user actions. Applications can thus provide their own custom
     * behavior for managing space for various scenarios like out of memory
     * conditions. This is an optional attribute and
     * applications can choose not to specify a default activity to
     * manage space.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int manageSpaceActivity=0x01010004;
    /**
     * Default MapView style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int mapViewStyle=0x0101008a;
    /**
     * The number of times to repeat the marquee animation. Only applied if the
     * TextView has marquee enabled.
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>marquee_forever</td><td>ffffffff</td><td>Indicates that marquee should repeat indefinitely.</td></tr>
     * </table>
     */
    public static final int marqueeRepeatLimit=0x0101021d;
    /**
     * The match order to use for the transition. This is a comma-separated
     * list of values, containing one or more of the following:
     * id, itemId, name, instance. These correspond to
     * {@link android.transition.Transition#MATCH_ID},
     * {@link android.transition.Transition#MATCH_ITEM_ID},
     * {@link android.transition.Transition#MATCH_NAME}, and
     * {@link android.transition.Transition#MATCH_INSTANCE}, respectively.
     * This corresponds to {@link android.transition.Transition#setMatchOrder(int...)}.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int matchOrder=0x0101044f;
    /**
     * Defines the maximum value.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int max=0x01010136;
    /**
     * This value indicates the maximum aspect ratio the activity supports. If the app runs on a
     * device with a wider aspect ratio, the system automatically letterboxes the app, leaving
     * portions of the screen unused so the app can run at its specified maximum aspect ratio.
     * <p>
     * Maximum aspect ratio, expressed as (longer dimension / shorter dimension) in decimal
     * form. For example, if the maximum aspect ratio is 7:3, set value to 2.33.
     * <p>
     * Value needs to be greater or equal to 1.0, otherwise it is ignored.
     * <p>
     * NOTE: This attribute is ignored if the activity has
     * {@link android.R.attr#resizeableActivity} set to true.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int maxAspectRatio=0x01010560;
    /**
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int maxButtonHeight=0x010104fd;
    /**
     * The maximal date shown by this calendar view in mm/dd/yyyy format.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int maxDate=0x01010340;
    /**
     * Makes the TextView be at most this many ems wide.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int maxEms=0x01010157;
    /**
     * An optional argument to supply a maximum height for this view.
     * See {see android.widget.ImageView#setMaxHeight} for details.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int maxHeight=0x01010120;
    /**
     * Defines the maximum number of items per row.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int maxItemsPerRow=0x01010134;
    /**
     * Set an input filter to constrain the text length to the
     * specified number.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int maxLength=0x01010160;
    /**
     * The maximum level allowed for this item.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int maxLevel=0x010101b2;
    /**
     * Makes the TextView be at most this many lines tall.
     * When used on an editable text, the <code>inputType</code> attribute's value must be
     * combined with the <code>textMultiLine</code> flag for the maxLines attribute to apply.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int maxLines=0x01010153;
    /**
     * The max version code of the package for which compatibility mode is
     * requested. This corresponds to the long value returned by {@link
     * android.content.pm.PackageInfo#getLongVersionCode()} for the target package.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int maxLongVersionCode=0x01010583;
    /**
     * The maximum number of entries of tasks rooted at this activity in the recent task list.
     * When this number of entries is reached the least recently used instance of this activity
     * will be removed from recents. The value will be clamped between 1 and 100 inclusive.
     * The default value for this if it is not specified is 15.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int maxRecents=0x01010446;
    /**
     * Maximum height that the AppWidget can be resized to.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int maxResizeHeight=0x01010633;
    /**
     * Maximum width that the AppWidget can be resized to.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int maxResizeWidth=0x01010632;
    /**
     * Defines the maximum number of rows displayed.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int maxRows=0x01010133;
    /**
     * Optional: specify the maximum version of the Android OS for which the
     * application wishes to request the permission.  When running on a version
     * of Android higher than the number given here, the permission will not
     * be requested.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int maxSdkVersion=0x01010271;
    /**
     * An optional argument to supply a maximum width for this view.
     * See {see android.widget.ImageView#setMaxWidth} for details.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int maxWidth=0x0101011f;
    /**
     * The maximum arc angle in degrees between the start and end points.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int maximumAngle=0x0101047f;
    /**
     * Determines whether to measure all children or just those in
     * the VISIBLE or INVISIBLE state when measuring. Defaults to false.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int measureAllChildren=0x0101010a;
    /**
     * When set to true, all children with a weight will be considered having
     * the minimum size of the largest child. If false, all children are
     * measured normally.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int measureWithLargestChild=0x010102d4;
    /**
     * Default style for the MediaRouteButton widget.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int mediaRouteButtonStyle=0x010103ad;
    /**
     * The types of media routes the button and its resulting
     * chooser will filter by.
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>liveAudio</td><td>1</td><td>Allow selection of live audio routes.</td></tr>
     * <tr><td>user</td><td>800000</td><td>Allow selection of user (app-specified) routes.</td></tr>
     * </table>
     */
    public static final int mediaRouteTypes=0x010103ae;
    /**
     * Enable hardware memory tagging (ARM MTE) in this process.
     * When enabled, heap memory bugs like use-after-free and buffer overlow
     * are detected and result in an immediate ("sync" mode) or delayed ("async"
     * mode) crash instead of a silent memory corruption. Sync mode, while slower,
     * provides enhanced bug reports including stack traces at the time of allocation
     * and deallocation of memory, similar to AddressSanitizer.
     * See the <a href="https://community.arm.com/developer/ip-products/processors/b/processors-ip-blog/posts/enhancing-memory-safety">ARM announcement</a>
     * for more details.
     * <p>This attribute can be applied to a
     * {@link android.R.styleable#AndroidManifestProcess process} tag, or to an
     * {@link android.R.styleable#AndroidManifestApplication application} tag (to supply
     * a default setting for all application components).
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>async</td><td>1</td><td></td></tr>
     * <tr><td>default</td><td>ffffffff</td><td></td></tr>
     * <tr><td>off</td><td>0</td><td></td></tr>
     * <tr><td>sync</td><td>2</td><td></td></tr>
     * </table>
     */
    public static final int memtagMode=0x01010624;
    /**
     * The category applied to all items within this group.
     * (This will be or'ed with the orderInCategory attribute.)
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>alternative</td><td>40000</td><td>Items are alternative actions.</td></tr>
     * <tr><td>container</td><td>10000</td><td>Items are part of a container.</td></tr>
     * <tr><td>secondary</td><td>30000</td><td>Items are user-supplied secondary (infrequently used).</td></tr>
     * <tr><td>system</td><td>20000</td><td>Items are provided by the system.</td></tr>
     * </table>
     */
    public static final int menuCategory=0x010101de;
    /**
     * Specify a group of MIME types that are handled. MIME types can be added and
     * removed to a package's MIME group via the PackageManager.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int mimeGroup=0x01010615;
    /**
     * Specify a MIME type that is handled, as per
     * {@link android.content.IntentFilter#addDataType
     * IntentFilter.addDataType()}.
     * <p><em>Note: MIME type matching in the Android framework is
     * case-sensitive, unlike formal RFC MIME types.  As a result,
     * MIME types here should always use lower case letters.</em></p>
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int mimeType=0x01010026;
    /**
     * Defines the minimum value.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int min=0x01010539;
    /**
     * This value indicates the minimum aspect ratio the activity supports. If the app runs on a
     * device with a narrower aspect ratio, the system automatically letterboxes the app, leaving
     * portions of the screen unused so the app can run at its specified minimum aspect ratio.
     * <p>
     * Minimum aspect ratio, expressed as (longer dimension / shorter dimension) in decimal
     * form. For example, if the minimum aspect ratio is 4:3, set value to 1.33.
     * <p>
     * Value needs to be greater or equal to 1.0, otherwise it is ignored.
     * <p>
     * NOTE: This attribute is ignored if the activity has
     * {@link android.R.attr#resizeableActivity} set to true.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int minAspectRatio=0x0101059b;
    /**
     * The minimal date shown by this calendar view in mm/dd/yyyy format.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int minDate=0x0101033f;
    /**
     * Makes the TextView be at least this many ems wide.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int minEms=0x0101015a;
    /**
     * @hide
     * The minimum version of the extension SDK this application requires.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    @android.annotation.SystemApi
    public static final int minExtensionVersion=0x01010611;
    /**
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int minHeight=0x01010140;
    /**
     * The minimum level allowed for this item.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int minLevel=0x010101b1;
    /**
     * Makes the TextView be at least this many lines tall.
     * When used on an editable text, the <code>inputType</code> attribute's value must be
     * combined with the <code>textMultiLine</code> flag for the minLines attribute to apply.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int minLines=0x01010156;
    /**
     * Minimum height that the AppWidget can be resized to.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int minResizeHeight=0x01010396;
    /**
     * Minimum width that the AppWidget can be resized to.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int minResizeWidth=0x01010395;
    /**
     * This is the minimum SDK version number that the application
     * requires.  This number is an abstract integer, from the list
     * in {@link android.os.Build.VERSION_CODES}  If
     * not supplied, the application will work on any SDK.  This
     * may also be string (such as "Donut") if the application was built
     * against a development branch, in which case it will only work against
     * the development builds.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int minSdkVersion=0x0101020c;
    /**
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int minWidth=0x0101013f;
    /**
     * The minimum arc angle in degrees between the start and end points when
     * they are close to horizontal.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int minimumHorizontalAngle=0x0101047d;
    /**
     * The minimum arc angle in degrees between the start and end points when
     * they are close to vertical.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int minimumVerticalAngle=0x0101047e;
    /**
     * Enables or disables the mipmap hint. See
     * {@link android.graphics.Bitmap#setHasMipMap(boolean)} for more information.
     * Default value is false.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int mipMap=0x010103cd;
    /**
     * Defines if the associated drawables need to be mirrored when in RTL mode.
     * Default is false.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int mirrorForRtl=0x010103ce;
    /**
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>collapsing</td><td>2</td><td>When selected show both lines, otherwise show only the first line.
     * This is the default mode.</td></tr>
     * <tr><td>oneLine</td><td>1</td><td>Always show only the first line.</td></tr>
     * <tr><td>twoLine</td><td>3</td><td>Always show both lines.</td></tr>
     * </table>
     */
    public static final int mode=0x0101017e;
    /**
     * 'More' icon.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int moreIcon=0x01010135;
    /**
     * Declare that code from this application will need to be loaded into other
     * applications' processes. On devices that support multiple instruction sets,
     * this implies the code might be loaded into a process that's using any of the devices
     * supported instruction sets.
     * <p> The system might treat such applications specially, for eg., by
     * extracting the application's native libraries for all supported instruction
     * sets or by compiling the application's dex code for all supported instruction
     * sets.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int multiArch=0x0101048e;
    /**
     * Specify whether a component is allowed to have multiple instances
     * of itself running in different processes.  Use with the activity
     * and provider tags.
     * <p>Normally the system will ensure that all instances of a particular
     * component are only running in a single process.  You can use this
     * attribute to disable that behavior, allowing the system to create
     * instances wherever they are used (provided permissions allow it).
     * This is most often used with content providers, so that instances
     * of a provider can be created in each client process, allowing them
     * to be used without performing IPC.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int multiprocess=0x01010013;
    /**
     * A unique name for the given item.  This must use a Java-style naming
     * convention to ensure the name is unique, for example
     * "com.mycompany.MyName".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int name=0x01010003;
    /**
     * If {@code true} enables automatic zero initialization of all native heap
     * allocations.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int nativeHeapZeroInitialized=0x01010625;
    /**
     * The color for the navigation bar. If the color is not opaque, consider setting
     * {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_STABLE} and
     * {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION}.
     * For this to take effect, the window must be drawing the system bar backgrounds with
     * {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the navigation bar must not
     * have been requested to be translucent with
     * {@link android.R.attr#windowTranslucentNavigation}.
     * Corresponds to {@link android.view.Window#setNavigationBarColor(int)}.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int navigationBarColor=0x01010452;
    /**
     * Shows a thin line of the specified color between the navigation bar and the app
     * content.
     * <p>For this to take effect, the window must be drawing the system bar backgrounds with
     * {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the navigation bar must not
     * have been requested to be translucent with
     * {@link android.R.attr#windowTranslucentNavigation}.
     * Corresponds to {@link android.view.Window#setNavigationBarDividerColor(int)}.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int navigationBarDividerColor=0x0101056d;
    /**
     * Text to set as the content description for the navigation button
     * located at the start of the toolbar.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int navigationContentDescription=0x010104c1;
    /**
     * Icon drawable to use for the navigation button located at
     * the start of the toolbar.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int navigationIcon=0x010104c0;
    /**
     * The type of navigation to use.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>listMode</td><td>1</td><td>The action bar will use a selection list for navigation.</td></tr>
     * <tr><td>normal</td><td>0</td><td>Normal static title text.</td></tr>
     * <tr><td>tabMode</td><td>2</td><td>The action bar will use a series of horizontal tabs for navigation.</td></tr>
     * </table>
     */
    public static final int navigationMode=0x010102cf;
    /**
     * The negative button text for the dialog. Set to @null to hide the negative button.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int negativeButtonText=0x010101f6;
    /**
     * Specifies that this view should permit nested scrolling within a compatible
     * ancestor view.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int nestedScrollingEnabled=0x01010436;
    /**
     * An XML resource with the application's Network Security Config.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int networkSecurityConfig=0x01010527;
    /**
     * Defines the next keyboard navigation cluster.
     * If the reference refers to a view that does not exist or is part
     * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
     * will result when the reference is accessed.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int nextClusterForward=0x01010542;
    /**
     * Defines the next view to give focus to when the next focus is
     * {@link android.view.View#FOCUS_DOWN}
     * If the reference refers to a view that does not exist or is part
     * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
     * will result when the reference is accessed.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int nextFocusDown=0x010100e4;
    /**
     * Defines the next view to give focus to when the next focus is
     * {@link android.view.View#FOCUS_FORWARD}
     * If the reference refers to a view that does not exist or is part
     * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
     * will result when the reference is accessed.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int nextFocusForward=0x0101033c;
    /**
     * Defines the next view to give focus to when the next focus is
     * {@link android.view.View#FOCUS_LEFT}.
     * If the reference refers to a view that does not exist or is part
     * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
     * will result when the reference is accessed.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int nextFocusLeft=0x010100e1;
    /**
     * Defines the next view to give focus to when the next focus is
     * {@link android.view.View#FOCUS_RIGHT}
     * If the reference refers to a view that does not exist or is part
     * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
     * will result when the reference is accessed.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int nextFocusRight=0x010100e2;
    /**
     * Defines the next view to give focus to when the next focus is
     * {@link android.view.View#FOCUS_UP}
     * If the reference refers to a view that does not exist or is part
     * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
     * will result when the reference is accessed.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int nextFocusUp=0x010100e3;
    /**
     * Specify whether an activity should be kept in its history stack.
     * If this attribute is set, then as soon as the user navigates away
     * from the activity it will be finished and they will no longer be
     * able to return to it.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int noHistory=0x0101022d;
    /**
     * A recommended timeout in milliseconds used in
     * {@link android.view.accessibility.AccessibilityManager#getRecommendedTimeoutMillis(int, int)
     * android.view.accessibility.AccessibilityManager.getRecommendedTimeoutMillis(int, int)}
     * to return a suitable value for UIs that do not include interactive controls.
     * This setting can be changed at runtime by calling
     * {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
     * android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int nonInteractiveUiTimeout=0x0101058f;
    /**
     * Indicates whether an application supports the normal screen
     * form-factors.  Traditionally this is an HVGA normal density
     * screen, but WQVGA low density and WVGA high density are also
     * considered to be normal.  This attribute is true by default,
     * and applications currently should leave it that way.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int normalScreens=0x01010285;
    /**
     * The minimal period in milliseconds between two accessibility events of the same type
     * are sent to this service. This setting can be changed at runtime by calling
     * {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
     * android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int notificationTimeout=0x01010383;
    /**
     * Defines how many columns to show.
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>auto_fit</td><td>ffffffff</td><td>Display as many columns as possible to fill the available space.</td></tr>
     * </table>
     */
    public static final int numColumns=0x01010118;
    /**
     * The number of stars (or rating items) to show.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int numStars=0x01010144;
    /**
     * NumberPicker style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int numberPickerStyle=0x01010524;
    /**
     * The background color for the hours/minutes numbers.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int numbersBackgroundColor=0x010104a2;
    /**
     * The color for the inner hours numbers used in 24-hour mode. This
     * should be a color state list where the activated state will be
     * used when the number is active.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int numbersInnerTextColor=0x010104e1;
    /**
     * The color for the hours/minutes selector.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int numbersSelectorColor=0x010104a3;
    /**
     * The color for the hours/minutes numbers. This should be a color
     * state list where the activated state will be used when the number
     * is active.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int numbersTextColor=0x010104a1;
    /**
     * If set, specifies that this TextView has a numeric input method.
     * The default is false.
     * {@deprecated Use inputType instead.}
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>decimal</td><td>5</td><td>Input is numeric, with decimals allowed.</td></tr>
     * <tr><td>integer</td><td>1</td><td>Input is numeric.</td></tr>
     * <tr><td>signed</td><td>3</td><td>Input is numeric, with sign allowed.</td></tr>
     * </table>
     */
    @Deprecated
    public static final int numeric=0x01010165;
    /**
     * The numeric modifier key. This is the modifier when using a numeric (for example,
     * 12-key) keyboard. The values should be kept in sync with KeyEvent
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>ALT</td><td>2</td><td></td></tr>
     * <tr><td>CTRL</td><td>1000</td><td></td></tr>
     * <tr><td>FUNCTION</td><td>8</td><td></td></tr>
     * <tr><td>META</td><td>10000</td><td></td></tr>
     * <tr><td>SHIFT</td><td>1</td><td></td></tr>
     * <tr><td>SYM</td><td>4</td><td></td></tr>
     * </table>
     */
    public static final int numericModifiers=0x0101054f;
    /**
     * The numeric shortcut key.  This is the shortcut when using a numeric (for example,
     * 12-key) keyboard.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int numericShortcut=0x010101e4;
    /**
     * The offset (or ratio) of this current color item inside the gradient.
     * The value is only meaningful when it is between 0 and 1.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int offset=0x01010514;
    /**
     * Name of the method in this View's context to invoke when the view is
     * clicked. This name must correspond to a public method that takes
     * exactly one parameter of type View. For instance, if you specify
     * <code>android:onClick="sayHello"</code>, you must declare a
     * <code>public void sayHello(View v)</code> method of your context
     * (typically, your Activity).
     * {@deprecated View actually traverses the Context
     * hierarchy looking for the relevant method, which is fragile (an intermediate
     * ContextWrapper adding a same-named method would change behavior) and restricts
     * bytecode optimizers such as R8. Instead, use View.setOnClickListener.}
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    @Deprecated
    public static final int onClick=0x0101026f;
    /**
     * If true, the animation will only run a single time and then
     * stop.  If false (the default), it will continually run,
     * restarting at the first frame after the last has finished.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int oneshot=0x01010197;
    /**
     * Indicates the opacity of the layer. This can be useful to allow the
     * system to enable drawing optimizations. The default value is
     * translucent.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>opaque</td><td>ffffffff</td><td>Indicates that the layer is opaque and contains no transparent
     * nor translucent pixels.</td></tr>
     * <tr><td>translucent</td><td>fffffffd</td><td>The layer has translucent pixels.</td></tr>
     * <tr><td>transparent</td><td>fffffffe</td><td>The layer is completely transparent (no pixel will be drawn).</td></tr>
     * </table>
     */
    public static final int opacity=0x0101031e;
    /**
     * Bottom optical inset.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int opticalInsetBottom=0x0101058b;
    /**
     * Left optical inset.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int opticalInsetLeft=0x01010588;
    /**
     * Right optical inset.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int opticalInsetRight=0x0101058a;
    /**
     * Top optical inset.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int opticalInsetTop=0x01010589;
    /**
     * The order for the Preference (lower values are to be ordered first). If this is not
     * specified, the default ordering will be alphabetic.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int order=0x010101ea;
    /**
     * The order within the category applied to all items within this group.
     * (This will be or'ed with the category attribute.)
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int orderInCategory=0x010101df;
    /**
     * Name of the property being animated.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>sequentially</td><td>1</td><td>child animations should be played sequentially, in the same order as the xml.</td></tr>
     * <tr><td>together</td><td>0</td><td>child animations should be played together.</td></tr>
     * </table>
     */
    public static final int ordering=0x010102e2;
    /**
     * Whether to order the Preference under this group as they appear in the XML file.
     * If this is false, the ordering will follow the Preference order attribute and
     * default to alphabetic for those without the order attribute.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int orderingFromXml=0x010101e7;
    /**
     * Standard orientation constant.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>horizontal</td><td>0</td><td>Defines an horizontal widget.</td></tr>
     * <tr><td>vertical</td><td>1</td><td>Defines a vertical widget.</td></tr>
     * </table>
     */
    public static final int orientation=0x010100c4;
    /**
     * Identifier for the animation to use when a view is hidden.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int outAnimation=0x01010178;
    /**
     * Sets the color of the ambient shadow that is drawn when the view has a positive Z
     * or elevation value.
     * <p>
     * By default the shadow color is black. Generally, this color will be opaque so the
     * intensity of the shadow is consistent between different views with different colors.
     * <p>
     * The opacity of the final ambient shadow is a function of the shadow caster height,
     * the alpha channel of the outlineAmbientShadowColor (typically opaque), and the
     * {@link android.R.attr#ambientShadowAlpha} theme attribute.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int outlineAmbientShadowColor=0x01010582;
    /**
     * ViewOutlineProvider used to determine the View's Outline.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>background</td><td>0</td><td>Default, background drawable-driven outline.</td></tr>
     * <tr><td>bounds</td><td>2</td><td>Generates an opaque outline for the bounds of the view.</td></tr>
     * <tr><td>none</td><td>1</td><td>No outline provider.</td></tr>
     * <tr><td>paddedBounds</td><td>3</td><td>Generates an opaque outline for the padded bounds of the view.</td></tr>
     * </table>
     */
    public static final int outlineProvider=0x010104b8;
    /**
     * Sets the color of the spot shadow that is drawn when the view has a positive Z or
     * elevation value.
     * <p>
     * By default the shadow color is black. Generally, this color will be opaque so the
     * intensity of the shadow is consistent between different views with different colors.
     * <p>
     * The opacity of the final spot shadow is a function of the shadow caster height, the
     * alpha channel of the outlineSpotShadowColor (typically opaque), and the
     * {@link android.R.attr#spotShadowAlpha} theme attribute.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int outlineSpotShadowColor=0x01010581;
    /**
     * Drawable to draw below list content.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int overScrollFooter=0x010102c3;
    /**
     * Drawable to draw above list content.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int overScrollHeader=0x010102c2;
    /**
     * Defines over-scrolling behavior. This property is used only if the
     * View is scrollable. Over-scrolling is the ability for the user to
     * receive feedback when attempting to scroll beyond meaningful content.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>always</td><td>0</td><td>Always show over-scroll effects, even if the content fits entirely
     * within the available space.</td></tr>
     * <tr><td>ifContentScrolls</td><td>1</td><td>Only show over-scroll effects if the content is large
     * enough to meaningfully scroll.</td></tr>
     * <tr><td>never</td><td>2</td><td>Never show over-scroll effects.</td></tr>
     * </table>
     */
    public static final int overScrollMode=0x010102c1;
    /**
     * Whether the popup window should overlap its anchor view.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int overlapAnchor=0x01010462;
    /**
     * Set true when this subtype should be selected by default if no other subtypes are
     * selected explicitly. Note that a subtype with this parameter being true will
     * not be shown in the subtypes list.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int overridesImplicitlyEnabledSubtype=0x010103a2;
    /**
     * Comma separated package names from which this service would like to receive events (leave out for all packages).
     * {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
     * android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int packageNames=0x01010381;
    /**
     * Required type of association with the package, for example "android.package.ad_service"
     * if it provides an advertising service.  This should use the standard scoped naming
     * convention as used for other things such as package names, based on the Java naming
     * convention.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int packageType=0x01010587;
    /**
     * Sets the padding, in pixels, of all four edges. Padding is defined as
     * space between the edges of the view and the view's content. This value will take
     * precedence over any of the edge-specific values (paddingLeft, paddingTop,
     * paddingRight, paddingBottom, paddingHorizontal and paddingVertical), but will
     * not override paddingStart or paddingEnd, if set. A view's size
     * will include its padding. If a {@link android.R.attr#background}
     * is provided, the padding will initially be set to that (0 if the
     * drawable does not have padding). Explicitly setting a padding value
     * will override the corresponding padding found in the background.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int padding=0x010100d5;
    /**
     * Sets the padding, in pixels, of the bottom edge; see {@link android.R.attr#padding}.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int paddingBottom=0x010100d9;
    /**
     * Sets the padding, in pixels, of the end edge; see {@link android.R.attr#padding}.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int paddingEnd=0x010103b4;
    /**
     * Sets the padding, in pixels, of the left and right edges; see
     * {@link android.R.attr#padding}. This value will take precedence over
     * paddingLeft and paddingRight, but not paddingStart or paddingEnd (if set).
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int paddingHorizontal=0x0101053d;
    /**
     * Sets the padding, in pixels, of the left edge; see {@link android.R.attr#padding}.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int paddingLeft=0x010100d6;
    /**
     * Indicates how layer padding should affect the bounds of subsequent layers.
     * The default padding mode value is nest.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>nest</td><td>0</td><td>Nest each layer inside the padding of the previous layer.</td></tr>
     * <tr><td>stack</td><td>1</td><td>Stack each layer directly atop the previous layer.</td></tr>
     * </table>
     */
    public static final int paddingMode=0x01010457;
    /**
     * Sets the padding, in pixels, of the right edge; see {@link android.R.attr#padding}.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int paddingRight=0x010100d8;
    /**
     * Sets the padding, in pixels, of the start edge; see {@link android.R.attr#padding}.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int paddingStart=0x010103b3;
    /**
     * Sets the padding, in pixels, of the top edge; see {@link android.R.attr#padding}.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int paddingTop=0x010100d7;
    /**
     * Sets the padding, in pixels, of the top and bottom edges; see
     * {@link android.R.attr#padding}. This value will take precedence over
     * paddingTop and paddingBottom, if set.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int paddingVertical=0x0101053e;
    /**
     * The background of a panel when it is inset from the left and right edges of the screen.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int panelBackground=0x0101005e;
    /**
     * Color that matches (as closely as possible) the panel background.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int panelColorBackground=0x01010061;
    /**
     * Default color of foreground panel imagery.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int panelColorForeground=0x01010060;
    /**
     * The background of a panel when it extends to the left and right edges of the screen.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int panelFullBackground=0x0101005f;
    /**
     * Default appearance of panel text.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int panelTextAppearance=0x01010062;
    /**
     * The name of the logical parent of the activity as it appears in the manifest.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int parentActivityName=0x010103a7;
    /**
     * Whether the characters of the field are displayed as
     * password dots instead of themselves.
     * {@deprecated Use inputType instead.}
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    @Deprecated
    public static final int password=0x0101015c;
    /**
     * Fully qualified class name of an activity that allows the user to view any passwords
     * saved by this service.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int passwordsActivity=0x0101063f;
    /**
     * Specify a URI path that must exactly match, as per
     * {@link android.os.PatternMatcher} with
     * {@link android.os.PatternMatcher#PATTERN_LITERAL}.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int path=0x0101002a;
    /**
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int pathAdvancedPattern=0x01010620;
    /**
     * The specification of the operations that define the path.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int pathData=0x01010405;
    /**
     * Specify a URI path that matches a simple pattern, as per
     * {@link android.os.PatternMatcher} with
     * {@link android.os.PatternMatcher#PATTERN_SIMPLE_GLOB}.
     * Note that because '\' is used as an escape character when
     * reading the string from XML (before it is parsed as a pattern),
     * you will need to double-escape: for example a literal "*" would
     * be written as "\\*" and a literal "\" would be written as
     * "\\\\".  This is basically the same as what you would need to
     * write if constructing the string in Java code.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int pathPattern=0x0101002c;
    /**
     * Specify a URI path that must be a prefix to match, as per
     * {@link android.os.PatternMatcher} with
     * {@link android.os.PatternMatcher#PATTERN_PREFIX}.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int pathPrefix=0x0101002b;
    /**
     * Specify a URI path that must be a suffix to match, as per
     * {@link android.os.PatternMatcher} with
     * {@link android.os.PatternMatcher#PATTERN_SUFFIX}.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int pathSuffix=0x0101061e;
    /**
     * The path string describing the pattern to use for the PathPathMotion.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int patternPathData=0x010104ca;
    /**
     * Specify a permission that a client is required to have in order to
     * use the associated object.  If the client does not hold the named
     * permission, its request will fail.  See the
     * <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
     * document for more information on permissions.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int permission=0x01010006;
    /**
     * Flags indicating more context for a permission.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>costsMoney</td><td>1</td><td>Set to indicate that this permission allows an operation that
     * may cost the user money.  Such permissions may be highlighted
     * when shown to the user with this additional information.</td></tr>
     * <tr><td>hardRestricted</td><td>4</td><td>This permission is restricted by the platform and it would be
     * grantable only to apps that meet special criteria per platform
     * policy.</td></tr>
     * <tr><td>immutablyRestricted</td><td>10</td><td>This permission is restricted immutably which means that its
     * restriction state may be specified only on the first install of
     * the app and will stay in this initial allowlist state until
     * the app is uninstalled.</td></tr>
     * <tr><td>installerExemptIgnored</td><td>20</td><td>Modifier for permission restriction. This permission cannot
     * be exempted by the installer.</td></tr>
     * <tr><td>removed</td><td>2</td><td>Additional flag from base permission type: this permission has been
     * removed and it is no longer enforced. It shouldn't be shown in the
     * UI. Removed permissions are kept as normal permissions for backwards
     * compatibility as apps may be checking them before calling an API.</td></tr>
     * <tr><td>softRestricted</td><td>8</td><td>This permission is restricted by the platform and it would be
     * grantable in its full form to apps that meet special criteria
     * per platform policy. Otherwise, a weaker form of the permission
     * would be granted. The weak grant depends on the permission.
     * <p>What weak grant means is described in the documentation of
     * the permissions.</td></tr>
     * </table>
     */
    public static final int permissionFlags=0x010103c7;
    /**
     * Specified the name of a group that this permission is associated
     * with.  The group must have been defined with the
     * {@link android.R.styleable#AndroidManifestPermissionGroup permission-group} tag.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int permissionGroup=0x0101000a;
    /**
     * Flags indicating more context for a permission group.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>personalInfo</td><td>1</td><td>Set to indicate that this permission group contains permissions
     * protecting access to some information that is considered
     * personal to the user (such as contacts, e-mails, etc).</td></tr>
     * </table>
     */
    public static final int permissionGroupFlags=0x010103c5;
    /**
     * Define how an activity persist across reboots. Activities defined as "never" will not
     * be persisted. Those defined as "always" will be persisted. Those defined as "taskOnly"
     * will persist the root activity of the task only. See below for more detail as to
     * what gets persisted.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>persistAcrossReboots</td><td>2</td><td>If this activity forms the root of a task then the task and this activity will
     * be persisted across reboots. If the activity above this activity is also
     * tagged with the attribute <code>"persist"</code> then it will be persisted as well.
     * And so on up the task stack until either an activity without the
     * <code>persistableMode="persistAcrossReboots"</code> attribute or one that was launched
     * with the flag Intent.FLAG_CLEAR_TASK_WHEN_RESET is encountered.
     * <p>Activities that are declared with the persistAcrossReboots attribute will be
     * provided with a PersistableBundle in onSavedInstanceState(), These activities may
     * use this PeristableBundle to save their state. Then, following a reboot, that
     * PersistableBundle will be provided back to the activity in its onCreate() method.</td></tr>
     * <tr><td>persistNever</td><td>1</td><td>If this activity forms the root of a task then that task will not be persisted
     * across reboots</td></tr>
     * <tr><td>persistRootOnly</td><td>0</td><td>The default. If this activity forms the root of a task then that task will be
     * persisted across reboots but only the launching intent will be used. If the task
     * relinquishes its identity then the intent used is that of the topmost inherited
     * identity. All activities above this activity in the task will not be persisted.
     * In addition this activity will not be passed a PersistableBundle into which it
     * could have stored its state.</td></tr>
     * </table>
     */
    public static final int persistableMode=0x0101042d;
    /**
     * Flag to control special persistent mode of an application.  This should
     * not normally be used by applications; it requires that the system keep
     * your application running at all times.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int persistent=0x0101000d;
    /**
     * Defines the persistence of the drawing cache. The drawing cache might be
     * enabled by a ViewGroup for all its children in specific situations (for
     * instance during a scrolling.) This property lets you persist the cache
     * in memory after its initial usage. Persisting the cache consumes more
     * memory but may prevent frequent garbage collection if the cache is created
     * over and over again. By default the persistence is set to scrolling.
     * Deprecated: The view drawing cache was largely made obsolete with the introduction of
     * hardware-accelerated rendering in API 11.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>all</td><td>3</td><td>The drawing cache is always persisted.</td></tr>
     * <tr><td>animation</td><td>1</td><td>The drawing cache is persisted after a layout animation.</td></tr>
     * <tr><td>none</td><td>0</td><td>The drawing cache is not persisted after use.</td></tr>
     * <tr><td>scrolling</td><td>2</td><td>The drawing cache is persisted after a scroll.</td></tr>
     * </table>
     */
    public static final int persistentDrawingCache=0x010100ee;
    /**
     * If set, the "persistent" attribute will only be honored if the feature
     * specified here is present on the device.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int persistentWhenFeatureAvailable=0x01010563;
    /**
     * If set, specifies that this TextView has a phone number input
     * method. The default is false.
     * {@deprecated Use inputType instead.}
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    @Deprecated
    public static final int phoneNumber=0x01010167;
    /**
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int pivotX=0x010101b5;
    /**
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int pivotY=0x010101b6;
    /**
     * @hide
     * Specifies whether a home sound effect should be played if the home app moves to
     * front after an activity with this flag set to <code>true</code>.
     * <p>The default value of this attribute is <code>true</code>.
     * <p>Also note that home sounds are only played if the device supports home sounds,
     * usually TVs.
     * <p>Requires permission {@code android.permission.DISABLE_SYSTEM_SOUND_EFFECTS}.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    @android.annotation.SystemApi
    public static final int playHomeTransitionSound=0x01010646;
    /**
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>alias</td><td>3f2</td><td>Pointer icon of 'alias', indicating an alias of/shortcut to something is to be
     * created.</td></tr>
     * <tr><td>all_scroll</td><td>3f5</td><td>Pointer icon of four-way arrows, indicating scrolling all direction.</td></tr>
     * <tr><td>arrow</td><td>3e8</td><td>The default icon of arrow pointer.</td></tr>
     * <tr><td>cell</td><td>3ee</td><td>Pointer icon for cell and grid.</td></tr>
     * <tr><td>context_menu</td><td>3e9</td><td>Pointer icon indicating context-menu will appear.</td></tr>
     * <tr><td>copy</td><td>3f3</td><td>Pointer icon of 'copy', used for drag/drop.</td></tr>
     * <tr><td>crosshair</td><td>3ef</td><td>Pointer icon of crosshair, indicating to spot a location.</td></tr>
     * <tr><td>grab</td><td>3fc</td><td>Pointer icon of a hand sign to grab something.</td></tr>
     * <tr><td>grabbing</td><td>3fd</td><td>Pointer icon of a hand sign while grabbing something.</td></tr>
     * <tr><td>hand</td><td>3ea</td><td>Pointer icon of a hand with the index finger.</td></tr>
     * <tr><td>help</td><td>3eb</td><td>Pointer icon indicating help.</td></tr>
     * <tr><td>horizontal_double_arrow</td><td>3f6</td><td>Pointer icon of horizontal double arrow, indicating horizontal resize.</td></tr>
     * <tr><td>no_drop</td><td>3f4</td><td>Pointer icon of 'no-drop', indicating the drop will not be accepted at the
     * current location.</td></tr>
     * <tr><td>none</td><td>0</td><td>Null icon, pointer becomes invisible.</td></tr>
     * <tr><td>text</td><td>3f0</td><td>Pointer icon of I-beam, usually for text.</td></tr>
     * <tr><td>top_left_diagonal_double_arrow</td><td>3f9</td><td>Pointer icon of diagonal double arrow, starting from top-left to bottom-right.
     * Indicating freeform resize.</td></tr>
     * <tr><td>top_right_diagonal_double_arrow</td><td>3f8</td><td>Pointer icon of diagonal double arrow, starting from top-right to bottom-left.
     * Indicating freeform resize.</td></tr>
     * <tr><td>vertical_double_arrow</td><td>3f7</td><td>Pointer icon of vertical double arrow, indicating vertical resize.</td></tr>
     * <tr><td>vertical_text</td><td>3f1</td><td>Pointer icon of I-beam with 90-degree rotated, for vertical text.</td></tr>
     * <tr><td>wait</td><td>3ec</td><td>Pointer icon indicating something is going on and waiting.</td></tr>
     * <tr><td>zoom_in</td><td>3fa</td><td>Pointer icon indicating zoom-in.</td></tr>
     * <tr><td>zoom_out</td><td>3fb</td><td>Pointer icon indicating zoom-out.</td></tr>
     * </table>
     */
    public static final int pointerIcon=0x01010509;
    /**
     * The animation style to use for the popup window.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int popupAnimationStyle=0x010102c9;
    /**
     * The background to use for the popup window.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int popupBackground=0x01010176;
    /**
     * The characters to display in the popup keyboard.
     * {@deprecated Copy this definition into your own application project.}
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    @Deprecated
    public static final int popupCharacters=0x01010244;
    /**
     * Window elevation to use for the popup window.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int popupElevation=0x0101048c;
    /**
     * Transition used to move views into the popup window.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int popupEnterTransition=0x0101051f;
    /**
     * Transition used to move views out of the popup window.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int popupExitTransition=0x01010520;
    /**
     * The XML keyboard layout of any popup keyboard.
     * {@deprecated Copy this definition into your own application project.}
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    @Deprecated
    public static final int popupKeyboard=0x01010243;
    /**
     * Layout resource for popup keyboards.
     * {@deprecated Copy this definition into your own application project.}
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    @Deprecated
    public static final int popupLayout=0x0101023b;
    /**
     * Default PopupMenu style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int popupMenuStyle=0x01010300;
    /**
     * Reference to a theme that should be used to inflate popups
     * shown by widgets in the toolbar.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int popupTheme=0x010104a9;
    /**
     * Default PopupWindow style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int popupWindowStyle=0x01010076;
    /**
     * Specify a URI authority port that is handled, as per
     * {@link android.content.IntentFilter#addDataAuthority
     * IntentFilter.addDataAuthority()}.  If a host is supplied
     * but not a port, any port is matched.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int port=0x01010029;
    /**
     * The positive button text for the dialog. Set to @null to hide the positive button.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int positiveButtonText=0x010101f5;
    /**
     * Indicates whether the activity wants the connected display to do minimal
     * post processing on the produced image or video frames. This will only be
     * requested if this activity's main window is visible on the screen.
     * <p> This setting should be used when low latency has a higher priority than
     * image enhancement processing (e.g. for games or video conferencing).
     * <p> If the Display sink is connected via HDMI, the device will begin to
     * send infoframes with Auto Low Latency Mode enabled and Game Content Type.
     * This will switch the connected display to a minimal image processing  mode
     * (if available), which reduces latency, improving the user experience for
     * gaming or video conferencing applications. For more information,
     * see HDMI 2.1 specification.
     * <p> If the Display sink has an internal connection or uses some other
     * protocol than HDMI, effects may be similar but implementation-defined.
     * <p> The ability to switch to a mode with minimal post proessing may be
     * disabled by a user setting in the system settings menu. In that case,
     * this field is ignored and the display will remain in its current
     * mode.
     * <p> See {@link android.content.pm.ActivityInfo#FLAG_PREFER_MINIMAL_POST_PROCESSING}
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int preferMinimalPostProcessing=0x0101060c;
    /**
     * Default style for PreferenceCategory.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int preferenceCategoryStyle=0x0101008c;
    /**
     * Default style for Headers pane in PreferenceActivity.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int preferenceFragmentStyle=0x01010506;
    /**
     * Default style for informational Preference.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int preferenceInformationStyle=0x0101008d;
    /**
     * The preference layout that has the child/tabbed effect.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int preferenceLayoutChild=0x01010094;
    /**
     * Default style for PreferenceScreen.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int preferenceScreenStyle=0x0101008b;
    /**
     * Default style for Preference.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int preferenceStyle=0x0101008e;
    /**
     * Theme to use for presentations spawned from this theme.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int presentationTheme=0x010103c0;
    /**
     * If {@code true} this app would like to preserve the legacy storage
     * model from a previously installed version. Note that this may not always be
     * respected due to policy or backwards compatibility reasons.
     * <p>This has no effect on the first install of an app on a device.
     * For an updating app, setting this to {@code true} will preserve the legacy behaviour
     * configured by the {@code requestLegacyExternalStorage} flag. If on an update, this
     * flag is set to {@code false} then the legacy access is not preserved, such an app can
     * only have legacy access with the {@code requestLegacyExternalStorage} flag.
     * <p>
     * The default value is {@code false}.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int preserveLegacyExternalStorage=0x01010614;
    /**
     * A preview, in a drawable resource id, of what the AppWidget will look like after it's
     * configured.
     * If not supplied, the AppWidget's icon will be used.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int previewImage=0x010102da;
    /**
     * The layout resource id of a preview of what the AppWidget will look like after it's
     * configured.
     * Unlike previewImage, previewLayout can better showcase AppWidget in different locales,
     * system themes, display sizes & density etc.
     * If supplied, this will take precedence over the previewImage on supported widget hosts.
     * Otherwise, previewImage will be used.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int previewLayout=0x01010627;
    /**
     * The alpha applied to the foreground color to create the primary text color.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int primaryContentAlpha=0x01010552;
    /**
     * Specify the relative importance or ability in handling a particular
     * Intent.  For receivers, this controls the order in which they are
     * executed to receive a broadcast (note that for
     * asynchronous broadcasts, this order is ignored).  For activities,
     * this provides information about how good an activity is handling an
     * Intent; when multiple activities match an intent and have different
     * priorities, only those with the higher priority value will be
     * considered a match.
     * <p>Only use if you really need to impose some specific
     * order in which the broadcasts are received, or want to forcibly
     * place an activity to always be preferred over others.  The value is a
     * single integer, with higher numbers considered to be better.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int priority=0x0101001c;
    /**
     * An addition content type description to supply to the input
     * method attached to the text view, which is private to the
     * implementation of the input method.  This simply fills in
     * the {@link android.view.inputmethod.EditorInfo#privateImeOptions
     * EditorInfo.privateImeOptions} field when the input
     * method is connected.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int privateImeOptions=0x01010223;
    /**
     * Specify a specific process that the associated code is to run in.
     * Use with the application tag (to supply a default process for all
     * application components), or with the activity, receiver, service,
     * or provider tag (to supply a specific icon for that component).
     * <p>Application components are normally run in a single process that
     * is created for the entire application.  You can use this tag to modify
     * where they run.  If the process name begins with a ':' character,
     * a new process private to that application will be created when needed
     * to run that component (allowing you to spread your application across
     * multiple processes).  If the process name begins with a lower-case
     * character, the component will be run in a global process of that name,
     * provided that you have permission to do so, allowing multiple
     * applications to share one process to reduce resource usage.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int process=0x01010011;
    /**
     * Defines the default progress value, between 0 and max.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int progress=0x01010137;
    /**
     * Tint to apply to the progress indicator background.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int progressBackgroundTint=0x01010465;
    /**
     * Blending mode used to apply the progress indicator background tint.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     */
    public static final int progressBackgroundTintMode=0x01010466;
    /**
     * Specifies the horizontal padding on either end for an embedded progress bar.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int progressBarPadding=0x01010319;
    /**
     * Default ProgressBar style. This is a medium circular progress bar.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int progressBarStyle=0x01010077;
    /**
     * Horizontal ProgressBar style. This is a horizontal progress bar.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int progressBarStyleHorizontal=0x01010078;
    /**
     * Inverse ProgressBar style. This is a medium circular progress bar.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int progressBarStyleInverse=0x01010287;
    /**
     * Large ProgressBar style. This is a large circular progress bar.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int progressBarStyleLarge=0x0101007a;
    /**
     * Large inverse ProgressBar style. This is a large circular progress bar.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int progressBarStyleLargeInverse=0x01010289;
    /**
     * Small ProgressBar style. This is a small circular progress bar.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int progressBarStyleSmall=0x01010079;
    /**
     * Small inverse ProgressBar style. This is a small circular progress bar.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int progressBarStyleSmallInverse=0x01010288;
    /**
     * Small ProgressBar in title style. This is a small circular progress bar that will be placed in title bars.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int progressBarStyleSmallTitle=0x0101020f;
    /**
     * Drawable used for the progress mode.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int progressDrawable=0x0101013c;
    /**
     * Tint to apply to the progress indicator.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int progressTint=0x01010463;
    /**
     * Blending mode used to apply the progress indicator tint.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     */
    public static final int progressTintMode=0x01010464;
    /**
     * The prompt to display when the spinner's dialog is shown.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int prompt=0x0101017b;
    /**
     * Name of the property being animated.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int propertyName=0x010102e1;
    /**
     * Name of the property being animated as the X coordinate of the pathData.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int propertyXName=0x01010474;
    /**
     * Name of the property being animated as the Y coordinate of the pathData.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int propertyYName=0x01010475;
    /**
     * Characterizes the potential risk implied in a permission and
     * indicates the procedure the system should follow when determining
     * whether to grant the permission to an application requesting it. {@link
     * android.Manifest.permission Standard permissions} have a predefined and
     * permanent protectionLevel. If you are creating a custom permission in an
     * application, you can define a protectionLevel attribute with one of the
     * values listed below. If no protectionLevel is defined for a custom
     * permission, the system assigns the default ("normal").
     * <p>Each protection level consists of a base permission type and zero or
     * more flags. Use the following functions to extract those.
     * <pre>
     * int basePermissionType = permissionInfo.getProtection();
     * int permissionFlags = permissionInfo.getProtectionFlags();
     * </pre>
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>appPredictor</td><td>200000</td><td>Additional flag from base permission type: this permission can be automatically
     * granted to the system app predictor</td></tr>
     * <tr><td>appop</td><td>40</td><td>Additional flag from base permission type: this permission is closely
     * associated with an app op for controlling access.</td></tr>
     * <tr><td>companion</td><td>800000</td><td>Additional flag from base permission type: this permission can be automatically
     * granted to the system companion device manager service</td></tr>
     * <tr><td>configurator</td><td>80000</td><td>Additional flag from base permission type: this permission automatically
     * granted to device configurator</td></tr>
     * <tr><td>dangerous</td><td>1</td><td><strong>Base permission type</strong>: a higher-risk permission that
     * would give a requesting application access to private user data or
     * control over the device that can negatively impact the user.  Because
     * this type of permission introduces potential risk, the system may
     * not automatically grant it to the requesting application.  For example,
     * any dangerous permissions requested by an application may be displayed
     * to the user and require confirmation before proceeding, or some other
     * approach may be taken to avoid the user automatically allowing
     * the use of such facilities.</td></tr>
     * <tr><td>development</td><td>20</td><td>Additional flag from base permission type: this permission can also
     * (optionally) be granted to development applications. Although undocumented, the
     * permission state used to be shared by all users (including future users), but it is
     * managed per-user since API level 31.</td></tr>
     * <tr><td>documenter</td><td>40000</td><td>Additional flag from base permission type: this permission can be automatically
     * granted to the document manager</td></tr>
     * <tr><td>incidentReportApprover</td><td>100000</td><td>Additional flag from base permission type: this permission designates the app
     * that will approve the sharing of incident reports.</td></tr>
     * <tr><td>installer</td><td>100</td><td>Additional flag from base permission type: this permission can be automatically
     * granted to system apps that install packages.</td></tr>
     * <tr><td>instant</td><td>1000</td><td>Additional flag from base permission type: this permission can be granted to instant
     * apps</td></tr>
     * <tr><td>internal</td><td>4</td><td><strong>Base permission type</strong>: a permission that is managed internally by the
     * system and only granted according to the protection flags.</td></tr>
     * <tr><td>knownSigner</td><td>8000000</td><td>Additional flag from base permission type: this permission can also be granted if the
     * requesting application is signed by, or has in its signing lineage, any of the
     * certificate digests declared in {@link android.R.attr#knownCerts}.</td></tr>
     * <tr><td>normal</td><td>0</td><td><strong>Base permission type</strong>: a lower-risk permission that gives
     * an application access to isolated application-level features, with minimal
     * risk to other applications, the system, or the user. The system
     * automatically grants this type of permission to a requesting application at
     * installation, without asking for the user's explicit approval (though the
     * user always has the option to review these permissions before installing).</td></tr>
     * <tr><td>oem</td><td>4000</td><td>Additional flag from base permission type: this permission can be granted only
     * if its protection level is signature, the requesting app resides on the OEM partition,
     * and the OEM has allowlisted the app to receive this permission by the OEM.</td></tr>
     * <tr><td>pre23</td><td>80</td><td>Additional flag from base permission type: this permission can be automatically
     * granted to apps that target API levels below
     * {@link android.os.Build.VERSION_CODES#M} (before runtime permissions
     * were introduced).</td></tr>
     * <tr><td>preinstalled</td><td>400</td><td>Additional flag from base permission type: this permission can be automatically
     * granted any application pre-installed on the system image (not just privileged
     * apps).</td></tr>
     * <tr><td>privileged</td><td>10</td><td>Additional flag from base permission type: this permission can also
     * be granted to any applications installed as privileged apps on the system image.
     * Please avoid using this option, as the
     * signature protection level should be sufficient for most needs and
     * works regardless of exactly where applications are installed.  This
     * permission flag is used for certain special situations where multiple
     * vendors have applications built in to a system image which need
     * to share specific features explicitly because they are being built
     * together.</td></tr>
     * <tr><td>recents</td><td>2000000</td><td>Additional flag from base permission type: this permission will be granted to the
     * recents app.</td></tr>
     * <tr><td>retailDemo</td><td>1000000</td><td>Additional flag from base permission type: this permission will be granted to the
     * retail demo app, as defined by the OEM.</td></tr>
     * <tr><td>role</td><td>4000000</td><td>Additional flag from base permission type: this permission is managed by role.</td></tr>
     * <tr><td>runtime</td><td>2000</td><td>Additional flag from base permission type: this permission can only be granted to apps
     * that target runtime permissions ({@link android.os.Build.VERSION_CODES#M} and above)</td></tr>
     * <tr><td>setup</td><td>800</td><td>Additional flag from base permission type: this permission can be automatically
     * granted to the setup wizard app</td></tr>
     * <tr><td>signature</td><td>2</td><td><strong>Base permission type</strong>: a permission that the system is
     * to grant only if the requesting application is signed with the same
     * certificate as the application that declared the permission. If the
     * certificates match, the system automatically grants the permission
     * without notifying the user or asking for the user's explicit approval.</td></tr>
     * <tr><td>signatureOrSystem</td><td>3</td><td>Old synonym for "signature|privileged". Deprecated in API level 23.
     * Base permission type: a permission that the system is to grant only
     * to packages in the Android system image <em>or</em> that are signed
     * with the same certificates. Please avoid using this option, as the
     * signature protection level should be sufficient for most needs and
     * works regardless of exactly where applications are installed.  This
     * permission is used for certain special situations where multiple
     * vendors have applications built in to a system image which need
     * to share specific features explicitly because they are being built
     * together.</td></tr>
     * <tr><td>system</td><td>10</td><td>Old synonym for "privileged". Deprecated in API level 23.</td></tr>
     * <tr><td>textClassifier</td><td>10000</td><td>Additional flag from base permission type: this permission can be automatically
     * granted to the system default text classifier</td></tr>
     * <tr><td>vendorPrivileged</td><td>8000</td><td>Additional flag from base permission type: this permission can be granted to
     * privileged apps in vendor partition.</td></tr>
     * <tr><td>verifier</td><td>200</td><td>Additional flag from base permission type: this permission can be automatically
     * granted to system apps that verify packages.</td></tr>
     * </table>
     */
    public static final int protectionLevel=0x01010009;
    /**
     * The attribute that holds a Base64-encoded public key.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int publicKey=0x010103a6;
    /**
     * If you wish to handle an action key during normal search query entry, you
     * must define an action string here.  This will be added to the
     * {@link android.content.Intent#ACTION_SEARCH ACTION_SEARCH} intent that is passed to your
     * searchable activity.  To examine the string, use
     * {@link android.content.Intent#getStringExtra getStringExtra(SearchManager.ACTION_MSG)}.
     * <i>Optional attribute.</i>
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int queryActionMsg=0x010101db;
    /**
     * If provided and <code>true</code>, this searchable activity will be invoked for all
     * queries in a particular session. If set to <code>false</code> and the activity
     * returned zero results for a query, it will not be invoked again in that session for
     * supersets of that zero-results query. For example, if the activity returned zero
     * results for "bo", it would not be queried again for "bob".
     * The default value is <code>false</code>. <i>Optional attribute.</i>.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int queryAfterZeroResults=0x01010282;
    /**
     * Background for the section containing the search query.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int queryBackground=0x01010487;
    /**
     * An optional query hint string to be displayed in the empty query field.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int queryHint=0x01010358;
    /**
     * Default quickcontact badge style with large quickcontact window.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int quickContactBadgeStyleSmallWindowLarge=0x010102b3;
    /**
     * Default quickcontact badge style with medium quickcontact window.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int quickContactBadgeStyleSmallWindowMedium=0x010102b2;
    /**
     * Default quickcontact badge style with small quickcontact window.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int quickContactBadgeStyleSmallWindowSmall=0x010102b1;
    /**
     * Default quickcontact badge style with large quickcontact window.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int quickContactBadgeStyleWindowLarge=0x010102b0;
    /**
     * Default quickcontact badge style with medium quickcontact window.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int quickContactBadgeStyleWindowMedium=0x010102af;
    /**
     * Default quickcontact badge style with small quickcontact window.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int quickContactBadgeStyleWindowSmall=0x010102ae;
    /**
     * Default RadioButton style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int radioButtonStyle=0x0101007e;
    /**
     * Defines the radius of the four corners.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int radius=0x010101a8;
    /**
     * The rating to set by default.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int rating=0x01010145;
    /**
     * Default RatingBar style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int ratingBarStyle=0x0101007c;
    /**
     * Indicator RatingBar style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int ratingBarStyleIndicator=0x01010210;
    /**
     * Small indicator RatingBar style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int ratingBarStyleSmall=0x0101007d;
    /**
     * A specific {@link android.R.attr#permission} name for read-only
     * access to a {@link android.content.ContentProvider}.  See the
     * <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
     * document for more information on permissions.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int readPermission=0x01010007;
    /**
     * The service that provides voice recognition. This is required. On Android 11 and
     * earlier, this must be a valid RecognitionService.
     * <p>
     * From Android 12 onward, this attribute does nothing. However, we still require it to
     * be set to something to reduce the risk that an app with an unspecified value gets
     * pushed to older platform versions, where it will cause a boot loop. To make sure
     * developers don't miss it, the system will reset the current assistant if this isn't
     * specified.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int recognitionService=0x0101049c;
    /**
     * Specify the configuration changes that trigger the system to recreate the
     * current activity if any of these configuration changes happen in the system.
     * The valid configuration changes include mcc and mnc which are the same with
     * those in configChanges. By default from Android O, we don't recreate the activity
     * even the app doesn't specify mcc or mnc in configChanges. If the app wants to
     * be recreated, specify them in recreateOnConfigChanges.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>mcc</td><td>1</td><td>The IMSI MCC has changed, that is a SIM has been detected and
     * updated the Mobile Country Code.</td></tr>
     * <tr><td>mnc</td><td>2</td><td>The IMSI MNC has changed, that is a SIM has been detected and
     * updated the Mobile Network Code.</td></tr>
     * </table>
     */
    public static final int recreateOnConfigChanges=0x01010547;
    /**
     * Whether the preference has enabled to have its view recycled when used in the list
     * view. This is true by default.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int recycleEnabled=0x01010559;
    /**
     * Tasks whose root has this attribute set to true will replace baseIntent with that of the
     * next activity in the task. If the next activity also has this attribute set to true then
     * it will yield the baseIntent to any activity that it launches in the same task. This
     * continues until an activity is encountered which has this attribute set to false. False
     * is the default. This attribute set to true also permits activity's use of the
     * TaskDescription to change labels, colors and icons in the recent task list.
     * <p>NOTE: Setting this flag to <code>true</code> will not change the affinity of the task,
     * which is used for intent resolution during activity launch. The task's root activity will
     * always define its affinity.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int relinquishTaskIdentity=0x01010476;
    /**
     * Tells ChangeTransform to track parent changes. Default is true. Corresponds to
     * {@link android.transition.ChangeTransform#setReparent(boolean)}.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int reparent=0x010104bc;
    /**
     * A parent change should use an overlay or affect the transform of the
     * transitionining View. Default is true. Corresponds to
     * {@link android.transition.ChangeTransform#setReparentWithOverlay(boolean)}.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int reparentWithOverlay=0x010104bd;
    /**
     * Defines how many times the animation should repeat. The default value is 0.
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>infinite</td><td>ffffffff</td><td></td></tr>
     * </table>
     */
    public static final int repeatCount=0x010101bf;
    /**
     * Defines the animation behavior when it reaches the end and the repeat count is
     * greater than 0 or infinite. The default value is restart.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>restart</td><td>1</td><td>The animation starts again from the beginning.</td></tr>
     * <tr><td>reverse</td><td>2</td><td>The animation plays backward.</td></tr>
     * </table>
     */
    public static final int repeatMode=0x010101c0;
    /**
     * Application's requirement for five way navigation
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int reqFiveWayNav=0x01010232;
    /**
     * Application's requirement for a hard keyboard
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int reqHardKeyboard=0x01010229;
    /**
     * The input method preferred by an application.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>nokeys</td><td>1</td><td></td></tr>
     * <tr><td>qwerty</td><td>2</td><td></td></tr>
     * <tr><td>twelvekey</td><td>3</td><td></td></tr>
     * <tr><td>undefined</td><td>0</td><td></td></tr>
     * </table>
     */
    public static final int reqKeyboardType=0x01010228;
    /**
     * The navigation device preferred by an application.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>dpad</td><td>2</td><td></td></tr>
     * <tr><td>nonav</td><td>1</td><td></td></tr>
     * <tr><td>trackball</td><td>3</td><td></td></tr>
     * <tr><td>undefined</td><td>0</td><td></td></tr>
     * <tr><td>wheel</td><td>4</td><td></td></tr>
     * </table>
     */
    public static final int reqNavigation=0x0101022a;
    /**
     * The touch screen type used by an application.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>finger</td><td>3</td><td></td></tr>
     * <tr><td>notouch</td><td>1</td><td></td></tr>
     * <tr><td>stylus</td><td>2</td><td></td></tr>
     * <tr><td>undefined</td><td>0</td><td></td></tr>
     * </table>
     */
    public static final int reqTouchScreen=0x01010227;
    /**
     * @hide
     * @hide Request exemption from the foreground service restrictions introduced in S
     * (https://developer.android.com/about/versions/12/foreground-services)
     * Note the framework <b>ignores</b> this attribute at this time. Once apps target S or above,
     * there's no way to be exempted (without using a privileged permission).
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    @android.annotation.TestApi
    public static final int requestForegroundServiceExemption=0x0101064a;
    /**
     * If {@code true} this app would like to run under the legacy storage
     * model. Note that this may not always be respected due to policy or
     * backwards compatibility reasons.
     * <p>Apps not requesting legacy storage can continue to discover and
     * read media belonging to other apps via {@code MediaStore}.
     * <p>
     * The default value is:
     * - {@code false} for apps with targetSdkVersion >= 29 (Q).
     * - {@code true} for apps with targetSdkVersion < 29.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int requestLegacyExternalStorage=0x01010603;
    /**
     * If {@code true} this app would like raw external storage access.
     * <p> This flag can only be used by apps holding
     * <ul>
     * <li>{@link android.Manifest.permission#MANAGE_EXTERNAL_STORAGE} permission or
     * <li>{@link android.app.role}#SYSTEM_GALLERY role.
     * </ul>
     * <p> When the flag is set, all file path access on external storage will bypass database
     * operations that update MediaStore collection. Raw external storage access as a side effect
     * can improve performance of bulk file path operations but can cause unexpected behavior in
     * apps due to inconsistencies in MediaStore collection and lower file system.
     * When the flag is set, app should scan the file after file path operations to ensure
     * consistency of MediaStore collection.
     * <p> The flag can be set to false if the app doesn't do many bulk file path operations or if
     * app prefers the system to ensure the consistency of the MediaStore collection for file path
     * operations without scanning the file.
     * <p> The default value is {@code true} if
     * <ul>
     * <li>app has {@link android.Manifest.permission#MANAGE_EXTERNAL_STORAGE} permission and
     * targets targetSDK<=30.
     * <li>app has {@link android.app.role}#SYSTEM_GALLERY role and targetSDK<=29
     * </ul>
     * {@code false} otherwise.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int requestRawExternalStorageAccess=0x01010645;
    /**
     * Whether the device must be screen on before routing data to this service.
     * The default is true.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int requireDeviceScreenOn=0x0101061d;
    /**
     * Whether the device must be unlocked before routing data to this service.
     * The default is false.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int requireDeviceUnlock=0x010103ec;
    /**
     * Specify whether this feature is required for the application.
     * The default is true, meaning the application requires the
     * feature, and does not want to be installed on devices that
     * don't support it.  If you set this to false, then this will
     * not impose a restriction on where the application can be
     * installed.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int required=0x0101028e;
    /**
     * Declare that this application requires an account of a certain
     * type. The default value is null and indicates that the application can work without
     * any accounts. The type should correspond to the account authenticator type, such as
     * "com.google".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int requiredAccountType=0x010103d6;
    /**
     * Optional: the system must support this feature for the permission to be
     * requested.  If it doesn't support the feature, it will be as if the manifest didn't
     * request it at all.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int requiredFeature=0x01010554;
    /**
     * Flag to specify if this application needs to be present for all users. Only pre-installed
     * applications can request this feature. Default value is false.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int requiredForAllUsers=0x010103d0;
    /**
     * Optional: the system must NOT support this feature for the permission to be
     * requested.  If it does support the feature, it will be as if the manifest didn't
     * request it at all.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int requiredNotFeature=0x01010555;
    /**
     * @hide
     * @hide This shouldn't be public.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    @android.annotation.SystemApi
    public static final int requiredSystemPropertyName=0x01010565;
    /**
     * @hide
     * @hide This shouldn't be public.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    @android.annotation.SystemApi
    public static final int requiredSystemPropertyValue=0x01010566;
    /**
     * Defines which edges should be faded on scrolling.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>horizontal</td><td>1000</td><td>Fades horizontal edges only.</td></tr>
     * <tr><td>none</td><td>0</td><td>No edge is faded.</td></tr>
     * <tr><td>vertical</td><td>2000</td><td>Fades vertical edges only.</td></tr>
     * </table>
     */
    public static final int requiresFadingEdge=0x010103a5;
    /**
     * Starting with {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2},
     * this is the new way to specify the minimum screen size an application is
     * compatible with.  This attribute provides the required minimum
     * "smallest screen width" (as per the -swNNNdp resource configuration)
     * that the application can run on.  For example, a typical phone
     * screen is 320, a 7" tablet 600, and a 10" tablet 720.  If the
     * smallest screen width of the device is below the value supplied here,
     * then the application is considered incompatible with that device.
     * If not supplied, then any old smallScreens, normalScreens, largeScreens,
     * or xlargeScreens attributes will be used instead.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int requiresSmallestWidthDp=0x01010364;
    /**
     * Resize the view by adjusting the clipBounds rather than changing the
     * dimensions of the view itself. The default value is false.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int resizeClip=0x010104cf;
    /**
     * Optional parameter which indicates if and how this widget can be
     * resized. Supports combined values using | operator.
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>horizontal</td><td>1</td><td></td></tr>
     * <tr><td>none</td><td>0</td><td></td></tr>
     * <tr><td>vertical</td><td>2</td><td></td></tr>
     * </table>
     */
    public static final int resizeMode=0x01010363;
    /**
     * Indicates whether the application can resize itself to newer
     * screen sizes.  This is mostly used to distinguish between old
     * applications that may not be compatible with newly introduced
     * screen sizes and newer applications that should be; it will be
     * set for you automatically based on whether you are targeting
     * a newer platform that supports more screens.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int resizeable=0x0101028d;
    /**
     * Hint to platform that the activity works well in multi-window mode. Intended for a
     * multi-window device where there can be multiple activities of various sizes on the screen
     * at the same time.
     * <p>The default value is <code>false</code> for applications with
     * <code>targetSdkVersion</code> lesser than {@link android.os.Build.VERSION_CODES#N} and
     * <code>true</code> otherwise.
     * <p>Setting this flag to <code>false</code> lets the system know that the app may not be
     * tested or optimized for multi-window environment. The system may still put such activity in
     * multi-window with compatibility mode applied. It also does not guarantee that there will be
     * no other apps in multi-window visible on screen (e.g. picture-in-picture) or on other
     * displays. Therefore, this flag cannot be used to assure an exclusive resource access.
     * <p>NOTE: A task's root activity value is applied to all additional activities launched in
     * the task. That is if the root activity of a task is resizeable then the system will treat
     * all other activities in the task as resizeable and will not if the root activity isn't
     * resizeable.
     * <p>NOTE: The value of {@link android.R.attr#screenOrientation} is ignored for
     * resizeable activities when in multi-window mode before Android 12.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int resizeableActivity=0x010104f6;
    /**
     * Resource identifier to assign to this piece of named meta-data.
     * The resource identifier can later be retrieved from the meta data
     * Bundle through {@link android.os.Bundle#getInt Bundle.getInt}.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int resource=0x01010025;
    /**
     * The xml file that defines the target id to overlay value mappings.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int resourcesMap=0x01010609;
    /**
     * Indicate that the application is prepared to attempt a restore of any
     * backed-up dataset, even if the backup is apparently from a newer version
     * of the application than is currently installed on the device.  Setting
     * this attribute to <code>true</code> will permit the Backup Manager to
     * attempt restore even when a version mismatch suggests that the data are
     * incompatible.  <em>Use with caution!</em>
     * <p>The default value of this attribute is <code>false</code>.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int restoreAnyVersion=0x010102ba;
    /**
     * @deprecated This attribute is not used by the Android operating system.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    @Deprecated
    public static final int restoreNeedsApplication=0x0101029d;
    /**
     * Declare that this application requires access to restricted accounts of a certain
     * type. The default value is null and restricted accounts won\'t be visible to this
     * application. The type should correspond to the account authenticator type, such as
     * "com.google".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int restrictedAccountType=0x010103d5;
    /**
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bool</td><td>1</td><td></td></tr>
     * <tr><td>bundle</td><td>7</td><td></td></tr>
     * <tr><td>bundle_array</td><td>8</td><td></td></tr>
     * <tr><td>choice</td><td>2</td><td></td></tr>
     * <tr><td>hidden</td><td>0</td><td></td></tr>
     * <tr><td>integer</td><td>5</td><td></td></tr>
     * <tr><td>multi-select</td><td>4</td><td></td></tr>
     * <tr><td>string</td><td>6</td><td></td></tr>
     * </table>
     */
    public static final int restrictionType=0x01010493;
    /**
     * Indicate that it is okay for this activity be resumed while the previous
     * activity is in the process of pausing, without waiting for the previous pause
     * to complete.  Use this with caution: your activity can not acquire any exclusive
     * resources (such as opening the camera or recording audio) when it launches, or it
     * may conflict with the previous activity and fail.
     * <p>The default value of this attribute is <code>false</code>.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int resumeWhilePausing=0x010104b2;
    /**
     * Whether this transition is reversible.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int reversible=0x0101044b;
    /**
     * Internal revision code.  This number is the number used to determine
     * whether one APK is more recent than another: it has no other meaning
     * than that higher numbers are more recent.  This value is only meaningful
     * when the two {@link android.R.attr#versionCode} values are already
     * identical.  When an app is delivered as multiple split APKs, each
     * APK may have a different revisionCode value.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int revisionCode=0x010104d5;
    /**
     * Amount of right padding inside the gradient shape.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int right=0x010101af;
    /**
     * Default style for RingtonePreference.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int ringtonePreferenceStyle=0x01010093;
    /**
     * Which ringtone type(s) to show in the picker.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>alarm</td><td>4</td><td>Alarm sounds.</td></tr>
     * <tr><td>all</td><td>7</td><td>All available ringtone sounds.</td></tr>
     * <tr><td>notification</td><td>2</td><td>Notification sounds.</td></tr>
     * <tr><td>ringtone</td><td>1</td><td>Ringtones.</td></tr>
     * </table>
     */
    public static final int ringtoneType=0x010101f9;
    /**
     * Declare the policy to deal with user data when rollback is committed.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>restore</td><td>0</td><td>User data will be restored during rollback.</td></tr>
     * <tr><td>retain</td><td>2</td><td>User data will remain unchanged during rollback.</td></tr>
     * <tr><td>wipe</td><td>1</td><td>User data will be wiped out during rollback.</td></tr>
     * </table>
     */
    public static final int rollbackDataPolicy=0x01010617;
    /**
     * rotation of the view, in degrees.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int rotation=0x01010326;
    /**
     * Flag allowing the activity to specify which screen rotation animation
     * it desires.  Valid values are "rotate", "crossfade", and "jumpcut"
     * as described in {@link android.view.WindowManager.LayoutParams#rotationAnimation}.
     * Specifying your Rotation animation in the WindowManager.LayoutParams
     * may be racy with app startup and updattransitions occuring during application startup and thusly
     * the manifest attribute is preferred.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>crossfade</td><td>1</td><td></td></tr>
     * <tr><td>jumpcut</td><td>2</td><td></td></tr>
     * <tr><td>rotate</td><td>0</td><td></td></tr>
     * <tr><td>seamless</td><td>3</td><td></td></tr>
     * </table>
     */
    public static final int rotationAnimation=0x0101053a;
    /**
     * rotation of the view around the x axis, in degrees.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int rotationX=0x01010327;
    /**
     * rotation of the view around the y axis, in degrees.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int rotationY=0x01010328;
    /**
     * A Drawable resource providing a graphical representation of its
     * associated item.  Use with the
     * application tag (to supply a default round icon for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific round icon for that component).  It may also be
     * used with the intent-filter tag to supply a round icon to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given round icon will be used to display to the user a graphical
     * representation of its associated component; for example, as the round icon
     * for main activity that is displayed in the launcher.  This must be
     * a reference to a Drawable resource containing the image definition.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int roundIcon=0x0101052c;
    /**
     * The maximum number of rows to create when automatically positioning children.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int rowCount=0x01010375;
    /**
     * Fraction of the animation duration used to delay the beginning of
     * the animation of each row.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int rowDelay=0x010101d0;
    /**
     * Row edge flags.
     * {@deprecated Copy this definition into your own application project.}
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>8</td><td>Row is anchored to the bottom of the keyboard.
     * {@deprecated Copy this definition into your own application project.}</td></tr>
     * <tr><td>top</td><td>4</td><td>Row is anchored to the top of the keyboard.
     * {@deprecated Copy this definition into your own application project.}</td></tr>
     * </table>
     */
    @Deprecated
    public static final int rowEdgeFlags=0x01010241;
    /**
     * Defines the height of each row.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int rowHeight=0x01010132;
    /**
     * When set to true, forces row boundaries to appear in the same order
     * as row indices.
     * The default is true.
     * See {@link android.widget.GridLayout#setRowOrderPreserved(boolean)}.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int rowOrderPreserved=0x01010376;
    /**
     * If false, no state will be saved for this view when it is being
     * frozen. The default is true, allowing the view to be saved
     * (however it also must have an ID assigned to it for its
     * state to be saved).  Setting this to false only disables the
     * state for this view, not for its children which may still
     * be saved.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int saveEnabled=0x010100e7;
    /**
     * Specifies where the drawable is positioned after scaling. The default value is
     * left.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
     * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
     * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
     * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
     * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the horizontal gravity: a left gravity will clip the right
     * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
     * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the vertical gravity: a top gravity will clip the bottom
     * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
     * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
     * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
     * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
     * </table>
     */
    public static final int scaleGravity=0x010101fe;
    /**
     * Scale height, expressed as a percentage of the drawable's bound. The value's
     * format is XX%. For instance: 100%, 12.5%, etc.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int scaleHeight=0x010101fd;
    /**
     * Controls how the image should be resized or moved to match the size
     * of this ImageView.  See {@link android.widget.ImageView.ScaleType}
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>center</td><td>5</td><td>Center the image in the view, but perform no scaling.</td></tr>
     * <tr><td>centerCrop</td><td>6</td><td>Scale the image uniformly (maintain the image's aspect ratio) so both dimensions
     * (width and height) of the image will be equal to or larger than the corresponding
     * dimension of the view (minus padding). The image is then centered in the view.</td></tr>
     * <tr><td>centerInside</td><td>7</td><td>Scale the image uniformly (maintain the image's aspect ratio) so that both
     * dimensions (width and height) of the image will be equal to or less than the
     * corresponding dimension of the view (minus padding). The image is then centered in
     * the view.</td></tr>
     * <tr><td>fitCenter</td><td>3</td><td>Scale the image using {@link android.graphics.Matrix.ScaleToFit#CENTER}.</td></tr>
     * <tr><td>fitEnd</td><td>4</td><td>Scale the image using {@link android.graphics.Matrix.ScaleToFit#END}.</td></tr>
     * <tr><td>fitStart</td><td>2</td><td>Scale the image using {@link android.graphics.Matrix.ScaleToFit#START}.</td></tr>
     * <tr><td>fitXY</td><td>1</td><td>Scale the image using {@link android.graphics.Matrix.ScaleToFit#FILL}.</td></tr>
     * <tr><td>matrix</td><td>0</td><td>Scale using the image matrix when drawing. See
     * {@link android.widget.ImageView#setImageMatrix(Matrix)}.</td></tr>
     * </table>
     */
    public static final int scaleType=0x0101011d;
    /**
     * Scale width, expressed as a percentage of the drawable's bound. The value's
     * format is XX%. For instance: 100%, 12.5%, etc.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int scaleWidth=0x010101fc;
    /**
     * scale of the view in the x direction.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int scaleX=0x01010324;
    /**
     * scale of the view in the y direction.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int scaleY=0x01010325;
    /**
     * Specify a URI scheme that is handled, as per
     * {@link android.content.IntentFilter#addDataScheme
     * IntentFilter.addDataScheme()}.
     * <p><em>Note: scheme matching in the Android framework is
     * case-sensitive, unlike the formal RFC.  As a result,
     * schemes here should always use lower case letters.</em></p>
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int scheme=0x01010027;
    /**
     * Specifies a compatible screen density, as per the device
     * configuration screen density bins.
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>hdpi</td><td>f0</td><td>A high density screen, approximately 240dpi.</td></tr>
     * <tr><td>ldpi</td><td>78</td><td>A low density screen, approximately 120dpi.</td></tr>
     * <tr><td>mdpi</td><td>a0</td><td>A medium density screen, approximately 160dpi.</td></tr>
     * <tr><td>xhdpi</td><td>140</td><td>An extra high density screen, approximately 320dpi.</td></tr>
     * <tr><td>xxhdpi</td><td>1e0</td><td>An extra extra high density screen, approximately 480dpi.</td></tr>
     * <tr><td>xxxhdpi</td><td>280</td><td>An extra extra extra high density screen, approximately 640dpi.</td></tr>
     * </table>
     */
    public static final int screenDensity=0x010102cb;
    /**
     * Specify the orientation an activity should be run in.  If not
     * specified, it will run in the current preferred orientation
     * of the screen.
     * <p>This attribute is supported by the <a
     * href="{@docRoot}guide/topics/manifest/activity-element.html">{@code <activity>}</a>
     * element.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>behind</td><td>3</td><td>Keep the screen in the same orientation as whatever is behind
     * this activity.
     * Corresponds to
     * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_BEHIND}.</td></tr>
     * <tr><td>fullSensor</td><td>a</td><td>Orientation is determined by a physical orientation sensor:
     * the display will rotate based on how the user moves the device.
     * This allows any of the 4 possible rotations, regardless of what
     * the device will normally do (for example some devices won't
     * normally use 180 degree rotation).
     * Corresponds to
     * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_FULL_SENSOR}.</td></tr>
     * <tr><td>fullUser</td><td>d</td><td>Respect the user's sensor-based rotation preference, but if
     * sensor-based rotation is enabled then allow the screen to rotate
     * in all 4 possible directions regardless of what
     * the device will normally do (for example some devices won't
     * normally use 180 degree rotation).
     * Corresponds to
     * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_FULL_USER}.</td></tr>
     * <tr><td>landscape</td><td>0</td><td>Would like to have the screen in a landscape orientation: that
     * is, with the display wider than it is tall, ignoring sensor data.
     * Corresponds to
     * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_LANDSCAPE}.</td></tr>
     * <tr><td>locked</td><td>e</td><td>Screen is locked to its current rotation, whatever that is.
     * Corresponds to
     * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_LOCKED}.</td></tr>
     * <tr><td>nosensor</td><td>5</td><td>Always ignore orientation determined by orientation sensor:
     * the display will not rotate when the user moves the device.
     * Corresponds to
     * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_NOSENSOR}.</td></tr>
     * <tr><td>portrait</td><td>1</td><td>Would like to have the screen in a portrait orientation: that
     * is, with the display taller than it is wide, ignoring sensor data.
     * Corresponds to
     * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_PORTRAIT}.</td></tr>
     * <tr><td>reverseLandscape</td><td>8</td><td>Would like to have the screen in landscape orientation, turned in
     * the opposite direction from normal landscape.
     * Corresponds to
     * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_REVERSE_LANDSCAPE}.</td></tr>
     * <tr><td>reversePortrait</td><td>9</td><td>Would like to have the screen in portrait orientation, turned in
     * the opposite direction from normal portrait.
     * Corresponds to
     * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_REVERSE_PORTRAIT}.</td></tr>
     * <tr><td>sensor</td><td>4</td><td>Orientation is determined by a physical orientation sensor:
     * the display will rotate based on how the user moves the device.
     * Ignores user's setting to turn off sensor-based rotation.
     * Corresponds to
     * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_SENSOR}.</td></tr>
     * <tr><td>sensorLandscape</td><td>6</td><td>Would like to have the screen in landscape orientation, but can
     * use the sensor to change which direction the screen is facing.
     * Corresponds to
     * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_SENSOR_LANDSCAPE}.</td></tr>
     * <tr><td>sensorPortrait</td><td>7</td><td>Would like to have the screen in portrait orientation, but can
     * use the sensor to change which direction the screen is facing.
     * Corresponds to
     * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_SENSOR_PORTRAIT}.</td></tr>
     * <tr><td>unspecified</td><td>ffffffff</td><td>No preference specified: let the system decide the best
     * orientation.  This will either be the orientation selected
     * by the activity below, or the user's preferred orientation
     * if this activity is the bottom of a task. If the user
     * explicitly turned off sensor based orientation through settings
     * sensor based device rotation will be ignored. If not by default
     * sensor based orientation will be taken into account and the
     * orientation will changed based on how the user rotates the device.
     * Corresponds to
     * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_UNSPECIFIED}.</td></tr>
     * <tr><td>user</td><td>2</td><td>Use the user's current preferred orientation of the handset.
     * Corresponds to
     * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_USER}.</td></tr>
     * <tr><td>userLandscape</td><td>b</td><td>Would like to have the screen in landscape orientation, but if
     * the user has enabled sensor-based rotation then we can use the
     * sensor to change which direction the screen is facing.
     * Corresponds to
     * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_USER_LANDSCAPE}.</td></tr>
     * <tr><td>userPortrait</td><td>c</td><td>Would like to have the screen in portrait orientation, but if
     * the user has enabled sensor-based rotation then we can use the
     * sensor to change which direction the screen is facing.
     * Corresponds to
     * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_USER_PORTRAIT}.</td></tr>
     * </table>
     */
    public static final int screenOrientation=0x0101001e;
    /**
     * Whether this view should be treated as a focusable unit by screen reader accessibility
     * tools. See {@link android.view.View#setScreenReaderFocusable(boolean)}. The default
     * value, {@code false}, leaves the screen reader to consider other signals, such as
     * focusability or the presence of text, to decide what it focus.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int screenReaderFocusable=0x01010574;
    /**
     * Specifies a compatible screen size, as per the device
     * configuration screen size bins.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>large</td><td>190</td><td>A large screen configuration, at least 400x530dp.</td></tr>
     * <tr><td>normal</td><td>12c</td><td>A normal screen configuration, at least 320x480dp.</td></tr>
     * <tr><td>small</td><td>c8</td><td>A small screen configuration, at least 240x320dp.</td></tr>
     * <tr><td>xlarge</td><td>1f4</td><td>An extra large screen configuration, at least 600x800dp.</td></tr>
     * </table>
     */
    public static final int screenSize=0x010102ca;
    /**
     * Whether the text is allowed to be wider than the view (and
     * therefore can be scrolled horizontally).
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int scrollHorizontally=0x0101015b;
    /**
     * Defines which scroll indicators should be displayed when the view
     * can be scrolled. Multiple values may be combined using logical OR,
     * for example "top|bottom".
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>2</td><td>Displays bottom scroll indicator when vew can be scrolled down.</td></tr>
     * <tr><td>end</td><td>20</td><td>Displays right scroll indicator when vew can be scrolled in the
     * end direction.</td></tr>
     * <tr><td>left</td><td>4</td><td>Displays left scroll indicator when vew can be scrolled left.</td></tr>
     * <tr><td>none</td><td>0</td><td>No scroll indicators are displayed.</td></tr>
     * <tr><td>right</td><td>8</td><td>Displays right scroll indicator when vew can be scrolled right.</td></tr>
     * <tr><td>start</td><td>10</td><td>Displays right scroll indicator when vew can be scrolled in the
     * start direction.</td></tr>
     * <tr><td>top</td><td>1</td><td>Displays top scroll indicator when view can be scrolled up.</td></tr>
     * </table>
     */
    public static final int scrollIndicators=0x010104e6;
    /**
     * Default ScrollView style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int scrollViewStyle=0x01010080;
    /**
     * The initial horizontal scroll offset, in pixels.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int scrollX=0x010100d2;
    /**
     * The initial vertical scroll offset, in pixels.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int scrollY=0x010100d3;
    /**
     * Defines whether the horizontal scrollbar track should always be drawn.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int scrollbarAlwaysDrawHorizontalTrack=0x01010068;
    /**
     * Defines whether the vertical scrollbar track should always be drawn.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int scrollbarAlwaysDrawVerticalTrack=0x01010069;
    /**
     * Defines the delay in milliseconds that a scrollbar waits before fade out.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int scrollbarDefaultDelayBeforeFade=0x010102a9;
    /**
     * Defines the delay in milliseconds that a scrollbar takes to fade out.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int scrollbarFadeDuration=0x010102a8;
    /**
     * Sets the width of vertical scrollbars and height of horizontal scrollbars.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int scrollbarSize=0x01010063;
    /**
     * Controls the scrollbar style and position. The scrollbars can be overlaid or
     * inset. When inset, they add to the padding of the view. And the
     * scrollbars can be drawn inside the padding area or on the edge of
     * the view. For example, if a view has a background drawable and you
     * want to draw the scrollbars inside the padding specified by the
     * drawable, you can use insideOverlay or insideInset. If you want them
     * to appear at the edge of the view, ignoring the padding, then you can
     * use outsideOverlay or outsideInset.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>insideInset</td><td>1000000</td><td>Inside the padding and inset.</td></tr>
     * <tr><td>insideOverlay</td><td>0</td><td>Inside the padding and overlaid.</td></tr>
     * <tr><td>outsideInset</td><td>3000000</td><td>Edge of the view and inset.</td></tr>
     * <tr><td>outsideOverlay</td><td>2000000</td><td>Edge of the view and overlaid.</td></tr>
     * </table>
     */
    public static final int scrollbarStyle=0x0101007f;
    /**
     * Defines the horizontal scrollbar thumb drawable.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int scrollbarThumbHorizontal=0x01010064;
    /**
     * Defines the vertical scrollbar thumb drawable.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int scrollbarThumbVertical=0x01010065;
    /**
     * Defines the horizontal scrollbar track drawable.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int scrollbarTrackHorizontal=0x01010066;
    /**
     * Defines the vertical scrollbar track drawable.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int scrollbarTrackVertical=0x01010067;
    /**
     * Defines which scrollbars should be displayed on scrolling or not.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>horizontal</td><td>100</td><td>Displays horizontal scrollbar only.</td></tr>
     * <tr><td>none</td><td>0</td><td>No scrollbar is displayed.</td></tr>
     * <tr><td>vertical</td><td>200</td><td>Displays vertical scrollbar only.</td></tr>
     * </table>
     */
    public static final int scrollbars=0x010100de;
    /**
     * When set to true, the list uses a drawing cache during scrolling.
     * This makes the rendering faster but uses more memory. The default
     * value is true.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int scrollingCache=0x010100fe;
    /**
     * @hide
     * The extension SDK version that this tag refers to.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    @android.annotation.SystemApi
    public static final int sdkVersion=0x01010610;
    /**
     * If supplied, this string will be displayed as the text of the "Search" button.
     * <i>Optional attribute.</i>
     * {@deprecated This will create a non-standard UI appearance, because the search bar UI is
     * changing to use only icons for its buttons.}
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    @Deprecated
    public static final int searchButtonText=0x01010205;
    /**
     * Search icon displayed as a text field hint.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int searchHintIcon=0x010104d4;
    /**
     * Search icon.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int searchIcon=0x01010483;
    /**
     * The actual keyphrase/hint text, or empty if not keyphrase dependent. @hide
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int searchKeyphrase=0x0101045f;
    /**
     * A globally unique ID for the keyphrase. @hide
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int searchKeyphraseId=0x0101045e;
    /**
     * Flags for supported recognition modes. @hide
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>none</td><td>0</td><td></td></tr>
     * <tr><td>userIdentification</td><td>2</td><td></td></tr>
     * <tr><td>voiceTrigger</td><td>1</td><td></td></tr>
     * </table>
     */
    public static final int searchKeyphraseRecognitionFlags=0x010104a6;
    /**
     * A comma separated list of BCP-47 language tag for locales that are supported
     * for this keyphrase, or empty if not locale dependent. @hide
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int searchKeyphraseSupportedLocales=0x01010460;
    /**
     * Additional features are controlled by mode bits in this field.  Omitting
     * this field, or setting to zero, provides default behavior.  <i>Optional attribute.</i>
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>queryRewriteFromData</td><td>10</td><td>If set, this flag causes the suggestion column SUGGEST_COLUMN_INTENT_DATA to
     * be considered as the text for suggestion query rewriting.  This should only
     * be used when the values in SUGGEST_COLUMN_INTENT_DATA are suitable for user
     * inspection and editing - typically, HTTP/HTTPS Uri's.</td></tr>
     * <tr><td>queryRewriteFromText</td><td>20</td><td>If set, this flag causes the suggestion column SUGGEST_COLUMN_TEXT_1 to
     * be considered as the text for suggestion query rewriting.  This should be used
     * for suggestions in which no query text is provided and the SUGGEST_COLUMN_INTENT_DATA
     * values are not suitable for user inspection and editing.</td></tr>
     * <tr><td>showSearchIconAsBadge</td><td>8</td><td><strong>This is deprecated.</strong><br/>The default
     * application icon is now always used, so this option is
     * obsolete.</td></tr>
     * <tr><td>showSearchLabelAsBadge</td><td>4</td><td>If set, this flag enables the display of the search target (label) within the
     * search bar.  If neither bad mode is selected, no badge will be shown.</td></tr>
     * </table>
     */
    public static final int searchMode=0x010101d5;
    /**
     * If provided, this string will be used to describe the searchable item in the
     * searchable items settings within system search settings. <i>Optional
     * attribute.</i>
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int searchSettingsDescription=0x0101028a;
    /**
     * If provided, this is the trigger indicating that the searchable activity
     * provides suggestions as well.  The value must be a fully-qualified content provider
     * authority (for example, "com.example.android.apis.SuggestionProvider") and should match
     * the "android:authorities" tag in your content provider's manifest entry.  <i>Optional
     * attribute.</i>
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int searchSuggestAuthority=0x010101d6;
    /**
     * If provided, and not overridden by an action in the selected suggestion, this
     * string will be placed in the action field of the {@link android.content.Intent Intent}
     * when the user clicks a suggestion.  <i>Optional attribute.</i>
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int searchSuggestIntentAction=0x010101d9;
    /**
     * If provided, and not overridden by an action in the selected suggestion, this
     * string will be placed in the data field of the {@link android.content.Intent Intent}
     * when the user clicks a suggestion.  <i>Optional attribute.</i>
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int searchSuggestIntentData=0x010101da;
    /**
     * If provided, this will be inserted in the suggestions query Uri, after the authority
     * you have provide but before the standard suggestions path. <i>Optional attribute.</i>
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int searchSuggestPath=0x010101d7;
    /**
     * If provided, suggestion queries will be passed into your query function
     * as the <i>selection</i> parameter.  Typically this will be a WHERE clause for your
     * database, and will contain a single question mark, which represents the actual query
     * string that has been typed by the user.  If not provided, then the user query text
     * will be appended to the query Uri (after an additional "/".)  <i>Optional
     * attribute.</i>
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int searchSuggestSelection=0x010101d8;
    /**
     * If provided, this is the minimum number of characters needed to trigger
     * search suggestions. The default value is 0. <i>Optional attribute.</i>
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int searchSuggestThreshold=0x0101026d;
    /**
     * Style for the search query widget.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int searchViewStyle=0x01010480;
    /**
     * The alpha applied to the foreground color to create the secondary text color.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int secondaryContentAlpha=0x01010553;
    /**
     * Defines the secondary progress value, between 0 and max. This progress is drawn between
     * the primary progress and the background.  It can be ideal for media scenarios such as
     * showing the buffering progress while the default progress shows the play progress.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int secondaryProgress=0x01010138;
    /**
     * Tint to apply to the secondary progress indicator.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int secondaryProgressTint=0x01010467;
    /**
     * Blending mode used to apply the secondary progress indicator tint.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     */
    public static final int secondaryProgressTintMode=0x01010468;
    /**
     * Secure Element which the AIDs should be routed to
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int secureElementName=0x01010602;
    /**
     * Default SeekBar style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int seekBarStyle=0x0101007b;
    /**
     * Style for segmented buttons - a container that houses several buttons
     * with the appearance of a singel button broken into segments.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int segmentedButtonStyle=0x01010330;
    /**
     * If the text is selectable, select it all when the view takes
     * focus.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int selectAllOnFocus=0x0101015e;
    /**
     * Whether the Preference is selectable.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int selectable=0x010101e6;
    /**
     * Flag indicating whether a recognition service can be selected as default. The default
     * value of this flag is true.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int selectableAsDefault=0x01010640;
    /**
     * Background drawable for bordered standalone items that need focus/pressed states.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int selectableItemBackground=0x0101030e;
    /**
     * Background drawable for borderless standalone items that need focus/pressed states.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int selectableItemBackgroundBorderless=0x0101045c;
    /**
     * @deprecated Drawable for the vertical bar shown at the beginning and at the end of the selected date.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    @Deprecated
    public static final int selectedDateVerticalBar=0x01010347;
    /**
     * @deprecated The background color for the selected week.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    @Deprecated
    public static final int selectedWeekBackgroundColor=0x01010342;
    /**
     * The height of the selection divider.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int selectionDividerHeight=0x01010598;
    /**
     * The service that hosts active voice interaction sessions.  This is required.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int sessionService=0x0101043d;
    /**
     * Fully qualified class name of an activity that allows the user to modify
     * the settings for this service.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int settingsActivity=0x01010225;
    /**
     * Uri that specifies a settings Slice for this wallpaper.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int settingsSliceUri=0x01010593;
    /**
     * Component name of an activity that allows the user to set up this service.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int setupActivity=0x010103f6;
    /**
     * Place a blurred shadow of text underneath the text, drawn with the
     * specified color. The text shadow produced does not interact with
     * properties on View that are responsible for real time shadows,
     * {@link android.R.styleable#View_elevation elevation} and
     * {@link android.R.styleable#View_translationZ translationZ}.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int shadowColor=0x01010161;
    /**
     * Horizontal offset of the text shadow.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int shadowDx=0x01010162;
    /**
     * Vertical offset of the text shadow.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int shadowDy=0x01010163;
    /**
     * Blur radius of the text shadow.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int shadowRadius=0x01010164;
    /**
     * Indicates what shape to fill with a gradient.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>line</td><td>2</td><td>Line shape.</td></tr>
     * <tr><td>oval</td><td>1</td><td>Oval shape.</td></tr>
     * <tr><td>rectangle</td><td>0</td><td>Rectangle shape, with optional rounder corners.</td></tr>
     * <tr><td>ring</td><td>3</td><td>Ring shape.</td></tr>
     * </table>
     */
    public static final int shape=0x0101019a;
    /**
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int shareInterpolator=0x010101bb;
    /**
     * Specify the name of a user ID that will be shared between multiple
     * packages.  By default, each package gets its own unique user-id.
     * By setting this value on two or more packages, each of these packages
     * will be given a single shared user ID, so they can for example run
     * in the same process.  Note that for them to actually get the same
     * user ID, they must also be signed with the same signature.
     * @deprecated Shared user IDs cause non-deterministic behavior within the
     * package manager. As such, its use is strongly discouraged and may be
     * removed in a future version of Android. Instead, apps should use proper
     * communication mechanisms, such as services and content providers,
     * to facilitate interoperability between shared components. Note that
     * existing apps cannot remove this value, as migrating off a
     * shared user ID is not supported.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    @Deprecated
    public static final int sharedUserId=0x0101000b;
    /**
     * Specify a label for the shared user UID of this package.  This is
     * only used if you have also used android:sharedUserId.  This must
     * be a reference to a string resource; it can not be an explicit
     * string.
     * @deprecated There is no replacement for this attribute.
     * {@link android.R.attr#sharedUserId} has been deprecated making
     * this attribute unnecessary.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    @Deprecated
    public static final int sharedUserLabel=0x01010261;
    /**
     * Flag indicating whether the application can be profiled by the shell user,
     * even when running on a device that is running in user mode.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int shell=0x01010594;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int shortcutDisabledMessage=0x0101052b;
    /**
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int shortcutId=0x01010528;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int shortcutLongLabel=0x0101052a;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int shortcutShortLabel=0x01010529;
    /**
     * Whether the view of this Preference should be disabled when
     * this Preference is disabled.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int shouldDisableView=0x010101ee;
    /**
     * Indicates that this wallpaper service should receive zoom transition updates when
     * changing the structural state of the device (e.g. when folding or unfolding
     * a foldable device). When this value is set to true
     * {@link android.service.wallpaper.WallpaperService.Engine} could receive zoom updates
     * before or after changing the device state. Wallpapers receive zoom updates using
     * {@link android.service.wallpaper.WallpaperService.Engine#onZoomChanged(float)} and
     * zoom rendering should be handled manually. Zoom updates are delivered only when
     * {@link android.service.wallpaper.WallpaperService.Engine} is created and not destroyed.
     * Default value is true.
     * Corresponds to
     * {@link android.app.WallpaperInfo#shouldUseDefaultUnfoldTransition()}
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int shouldUseDefaultUnfoldTransition=0x0101064c;
    /**
     * How this item should display in the Action Bar, if present.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>always</td><td>2</td><td>Always show this item in an actionbar, even if it would override
     * the system's limits of how much stuff to put there. This may make
     * your action bar look bad on some screens. In most cases you should
     * use "ifRoom" instead. Mutually exclusive with "ifRoom" and "never".</td></tr>
     * <tr><td>collapseActionView</td><td>8</td><td>This item's action view collapses to a normal menu
     * item. When expanded, the action view takes over a
     * larger segment of its container.</td></tr>
     * <tr><td>ifRoom</td><td>1</td><td>Show this item in an action bar if there is room for it as determined
     * by the system. Favor this option over "always" where possible.
     * Mutually exclusive with "never" and "always".</td></tr>
     * <tr><td>never</td><td>0</td><td>Never show this item in an action bar, show it in the overflow menu instead.
     * Mutually exclusive with "ifRoom" and "always".</td></tr>
     * <tr><td>withText</td><td>4</td><td>When this item is shown as an action in the action bar, show a text
     * label with it even if it has an icon representation.</td></tr>
     * </table>
     */
    public static final int showAsAction=0x010102d9;
    /**
     * Whether to show an item for a default sound.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int showDefault=0x010101fa;
    /**
     * Setting for which dividers to show.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>beginning</td><td>1</td><td></td></tr>
     * <tr><td>end</td><td>4</td><td></td></tr>
     * <tr><td>middle</td><td>2</td><td></td></tr>
     * <tr><td>none</td><td>0</td><td></td></tr>
     * </table>
     */
    public static final int showDividers=0x01010329;
    /**
     * Specify that an Activity should be shown even if the current/foreground user
     * is different from the user of the Activity. This will also force the
     * <code>android.view.LayoutParams.FLAG_SHOW_WHEN_LOCKED</code> flag
     * to be set for all windows of this activity
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int showForAllUsers=0x010104ef;
    /**
     * Specifies whether the IME wants to be shown in the Input Method picker. Defaults to
     * true. Set this to false if the IME is intended to be accessed programmatically.
     * <p>
     * Note: This functions as a hint to the system, which may choose to ignore this
     * preference in certain situations or in future releases.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int showInInputMethodPicker=0x01010648;
    /**
     * Whether to show any metadata when previewing the wallpaper. If this value is
     * set to true, any component that shows a preview of this live wallpaper should also show
     * accompanying information like the title, the description, the author and the context
     * description of this wallpaper so the user gets to know further information about this
     * wallpaper.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int showMetadataInPreview=0x0101052f;
    /**
     * Specify that an Activity should be shown over the lock screen and,
     * in a multiuser environment, across all users' windows.
     * @deprecated use {@link android.R.attr#showForAllUsers} instead.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    @Deprecated
    public static final int showOnLockScreen=0x010103c9;
    /**
     * Whether to show an item for 'Silent'.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int showSilent=0x010101fb;
    /**
     * Whether to draw on/off text.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int showText=0x010104ad;
    /**
     * @deprecated Whether do show week numbers.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    @Deprecated
    public static final int showWeekNumber=0x0101033e;
    /**
     * Specifies whether an {@link android.app.Activity} should be shown on top of the lock screen
     * whenever the lockscreen is up and the activity is resumed. Normally an activity will be
     * transitioned to the stopped state if it is started while the lockscreen is up, but with
     * this flag set the activity will remain in the resumed state visible on-top of the lock
     * screen.
     * <p>This should be used instead of {@link android.view.WindowManager.LayoutParams#FLAG_SHOW_WHEN_LOCKED}
     * flag set for Windows. When using the Window flag during activity startup, there may not be
     * time to add it before the system stops your activity for being behind the lock-screen.
     * This leads to a double life-cycle as it is then restarted.</p>
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int showWhenLocked=0x01010569;
    /**
     * @deprecated The number of weeks to be shown.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    @Deprecated
    public static final int shownWeekCount=0x01010341;
    /**
     * The zero-based index of the columns to shrink. The column indices
     * must be separated by a comma: 1, 2, 5. Illegal and duplicate
     * indices are ignored. You can shrink all columns by using the
     * value "*" instead. Note that a column can be marked stretchable
     * and shrinkable at the same time.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int shrinkColumns=0x0101014a;
    /**
     * Constrains the text to a single horizontally scrolling line
     * instead of letting it wrap onto multiple lines, and advances
     * focus instead of inserting a newline when you press the
     * enter key.
     * The default value is false (multi-line wrapped text mode) for non-editable text, but if
     * you specify any value for inputType, the default is true (single-line input field mode).
     * {@deprecated This attribute is deprecated. Use <code>maxLines</code> instead to change
     * the layout of a static text, and use the <code>textMultiLine</code> flag in the
     * inputType attribute instead for editable text views (if both singleLine and inputType
     * are supplied, the inputType flags will override the value of singleLine). }
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    @Deprecated
    public static final int singleLine=0x0101015d;
    /**
     * Whether to use single line for the preference title text. By default, preference title
     * will be constrained to one line, so the default value of this attribute is true.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int singleLineTitle=0x0101055c;
    /**
     * If set to true, a single instance of this component will run for
     * all users.  That instance will run as user 0, the default/primary
     * user.  When the app running is in processes for other users and interacts
     * with this component (by binding to a service for example) those processes will
     * always interact with the instance running for user 0.  Enabling
     * single user mode forces "exported" of the component to be false, to
     * help avoid introducing multi-user security bugs.  This feature is only
     * available to applications built in to the system image; you must hold the
     * permission INTERACT_ACROSS_USERS in order
     * to use this feature.  This flag can only be used with services,
     * receivers, and providers; it can not be used with activities.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int singleUser=0x010103bf;
    /**
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Slide to and from the bottom edge of the Scene.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Slide to and from the x-axis position at the end of the Scene root.</td></tr>
     * <tr><td>left</td><td>3</td><td>Slide to and from the left edge of the Scene.</td></tr>
     * <tr><td>right</td><td>5</td><td>Slide to and from the right edge of the Scene.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Slide to and from the x-axis position at the start of the Scene root.</td></tr>
     * <tr><td>top</td><td>30</td><td>Slide to and from the top edge of the Scene.</td></tr>
     * </table>
     */
    public static final int slideEdge=0x01010430;
    /**
     * Smaller icon of the authenticator.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int smallIcon=0x0101029e;
    /**
     * Indicates whether the application supports smaller screen form-factors.
     * A small screen is defined as one with a smaller aspect ratio than
     * the traditional HVGA screen; that is, for a portrait screen, less
     * tall than an HVGA screen.  In practice, this means a QVGA low
     * density or VGA high density screen.  An application that does
     * not support small screens <em>will not be available</em> for
     * small screen devices, since there is little the platform can do
     * to make such an application work on a smaller screen.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int smallScreens=0x01010284;
    /**
     * When set to true, the list will use a more refined calculation
     * method based on the pixels height of the items visible on screen. This
     * property is set to true by default but should be set to false if your adapter
     * will display items of varying heights. When this property is set to true and
     * your adapter displays items of varying heights, the scrollbar thumb will
     * change size as the user scrolls through the list. When set to false, the list
     * will use only the number of items in the adapter and the number of items visible
     * on screen to determine the scrollbar's properties.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int smoothScrollbar=0x01010231;
    /**
     * @hide Color for the solid color background if such for optimized rendering.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int solidColor=0x0101034a;
    /**
     * Boolean that controls whether a view should have sound effects
     * enabled for events such as clicking and touching.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int soundEffectsEnabled=0x01010215;
    /**
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int spacing=0x01010113;
    /**
     * Default style for spinner drop down items.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int spinnerDropDownItemStyle=0x01010087;
    /**
     * Default spinner item style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int spinnerItemStyle=0x01010089;
    /**
     * Display mode for spinner options.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>dialog</td><td>0</td><td>Spinner options will be presented to the user as a dialog window.</td></tr>
     * <tr><td>dropdown</td><td>1</td><td>Spinner options will be presented to the user as an inline dropdown
     * anchored to the spinner widget itself.</td></tr>
     * </table>
     */
    public static final int spinnerMode=0x010102f1;
    /**
     * Default Spinner style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int spinnerStyle=0x01010081;
    /**
     * Whether the spinners are shown. Only valid for "spinner" mode.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int spinnersShown=0x0101034b;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int splashScreenTheme=0x01010631;
    /**
     * Sets whether this ViewGroup should split MotionEvents
     * to separate child views during touch event dispatch.
     * If false (default prior to HONEYCOMB), touch events will be dispatched to
     * the child view where the first pointer went down until
     * the last pointer goes up.
     * If true (default for HONEYCOMB and later), touch events may be dispatched to
     * multiple children. MotionEvents for each pointer will be dispatched to the child
     * view where the initial ACTION_DOWN event happened.
     * See {@link android.view.ViewGroup#setMotionEventSplittingEnabled(boolean)}
     * for more information.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int splitMotionEvents=0x010102ef;
    /**
     * When an application is partitioned into splits, this is the name of the
     * split that contains the defined component.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int splitName=0x01010549;
    /**
     * Whether to split the track and leave a gap for the thumb drawable.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int splitTrack=0x0101044c;
    /**
     * Alpha value of the spot shadow projected by elevated views, between 0 and 1.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int spotShadowAlpha=0x010104bf;
    /**
     * Sets a drawable as the content of this ImageView.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int src=0x01010119;
    /**
     * Specify a URI scheme specific part that must exactly match, as per
     * {@link android.content.IntentFilter#addDataSchemeSpecificPart
     * IntentFilter.addDataSchemeSpecificPart()} with
     * {@link android.os.PatternMatcher#PATTERN_LITERAL}.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int ssp=0x010103e3;
    /**
     * Specify a URI scheme specific part that matches an advanced pattern, as per
     * {@link android.content.IntentFilter#addDataSchemeSpecificPart
     * IntentFilter.addDataSchemeSpecificPart()} with
     * {@link android.os.PatternMatcher#PATTERN_ADVANCED_GLOB}.
     * Note that because '\' is used as an escape character when
     * reading the string from XML (before it is parsed as a pattern),
     * you will need to double-escape: for example a literal "*" would
     * be written as "\\*" and a literal "\" would be written as
     * "\\\\".  This is basically the same as what you would need to
     * write if constructing the string in Java code.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int sspAdvancedPattern=0x01010621;
    /**
     * Specify a URI scheme specific part that matches a simple pattern, as per
     * {@link android.content.IntentFilter#addDataSchemeSpecificPart
     * IntentFilter.addDataSchemeSpecificPart()} with
     * {@link android.os.PatternMatcher#PATTERN_SIMPLE_GLOB}.
     * Note that because '\' is used as an escape character when
     * reading the string from XML (before it is parsed as a pattern),
     * you will need to double-escape: for example a literal "*" would
     * be written as "\\*" and a literal "\" would be written as
     * "\\\\".  This is basically the same as what you would need to
     * write if constructing the string in Java code.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int sspPattern=0x010103e5;
    /**
     * Specify a URI scheme specific part that must be a prefix to match, as per
     * {@link android.content.IntentFilter#addDataSchemeSpecificPart
     * IntentFilter.addDataSchemeSpecificPart()} with
     * {@link android.os.PatternMatcher#PATTERN_PREFIX}.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int sspPrefix=0x010103e4;
    /**
     * Specify a URI scheme specific part that must be a suffix to match, as per
     * {@link android.content.IntentFilter#addDataSchemeSpecificPart
     * IntentFilter.addDataSchemeSpecificPart()} with
     * {@link android.os.PatternMatcher#PATTERN_SUFFIX}.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int sspSuffix=0x0101061f;
    /**
     * Used by ListView and GridView to stack their content from the bottom.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int stackFromBottom=0x010100fd;
    /**
     * Default StackView style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int stackViewStyle=0x0101043e;
    /**
     * Default Star style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int starStyle=0x01010082;
    /**
     * Start inset to apply to the layer. Overrides {@code left} or
     * {@code right} depending on layout direction.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int start=0x010104db;
    /**
     * Start color of the gradient.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int startColor=0x0101019d;
    /**
     * Delay in milliseconds before the transition starts.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int startDelay=0x010103e2;
    /**
     * Delay in milliseconds before the animation runs, once start time is reached.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int startOffset=0x010101be;
    /**
     * X coordinate of the start point origin of the gradient.
     * Defined in same coordinates as the path itself
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int startX=0x01010510;
    /**
     * Y coordinate of the start point of the gradient within the shape.
     * Defined in same coordinates as the path itself
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int startY=0x01010511;
    /**
     * {@deprecated Use minDate instead.}
     * The first year (inclusive), for example "1940".
     * {@deprecated Use minDate instead.}
     * <p>May be an integer value, such as "<code>100</code>".
     */
    @Deprecated
    public static final int startYear=0x0101017c;
    /**
     * Sets the state-based animator for the View.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int stateListAnimator=0x01010448;
    /**
     * Indicates that an Activity does not need to have its freeze state
     * (as returned by {@link android.app.Activity#onSaveInstanceState}
     * retained in order to be restarted.  Generally you use this for activities
     * that do not store any state.  When this flag is set, if for some reason
     * the activity is killed before it has a chance to save its state,
     * then the system will not remove it from the activity stack like
     * it normally would.  Instead, the next time the user navigates to
     * it its {@link android.app.Activity#onCreate} method will be called
     * with a null icicle, just like it was starting for the first time.
     * <p>This is used by the Home activity to make sure it does not get
     * removed if it crashes for some reason.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int stateNotNeeded=0x01010016;
    /**
     * State identifier indicating the popup will be above the anchor.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int state_above_anchor=0x010100aa;
    /**
     * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * indicating that the Drawable is in a view that is hardware accelerated.
     * This means that the device can at least render a full-screen scaled
     * bitmap with one layer of text and bitmaps composited on top of it
     * at 60fps.  When this is set, the colorBackgroundCacheHint will be
     * ignored even if it specifies a solid color, since that optimization
     * is not needed.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int state_accelerated=0x0101031b;
    /**
     * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view or its parent has been "activated" meaning the user has currently
     * marked it as being of interest.  This is an alternative representation of
     * state_checked for when the state should be propagated down the view hierarchy.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int state_activated=0x010102fe;
    /**
     * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view or drawable is considered "active" by its host. Actual usage may vary
     * between views. Consult the host view documentation for details.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int state_active=0x010100a2;
    /**
     * State identifier indicating that the object <var>may</var> display a check mark. See
     * {@link android.R.attr#state_checked} for the identifier that indicates whether it is
     * actually checked.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int state_checkable=0x0101009f;
    /**
     * State identifier indicating that the object is currently checked.  See
     * {@link android.R.attr#state_checkable} for an additional identifier that can indicate
     * if any object may ever display a check, regardless of whether state_checked is
     * currently set.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int state_checked=0x010100a0;
    /**
     * State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
     * indicating that the Drawable is in a view that is capable of accepting a drop of
     * the content currently being manipulated in a drag-and-drop operation.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int state_drag_can_accept=0x01010368;
    /**
     * State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
     * indicating that a drag operation (for which the Drawable's view is a valid recipient)
     * is currently positioned over the Drawable.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int state_drag_hovered=0x01010369;
    /**
     * State identifier indicating the group is empty (has no children).
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int state_empty=0x010100a9;
    /**
     * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view is enabled.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int state_enabled=0x0101009e;
    /**
     * State identifier indicating the group is expanded.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int state_expanded=0x010100a8;
    /**
     * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view or drawable is in the first position in an ordered set. Actual usage
     * may vary between views. Consult the host view documentation for details.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int state_first=0x010100a4;
    /**
     * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view has input focus.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int state_focused=0x0101009c;
    /**
     * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a pointer is hovering over the view.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int state_hovered=0x01010367;
    /**
     * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view or drawable is in the last position in an ordered set. Actual usage
     * may vary between views. Consult the host view documentation for details.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int state_last=0x010100a6;
    /**
     * State for {@link android.inputmethodservice.KeyboardView KeyboardView}
     * key preview background.
     * {@deprecated Copy this definition into your own application project.}
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    @Deprecated
    public static final int state_long_pressable=0x0101023c;
    /**
     * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view or drawable is in the middle position in an ordered set. Actual usage
     * may vary between views. Consult the host view documentation for details.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int state_middle=0x010100a5;
    /**
     * State identifier indicating a TextView has a multi-line layout.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int state_multiline=0x0101034d;
    /**
     * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when the user is pressing down in a view.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int state_pressed=0x010100a7;
    /**
     * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view (or one of its parents) is currently selected.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int state_selected=0x010100a1;
    /**
     * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view or drawable is considered "single" by its host. Actual usage may vary
     * between views. Consult the host view documentation for details.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int state_single=0x010100a3;
    /**
     * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view's window has input focus.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int state_window_focused=0x0101009d;
    /**
     * A resource id of a static drawable.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int staticWallpaperPreview=0x01010331;
    /**
     * The color for the status bar. If the color is not opaque, consider setting
     * {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_STABLE} and
     * {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN}.
     * For this to take effect, the window must be drawing the system bar backgrounds with
     * {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the status bar must not
     * have been requested to be translucent with
     * {@link android.R.attr#windowTranslucentStatus}.
     * Corresponds to {@link android.view.Window#setStatusBarColor(int)}.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int statusBarColor=0x01010451;
    /**
     * The step size of the rating.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int stepSize=0x01010146;
    /**
     * If set to true, this service with be automatically stopped
     * when the user remove a task rooted in an activity owned by
     * the application.  The default is false.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int stopWithTask=0x0101036a;
    /**
     * Different audio stream types.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>alarm</td><td>4</td><td></td></tr>
     * <tr><td>music</td><td>3</td><td></td></tr>
     * <tr><td>ring</td><td>2</td><td></td></tr>
     * <tr><td>system</td><td>1</td><td></td></tr>
     * <tr><td>voice</td><td>0</td><td></td></tr>
     * </table>
     */
    public static final int streamType=0x01010209;
    /**
     * The zero-based index of the columns to stretch. The column indices
     * must be separated by a comma: 1, 2, 5. Illegal and duplicate
     * indices are ignored. You can stretch all columns by using the
     * value "*" instead. Note that a column can be marked stretchable
     * and shrinkable at the same time.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int stretchColumns=0x01010149;
    /**
     * Defines how columns should stretch to fill the available empty space, if any.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>columnWidth</td><td>2</td><td>Each column is stretched equally.</td></tr>
     * <tr><td>none</td><td>0</td><td>Stretching is disabled.</td></tr>
     * <tr><td>spacingWidth</td><td>1</td><td>The spacing between each column is stretched.</td></tr>
     * <tr><td>spacingWidthUniform</td><td>3</td><td>The spacing between each column is uniformly stretched..</td></tr>
     * </table>
     */
    public static final int stretchMode=0x01010116;
    /**
     * The opacity of a path stroke, as a value between 0 (completely transparent)
     * and 1 (completely opaque).
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int strokeAlpha=0x010104cb;
    /**
     * The color to stroke the path if not defined implies no stroke.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int strokeColor=0x01010406;
    /**
     * sets the linecap for a stroked path.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>butt</td><td>0</td><td></td></tr>
     * <tr><td>round</td><td>1</td><td></td></tr>
     * <tr><td>square</td><td>2</td><td></td></tr>
     * </table>
     */
    public static final int strokeLineCap=0x0101040b;
    /**
     * sets the lineJoin for a stroked path.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bevel</td><td>2</td><td></td></tr>
     * <tr><td>miter</td><td>0</td><td></td></tr>
     * <tr><td>round</td><td>1</td><td></td></tr>
     * </table>
     */
    public static final int strokeLineJoin=0x0101040c;
    /**
     * sets the Miter limit for a stroked path.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int strokeMiterLimit=0x0101040d;
    /**
     * The width a path stroke.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int strokeWidth=0x01010407;
    /**
     * Drawable for the arrow icon indicating a particular item is a submenu.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int subMenuArrow=0x010104f3;
    /**
     * Background for the section containing the action (for example, voice search).
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int submitBackground=0x01010488;
    /**
     * Specifies subtitle text used for navigationMode="normal".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int subtitle=0x010102d1;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int subtitleTextAppearance=0x0101042f;
    /**
     * A color to apply to the subtitle string.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int subtitleTextColor=0x010104e4;
    /**
     * Specifies a style to use for subtitle text.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int subtitleTextStyle=0x010102f9;
    /**
     * The extra value of the subtype. This string can be any string and will be passed to
     * the SpellChecker.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int subtypeExtraValue=0x0101039a;
    /**
     * The unique id for the subtype. The input method framework keeps track of enabled
     * subtypes by ID. When the IME package gets upgraded, enabled IDs will stay enabled even
     * if other attributes are different. If the ID is unspecified (by calling the other
     * constructor or 0. Arrays.hashCode(new Object[] {locale, mode, extraValue,
     * isAuxiliary, overridesImplicitlyEnabledSubtype}) will be used instead.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int subtypeId=0x010103c1;
    /**
     * The locale of the subtype. This string should be a locale (for example, en_US and
     * fr_FR). This is also used by the framework to know the supported locales
     * of the spell checker. {@link android.view.textservice.SpellCheckerSubtype#getLocale()}
     * returns the value specified in this attribute.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int subtypeLocale=0x01010399;
    /**
     * If you wish to handle an action key while a suggestion is being displayed <i>and
     * selected</i>, there are two ways to handle this.  If <i>all</i> of your suggestions
     * can handle the action key, you can simply define the action message using this
     * attribute.  This will be added to the
     * {@link android.content.Intent#ACTION_SEARCH ACTION_SEARCH} intent that is passed to your
     * searchable activity.  To examine the string, use
     * {@link android.content.Intent#getStringExtra getStringExtra(SearchManager.ACTION_MSG)}.
     * <i>Optional attribute.</i>
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int suggestActionMsg=0x010101dc;
    /**
     * If you wish to handle an action key while a suggestion is being displayed <i>and
     * selected</i>, but you do not wish to enable this action key for every suggestion,
     * then you can use this attribute to control it on a suggestion-by-suggestion basis.
     * First, you must define a column (and name it here) where your suggestions will include
     * the action string.  Then, in your content provider, you must provide this column, and
     * when desired, provide data in this column.
     * The search manager will look at your suggestion cursor, using the string
     * provided here in order to select a column, and will use that to select a string from
     * the cursor.  That string will be added to the
     * {@link android.content.Intent#ACTION_SEARCH ACTION_SEARCH} intent that is passed to
     * your searchable activity.  To examine the string, use
     * {@link android.content.Intent#getStringExtra
     * getStringExtra(SearchManager.ACTION_MSG)}.  <i>If the data does not exist for the
     * selection suggestion, the action key will be ignored.</i><i>Optional attribute.</i>
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int suggestActionMsgColumn=0x010101dd;
    /**
     * Layout for query suggestion rows.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int suggestionRowLayout=0x01010486;
    /**
     * The summary for the item.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int summary=0x010101e9;
    /**
     * Column in data table that summarizes this data.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int summaryColumn=0x010102a2;
    /**
     * The summary for the Preference in a PreferenceActivity screen when the
     * CheckBoxPreference is unchecked. If separate on/off summaries are not
     * needed, the summary attribute can be used instead.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int summaryOff=0x010101f0;
    /**
     * The summary for the Preference in a PreferenceActivity screen when the
     * CheckBoxPreference is checked. If separate on/off summaries are not
     * needed, the summary attribute can be used instead.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int summaryOn=0x010101ef;
    /**
     * @hide
     * Wallpapers optimized and capable of drawing in ambient mode will return true.
     * This feature requires the android.permission.AMBIENT_WALLPAPER permission.
     * @hide
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    @android.annotation.SystemApi
    public static final int supportsAmbientMode=0x0101058d;
    /**
     * Flag indicating whether this voice interaction service is capable of handling the
     * assist action.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int supportsAssist=0x010104f0;
    /**
     * Specifies whether the AutofillService supports inline suggestions
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int supportsInlineSuggestions=0x0101060d;
    /**
     * Flag indicating whether this voice interaction service is capable of being launched
     * from the keyguard.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int supportsLaunchVoiceAssistFromKeyguard=0x010104f1;
    /**
     * Flag indicating whether this voice interaction service can handle local voice
     * interaction requests from an Activity. This flag is new in
     * {@link android.os.Build.VERSION_CODES#N} and not used in previous versions.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int supportsLocalInteraction=0x0101050f;
    /**
     * Indicates that this wallpaper service can support multiple engines to render on each
     * surface independently. An example use case is a multi-display set-up where the
     * wallpaper service can render surfaces to each of the connected displays. Corresponds to
     * {@link android.app.WallpaperInfo#supportsMultipleDisplays()}
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int supportsMultipleDisplays=0x01010596;
    /**
     * Indicates that the activity specifically supports the picture-in-picture form of
     * multi-window. If true, this activity will support entering picture-in-picture, but will
     * only support split-screen and other forms of multi-window if
     * {@link android.R.attr#resizeableActivity} is also set to true.
     * Note that your activity may still be resized even if this attribute is true and
     * {@link android.R.attr#resizeableActivity} is false.
     * <p>The default value is <code>false</code>.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int supportsPictureInPicture=0x010104f7;
    /**
     * Declare that your application will be able to deal with RTL (right to left) layouts.
     * The default value is false.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int supportsRtl=0x010103af;
    /**
     * Set to true if this input method supports ways to switch to
     * a next input method (for example, a globe key.). When this is true and
     * InputMethodManager#shouldOfferSwitchingToNextInputMethod() returns true,
     * the IME has to offer ways to invoke InputMethodManager#switchToNextInputMethod()
     * accordingly.
     * <p> Note that the system determines the most appropriate next input method
     * and subtype in order to provide the consistent user experience in switching
     * between IMEs and subtypes.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int supportsSwitchingToNextInputMethod=0x010103eb;
    /**
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int supportsUploading=0x0101029b;
    /**
     * Specifies whether the IME suppresses system spell checker.
     * The default value is false. If an IME sets this attribute to true,
     * the system spell checker will be disabled while the IME has an
     * active input session.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int suppressesSpellChecker=0x01010643;
    /**
     * Minimum width for the switch component.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int switchMinWidth=0x01010370;
    /**
     * Minimum space between the switch and caption text.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int switchPadding=0x01010371;
    /**
     * Default style for switch preferences.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int switchPreferenceStyle=0x0101036d;
    /**
     * Default style for the Switch widget.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int switchStyle=0x0101043f;
    /**
     * TextAppearance style for text displayed on the switch thumb.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int switchTextAppearance=0x0101036e;
    /**
     * The text used on the switch itself when in the "off" state.
     * This should be a very SHORT string, as it appears in a small space.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int switchTextOff=0x0101036c;
    /**
     * The text used on the switch itself when in the "on" state.
     * This should be a very SHORT string, as it appears in a small space.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int switchTextOn=0x0101036b;
    /**
     * Flag indicating whether this content provider would like to
     * participate in data synchronization.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int syncable=0x01010019;
    /**
     * Determines whether the strip under the tab indicators is drawn or not.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int tabStripEnabled=0x010102bd;
    /**
     * Drawable used to draw the left part of the strip underneath the tabs.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int tabStripLeft=0x010102bb;
    /**
     * Drawable used to draw the right part of the strip underneath the tabs.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int tabStripRight=0x010102bc;
    /**
     * Default TabWidget style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int tabWidgetStyle=0x01010083;
    /**
     * Supply a tag for this view containing a String, to be retrieved
     * later with {@link android.view.View#getTag View.getTag()} or
     * searched for with {@link android.view.View#findViewWithTag
     * View.findViewWithTag()}.  It is generally preferable to use
     * IDs (through the android:id attribute) instead of tags because
     * they are faster and allow for compile-time type checking.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int tag=0x010100d1;
    /**
     * Fully qualified class name of an activity that allows the user to view
     * their entire wallet
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int targetActivity=0x01010202;
    /**
     * Default height of the AppWidget in units of launcher grid cells.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int targetCellHeight=0x01010635;
    /**
     * Default width of the AppWidget in units of launcher grid cells.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int targetCellWidth=0x01010634;
    /**
     * The class part of the ComponentName to assign to the Intent, as per
     * {@link android.content.Intent#setComponent Intent.setComponent()}.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int targetClass=0x0101002f;
    /**
     * @deprecated Removed.
     * Reference to an array resource that be used as description for the targets around the circle.
     * {@deprecated Removed.}
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    @Deprecated
    public static final int targetDescriptions=0x010103a0;
    /**
     * The id of a target on which this transition will animate changes.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int targetId=0x010103dc;
    /**
     * The transitionName of the target on which this transition will animation changes.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int targetName=0x0101044d;
    /**
     * The name of the application package that an Instrumentation object
     * will run against.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int targetPackage=0x01010021;
    /**
     * The name of an application's processes that an Instrumentation object
     * will run against.  If not specified, only runs in the main process of the targetPackage.
     * Can either be a comma-separated list of process names or '*' for any process that
     * launches to run targetPackage code.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int targetProcesses=0x01010541;
    /**
     * Specifies the target sandbox this app wants to use. Higher sandbox versions
     * will have increasing levels of security.
     * <p>The default value of this attribute is <code>1</code>.
     * <p>
     * @deprecated The security properties have been moved to
     * {@link android.os.Build.VERSION Build.VERSION} 27 and 28.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    @Deprecated
    public static final int targetSandboxVersion=0x0101054c;
    /**
     * This is the SDK version number that the application is targeting.
     * It is able to run on older versions (down to minSdkVersion), but
     * was explicitly tested to work with the version specified here.
     * Specifying this version allows the platform to disable compatibility
     * code that are not required or enable newer features that are not
     * available to older applications.  This may also be a string
     * (such as "Donut") if this is built against a development
     * branch, in which case minSdkVersion is also forced to be that
     * string.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int targetSdkVersion=0x01010270;
    /**
     * Specify a task name that activities have an "affinity" to.
     * Use with the application tag (to supply a default affinity for all
     * activities in the application), or with the activity tag (to supply
     * a specific affinity for that component).
     * <p>The default value for this attribute is the same as the package
     * name, indicating that all activities in the manifest should generally
     * be considered a single "application" to the user.  You can use this
     * attribute to modify that behavior: either giving them an affinity
     * for another task, if the activities are intended to be part of that
     * task from the user's perspective, or using an empty string for
     * activities that have no affinity to a task.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int taskAffinity=0x01010012;
    /**
     * When closing the last activity of a task, this is the animation that is
     * run on the activity of the next task (which is entering the screen).
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int taskCloseEnterAnimation=0x010100be;
    /**
     * When opening an activity in a new task, this is the animation that is
     * run on the activity of the old task (which is exiting the screen).
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int taskCloseExitAnimation=0x010100bf;
    /**
     * When opening an activity in a new task, this is the animation that is
     * run on the activity of the new task (which is entering the screen).
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int taskOpenEnterAnimation=0x010100bc;
    /**
     * When opening an activity in a new task, this is the animation that is
     * run on the activity of the old task (which is exiting the screen).
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int taskOpenExitAnimation=0x010100bd;
    /**
     * When sending the current task to the background, this is the
     * animation that is run on the top activity of the task behind
     * it (which is entering the screen).
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int taskToBackEnterAnimation=0x010100c2;
    /**
     * When sending the current task to the background, this is the
     * animation that is run on the top activity of the current task
     * (which is exiting the screen).
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int taskToBackExitAnimation=0x010100c3;
    /**
     * When bringing an existing task to the foreground, this is the
     * animation that is run on the top activity of the task being brought
     * to the foreground (which is entering the screen).
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int taskToFrontEnterAnimation=0x010100c0;
    /**
     * When bringing an existing task to the foreground, this is the
     * animation that is run on the current foreground activity
     * (which is exiting the screen).
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int taskToFrontExitAnimation=0x010100c1;
    /**
     * This is the amount of tension.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int tension=0x0101026a;
    /**
     * Option to indicate this application is only for testing purposes.
     * For example, it may expose functionality or data outside of itself
     * that would cause a security hole, but is useful for testing.  This
     * kind of application can not be installed without the
     * INSTALL_ALLOW_TEST flag, which means only through adb install.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int testOnly=0x01010272;
    /**
     * Text to display.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int text=0x0101014f;
    /**
     * Defines the alignment of the text.
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>center</td><td>4</td><td>Center the paragraph, for example: ALIGN_CENTER.</td></tr>
     * <tr><td>gravity</td><td>1</td><td>Default for the root view. The gravity determines the alignment, ALIGN_NORMAL,
     * ALIGN_CENTER, or ALIGN_OPPOSITE, which are relative to each paragraph’s
     * text direction.</td></tr>
     * <tr><td>inherit</td><td>0</td><td>Default.</td></tr>
     * <tr><td>textEnd</td><td>3</td><td>Align to the end of the paragraph, for example: ALIGN_OPPOSITE.</td></tr>
     * <tr><td>textStart</td><td>2</td><td>Align to the start of the paragraph, for example: ALIGN_NORMAL.</td></tr>
     * <tr><td>viewEnd</td><td>6</td><td>Align to the end of the view, which is ALIGN_RIGHT if the view’s resolved
     * layoutDirection is LTR, and ALIGN_LEFT otherwise.</td></tr>
     * <tr><td>viewStart</td><td>5</td><td>Align to the start of the view, which is ALIGN_LEFT if the view’s resolved
     * layoutDirection is LTR, and ALIGN_RIGHT otherwise.</td></tr>
     * </table>
     */
    public static final int textAlignment=0x010103b1;
    /**
     * Present the text in ALL CAPS. This may use a small-caps form when available.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int textAllCaps=0x0101038c;
    /**
     * Default appearance of text: color, typeface, size, and style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int textAppearance=0x01010034;
    /**
     * Text color, typeface, size, and style for the text inside of a button.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int textAppearanceButton=0x01010207;
    /**
     * Default appearance of text against an inverted background:
     * color, typeface, size, and style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int textAppearanceInverse=0x01010035;
    /**
     * Text color, typeface, size, and style for "large" text. Defaults to primary text color.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int textAppearanceLarge=0x01010040;
    /**
     * Text color, typeface, size, and style for "large" inverse text. Defaults to primary inverse text color.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int textAppearanceLargeInverse=0x01010043;
    /**
     * Text color, typeface, size, and style for the text inside of a popup menu.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int textAppearanceLargePopupMenu=0x01010301;
    /**
     * The preferred TextAppearance for the primary text of list items.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int textAppearanceListItem=0x0101039e;
    /**
     * The preferred TextAppearance for the secondary text of list items.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int textAppearanceListItemSecondary=0x01010432;
    /**
     * The preferred TextAppearance for the primary text of small list items.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int textAppearanceListItemSmall=0x0101039f;
    /**
     * Text color, typeface, size, and style for "medium" text. Defaults to primary text color.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int textAppearanceMedium=0x01010041;
    /**
     * Text color, typeface, size, and style for "medium" inverse text. Defaults to primary inverse text color.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int textAppearanceMediumInverse=0x01010044;
    /**
     * Text color, typeface, size, and style for header text inside of a popup menu.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int textAppearancePopupMenuHeader=0x01010502;
    /**
     * Text color, typeface, size, and style for system search result subtitle. Defaults to primary inverse text color.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int textAppearanceSearchResultSubtitle=0x010102a0;
    /**
     * Text color, typeface, size, and style for system search result title. Defaults to primary inverse text color.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int textAppearanceSearchResultTitle=0x010102a1;
    /**
     * Text color, typeface, size, and style for "small" text. Defaults to secondary text color.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int textAppearanceSmall=0x01010042;
    /**
     * Text color, typeface, size, and style for "small" inverse text. Defaults to secondary inverse text color.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int textAppearanceSmallInverse=0x01010045;
    /**
     * Text color, typeface, size, and style for small text inside of a popup menu.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int textAppearanceSmallPopupMenu=0x01010302;
    /**
     * Drawable to use for check marks.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int textCheckMark=0x01010046;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int textCheckMarkInverse=0x01010047;
    /**
     * Color of text (usually same as colorForeground).
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int textColor=0x01010098;
    /**
     * Color of list item text in alert dialogs.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int textColorAlertDialogListItem=0x01010306;
    /**
     * Color of highlighted text.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int textColorHighlight=0x01010099;
    /**
     * Color of highlighted text, when used in a light theme.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int textColorHighlightInverse=0x0101034f;
    /**
     * Color of hint text (displayed when the field is empty).
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int textColorHint=0x0101009a;
    /**
     * Inverse hint text color.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int textColorHintInverse=0x0101003f;
    /**
     * Color of link text (URLs).
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int textColorLink=0x0101009b;
    /**
     * Color of link text (URLs), when used in a light theme.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int textColorLinkInverse=0x01010350;
    /**
     * The most prominent text color.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int textColorPrimary=0x01010036;
    /**
     * Bright text color. Only differentiates based on the disabled state.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int textColorPrimaryDisableOnly=0x01010037;
    /**
     * Primary inverse text color, useful for inverted backgrounds.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int textColorPrimaryInverse=0x01010039;
    /**
     * Bright inverse text color. Only differentiates based on the disabled state.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int textColorPrimaryInverseDisableOnly=0x0101028b;
    /**
     * Bright inverse text color. This does not differentiate the disabled state.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int textColorPrimaryInverseNoDisable=0x0101003d;
    /**
     * Bright text color. This does not differentiate the disabled state. As an example,
     * buttons use this since they display the disabled state via the background and not the
     * foreground text color.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int textColorPrimaryNoDisable=0x0101003b;
    /**
     * Secondary text color.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int textColorSecondary=0x01010038;
    /**
     * Secondary inverse text color, useful for inverted backgrounds.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int textColorSecondaryInverse=0x0101003a;
    /**
     * Dim inverse text color. This does not differentiate the disabled state.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int textColorSecondaryInverseNoDisable=0x0101003e;
    /**
     * Dim text color. This does not differentiate the disabled state.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int textColorSecondaryNoDisable=0x0101003c;
    /**
     * Tertiary text color.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int textColorTertiary=0x01010212;
    /**
     * Tertiary inverse text color, useful for inverted backgrounds.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int textColorTertiaryInverse=0x01010213;
    /**
     * Reference to a drawable that will be drawn under the insertion cursor.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int textCursorDrawable=0x01010362;
    /**
     * Defines the direction of the text.
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>anyRtl</td><td>2</td><td>The paragraph direction is RTL if it contains any strong RTL character, otherwise
     * it is LTR if it contains any strong LTR characters.  If there are neither, the
     * paragraph direction is the view’s resolved layout direction.</td></tr>
     * <tr><td>firstStrong</td><td>1</td><td>Default for the root view. The first strong directional character determines the
     * paragraph direction.  If there is no strong directional character, the paragraph
     * direction is the view’s resolved layout direction.</td></tr>
     * <tr><td>firstStrongLtr</td><td>6</td><td>The first strong directional character determines the paragraph direction. If
     * there is no strong directional character, the paragraph direction is LTR.</td></tr>
     * <tr><td>firstStrongRtl</td><td>7</td><td>The first strong directional character determines the paragraph direction. If
     * there is no strong directional character, the paragraph direction is RTL.</td></tr>
     * <tr><td>inherit</td><td>0</td><td>Default.</td></tr>
     * <tr><td>locale</td><td>5</td><td>The paragraph direction is coming from the system Locale.</td></tr>
     * <tr><td>ltr</td><td>3</td><td>The paragraph direction is left to right.</td></tr>
     * <tr><td>rtl</td><td>4</td><td>The paragraph direction is right to left.</td></tr>
     * </table>
     */
    public static final int textDirection=0x010103b0;
    /**
     * Variation of textEditPasteWindowLayout displayed when the clipboard is empty.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int textEditNoPasteWindowLayout=0x01010315;
    /**
     * The layout of the view that is displayed on top of the cursor to paste inside a
     * TextEdit field.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int textEditPasteWindowLayout=0x01010314;
    /**
     * Variation of textEditSidePasteWindowLayout displayed when the clipboard is empty.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int textEditSideNoPasteWindowLayout=0x0101035f;
    /**
     * Used instead of textEditPasteWindowLayout when the window is moved on the side of the
     * insertion cursor because it would be clipped if it were positioned on top.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int textEditSidePasteWindowLayout=0x0101035e;
    /**
     * Layout of the TextView item that will populate the suggestion popup window.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int textEditSuggestionItemLayout=0x01010374;
    /**
     * When set to true, the list will filter results as the user types. The
     * List's adapter must support the Filterable interface for this to work.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int textFilterEnabled=0x010100ff;
    /**
     * Weight for the font used in the TextView.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int textFontWeight=0x01010585;
    /**
     * Indicates that the content of a non-editable TextView can be selected.
     * Default value is false. EditText content is always selectable.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int textIsSelectable=0x01010316;
    /**
     * Specifies the {@link android.os.LocaleList} for the text in this TextView.
     * If not given, the system default will be used.
     * May be a string value, which is a comma-separated language tag list, such as "ja-JP,zh-CN".
     * When not specified or an empty string is given, it will fallback to the default one.
     * {@see android.os.LocaleList#forLanguageTags(String)}
     * {@see android.widget.TextView#setTextLocales(android.os.LocaleList)}
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int textLocale=0x01010592;
    /**
     * The text for the button when it is not checked.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int textOff=0x01010125;
    /**
     * The text for the button when it is checked.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int textOn=0x01010124;
    /**
     * Sets the horizontal scaling factor for the text.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int textScaleX=0x01010151;
    /**
     * Reference to a drawable that will be used to display a text selection
     * anchor for positioning the cursor within text.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int textSelectHandle=0x010102c7;
    /**
     * Reference to a drawable that will be used to display a text selection
     * anchor on the left side of a selection region.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int textSelectHandleLeft=0x010102c5;
    /**
     * Reference to a drawable that will be used to display a text selection
     * anchor on the right side of a selection region.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int textSelectHandleRight=0x010102c6;
    /**
     * Reference to a style that will be used for the window containing a text
     * selection anchor.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int textSelectHandleWindowStyle=0x010102c8;
    /**
     * Size of text. Recommended dimension type for text is "sp" for scaled-pixels (example: 15sp).
     * Supported values include the following:<p/>
     * <ul>
     * <li><b>px</b> Pixels</li>
     * <li><b>sp</b> Scaled pixels (scaled to relative pixel size on screen). See {@link android.util.DisplayMetrics} for more information.</li>
     * <li><b>pt</b> Points</li>
     * <li><b>dip</b> Device independent pixels. See {@link android.util.DisplayMetrics} for more information.</li>
     * </ul>
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int textSize=0x01010095;
    /**
     * Default text typeface style.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bold</td><td>1</td><td></td></tr>
     * <tr><td>italic</td><td>2</td><td></td></tr>
     * <tr><td>normal</td><td>0</td><td></td></tr>
     * </table>
     */
    public static final int textStyle=0x01010097;
    /**
     * Reference to a style that will be used for the window containing a list of possible
     * text suggestions in an EditText.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int textSuggestionsWindowStyle=0x01010373;
    /**
     * Default TextView style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int textViewStyle=0x01010084;
    /**
     * The overall theme to use for an activity.  Use with either the
     * application tag (to supply a default theme for all activities) or
     * the activity tag (to supply a specific theme for that activity).
     * <p>This automatically sets
     * your activity's Context to use this theme, and may also be used
     * for "starting" animations prior to the activity being launched (to
     * better match what the activity actually looks like).  It is a reference
     * to a style resource defining the theme.  If not set, the default
     * system theme will be used.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int theme=0x01010000;
    /**
     * Thickness of the ring. When defined, thicknessRatio is ignored.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int thickness=0x01010260;
    /**
     * Thickness of the ring expressed as a ratio of the ring's width. For instance,
     * if thicknessRatio=3, then the thickness equals the ring's width divided by 3.
     * This value is ignored if innerRadius is defined. Default value is 3.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int thicknessRatio=0x0101019c;
    /**
     * Draws the thumb on a seekbar.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int thumb=0x01010142;
    /**
     * An offset for the thumb that allows it to extend out of the range of the track.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int thumbOffset=0x01010143;
    /**
     * Position of thumb in relation to the track.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>inside</td><td>1</td><td>The thumb is entirely inside the track. At its extremes,
     * the thumb will be contained entirely within the track.</td></tr>
     * <tr><td>midpoint</td><td>0</td><td>The thumb's midpoint is anchored to the track. At its
     * extremes, the thumb will extend half-way outside the
     * track.</td></tr>
     * </table>
     */
    public static final int thumbPosition=0x010104e5;
    /**
     * Amount of padding on either side of text within the switch thumb.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int thumbTextPadding=0x01010372;
    /**
     * Tint to apply to the thumb drawable.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int thumbTint=0x01010471;
    /**
     * Blending mode used to apply the thumb tint.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     */
    public static final int thumbTintMode=0x01010472;
    /**
     * Reference to the wallpaper's thumbnail bitmap.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int thumbnail=0x010102a5;
    /**
     * Drawable displayed at each progress position on a seekbar.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int tickMark=0x0101050a;
    /**
     * Tint to apply to the tick mark drawable.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int tickMarkTint=0x0101050b;
    /**
     * Blending mode used to apply the tick mark tint.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     */
    public static final int tickMarkTintMode=0x0101050c;
    /**
     * Defines the tile mode. When the tile mode is enabled, the bitmap is repeated.
     * Gravity is ignored when the tile mode is enabled. Default value is "disabled".
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>clamp</td><td>0</td><td>Replicates the edge color.</td></tr>
     * <tr><td>disabled</td><td>ffffffff</td><td>Do not tile the bitmap. This is the default value.</td></tr>
     * <tr><td>mirror</td><td>2</td><td>Repeats the shader's image horizontally and vertically, alternating
     * mirror images so that adjacent images always seam.</td></tr>
     * <tr><td>repeat</td><td>1</td><td>Repeats the bitmap in both direction.</td></tr>
     * </table>
     */
    public static final int tileMode=0x01010201;
    /**
     * Defines the horizontal tile mode. When the tile mode is enabled, the bitmap is repeated.
     * Gravity is ignored when the tile mode is enabled. Default value is "disabled".
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>clamp</td><td>0</td><td>Replicates the edge color.</td></tr>
     * <tr><td>disabled</td><td>ffffffff</td><td>Do not tile the bitmap. This is the default value.</td></tr>
     * <tr><td>mirror</td><td>2</td><td>Repeats the shader's image horizontally, alternating
     * mirror images so that adjacent images always seam.</td></tr>
     * <tr><td>repeat</td><td>1</td><td>Repeats the bitmap horizontally.</td></tr>
     * </table>
     */
    public static final int tileModeX=0x01010477;
    /**
     * Defines the vertical tile mode. When the tile mode is enabled, the bitmap is repeated.
     * Gravity is ignored when the tile mode is enabled. Default value is "disabled".
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>clamp</td><td>0</td><td>Replicates the edge color.</td></tr>
     * <tr><td>disabled</td><td>ffffffff</td><td>Do not tile the bitmap. This is the default value.</td></tr>
     * <tr><td>mirror</td><td>2</td><td>Repeats the shader's image vertically, alternating
     * mirror images so that adjacent images always seam.</td></tr>
     * <tr><td>repeat</td><td>1</td><td>Repeats the bitmap vertically.</td></tr>
     * </table>
     */
    public static final int tileModeY=0x01010478;
    /**
     * The TimePicker dialog theme.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int timePickerDialogTheme=0x0101049e;
    /**
     * Defines the look of the widget. Prior to the L release, the only choice was
     * spinner. As of L, with the Material theme selected, the default layout is clock,
     * but this attribute can be used to force spinner to be used instead.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>clock</td><td>2</td><td>Time picker with clock face to select the time.</td></tr>
     * <tr><td>spinner</td><td>1</td><td>Time picker with spinner controls to select the time.</td></tr>
     * </table>
     */
    public static final int timePickerMode=0x010104b4;
    /**
     * The TimePicker style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int timePickerStyle=0x0101049d;
    /**
     * Specifies the time zone to use. When this attribute is specified, the
     * TextClock will ignore the time zone of the system. To use the user's
     * time zone, do not specify this attribute. The default value is the
     * user's time zone. Please refer to {@link java.util.TimeZone} for more
     * information about time zone ids.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int timeZone=0x010103cc;
    /**
     * The tinting color for the image. By default, the tint will blend using SRC_ATOP mode.
     * Please note that for compatibility reasons, this is NOT consistent with the default
     * SRC_IN tint mode used by {@link android.widget.ImageView#setImageTintList} and by
     * similar tint attributes on other views.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int tint=0x01010121;
    /**
     * When a tint color is set, specifies its Porter-Duff blending mode. The
     * default value is src_in, which treats the drawable as an alpha mask.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     */
    public static final int tintMode=0x010103fb;
    /**
     * The title associated with the item.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int title=0x010101e1;
    /**
     * The condensed title associated with the item.  This is used in situations where the
     * normal title may be too long to be displayed.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int titleCondensed=0x010101e2;
    /**
     * Specifies extra space on the left, start, right and end sides
     * of the toolbar's title. Margin values should be positive.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int titleMargin=0x010104f8;
    /**
     * Specifies extra space on the bottom side of the toolbar's title.
     * If both this attribute and titleMargin are specified, then this
     * attribute takes precedence. Margin values should be positive.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int titleMarginBottom=0x010104fc;
    /**
     * Specifies extra space on the end side of the toolbar's title.
     * If both this attribute and titleMargin are specified, then this
     * attribute takes precedence. Margin values should be positive.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int titleMarginEnd=0x010104fa;
    /**
     * Specifies extra space on the start side of the toolbar's title.
     * If both this attribute and titleMargin are specified, then this
     * attribute takes precedence. Margin values should be positive.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int titleMarginStart=0x010104f9;
    /**
     * Specifies extra space on the top side of the toolbar's title.
     * If both this attribute and titleMargin are specified, then this
     * attribute takes precedence. Margin values should be positive.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int titleMarginTop=0x010104fb;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int titleTextAppearance=0x0101042e;
    /**
     * A color to apply to the title string.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int titleTextColor=0x010104e3;
    /**
     * Specifies a style to use for title text.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int titleTextStyle=0x010102f8;
    /**
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int toAlpha=0x010101cb;
    /**
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int toDegrees=0x010101b4;
    /**
     * Keyframe identifier for the ending state.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int toId=0x01010449;
    /**
     * The destination scene in this scene change.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int toScene=0x010103de;
    /**
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int toXDelta=0x010101c7;
    /**
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int toXScale=0x010101c3;
    /**
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int toYDelta=0x010101c9;
    /**
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int toYScale=0x010101c5;
    /**
     * Default Toolbar style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int toolbarStyle=0x010104aa;
    /**
     * The tooltip text associated with the item.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int tooltipText=0x01010534;
    /**
     * Amount of top padding inside the gradient shape.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int top=0x010101ae;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int topBright=0x010100cb;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int topDark=0x010100c7;
    /**
     * Radius of the top left corner.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int topLeftRadius=0x010101a9;
    /**
     * Extra offset for the handle at the top of the SlidingDrawer.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int topOffset=0x01010258;
    /**
     * Radius of the top right corner.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int topRightRadius=0x010101aa;
    /**
     * Set to true if this ViewGroup blocks focus in the presence of a touchscreen.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int touchscreenBlocksFocus=0x0101048f;
    /**
     * Drawable to use as the "track" that the switch thumb slides within.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int track=0x0101036f;
    /**
     * Tint to apply to the track.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int trackTint=0x010104d9;
    /**
     * Blending mode used to apply the track tint.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     */
    public static final int trackTintMode=0x010104da;
    /**
     * Sets the transcript mode for the list. In transcript mode, the list
     * scrolls to the bottom to make new items visible when they are added.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>alwaysScroll</td><td>2</td><td>The list will automatically scroll to the bottom, no matter what items
     * are currently visible.</td></tr>
     * <tr><td>disabled</td><td>0</td><td>Disables transcript mode. This is the default value.</td></tr>
     * <tr><td>normal</td><td>1</td><td>The list will automatically scroll to the bottom when
     * a data set change notification is received and only if the last item is
     * already visible on screen.</td></tr>
     * </table>
     */
    public static final int transcriptMode=0x01010100;
    /**
     * x location of the pivot point around which the view will rotate and scale.
     * This xml attribute sets the pivotX property of the View.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int transformPivotX=0x01010320;
    /**
     * y location of the pivot point around which the view will rotate and scale.
     * This xml attribute sets the pivotY property of the View.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int transformPivotY=0x01010321;
    /**
     * The id of a transition to be used in a particular scene change.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int transition=0x010103df;
    /**
     * Sets whether or not this ViewGroup should be treated as a single entity
     * when doing an Activity transition. Typically, the elements inside a
     * ViewGroup are each transitioned from the scene individually. The default
     * for a ViewGroup is false unless it has a background. See
     * {@link android.app.ActivityOptions#makeSceneTransitionAnimation(android.app.Activity,
     * android.view.View, String)} for more information. Corresponds to
     * {@link android.view.ViewGroup#setTransitionGroup(boolean)}.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int transitionGroup=0x01010401;
    /**
     * Names a View such that it can be identified for Transitions. Names should be
     * unique in the View hierarchy.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int transitionName=0x01010400;
    /**
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>sequential</td><td>1</td><td>child transitions should be played sequentially, in the same order
     * as the xml.</td></tr>
     * <tr><td>together</td><td>0</td><td>child transitions should be played together.</td></tr>
     * </table>
     */
    public static final int transitionOrdering=0x010103e0;
    /**
     * Changes whether the transition supports appearing and/or disappearing Views.
     * Corresponds to {@link android.transition.Visibility#setMode(int)}.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>mode_in</td><td>1</td><td>Only appearing Views will be supported.</td></tr>
     * <tr><td>mode_out</td><td>2</td><td>Only disappearing Views will be supported.</td></tr>
     * </table>
     */
    public static final int transitionVisibilityMode=0x0101047c;
    /**
     * The amount to translate the group on X coordinate.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int translateX=0x0101045a;
    /**
     * The amount to translate the group on Y coordinate.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int translateY=0x0101045b;
    /**
     * translation in x of the view. This value is added post-layout to the left
     * property of the view, which is set by its layout.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int translationX=0x01010322;
    /**
     * translation in y of the view. This value is added post-layout to the top
     * property of the view, which is set by its layout.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int translationY=0x01010323;
    /**
     * translation in z of the view. This value is added to its elevation.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int translationZ=0x010103fa;
    /**
     * The fraction of the path to trim from the end from 0 to 1 .
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int trimPathEnd=0x01010409;
    /**
     * Shift trim region (allows visible region to include the start and end) from 0 to 1.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int trimPathOffset=0x0101040a;
    /**
     * The fraction of the path to trim from the start from 0 to 1.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int trimPathStart=0x01010408;
    /**
     * The index of the font in the ttc (TrueType Collection) font file. If the font file
     * referenced is not in the ttc format, this attribute needs not be specified.
     * {@link android.graphics.Typeface.Builder#setTtcIndex(int)}.
     * The default value is 0. More details about the TrueType Collection font format can be found
     * here: https://en.wikipedia.org/wiki/TrueType#TrueType_Collection.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int ttcIndex=0x0101056f;
    /**
     * The number of tuners that the TV input service is associated with. This value can be
     * changed at runtime by calling
     * {@link android.media.tv.TvInputManager#updateTvInputInfo(android.media.tv.TvInputInfo)}.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int tunerCount=0x0101051d;
    /**
     * Specifies whether the screen should be turned on when the {@link android.app.Activity} is resumed.
     * Normally an activity will be transitioned to the stopped state if it is started while the
     * screen if off, but with this flag set the activity will cause the screen to turn on if the
     * activity will be visible and resumed due to the screen coming on. The screen will not be
     * turned on if the activity won't be visible after the screen is turned on. This flag is
     * normally used in conjunction with the {@link android.R.attr#showWhenLocked} flag to make
     * sure the activity is visible after the screen is turned on when the lockscreen is up. In
     * addition, if this flag is set and the activity calls
     * {@link android.app.KeyguardManager#requestDismissKeyguard}
     * the screen will turn on.
     * <p>This should be used instead of {@link android.view.WindowManager.LayoutParams#FLAG_TURN_SCREEN_ON}
     * flag set for Windows. When using the Window flag during activity startup, there may not be
     * time to add it before the system stops your activity because the screen has not yet turned
     * on. This leads to a double life-cycle as it is then restarted.</p>
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int turnScreenOn=0x0101056a;
    /**
     * Type of gradient. The default type is linear.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>linear</td><td>0</td><td>Linear gradient extending across the center point.</td></tr>
     * <tr><td>radial</td><td>1</td><td>Radial gradient extending from the center point outward.</td></tr>
     * <tr><td>sweep</td><td>2</td><td>Sweep (or angular) gradient sweeping counter-clockwise around the center point.</td></tr>
     * </table>
     */
    public static final int type=0x010101a1;
    /**
     * Default text typeface.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>monospace</td><td>3</td><td></td></tr>
     * <tr><td>normal</td><td>0</td><td></td></tr>
     * <tr><td>sans</td><td>1</td><td></td></tr>
     * <tr><td>serif</td><td>2</td><td></td></tr>
     * </table>
     */
    public static final int typeface=0x01010096;
    /**
     * Extra options for an activity's UI. Applies to either the {@code <activity>} or
     * {@code <application>} tag. If specified on the {@code <application>}
     * tag these will be considered defaults for all activities in the
     * application.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>none</td><td>0</td><td>No extra UI options. This is the default.</td></tr>
     * <tr><td>splitActionBarWhenNarrow</td><td>1</td><td>Split the options menu into a separate bar at the bottom of
     * the screen when severely constrained for horizontal space.
     * (e.g. portrait mode on a phone.) Instead of a small number
     * of action buttons appearing in the action bar at the top
     * of the screen, the action bar will split into the top navigation
     * section and the bottom menu section. Menu items will not be
     * split across the two bars; they will always appear together.</td></tr>
     * </table>
     */
    public static final int uiOptions=0x01010398;
    /**
     * Color used to draw the user's strokes until we are sure it's a gesture.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int uncertainGestureColor=0x01010276;
    /**
     * @deprecated The color for the dates of an unfocused month.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    @Deprecated
    public static final int unfocusedMonthDateColor=0x01010344;
    /**
     * Sets the alpha on the items that are not selected.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int unselectedAlpha=0x0101020e;
    /**
     * Update period in milliseconds, or 0 if the AppWidget will update itself.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int updatePeriodMillis=0x01010250;
    /**
     * Specify whether the 32 bit version of the ABI should be used in a
     * multiArch application. If both abioverride flag (i.e. using abi option of abd install)
     * and use32bitAbi are used, then use32bit is ignored.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int use32bitAbi=0x01010515;
    /**
     * If true, and this is an {@link android.R.attr#isolatedProcess} service, the service
     * will be spawned from an Application Zygote, instead of the regular Zygote.
     * <p>
     * The Application Zygote will first pre-initialize the application's class loader. Then,
     * if the application has defined the {@link android.R.attr#zygotePreloadName} attribute,
     * the Application Zygote will call into that class to allow it to perform
     * application-specific preloads (such as loading a shared library). Therefore,
     * spawning from the Application Zygote will typically reduce the service
     * launch time and reduce its memory usage. The downside of using this flag
     * is that you will have an additional process (the app zygote itself) that
     * is taking up memory. Whether actual memory usage is improved therefore strongly
     * depends on the number of isolated services that an application starts,
     * and how much memory those services save by preloading and sharing memory with
     * the app zygote. Therefore, it is recommended to measure memory usage under
     * typical workloads to determine whether it makes sense to use this flag.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int useAppZygote=0x01010597;
    /**
     * When set to true, tells GridLayout to use default margins when none are specified
     * in a view's layout parameters.
     * The default value is false.
     * See {@link android.widget.GridLayout#setUseDefaultMargins(boolean)}.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int useDefaultMargins=0x01010379;
    /**
     * Flag to specify if this app wants to run the dex within its APK but not extracted or
     * locally compiled variants. This keeps the dex code protected by the APK signature. Such
     * apps will always run in JIT mode (same when they are first installed), and the system will
     * never generate ahead-of-time compiled code for them. Depending on the app's workload,
     * there may be some run time performance change, noteably the cold start time.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int useEmbeddedDex=0x0101059e;
    /**
     * Use the drawable's intrinsic width and height as minimum size values.
     * Useful if the target drawable is a 9-patch or otherwise should not be scaled
     * down beyond a minimum size.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int useIntrinsicSizeAsMinimum=0x01010310;
    /**
     * Whether the drawable level value (see
     * {@link android.graphics.drawable.Drawable#getLevel()}) is used to scale the gradient.
     * Scaling behavior varies based on gradient type. For "linear", adjusts the ending
     * position along the gradient's axis of orientation. For "radial", adjusts the outer
     * radius. For "sweep", adjusts the ending angle. The default value is false.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int useLevel=0x0101019f;
    /**
     * @hide
     * The user restriction for this preference.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    @android.annotation.SystemApi
    public static final int userRestriction=0x01010584;
    /**
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int userVisible=0x01010291;
    /**
     * Declare that this application may use cleartext traffic, such as HTTP rather than HTTPS;
     * WebSockets rather than WebSockets Secure; XMPP, IMAP, STMP without STARTTLS or TLS.
     * Defaults to true. If set to false {@code false}, the application declares that it does not
     * intend to use cleartext network traffic, in which case platform components (e.g. HTTP
     * stacks, {@code DownloadManager}, {@code MediaPlayer}) will refuse applications's requests
     * to use cleartext traffic. Third-party libraries are encouraged to honor this flag as well.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int usesCleartextTraffic=0x010104ec;
    /**
     * @hide For use by platform and tools only. Developers should not specify this value.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int usesNonSdkApi=0x0101058e;
    /**
     * Optional: set of flags that should apply to this permission request. Note that
     * these flags start at 0x4 to match PackageInfo.requestedPermissionsFlags.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>neverForLocation</td><td>10000</td><td>Strong assertion by a developer that they will never use this
     * permission to derive the physical location of the device, even
     * when the app has been granted the ACCESS_FINE_LOCATION and/or
     * ACCESS_COARSE_LOCATION permissions.</td></tr>
     * </table>
     */
    public static final int usesPermissionFlags=0x01010644;
    /**
     * Concrete value to assign to this piece of named meta-data.
     * The data can later be retrieved from the meta data Bundle
     * through {@link android.os.Bundle#getString Bundle.getString},
     * {@link android.os.Bundle#getInt Bundle.getInt},
     * {@link android.os.Bundle#getBoolean Bundle.getBoolean},
     * or {@link android.os.Bundle#getFloat Bundle.getFloat} depending
     * on the type used here.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int value=0x01010024;
    /**
     * Value the animation starts from.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int valueFrom=0x010102de;
    /**
     * Value the animation animates to.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int valueTo=0x010102df;
    /**
     * The type of valueFrom and valueTo.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>colorType</td><td>3</td><td>values are colors, which are integers starting with "#".</td></tr>
     * <tr><td>floatType</td><td>0</td><td>The given values are floats. This is the default value if valueType is
     * unspecified. Note that if any value attribute has a color value
     * (beginning with "#"), then this attribute is ignored and the color values are
     * interpreted as integers.</td></tr>
     * <tr><td>intType</td><td>1</td><td>values are integers.</td></tr>
     * <tr><td>pathType</td><td>2</td><td>values are paths defined as strings.
     * This type is used for path morphing in AnimatedVectorDrawable.</td></tr>
     * </table>
     */
    public static final int valueType=0x010102e0;
    /**
     * If true, allows the drawable's padding to change based on the
     * current state that is selected.  If false, the padding will
     * stay the same (based on the maximum padding of all the states).
     * Enabling this feature requires that the owner of the drawable
     * deal with performing layout when the state changes, which is
     * often not supported.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int variablePadding=0x01010195;
    /**
     * The vendor name if this print service is vendor specific.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int vendor=0x010103e7;
    /**
     * The version of the feature that is being used.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int version=0x01010519;
    /**
     * Internal version code.  This is the number used to determine whether
     * one version is more recent than another: it has no other meaning than
     * that higher numbers are more recent.  You could use this number to
     * encode a "x.y" in the lower and upper 16 bits, make it a build
     * number, simply increase it by one each time a new version is
     * released, or define it however else you want, as long as each
     * successive version has a higher number.  This is not a version
     * number generally shown to the user, that is usually supplied
     * with {@link android.R.attr#versionName}.  When an app is delivered
     * as multiple split APKs, each APK must have the exact same versionCode.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int versionCode=0x0101021b;
    /**
     * Internal major version code.  This is essentially additional high bits
     * for the base version code; it has no other meaning than
     * that higher numbers are more recent.  This is not a version
     * number generally shown to the user, that is usually supplied
     * with {@link android.R.attr#versionName}.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int versionCodeMajor=0x01010576;
    /**
     * Optional minimum major version of the package that satisfies the dependency.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int versionMajor=0x01010577;
    /**
     * The text shown to the user to indicate the version they have.  This
     * is used for no other purpose than display to the user; the actual
     * significant version number is given by {@link android.R.attr#versionCode}.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int versionName=0x0101021c;
    /**
     * Amount to offset the touch Y coordinate by, for bias correction.
     * {@deprecated Copy this definition into your own application project.}
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    @Deprecated
    public static final int verticalCorrection=0x0101023a;
    /**
     * Default vertical divider between menu items.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int verticalDivider=0x0101012e;
    /**
     * Default vertical gap between rows of keys.
     * {@deprecated Copy this definition into your own application project.}
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    @Deprecated
    public static final int verticalGap=0x01010240;
    /**
     * Determines which side the vertical scroll bar should be placed on.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>defaultPosition</td><td>0</td><td>Place the scroll bar wherever the system default determines.</td></tr>
     * <tr><td>left</td><td>1</td><td>Place the scroll bar on the left.</td></tr>
     * <tr><td>right</td><td>2</td><td>Place the scroll bar on the right.</td></tr>
     * </table>
     */
    public static final int verticalScrollbarPosition=0x01010334;
    /**
     * Defines the default vertical spacing between rows.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int verticalSpacing=0x01010115;
    /**
     * The height of the canvas the drawing is on.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int viewportHeight=0x01010403;
    /**
     * The width of the canvas the drawing is on.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int viewportWidth=0x01010402;
    /**
     * Controls the initial visibility of the view.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>gone</td><td>2</td><td>Completely hidden, as if the view had not been added.</td></tr>
     * <tr><td>invisible</td><td>1</td><td>Not displayed, but taken into account during layout (space is left for it).</td></tr>
     * <tr><td>visible</td><td>0</td><td>Visible on screen; the default value.</td></tr>
     * </table>
     */
    public static final int visibility=0x010100dc;
    /**
     * Provides initial visibility state of the drawable; the default
     * value is false.  See
     * {@link android.graphics.drawable.Drawable#setVisible}.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int visible=0x01010194;
    /**
     * Specify whether a component should be visible to instant apps.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int visibleToInstantApps=0x01010531;
    /**
     * Flag indicating whether the application requests the VM to operate in
     * the safe mode.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int vmSafeMode=0x010102b8;
    /**
     * Voice button icon.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int voiceIcon=0x01010484;
    /**
     * If provided, this specifies the spoken language to be expected, and that it will be
     * different than the one set in the {@link java.util.Locale#getDefault()}.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int voiceLanguage=0x01010255;
    /**
     * If provided, this specifies the language model that should be used by the
     * voice recognition system.  See
     * {@link android.speech.RecognizerIntent#EXTRA_LANGUAGE_MODEL } for more information.
     * If not provided, the default value
     * {@link android.speech.RecognizerIntent#LANGUAGE_MODEL_FREE_FORM } will be used.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int voiceLanguageModel=0x01010253;
    /**
     * If provided, enforces the maximum number of results to return, including the "best"
     * result which will always be provided as the SEARCH intent's primary query.  Must be one
     * or greater.  If not provided, the recognizer will choose how many results to return.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int voiceMaxResults=0x01010256;
    /**
     * If provided, this specifies a prompt that will be displayed during voice input.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int voicePromptText=0x01010254;
    /**
     * Voice search features are controlled by mode bits in this field.  Omitting
     * this field, or setting to zero, provides default behavior.
     * If showVoiceSearchButton is set, then launchWebSearch or launchRecognizer must
     * also be set.  <i>Optional attribute.</i>
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>launchRecognizer</td><td>4</td><td>If set, the voice search button will take the user directly to a built-in
     * voice recording activity.  This activity will prompt the user to speak,
     * transcribe the spoken text, and forward the resulting query
     * text to the searchable activity, just as if the user had typed it into
     * the search UI and clicked the search button.</td></tr>
     * <tr><td>launchWebSearch</td><td>2</td><td>If set, the voice search button will take the user directly to a built-in
     * voice web search activity.  Most applications will not use this flag, as it
     * will take the user away from the activity in which search was invoked.</td></tr>
     * <tr><td>showVoiceSearchButton</td><td>1</td><td>If set, display a voice search button.  This only takes effect if voice search is
     * available on the device.</td></tr>
     * </table>
     */
    public static final int voiceSearchMode=0x01010252;
    /**
     * When opening a new activity that hides the wallpaper, while
     * currently showing the wallpaper, this is the animation that
     * is run on the new activity (which is entering the screen).
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int wallpaperCloseEnterAnimation=0x01010295;
    /**
     * When opening a new activity that hides the wallpaper, while
     * currently showing the wallpaper, this is the animation that
     * is run on the old wallpaper activity (which is exiting the screen).
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int wallpaperCloseExitAnimation=0x01010296;
    /**
     * When closing a foreround activity that is on top of the wallpaper
     * when the previous activity is also on top of the wallpaper,
     * this is the animation that is run on the previous activity
     * (which is entering the screen).  The wallpaper remains
     * static behind the animation.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int wallpaperIntraCloseEnterAnimation=0x01010299;
    /**
     * When closing a foreround activity that is on top of the wallpaper
     * when the previous activity is also on top of the wallpaper,
     * this is the animation that is run on the current activity
     * (which is exiting the screen).  The wallpaper remains
     * static behind the animation.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int wallpaperIntraCloseExitAnimation=0x0101029a;
    /**
     * When opening a new activity that is on top of the wallpaper
     * when the current activity is also on top of the wallpaper,
     * this is the animation that is run on the new activity
     * (which is entering the screen).  The wallpaper remains
     * static behind the animation.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int wallpaperIntraOpenEnterAnimation=0x01010297;
    /**
     * When opening a new activity that is on top of the wallpaper
     * when the current activity is also on top of the wallpaper,
     * this is the animation that is run on the current activity
     * (which is exiting the screen).  The wallpaper remains
     * static behind the animation.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int wallpaperIntraOpenExitAnimation=0x01010298;
    /**
     * When opening a new activity that shows the wallpaper, while
     * currently not showing the wallpaper, this is the animation that
     * is run on the new wallpaper activity (which is entering the screen).
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int wallpaperOpenEnterAnimation=0x01010293;
    /**
     * When opening a new activity that shows the wallpaper, while
     * currently not showing the wallpaper, this is the animation that
     * is run on the current activity (which is exiting the screen).
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int wallpaperOpenExitAnimation=0x01010294;
    /**
     * Default WebTextView style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int webTextViewStyle=0x010102b9;
    /**
     * Default WebView style.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int webViewStyle=0x01010085;
    /**
     * The text appearance for the week day abbreviation in the calendar header.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int weekDayTextAppearance=0x01010348;
    /**
     * @deprecated The color for the week numbers.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    @Deprecated
    public static final int weekNumberColor=0x01010345;
    /**
     * @deprecated The color for the separator line between weeks.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    @Deprecated
    public static final int weekSeparatorLineColor=0x01010346;
    /**
     * Defines the maximum weight sum. If unspecified, the sum is computed
     * by adding the layout_weight of all of the children. This can be
     * used for instance to give a single child 50% of the total available
     * space by giving it a layout_weight of 0.5 and setting the weightSum
     * to 1.0.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int weightSum=0x01010128;
    /**
     * Optional parameter which indicates where this widget can be shown,
     * ie. home screen, keyguard, search bar or any combination thereof.
     * Supports combined values using | operator.
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>home_screen</td><td>1</td><td></td></tr>
     * <tr><td>keyguard</td><td>2</td><td></td></tr>
     * <tr><td>searchbox</td><td>4</td><td></td></tr>
     * </table>
     */
    public static final int widgetCategory=0x010103c4;
    /**
     * Flags indicating various features supported by the widget. These are hints to the
     * widget host, and do not actually change the behavior of the widget.
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>configuration_optional</td><td>4</td><td>The widget provides a default configuration. The host may decide not to launch
     * the provided configuration activity.</td></tr>
     * <tr><td>hide_from_picker</td><td>2</td><td>The widget is added directly by the app, and does not need to appear in
     * the global list of available widgets</td></tr>
     * <tr><td>reconfigurable</td><td>1</td><td>The widget can be reconfigured anytime after it is bound</td></tr>
     * </table>
     */
    public static final int widgetFeatures=0x01010579;
    /**
     * The layout for the controllable widget portion of a Preference. This is inflated
     * into the layout for a Preference and should be used more frequently than
     * the layout attribute. For example, a checkbox preference would specify
     * a custom layout (consisting of just the CheckBox) here.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int widgetLayout=0x010101eb;
    /**
     * Makes the TextView be exactly this wide.
     * You could get the same effect by specifying this number in the
     * layout parameters.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int width=0x01010159;
    /**
     * Flag indicating whether this window should have an Action Bar
     * in place of the usual title bar.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int windowActionBar=0x010102cd;
    /**
     * Flag indicating whether this window's Action Bar should overlay
     * application content. Does nothing if the window would not
     * have an Action Bar.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int windowActionBarOverlay=0x010102e4;
    /**
     * Flag indicating whether action modes should overlay window content
     * when there is not reserved space for their UI (such as an Action Bar).
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int windowActionModeOverlay=0x010102dd;
    /**
     * Flag indicating whether this window allows Activity Transitions.
     * Corresponds to {@link android.view.Window#FEATURE_ACTIVITY_TRANSITIONS}.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int windowActivityTransitions=0x010104cd;
    /**
     * Flag indicating whether this Window's transition should overlap with
     * the exiting transition of the calling Activity. Corresponds to
     * {@link android.view.Window#setAllowEnterTransitionOverlap(boolean)}.
     * The default value is true.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int windowAllowEnterTransitionOverlap=0x0101043c;
    /**
     * Flag indicating whether this Window's transition should overlap with
     * the exiting transition of the called Activity when the called Activity
     * finishes. Corresponds to
     * {@link android.view.Window#setAllowReturnTransitionOverlap(boolean)}.
     * The default value is true.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int windowAllowReturnTransitionOverlap=0x0101043b;
    /**
     * Reference to a style resource holding
     * the set of window animations to use, which can be
     * any of the attributes defined by
     * {@link android.R.styleable#WindowAnimation}.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int windowAnimationStyle=0x010100ae;
    /**
     * Drawable to use as the overall window background.  As of
     * {@link android.os.Build.VERSION_CODES#HONEYCOMB}, this may
     * be a selector that uses state_accelerated to pick a non-solid
     * color when running on devices that can draw such a bitmap
     * with complex compositing on top at 60fps.
     * <p>There are a few special considerations to use when setting this
     * drawable:
     * <ul>
     * <li> This information will be used to infer the pixel format
     * for your window's surface.  If the drawable has any
     * non-opaque pixels, your window will be translucent
     * (32 bpp).
     * <li> If you want to draw the entire background
     * yourself, you should set this drawable to some solid
     * color that closely matches that background (so the
     * system's preview of your window will match), and
     * then in code manually set your window's background to
     * null so it will not be drawn.
     * </ul>
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int windowBackground=0x01010054;
    /**
     * Blur the screen behind the window with the bounds of the window.
     * The radius defines the size of the neighbouring area, from which pixels will be
     * averaged to form the final color for each pixel in the region.
     * A radius of 0 means no blur. The higher the radius, the denser the blur.
     * Corresponds to {@link android.view.Window#setBackgroundBlurRadius}.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int windowBackgroundBlurRadius=0x0101062b;
    /**
     * Drawable to draw selectively within the inset areas when the windowBackground
     * has been set to null. This protects against seeing visual garbage in the
     * surface when the app has not drawn any content into this area. One example is
     * when the user is resizing a window of an activity in multi-window mode.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int windowBackgroundFallback=0x01010503;
    /**
     * If set, everything behind the window will be blurred with radius
     * windowBackgroundBlurRadius.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int windowBlurBehindEnabled=0x0101061c;
    /**
     * When windowBlurBehindEnabled is set, this is the amount of blur to apply
     * behind the window. The range is from 0, which means no blur, to 150.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int windowBlurBehindRadius=0x0101061b;
    /**
     * Whether to clip window content to the outline of the window background.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int windowClipToOutline=0x010104ab;
    /**
     * Control whether a container should automatically close itself if
     * the user touches outside of it.  This only applies to activities
     * and dialogs.
     * <p>Note: this attribute will only be respected for applications
     * that are targeting {@link android.os.Build.VERSION_CODES#HONEYCOMB}
     * or later.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int windowCloseOnTouchOutside=0x0101035b;
    /**
     * This Drawable is overlaid over the foreground of the Window's content area, usually
     * to place a shadow below the title.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int windowContentOverlay=0x01010059;
    /**
     * Reference to a TransitionManager XML resource defining the desired
     * transitions between different window content.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int windowContentTransitionManager=0x010103f9;
    /**
     * Flag indicating whether this window requests that content changes be performed
     * as scene changes with transitions. Corresponds to
     * {@link android.view.Window#FEATURE_CONTENT_TRANSITIONS}.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int windowContentTransitions=0x010103f8;
    /**
     * Flag allowing you to disable the splash screen for a window. The default value is
     * false; if set to true, the system can never use the window's theme to show a splash
     * screen before your actual instance is shown to the user.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int windowDisablePreview=0x01010222;
    /**
     * Flag indicating whether this Window is responsible for drawing the background for the
     * system bars. If true and the window is not floating, the system bars are drawn with a
     * transparent background and the corresponding areas in this window are filled with the
     * colors specified in {@link android.R.attr#statusBarColor} and
     * {@link android.R.attr#navigationBarColor}. Corresponds to
     * {@link android.view.WindowManager.LayoutParams#FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS}.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int windowDrawsSystemBarBackgrounds=0x01010450;
    /**
     * Elevation to use for the window.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int windowElevation=0x01010490;
    /**
     * Flag indicating that this window should allow touches to be split
     * across other windows that also support split touch.
     * The default value is true for applications with a targetSdkVersion
     * of Honeycomb or newer; false otherwise.
     * When this flag is false, the first pointer that goes down determines
     * the window to which all subsequent touches go until all pointers go up.
     * When this flag is true, each pointer (not necessarily the first) that
     * goes down determines the window to which all subsequent touches of that
     * pointer will go until that pointers go up thereby enabling touches
     * with multiple pointers to be split across multiple windows.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int windowEnableSplitTouch=0x01010317;
    /**
     * The animation used when a window is being added.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int windowEnterAnimation=0x010100b4;
    /**
     * Reference to a Transition XML resource defining the desired Transition
     * used to move Views into the initial Window's content Scene. Corresponds to
     * {@link android.view.Window#setEnterTransition(android.transition.Transition)}.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int windowEnterTransition=0x01010437;
    /**
     * The animation used when a window is being removed.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int windowExitAnimation=0x010100b5;
    /**
     * Reference to a Transition XML resource defining the desired Transition
     * used to move Views out of the Window's content Scene when launching a new Activity.
     * Corresponds to
     * {@link android.view.Window#setExitTransition(android.transition.Transition)}.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int windowExitTransition=0x01010438;
    /**
     * Drawable to use as a frame around the window.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int windowFrame=0x01010055;
    /**
     * Flag indicating whether this window should fill the entire screen.  Corresponds
     * to {@link android.view.WindowManager.LayoutParams#FLAG_FULLSCREEN}.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int windowFullscreen=0x0101020d;
    /**
     * The animation used when a window is going from VISIBLE to INVISIBLE.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int windowHideAnimation=0x010100b7;
    /**
     * Flag indicating whether this is a floating window.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int windowIsFloating=0x01010057;
    /**
     * Flag indicating whether this is a translucent window.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int windowIsTranslucent=0x01010058;
    /**
     * Window layout affinity of this activity. Activities with the same window layout
     * affinity will share the same layout record. That is, if a user is opening an activity in
     * a new task on a display that can host freeform windows, and the user had opened a task
     * before and that task had a root activity who had the same window layout affinity, the
     * new task's window will be created in the same window mode and around the location which
     * the previously opened task was in.
     * <p>For example, if a user maximizes a task with root activity A and opens another
     * activity B that has the same window layout affinity as activity A has, activity B will
     * be created in fullscreen window mode. Similarly, if they move/resize a task with root
     * activity C and open another activity D that has the same window layout affinity as
     * activity C has, activity D will be in freeform window mode and as close to the position
     * of activity C as conditions permit. It doesn't require the user to keep the task with
     * activity A or activity C open. It won't, however, put any task into split-screen or PIP
     * window mode on launch.
     * <p>If the user is opening an activity with its window layout affinity for the first time,
     * the window mode and position is OEM defined.
     * <p>By default activity doesn't share any affinity with other activities.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int windowLayoutAffinity=0x01010619;
    /**
     * Controls how the window is laid out if there is a {@code DisplayCutout}.
     * <p>
     * Defaults to {@code default}.
     * <p>
     * See also
     * {@link android.view.WindowManager.LayoutParams#layoutInDisplayCutoutMode
     * WindowManager.LayoutParams.layoutInDisplayCutoutMode},
     * {@link android.view.WindowManager.LayoutParams#LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT},
     * {@link android.view.WindowManager.LayoutParams#LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES},
     * {@link android.view.WindowManager.LayoutParams#LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER},
     * and {@link android.view.DisplayCutout DisplayCutout}
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>always</td><td>3</td><td><p>
     * The window is always allowed to extend into the <code>DisplayCutout</code> areas on the
     * all edges of the screen.
     * <p>
     * The window must make sure that no important content overlaps with the
     * <code>DisplayCutout</code>.
     * <p>
     * Corresponds to <code>LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYS</code>.</td></tr>
     * <tr><td>default</td><td>0</td><td><p>
     * The window is allowed to extend into the <code>DisplayCutout</code> area, only if
     * the <code>DisplayCutout</code> is fully contained within a system bar. Otherwise, the
     * window is laid out such that it does not overlap with the <code>DisplayCutout</code>
     * area.
     * <p>
     * Corresponds to <code>LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT</code>.</td></tr>
     * <tr><td>never</td><td>2</td><td><p>
     * The window is never allowed to overlap with the <code>DisplayCutout</code> area.
     * <p>
     * This should be used with windows that transiently set
     * <code>SYSTEM_UI_FLAG_FULLSCREEN</code> to avoid a relayout of the window when the
     * flag is set or cleared.
     * <p>
     * Corresponds to <code>LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER</code>.</td></tr>
     * <tr><td>shortEdges</td><td>1</td><td><p>
     * The window is always allowed to extend into the <code>DisplayCutout</code> areas on the
     * short edges of the screen even if fullscreen or in landscape.
     * The window will never extend into a <code>DisplayCutout</code> area on the long edges of
     * the screen.
     * <p>
     * The window must make sure that no important content overlaps with the
     * <code>DisplayCutout</code>.
     * <p>
     * Corresponds to <code>LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES</code>.</td></tr>
     * </table>
     */
    public static final int windowLayoutInDisplayCutoutMode=0x01010586;
    /**
     * If set, the navigation bar will be drawn such that it is compatible with a light
     * navigation bar background.
     * <p>For this to take effect, the window must be drawing the system bar backgrounds with
     * {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the navigation bar must not
     * have been requested to be translucent with
     * {@link android.R.attr#windowTranslucentNavigation}.
     * Corresponds to setting {@link android.view.View#SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR} on
     * the decor view.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int windowLightNavigationBar=0x0101056c;
    /**
     * If set, the status bar will be drawn such that it is compatible with a light
     * status bar background.
     * <p>For this to take effect, the window must be drawing the system bar backgrounds with
     * {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the status bar must not
     * have been requested to be translucent with
     * {@link android.R.attr#windowTranslucentStatus}.
     * Corresponds to setting {@link android.view.View#SYSTEM_UI_FLAG_LIGHT_STATUS_BAR} on
     * the decor view.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int windowLightStatusBar=0x010104e0;
    /**
     * The minimum width the window is allowed to be, along the major
     * axis of the screen.  That is, when in landscape.  Can be either
     * an absolute dimension or a fraction of the screen size in that
     * dimension.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int windowMinWidthMajor=0x01010356;
    /**
     * The minimum width the window is allowed to be, along the minor
     * axis of the screen.  That is, when in portrait.  Can be either
     * an absolute dimension or a fraction of the screen size in that
     * dimension.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     */
    public static final int windowMinWidthMinor=0x01010357;
    /**
     * Flag indicating that this window should not be displayed at all.
     * The default value is false; if set to true, and this window is
     * the main window of an Activity, then it will never actually
     * be added to the window manager.  This means that your activity
     * must immediately quit without waiting for user interaction,
     * because there will be no such interaction coming.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int windowNoDisplay=0x0101021e;
    /**
     * Flag indicating whether there should be no title on this window.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int windowNoTitle=0x01010056;
    /**
     * Flag indicating whether this window should extend into overscan region.  Corresponds
     * to {@link android.view.WindowManager.LayoutParams#FLAG_LAYOUT_IN_OVERSCAN}.
     * @deprecated Overscan areas aren't set by any Android product anymore as of Android 11.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    @Deprecated
    public static final int windowOverscan=0x010103cf;
    /**
     * Reference to a Transition XML resource defining the desired Transition
     * used to move Views in to the scene when returning from a previously-started Activity.
     * Corresponds to
     * {@link android.view.Window#setReenterTransition(android.transition.Transition)}.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int windowReenterTransition=0x010104af;
    /**
     * Reference to a Transition XML resource defining the desired Transition
     * used to move Views out of the scene when the Window is
     * preparing to close. Corresponds to
     * {@link android.view.Window#setReturnTransition(android.transition.Transition)}.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int windowReturnTransition=0x010104ae;
    /**
     * Reference to a Transition XML resource defining the desired Transition
     * used to move shared elements transferred into the Window's initial content Scene.
     * Corresponds to {@link android.view.Window#setSharedElementEnterTransition(
     * android.transition.Transition)}.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int windowSharedElementEnterTransition=0x01010439;
    /**
     * Reference to a Transition XML resource defining the desired Transition
     * used when starting a new Activity to move shared elements prior to transferring
     * to the called Activity.
     * Corresponds to {@link android.view.Window#setSharedElementExitTransition(
     * android.transition.Transition)}.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int windowSharedElementExitTransition=0x0101043a;
    /**
     * Reference to a Transition XML resource defining the desired Transition
     * used for shared elements transferred back to a calling Activity.
     * Corresponds to {@link android.view.Window#setSharedElementReenterTransition(
     * android.transition.Transition)}.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int windowSharedElementReenterTransition=0x010104b1;
    /**
     * Reference to a Transition XML resource defining the desired Transition
     * used to move shared elements transferred back to a calling Activity.
     * Corresponds to {@link android.view.Window#setSharedElementReturnTransition(
     * android.transition.Transition)}.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int windowSharedElementReturnTransition=0x010104b0;
    /**
     * Indicates whether or not shared elements should use an overlay
     * during transitions. The default value is true.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int windowSharedElementsUseOverlay=0x010104bb;
    /**
     * The animation used when a window is going from INVISIBLE to VISIBLE.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int windowShowAnimation=0x010100b6;
    /**
     * Flag indicating that this window's background should be the
     * user's current wallpaper.  Corresponds
     * to {@link android.view.WindowManager.LayoutParams#FLAG_SHOW_WALLPAPER}.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int windowShowWallpaper=0x01010292;
    /**
     * Defines the default soft input state that this window would
     * like when it is displayed.  Corresponds
     * to {@link android.view.WindowManager.LayoutParams#softInputMode}.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>adjustNothing</td><td>30</td><td>Don't resize <em>or</em> pan the window to make room for the
     * soft input area; the window is never adjusted for it.</td></tr>
     * <tr><td>adjustPan</td><td>20</td><td>Don't resize the window to make room for the soft input area;
     * instead pan the contents of the window as focus moves inside
     * of it so that the user can see what they are typing.  This is
     * generally less desireable than panning because the user may
     * need to close the input area to get at and interact with
     * parts of the window.</td></tr>
     * <tr><td>adjustResize</td><td>10</td><td>Always resize the window: the content area of the window is
     * reduced to make room for the soft input area.</td></tr>
     * <tr><td>adjustUnspecified</td><td>0</td><td>The window resize/pan adjustment has not been specified,
     * the system will automatically select between resize and pan
     * modes, depending
     * on whether the content of the window has any layout views
     * that can scroll their contents.  If there is such a view,
     * then the window will be resized, with the assumption being
     * that the resizeable area can be reduced to make room for
     * the input UI.</td></tr>
     * <tr><td>stateAlwaysHidden</td><td>3</td><td>Always make the soft input area hidden when this window
     * has input focus.</td></tr>
     * <tr><td>stateAlwaysVisible</td><td>5</td><td>Always make the soft input area visible when this window
     * has input focus.</td></tr>
     * <tr><td>stateHidden</td><td>2</td><td>Make the soft input area hidden when normally appropriate
     * (when the user is navigating forward to your window).</td></tr>
     * <tr><td>stateUnchanged</td><td>1</td><td>Leave the soft input window as-is, in whatever state it
     * last was.</td></tr>
     * <tr><td>stateUnspecified</td><td>0</td><td>Not specified, use what the system thinks is best.  This
     * is the default.</td></tr>
     * <tr><td>stateVisible</td><td>4</td><td>Make the soft input area visible when normally appropriate
     * (when the user is navigating forward to your window).</td></tr>
     * </table>
     */
    public static final int windowSoftInputMode=0x0101022b;
    /**
     * Replace an icon in the center of the starting window, if the object is animated
     * and drawable(e.g. AnimationDrawable, AnimatedVectorDrawable), then it will also
     * play the animation while showing the starting window.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int windowSplashScreenAnimatedIcon=0x0101062d;
    /**
     * The duration, in milliseconds, of the window splash screen icon animation duration
     * when playing the splash screen starting window. The maximum animation duration should
     * be limited below 1000ms.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int windowSplashScreenAnimationDuration=0x0101062e;
    /**
     * The background color for the splash screen, if not specify then system will
     * calculate from windowBackground.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int windowSplashScreenBackground=0x0101062c;
    /**
     * Place an drawable image in the bottom of the starting window, it can be used to
     * represent the branding of the application.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int windowSplashScreenBrandingImage=0x0101062f;
    /**
     * Set a background behind the splash screen icon. This is useful if there is not enough
     * contrast between the window background and the icon. Note the shape would also be
     * masking like an icon.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int windowSplashScreenIconBackgroundColor=0x01010630;
    /**
     * {@deprecated Use windowSplashscreenAnimatedIcon instead }
     * Reference to a drawable to be used as the splash screen content of the window. This
     * drawable will be placed on top of the {@link android.R.attr#windowBackground} with its
     * bounds inset by the system bars. If the drawable should not be inset by the system
     * bars, use a fullscreen theme.
     * <p>
     * Note that even if no splashscreen content is set on the theme, the system may still
     * show a splash screen using the other attributes on the theme, like the
     * {@link android.R.attr#windowBackground}.
     * {@deprecated Use windowSplashscreenAnimatedIcon instead.}
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    @Deprecated
    public static final int windowSplashscreenContent=0x01010564;
    /**
     * Flag to indicate that a window can be swiped away to be dismissed.
     * Corresponds to {@link android.view.Window#FEATURE_SWIPE_TO_DISMISS}. It will also
     * dynamically change translucency of the window, if the windowIsTranslucent is not set.
     * If windowIsTranslucent is set (to either true or false) it will obey that setting.
     * @deprecated Swipe-to-dismiss isn't functional anymore.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    @Deprecated
    public static final int windowSwipeToDismiss=0x010103f3;
    /**
     * The style resource to use for a window's title area.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int windowTitleBackgroundStyle=0x0101005c;
    /**
     * The style resource to use for a window's title bar height.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int windowTitleSize=0x0101005a;
    /**
     * The style resource to use for a window's title text.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int windowTitleStyle=0x0101005b;
    /**
     * The duration, in milliseconds, of the window background fade duration
     * when transitioning into or away from an Activity when called with an
     * Activity Transition. Corresponds to
     * {@link android.view.Window#setTransitionBackgroundFadeDuration(long)}.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int windowTransitionBackgroundFadeDuration=0x01010461;
    /**
     * Flag indicating whether this window requests a translucent navigation bar.  Corresponds
     * to {@link android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_NAVIGATION}.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int windowTranslucentNavigation=0x010103f0;
    /**
     * Flag indicating whether this window requests a translucent status bar.  Corresponds
     * to {@link android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_STATUS}.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int windowTranslucentStatus=0x010103ef;
    /**
     * A specific {@link android.R.attr#permission} name for write
     * access to a {@link android.content.ContentProvider}.  See the
     * <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
     * document for more information on permissions.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int writePermission=0x01010008;
    /**
     * A coordinate in the X dimension.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int x=0x010100ac;
    /**
     * Indicates whether the application supports extra large screen form-factors.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int xlargeScreens=0x010102bf;
    /**
     * A coordinate in the Y dimension.
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int y=0x010100ad;
    /**
     * The list year's text appearance in the list.
     * {@deprecated Use yearListTextColor. }
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    @Deprecated
    public static final int yearListItemTextAppearance=0x01010499;
    /**
     * The list year's selected circle color in the list.
     * {@deprecated No longer displayed.}
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    @Deprecated
    public static final int yearListSelectorColor=0x0101049a;
    /**
     * Default style for YesNoPreference.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int yesNoPreferenceStyle=0x01010090;
    /**
     * Allows for an adjustment of the Z ordering of the content being
     * animated for the duration of the animation.  The default value is normal.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>ffffffff</td><td>The content being animated is forced under all other
     * content for the duration of the animation.</td></tr>
     * <tr><td>normal</td><td>0</td><td>The content being animated be kept in its current Z order.</td></tr>
     * <tr><td>top</td><td>1</td><td>The content being animated is forced on top of all other
     * content for the duration of the animation.</td></tr>
     * </table>
     */
    public static final int zAdjustment=0x010101c1;
    /**
     * Name of the class that gets invoked for preloading application code, when starting an
     * {@link android.R.attr#isolatedProcess} service that has
     * {@link android.R.attr#useAppZygote} set to <code>true</code>. This is a fully
     * qualified class name (for example, com.mycompany.myapp.MyZygotePreload); as a
     * short-hand if the first character of the class is a period then it is appended
     * to your package name. The class must implement the {@link android.app.ZygotePreload}
     * interface.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int zygotePreloadName=0x0101059d;
  }
  public static final class bool {
    /**
     * @hide
     * Set to true to make assistant show in front of the dream/screensaver.
     */
    @android.annotation.TestApi
    public static final int config_assistantOnTopOfDream=0x01110005;
    /**
     * @hide
     * Whether the system enables per-display focus. If the system has the input method for each
     * display, this value should be true.
     */
    @android.annotation.TestApi
    public static final int config_perDisplayFocusEnabled=0x01110004;
    /**
     * @hide
     * Control whether to force apps to give up control over the display of system bars at all
     * times regardless of System Ui Flags.
     * In the Automotive case, this is helpful if there's a requirement for an UI element to be on
     * screen at all times. Setting this to true also gives System UI the ability to override the
     * visibility controls for the system through the usage of the
     * "SYSTEM_BAR_VISIBILITY_OVERRIDE" setting.
     * Ex: Only setting the config to true will force show system bars for the entire system.
     * Ex: Setting the config to true and the "SYSTEM_BAR_VISIBILITY_OVERRIDE" setting to
     * "immersive.status=apps" will force show navigation bar for all apps and force hide status
     * bar for all apps.
     */
    @android.annotation.TestApi
    public static final int config_remoteInsetsControllerControlsSystemBars=0x01110006;
    /**
     * @hide
     * Whether to send a custom package name with the PSD.
     */
    @android.annotation.SystemApi
    public static final int config_sendPackageName=0x01110000;
    /**
     * @hide
     * Whether the default assistant settings should be shown.
     */
    @android.annotation.SystemApi
    public static final int config_showDefaultAssistant=0x01110001;
    /**
     * @hide
     * Whether the default emergency settings should be shown.
     */
    @android.annotation.SystemApi
    public static final int config_showDefaultEmergency=0x01110002;
    /**
     * @hide
     * Whether the default home settings should be shown.
     */
    @android.annotation.SystemApi
    public static final int config_showDefaultHome=0x01110003;
  }
  public static final class color {
    /**
     * Equivalent to 0xff000000
     * Equivalent to 0xff000000
     */
    public static final int background_dark=0x0106000e;
    /**
     * Equivalent to 0xffffffff
     * Equivalent to 0xffffffff
     */
    public static final int background_light=0x0106000f;
    /**
     * The color black, equivalent to 0xff000000
     */
    public static final int black=0x0106000c;
    /**
     * Equivalent to 0xffaaaaaa
     * A dark gray, equivalent to 0xffaaaaaa
     */
    public static final int darker_gray=0x01060000;
    /**
     * A really bright Holo shade of blue. Equivalent to #ff00ddff.
     */
    public static final int holo_blue_bright=0x0106001b;
    /**
     * A dark Holo shade of blue. Equivalent to #ff0099cc
     */
    public static final int holo_blue_dark=0x01060013;
    /**
     * A light Holo shade of blue. Equivalent to #ff33b5e5.
     */
    public static final int holo_blue_light=0x01060012;
    /**
     * A dark Holo shade of green. Equivalent to #ff669900
     */
    public static final int holo_green_dark=0x01060015;
    /**
     * A light Holo shade of green. Equivalent to #ff99cc00.
     */
    public static final int holo_green_light=0x01060014;
    /**
     * A dark Holo shade of orange. Equivalent to ffff8800.
     */
    public static final int holo_orange_dark=0x01060019;
    /**
     * A light Holo shade of orange. Equivalent to #ffffbb33.
     */
    public static final int holo_orange_light=0x01060018;
    /**
     * A Holo shade of purple. Equivalent to #ffaa66cc
     */
    public static final int holo_purple=0x0106001a;
    /**
     * A dark Holo shade of red. Equivalent to #ffcc0000
     */
    public static final int holo_red_dark=0x01060017;
    /**
     * A light Holo shade of red. Equivalent to #ffff4444. <
     */
    public static final int holo_red_light=0x01060016;
    /**
     * {@deprecated Use a text color from your theme instead.}
     */
    @Deprecated
    public static final int primary_text_dark=0x01060001;
    /**
     * {@deprecated Use a text color from your theme instead.}
     */
    @Deprecated
    public static final int primary_text_dark_nodisable=0x01060002;
    /**
     * {@deprecated Use a text color from your theme instead.}
     */
    @Deprecated
    public static final int primary_text_light=0x01060003;
    /**
     * {@deprecated Use a text color from your theme instead.}
     */
    @Deprecated
    public static final int primary_text_light_nodisable=0x01060004;
    /**
     * {@deprecated Use a text color from your theme instead.}
     */
    @Deprecated
    public static final int secondary_text_dark=0x01060005;
    /**
     * {@deprecated Use a text color from your theme instead.}
     */
    @Deprecated
    public static final int secondary_text_dark_nodisable=0x01060006;
    /**
     * {@deprecated Use a text color from your theme instead.}
     */
    @Deprecated
    public static final int secondary_text_light=0x01060007;
    /**
     * {@deprecated Use a text color from your theme instead.}
     */
    @Deprecated
    public static final int secondary_text_light_nodisable=0x01060008;
    /**
     * Lightest shade of the accent color used by the system. White.
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent1_0=0x01060037;
    /**
     * Shade of the accent system color at 99% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent1_10=0x01060038;
    /**
     * Shade of the accent system color at 90% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent1_100=0x0106003a;
    /**
     * Darkest shade of the accent color used by the system. Black.
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent1_1000=0x01060043;
    /**
     * Shade of the accent system color at 80% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent1_200=0x0106003b;
    /**
     * Shade of the accent system color at 70% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent1_300=0x0106003c;
    /**
     * Shade of the accent system color at 60% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent1_400=0x0106003d;
    /**
     * Shade of the accent system color at 95% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent1_50=0x01060039;
    /**
     * Shade of the accent system color at 49.6% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent1_500=0x0106003e;
    /**
     * Shade of the accent system color at 40% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent1_600=0x0106003f;
    /**
     * Shade of the accent system color at 30% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent1_700=0x01060040;
    /**
     * Shade of the accent system color at 20% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent1_800=0x01060041;
    /**
     * Shade of the accent system color at 10% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent1_900=0x01060042;
    /**
     * Lightest shade of the secondary accent color used by the system. White.
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent2_0=0x01060044;
    /**
     * Shade of the secondary accent system color at 99% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent2_10=0x01060045;
    /**
     * Shade of the secondary accent system color at 90% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent2_100=0x01060047;
    /**
     * Darkest shade of the secondary accent color used by the system. Black.
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent2_1000=0x01060050;
    /**
     * Shade of the secondary accent system color at 80% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent2_200=0x01060048;
    /**
     * Shade of the secondary accent system color at 70% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent2_300=0x01060049;
    /**
     * Shade of the secondary accent system color at 60% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent2_400=0x0106004a;
    /**
     * Shade of the secondary accent system color at 95% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent2_50=0x01060046;
    /**
     * Shade of the secondary accent system color at 49.6% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent2_500=0x0106004b;
    /**
     * Shade of the secondary accent system color at 40% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent2_600=0x0106004c;
    /**
     * Shade of the secondary accent system color at 30% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent2_700=0x0106004d;
    /**
     * Shade of the secondary accent system color at 20% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent2_800=0x0106004e;
    /**
     * Shade of the secondary accent system color at 10% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent2_900=0x0106004f;
    /**
     * Lightest shade of the tertiary accent color used by the system. White.
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent3_0=0x01060051;
    /**
     * Shade of the tertiary accent system color at 99% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent3_10=0x01060052;
    /**
     * Shade of the tertiary accent system color at 90% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent3_100=0x01060054;
    /**
     * Darkest shade of the tertiary accent color used by the system. Black.
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent3_1000=0x0106005d;
    /**
     * Shade of the tertiary accent system color at 80% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent3_200=0x01060055;
    /**
     * Shade of the tertiary accent system color at 70% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent3_300=0x01060056;
    /**
     * Shade of the tertiary accent system color at 60% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent3_400=0x01060057;
    /**
     * Shade of the tertiary accent system color at 95% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent3_50=0x01060053;
    /**
     * Shade of the tertiary accent system color at 49% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent3_500=0x01060058;
    /**
     * Shade of the tertiary accent system color at 40% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent3_600=0x01060059;
    /**
     * Shade of the tertiary accent system color at 30% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent3_700=0x0106005a;
    /**
     * Shade of the tertiary accent system color at 20% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent3_800=0x0106005b;
    /**
     * Shade of the tertiary accent system color at 10% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_accent3_900=0x0106005c;
    /**
     * Lightest shade of the neutral color used by the system. White.
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_neutral1_0=0x0106001d;
    /**
     * Shade of the neutral system color at 99% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_neutral1_10=0x0106001e;
    /**
     * Shade of the neutral system color at 90% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_neutral1_100=0x01060020;
    /**
     * Darkest shade of the neutral color used by the system. Black.
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_neutral1_1000=0x01060029;
    /**
     * Shade of the neutral system color at 80% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_neutral1_200=0x01060021;
    /**
     * Shade of the neutral system color at 70% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_neutral1_300=0x01060022;
    /**
     * Shade of the neutral system color at 60% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_neutral1_400=0x01060023;
    /**
     * Shade of the neutral system color at 95% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_neutral1_50=0x0106001f;
    /**
     * Shade of the neutral system color at 49% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_neutral1_500=0x01060024;
    /**
     * Shade of the neutral system color at 40% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_neutral1_600=0x01060025;
    /**
     * Shade of the neutral system color at 30% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_neutral1_700=0x01060026;
    /**
     * Shade of the neutral system color at 20% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_neutral1_800=0x01060027;
    /**
     * Shade of the neutral system color at 10% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_neutral1_900=0x01060028;
    /**
     * Lightest shade of the secondary neutral color used by the system. White.
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_neutral2_0=0x0106002a;
    /**
     * Shade of the secondary neutral system color at 99% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_neutral2_10=0x0106002b;
    /**
     * Shade of the secondary neutral system color at 90% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_neutral2_100=0x0106002d;
    /**
     * Darkest shade of the secondary neutral color used by the system. Black.
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_neutral2_1000=0x01060036;
    /**
     * Shade of the secondary neutral system color at 80% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_neutral2_200=0x0106002e;
    /**
     * Shade of the secondary neutral system color at 70% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_neutral2_300=0x0106002f;
    /**
     * Shade of the secondary neutral system color at 60% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_neutral2_400=0x01060030;
    /**
     * Shade of the secondary neutral system color at 95% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_neutral2_50=0x0106002c;
    /**
     * Shade of the secondary neutral system color at 49% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_neutral2_500=0x01060031;
    /**
     * Shade of the secondary neutral system color at 40% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_neutral2_600=0x01060032;
    /**
     * Shade of the secondary neutral system color at 30% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_neutral2_700=0x01060033;
    /**
     * Shade of the secondary neutral system color at 20% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_neutral2_800=0x01060034;
    /**
     * Shade of the secondary neutral system color at 10% perceptual luminance (L* in L*a*b* color space).
     * This value can be overlaid at runtime by OverlayManager RROs.
     */
    public static final int system_neutral2_900=0x01060035;
    /**
     * @hide
     */
    @android.annotation.SystemApi
    public static final int system_notification_accent_color=0x0106001c;
    /**
     * Equivalent to 0xff808080
     */
    public static final int tab_indicator_text=0x01060009;
    /**
     * {@deprecated Use a text color from your theme instead.}
     */
    @Deprecated
    public static final int tertiary_text_dark=0x01060010;
    /**
     * {@deprecated Use a text color from your theme instead.}
     */
    @Deprecated
    public static final int tertiary_text_light=0x01060011;
    /**
     * Fully transparent, equivalent to 0x00000000
     */
    public static final int transparent=0x0106000d;
    /**
     * The color white, equivalent to 0xffffffff
     */
    public static final int white=0x0106000b;
    /**
     * Equivalent to 0xff000000
     */
    public static final int widget_edittext_dark=0x0106000a;
  }
  public static final class dimen {
    /**
     * The standard size (both width and height) of an application icon that
     * will be displayed in the app launcher and elsewhere.
     */
    public static final int app_icon_size=0x01050000;
    /**
     * @hide
     * Size of icon shown beside a preference locked by admin
     */
    @android.annotation.SystemApi
    public static final int config_restrictedIconSize=0x01050007;
    /**
     * The platform's desired minimum size for a dialog's width when it
     * is along the major axis (that is the screen is landscape).  This may
     * be either a fraction or a dimension.
     */
    public static final int dialog_min_width_major=0x01050003;
    /**
     * The platform's desired minimum size for a dialog's width when it
     * is along the minor axis (that is the screen is portrait).  This may
     * be either a fraction or a dimension.
     */
    public static final int dialog_min_width_minor=0x01050004;
    /**
     * The width of the big icons in notifications.
     */
    public static final int notification_large_icon_height=0x01050006;
    /**
     * The width of the big icons in notifications.
     */
    public static final int notification_large_icon_width=0x01050005;
    /**
     * System-provided radius for the background view of app widgets. The resolved value of this resource may change at runtime.
     */
    public static final int system_app_widget_background_radius=0x01050008;
    /**
     * System-provided radius for inner views on app widgets. The resolved value of this resource may change at runtime.
     */
    public static final int system_app_widget_inner_radius=0x01050009;
    /**
     * The height that is used when creating thumbnails of applications.
     * The height that is used when creating thumbnails of applications.
     * The height that is used when creating thumbnails of applications.
     */
    public static final int thumbnail_height=0x01050001;
    /**
     * The width that is used when creating thumbnails of applications.
     * The width that is used when creating thumbnails of applications.
     * The width that is used when creating thumbnails of applications.
     */
    public static final int thumbnail_width=0x01050002;
  }
  public static final class drawable {
    public static final int alert_dark_frame=0x01080000;
    public static final int alert_light_frame=0x01080001;
    public static final int arrow_down_float=0x01080002;
    public static final int arrow_up_float=0x01080003;
    public static final int bottom_bar=0x0108009a;
    public static final int btn_default=0x01080004;
    public static final int btn_default_small=0x01080005;
    public static final int btn_dialog=0x01080017;
    public static final int btn_dropdown=0x01080006;
    public static final int btn_minus=0x01080007;
    public static final int btn_plus=0x01080008;
    public static final int btn_radio=0x01080009;
    public static final int btn_star=0x0108000a;
    public static final int btn_star_big_off=0x0108000b;
    public static final int btn_star_big_on=0x0108000c;
    public static final int button_onoff_indicator_off=0x0108000e;
    public static final int button_onoff_indicator_on=0x0108000d;
    public static final int checkbox_off_background=0x0108000f;
    public static final int checkbox_on_background=0x01080010;
    /**
     * Drawable to use as a background for separators on a list with a dark background
     */
    public static final int dark_header=0x010800a5;
    public static final int dialog_frame=0x01080011;
    public static final int dialog_holo_dark_frame=0x010800b2;
    public static final int dialog_holo_light_frame=0x010800b3;
    public static final int divider_horizontal_bright=0x01080012;
    public static final int divider_horizontal_dark=0x01080014;
    public static final int divider_horizontal_dim_dark=0x01080015;
    public static final int divider_horizontal_textfield=0x01080013;
    public static final int edit_text=0x01080016;
    public static final int editbox_background=0x01080018;
    public static final int editbox_background_normal=0x01080019;
    public static final int editbox_dropdown_dark_frame=0x0108001a;
    public static final int editbox_dropdown_light_frame=0x0108001b;
    public static final int gallery_thumb=0x0108001c;
    public static final int ic_btn_speak_now=0x010800a4;
    public static final int ic_delete=0x0108001d;
    public static final int ic_dialog_alert=0x01080027;
    public static final int ic_dialog_dialer=0x01080028;
    public static final int ic_dialog_email=0x01080029;
    public static final int ic_dialog_info=0x0108009b;
    public static final int ic_dialog_map=0x0108002a;
    /**
     * @hide
     */
    @android.annotation.SystemApi
    public static final int ic_info=0x010800b4;
    public static final int ic_input_add=0x0108002b;
    public static final int ic_input_delete=0x0108002c;
    public static final int ic_input_get=0x0108002d;
    public static final int ic_lock_idle_alarm=0x0108002e;
    public static final int ic_lock_idle_charging=0x0108001e;
    public static final int ic_lock_idle_lock=0x0108001f;
    public static final int ic_lock_idle_low_battery=0x01080020;
    public static final int ic_lock_lock=0x0108002f;
    public static final int ic_lock_power_off=0x01080030;
    public static final int ic_lock_silent_mode=0x01080031;
    public static final int ic_lock_silent_mode_off=0x01080032;
    public static final int ic_media_ff=0x01080021;
    public static final int ic_media_next=0x01080022;
    public static final int ic_media_pause=0x01080023;
    public static final int ic_media_play=0x01080024;
    public static final int ic_media_previous=0x01080025;
    public static final int ic_media_rew=0x01080026;
    public static final int ic_menu_add=0x01080033;
    public static final int ic_menu_agenda=0x01080034;
    public static final int ic_menu_always_landscape_portrait=0x01080035;
    public static final int ic_menu_call=0x01080036;
    public static final int ic_menu_camera=0x01080037;
    public static final int ic_menu_close_clear_cancel=0x01080038;
    public static final int ic_menu_compass=0x01080039;
    public static final int ic_menu_crop=0x0108003a;
    public static final int ic_menu_day=0x0108003b;
    public static final int ic_menu_delete=0x0108003c;
    public static final int ic_menu_directions=0x0108003d;
    public static final int ic_menu_edit=0x0108003e;
    public static final int ic_menu_gallery=0x0108003f;
    public static final int ic_menu_help=0x01080040;
    public static final int ic_menu_info_details=0x01080041;
    public static final int ic_menu_manage=0x01080042;
    public static final int ic_menu_mapmode=0x01080043;
    public static final int ic_menu_month=0x01080044;
    public static final int ic_menu_more=0x01080045;
    public static final int ic_menu_my_calendar=0x01080046;
    public static final int ic_menu_mylocation=0x01080047;
    public static final int ic_menu_myplaces=0x01080048;
    public static final int ic_menu_preferences=0x01080049;
    public static final int ic_menu_recent_history=0x0108004a;
    public static final int ic_menu_report_image=0x0108004b;
    public static final int ic_menu_revert=0x0108004c;
    public static final int ic_menu_rotate=0x0108004d;
    public static final int ic_menu_save=0x0108004e;
    public static final int ic_menu_search=0x0108004f;
    public static final int ic_menu_send=0x01080050;
    public static final int ic_menu_set_as=0x01080051;
    public static final int ic_menu_share=0x01080052;
    public static final int ic_menu_slideshow=0x01080053;
    public static final int ic_menu_sort_alphabetically=0x0108009c;
    public static final int ic_menu_sort_by_size=0x0108009d;
    public static final int ic_menu_today=0x01080054;
    public static final int ic_menu_upload=0x01080055;
    public static final int ic_menu_upload_you_tube=0x01080056;
    public static final int ic_menu_view=0x01080057;
    public static final int ic_menu_week=0x01080058;
    public static final int ic_menu_zoom=0x01080059;
    public static final int ic_notification_clear_all=0x0108005a;
    public static final int ic_notification_overlay=0x0108005b;
    public static final int ic_partial_secure=0x0108005c;
    public static final int ic_popup_disk_full=0x0108005d;
    public static final int ic_popup_reminder=0x0108005e;
    public static final int ic_popup_sync=0x0108005f;
    public static final int ic_search_category_default=0x01080060;
    public static final int ic_secure=0x01080061;
    public static final int list_selector_background=0x01080062;
    public static final int menu_frame=0x01080063;
    public static final int menu_full_frame=0x01080064;
    public static final int menuitem_background=0x01080065;
    public static final int picture_frame=0x01080066;
    public static final int presence_audio_away=0x010800af;
    public static final int presence_audio_busy=0x010800b0;
    public static final int presence_audio_online=0x010800b1;
    public static final int presence_away=0x01080067;
    public static final int presence_busy=0x01080068;
    public static final int presence_invisible=0x01080069;
    public static final int presence_offline=0x0108006a;
    public static final int presence_online=0x0108006b;
    /**
     * presence drawables for videochat or audiochat capable contacts
     */
    public static final int presence_video_away=0x010800ac;
    public static final int presence_video_busy=0x010800ad;
    public static final int presence_video_online=0x010800ae;
    public static final int progress_horizontal=0x0108006c;
    public static final int progress_indeterminate_horizontal=0x0108006d;
    public static final int radiobutton_off_background=0x0108006e;
    public static final int radiobutton_on_background=0x0108006f;
    public static final int screen_background_dark=0x01080098;
    /**
     * Semi-transparent background that can be used when placing a dark
     * themed UI on top of some arbitrary background (such as the
     * wallpaper).  This darkens the background sufficiently that the UI
     * can be seen.
     * Background drawable that can be used for a transparent activity to
     * be able to display a dark UI: this darkens its background to make
     * a dark (default theme) UI more visible.
     */
    public static final int screen_background_dark_transparent=0x010800a9;
    public static final int screen_background_light=0x01080099;
    /**
     * Background drawable that can be used for a transparent activity to
     * be able to display a light UI: this lightens its background to make
     * a light UI more visible.
     */
    public static final int screen_background_light_transparent=0x010800aa;
    public static final int spinner_background=0x01080070;
    public static final int spinner_dropdown_background=0x01080071;
    public static final int star_big_off=0x01080073;
    public static final int star_big_on=0x01080072;
    public static final int star_off=0x01080075;
    public static final int star_on=0x01080074;
    public static final int stat_notify_call_mute=0x01080076;
    public static final int stat_notify_chat=0x01080077;
    public static final int stat_notify_error=0x01080078;
    public static final int stat_notify_missed_call=0x0108007f;
    public static final int stat_notify_more=0x01080079;
    public static final int stat_notify_sdcard=0x0108007a;
    public static final int stat_notify_sdcard_prepare=0x010800ab;
    public static final int stat_notify_sdcard_usb=0x0108007b;
    public static final int stat_notify_sync=0x0108007c;
    public static final int stat_notify_sync_noanim=0x0108007d;
    public static final int stat_notify_voicemail=0x0108007e;
    public static final int stat_sys_data_bluetooth=0x01080080;
    public static final int stat_sys_download=0x01080081;
    public static final int stat_sys_download_done=0x01080082;
    public static final int stat_sys_headset=0x01080083;
    /**
     * @deprecated Replaced by a private asset in the phone app.
     */
    @Deprecated
    public static final int stat_sys_phone_call=0x01080084;
    /**
     * @deprecated Replaced by a private asset in the phone app.
     */
    @Deprecated
    public static final int stat_sys_phone_call_forward=0x01080085;
    /**
     * @deprecated Replaced by a private asset in the phone app.
     */
    @Deprecated
    public static final int stat_sys_phone_call_on_hold=0x01080086;
    public static final int stat_sys_speakerphone=0x01080087;
    public static final int stat_sys_upload=0x01080088;
    public static final int stat_sys_upload_done=0x01080089;
    /**
     * @deprecated Replaced by a private asset in the phone app.
     */
    @Deprecated
    public static final int stat_sys_vp_phone_call=0x010800a7;
    /**
     * @deprecated Replaced by a private asset in the phone app.
     */
    @Deprecated
    public static final int stat_sys_vp_phone_call_on_hold=0x010800a8;
    public static final int stat_sys_warning=0x0108008a;
    public static final int status_bar_item_app_background=0x0108008b;
    public static final int status_bar_item_background=0x0108008c;
    public static final int sym_action_call=0x0108008d;
    public static final int sym_action_chat=0x0108008e;
    public static final int sym_action_email=0x0108008f;
    public static final int sym_call_incoming=0x01080090;
    public static final int sym_call_missed=0x01080091;
    public static final int sym_call_outgoing=0x01080092;
    public static final int sym_contact_card=0x01080094;
    public static final int sym_def_app_icon=0x01080093;
    public static final int title_bar=0x01080095;
    /**
     * Drawable to use as a background for a taller version of the titlebar
     */
    public static final int title_bar_tall=0x010800a6;
    public static final int toast_frame=0x01080096;
    public static final int zoom_plate=0x01080097;
  }
  public static final class fraction {
  }
  public static final class id {
    /**
     * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_CONTEXT_CLICK}.
     */
    public static final int accessibilityActionContextClick=0x0102003c;
    /**
     * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_DRAG_CANCEL}.
     */
    public static final int accessibilityActionDragCancel=0x01020057;
    /**
     * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_DRAG_DROP}.
     */
    public static final int accessibilityActionDragDrop=0x01020056;
    /**
     * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_DRAG_START}.
     */
    public static final int accessibilityActionDragStart=0x01020055;
    /**
     * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_HIDE_TOOLTIP}.
     */
    public static final int accessibilityActionHideTooltip=0x01020045;
    /**
     * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_IME_ENTER}.
     */
    public static final int accessibilityActionImeEnter=0x01020054;
    /**
     * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_MOVE_WINDOW}.
     */
    public static final int accessibilityActionMoveWindow=0x01020042;
    /**
     * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_PAGE_DOWN}.
     */
    public static final int accessibilityActionPageDown=0x01020047;
    /**
     * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_PAGE_LEFT}.
     */
    public static final int accessibilityActionPageLeft=0x01020048;
    /**
     * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_PAGE_RIGHT}.
     */
    public static final int accessibilityActionPageRight=0x01020049;
    /**
     * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_PAGE_UP}.
     */
    public static final int accessibilityActionPageUp=0x01020046;
    /**
     * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_PRESS_AND_HOLD}.
     */
    public static final int accessibilityActionPressAndHold=0x0102004a;
    /**
     * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_SCROLL_DOWN}.
     */
    public static final int accessibilityActionScrollDown=0x0102003a;
    /**
     * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_SCROLL_LEFT}.
     */
    public static final int accessibilityActionScrollLeft=0x01020039;
    /**
     * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_SCROLL_RIGHT}.
     */
    public static final int accessibilityActionScrollRight=0x0102003b;
    /**
     * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_SCROLL_TO_POSITION}.
     */
    public static final int accessibilityActionScrollToPosition=0x01020037;
    /**
     * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_SCROLL_UP}.
     */
    public static final int accessibilityActionScrollUp=0x01020038;
    /**
     * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_SET_PROGRESS}.
     */
    public static final int accessibilityActionSetProgress=0x0102003d;
    /**
     * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_SHOW_ON_SCREEN}.
     */
    public static final int accessibilityActionShowOnScreen=0x01020036;
    /**
     * Accessibility action identifier for {@link android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction#ACTION_SHOW_TOOLTIP}.
     */
    public static final int accessibilityActionShowTooltip=0x01020044;
    /**
     * Accessibility action identifier for {@link android.accessibilityservice.AccessibilityService#GLOBAL_ACTION_BACK}.
     */
    public static final int accessibilitySystemActionBack=0x0102004b;
    /**
     * Accessibility action identifier for {@link android.accessibilityservice.AccessibilityService#GLOBAL_ACTION_HOME}.
     */
    public static final int accessibilitySystemActionHome=0x0102004c;
    /**
     * Accessibility action identifier for {@link android.accessibilityservice.AccessibilityService#GLOBAL_ACTION_LOCK_SCREEN}.
     */
    public static final int accessibilitySystemActionLockScreen=0x01020052;
    /**
     * Accessibility action identifier for {@link android.accessibilityservice.AccessibilityService#GLOBAL_ACTION_NOTIFICATIONS}.
     */
    public static final int accessibilitySystemActionNotifications=0x0102004e;
    /**
     * Accessibility action identifier for {@link android.accessibilityservice.AccessibilityService#GLOBAL_ACTION_POWER_DIALOG}.
     */
    public static final int accessibilitySystemActionPowerDialog=0x01020050;
    /**
     * Accessibility action identifier for {@link android.accessibilityservice.AccessibilityService#GLOBAL_ACTION_QUICK_SETTINGS}.
     */
    public static final int accessibilitySystemActionQuickSettings=0x0102004f;
    /**
     * Accessibility action identifier for {@link android.accessibilityservice.AccessibilityService#GLOBAL_ACTION_RECENTS}.
     */
    public static final int accessibilitySystemActionRecents=0x0102004d;
    /**
     * Accessibility action identifier for {@link android.accessibilityservice.AccessibilityService#GLOBAL_ACTION_TAKE_SCREENSHOT}.
     */
    public static final int accessibilitySystemActionTakeScreenshot=0x01020053;
    /**
     * Accessibility action identifier for {@link android.accessibilityservice.AccessibilityService#GLOBAL_ACTION_TOGGLE_SPLIT_SCREEN}.
     */
    public static final int accessibilitySystemActionToggleSplitScreen=0x01020051;
    /**
     * Menu ID to perform a "add to dictionary" operation.
     */
    public static final int addToDictionary=0x0102002a;
    /**
     * Action used to manually trigger an autofill request
     */
    public static final int autofill=0x01020043;
    public static final int background=0x01020000;
    public static final int button1=0x01020019;
    public static final int button2=0x0102001a;
    public static final int button3=0x0102001b;
    /**
     * The part of the UI shown by an
     * {@link android.inputmethodservice.InputMethodService} that contains the
     * views for displaying candidates for what the user has entered.
     */
    public static final int candidatesArea=0x0102001d;
    public static final int checkbox=0x01020001;
    /**
     * View ID of a {@link android.view.View} to close a popup keyboard
     */
    public static final int closeButton=0x01020027;
    public static final int content=0x01020002;
    /**
     * Context menu ID for the "Copy" menu item to copy the currently
     * selected (or all) text in a text view to the clipboard.
     */
    public static final int copy=0x01020021;
    /**
     * Context menu ID for the "Copy URL" menu item to copy the currently
     * selected URL from the text view to the clipboard.
     */
    public static final int copyUrl=0x01020023;
    public static final int custom=0x0102002b;
    /**
     * Context menu ID for the "Cut" menu item to copy and delete the currently
     * selected (or all) text in a text view to the clipboard.
     */
    public static final int cut=0x01020020;
    public static final int edit=0x01020003;
    public static final int empty=0x01020004;
    /**
     * The part of the UI shown by an
     * {@link android.inputmethodservice.InputMethodService} that contains the
     * views for interacting with the user in extraction mode.
     */
    public static final int extractArea=0x0102001c;
    public static final int hint=0x01020005;
    public static final int home=0x0102002c;
    public static final int icon=0x01020006;
    public static final int icon1=0x01020007;
    public static final int icon2=0x01020008;
    public static final int icon_frame=0x0102003e;
    public static final int input=0x01020009;
    /**
     * The part of the UI shown by an
     * {@link android.inputmethodservice.InputMethodService} that contains the
     * views for entering text using the screen.
     */
    public static final int inputArea=0x0102001e;
    /**
     * View ID of the text editor inside of an extracted text layout.
     */
    public static final int inputExtractEditText=0x01020025;
    /**
     * View ID of the {@link android.inputmethodservice.KeyboardView} within
     * an input method's input area.
     * {@deprecated Use Copy this definition into your own application project.}
     */
    @Deprecated
    public static final int keyboardView=0x01020026;
    public static final int list=0x0102000a;
    public static final int list_container=0x0102003f;
    public static final int mask=0x0102002e;
    public static final int message=0x0102000b;
    public static final int navigationBarBackground=0x01020030;
    /**
     * Context menu ID for the "Paste" menu item to copy the current contents
     * of the clipboard into the text view.
     */
    public static final int paste=0x01020022;
    public static final int pasteAsPlainText=0x01020031;
    public static final int primary=0x0102000c;
    public static final int progress=0x0102000d;
    public static final int redo=0x01020033;
    public static final int replaceText=0x01020034;
    public static final int secondaryProgress=0x0102000f;
    /**
     * Context menu ID for the "Select All" menu item to select all text
     * in a text view.
     */
    public static final int selectAll=0x0102001f;
    /**
     * Context menu ID for the "Select text..." menu item to switch to text
     * selection context mode in text views.
     */
    public static final int selectTextMode=0x0102002d;
    public static final int selectedIcon=0x0102000e;
    public static final int shareText=0x01020035;
    /**
     * Menu ID to perform a "start selecting text" operation.
     */
    public static final int startSelectingText=0x01020028;
    public static final int statusBarBackground=0x0102002f;
    /**
     * Menu ID to perform a "stop selecting text" operation.
     */
    public static final int stopSelectingText=0x01020029;
    public static final int summary=0x01020010;
    /**
     * Context menu ID for the "Input Method" menu item to being up the
     * input method picker dialog, allowing the user to switch to another
     * input method.
     */
    public static final int switchInputMethod=0x01020024;
    public static final int switch_widget=0x01020040;
    public static final int tabcontent=0x01020011;
    public static final int tabhost=0x01020012;
    public static final int tabs=0x01020013;
    public static final int text1=0x01020014;
    public static final int text2=0x01020015;
    public static final int textAssist=0x01020041;
    public static final int title=0x01020016;
    public static final int toggle=0x01020017;
    public static final int undo=0x01020032;
    public static final int widget_frame=0x01020018;
  }
  public static final class integer {
    /**
     * The duration (in milliseconds) of a long animation.
     */
    public static final int config_longAnimTime=0x010e0002;
    /**
     * The duration (in milliseconds) of a medium-length animation.
     */
    public static final int config_mediumAnimTime=0x010e0001;
    /**
     * The duration (in milliseconds) of a short animation.
     */
    public static final int config_shortAnimTime=0x010e0000;
    /**
     * Maximum numerical value that will be shown in a status bar
     * notification icon or in the notification itself. Will be replaced
     * with @string/status_bar_notification_info_overflow when shown in the
     * UI.
     */
    public static final int status_bar_notification_info_maxnum=0x010e0003;
  }
  public static final class interpolator {
    /**
     * Acceleration curve matching a cubic ease out function.
     */
    public static final int accelerate_cubic=0x010c0002;
    /**
     * Acceleration curve matching an ease in + ease out function
     */
    public static final int accelerate_decelerate=0x010c0006;
    /**
     * Acceleration curve matching a quadtratic ease out function.
     */
    public static final int accelerate_quad=0x010c0000;
    /**
     * Acceleration curve matching a quint ease out function.
     */
    public static final int accelerate_quint=0x010c0004;
    /**
     * An interpolator where the change starts backward then flings forward.
     */
    public static final int anticipate=0x010c0007;
    /**
     * An interpolator where the change starts backward then flings forward and
     * overshoots the target value and finally goes back to the final value.
     */
    public static final int anticipate_overshoot=0x010c0009;
    /**
     * An interpolator where the change bounces at the end.
     */
    public static final int bounce=0x010c000a;
    /**
     * Repeats the animation for one cycle. The rate of change follows a
     * sinusoidal pattern.
     */
    public static final int cycle=0x010c000c;
    /**
     * Acceleration curve matching a cubic ease in function.
     */
    public static final int decelerate_cubic=0x010c0003;
    /**
     * Acceleration curve matching a quadtratic ease in function.
     */
    public static final int decelerate_quad=0x010c0001;
    /**
     * Acceleration curve matching a quint ease in function.
     */
    public static final int decelerate_quint=0x010c0005;
    /**
     * An interpolator which accelerates fast but decelerates extra slowly.
     */
    public static final int fast_out_extra_slow_in=0x010c001a;
    /**
     * An interpolator which accelerates fast and keeps accelerating until the end.
     */
    public static final int fast_out_linear_in=0x010c000f;
    /**
     * An interpolator which accelerates fast but decelerates slowly.
     */
    public static final int fast_out_slow_in=0x010c000d;
    /**
     * An interpolator where the rate of change is constant.
     */
    public static final int linear=0x010c000b;
    /**
     * An interpolator which starts with a peak non-zero velocity and decelerates slowly.
     */
    public static final int linear_out_slow_in=0x010c000e;
    /**
     * An interpolator where the change flings forward and overshoots the last
     * value then comes back.
     */
    public static final int overshoot=0x010c0008;
  }
  public static final class layout {
    public static final int activity_list_item=0x01090000;
    public static final int browser_link_context_header=0x0109000e;
    public static final int expandable_list_content=0x01090001;
    /**
     * Standard content view for a {@link android.app.ListFragment}.
     * If you are implementing a subclass of ListFragment with your
     * own customized content, you can include this layout in that
     * content to still retain all of the standard functionality of
     * the base class.
     */
    public static final int list_content=0x01090014;
    public static final int preference_category=0x01090002;
    public static final int select_dialog_item=0x01090011;
    public static final int select_dialog_multichoice=0x01090013;
    public static final int select_dialog_singlechoice=0x01090012;
    public static final int simple_dropdown_item_1line=0x0109000a;
    public static final int simple_expandable_list_item_1=0x01090006;
    public static final int simple_expandable_list_item_2=0x01090007;
    public static final int simple_gallery_item=0x0109000b;
    public static final int simple_list_item_1=0x01090003;
    public static final int simple_list_item_2=0x01090004;
    /**
     * A version of {@link #simple_list_item_1} that is able to change its
     * background state to indicate when it is activated (that is checked by
     * a ListView).
     */
    public static final int simple_list_item_activated_1=0x01090016;
    /**
     * A version of {@link #simple_list_item_2} that is able to change its
     * background state to indicate when it is activated (that is checked by
     * a ListView).
     */
    public static final int simple_list_item_activated_2=0x01090017;
    public static final int simple_list_item_checked=0x01090005;
    public static final int simple_list_item_multiple_choice=0x01090010;
    public static final int simple_list_item_single_choice=0x0109000f;
    /**
     * A simple ListView item layout which can contain text and support (single or multiple) item selection.
     */
    public static final int simple_selectable_list_item=0x01090015;
    public static final int simple_spinner_dropdown_item=0x01090009;
    public static final int simple_spinner_item=0x01090008;
    public static final int test_list_item=0x0109000c;
    public static final int two_line_list_item=0x0109000d;
  }
  public static final class menu {
  }
  public static final class mipmap {
    /**
     * Default icon for applications that don't specify an icon.
     */
    public static final int sym_def_app_icon=0x010d0000;
  }
  public static final class plurals {
  }
  public static final class raw {
    /**
     * WebView error page for when the load fails. @hide
     */
    @android.annotation.SystemApi
    public static final int loaderror=0x01100000;
    /**
     * WebView error page for when domain lookup fails. @hide
     */
    @android.annotation.SystemApi
    public static final int nodomain=0x01100001;
  }
  public static final class string {
    /**
     * Button to close error alert when a video cannot be played
     */
    public static final int VideoView_error_button=0x01040010;
    /**
     * Text for error alert when a video container is not valid for progressive download/playback.
     */
    public static final int VideoView_error_text_invalid_progressive_playback=0x01040015;
    /**
     * Text for error alert when a video cannot be played. it can be used by any app.
     */
    public static final int VideoView_error_text_unknown=0x01040011;
    /**
     * Title for error alert when a video cannot be played.  it can be used by any app.
     */
    public static final int VideoView_error_title=0x01040012;
    /**
     * Item on EditText context menu. This action is used to request autofill.
     */
    public static final int autofill=0x0104001a;
    /**
     * Preference framework strings.
     */
    public static final int cancel=0x01040000;
    /**
     * @hide
     * Component name of custom media key dispatcher class used by MediaSessionService.
     */
    @android.annotation.SystemApi
    public static final int config_customMediaKeyDispatcher=0x0104002c;
    /**
     * @hide
     * Component name of custom media session policy provider class used by
     * MediaSessionService.
     */
    @android.annotation.SystemApi
    public static final int config_customMediaSessionPolicyProvider=0x0104002d;
    /**
     * @hide
     * The name of the package that will hold the assistant role by default.
     */
    @android.annotation.SystemApi
    @android.annotation.TestApi
    public static final int config_defaultAssistant=0x01040021;
    /**
     * @hide
     * The name of the package that will hold the browser role by default.
     */
    @android.annotation.SystemApi
    public static final int config_defaultBrowser=0x01040022;
    /**
     * @hide
     * The name of the package that will hold the call redirection role by default.
     */
    @android.annotation.SystemApi
    public static final int config_defaultCallRedirection=0x01040025;
    /**
     * @hide
     * The name of the package that will hold the call screening role by default.
     */
    @android.annotation.SystemApi
    public static final int config_defaultCallScreening=0x01040026;
    /**
     * @hide
     * The name of the package that will hold the dialer role by default.
     */
    @android.annotation.SystemApi
    @android.annotation.TestApi
    public static final int config_defaultDialer=0x01040023;
    /**
     * @hide For use by platform and tools only. Developers should not specify this value.
     * URI for default ringtone sound file to be used for silent ringer vibration
     */
    public static final int config_defaultRingtoneVibrationSound=0x0104003b;
    /**
     * @hide
     * The name of the package that will hold the SMS role by default.
     */
    @android.annotation.SystemApi
    public static final int config_defaultSms=0x01040024;
    /**
     * @hide
     * Intent key for the package name keys
     */
    @android.annotation.SystemApi
    public static final int config_feedbackIntentExtraKey=0x0104001f;
    /**
     * @hide
     * Intent key for package name values
     */
    @android.annotation.SystemApi
    public static final int config_feedbackIntentNameKey=0x01040020;
    /**
     * @hide
     * Intent key for the package name keys
     */
    @android.annotation.SystemApi
    public static final int config_helpIntentExtraKey=0x0104001d;
    /**
     * @hide
     * Intent key for package name values
     */
    @android.annotation.SystemApi
    public static final int config_helpIntentNameKey=0x0104001e;
    /**
     * @hide
     * Name for the set of keys associating package names
     */
    @android.annotation.SystemApi
    public static final int config_helpPackageNameKey=0x0104001b;
    /**
     * @hide
     * Name for the set of values of package names
     */
    @android.annotation.SystemApi
    public static final int config_helpPackageNameValue=0x0104001c;
    /**
     * @hide
     * The name of the package that will hold the system activity recognizer role.
     */
    @android.annotation.SystemApi
    public static final int config_systemActivityRecognizer=0x01040038;
    /**
     * @hide
     * Package name of the on-device intelligent processor for ambient audio.
     * Ambient audio is the sound surrounding the device captured by the DSP
     * or the microphone. In other words, the device is continuously
     * processing audio data in background.
     */
    @android.annotation.SystemApi
    public static final int config_systemAmbientAudioIntelligence=0x01040033;
    /**
     * @hide
     * Package name of the on-device intelligent processor for audio. The
     * difference of 'ambient audio' and 'audio' is that in 'audio', the
     * user intentionally and consciously aware that the device is recording
     * or using the microphone.
     */
    @android.annotation.SystemApi
    public static final int config_systemAudioIntelligence=0x01040034;
    /**
     * @hide
     * The name of the package that will hold the system cluster service role.
     */
    @android.annotation.SystemApi
    @android.annotation.TestApi
    public static final int config_systemAutomotiveCluster=0x01040028;
    /**
     * @hide
     * The names of the packages that will hold the automotive projection role.
     */
    @android.annotation.SystemApi
    @android.annotation.TestApi
    public static final int config_systemAutomotiveProjection=0x01040029;
    /**
     * @hide
     * On-device package for providing companion device associations.
     */
    @android.annotation.SystemApi
    public static final int config_systemCompanionDeviceProvider=0x01040039;
    /**
     * @hide
     * The name of the package that will hold the system contacts role.
     */
    @android.annotation.SystemApi
    public static final int config_systemContacts=0x0104002b;
    /**
     * @hide
     * The name of the package that will hold the system gallery role.
     */
    @android.annotation.SystemApi
    @android.annotation.TestApi
    public static final int config_systemGallery=0x01040027;
    /**
     * @hide
     * Package name of the on-device intelligent processor for notification.
     */
    @android.annotation.SystemApi
    public static final int config_systemNotificationIntelligence=0x01040035;
    /**
     * @hide
     * The name of the package that will hold the system shell role.
     */
    @android.annotation.SystemApi
    public static final int config_systemShell=0x0104002a;
    /**
     * @hide
     * The name of the package that will hold the speech recognizer role by default.
     */
    @android.annotation.SystemApi
    public static final int config_systemSpeechRecognizer=0x0104002e;
    /**
     * @hide
     * The name of the package that will hold the television notification handler role
     */
    @android.annotation.SystemApi
    public static final int config_systemTelevisionNotificationHandler=0x01040031;
    /**
     * @hide
     * Package name of the on-device intelligent processor for text. Examples
     * include providing autofill functionality based on incoming text
     * messages.
     */
    @android.annotation.SystemApi
    public static final int config_systemTextIntelligence=0x01040036;
    /**
     * @hide
     * The name of the package that will hold the system ui role
     */
    @android.annotation.SystemApi
    public static final int config_systemUi=0x0104003a;
    /**
     * @hide
     * Package name of the on-device intelligent processor for system UI
     * features. Examples include the search functionality or the app
     * predictor.
     */
    @android.annotation.SystemApi
    public static final int config_systemUiIntelligence=0x01040032;
    /**
     * @hide
     * Package name of the on-device intelligent processor for visual
     * features. Examples include the autorotate feature.
     */
    @android.annotation.SystemApi
    public static final int config_systemVisualIntelligence=0x01040037;
    /**
     * @hide
     * The name of the package that will hold the wellbeing role.
     */
    @android.annotation.SystemApi
    public static final int config_systemWellbeing=0x01040030;
    /**
     * @hide
     * The name of the package that will hold the system Wi-Fi coex manager role.
     */
    @android.annotation.SystemApi
    public static final int config_systemWifiCoexManager=0x0104002f;
    /**
     * Item on EditText context menu. This action is used to cut selected the text into the clipboard.
     */
    public static final int copy=0x01040001;
    /**
     * Item on EditText context menu. This action is used to copy a URL from the edit field into the clipboard.
     */
    public static final int copyUrl=0x01040002;
    /**
     * Item on EditText context menu.  This action is used to cut selected the text into the clipboard.
     */
    public static final int cut=0x01040003;
    /**
     * What the UI should display for "Msisdn" unless overridden by the SIM
     */
    public static final int defaultMsisdnAlphaTag=0x01040005;
    /**
     * What the UI should display for "voice mail" unless overridden by the SIM
     */
    public static final int defaultVoiceMailAlphaTag=0x01040004;
    /**
     * This is the generic "attention" string to be used in attention dialogs.  Typically
     * combined with setIconAttribute(android.R.attr.alertDialogIcon)
     * (or setIcon(android.R.drawable.ic_dialog_alert) on legacy versions of the platform)
     */
    public static final int dialog_alert_title=0x01040014;
    /**
     * How to display the lack of a phone number
     */
    public static final int emptyPhoneNumber=0x01040006;
    /**
     * Content description which should be used for the fingerprint icon.
     */
    public static final int fingerprint_icon_content_description=0x01040018;
    /**
     * Displayed when a web request failed because the URL isn't in a valid form.
     */
    public static final int httpErrorBadUrl=0x01040007;
    /**
     * Displayed when a web request failed because the protocol of the server is not supported.
     */
    public static final int httpErrorUnsupportedScheme=0x01040008;
    /**
     * Preference framework strings. {@deprecated Do not use. Incorrectly matches android.R.string.cancel rather than "no".}
     */
    @Deprecated
    public static final int no=0x01040009;
    /**
     * Preference framework strings.
     */
    public static final int ok=0x0104000a;
    /**
     * Item on EditText context menu. This action is used to paste from the clipboard into the eidt field
     */
    public static final int paste=0x0104000b;
    /**
     * Item on EditText context menu. This action is used to paste from the clipboard into the eidt field without formatting
     */
    public static final int paste_as_plain_text=0x01040019;
    /**
     * This is the default button label in the system-wide search UI.
     * It is also used by the home screen's search "widget". It should be short
     */
    public static final int search_go=0x0104000c;
    /**
     * Item on EditText context menu. This action is used to select all text in the edit field.
     */
    public static final int selectAll=0x0104000d;
    /**
     * Item on EditText context menu. Added only when the context menu is not empty, it enable selection context mode. [CHAR LIMIT=20]
     */
    public static final int selectTextMode=0x01040016;
    /**
     * Text to use when the number in a notification info is too large
     * (greater than status_bar_notification_info_maxnum, defined in
     * values/config.xml) and must be truncated. May need to be localized
     * for most appropriate textual indicator of "more than X".
     * [CHAR LIMIT=4]
     */
    public static final int status_bar_notification_info_overflow=0x01040017;
    /**
     * How to display the lack of a name
     */
    public static final int unknownName=0x0104000e;
    /**
     * Used in Contacts for a field that has no label and in Note Pad
     * for a note with no name.
     */
    public static final int untitled=0x0104000f;
    /**
     * Preference framework strings. {@deprecated Do not use. Incorrectly matches android.R.string.ok rather than "yes".}
     */
    @Deprecated
    public static final int yes=0x01040013;
  }
  public static final class style {
    /**
     * Base style for animations.  This style specifies no animations.
     */
    public static final int Animation=0x01030000;
    /**
     * Standard animations for a full-screen window or activity.
     */
    public static final int Animation_Activity=0x01030001;
    /**
     * Standard animations for a non-full-screen window or activity.
     */
    public static final int Animation_Dialog=0x01030002;
    /**
     * Window animations that are applied to input method overlay windows.
     */
    public static final int Animation_InputMethod=0x01030056;
    public static final int Animation_Toast=0x01030004;
    /**
     * Standard animations for a translucent window or activity.  This
     * style is <em>not</em> used by default for the translucent theme
     * (since translucent activities are a special case that have no
     * clear UI paradigm), but you can make your own specialized theme
     * with this animation style if you would like to have the standard
     * platform transition animation.
     */
    public static final int Animation_Translucent=0x01030003;
    /**
     * Style you can use with a container (typically a horizontal
     * LinearLayout) to get the standard "button bar" background and
     * spacing. @hide
     */
    public static final int ButtonBar=0x01030058;
    /**
     * Other Styles
     */
    public static final int DeviceDefault_ButtonBar=0x010301cf;
    public static final int DeviceDefault_ButtonBar_AlertDialog=0x010301d0;
    public static final int DeviceDefault_Light_ButtonBar=0x010301d2;
    public static final int DeviceDefault_Light_ButtonBar_AlertDialog=0x010301d3;
    public static final int DeviceDefault_Light_SegmentedButton=0x010301d4;
    public static final int DeviceDefault_SegmentedButton=0x010301d1;
    public static final int Holo_ButtonBar=0x010300e5;
    public static final int Holo_ButtonBar_AlertDialog=0x010300e7;
    public static final int Holo_Light_ButtonBar=0x010300e6;
    public static final int Holo_Light_ButtonBar_AlertDialog=0x010300e8;
    public static final int Holo_Light_SegmentedButton=0x010300ea;
    public static final int Holo_SegmentedButton=0x010300e9;
    public static final int MediaButton=0x01030037;
    public static final int MediaButton_Ffwd=0x0103003b;
    public static final int MediaButton_Next=0x01030039;
    public static final int MediaButton_Pause=0x0103003d;
    public static final int MediaButton_Play=0x0103003a;
    public static final int MediaButton_Previous=0x01030038;
    public static final int MediaButton_Rew=0x0103003c;
    public static final int TextAppearance=0x0103003e;
    /**
     * Text Appearance Styles
     */
    public static final int TextAppearance_DeviceDefault=0x010301ad;
    public static final int TextAppearance_DeviceDefault_DialogWindowTitle=0x010301b8;
    public static final int TextAppearance_DeviceDefault_Inverse=0x010301ae;
    public static final int TextAppearance_DeviceDefault_Large=0x010301af;
    public static final int TextAppearance_DeviceDefault_Large_Inverse=0x010301b0;
    public static final int TextAppearance_DeviceDefault_Medium=0x010301b1;
    public static final int TextAppearance_DeviceDefault_Medium_Inverse=0x010301b2;
    public static final int TextAppearance_DeviceDefault_SearchResult_Subtitle=0x010301b6;
    public static final int TextAppearance_DeviceDefault_SearchResult_Title=0x010301b5;
    public static final int TextAppearance_DeviceDefault_Small=0x010301b3;
    public static final int TextAppearance_DeviceDefault_Small_Inverse=0x010301b4;
    public static final int TextAppearance_DeviceDefault_Widget=0x010301b9;
    public static final int TextAppearance_DeviceDefault_Widget_ActionBar_Menu=0x010301ce;
    public static final int TextAppearance_DeviceDefault_Widget_ActionBar_Subtitle=0x010301c7;
    /**
     * @deprecated Action bars are now themed using the inheritable android:theme attribute.
     */
    @Deprecated
    public static final int TextAppearance_DeviceDefault_Widget_ActionBar_Subtitle_Inverse=0x010301cb;
    public static final int TextAppearance_DeviceDefault_Widget_ActionBar_Title=0x010301c6;
    /**
     * @deprecated Action bars are now themed using the inheritable android:theme attribute.
     */
    @Deprecated
    public static final int TextAppearance_DeviceDefault_Widget_ActionBar_Title_Inverse=0x010301ca;
    public static final int TextAppearance_DeviceDefault_Widget_ActionMode_Subtitle=0x010301c9;
    /**
     * @deprecated Action bars are now themed using the inheritable android:theme attribute.
     */
    @Deprecated
    public static final int TextAppearance_DeviceDefault_Widget_ActionMode_Subtitle_Inverse=0x010301cd;
    public static final int TextAppearance_DeviceDefault_Widget_ActionMode_Title=0x010301c8;
    /**
     * @deprecated Action bars are now themed using the inheritable android:theme attribute.
     */
    @Deprecated
    public static final int TextAppearance_DeviceDefault_Widget_ActionMode_Title_Inverse=0x010301cc;
    public static final int TextAppearance_DeviceDefault_Widget_Button=0x010301ba;
    public static final int TextAppearance_DeviceDefault_Widget_DropDownHint=0x010301bf;
    public static final int TextAppearance_DeviceDefault_Widget_DropDownItem=0x010301c0;
    public static final int TextAppearance_DeviceDefault_Widget_EditText=0x010301c2;
    public static final int TextAppearance_DeviceDefault_Widget_IconMenu_Item=0x010301bb;
    public static final int TextAppearance_DeviceDefault_Widget_PopupMenu=0x010301c3;
    public static final int TextAppearance_DeviceDefault_Widget_PopupMenu_Large=0x010301c4;
    public static final int TextAppearance_DeviceDefault_Widget_PopupMenu_Small=0x010301c5;
    public static final int TextAppearance_DeviceDefault_Widget_TabWidget=0x010301bc;
    public static final int TextAppearance_DeviceDefault_Widget_TextView=0x010301bd;
    public static final int TextAppearance_DeviceDefault_Widget_TextView_PopupMenu=0x010301be;
    public static final int TextAppearance_DeviceDefault_Widget_TextView_SpinnerItem=0x010301c1;
    public static final int TextAppearance_DeviceDefault_WindowTitle=0x010301b7;
    public static final int TextAppearance_DialogWindowTitle=0x01030041;
    /**
     * Text Styles
     */
    public static final int TextAppearance_Holo=0x010300fb;
    public static final int TextAppearance_Holo_DialogWindowTitle=0x01030117;
    public static final int TextAppearance_Holo_Inverse=0x010300fc;
    public static final int TextAppearance_Holo_Large=0x010300fd;
    public static final int TextAppearance_Holo_Large_Inverse=0x010300fe;
    public static final int TextAppearance_Holo_Medium=0x010300ff;
    public static final int TextAppearance_Holo_Medium_Inverse=0x01030100;
    public static final int TextAppearance_Holo_SearchResult_Subtitle=0x01030104;
    public static final int TextAppearance_Holo_SearchResult_Title=0x01030103;
    public static final int TextAppearance_Holo_Small=0x01030101;
    public static final int TextAppearance_Holo_Small_Inverse=0x01030102;
    public static final int TextAppearance_Holo_Widget=0x01030105;
    public static final int TextAppearance_Holo_Widget_ActionBar_Menu=0x01030120;
    public static final int TextAppearance_Holo_Widget_ActionBar_Subtitle=0x01030113;
    public static final int TextAppearance_Holo_Widget_ActionBar_Subtitle_Inverse=0x0103011d;
    public static final int TextAppearance_Holo_Widget_ActionBar_Title=0x01030112;
    public static final int TextAppearance_Holo_Widget_ActionBar_Title_Inverse=0x0103011c;
    public static final int TextAppearance_Holo_Widget_ActionMode_Subtitle=0x01030115;
    public static final int TextAppearance_Holo_Widget_ActionMode_Subtitle_Inverse=0x0103011f;
    public static final int TextAppearance_Holo_Widget_ActionMode_Title=0x01030114;
    public static final int TextAppearance_Holo_Widget_ActionMode_Title_Inverse=0x0103011e;
    public static final int TextAppearance_Holo_Widget_Button=0x01030106;
    public static final int TextAppearance_Holo_Widget_DropDownHint=0x0103010b;
    public static final int TextAppearance_Holo_Widget_DropDownItem=0x0103010c;
    public static final int TextAppearance_Holo_Widget_EditText=0x0103010e;
    public static final int TextAppearance_Holo_Widget_IconMenu_Item=0x01030107;
    public static final int TextAppearance_Holo_Widget_PopupMenu=0x0103010f;
    public static final int TextAppearance_Holo_Widget_PopupMenu_Large=0x01030110;
    public static final int TextAppearance_Holo_Widget_PopupMenu_Small=0x01030111;
    /**
     * This style is for smaller screens; values-xlarge defines a version
     * for larger screens.
     */
    public static final int TextAppearance_Holo_Widget_TabWidget=0x01030108;
    public static final int TextAppearance_Holo_Widget_TextView=0x01030109;
    public static final int TextAppearance_Holo_Widget_TextView_PopupMenu=0x0103010a;
    public static final int TextAppearance_Holo_Widget_TextView_SpinnerItem=0x0103010d;
    public static final int TextAppearance_Holo_WindowTitle=0x01030116;
    public static final int TextAppearance_Inverse=0x0103003f;
    public static final int TextAppearance_Large=0x01030042;
    public static final int TextAppearance_Large_Inverse=0x01030043;
    /**
     * Text styles
     */
    public static final int TextAppearance_Material=0x010301ed;
    public static final int TextAppearance_Material_Body1=0x010301f0;
    public static final int TextAppearance_Material_Body2=0x010301ef;
    public static final int TextAppearance_Material_Button=0x010301ee;
    public static final int TextAppearance_Material_Caption=0x010301f1;
    public static final int TextAppearance_Material_DialogWindowTitle=0x010301f2;
    public static final int TextAppearance_Material_Display1=0x010301f6;
    public static final int TextAppearance_Material_Display2=0x010301f5;
    public static final int TextAppearance_Material_Display3=0x010301f4;
    public static final int TextAppearance_Material_Display4=0x010301f3;
    public static final int TextAppearance_Material_Headline=0x010301f7;
    /**
     * Deprecated text styles
     */
    public static final int TextAppearance_Material_Inverse=0x010301f8;
    public static final int TextAppearance_Material_Large=0x010301f9;
    public static final int TextAppearance_Material_Large_Inverse=0x010301fa;
    public static final int TextAppearance_Material_Medium=0x010301fb;
    public static final int TextAppearance_Material_Medium_Inverse=0x010301fc;
    public static final int TextAppearance_Material_Menu=0x010301fd;
    public static final int TextAppearance_Material_Notification=0x010301fe;
    /**
     * unused; keep identical to parent
     */
    public static final int TextAppearance_Material_Notification_Emphasis=0x010301ff;
    public static final int TextAppearance_Material_Notification_Info=0x01030200;
    public static final int TextAppearance_Material_Notification_Line2=0x01030201;
    public static final int TextAppearance_Material_Notification_Time=0x01030202;
    public static final int TextAppearance_Material_Notification_Title=0x01030203;
    public static final int TextAppearance_Material_SearchResult_Subtitle=0x01030204;
    public static final int TextAppearance_Material_SearchResult_Title=0x01030205;
    public static final int TextAppearance_Material_Small=0x01030206;
    public static final int TextAppearance_Material_Small_Inverse=0x01030207;
    public static final int TextAppearance_Material_Subhead=0x01030208;
    public static final int TextAppearance_Material_Title=0x01030209;
    public static final int TextAppearance_Material_Widget=0x0103020b;
    public static final int TextAppearance_Material_Widget_ActionBar_Menu=0x0103020c;
    public static final int TextAppearance_Material_Widget_ActionBar_Subtitle=0x0103020d;
    public static final int TextAppearance_Material_Widget_ActionBar_Subtitle_Inverse=0x0103020e;
    public static final int TextAppearance_Material_Widget_ActionBar_Title=0x0103020f;
    public static final int TextAppearance_Material_Widget_ActionBar_Title_Inverse=0x01030210;
    public static final int TextAppearance_Material_Widget_ActionMode_Subtitle=0x01030211;
    public static final int TextAppearance_Material_Widget_ActionMode_Subtitle_Inverse=0x01030212;
    public static final int TextAppearance_Material_Widget_ActionMode_Title=0x01030213;
    public static final int TextAppearance_Material_Widget_ActionMode_Title_Inverse=0x01030214;
    public static final int TextAppearance_Material_Widget_Button=0x01030215;
    public static final int TextAppearance_Material_Widget_Button_Borderless_Colored=0x010302df;
    public static final int TextAppearance_Material_Widget_Button_Colored=0x010302de;
    public static final int TextAppearance_Material_Widget_Button_Inverse=0x010302d4;
    public static final int TextAppearance_Material_Widget_DropDownHint=0x01030216;
    public static final int TextAppearance_Material_Widget_DropDownItem=0x01030217;
    public static final int TextAppearance_Material_Widget_EditText=0x01030218;
    public static final int TextAppearance_Material_Widget_IconMenu_Item=0x01030219;
    public static final int TextAppearance_Material_Widget_PopupMenu=0x0103021a;
    public static final int TextAppearance_Material_Widget_PopupMenu_Large=0x0103021b;
    public static final int TextAppearance_Material_Widget_PopupMenu_Small=0x0103021c;
    public static final int TextAppearance_Material_Widget_TabWidget=0x0103021d;
    public static final int TextAppearance_Material_Widget_TextView=0x0103021e;
    public static final int TextAppearance_Material_Widget_TextView_PopupMenu=0x0103021f;
    public static final int TextAppearance_Material_Widget_TextView_SpinnerItem=0x01030220;
    public static final int TextAppearance_Material_Widget_Toolbar_Subtitle=0x01030221;
    public static final int TextAppearance_Material_Widget_Toolbar_Title=0x01030222;
    public static final int TextAppearance_Material_WindowTitle=0x0103020a;
    public static final int TextAppearance_Medium=0x01030044;
    public static final int TextAppearance_Medium_Inverse=0x01030045;
    /**
     * @hide
     */
    public static final int TextAppearance_SearchResult_Subtitle=0x01030064;
    /**
     * @hide
     */
    public static final int TextAppearance_SearchResult_Title=0x01030063;
    public static final int TextAppearance_Small=0x01030046;
    public static final int TextAppearance_Small_Inverse=0x01030047;
    /**
     * Notification content styles
     */
    public static final int TextAppearance_StatusBar_EventContent=0x01030067;
    public static final int TextAppearance_StatusBar_EventContent_Title=0x01030068;
    public static final int TextAppearance_StatusBar_Icon=0x01030066;
    public static final int TextAppearance_StatusBar_Title=0x01030065;
    public static final int TextAppearance_SuggestionHighlight=0x01030118;
    public static final int TextAppearance_Theme=0x01030040;
    public static final int TextAppearance_Theme_Dialog=0x01030048;
    public static final int TextAppearance_Widget=0x01030049;
    public static final int TextAppearance_Widget_Button=0x0103004a;
    public static final int TextAppearance_Widget_DropDownHint=0x01030050;
    public static final int TextAppearance_Widget_DropDownItem=0x01030051;
    public static final int TextAppearance_Widget_EditText=0x0103004c;
    public static final int TextAppearance_Widget_IconMenu_Item=0x0103004b;
    public static final int TextAppearance_Widget_PopupMenu_Large=0x01030080;
    public static final int TextAppearance_Widget_PopupMenu_Small=0x01030081;
    public static final int TextAppearance_Widget_TabWidget=0x0103004d;
    public static final int TextAppearance_Widget_TextView=0x0103004e;
    public static final int TextAppearance_Widget_TextView_PopupMenu=0x0103004f;
    public static final int TextAppearance_Widget_TextView_SpinnerItem=0x01030052;
    public static final int TextAppearance_WindowTitle=0x01030053;
    /**
     * The default theme for apps on API level 10 and lower. This is the theme used for
     * activities that have not explicitly set their own theme.
     * <p>You can count on this being a dark
     * background with light text on top, but should try to make no
     * other assumptions about its appearance. In particular, the text
     * inside of widgets using this theme may be completely different,
     * with the widget container being a light color and the text on top
     * of it a dark color.
     * <p>If you're developing for API level 11 and higher, you should instead use {@link
     * #Theme_Holo} or {@link #Theme_DeviceDefault}.</p>
     */
    public static final int Theme=0x01030005;
    /**
     * Variant on {@link #Theme} that ensures the background is
     * completely black.  This is useful for things like image viewers and
     * media players.   If you want the normal (dark background) theme
     * do <em>not</em> use this, use {@link #Theme}.
     */
    public static final int Theme_Black=0x01030008;
    /**
     * Variant of {@link #Theme_Black} with no title bar
     */
    public static final int Theme_Black_NoTitleBar=0x01030009;
    /**
     * Variant of {@link #Theme_Black} that has no title bar and
     * no status bar.  This theme
     * sets {@link android.R.attr#windowFullscreen} to true.
     */
    public static final int Theme_Black_NoTitleBar_Fullscreen=0x0103000a;
    public static final int Theme_DeviceDefault=0x01030128;
    /**
     * DeviceDefault theme for day/night activities.
     */
    public static final int Theme_DeviceDefault_DayNight=0x010302e3;
    /**
     * DeviceDefault theme for dialog windows and activities. This changes the window to be
     * floating (not fill the entire screen), and puts a frame around its contents. You can set this
     * theme on an activity if you would like to make an activity that looks like a Dialog.
     * DeviceDefault theme for dialog windows and activities. In contrast to Material, the
     * watch theme is not floating. You can set this theme on an activity if you would like to make
     * an activity that looks like a Dialog.
     */
    public static final int Theme_DeviceDefault_Dialog=0x0103012e;
    public static final int Theme_DeviceDefault_Dialog_Alert=0x010302d1;
    /**
     * Variant of {@link #Theme_DeviceDefault_Dialog} that has a nice minimum width for a
     * regular dialog.
     * Variant of {@link #Theme_DeviceDefault_Dialog} that has a nice minimum width for a
     * regular dialog.
     */
    public static final int Theme_DeviceDefault_Dialog_MinWidth=0x0103012f;
    /**
     * Variant of {@link #Theme_DeviceDefault_Dialog} without an action bar
     * Variant of {@link #Theme_DeviceDefault_Dialog} without an action bar
     */
    public static final int Theme_DeviceDefault_Dialog_NoActionBar=0x01030130;
    /**
     * Variant of {@link #Theme_DeviceDefault_Dialog_NoActionBar} that has a nice minimum width
     * for a regular dialog.
     * Variant of {@link #Theme_DeviceDefault_Dialog_NoActionBar} that has a nice minimum width
     * for a regular dialog.
     */
    public static final int Theme_DeviceDefault_Dialog_NoActionBar_MinWidth=0x01030131;
    /**
     * DeviceDefault theme for a window that will be displayed either full-screen on smaller
     * screens (small, normal) or as a dialog on larger screens (large, xlarge).
     * DeviceDefault theme for a window that will be displayed either full-screen on smaller
     * screens (small, normal) or as a dialog on larger screens (large, xlarge).
     */
    public static final int Theme_DeviceDefault_DialogWhenLarge=0x01030136;
    /**
     * DeviceDefault theme for a window without an action bar that will be displayed either
     * full-screen on smaller screens (small, normal) or as a dialog on larger screens (large,
     * xlarge).
     * DeviceDefault theme for a window without an action bar that will be displayed either
     * full-screen on smaller screens (small, normal) or as a dialog on larger screens (large,
     * xlarge).
     */
    public static final int Theme_DeviceDefault_DialogWhenLarge_NoActionBar=0x01030137;
    /**
     * @hide
     * @hide DeviceDefault theme for the DocumentsUI app.
     */
    @android.annotation.SystemApi
    public static final int Theme_DeviceDefault_DocumentsUI=0x010302e2;
    /**
     * DeviceDefault style for input methods, which is used by the
     * {@link android.inputmethodservice.InputMethodService} class.
     * DeviceDefault style for input methods, which is used by the
     * {@link android.inputmethodservice.InputMethodService} class.
     */
    public static final int Theme_DeviceDefault_InputMethod=0x0103013e;
    /**
     * Variant of {@link #Theme_DeviceDefault} with a light-colored style
     */
    public static final int Theme_DeviceDefault_Light=0x0103012b;
    /**
     * Variant of the DeviceDefault (light) theme that has a solid (opaque) action bar with an
     * inverse color profile.
     */
    public static final int Theme_DeviceDefault_Light_DarkActionBar=0x0103013f;
    /**
     * DeviceDefault light theme for dialog windows and activities. This changes the window to be
     * floating (not fill the entire screen), and puts a frame around its contents. You can set this
     * theme on an activity if you would like to make an activity that looks like a Dialog.
     */
    public static final int Theme_DeviceDefault_Light_Dialog=0x01030132;
    public static final int Theme_DeviceDefault_Light_Dialog_Alert=0x010302d2;
    /**
     * Variant of {@link #Theme_DeviceDefault_Light_Dialog} that has a nice minimum width for a
     * regular dialog.
     */
    public static final int Theme_DeviceDefault_Light_Dialog_MinWidth=0x01030133;
    /**
     * Variant of {@link #Theme_DeviceDefault_Light_Dialog} without an action bar
     */
    public static final int Theme_DeviceDefault_Light_Dialog_NoActionBar=0x01030134;
    /**
     * Variant of {@link #Theme_DeviceDefault_Light_Dialog_NoActionBar} that has a nice minimum
     * width for a regular dialog.
     */
    public static final int Theme_DeviceDefault_Light_Dialog_NoActionBar_MinWidth=0x01030135;
    /**
     * DeviceDefault light theme for a window that will be displayed either full-screen on smaller
     * screens (small, normal) or as a dialog on larger screens (large, xlarge).
     */
    public static final int Theme_DeviceDefault_Light_DialogWhenLarge=0x01030138;
    /**
     * DeviceDefault light theme for a window without an action bar that will be displayed either
     * full-screen on smaller screens (small, normal) or as a dialog on larger screens (large,
     * xlarge).
     */
    public static final int Theme_DeviceDefault_Light_DialogWhenLarge_NoActionBar=0x01030139;
    /**
     * Variant of {@link #Theme_DeviceDefault_Light} with no action bar
     */
    public static final int Theme_DeviceDefault_Light_NoActionBar=0x0103012c;
    /**
     * Variant of {@link #Theme_DeviceDefault_Light} with no action bar and no status bar.
     * This theme sets {@link android.R.attr#windowFullscreen} to true.
     */
    public static final int Theme_DeviceDefault_Light_NoActionBar_Fullscreen=0x0103012d;
    /**
     * Variant of {@link #Theme_DeviceDefault_Light} with no action bar and no status bar
     * and extending in to overscan region.  This theme
     * sets {@link android.R.attr#windowFullscreen} and {@link android.R.attr#windowOverscan}
     * to true.
     */
    public static final int Theme_DeviceDefault_Light_NoActionBar_Overscan=0x010301e0;
    /**
     * Variant of {@link #Theme_DeviceDefault_Light} that has no title bar and translucent
     * system decor.  This theme sets {@link android.R.attr#windowTranslucentStatus} and
     * {@link android.R.attr#windowTranslucentNavigation} to true.
     */
    public static final int Theme_DeviceDefault_Light_NoActionBar_TranslucentDecor=0x010301e4;
    /**
     * DeviceDefault light theme for panel windows. This removes all extraneous window
     * decorations, so you basically have an empty rectangle in which to place your content. It makes
     * the window floating, with a transparent background, and turns off dimming behind the window.
     */
    public static final int Theme_DeviceDefault_Light_Panel=0x0103013b;
    /**
     * Variant of {@link #Theme_DeviceDefault} with no action bar
     * Variant of {@link #Theme_DeviceDefault} with no action bar
     */
    public static final int Theme_DeviceDefault_NoActionBar=0x01030129;
    /**
     * Variant of {@link #Theme_DeviceDefault} with no action bar and no status bar.  This theme
     * sets {@link android.R.attr#windowFullscreen} to true.
     * Variant of {@link #Theme_DeviceDefault} with no action bar and no status bar.  This theme
     * sets {@link android.R.attr#windowFullscreen} to true.
     */
    public static final int Theme_DeviceDefault_NoActionBar_Fullscreen=0x0103012a;
    /**
     * Variant of {@link #Theme_DeviceDefault} with no action bar and no status bar and
     * extending in to overscan region.  This theme
     * sets {@link android.R.attr#windowFullscreen} and {@link android.R.attr#windowOverscan}
     * to true.
     * Variant of {@link #Theme_DeviceDefault} with no action bar and no status bar and
     * extending in to overscan region.  This theme
     * sets {@link android.R.attr#windowFullscreen} and {@link android.R.attr#windowOverscan}
     * to true.
     */
    public static final int Theme_DeviceDefault_NoActionBar_Overscan=0x010301df;
    /**
     * Variant of {@link #Theme_DeviceDefault} that has no title bar and translucent
     * system decor.  This theme sets {@link android.R.attr#windowTranslucentStatus} and
     * {@link android.R.attr#windowTranslucentNavigation} to true.
     * Variant of {@link #Theme_DeviceDefault} that has no title bar and translucent
     * system decor.  This theme sets {@link android.R.attr#windowTranslucentStatus} and
     * {@link android.R.attr#windowTranslucentNavigation} to true.
     */
    public static final int Theme_DeviceDefault_NoActionBar_TranslucentDecor=0x010301e3;
    /**
     * DeviceDefault theme for panel windows. This removes all extraneous window
     * decorations, so you basically have an empty rectangle in which to place your content. It makes
     * the window floating, with a transparent background, and turns off dimming behind the window.
     * DeviceDefault theme for panel windows. This removes all extraneous window
     * decorations, so you basically have an empty rectangle in which to place your content. It makes
     * the window floating, with a transparent background, and turns off dimming behind the window.
     */
    public static final int Theme_DeviceDefault_Panel=0x0103013a;
    /**
     * DeviceDefault theme for a window that should look like the Settings app.
     * DeviceDefault theme for a window that should look like the Settings app.
     * DeviceDefault theme for a window that should look like the Settings app.
     */
    public static final int Theme_DeviceDefault_Settings=0x01030223;
    /**
     * DeviceDefault theme for windows that want to have the user's selected wallpaper appear
     * behind them.
     * DeviceDefault theme for windows that want to have the user's selected wallpaper appear
     * behind them.
     */
    public static final int Theme_DeviceDefault_Wallpaper=0x0103013c;
    /**
     * DeviceDefault theme for windows that want to have the user's selected wallpaper appear
     * behind them and without an action bar.
     * DeviceDefault theme for windows that want to have the user's selected wallpaper appear
     * behind them and without an action bar.
     */
    public static final int Theme_DeviceDefault_Wallpaper_NoTitleBar=0x0103013d;
    /**
     * Default theme for dialog windows and activities (on API level 10 and lower),
     * which is used by the
     * {@link android.app.Dialog} class.  This changes the window to be
     * floating (not fill the entire screen), and puts a frame around its
     * contents.  You can set this theme on an activity if you would like to
     * make an activity that looks like a Dialog.
     */
    public static final int Theme_Dialog=0x0103000b;
    /**
     * Honeycomb holographic theme (dark version).
     * <p>This is the default system theme for apps that target API level 11 - 20. Starting
     * with API level 14, the default system theme is supplied by {@link #Theme_DeviceDefault},
     * which might apply a different style on different devices. If you want to ensure that your
     * app consistently uses the Holo theme at all times, you must explicitly declare it in your
     * manifest. For example, {@code <application android:theme="@android:style/Theme.Holo">}.
     * For more information, read <a
     * href="http://android-developers.blogspot.com/2012/01/holo-everywhere.html">Holo
     * Everywhere</a>.</p>
     * <p>The widgets in the holographic theme are translucent on their background, so
     * applications must ensure that any background they use with this theme is itself
     * dark; otherwise, it will be difficult to see the widgets. This UI style also includes a
     * full action bar by default.</p>
     * <p>Styles used by the Holo theme are named using the convention Type.Holo.Etc
     * (for example, {@code Widget.Holo.Button} and {@code
     * TextAppearance.Holo.Widget.PopupMenu.Large}).
     * Specific resources used by Holo are named using the convention @type/foo_bar_baz_holo
     * with trailing _dark or _light specifiers if they are not shared between both light and
     * dark versions of the theme.
     * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
     */
    @Deprecated
    public static final int Theme_Holo=0x0103006b;
    /**
     * Holo theme for dialog windows and activities, which is used by the
     * {@link android.app.Dialog} class.  This changes the window to be
     * floating (not fill the entire screen), and puts a frame around its
     * contents.  You can set this theme on an activity if you would like to
     * make an activity that looks like a Dialog.
     * This is the default Dialog theme for applications targeting Honeycomb
     * or newer.
     * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
     */
    @Deprecated
    public static final int Theme_Holo_Dialog=0x0103006f;
    /**
     * Variant of Theme.Holo.Dialog that has a nice minimum width for
     * a regular dialog.
     * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
     */
    @Deprecated
    public static final int Theme_Holo_Dialog_MinWidth=0x01030070;
    /**
     * Variant of Theme.Holo.Dialog that does not include a title bar.
     * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
     */
    @Deprecated
    public static final int Theme_Holo_Dialog_NoActionBar=0x01030071;
    /**
     * Variant of Theme.Holo.Dialog.NoActionBar that has a nice minimum width for
     * a regular dialog.
     * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
     */
    @Deprecated
    public static final int Theme_Holo_Dialog_NoActionBar_MinWidth=0x01030072;
    /**
     * Theme for a window that will be displayed either full-screen on
     * smaller screens (small, normal) or as a dialog on larger screens
     * (large, xlarge).
     * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
     */
    @Deprecated
    public static final int Theme_Holo_DialogWhenLarge=0x01030077;
    /**
     * Theme for a window without a title bar that will be displayed either
     * full-screen on smaller screens (small, normal) or as a dialog on larger screens
     * (large, xlarge).
     * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
     */
    @Deprecated
    public static final int Theme_Holo_DialogWhenLarge_NoActionBar=0x01030078;
    /**
     * Default theme for holo style input methods, which is used by the
     * {@link android.inputmethodservice.InputMethodService} class.
     * this inherits from Theme.Panel, but sets up IME appropriate animations
     * and a few custom attributes.
     * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
     */
    @Deprecated
    public static final int Theme_Holo_InputMethod=0x0103007f;
    /**
     * Honeycomb holographic theme (light version).  The widgets in the
     * holographic theme are translucent on their brackground, so applications
     * must ensure that any background they use with this theme is itself
     * light; otherwise, it will be difficult to see the widgets.  This
     * UI style also includes a full action bar by default.
     * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
     */
    @Deprecated
    public static final int Theme_Holo_Light=0x0103006e;
    /**
     * Variant of the holographic (light) theme that has a solid (opaque) action bar
     * with an inverse color profile. The dark action bar sharply stands out against
     * the light content.
     * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
     */
    @Deprecated
    public static final int Theme_Holo_Light_DarkActionBar=0x01030119;
    /**
     * Holo light theme for dialog windows and activities, which is used by the
     * {@link android.app.Dialog} class.  This changes the window to be
     * floating (not fill the entire screen), and puts a frame around its
     * contents.  You can set this theme on an activity if you would like to
     * make an activity that looks like a Dialog.
     * This is the default Dialog theme for applications targeting Honeycomb
     * or newer.
     * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
     */
    @Deprecated
    public static final int Theme_Holo_Light_Dialog=0x01030073;
    /**
     * Variant of Theme.Holo.Light.Dialog that has a nice minimum width for
     * a regular dialog.
     * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
     */
    @Deprecated
    public static final int Theme_Holo_Light_Dialog_MinWidth=0x01030074;
    /**
     * Variant of Theme.Holo.Light.Dialog that does not include a title bar.
     * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
     */
    @Deprecated
    public static final int Theme_Holo_Light_Dialog_NoActionBar=0x01030075;
    /**
     * Variant of Theme.Holo.Light.Dialog.NoActionBar that has a nice minimum width for
     * a regular dialog.
     * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
     */
    @Deprecated
    public static final int Theme_Holo_Light_Dialog_NoActionBar_MinWidth=0x01030076;
    /**
     * Theme for a window that will be displayed either full-screen on
     * smaller screens (small, normal) or as a dialog on larger screens
     * (large, xlarge).
     * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
     */
    @Deprecated
    public static final int Theme_Holo_Light_DialogWhenLarge=0x01030079;
    /**
     * Theme for a window without an action bar that will be displayed either full-screen
     * on smaller screens (small, normal) or as a dialog on larger screens
     * (large, xlarge).
     * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
     */
    @Deprecated
    public static final int Theme_Holo_Light_DialogWhenLarge_NoActionBar=0x0103007a;
    /**
     * Variant of the holographic (light) theme with no action bar.
     * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
     */
    @Deprecated
    public static final int Theme_Holo_Light_NoActionBar=0x010300f0;
    /**
     * Variant of the holographic (light) theme that has no title bar and fills
     * the entire screen.  This theme
     * sets {@link android.R.attr#windowFullscreen} to true.
     * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
     */
    @Deprecated
    public static final int Theme_Holo_Light_NoActionBar_Fullscreen=0x010300f1;
    /**
     * Variant of the holographic (light) theme that has no title bar and fills
     * the entire screen and extends into the display overscan region.  This theme
     * sets {@link android.R.attr#windowFullscreen} and {@link android.R.attr#windowOverscan}
     * to true.
     * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
     */
    @Deprecated
    public static final int Theme_Holo_Light_NoActionBar_Overscan=0x010301de;
    /**
     * Variant of the holographic (light) theme that has no title bar and translucent
     * system decor.  This theme sets {@link android.R.attr#windowTranslucentStatus} and
     * {@link android.R.attr#windowTranslucentNavigation} to true.
     * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
     */
    @Deprecated
    public static final int Theme_Holo_Light_NoActionBar_TranslucentDecor=0x010301e2;
    /**
     * Default holo light theme for panel windows.  This removes all extraneous
     * window decorations, so you basically have an empty rectangle in which
     * to place your content.  It makes the window floating, with a transparent
     * background, and turns off dimming behind the window.
     * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
     */
    @Deprecated
    public static final int Theme_Holo_Light_Panel=0x0103007c;
    /**
     * Variant of the holographic (dark) theme with no action bar.
     * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
     */
    @Deprecated
    public static final int Theme_Holo_NoActionBar=0x0103006c;
    /**
     * Variant of the holographic (dark) theme that has no title bar and fills
     * the entire screen.  This theme
     * sets {@link android.R.attr#windowFullscreen} to true.
     * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
     */
    @Deprecated
    public static final int Theme_Holo_NoActionBar_Fullscreen=0x0103006d;
    /**
     * Variant of the holographic (dark) theme that has no title bar and fills
     * the entire screen and extends into the display overscan region.  This theme
     * sets {@link android.R.attr#windowFullscreen} and {@link android.R.attr#windowOverscan}
     * to true.
     * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
     */
    @Deprecated
    public static final int Theme_Holo_NoActionBar_Overscan=0x010301dd;
    /**
     * Variant of the holographic (dark) theme that has no title bar and translucent
     * system decor.  This theme sets {@link android.R.attr#windowTranslucentStatus} and
     * {@link android.R.attr#windowTranslucentNavigation} to true.
     * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
     */
    @Deprecated
    public static final int Theme_Holo_NoActionBar_TranslucentDecor=0x010301e1;
    /**
     * Default holo dark theme for panel windows.  This removes all extraneous
     * window decorations, so you basically have an empty rectangle in which
     * to place your content.  It makes the window floating, with a transparent
     * background, and turns off dimming behind the window.
     * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
     */
    @Deprecated
    public static final int Theme_Holo_Panel=0x0103007b;
    /**
     * Default holographic (dark) for windows that want to have the user's selected
     * wallpaper appear behind them.
     * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
     */
    @Deprecated
    public static final int Theme_Holo_Wallpaper=0x0103007d;
    /**
     * Default holographic (dark) for windows that want to have the user's selected
     * wallpaper appear behind them and without an action bar.
     * @deprecated Use Material themes on API 21+ or AppCompat on supported APIs.
     */
    @Deprecated
    public static final int Theme_Holo_Wallpaper_NoTitleBar=0x0103007e;
    /**
     * Default theme for input methods (on API level 10 and lower), which is used by the
     * {@link android.inputmethodservice.InputMethodService} class.
     * this inherits from Theme.Panel, but sets up IME appropriate animations
     * and a few custom attributes.
     */
    public static final int Theme_InputMethod=0x01030054;
    /**
     * @hide This really shouldn't be public; clients using it should use @* to ref it.
     * Setup and form wizard themes @hide
     */
    @android.annotation.SystemApi
    public static final int Theme_Leanback_FormWizard=0x010302d0;
    /**
     * Theme for a light background with dark text on top.  Set your activity
     * to this theme if you would like such an appearance.  As with the
     * default theme, you should try to assume little more than that the
     * background will be a light color.
     * <p>This is designed for API level 10 and lower.</p>
     */
    public static final int Theme_Light=0x0103000c;
    /**
     * Variant of {@link #Theme_Light} with no title bar
     */
    public static final int Theme_Light_NoTitleBar=0x0103000d;
    /**
     * Variant of {@link #Theme_Light} that has no title bar and
     * no status bar.  This theme
     * sets {@link android.R.attr#windowFullscreen} to true.
     */
    public static final int Theme_Light_NoTitleBar_Fullscreen=0x0103000e;
    /**
     * Default light theme for panel windows (on API level 10 and lower).  This removes all
     * extraneous window decorations, so you basically have an empty rectangle in which
     * to place your content.  It makes the window floating, with a transparent
     * background, and turns off dimming behind the window.
     */
    public static final int Theme_Light_Panel=0x0103005a;
    /**
     * Theme for a wallpaper's setting activity, which is designed to be a transparent
     * background with a light shade, so the previous Activity is visible in the background.
     */
    public static final int Theme_Light_WallpaperSettings=0x01030062;
    /**
     * Material theme (dark version).
     * <p>If you want to ensure that your
     * app consistently uses the Material theme at all times, you must explicitly declare it in your
     * manifest. For example, {@code <application android:theme="@style/Theme.Material">}.
     * <p>Styles used by the Material theme are named using the convention Type.Material.Etc
     * (for example, {@code Widget.Material.Button} and {@code
     * TextAppearance.Material.Widget.PopupMenu.Large}).
     * Specific resources used by Material are named using the convention @type/foo_bar_baz_material
     * with trailing _dark or _light specifiers if they are not shared between both light and
     * dark versions of the theme.
     */
    public static final int Theme_Material=0x01030224;
    /**
     * Material theme for dialog windows and activities, which is used by the
     * {@link android.app.Dialog} class.  This changes the window to be
     * floating (not fill the entire screen), and puts a frame around its
     * contents.  You can set this theme on an activity if you would like to
     * make an activity that looks like a Dialog.
     * Force the background and floating colours to be the default colours.
     */
    public static final int Theme_Material_Dialog=0x01030225;
    /**
     * Material theme for alert dialog windows, which is used by the
     * {@link android.app.AlertDialog} class.  This is basically a dialog
     * but sets the background to empty so it can do two-tone backgrounds.
     * For applications targeting Honeycomb or newer, this is the default
     * AlertDialog theme.
     */
    public static final int Theme_Material_Dialog_Alert=0x01030226;
    /**
     * Variant of Theme.Material.Dialog that has a nice minimum width for
     * a regular dialog.
     */
    public static final int Theme_Material_Dialog_MinWidth=0x01030227;
    /**
     * Variant of Theme.Material.Dialog that does not include a title bar.
     */
    public static final int Theme_Material_Dialog_NoActionBar=0x01030228;
    /**
     * Variant of Theme.Material.Dialog.NoActionBar that has a nice minimum width for
     * a regular dialog.
     */
    public static final int Theme_Material_Dialog_NoActionBar_MinWidth=0x01030229;
    /**
     * Theme for a presentation window on a secondary display.
     */
    public static final int Theme_Material_Dialog_Presentation=0x0103022a;
    /**
     * Theme for a window that will be displayed either full-screen on
     * smaller screens (small, normal) or as a dialog on larger screens
     * (large, xlarge).
     */
    public static final int Theme_Material_DialogWhenLarge=0x0103022b;
    /**
     * Theme for a window without a title bar that will be displayed either
     * full-screen on smaller screens (small, normal) or as a dialog on larger screens
     * (large, xlarge).
     */
    public static final int Theme_Material_DialogWhenLarge_NoActionBar=0x0103022c;
    /**
     * Default theme for material style input methods, which is used by the
     * {@link android.inputmethodservice.InputMethodService} class.
     * this inherits from Theme.Panel, but sets up IME appropriate animations
     * and a few custom attributes.
     * Default theme for material style input methods, which is used by the
     * {@link android.inputmethodservice.InputMethodService} class.
     * this inherits from Theme.Panel, but sets up IME appropriate animations
     * and a few custom attributes.
     */
    public static final int Theme_Material_InputMethod=0x0103022d;
    /**
     * Material theme (light version).
     */
    public static final int Theme_Material_Light=0x01030237;
    /**
     * Variant of the material (light) theme that has a solid (opaque) action bar
     * with an inverse color profile. The dark action bar sharply stands out against
     * the light content.
     */
    public static final int Theme_Material_Light_DarkActionBar=0x01030238;
    /**
     * Material light theme for dialog windows and activities, which is used by the
     * {@link android.app.Dialog} class.  This changes the window to be
     * floating (not fill the entire screen), and puts a frame around its
     * contents.  You can set this theme on an activity if you would like to
     * make an activity that looks like a Dialog.
     * Force the background and floating colours to be the default colours.
     */
    public static final int Theme_Material_Light_Dialog=0x01030239;
    /**
     * Material light theme for alert dialog windows, which is used by the
     * {@link android.app.AlertDialog} class.  This is basically a dialog
     * but sets the background to empty so it can do two-tone backgrounds.
     * For applications targeting Honeycomb or newer, this is the default
     * AlertDialog theme.
     */
    public static final int Theme_Material_Light_Dialog_Alert=0x0103023a;
    /**
     * Variant of Theme.Material.Light.Dialog that has a nice minimum width for
     * a regular dialog.
     */
    public static final int Theme_Material_Light_Dialog_MinWidth=0x0103023b;
    /**
     * Variant of Theme.Material.Light.Dialog that does not include a title bar.
     */
    public static final int Theme_Material_Light_Dialog_NoActionBar=0x0103023c;
    /**
     * Variant of Theme.Material.Light.Dialog.NoActionBar that has a nice minimum width for
     * a regular dialog.
     */
    public static final int Theme_Material_Light_Dialog_NoActionBar_MinWidth=0x0103023d;
    /**
     * Theme for a presentation window on a secondary display.
     */
    public static final int Theme_Material_Light_Dialog_Presentation=0x0103023e;
    /**
     * Theme for a window that will be displayed either full-screen on
     * smaller screens (small, normal) or as a dialog on larger screens
     * (large, xlarge).
     */
    public static final int Theme_Material_Light_DialogWhenLarge=0x0103023f;
    /**
     * Theme for a window with a dark title bar that will be displayed either
     * full-screen on smaller screens (small, normal) or as a dialog on larger screens
     * (large, xlarge).
     */
    public static final int Theme_Material_Light_DialogWhenLarge_DarkActionBar=0x010302d8;
    /**
     * Theme for a window without an action bar that will be displayed either full-screen
     * on smaller screens (small, normal) or as a dialog on larger screens
     * (large, xlarge).
     */
    public static final int Theme_Material_Light_DialogWhenLarge_NoActionBar=0x01030240;
    /**
     * Variant of the material (light) theme that has a light status bar background with dark
     * status bar contents.
     */
    public static final int Theme_Material_Light_LightStatusBar=0x010302d5;
    /**
     * Variant of the material (light) theme with no action bar.
     */
    public static final int Theme_Material_Light_NoActionBar=0x01030241;
    /**
     * Variant of the material (light) theme that has no title bar and fills
     * the entire screen.  This theme
     * sets {@link android.R.attr#windowFullscreen} to true.
     */
    public static final int Theme_Material_Light_NoActionBar_Fullscreen=0x01030242;
    /**
     * Variant of the material (light) theme that has no title bar and fills
     * the entire screen and extends into the display overscan region.  This theme
     * sets {@link android.R.attr#windowFullscreen} and {@link android.R.attr#windowOverscan}
     * to true.
     * @deprecated Overscan areas aren't set by any Android product anymore as of Android 11.
     */
    @Deprecated
    public static final int Theme_Material_Light_NoActionBar_Overscan=0x01030243;
    /**
     * Variant of the material (light) theme that has no title bar and translucent
     * system decor.  This theme sets {@link android.R.attr#windowTranslucentStatus} and
     * {@link android.R.attr#windowTranslucentNavigation} to true.
     */
    public static final int Theme_Material_Light_NoActionBar_TranslucentDecor=0x01030244;
    /**
     * Default material light theme for panel windows.  This removes all extraneous
     * window decorations, so you basically have an empty rectangle in which
     * to place your content.  It makes the window floating, with a transparent
     * background, and turns off dimming behind the window.
     */
    public static final int Theme_Material_Light_Panel=0x01030245;
    /**
     * Material light theme for an activity that is to be used for voice interaction.
     * This gives the activity a floating dialog style, to incorporate with the
     * system voice experience.
     */
    public static final int Theme_Material_Light_Voice=0x01030246;
    /**
     * Variant of the material (dark) theme with no action bar.
     */
    public static final int Theme_Material_NoActionBar=0x0103022e;
    /**
     * Variant of the material (dark) theme that has no title bar and fills
     * the entire screen.  This theme
     * sets {@link android.R.attr#windowFullscreen} to true.
     */
    public static final int Theme_Material_NoActionBar_Fullscreen=0x0103022f;
    /**
     * Variant of the material (dark) theme that has no title bar and fills
     * the entire screen and extends into the display overscan region.  This theme
     * sets {@link android.R.attr#windowFullscreen} and {@link android.R.attr#windowOverscan}
     * to true.
     * @deprecated Overscan areas aren't set by any Android product anymore as of Android 11.
     */
    @Deprecated
    public static final int Theme_Material_NoActionBar_Overscan=0x01030230;
    /**
     * Variant of the material (dark) theme that has no title bar and translucent
     * system decor.  This theme sets {@link android.R.attr#windowTranslucentStatus} and
     * {@link android.R.attr#windowTranslucentNavigation} to true.
     */
    public static final int Theme_Material_NoActionBar_TranslucentDecor=0x01030231;
    /**
     * Default material dark theme for panel windows.  This removes all extraneous
     * window decorations, so you basically have an empty rectangle in which
     * to place your content.  It makes the window floating, with a transparent
     * background, and turns off dimming behind the window.
     */
    public static final int Theme_Material_Panel=0x01030232;
    /**
     * Default theme for Settings and activities launched from Settings.
     * Force all settings themes to use normal Material theme.
     */
    public static final int Theme_Material_Settings=0x01030233;
    /**
     * Material theme for an activity that is to be used for voice interaction.
     * This gives the activity a floating dialog style, to incorporate with the
     * system voice experience.
     */
    public static final int Theme_Material_Voice=0x01030234;
    /**
     * Default material (dark) for windows that want to have the user's selected
     * wallpaper appear behind them.
     */
    public static final int Theme_Material_Wallpaper=0x01030235;
    /**
     * Default material (dark) for windows that want to have the user's selected
     * wallpaper appear behind them and without an action bar.
     */
    public static final int Theme_Material_Wallpaper_NoTitleBar=0x01030236;
    /**
     * Default theme for activities that don't actually display a UI; that
     * is, they finish themselves before being resumed.
     */
    public static final int Theme_NoDisplay=0x01030055;
    /**
     * Variant of {@link #Theme} with no title bar
     */
    public static final int Theme_NoTitleBar=0x01030006;
    /**
     * Variant of {@link #Theme} that has no title bar and no status bar.  This theme
     * sets {@link android.R.attr#windowFullscreen} to true.
     */
    public static final int Theme_NoTitleBar_Fullscreen=0x01030007;
    /**
     * No title bar, but Action Mode bars will overlay application content
     * instead of pushing it down to make room.
     */
    public static final int Theme_NoTitleBar_OverlayActionModes=0x0103006a;
    /**
     * Default dark theme for panel windows (on API level 10 and lower).  This removes all
     * extraneous window decorations, so you basically have an empty rectangle in which
     * to place your content.  It makes the window floating, with a transparent
     * background, and turns off dimming behind the window.
     */
    public static final int Theme_Panel=0x01030059;
    /**
     * Theme for translucent activities (on API level 10 and lower). That is, windows
     * that allow you to see through them to the windows behind.  This sets up the translucent
     * flag and appropriate animations for your windows.
     */
    public static final int Theme_Translucent=0x0103000f;
    /**
     * Variant of {@link #Theme_Translucent} with no title bar
     */
    public static final int Theme_Translucent_NoTitleBar=0x01030010;
    /**
     * Variant of {@link #Theme_Translucent} that has no title bar and
     * no status bar
     */
    public static final int Theme_Translucent_NoTitleBar_Fullscreen=0x01030011;
    /**
     * Theme for windows that want to have the user's selected
     * wallpaper appear behind them (for API level 10 and lower).
     */
    public static final int Theme_Wallpaper=0x0103005e;
    /**
     * Variant of {@link #Theme_Wallpaper} that has no title bar
     */
    public static final int Theme_Wallpaper_NoTitleBar=0x0103005f;
    /**
     * Variant of {@link #Theme_Wallpaper} that
     * has no title bar or status bar.
     */
    public static final int Theme_Wallpaper_NoTitleBar_Fullscreen=0x01030060;
    /**
     * Theme for a wallpaper's setting activity, which is designed to be a transparent
     * background with a dark shade, so the previous Activity is visible in the background.
     */
    public static final int Theme_WallpaperSettings=0x01030061;
    /**
     * Default theme with an Action Bar.
     */
    public static final int Theme_WithActionBar=0x01030069;
    public static final int ThemeOverlay=0x01030247;
    /**
     * Theme overlay that replaces colorAccent with the colorAccent from {@link #Theme_DeviceDefault_DayNight}.
     */
    public static final int ThemeOverlay_DeviceDefault_Accent_DayNight=0x010302e4;
    public static final int ThemeOverlay_Material=0x01030248;
    /**
     * Theme overlay that replaces the normal control color, which by default is the same as the
     * secondary text color, with the primary text color.
     */
    public static final int ThemeOverlay_Material_ActionBar=0x01030249;
    /**
     * Theme overlay that replaces colors with their dark versions but preserves
     * the value of colorAccent, colorPrimary and its variants.
     */
    public static final int ThemeOverlay_Material_Dark=0x0103024b;
    /**
     * Theme overlay that replaces colors with their dark versions and replaces the normal
     * control color, which by default is the same as the secondary text color, with the primary
     * text color.
     */
    public static final int ThemeOverlay_Material_Dark_ActionBar=0x0103024c;
    /**
     * Theme overlay that overrides window properties to display as a dialog.
     * Override behaviour to set the theme colours for dialogs, keep them the same.
     */
    public static final int ThemeOverlay_Material_Dialog=0x010302d6;
    public static final int ThemeOverlay_Material_Dialog_Alert=0x010302d7;
    /**
     * Theme overlay that replaces colors with their light versions but preserves
     * the value of colorAccent, colorPrimary and its variants.
     */
    public static final int ThemeOverlay_Material_Light=0x0103024a;
    /**
     * Widget Styles
     */
    public static final int Widget=0x01030012;
    public static final int Widget_AbsListView=0x01030013;
    public static final int Widget_ActionBar=0x01030082;
    public static final int Widget_ActionBar_TabBar=0x010300f4;
    public static final int Widget_ActionBar_TabText=0x010300f3;
    public static final int Widget_ActionBar_TabView=0x010300f2;
    public static final int Widget_ActionButton=0x01030084;
    public static final int Widget_ActionButton_CloseMode=0x01030088;
    public static final int Widget_ActionButton_Overflow=0x01030087;
    public static final int Widget_AutoCompleteTextView=0x01030027;
    public static final int Widget_Button=0x01030014;
    public static final int Widget_Button_Inset=0x01030015;
    public static final int Widget_Button_Small=0x01030016;
    public static final int Widget_Button_Toggle=0x01030017;
    public static final int Widget_CalendarView=0x010300eb;
    public static final int Widget_CompoundButton=0x01030018;
    public static final int Widget_CompoundButton_CheckBox=0x01030019;
    public static final int Widget_CompoundButton_RadioButton=0x0103001a;
    public static final int Widget_CompoundButton_Star=0x0103001b;
    public static final int Widget_DatePicker=0x010300ee;
    /**
     * Widget Styles
     */
    public static final int Widget_DeviceDefault=0x01030140;
    public static final int Widget_DeviceDefault_ActionBar=0x0103016b;
    public static final int Widget_DeviceDefault_ActionBar_Solid=0x01030173;
    public static final int Widget_DeviceDefault_ActionBar_TabBar=0x01030172;
    public static final int Widget_DeviceDefault_ActionBar_TabText=0x01030171;
    public static final int Widget_DeviceDefault_ActionBar_TabView=0x01030170;
    public static final int Widget_DeviceDefault_ActionButton=0x01030166;
    public static final int Widget_DeviceDefault_ActionButton_CloseMode=0x0103016a;
    public static final int Widget_DeviceDefault_ActionButton_Overflow=0x01030167;
    public static final int Widget_DeviceDefault_ActionButton_TextButton=0x01030168;
    public static final int Widget_DeviceDefault_ActionMode=0x01030169;
    public static final int Widget_DeviceDefault_AutoCompleteTextView=0x01030147;
    public static final int Widget_DeviceDefault_Button=0x01030141;
    public static final int Widget_DeviceDefault_Button_Borderless=0x0103016c;
    /**
     * Colored borderless ink button
     */
    public static final int Widget_DeviceDefault_Button_Borderless_Colored=0x010302e1;
    public static final int Widget_DeviceDefault_Button_Borderless_Small=0x01030145;
    public static final int Widget_DeviceDefault_Button_Colored=0x010302e0;
    public static final int Widget_DeviceDefault_Button_Inset=0x01030143;
    public static final int Widget_DeviceDefault_Button_Small=0x01030142;
    public static final int Widget_DeviceDefault_Button_Toggle=0x01030144;
    public static final int Widget_DeviceDefault_CalendarView=0x0103016e;
    public static final int Widget_DeviceDefault_CheckedTextView=0x010301db;
    public static final int Widget_DeviceDefault_CompoundButton_CheckBox=0x01030148;
    public static final int Widget_DeviceDefault_CompoundButton_RadioButton=0x01030159;
    public static final int Widget_DeviceDefault_CompoundButton_Star=0x0103015d;
    public static final int Widget_DeviceDefault_DatePicker=0x0103016f;
    public static final int Widget_DeviceDefault_DropDownItem=0x01030161;
    public static final int Widget_DeviceDefault_DropDownItem_Spinner=0x01030162;
    public static final int Widget_DeviceDefault_EditText=0x0103014a;
    public static final int Widget_DeviceDefault_ExpandableListView=0x0103014b;
    public static final int Widget_DeviceDefault_FastScroll=0x010301e9;
    public static final int Widget_DeviceDefault_GridView=0x0103014c;
    public static final int Widget_DeviceDefault_HorizontalScrollView=0x0103015b;
    public static final int Widget_DeviceDefault_ImageButton=0x0103014d;
    public static final int Widget_DeviceDefault_Light=0x01030174;
    public static final int Widget_DeviceDefault_Light_ActionBar=0x010301a3;
    public static final int Widget_DeviceDefault_Light_ActionBar_Solid=0x010301a7;
    /**
     * @deprecated Action bars are now themed using the inheritable android:theme attribute.
     */
    @Deprecated
    public static final int Widget_DeviceDefault_Light_ActionBar_Solid_Inverse=0x010301a8;
    public static final int Widget_DeviceDefault_Light_ActionBar_TabBar=0x010301a6;
    /**
     * @deprecated Action bars are now themed using the inheritable android:theme attribute.
     */
    @Deprecated
    public static final int Widget_DeviceDefault_Light_ActionBar_TabBar_Inverse=0x010301a9;
    public static final int Widget_DeviceDefault_Light_ActionBar_TabText=0x010301a5;
    /**
     * @deprecated Action bars are now themed using the inheritable android:theme attribute.
     */
    @Deprecated
    public static final int Widget_DeviceDefault_Light_ActionBar_TabText_Inverse=0x010301ab;
    public static final int Widget_DeviceDefault_Light_ActionBar_TabView=0x010301a4;
    /**
     * @deprecated Action bars are now themed using the inheritable android:theme attribute.
     */
    @Deprecated
    public static final int Widget_DeviceDefault_Light_ActionBar_TabView_Inverse=0x010301aa;
    public static final int Widget_DeviceDefault_Light_ActionButton=0x0103019f;
    public static final int Widget_DeviceDefault_Light_ActionButton_CloseMode=0x010301a2;
    public static final int Widget_DeviceDefault_Light_ActionButton_Overflow=0x010301a0;
    public static final int Widget_DeviceDefault_Light_ActionMode=0x010301a1;
    /**
     * @deprecated Action bars are now themed using the inheritable android:theme attribute.
     */
    @Deprecated
    public static final int Widget_DeviceDefault_Light_ActionMode_Inverse=0x010301ac;
    public static final int Widget_DeviceDefault_Light_AutoCompleteTextView=0x0103017b;
    public static final int Widget_DeviceDefault_Light_Button=0x01030175;
    public static final int Widget_DeviceDefault_Light_Button_Borderless_Small=0x01030179;
    public static final int Widget_DeviceDefault_Light_Button_Inset=0x01030177;
    public static final int Widget_DeviceDefault_Light_Button_Small=0x01030176;
    public static final int Widget_DeviceDefault_Light_Button_Toggle=0x01030178;
    public static final int Widget_DeviceDefault_Light_CalendarView=0x0103019e;
    public static final int Widget_DeviceDefault_Light_CheckedTextView=0x010301dc;
    public static final int Widget_DeviceDefault_Light_CompoundButton_CheckBox=0x0103017c;
    public static final int Widget_DeviceDefault_Light_CompoundButton_RadioButton=0x01030190;
    public static final int Widget_DeviceDefault_Light_CompoundButton_Star=0x01030194;
    public static final int Widget_DeviceDefault_Light_DropDownItem=0x01030198;
    public static final int Widget_DeviceDefault_Light_DropDownItem_Spinner=0x01030199;
    public static final int Widget_DeviceDefault_Light_EditText=0x0103017e;
    public static final int Widget_DeviceDefault_Light_ExpandableListView=0x0103017f;
    public static final int Widget_DeviceDefault_Light_FastScroll=0x010301eb;
    public static final int Widget_DeviceDefault_Light_GridView=0x01030180;
    public static final int Widget_DeviceDefault_Light_HorizontalScrollView=0x01030192;
    public static final int Widget_DeviceDefault_Light_ImageButton=0x01030181;
    public static final int Widget_DeviceDefault_Light_ListPopupWindow=0x0103019b;
    public static final int Widget_DeviceDefault_Light_ListView=0x01030182;
    public static final int Widget_DeviceDefault_Light_ListView_DropDown=0x0103017d;
    public static final int Widget_DeviceDefault_Light_MediaRouteButton=0x010301d8;
    public static final int Widget_DeviceDefault_Light_PopupMenu=0x0103019c;
    public static final int Widget_DeviceDefault_Light_PopupWindow=0x01030183;
    public static final int Widget_DeviceDefault_Light_ProgressBar=0x01030184;
    public static final int Widget_DeviceDefault_Light_ProgressBar_Horizontal=0x01030185;
    public static final int Widget_DeviceDefault_Light_ProgressBar_Inverse=0x01030189;
    public static final int Widget_DeviceDefault_Light_ProgressBar_Large=0x01030188;
    public static final int Widget_DeviceDefault_Light_ProgressBar_Large_Inverse=0x0103018b;
    public static final int Widget_DeviceDefault_Light_ProgressBar_Small=0x01030186;
    public static final int Widget_DeviceDefault_Light_ProgressBar_Small_Inverse=0x0103018a;
    public static final int Widget_DeviceDefault_Light_ProgressBar_Small_Title=0x01030187;
    public static final int Widget_DeviceDefault_Light_RatingBar=0x0103018d;
    public static final int Widget_DeviceDefault_Light_RatingBar_Indicator=0x0103018e;
    public static final int Widget_DeviceDefault_Light_RatingBar_Small=0x0103018f;
    public static final int Widget_DeviceDefault_Light_ScrollView=0x01030191;
    public static final int Widget_DeviceDefault_Light_SeekBar=0x0103018c;
    public static final int Widget_DeviceDefault_Light_Spinner=0x01030193;
    public static final int Widget_DeviceDefault_Light_StackView=0x010301ec;
    public static final int Widget_DeviceDefault_Light_Tab=0x0103019d;
    public static final int Widget_DeviceDefault_Light_TabWidget=0x01030195;
    public static final int Widget_DeviceDefault_Light_TextView=0x0103017a;
    public static final int Widget_DeviceDefault_Light_TextView_SpinnerItem=0x0103019a;
    public static final int Widget_DeviceDefault_Light_WebTextView=0x01030196;
    public static final int Widget_DeviceDefault_Light_WebView=0x01030197;
    public static final int Widget_DeviceDefault_ListPopupWindow=0x01030164;
    public static final int Widget_DeviceDefault_ListView=0x0103014e;
    public static final int Widget_DeviceDefault_ListView_DropDown=0x01030149;
    public static final int Widget_DeviceDefault_MediaRouteButton=0x010301d7;
    public static final int Widget_DeviceDefault_PopupMenu=0x01030165;
    public static final int Widget_DeviceDefault_PopupWindow=0x0103014f;
    public static final int Widget_DeviceDefault_ProgressBar=0x01030150;
    public static final int Widget_DeviceDefault_ProgressBar_Horizontal=0x01030151;
    public static final int Widget_DeviceDefault_ProgressBar_Large=0x01030154;
    public static final int Widget_DeviceDefault_ProgressBar_Small=0x01030152;
    public static final int Widget_DeviceDefault_ProgressBar_Small_Title=0x01030153;
    public static final int Widget_DeviceDefault_RatingBar=0x01030156;
    public static final int Widget_DeviceDefault_RatingBar_Indicator=0x01030157;
    public static final int Widget_DeviceDefault_RatingBar_Small=0x01030158;
    public static final int Widget_DeviceDefault_ScrollView=0x0103015a;
    public static final int Widget_DeviceDefault_SeekBar=0x01030155;
    public static final int Widget_DeviceDefault_Spinner=0x0103015c;
    public static final int Widget_DeviceDefault_StackView=0x010301ea;
    public static final int Widget_DeviceDefault_Tab=0x0103016d;
    public static final int Widget_DeviceDefault_TabWidget=0x0103015e;
    public static final int Widget_DeviceDefault_TextView=0x01030146;
    public static final int Widget_DeviceDefault_TextView_SpinnerItem=0x01030163;
    public static final int Widget_DeviceDefault_WebTextView=0x0103015f;
    public static final int Widget_DeviceDefault_WebView=0x01030160;
    public static final int Widget_DropDownItem=0x0103002b;
    public static final int Widget_DropDownItem_Spinner=0x0103002c;
    public static final int Widget_EditText=0x01030023;
    public static final int Widget_ExpandableListView=0x01030024;
    public static final int Widget_FastScroll=0x010301e5;
    public static final int Widget_FragmentBreadCrumbs=0x01030089;
    public static final int Widget_Gallery=0x01030035;
    public static final int Widget_GridView=0x01030032;
    /**
     * Widget Styles
     */
    public static final int Widget_Holo=0x0103008a;
    public static final int Widget_Holo_ActionBar=0x010300b4;
    public static final int Widget_Holo_ActionBar_Solid=0x01030121;
    public static final int Widget_Holo_ActionBar_TabBar=0x010300f7;
    public static final int Widget_Holo_ActionBar_TabText=0x010300f6;
    public static final int Widget_Holo_ActionBar_TabView=0x010300f5;
    public static final int Widget_Holo_ActionButton=0x010300af;
    public static final int Widget_Holo_ActionButton_CloseMode=0x010300b3;
    public static final int Widget_Holo_ActionButton_Overflow=0x010300b0;
    public static final int Widget_Holo_ActionButton_TextButton=0x010300b1;
    public static final int Widget_Holo_ActionMode=0x010300b2;
    public static final int Widget_Holo_AutoCompleteTextView=0x01030090;
    public static final int Widget_Holo_Button=0x0103008b;
    public static final int Widget_Holo_Button_Borderless=0x010300e2;
    public static final int Widget_Holo_Button_Borderless_Small=0x0103011a;
    public static final int Widget_Holo_Button_Inset=0x0103008d;
    public static final int Widget_Holo_Button_Small=0x0103008c;
    public static final int Widget_Holo_Button_Toggle=0x0103008e;
    public static final int Widget_Holo_CalendarView=0x010300ec;
    public static final int Widget_Holo_CheckedTextView=0x010301d9;
    public static final int Widget_Holo_CompoundButton_CheckBox=0x01030091;
    public static final int Widget_Holo_CompoundButton_RadioButton=0x010300a2;
    public static final int Widget_Holo_CompoundButton_Star=0x010300a6;
    public static final int Widget_Holo_DatePicker=0x010300ef;
    public static final int Widget_Holo_DropDownItem=0x010300aa;
    public static final int Widget_Holo_DropDownItem_Spinner=0x010300ab;
    public static final int Widget_Holo_EditText=0x01030093;
    public static final int Widget_Holo_ExpandableListView=0x01030094;
    public static final int Widget_Holo_GridView=0x01030095;
    public static final int Widget_Holo_HorizontalScrollView=0x010300a4;
    public static final int Widget_Holo_ImageButton=0x01030096;
    /**
     * Light widget styles
     */
    public static final int Widget_Holo_Light=0x010300b5;
    public static final int Widget_Holo_Light_ActionBar=0x010300e1;
    public static final int Widget_Holo_Light_ActionBar_Solid=0x01030122;
    public static final int Widget_Holo_Light_ActionBar_Solid_Inverse=0x01030123;
    public static final int Widget_Holo_Light_ActionBar_TabBar=0x010300fa;
    public static final int Widget_Holo_Light_ActionBar_TabBar_Inverse=0x01030124;
    public static final int Widget_Holo_Light_ActionBar_TabText=0x010300f9;
    public static final int Widget_Holo_Light_ActionBar_TabText_Inverse=0x01030126;
    public static final int Widget_Holo_Light_ActionBar_TabView=0x010300f8;
    public static final int Widget_Holo_Light_ActionBar_TabView_Inverse=0x01030125;
    public static final int Widget_Holo_Light_ActionButton=0x010300dd;
    public static final int Widget_Holo_Light_ActionButton_CloseMode=0x010300e0;
    public static final int Widget_Holo_Light_ActionButton_Overflow=0x010300de;
    public static final int Widget_Holo_Light_ActionMode=0x010300df;
    public static final int Widget_Holo_Light_ActionMode_Inverse=0x01030127;
    public static final int Widget_Holo_Light_AutoCompleteTextView=0x010300bb;
    public static final int Widget_Holo_Light_Button=0x010300b6;
    public static final int Widget_Holo_Light_Button_Borderless_Small=0x0103011b;
    public static final int Widget_Holo_Light_Button_Inset=0x010300b8;
    public static final int Widget_Holo_Light_Button_Small=0x010300b7;
    public static final int Widget_Holo_Light_Button_Toggle=0x010300b9;
    public static final int Widget_Holo_Light_CalendarView=0x010300ed;
    public static final int Widget_Holo_Light_CheckedTextView=0x010301da;
    public static final int Widget_Holo_Light_CompoundButton_CheckBox=0x010300bc;
    public static final int Widget_Holo_Light_CompoundButton_RadioButton=0x010300d0;
    public static final int Widget_Holo_Light_CompoundButton_Star=0x010300d4;
    public static final int Widget_Holo_Light_DropDownItem=0x010300d8;
    public static final int Widget_Holo_Light_DropDownItem_Spinner=0x010300d9;
    public static final int Widget_Holo_Light_EditText=0x010300be;
    public static final int Widget_Holo_Light_ExpandableListView=0x010300bf;
    public static final int Widget_Holo_Light_GridView=0x010300c0;
    public static final int Widget_Holo_Light_HorizontalScrollView=0x010300d2;
    public static final int Widget_Holo_Light_ImageButton=0x010300c1;
    public static final int Widget_Holo_Light_ListPopupWindow=0x010300db;
    public static final int Widget_Holo_Light_ListView=0x010300c2;
    public static final int Widget_Holo_Light_ListView_DropDown=0x010300bd;
    public static final int Widget_Holo_Light_MediaRouteButton=0x010301d6;
    public static final int Widget_Holo_Light_PopupMenu=0x010300dc;
    public static final int Widget_Holo_Light_PopupWindow=0x010300c3;
    public static final int Widget_Holo_Light_ProgressBar=0x010300c4;
    public static final int Widget_Holo_Light_ProgressBar_Horizontal=0x010300c5;
    public static final int Widget_Holo_Light_ProgressBar_Inverse=0x010300c9;
    public static final int Widget_Holo_Light_ProgressBar_Large=0x010300c8;
    public static final int Widget_Holo_Light_ProgressBar_Large_Inverse=0x010300cb;
    public static final int Widget_Holo_Light_ProgressBar_Small=0x010300c6;
    public static final int Widget_Holo_Light_ProgressBar_Small_Inverse=0x010300ca;
    public static final int Widget_Holo_Light_ProgressBar_Small_Title=0x010300c7;
    public static final int Widget_Holo_Light_RatingBar=0x010300cd;
    public static final int Widget_Holo_Light_RatingBar_Indicator=0x010300ce;
    public static final int Widget_Holo_Light_RatingBar_Small=0x010300cf;
    public static final int Widget_Holo_Light_ScrollView=0x010300d1;
    public static final int Widget_Holo_Light_SeekBar=0x010300cc;
    public static final int Widget_Holo_Light_Spinner=0x010300d3;
    public static final int Widget_Holo_Light_Tab=0x010300e4;
    public static final int Widget_Holo_Light_TabWidget=0x010300d5;
    public static final int Widget_Holo_Light_TextView=0x010300ba;
    public static final int Widget_Holo_Light_TextView_SpinnerItem=0x010300da;
    public static final int Widget_Holo_Light_WebTextView=0x010300d6;
    public static final int Widget_Holo_Light_WebView=0x010300d7;
    public static final int Widget_Holo_ListPopupWindow=0x010300ad;
    public static final int Widget_Holo_ListView=0x01030097;
    public static final int Widget_Holo_ListView_DropDown=0x01030092;
    public static final int Widget_Holo_MediaRouteButton=0x010301d5;
    public static final int Widget_Holo_PopupMenu=0x010300ae;
    public static final int Widget_Holo_PopupWindow=0x01030098;
    public static final int Widget_Holo_ProgressBar=0x01030099;
    public static final int Widget_Holo_ProgressBar_Horizontal=0x0103009a;
    public static final int Widget_Holo_ProgressBar_Large=0x0103009d;
    public static final int Widget_Holo_ProgressBar_Small=0x0103009b;
    public static final int Widget_Holo_ProgressBar_Small_Title=0x0103009c;
    public static final int Widget_Holo_RatingBar=0x0103009f;
    public static final int Widget_Holo_RatingBar_Indicator=0x010300a0;
    public static final int Widget_Holo_RatingBar_Small=0x010300a1;
    public static final int Widget_Holo_ScrollView=0x010300a3;
    public static final int Widget_Holo_SeekBar=0x0103009e;
    public static final int Widget_Holo_Spinner=0x010300a5;
    public static final int Widget_Holo_Tab=0x010300e3;
    public static final int Widget_Holo_TabWidget=0x010300a7;
    public static final int Widget_Holo_TextView=0x0103008f;
    public static final int Widget_Holo_TextView_SpinnerItem=0x010300ac;
    public static final int Widget_Holo_WebTextView=0x010300a8;
    public static final int Widget_Holo_WebView=0x010300a9;
    public static final int Widget_ImageButton=0x01030026;
    public static final int Widget_ImageWell=0x01030025;
    /**
     * {@deprecated Use Copy this definition into your own application project.}
     */
    @Deprecated
    public static final int Widget_KeyboardView=0x01030057;
    public static final int Widget_ListPopupWindow=0x01030085;
    public static final int Widget_ListView=0x0103002e;
    public static final int Widget_ListView_DropDown=0x01030030;
    public static final int Widget_ListView_Menu=0x01030031;
    public static final int Widget_ListView_White=0x0103002f;
    public static final int Widget_Material=0x0103024d;
    public static final int Widget_Material_ActionBar=0x0103024e;
    public static final int Widget_Material_ActionBar_Solid=0x0103024f;
    public static final int Widget_Material_ActionBar_TabBar=0x01030250;
    public static final int Widget_Material_ActionBar_TabText=0x01030251;
    public static final int Widget_Material_ActionBar_TabView=0x01030252;
    public static final int Widget_Material_ActionButton=0x01030253;
    public static final int Widget_Material_ActionButton_CloseMode=0x01030254;
    public static final int Widget_Material_ActionButton_Overflow=0x01030255;
    public static final int Widget_Material_ActionMode=0x01030256;
    public static final int Widget_Material_AutoCompleteTextView=0x01030257;
    /**
     * Bordered ink button
     */
    public static final int Widget_Material_Button=0x01030258;
    /**
     * Borderless ink button
     */
    public static final int Widget_Material_Button_Borderless=0x01030259;
    /**
     * Colored borderless ink button
     */
    public static final int Widget_Material_Button_Borderless_Colored=0x0103025a;
    /**
     * Small borderless ink button
     */
    public static final int Widget_Material_Button_Borderless_Small=0x0103025b;
    /**
     * Colored bordered ink button
     */
    public static final int Widget_Material_Button_Colored=0x010302d3;
    public static final int Widget_Material_Button_Inset=0x0103025c;
    /**
     * Small bordered ink button
     */
    public static final int Widget_Material_Button_Small=0x0103025d;
    public static final int Widget_Material_Button_Toggle=0x0103025e;
    public static final int Widget_Material_ButtonBar=0x0103025f;
    public static final int Widget_Material_ButtonBar_AlertDialog=0x01030260;
    public static final int Widget_Material_CalendarView=0x01030261;
    public static final int Widget_Material_CheckedTextView=0x01030262;
    public static final int Widget_Material_CompoundButton_CheckBox=0x01030263;
    public static final int Widget_Material_CompoundButton_RadioButton=0x01030264;
    public static final int Widget_Material_CompoundButton_Star=0x01030265;
    public static final int Widget_Material_CompoundButton_Switch=0x010302da;
    public static final int Widget_Material_DatePicker=0x01030266;
    public static final int Widget_Material_DropDownItem=0x01030267;
    public static final int Widget_Material_DropDownItem_Spinner=0x01030268;
    public static final int Widget_Material_EditText=0x01030269;
    public static final int Widget_Material_ExpandableListView=0x0103026a;
    public static final int Widget_Material_FastScroll=0x0103026b;
    public static final int Widget_Material_GridView=0x0103026c;
    public static final int Widget_Material_HorizontalScrollView=0x0103026d;
    public static final int Widget_Material_ImageButton=0x0103026e;
    /**
     * Light widget styles
     */
    public static final int Widget_Material_Light=0x0103028e;
    public static final int Widget_Material_Light_ActionBar=0x0103028f;
    public static final int Widget_Material_Light_ActionBar_Solid=0x01030290;
    public static final int Widget_Material_Light_ActionBar_TabBar=0x01030291;
    public static final int Widget_Material_Light_ActionBar_TabText=0x01030292;
    public static final int Widget_Material_Light_ActionBar_TabView=0x01030293;
    public static final int Widget_Material_Light_ActionButton=0x01030294;
    public static final int Widget_Material_Light_ActionButton_CloseMode=0x01030295;
    public static final int Widget_Material_Light_ActionButton_Overflow=0x01030296;
    public static final int Widget_Material_Light_ActionMode=0x01030297;
    public static final int Widget_Material_Light_AutoCompleteTextView=0x01030298;
    public static final int Widget_Material_Light_Button=0x01030299;
    public static final int Widget_Material_Light_Button_Borderless=0x0103029a;
    public static final int Widget_Material_Light_Button_Borderless_Colored=0x0103029b;
    public static final int Widget_Material_Light_Button_Borderless_Small=0x0103029c;
    public static final int Widget_Material_Light_Button_Inset=0x0103029d;
    public static final int Widget_Material_Light_Button_Small=0x0103029e;
    public static final int Widget_Material_Light_Button_Toggle=0x0103029f;
    public static final int Widget_Material_Light_ButtonBar=0x010302a0;
    public static final int Widget_Material_Light_ButtonBar_AlertDialog=0x010302a1;
    public static final int Widget_Material_Light_CalendarView=0x010302a2;
    public static final int Widget_Material_Light_CheckedTextView=0x010302a3;
    public static final int Widget_Material_Light_CompoundButton_CheckBox=0x010302a4;
    public static final int Widget_Material_Light_CompoundButton_RadioButton=0x010302a5;
    public static final int Widget_Material_Light_CompoundButton_Star=0x010302a6;
    public static final int Widget_Material_Light_CompoundButton_Switch=0x010302db;
    public static final int Widget_Material_Light_DatePicker=0x010302a7;
    public static final int Widget_Material_Light_DropDownItem=0x010302a8;
    public static final int Widget_Material_Light_DropDownItem_Spinner=0x010302a9;
    public static final int Widget_Material_Light_EditText=0x010302aa;
    public static final int Widget_Material_Light_ExpandableListView=0x010302ab;
    public static final int Widget_Material_Light_FastScroll=0x010302ac;
    public static final int Widget_Material_Light_GridView=0x010302ad;
    public static final int Widget_Material_Light_HorizontalScrollView=0x010302ae;
    public static final int Widget_Material_Light_ImageButton=0x010302af;
    public static final int Widget_Material_Light_ListPopupWindow=0x010302b0;
    public static final int Widget_Material_Light_ListView=0x010302b1;
    public static final int Widget_Material_Light_ListView_DropDown=0x010302b2;
    public static final int Widget_Material_Light_MediaRouteButton=0x010302b3;
    public static final int Widget_Material_Light_NumberPicker=0x010302dd;
    public static final int Widget_Material_Light_PopupMenu=0x010302b4;
    public static final int Widget_Material_Light_PopupMenu_Overflow=0x010302b5;
    public static final int Widget_Material_Light_PopupWindow=0x010302b6;
    public static final int Widget_Material_Light_ProgressBar=0x010302b7;
    public static final int Widget_Material_Light_ProgressBar_Horizontal=0x010302b8;
    public static final int Widget_Material_Light_ProgressBar_Inverse=0x010302b9;
    public static final int Widget_Material_Light_ProgressBar_Large=0x010302ba;
    public static final int Widget_Material_Light_ProgressBar_Large_Inverse=0x010302bb;
    public static final int Widget_Material_Light_ProgressBar_Small=0x010302bc;
    public static final int Widget_Material_Light_ProgressBar_Small_Inverse=0x010302bd;
    public static final int Widget_Material_Light_ProgressBar_Small_Title=0x010302be;
    public static final int Widget_Material_Light_RatingBar=0x010302bf;
    public static final int Widget_Material_Light_RatingBar_Indicator=0x010302c0;
    public static final int Widget_Material_Light_RatingBar_Small=0x010302c1;
    public static final int Widget_Material_Light_ScrollView=0x010302c2;
    public static final int Widget_Material_Light_SearchView=0x010302c3;
    public static final int Widget_Material_Light_SeekBar=0x010302c4;
    public static final int Widget_Material_Light_SegmentedButton=0x010302c5;
    public static final int Widget_Material_Light_Spinner=0x010302c7;
    public static final int Widget_Material_Light_Spinner_Underlined=0x010302c8;
    public static final int Widget_Material_Light_StackView=0x010302c6;
    public static final int Widget_Material_Light_Tab=0x010302c9;
    public static final int Widget_Material_Light_TabWidget=0x010302ca;
    public static final int Widget_Material_Light_TextView=0x010302cb;
    public static final int Widget_Material_Light_TextView_SpinnerItem=0x010302cc;
    public static final int Widget_Material_Light_TimePicker=0x010302cd;
    public static final int Widget_Material_Light_WebTextView=0x010302ce;
    public static final int Widget_Material_Light_WebView=0x010302cf;
    public static final int Widget_Material_ListPopupWindow=0x0103026f;
    public static final int Widget_Material_ListView=0x01030270;
    public static final int Widget_Material_ListView_DropDown=0x01030271;
    public static final int Widget_Material_MediaRouteButton=0x01030272;
    public static final int Widget_Material_NumberPicker=0x010302dc;
    public static final int Widget_Material_PopupMenu=0x01030273;
    public static final int Widget_Material_PopupMenu_Overflow=0x01030274;
    public static final int Widget_Material_PopupWindow=0x01030275;
    public static final int Widget_Material_ProgressBar=0x01030276;
    public static final int Widget_Material_ProgressBar_Horizontal=0x01030277;
    public static final int Widget_Material_ProgressBar_Large=0x01030278;
    public static final int Widget_Material_ProgressBar_Small=0x01030279;
    public static final int Widget_Material_ProgressBar_Small_Title=0x0103027a;
    public static final int Widget_Material_RatingBar=0x0103027b;
    public static final int Widget_Material_RatingBar_Indicator=0x0103027c;
    public static final int Widget_Material_RatingBar_Small=0x0103027d;
    public static final int Widget_Material_ScrollView=0x0103027e;
    public static final int Widget_Material_SearchView=0x0103027f;
    public static final int Widget_Material_SeekBar=0x01030280;
    /**
     * A seek bar with tick marks at each progress value.
     */
    public static final int Widget_Material_SeekBar_Discrete=0x010302d9;
    public static final int Widget_Material_SegmentedButton=0x01030281;
    public static final int Widget_Material_Spinner=0x01030283;
    public static final int Widget_Material_Spinner_Underlined=0x01030284;
    public static final int Widget_Material_StackView=0x01030282;
    public static final int Widget_Material_Tab=0x01030285;
    public static final int Widget_Material_TabWidget=0x01030286;
    public static final int Widget_Material_TextView=0x01030287;
    public static final int Widget_Material_TextView_SpinnerItem=0x01030288;
    public static final int Widget_Material_TimePicker=0x01030289;
    public static final int Widget_Material_Toolbar=0x0103028a;
    public static final int Widget_Material_Toolbar_Button_Navigation=0x0103028b;
    public static final int Widget_Material_WebTextView=0x0103028c;
    public static final int Widget_Material_WebView=0x0103028d;
    public static final int Widget_PopupMenu=0x01030086;
    public static final int Widget_PopupWindow=0x01030036;
    public static final int Widget_ProgressBar=0x0103001c;
    public static final int Widget_ProgressBar_Horizontal=0x0103001f;
    public static final int Widget_ProgressBar_Inverse=0x0103005b;
    public static final int Widget_ProgressBar_Large=0x0103001d;
    public static final int Widget_ProgressBar_Large_Inverse=0x0103005c;
    public static final int Widget_ProgressBar_Small=0x0103001e;
    public static final int Widget_ProgressBar_Small_Inverse=0x0103005d;
    public static final int Widget_RatingBar=0x01030021;
    public static final int Widget_ScrollView=0x0103002d;
    public static final int Widget_SeekBar=0x01030020;
    public static final int Widget_Spinner=0x01030028;
    public static final int Widget_Spinner_DropDown=0x01030083;
    public static final int Widget_StackView=0x010301e6;
    public static final int Widget_TabWidget=0x01030034;
    public static final int Widget_TextView=0x01030022;
    public static final int Widget_TextView_PopupMenu=0x01030029;
    public static final int Widget_TextView_SpinnerItem=0x0103002a;
    public static final int Widget_Toolbar=0x010301e7;
    public static final int Widget_Toolbar_Button_Navigation=0x010301e8;
    public static final int Widget_WebView=0x01030033;
  }
  /**
   * @doconly
   */
  public static final class styleable {
    /**
     * Attributes that can be used with a AbsListView.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AbsListView_listSelector android:listSelector}</code></td><td>Drawable used to indicate the currently selected item in the list.</td></tr>
     * <tr><td><code>{@link #AbsListView_drawSelectorOnTop android:drawSelectorOnTop}</code></td><td>When set to true, the selector will be drawn over the selected item.</td></tr>
     * <tr><td><code>{@link #AbsListView_stackFromBottom android:stackFromBottom}</code></td><td>Used by ListView and GridView to stack their content from the bottom.</td></tr>
     * <tr><td><code>{@link #AbsListView_scrollingCache android:scrollingCache}</code></td><td>When set to true, the list uses a drawing cache during scrolling.</td></tr>
     * <tr><td><code>{@link #AbsListView_textFilterEnabled android:textFilterEnabled}</code></td><td>When set to true, the list will filter results as the user types.</td></tr>
     * <tr><td><code>{@link #AbsListView_transcriptMode android:transcriptMode}</code></td><td>Sets the transcript mode for the list.</td></tr>
     * <tr><td><code>{@link #AbsListView_cacheColorHint android:cacheColorHint}</code></td><td>Indicates that this list will always be drawn on top of solid, single-color
     * opaque background.</td></tr>
     * <tr><td><code>{@link #AbsListView_choiceMode android:choiceMode}</code></td><td>Defines the choice behavior for the view.</td></tr>
     * <tr><td><code>{@link #AbsListView_fastScrollEnabled android:fastScrollEnabled}</code></td><td>Enables the fast scroll thumb that can be dragged to quickly scroll through
     * the list.</td></tr>
     * <tr><td><code>{@link #AbsListView_smoothScrollbar android:smoothScrollbar}</code></td><td>When set to true, the list will use a more refined calculation
     * method based on the pixels height of the items visible on screen.</td></tr>
     * <tr><td><code>{@link #AbsListView_fastScrollAlwaysVisible android:fastScrollAlwaysVisible}</code></td><td>When set to true, the list will always show the fast scroll interface.</td></tr>
     * <tr><td><code>{@link #AbsListView_fastScrollStyle android:fastScrollStyle}</code></td><td>Specifies the style of the fast scroll decorations.</td></tr>
     * </table>
     * @see #AbsListView_listSelector
     * @see #AbsListView_drawSelectorOnTop
     * @see #AbsListView_stackFromBottom
     * @see #AbsListView_scrollingCache
     * @see #AbsListView_textFilterEnabled
     * @see #AbsListView_transcriptMode
     * @see #AbsListView_cacheColorHint
     * @see #AbsListView_choiceMode
     * @see #AbsListView_fastScrollEnabled
     * @see #AbsListView_smoothScrollbar
     * @see #AbsListView_fastScrollAlwaysVisible
     * @see #AbsListView_fastScrollStyle
     */
    public static final int[] AbsListView={
      0x010100fb, 0x010100fc, 0x010100fd, 0x010100fe, 
      0x010100ff, 0x01010100, 0x01010101, 0x0101012b, 
      0x01010226, 0x01010231, 0x01010335, 0x010103f7
    };
    /**
     * <p>
     * @attr description
     * Drawable used to indicate the currently selected item in the list.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:listSelector
     */
    public static final int AbsListView_listSelector=0;
    /**
     * <p>
     * @attr description
     * When set to true, the selector will be drawn over the selected item.
     * Otherwise the selector is drawn behind the selected item. The default
     * value is false.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:drawSelectorOnTop
     */
    public static final int AbsListView_drawSelectorOnTop=1;
    /**
     * <p>
     * @attr description
     * Used by ListView and GridView to stack their content from the bottom.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:stackFromBottom
     */
    public static final int AbsListView_stackFromBottom=2;
    /**
     * <p>
     * @attr description
     * When set to true, the list uses a drawing cache during scrolling.
     * This makes the rendering faster but uses more memory. The default
     * value is true.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:scrollingCache
     */
    public static final int AbsListView_scrollingCache=3;
    /**
     * <p>
     * @attr description
     * When set to true, the list will filter results as the user types. The
     * List's adapter must support the Filterable interface for this to work.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:textFilterEnabled
     */
    public static final int AbsListView_textFilterEnabled=4;
    /**
     * <p>
     * @attr description
     * Sets the transcript mode for the list. In transcript mode, the list
     * scrolls to the bottom to make new items visible when they are added.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>alwaysScroll</td><td>2</td><td>The list will automatically scroll to the bottom, no matter what items
     * are currently visible.</td></tr>
     * <tr><td>disabled</td><td>0</td><td>Disables transcript mode. This is the default value.</td></tr>
     * <tr><td>normal</td><td>1</td><td>The list will automatically scroll to the bottom when
     * a data set change notification is received and only if the last item is
     * already visible on screen.</td></tr>
     * </table>
     *
     * @attr name android:transcriptMode
     */
    public static final int AbsListView_transcriptMode=5;
    /**
     * <p>
     * @attr description
     * Indicates that this list will always be drawn on top of solid, single-color
     * opaque background. This allows the list to optimize drawing.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:cacheColorHint
     */
    public static final int AbsListView_cacheColorHint=6;
    /**
     * <p>
     * @attr description
     * Defines the choice behavior for the view. By default, lists do not have
     * any choice behavior. By setting the choiceMode to singleChoice, the list
     * allows up to one item to be in a chosen state. By setting the choiceMode to
     * multipleChoice, the list allows any number of items to be chosen.
     * Finally, by setting the choiceMode to multipleChoiceModal the list allows
     * any number of items to be chosen in a special selection mode.
     * The application will supply a
     * {@link android.widget.AbsListView.MultiChoiceModeListener} using
     * {@link android.widget.AbsListView#setMultiChoiceModeListener} to control the
     * selection mode. This uses the {@link android.view.ActionMode} API.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>multipleChoice</td><td>2</td><td>The list allows multiple choices.</td></tr>
     * <tr><td>multipleChoiceModal</td><td>3</td><td>The list allows multiple choices in a custom selection mode.</td></tr>
     * <tr><td>none</td><td>0</td><td>Normal list that does not indicate choices.</td></tr>
     * <tr><td>singleChoice</td><td>1</td><td>The list allows up to one choice.</td></tr>
     * </table>
     *
     * @attr name android:choiceMode
     */
    public static final int AbsListView_choiceMode=7;
    /**
     * <p>
     * @attr description
     * Enables the fast scroll thumb that can be dragged to quickly scroll through
     * the list.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:fastScrollEnabled
     */
    public static final int AbsListView_fastScrollEnabled=8;
    /**
     * <p>
     * @attr description
     * When set to true, the list will use a more refined calculation
     * method based on the pixels height of the items visible on screen. This
     * property is set to true by default but should be set to false if your adapter
     * will display items of varying heights. When this property is set to true and
     * your adapter displays items of varying heights, the scrollbar thumb will
     * change size as the user scrolls through the list. When set to false, the list
     * will use only the number of items in the adapter and the number of items visible
     * on screen to determine the scrollbar's properties.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:smoothScrollbar
     */
    public static final int AbsListView_smoothScrollbar=9;
    /**
     * <p>
     * @attr description
     * When set to true, the list will always show the fast scroll interface.
     * This setting implies fastScrollEnabled.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:fastScrollAlwaysVisible
     */
    public static final int AbsListView_fastScrollAlwaysVisible=10;
    /**
     * <p>
     * @attr description
     * Specifies the style of the fast scroll decorations.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:fastScrollStyle
     */
    public static final int AbsListView_fastScrollStyle=11;
    /**
     * Attributes that can be used with a AbsSpinner.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AbsSpinner_entries android:entries}</code></td><td>Reference to an array resource that will populate a list/adapter.</td></tr>
     * </table>
     * @see #AbsSpinner_entries
     */
    public static final int[] AbsSpinner={
      0x010100b2
    };
    /**
     * <p>
     * @attr description
     * Reference to an array resource that will populate the Spinner.  For static content,
     * this is simpler than populating the Spinner programmatically.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:entries
     */
    public static final int AbsSpinner_entries=0;
    /**
     * Attributes that can be used with a AbsoluteLayout_Layout.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AbsoluteLayout_Layout_layout_x android:layout_x}</code></td><td></td></tr>
     * <tr><td><code>{@link #AbsoluteLayout_Layout_layout_y android:layout_y}</code></td><td></td></tr>
     * </table>
     * @see #AbsoluteLayout_Layout_layout_x
     * @see #AbsoluteLayout_Layout_layout_y
     */
    public static final int[] AbsoluteLayout_Layout={
      0x0101017f, 0x01010180
    };
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#layout_x}
     * attribute's value can be found in the {@link #AbsoluteLayout_Layout} array.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:layout_x
     */
    public static final int AbsoluteLayout_Layout_layout_x=0;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#layout_y}
     * attribute's value can be found in the {@link #AbsoluteLayout_Layout} array.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:layout_y
     */
    public static final int AbsoluteLayout_Layout_layout_y=1;
    /**
     * Attributes that can be used with a AccelerateInterpolator.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AccelerateInterpolator_factor android:factor}</code></td><td>This is the amount of deceleration to add when easing in.</td></tr>
     * </table>
     * @see #AccelerateInterpolator_factor
     */
    public static final int[] AccelerateInterpolator={
      0x010101d3
    };
    /**
     * <p>
     * @attr description
     * This is the amount of deceleration to add when easing in.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:factor
     */
    public static final int AccelerateInterpolator_factor=0;
    /**
     * Use <code>accessibility-service</code> as the root tag of the XML resource that
     * describes an {@link android.accessibilityservice.AccessibilityService} service,
     * which is referenced from its
     * {@link android.accessibilityservice.AccessibilityService#SERVICE_META_DATA}
     * meta-data entry.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AccessibilityService_description android:description}</code></td><td>Descriptive text for the associated data.</td></tr>
     * <tr><td><code>{@link #AccessibilityService_summary android:summary}</code></td><td>The summary for the item.</td></tr>
     * <tr><td><code>{@link #AccessibilityService_settingsActivity android:settingsActivity}</code></td><td>Fully qualified class name of an activity that allows the user to modify
     * the settings for this service.</td></tr>
     * <tr><td><code>{@link #AccessibilityService_accessibilityEventTypes android:accessibilityEventTypes}</code></td><td>The event types this service would like to receive as specified in
     * {@link android.view.accessibility.AccessibilityEvent}.</td></tr>
     * <tr><td><code>{@link #AccessibilityService_packageNames android:packageNames}</code></td><td>Comma separated package names from which this service would like to receive events (leave out for all packages).</td></tr>
     * <tr><td><code>{@link #AccessibilityService_accessibilityFeedbackType android:accessibilityFeedbackType}</code></td><td>The feedback types this service provides as specified in
     * {@link android.accessibilityservice.AccessibilityServiceInfo}.</td></tr>
     * <tr><td><code>{@link #AccessibilityService_notificationTimeout android:notificationTimeout}</code></td><td>The minimal period in milliseconds between two accessibility events of the same type
     * are sent to this service.</td></tr>
     * <tr><td><code>{@link #AccessibilityService_accessibilityFlags android:accessibilityFlags}</code></td><td>Additional flags as specified in
     * {@link android.accessibilityservice.AccessibilityServiceInfo}.</td></tr>
     * <tr><td><code>{@link #AccessibilityService_canRetrieveWindowContent android:canRetrieveWindowContent}</code></td><td>Attribute whether the accessibility service wants to be able to retrieve the
     * active window content.</td></tr>
     * <tr><td><code>{@link #AccessibilityService_canRequestTouchExplorationMode android:canRequestTouchExplorationMode}</code></td><td>Attribute whether the accessibility service wants to be able to request touch
     * exploration mode in which touched items are spoken aloud and the UI can be
     * explored via gestures.</td></tr>
     * <tr><td><code>{@link #AccessibilityService_canRequestEnhancedWebAccessibility android:canRequestEnhancedWebAccessibility}</code></td><td>Attribute whether the accessibility service wants to be able to request enhanced
     * web accessibility enhancements.</td></tr>
     * <tr><td><code>{@link #AccessibilityService_canRequestFilterKeyEvents android:canRequestFilterKeyEvents}</code></td><td>Attribute whether the accessibility service wants to be able to request to
     * filter key events.</td></tr>
     * <tr><td><code>{@link #AccessibilityService_canControlMagnification android:canControlMagnification}</code></td><td>Attribute whether the accessibility service wants to be able to control
     * display magnification.</td></tr>
     * <tr><td><code>{@link #AccessibilityService_canPerformGestures android:canPerformGestures}</code></td><td>Attribute whether the accessibility service wants to be able to perform gestures.</td></tr>
     * <tr><td><code>{@link #AccessibilityService_canRequestFingerprintGestures android:canRequestFingerprintGestures}</code></td><td>Attribute whether the accessibility service wants to be able to capture gestures from
     * the fingerprint sensor.</td></tr>
     * <tr><td><code>{@link #AccessibilityService_nonInteractiveUiTimeout android:nonInteractiveUiTimeout}</code></td><td>A recommended timeout in milliseconds used in
     * {@link android.view.accessibility.AccessibilityManager#getRecommendedTimeoutMillis(int, int)
     * android.view.accessibility.AccessibilityManager.getRecommendedTimeoutMillis(int, int)}
     * to return a suitable value for UIs that do not include interactive controls.</td></tr>
     * <tr><td><code>{@link #AccessibilityService_interactiveUiTimeout android:interactiveUiTimeout}</code></td><td>A recommended timeout in milliseconds used in
     * {@link android.view.accessibility.AccessibilityManager#getRecommendedTimeoutMillis(int, int)
     * android.view.accessibility.AccessibilityManager.getRecommendedTimeoutMillis(int, int)}
     * to return a suitable value for interactive controls.</td></tr>
     * <tr><td><code>{@link #AccessibilityService_animatedImageDrawable android:animatedImageDrawable}</code></td><td>Animated image of the target of accessibility shortcut purpose or behavior, to help
     * users understand how the target of accessibility shortcut can help them.</td></tr>
     * <tr><td><code>{@link #AccessibilityService_htmlDescription android:htmlDescription}</code></td><td>Html description of the target of accessibility shortcut purpose or behavior, to help
     * users understand how the target of accessibility shortcut can help them.</td></tr>
     * <tr><td><code>{@link #AccessibilityService_canTakeScreenshot android:canTakeScreenshot}</code></td><td>Attribute whether the accessibility service wants to be able to take screenshot.</td></tr>
     * <tr><td><code>{@link #AccessibilityService_isAccessibilityTool android:isAccessibilityTool}</code></td><td>Attribute indicating whether the accessibility service is used to assist users with
     * disabilities.</td></tr>
     * </table>
     * @see #AccessibilityService_description
     * @see #AccessibilityService_summary
     * @see #AccessibilityService_settingsActivity
     * @see #AccessibilityService_accessibilityEventTypes
     * @see #AccessibilityService_packageNames
     * @see #AccessibilityService_accessibilityFeedbackType
     * @see #AccessibilityService_notificationTimeout
     * @see #AccessibilityService_accessibilityFlags
     * @see #AccessibilityService_canRetrieveWindowContent
     * @see #AccessibilityService_canRequestTouchExplorationMode
     * @see #AccessibilityService_canRequestEnhancedWebAccessibility
     * @see #AccessibilityService_canRequestFilterKeyEvents
     * @see #AccessibilityService_canControlMagnification
     * @see #AccessibilityService_canPerformGestures
     * @see #AccessibilityService_canRequestFingerprintGestures
     * @see #AccessibilityService_nonInteractiveUiTimeout
     * @see #AccessibilityService_interactiveUiTimeout
     * @see #AccessibilityService_animatedImageDrawable
     * @see #AccessibilityService_htmlDescription
     * @see #AccessibilityService_canTakeScreenshot
     * @see #AccessibilityService_isAccessibilityTool
     */
    public static final int[] AccessibilityService={
      0x01010020, 0x010101e9, 0x01010225, 0x01010380, 
      0x01010381, 0x01010382, 0x01010383, 0x01010384, 
      0x01010385, 0x010103d7, 0x010103d8, 0x010103d9, 
      0x01010507, 0x0101050d, 0x0101054d, 0x0101058f, 
      0x01010595, 0x0101060a, 0x0101060b, 0x0101060f, 
      0x01010641
    };
    /**
     * <p>
     * @attr description
     * Short description of the accessibility service purpose or behavior.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:description
     */
    public static final int AccessibilityService_description=0;
    /**
     * <p>
     * @attr description
     * Brief summary of the accessibility service purpose or behavior.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:summary
     */
    public static final int AccessibilityService_summary=1;
    /**
     * <p>
     * @attr description
     * Component name of an activity that allows the user to modify
     * the settings for this service. This setting cannot be changed at runtime.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:settingsActivity
     */
    public static final int AccessibilityService_settingsActivity=2;
    /**
     * <p>
     * @attr description
     * The event types this service would like to receive as specified in
     * {@link android.view.accessibility.AccessibilityEvent}. This setting
     * can be changed at runtime by calling
     * {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
     * android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>typeAllMask</td><td>ffffffff</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPES_ALL_MASK} i.e. all events.</td></tr>
     * <tr><td>typeAnnouncement</td><td>4000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_ANNOUNCEMENT} events.</td></tr>
     * <tr><td>typeAssistReadingContext</td><td>1000000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_ASSIST_READING_CONTEXT} events.</td></tr>
     * <tr><td>typeContextClicked</td><td>800000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_CONTEXT_CLICKED} events.</td></tr>
     * <tr><td>typeGestureDetectionEnd</td><td>80000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_GESTURE_DETECTION_END} events.</td></tr>
     * <tr><td>typeGestureDetectionStart</td><td>40000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_GESTURE_DETECTION_START} events.</td></tr>
     * <tr><td>typeNotificationStateChanged</td><td>40</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_NOTIFICATION_STATE_CHANGED} events.</td></tr>
     * <tr><td>typeTouchExplorationGestureEnd</td><td>400</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_TOUCH_EXPLORATION_GESTURE_END} events.</td></tr>
     * <tr><td>typeTouchExplorationGestureStart</td><td>200</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_TOUCH_EXPLORATION_GESTURE_START} events.</td></tr>
     * <tr><td>typeTouchInteractionEnd</td><td>200000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_TOUCH_INTERACTION_END} events.</td></tr>
     * <tr><td>typeTouchInteractionStart</td><td>100000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_TOUCH_INTERACTION_START} events.</td></tr>
     * <tr><td>typeViewAccessibilityFocusCleared</td><td>10000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED} events.</td></tr>
     * <tr><td>typeViewAccessibilityFocused</td><td>8000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_ACCESSIBILITY_FOCUSED} events.</td></tr>
     * <tr><td>typeViewClicked</td><td>1</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_CLICKED} events.</td></tr>
     * <tr><td>typeViewFocused</td><td>8</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_FOCUSED} events.</td></tr>
     * <tr><td>typeViewHoverEnter</td><td>80</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_HOVER_ENTER} events.</td></tr>
     * <tr><td>typeViewHoverExit</td><td>100</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_HOVER_EXIT} events.</td></tr>
     * <tr><td>typeViewLongClicked</td><td>2</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_LONG_CLICKED} events.</td></tr>
     * <tr><td>typeViewScrolled</td><td>1000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_SCROLLED} events.</td></tr>
     * <tr><td>typeViewSelected</td><td>4</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_SELECTED} events.</td></tr>
     * <tr><td>typeViewTextChanged</td><td>10</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_TEXT_CHANGED} events.</td></tr>
     * <tr><td>typeViewTextSelectionChanged</td><td>2000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_TEXT_SELECTION_CHANGED} events.</td></tr>
     * <tr><td>typeViewTextTraversedAtMovementGranularity</td><td>20000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY} events.</td></tr>
     * <tr><td>typeWindowContentChanged</td><td>800</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_WINDOW_CONTENT_CHANGED} events.</td></tr>
     * <tr><td>typeWindowStateChanged</td><td>20</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_WINDOW_STATE_CHANGED} events.</td></tr>
     * <tr><td>typeWindowsChanged</td><td>400000</td><td>Receives {@link android.view.accessibility.AccessibilityEvent#TYPE_WINDOWS_CHANGED} events.</td></tr>
     * </table>
     *
     * @attr name android:accessibilityEventTypes
     */
    public static final int AccessibilityService_accessibilityEventTypes=3;
    /**
     * <p>
     * @attr description
     * Comma separated package names from which this service would like to receive events (leave out for all packages).
     * {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
     * android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:packageNames
     */
    public static final int AccessibilityService_packageNames=4;
    /**
     * <p>
     * @attr description
     * The feedback types this service provides as specified in
     * {@link android.accessibilityservice.AccessibilityServiceInfo}. This setting
     * can be changed at runtime by calling
     * {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
     * android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>feedbackAllMask</td><td>ffffffff</td><td>Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_ALL_MASK} feedback.</td></tr>
     * <tr><td>feedbackAudible</td><td>4</td><td>Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_AUDIBLE} feedback.</td></tr>
     * <tr><td>feedbackGeneric</td><td>10</td><td>Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_GENERIC} feedback.</td></tr>
     * <tr><td>feedbackHaptic</td><td>2</td><td>Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_HAPTIC} feedback.</td></tr>
     * <tr><td>feedbackSpoken</td><td>1</td><td>Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_SPOKEN} feedback.</td></tr>
     * <tr><td>feedbackVisual</td><td>8</td><td>Provides {@link android.accessibilityservice.AccessibilityServiceInfo#FEEDBACK_VISUAL} feedback.</td></tr>
     * </table>
     *
     * @attr name android:accessibilityFeedbackType
     */
    public static final int AccessibilityService_accessibilityFeedbackType=5;
    /**
     * <p>
     * @attr description
     * The minimal period in milliseconds between two accessibility events of the same type
     * are sent to this service. This setting can be changed at runtime by calling
     * {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
     * android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:notificationTimeout
     */
    public static final int AccessibilityService_notificationTimeout=6;
    /**
     * <p>
     * @attr description
     * Additional flags as specified in
     * {@link android.accessibilityservice.AccessibilityServiceInfo}.
     * This setting can be changed at runtime by calling
     * {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
     * android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>flagDefault</td><td>1</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#DEFAULT}.</td></tr>
     * <tr><td>flagEnableAccessibilityVolume</td><td>80</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_ENABLE_ACCESSIBILITY_VOLUME}.</td></tr>
     * <tr><td>flagIncludeNotImportantViews</td><td>2</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_INCLUDE_NOT_IMPORTANT_VIEWS}.</td></tr>
     * <tr><td>flagReportViewIds</td><td>10</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REPORT_VIEW_IDS}.</td></tr>
     * <tr><td>flagRequestAccessibilityButton</td><td>100</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_ACCESSIBILITY_BUTTON}.</td></tr>
     * <tr><td>flagRequestEnhancedWebAccessibility</td><td>8</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_ENHANCED_WEB_ACCESSIBILITY}.
     * Not used by the framework.</td></tr>
     * <tr><td>flagRequestFilterKeyEvents</td><td>20</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_FILTER_KEY_EVENTS}.</td></tr>
     * <tr><td>flagRequestFingerprintGestures</td><td>200</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_FINGERPRINT_GESTURES}.</td></tr>
     * <tr><td>flagRequestMultiFingerGestures</td><td>1000</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_MULTI_FINGER_GESTURES}.</td></tr>
     * <tr><td>flagRequestShortcutWarningDialogSpokenFeedback</td><td>400</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_SHORTCUT_WARNING_DIALOG_SPOKEN_FEEDBACK}.</td></tr>
     * <tr><td>flagRequestTouchExplorationMode</td><td>4</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE}.</td></tr>
     * <tr><td>flagRetrieveInteractiveWindows</td><td>40</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_RETRIEVE_INTERACTIVE_WINDOWS}.</td></tr>
     * <tr><td>flagSendMotionEvents</td><td>4000</td><td></td></tr>
     * <tr><td>flagServiceHandlesDoubleTap</td><td>800</td><td>Has flag {@link android.accessibilityservice.AccessibilityServiceInfo#FLAG_SERVICE_HANDLES_DOUBLE_TAP}.</td></tr>
     * </table>
     *
     * @attr name android:accessibilityFlags
     */
    public static final int AccessibilityService_accessibilityFlags=7;
    /**
     * <p>
     * @attr description
     * Attribute whether the accessibility service wants to be able to retrieve the
     * active window content. This setting cannot be changed at runtime.
     * <p>
     * Required to allow setting the {@link android.accessibilityservice
     * #AccessibilityServiceInfo#FLAG_RETRIEVE_INTERACTIVE_WINDOWS} flag.
     * </p>
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:canRetrieveWindowContent
     */
    public static final int AccessibilityService_canRetrieveWindowContent=8;
    /**
     * <p>
     * @attr description
     * Attribute whether the accessibility service wants to be able to request touch
     * exploration mode in which touched items are spoken aloud and the UI can be
     * explored via gestures.
     * <p>
     * Required to allow setting the {@link android.accessibilityservice
     * #AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE} flag.
     * </p>
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:canRequestTouchExplorationMode
     */
    public static final int AccessibilityService_canRequestTouchExplorationMode=9;
    /**
     * <p>
     * @attr description
     * Attribute whether the accessibility service wants to be able to request enhanced
     * web accessibility enhancements.
     * {@deprecated Not used by the framework}
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:canRequestEnhancedWebAccessibility
     */
    @Deprecated
    public static final int AccessibilityService_canRequestEnhancedWebAccessibility=10;
    /**
     * <p>
     * @attr description
     * Attribute whether the accessibility service wants to be able to request to
     * filter key events.
     * <p>
     * Required to allow setting the {@link android.accessibilityservice
     * #AccessibilityServiceInfo#FLAG_REQUEST_FILTER_KEY_EVENTS} flag.
     * </p>
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:canRequestFilterKeyEvents
     */
    public static final int AccessibilityService_canRequestFilterKeyEvents=11;
    /**
     * <p>
     * @attr description
     * Attribute whether the accessibility service wants to be able to control
     * display magnification.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:canControlMagnification
     */
    public static final int AccessibilityService_canControlMagnification=12;
    /**
     * <p>
     * @attr description
     * Attribute whether the accessibility service wants to be able to perform gestures.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:canPerformGestures
     */
    public static final int AccessibilityService_canPerformGestures=13;
    /**
     * <p>
     * @attr description
     * Attribute whether the accessibility service wants to be able to capture gestures from
     * the fingerprint sensor.
     * <p>
     * Required to allow setting the {@link android.accessibilityservice
     * #AccessibilityServiceInfo#FLAG_REQUEST_FINGERPRINT_GESTURES} flag to have any effect.
     * </p>
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:canRequestFingerprintGestures
     */
    public static final int AccessibilityService_canRequestFingerprintGestures=14;
    /**
     * <p>
     * @attr description
     * A recommended timeout in milliseconds used in
     * {@link android.view.accessibility.AccessibilityManager#getRecommendedTimeoutMillis(int, int)
     * android.view.accessibility.AccessibilityManager.getRecommendedTimeoutMillis(int, int)}
     * to return a suitable value for UIs that do not include interactive controls.
     * This setting can be changed at runtime by calling
     * {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
     * android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:nonInteractiveUiTimeout
     */
    public static final int AccessibilityService_nonInteractiveUiTimeout=15;
    /**
     * <p>
     * @attr description
     * A recommended timeout in milliseconds used in
     * {@link android.view.accessibility.AccessibilityManager#getRecommendedTimeoutMillis(int, int)
     * android.view.accessibility.AccessibilityManager.getRecommendedTimeoutMillis(int, int)}
     * to return a suitable value for interactive controls.
     * This setting can be changed at runtime by calling
     * {@link android.accessibilityservice.AccessibilityService#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)
     * android.accessibilityservice.AccessibilityService.setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)}.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:interactiveUiTimeout
     */
    public static final int AccessibilityService_interactiveUiTimeout=16;
    /**
     * <p>
     * @attr description
     * Animated image of the accessibility service purpose or behavior, to help users
     * understand how the service can help them.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:animatedImageDrawable
     */
    public static final int AccessibilityService_animatedImageDrawable=17;
    /**
     * <p>
     * @attr description
     * Html description of the accessibility service, to help users understand
     * how the service can help them.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:htmlDescription
     */
    public static final int AccessibilityService_htmlDescription=18;
    /**
     * <p>
     * @attr description
     * Attribute whether the accessibility service wants to be able to take screenshot.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:canTakeScreenshot
     */
    public static final int AccessibilityService_canTakeScreenshot=19;
    /**
     * <p>
     * @attr description
     * Attribute indicating whether the accessibility service is used to assist users with
     * disabilities. This criteria might be defined by the installer. The default is false.
     * <p>
     * Note: If this flag is false, system will show a notification after a duration to
     * inform the user about the privacy implications of the service.
     * </p>
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:isAccessibilityTool
     */
    public static final int AccessibilityService_isAccessibilityTool=20;
    /**
     * Use <code>accessibility-shortcut-target</code> as the root tag of the XML resource that
     * describes an activity, which is referenced from the
     * <code>android.accessibilityshortcut.target</code> meta-data entry.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AccessibilityShortcutTarget_description android:description}</code></td><td>Descriptive text for the associated data.</td></tr>
     * <tr><td><code>{@link #AccessibilityShortcutTarget_summary android:summary}</code></td><td>The summary for the item.</td></tr>
     * <tr><td><code>{@link #AccessibilityShortcutTarget_settingsActivity android:settingsActivity}</code></td><td>Fully qualified class name of an activity that allows the user to modify
     * the settings for this service.</td></tr>
     * <tr><td><code>{@link #AccessibilityShortcutTarget_animatedImageDrawable android:animatedImageDrawable}</code></td><td>Animated image of the target of accessibility shortcut purpose or behavior, to help
     * users understand how the target of accessibility shortcut can help them.</td></tr>
     * <tr><td><code>{@link #AccessibilityShortcutTarget_htmlDescription android:htmlDescription}</code></td><td>Html description of the target of accessibility shortcut purpose or behavior, to help
     * users understand how the target of accessibility shortcut can help them.</td></tr>
     * </table>
     * @see #AccessibilityShortcutTarget_description
     * @see #AccessibilityShortcutTarget_summary
     * @see #AccessibilityShortcutTarget_settingsActivity
     * @see #AccessibilityShortcutTarget_animatedImageDrawable
     * @see #AccessibilityShortcutTarget_htmlDescription
     */
    public static final int[] AccessibilityShortcutTarget={
      0x01010020, 0x010101e9, 0x01010225, 0x0101060a, 
      0x0101060b
    };
    /**
     * <p>
     * @attr description
     * Short description of the target of accessibility shortcut purpose or behavior.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:description
     */
    public static final int AccessibilityShortcutTarget_description=0;
    /**
     * <p>
     * @attr description
     * Brief summary of the target of accessibility shortcut purpose or behavior.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:summary
     */
    public static final int AccessibilityShortcutTarget_summary=1;
    /**
     * <p>
     * @attr description
     * Component name of an activity that allows the user to modify the settings for this
     * target of accessibility shortcut.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:settingsActivity
     */
    public static final int AccessibilityShortcutTarget_settingsActivity=2;
    /**
     * <p>
     * @attr description
     * Animated image of the target of accessibility shortcut purpose or behavior, to help
     * users understand how the target of accessibility shortcut can help them.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:animatedImageDrawable
     */
    public static final int AccessibilityShortcutTarget_animatedImageDrawable=3;
    /**
     * <p>
     * @attr description
     * Html description of the target of accessibility shortcut purpose or behavior, to help
     * users understand how the target of accessibility shortcut can help them.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:htmlDescription
     */
    public static final int AccessibilityShortcutTarget_htmlDescription=4;
    /**
     * Use <code>account-authenticator</code> as the root tag of the XML resource that
     * describes an account authenticator.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AccountAuthenticator_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
     * <tr><td><code>{@link #AccountAuthenticator_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AccountAuthenticator_accountType android:accountType}</code></td><td>The account type this authenticator handles.</td></tr>
     * <tr><td><code>{@link #AccountAuthenticator_smallIcon android:smallIcon}</code></td><td>Smaller icon of the authenticator.</td></tr>
     * <tr><td><code>{@link #AccountAuthenticator_accountPreferences android:accountPreferences}</code></td><td>A preferences.xml file for authenticator-specific settings.</td></tr>
     * <tr><td><code>{@link #AccountAuthenticator_customTokens android:customTokens}</code></td><td>Account handles its own token storage and permissions.</td></tr>
     * </table>
     * @see #AccountAuthenticator_label
     * @see #AccountAuthenticator_icon
     * @see #AccountAuthenticator_accountType
     * @see #AccountAuthenticator_smallIcon
     * @see #AccountAuthenticator_accountPreferences
     * @see #AccountAuthenticator_customTokens
     */
    public static final int[] AccountAuthenticator={
      0x01010001, 0x01010002, 0x0101028f, 0x0101029e, 
      0x0101029f, 0x0101033b
    };
    /**
     * <p>
     * @attr description
     * The user-visible name of the authenticator.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:label
     */
    public static final int AccountAuthenticator_label=0;
    /**
     * <p>
     * @attr description
     * The icon of the authenticator.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:icon
     */
    public static final int AccountAuthenticator_icon=1;
    /**
     * <p>
     * @attr description
     * The account type this authenticator handles.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:accountType
     */
    public static final int AccountAuthenticator_accountType=2;
    /**
     * <p>
     * @attr description
     * Smaller icon of the authenticator.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:smallIcon
     */
    public static final int AccountAuthenticator_smallIcon=3;
    /**
     * <p>
     * @attr description
     * A preferences.xml file for authenticator-specific settings.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:accountPreferences
     */
    public static final int AccountAuthenticator_accountPreferences=4;
    /**
     * <p>
     * @attr description
     * Account handles its own token storage and permissions.
     * Default to false
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:customTokens
     */
    public static final int AccountAuthenticator_customTokens=5;
    /**
     * Attributes used to style the Action Bar.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ActionBar_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
     * associated item.</td></tr>
     * <tr><td><code>{@link #ActionBar_progressBarStyle android:progressBarStyle}</code></td><td>Default ProgressBar style.</td></tr>
     * <tr><td><code>{@link #ActionBar_background android:background}</code></td><td>A drawable to use as the background.</td></tr>
     * <tr><td><code>{@link #ActionBar_divider android:divider}</code></td><td>Drawable or color to draw between list items.</td></tr>
     * <tr><td><code>{@link #ActionBar_height android:height}</code></td><td>Makes the TextView be exactly this tall.</td></tr>
     * <tr><td><code>{@link #ActionBar_title android:title}</code></td><td>The title associated with the item.</td></tr>
     * <tr><td><code>{@link #ActionBar_logo android:logo}</code></td><td>A Drawable resource providing an extended graphical logo for its
     * associated item.</td></tr>
     * <tr><td><code>{@link #ActionBar_navigationMode android:navigationMode}</code></td><td>The type of navigation to use.</td></tr>
     * <tr><td><code>{@link #ActionBar_displayOptions android:displayOptions}</code></td><td>Options affecting how the action bar is displayed.</td></tr>
     * <tr><td><code>{@link #ActionBar_subtitle android:subtitle}</code></td><td>Specifies subtitle text used for navigationMode="normal".</td></tr>
     * <tr><td><code>{@link #ActionBar_customNavigationLayout android:customNavigationLayout}</code></td><td>Specifies a layout for custom navigation.</td></tr>
     * <tr><td><code>{@link #ActionBar_titleTextStyle android:titleTextStyle}</code></td><td>Specifies a style to use for title text.</td></tr>
     * <tr><td><code>{@link #ActionBar_subtitleTextStyle android:subtitleTextStyle}</code></td><td>Specifies a style to use for subtitle text.</td></tr>
     * <tr><td><code>{@link #ActionBar_homeAsUpIndicator android:homeAsUpIndicator}</code></td><td>Specifies a drawable to use for the 'home as up' indicator.</td></tr>
     * <tr><td><code>{@link #ActionBar_indeterminateProgressStyle android:indeterminateProgressStyle}</code></td><td>Specifies a style resource to use for an indeterminate progress spinner.</td></tr>
     * <tr><td><code>{@link #ActionBar_progressBarPadding android:progressBarPadding}</code></td><td>Specifies the horizontal padding on either end for an embedded progress bar.</td></tr>
     * <tr><td><code>{@link #ActionBar_homeLayout android:homeLayout}</code></td><td>Specifies a layout to use for the "home" section of the action bar.</td></tr>
     * <tr><td><code>{@link #ActionBar_itemPadding android:itemPadding}</code></td><td>Specifies padding that should be applied to the left and right sides of
     * system-provided items in the bar.</td></tr>
     * <tr><td><code>{@link #ActionBar_backgroundStacked android:backgroundStacked}</code></td><td>Specifies a background drawable for a second stacked row of the action bar.</td></tr>
     * <tr><td><code>{@link #ActionBar_backgroundSplit android:backgroundSplit}</code></td><td>Specifies a background drawable for the bottom component of a split action bar.</td></tr>
     * <tr><td><code>{@link #ActionBar_elevation android:elevation}</code></td><td>base z depth of the view.</td></tr>
     * <tr><td><code>{@link #ActionBar_hideOnContentScroll android:hideOnContentScroll}</code></td><td>Set true to hide the action bar on a vertical nested scroll of content.</td></tr>
     * <tr><td><code>{@link #ActionBar_contentInsetStart android:contentInsetStart}</code></td><td>Minimum inset for content views within a bar.</td></tr>
     * <tr><td><code>{@link #ActionBar_contentInsetEnd android:contentInsetEnd}</code></td><td>Minimum inset for content views within a bar.</td></tr>
     * <tr><td><code>{@link #ActionBar_contentInsetLeft android:contentInsetLeft}</code></td><td>Minimum inset for content views within a bar.</td></tr>
     * <tr><td><code>{@link #ActionBar_contentInsetRight android:contentInsetRight}</code></td><td>Minimum inset for content views within a bar.</td></tr>
     * <tr><td><code>{@link #ActionBar_popupTheme android:popupTheme}</code></td><td>Reference to a theme that should be used to inflate popups
     * shown by widgets in the toolbar.</td></tr>
     * <tr><td><code>{@link #ActionBar_contentInsetStartWithNavigation android:contentInsetStartWithNavigation}</code></td><td>Minimum inset for content views within a bar when a navigation button
     * is present, such as the Up button.</td></tr>
     * <tr><td><code>{@link #ActionBar_contentInsetEndWithActions android:contentInsetEndWithActions}</code></td><td>Minimum inset for content views within a bar when actions from a menu
     * are present.</td></tr>
     * </table>
     * @see #ActionBar_icon
     * @see #ActionBar_progressBarStyle
     * @see #ActionBar_background
     * @see #ActionBar_divider
     * @see #ActionBar_height
     * @see #ActionBar_title
     * @see #ActionBar_logo
     * @see #ActionBar_navigationMode
     * @see #ActionBar_displayOptions
     * @see #ActionBar_subtitle
     * @see #ActionBar_customNavigationLayout
     * @see #ActionBar_titleTextStyle
     * @see #ActionBar_subtitleTextStyle
     * @see #ActionBar_homeAsUpIndicator
     * @see #ActionBar_indeterminateProgressStyle
     * @see #ActionBar_progressBarPadding
     * @see #ActionBar_homeLayout
     * @see #ActionBar_itemPadding
     * @see #ActionBar_backgroundStacked
     * @see #ActionBar_backgroundSplit
     * @see #ActionBar_elevation
     * @see #ActionBar_hideOnContentScroll
     * @see #ActionBar_contentInsetStart
     * @see #ActionBar_contentInsetEnd
     * @see #ActionBar_contentInsetLeft
     * @see #ActionBar_contentInsetRight
     * @see #ActionBar_popupTheme
     * @see #ActionBar_contentInsetStartWithNavigation
     * @see #ActionBar_contentInsetEndWithActions
     */
    public static final int[] ActionBar={
      0x01010002, 0x01010077, 0x010100d4, 0x01010129, 
      0x01010155, 0x010101e1, 0x010102be, 0x010102cf, 
      0x010102d0, 0x010102d1, 0x010102d2, 0x010102f8, 
      0x010102f9, 0x0101030b, 0x01010318, 0x01010319, 
      0x0101031d, 0x0101032d, 0x0101038a, 0x0101038b, 
      0x01010440, 0x01010443, 0x01010453, 0x01010454, 
      0x01010455, 0x01010456, 0x010104a9, 0x01010522, 
      0x01010523
    };
    /**
     * <p>
     * @attr description
     * Specifies the drawable used for the application icon.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:icon
     */
    public static final int ActionBar_icon=0;
    /**
     * <p>
     * @attr description
     * Specifies a style resource to use for an embedded progress bar.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:progressBarStyle
     */
    public static final int ActionBar_progressBarStyle=1;
    /**
     * <p>
     * @attr description
     * Specifies a background drawable for the action bar.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:background
     */
    public static final int ActionBar_background=2;
    /**
     * <p>
     * @attr description
     * Specifies the drawable used for item dividers.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:divider
     */
    public static final int ActionBar_divider=3;
    /**
     * <p>
     * @attr description
     * Specifies a fixed height.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:height
     */
    public static final int ActionBar_height=4;
    /**
     * <p>
     * @attr description
     * Specifies title text used for navigationMode="normal".
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:title
     */
    public static final int ActionBar_title=5;
    /**
     * <p>
     * @attr description
     * Specifies the drawable used for the application logo.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:logo
     */
    public static final int ActionBar_logo=6;
    /**
     * <p>
     * @attr description
     * The type of navigation to use.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>listMode</td><td>1</td><td>The action bar will use a selection list for navigation.</td></tr>
     * <tr><td>normal</td><td>0</td><td>Normal static title text.</td></tr>
     * <tr><td>tabMode</td><td>2</td><td>The action bar will use a series of horizontal tabs for navigation.</td></tr>
     * </table>
     *
     * @attr name android:navigationMode
     */
    public static final int ActionBar_navigationMode=7;
    /**
     * <p>
     * @attr description
     * Options affecting how the action bar is displayed.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>disableHome</td><td>20</td><td></td></tr>
     * <tr><td>homeAsUp</td><td>4</td><td></td></tr>
     * <tr><td>none</td><td>0</td><td></td></tr>
     * <tr><td>showCustom</td><td>10</td><td></td></tr>
     * <tr><td>showHome</td><td>2</td><td></td></tr>
     * <tr><td>showTitle</td><td>8</td><td></td></tr>
     * <tr><td>useLogo</td><td>1</td><td></td></tr>
     * </table>
     *
     * @attr name android:displayOptions
     */
    public static final int ActionBar_displayOptions=8;
    /**
     * <p>
     * @attr description
     * Specifies subtitle text used for navigationMode="normal".
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:subtitle
     */
    public static final int ActionBar_subtitle=9;
    /**
     * <p>
     * @attr description
     * Specifies a layout for custom navigation. Overrides navigationMode.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:customNavigationLayout
     */
    public static final int ActionBar_customNavigationLayout=10;
    /**
     * <p>
     * @attr description
     * Specifies a style to use for title text.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:titleTextStyle
     */
    public static final int ActionBar_titleTextStyle=11;
    /**
     * <p>
     * @attr description
     * Specifies a style to use for subtitle text.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:subtitleTextStyle
     */
    public static final int ActionBar_subtitleTextStyle=12;
    /**
     * <p>
     * @attr description
     * Up navigation glyph.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:homeAsUpIndicator
     */
    public static final int ActionBar_homeAsUpIndicator=13;
    /**
     * <p>
     * @attr description
     * Specifies a style resource to use for an indeterminate progress spinner.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:indeterminateProgressStyle
     */
    public static final int ActionBar_indeterminateProgressStyle=14;
    /**
     * <p>
     * @attr description
     * Specifies the horizontal padding on either end for an embedded progress bar.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:progressBarPadding
     */
    public static final int ActionBar_progressBarPadding=15;
    /**
     * <p>
     * @attr description
     * Specifies a layout to use for the "home" section of the action bar.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:homeLayout
     */
    public static final int ActionBar_homeLayout=16;
    /**
     * <p>
     * @attr description
     * Specifies padding that should be applied to the left and right sides of
     * system-provided items in the bar.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:itemPadding
     */
    public static final int ActionBar_itemPadding=17;
    /**
     * <p>
     * @attr description
     * Specifies a background drawable for a second stacked row of the action bar.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:backgroundStacked
     */
    public static final int ActionBar_backgroundStacked=18;
    /**
     * <p>
     * @attr description
     * Specifies a background drawable for the bottom component of a split action bar.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:backgroundSplit
     */
    public static final int ActionBar_backgroundSplit=19;
    /**
     * <p>
     * @attr description
     * Elevation for the action bar itself.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:elevation
     */
    public static final int ActionBar_elevation=20;
    /**
     * <p>
     * @attr description
     * Set true to hide the action bar on a vertical nested scroll of content.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:hideOnContentScroll
     */
    public static final int ActionBar_hideOnContentScroll=21;
    /**
     * <p>
     * @attr description
     * Minimum inset for content views within a bar. Navigation buttons and
     * menu views are excepted. Only valid for some themes and configurations.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:contentInsetStart
     */
    public static final int ActionBar_contentInsetStart=22;
    /**
     * <p>
     * @attr description
     * Minimum inset for content views within a bar. Navigation buttons and
     * menu views are excepted. Only valid for some themes and configurations.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:contentInsetEnd
     */
    public static final int ActionBar_contentInsetEnd=23;
    /**
     * <p>
     * @attr description
     * Minimum inset for content views within a bar. Navigation buttons and
     * menu views are excepted. Only valid for some themes and configurations.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:contentInsetLeft
     */
    public static final int ActionBar_contentInsetLeft=24;
    /**
     * <p>
     * @attr description
     * Minimum inset for content views within a bar. Navigation buttons and
     * menu views are excepted. Only valid for some themes and configurations.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:contentInsetRight
     */
    public static final int ActionBar_contentInsetRight=25;
    /**
     * <p>
     * @attr description
     * Reference to a theme that should be used to inflate popups
     * shown by widgets in the action bar.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:popupTheme
     */
    public static final int ActionBar_popupTheme=26;
    /**
     * <p>
     * @attr description
     * Minimum inset for content views within a bar when a navigation button
     * is present, such as the Up button. Only valid for some themes and configurations.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:contentInsetStartWithNavigation
     */
    public static final int ActionBar_contentInsetStartWithNavigation=27;
    /**
     * <p>
     * @attr description
     * Minimum inset for content views within a bar when actions from a menu
     * are present. Only valid for some themes and configurations.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:contentInsetEndWithActions
     */
    public static final int ActionBar_contentInsetEndWithActions=28;
    /**
     * Attributes that can be used with a ActionBar_LayoutParams.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ActionBar_LayoutParams_layout_gravity android:layout_gravity}</code></td><td>Standard gravity constant that a child supplies to its parent.</td></tr>
     * </table>
     * @see #ActionBar_LayoutParams_layout_gravity
     */
    public static final int[] ActionBar_LayoutParams={
      0x010100b3
    };
    /**
     * <p>
     * @attr description
     * Standard gravity constant that a child supplies to its parent.
     * Defines how the child view should be positioned, on both the X and Y axes, within its enclosing layout.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
     * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
     * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
     * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
     * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the horizontal gravity: a left gravity will clip the right
     * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
     * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the vertical gravity: a top gravity will clip the bottom
     * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
     * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
     * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
     * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
     * </table>
     *
     * @attr name android:layout_gravity
     */
    public static final int ActionBar_LayoutParams_layout_gravity=0;
    /**
     * Attributes that can be used with a ActionMenuItemView.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ActionMenuItemView_minWidth android:minWidth}</code></td><td></td></tr>
     * </table>
     * @see #ActionMenuItemView_minWidth
     */
    public static final int[] ActionMenuItemView={
      0x0101013f
    };
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#minWidth}
     * attribute's value can be found in the {@link #ActionMenuItemView} array.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:minWidth
     */
    public static final int ActionMenuItemView_minWidth=0;
    /**
     * Attributes that can be used with a ActionMode.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ActionMode_background android:background}</code></td><td>A drawable to use as the background.</td></tr>
     * <tr><td><code>{@link #ActionMode_height android:height}</code></td><td>Makes the TextView be exactly this tall.</td></tr>
     * <tr><td><code>{@link #ActionMode_titleTextStyle android:titleTextStyle}</code></td><td>Specifies a style to use for title text.</td></tr>
     * <tr><td><code>{@link #ActionMode_subtitleTextStyle android:subtitleTextStyle}</code></td><td>Specifies a style to use for subtitle text.</td></tr>
     * <tr><td><code>{@link #ActionMode_backgroundSplit android:backgroundSplit}</code></td><td>Specifies a background drawable for the bottom component of a split action bar.</td></tr>
     * </table>
     * @see #ActionMode_background
     * @see #ActionMode_height
     * @see #ActionMode_titleTextStyle
     * @see #ActionMode_subtitleTextStyle
     * @see #ActionMode_backgroundSplit
     */
    public static final int[] ActionMode={
      0x010100d4, 0x01010155, 0x010102f8, 0x010102f9, 
      0x0101038b, 0x01120023
    };
    /**
     * <p>
     * @attr description
     * Specifies a background for the action mode bar.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:background
     */
    public static final int ActionMode_background=0;
    /**
     * <p>
     * @attr description
     * Specifies a fixed height for the action mode bar.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:height
     */
    public static final int ActionMode_height=1;
    /**
     * <p>
     * @attr description
     * Specifies a style to use for title text.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:titleTextStyle
     */
    public static final int ActionMode_titleTextStyle=2;
    /**
     * <p>
     * @attr description
     * Specifies a style to use for subtitle text.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:subtitleTextStyle
     */
    public static final int ActionMode_subtitleTextStyle=3;
    /**
     * <p>
     * @attr description
     * Specifies a background for the split action mode bar.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:backgroundSplit
     */
    public static final int ActionMode_backgroundSplit=4;
    /**
     * Attrbitutes for a ActvityChooserView.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * </table>
     */
    public static final int[] ActivityChooserView={
      0x01120045, 0x01120062
    };
    /**
     * @hide Attributes which will be read by the Activity to intialize the
     * base activity TaskDescription.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ActivityTaskDescription_colorBackground android:colorBackground}</code></td><td>Default color of background imagery, ex.</td></tr>
     * <tr><td><code>{@link #ActivityTaskDescription_colorPrimary android:colorPrimary}</code></td><td>The primary branding color for the app.</td></tr>
     * <tr><td><code>{@link #ActivityTaskDescription_statusBarColor android:statusBarColor}</code></td><td>The color for the status bar.</td></tr>
     * <tr><td><code>{@link #ActivityTaskDescription_navigationBarColor android:navigationBarColor}</code></td><td>The color for the navigation bar.</td></tr>
     * <tr><td><code>{@link #ActivityTaskDescription_colorBackgroundFloating android:colorBackgroundFloating}</code></td><td>Default color of background imagery for floating components, ex.</td></tr>
     * <tr><td><code>{@link #ActivityTaskDescription_enforceStatusBarContrast android:enforceStatusBarContrast}</code></td><td>Sets whether the system should ensure that the status bar has enough
     * contrast when a fully transparent background is requested.</td></tr>
     * <tr><td><code>{@link #ActivityTaskDescription_enforceNavigationBarContrast android:enforceNavigationBarContrast}</code></td><td>Sets whether the system should ensure that the navigation bar has enough
     * contrast when a fully transparent background is requested.</td></tr>
     * </table>
     * @see #ActivityTaskDescription_colorBackground
     * @see #ActivityTaskDescription_colorPrimary
     * @see #ActivityTaskDescription_statusBarColor
     * @see #ActivityTaskDescription_navigationBarColor
     * @see #ActivityTaskDescription_colorBackgroundFloating
     * @see #ActivityTaskDescription_enforceStatusBarContrast
     * @see #ActivityTaskDescription_enforceNavigationBarContrast
     */
    public static final int[] ActivityTaskDescription={
      0x01010031, 0x01010433, 0x01010451, 0x01010452, 
      0x010104e2, 0x01010604, 0x01010605
    };
    /**
     * <p>
     * @attr description
     * @hide From Theme.colorBackground, used for the TaskDescription background
     * color.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:colorBackground
     */
    public static final int ActivityTaskDescription_colorBackground=0;
    /**
     * <p>
     * @attr description
     * @hide From Theme.colorPrimary, used for the TaskDescription primary
     * color.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:colorPrimary
     */
    public static final int ActivityTaskDescription_colorPrimary=1;
    /**
     * <p>
     * @attr description
     * @hide From Theme.statusBarColor, used for the TaskDescription status bar color.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:statusBarColor
     */
    public static final int ActivityTaskDescription_statusBarColor=2;
    /**
     * <p>
     * @attr description
     * @hide From Theme.navigationBarColor, used for the TaskDescription navigation bar
     * color.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:navigationBarColor
     */
    public static final int ActivityTaskDescription_navigationBarColor=3;
    /**
     * <p>
     * @attr description
     * @hide From Theme.colorBackgroundFloating, used for the TaskDescription background
     * color floating.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:colorBackgroundFloating
     */
    public static final int ActivityTaskDescription_colorBackgroundFloating=4;
    /**
     * <p>
     * @attr description
     * @hide From Window.enforceStatusBarContrast
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:enforceStatusBarContrast
     */
    public static final int ActivityTaskDescription_enforceStatusBarContrast=5;
    /**
     * <p>
     * @attr description
     * @hide From Window.enforceNavigationBarContrast
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:enforceNavigationBarContrast
     */
    public static final int ActivityTaskDescription_enforceNavigationBarContrast=6;
    /**
     * Attributes that can be used with a AdapterViewAnimator.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AdapterViewAnimator_inAnimation android:inAnimation}</code></td><td>Identifier for the animation to use when a view is shown.</td></tr>
     * <tr><td><code>{@link #AdapterViewAnimator_outAnimation android:outAnimation}</code></td><td>Identifier for the animation to use when a view is hidden.</td></tr>
     * <tr><td><code>{@link #AdapterViewAnimator_animateFirstView android:animateFirstView}</code></td><td>Defines whether to animate the current View when the ViewAnimation
     * is first displayed.</td></tr>
     * <tr><td><code>{@link #AdapterViewAnimator_loopViews android:loopViews}</code></td><td>Defines whether the animator loops to the first view once it
     * has reached the end of the list.</td></tr>
     * </table>
     * @see #AdapterViewAnimator_inAnimation
     * @see #AdapterViewAnimator_outAnimation
     * @see #AdapterViewAnimator_animateFirstView
     * @see #AdapterViewAnimator_loopViews
     */
    public static final int[] AdapterViewAnimator={
      0x01010177, 0x01010178, 0x010102d5, 0x01010307
    };
    /**
     * <p>
     * @attr description
     * Identifier for the animation to use when a view is shown.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:inAnimation
     */
    public static final int AdapterViewAnimator_inAnimation=0;
    /**
     * <p>
     * @attr description
     * Identifier for the animation to use when a view is hidden.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:outAnimation
     */
    public static final int AdapterViewAnimator_outAnimation=1;
    /**
     * <p>
     * @attr description
     * Defines whether to animate the current View when the ViewAnimation
     * is first displayed.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:animateFirstView
     */
    public static final int AdapterViewAnimator_animateFirstView=2;
    /**
     * <p>
     * @attr description
     * Defines whether the animator loops to the first view once it
     * has reached the end of the list.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:loopViews
     */
    public static final int AdapterViewAnimator_loopViews=3;
    /**
     * Attributes that can be used with a AdapterViewFlipper.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AdapterViewFlipper_flipInterval android:flipInterval}</code></td><td></td></tr>
     * <tr><td><code>{@link #AdapterViewFlipper_autoStart android:autoStart}</code></td><td>When true, automatically start animating.</td></tr>
     * </table>
     * @see #AdapterViewFlipper_flipInterval
     * @see #AdapterViewFlipper_autoStart
     */
    public static final int[] AdapterViewFlipper={
      0x01010179, 0x010102b5
    };
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#flipInterval}
     * attribute's value can be found in the {@link #AdapterViewFlipper} array.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:flipInterval
     */
    public static final int AdapterViewFlipper_flipInterval=0;
    /**
     * <p>
     * @attr description
     * When true, automatically start animating.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:autoStart
     */
    public static final int AdapterViewFlipper_autoStart=1;
    /**
     * Drawable used to draw adaptive icons with foreground and background layers.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AdaptiveIconDrawableLayer_drawable android:drawable}</code></td><td>Reference to a drawable resource to use for the frame.</td></tr>
     * </table>
     * @see #AdaptiveIconDrawableLayer_drawable
     */
    public static final int[] AdaptiveIconDrawableLayer={
      0x01010199
    };
    /**
     * <p>
     * @attr description
     * The drawable to use for the layer.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:drawable
     */
    public static final int AdaptiveIconDrawableLayer_drawable=0;
    /**
     * Specify one or more <code>aid-filter</code> elements inside a
     * <code>aid-group</code> element to specify an ISO7816 Application ID (AID)
     * your service can handle.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AidFilter_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * </table>
     * @see #AidFilter_name
     */
    public static final int[] AidFilter={
      0x01010003
    };
    /**
     * <p>
     * @attr description
     * The ISO7816 Application ID. This attribute is mandatory.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AidFilter_name=0;
    /**
     * Specify one or more <code>aid-group</code> elements inside a
     * <code>host-apdu-service</code> or <code>offhost-apdu-service</code>
     * element to define a group of ISO7816 Application ID (AIDs) that
     * your service can handle.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AidGroup_description android:description}</code></td><td>Descriptive text for the associated data.</td></tr>
     * <tr><td><code>{@link #AidGroup_category android:category}</code></td><td>The category attribute will be used by the Android platform to present
     * multiple applications that register ISO 7816 Application IDs (AIDs) in the
     * same category uniformly.</td></tr>
     * </table>
     * @see #AidGroup_description
     * @see #AidGroup_category
     */
    public static final int[] AidGroup={
      0x01010020, 0x010103e8
    };
    /**
     * <p>
     * @attr description
     * Short description of what the AID group implements. This attribute is mandatory.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:description
     */
    public static final int AidGroup_description=0;
    /**
     * <p>
     * @attr description
     * The category attribute will be used by the Android platform to present
     * multiple applications that register ISO 7816 Application IDs (AIDs) in the
     * same category uniformly.
     * Additionally, when a category is specified, Android will ensure that either
     * all AIDs in this group are routed to this application, or none at all.
     * This attribute is optional.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:category
     */
    public static final int AidGroup_category=1;
    /**
     * Specify one or more <code>aid-prefix-filter</code> elements inside a
     * <code>aid-group</code> element to specify an ISO7816 Application ID (AID)
     * prefix your service can handle.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AidPrefixFilter_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * </table>
     * @see #AidPrefixFilter_name
     */
    public static final int[] AidPrefixFilter={
      0x01010003
    };
    /**
     * <p>
     * @attr description
     * The ISO7816 Application ID. This attribute is mandatory.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AidPrefixFilter_name=0;
    /**
     * The set of attributes that describe a AlertDialog's theme.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AlertDialog_fullDark android:fullDark}</code></td><td></td></tr>
     * <tr><td><code>{@link #AlertDialog_topDark android:topDark}</code></td><td></td></tr>
     * <tr><td><code>{@link #AlertDialog_centerDark android:centerDark}</code></td><td></td></tr>
     * <tr><td><code>{@link #AlertDialog_bottomDark android:bottomDark}</code></td><td></td></tr>
     * <tr><td><code>{@link #AlertDialog_fullBright android:fullBright}</code></td><td></td></tr>
     * <tr><td><code>{@link #AlertDialog_topBright android:topBright}</code></td><td></td></tr>
     * <tr><td><code>{@link #AlertDialog_centerBright android:centerBright}</code></td><td></td></tr>
     * <tr><td><code>{@link #AlertDialog_bottomBright android:bottomBright}</code></td><td></td></tr>
     * <tr><td><code>{@link #AlertDialog_bottomMedium android:bottomMedium}</code></td><td></td></tr>
     * <tr><td><code>{@link #AlertDialog_centerMedium android:centerMedium}</code></td><td></td></tr>
     * <tr><td><code>{@link #AlertDialog_layout android:layout}</code></td><td>Supply an identifier for the layout resource to inflate when the ViewStub
     * becomes visible or when forced to do so.</td></tr>
     * </table>
     * @see #AlertDialog_fullDark
     * @see #AlertDialog_topDark
     * @see #AlertDialog_centerDark
     * @see #AlertDialog_bottomDark
     * @see #AlertDialog_fullBright
     * @see #AlertDialog_topBright
     * @see #AlertDialog_centerBright
     * @see #AlertDialog_bottomBright
     * @see #AlertDialog_bottomMedium
     * @see #AlertDialog_centerMedium
     * @see #AlertDialog_layout
     */
    public static final int[] AlertDialog={
      0x010100c6, 0x010100c7, 0x010100c8, 0x010100c9, 
      0x010100ca, 0x010100cb, 0x010100cc, 0x010100cd, 
      0x010100ce, 0x010100cf, 0x010100f2, 0x0112001f, 
      0x01120032, 0x0112005f, 0x0112007a, 0x0112007b, 
      0x01120091, 0x01120093, 0x011200c6, 0x011200db, 
      0x011200df, 0x011200e1
    };
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#fullDark}
     * attribute's value can be found in the {@link #AlertDialog} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:fullDark
     */
    public static final int AlertDialog_fullDark=0;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#topDark}
     * attribute's value can be found in the {@link #AlertDialog} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:topDark
     */
    public static final int AlertDialog_topDark=1;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#centerDark}
     * attribute's value can be found in the {@link #AlertDialog} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:centerDark
     */
    public static final int AlertDialog_centerDark=2;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#bottomDark}
     * attribute's value can be found in the {@link #AlertDialog} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:bottomDark
     */
    public static final int AlertDialog_bottomDark=3;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#fullBright}
     * attribute's value can be found in the {@link #AlertDialog} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:fullBright
     */
    public static final int AlertDialog_fullBright=4;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#topBright}
     * attribute's value can be found in the {@link #AlertDialog} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:topBright
     */
    public static final int AlertDialog_topBright=5;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#centerBright}
     * attribute's value can be found in the {@link #AlertDialog} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:centerBright
     */
    public static final int AlertDialog_centerBright=6;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#bottomBright}
     * attribute's value can be found in the {@link #AlertDialog} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:bottomBright
     */
    public static final int AlertDialog_bottomBright=7;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#bottomMedium}
     * attribute's value can be found in the {@link #AlertDialog} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:bottomMedium
     */
    public static final int AlertDialog_bottomMedium=8;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#centerMedium}
     * attribute's value can be found in the {@link #AlertDialog} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:centerMedium
     */
    public static final int AlertDialog_centerMedium=9;
    /**
     * <p>
     * @attr description
     * Supply an identifier for the layout resource to inflate when the ViewStub
     * becomes visible or when forced to do so. The layout resource must be a
     * valid reference to a layout.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:layout
     */
    public static final int AlertDialog_layout=10;
    /**
     * Attributes that can be used with a AlphaAnimation.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AlphaAnimation_fromAlpha android:fromAlpha}</code></td><td></td></tr>
     * <tr><td><code>{@link #AlphaAnimation_toAlpha android:toAlpha}</code></td><td></td></tr>
     * </table>
     * @see #AlphaAnimation_fromAlpha
     * @see #AlphaAnimation_toAlpha
     */
    public static final int[] AlphaAnimation={
      0x010101ca, 0x010101cb
    };
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#fromAlpha}
     * attribute's value can be found in the {@link #AlphaAnimation} array.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:fromAlpha
     */
    public static final int AlphaAnimation_fromAlpha=0;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#toAlpha}
     * attribute's value can be found in the {@link #AlphaAnimation} array.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:toAlpha
     */
    public static final int AlphaAnimation_toAlpha=1;
    /**
     * Attributes that can be used with a AnalogClock.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AnalogClock_dial android:dial}</code></td><td></td></tr>
     * <tr><td><code>{@link #AnalogClock_hand_hour android:hand_hour}</code></td><td></td></tr>
     * <tr><td><code>{@link #AnalogClock_hand_minute android:hand_minute}</code></td><td></td></tr>
     * <tr><td><code>{@link #AnalogClock_timeZone android:timeZone}</code></td><td>Specifies the time zone to use.</td></tr>
     * <tr><td><code>{@link #AnalogClock_hand_second android:hand_second}</code></td><td></td></tr>
     * <tr><td><code>{@link #AnalogClock_dialTint android:dialTint}</code></td><td>Tint to apply to the dial graphic.</td></tr>
     * <tr><td><code>{@link #AnalogClock_dialTintMode android:dialTintMode}</code></td><td>Blending mode used to apply the dial graphic tint.</td></tr>
     * <tr><td><code>{@link #AnalogClock_hand_hourTint android:hand_hourTint}</code></td><td>Tint to apply to the hour hand graphic.</td></tr>
     * <tr><td><code>{@link #AnalogClock_hand_hourTintMode android:hand_hourTintMode}</code></td><td>Blending mode used to apply the hour hand graphic tint.</td></tr>
     * <tr><td><code>{@link #AnalogClock_hand_minuteTint android:hand_minuteTint}</code></td><td>Tint to apply to the minute hand graphic.</td></tr>
     * <tr><td><code>{@link #AnalogClock_hand_minuteTintMode android:hand_minuteTintMode}</code></td><td>Blending mode used to apply the minute hand graphic tint.</td></tr>
     * <tr><td><code>{@link #AnalogClock_hand_secondTint android:hand_secondTint}</code></td><td>Tint to apply to the second hand graphic.</td></tr>
     * <tr><td><code>{@link #AnalogClock_hand_secondTintMode android:hand_secondTintMode}</code></td><td>Blending mode used to apply the second hand graphic tint.</td></tr>
     * </table>
     * @see #AnalogClock_dial
     * @see #AnalogClock_hand_hour
     * @see #AnalogClock_hand_minute
     * @see #AnalogClock_timeZone
     * @see #AnalogClock_hand_second
     * @see #AnalogClock_dialTint
     * @see #AnalogClock_dialTintMode
     * @see #AnalogClock_hand_hourTint
     * @see #AnalogClock_hand_hourTintMode
     * @see #AnalogClock_hand_minuteTint
     * @see #AnalogClock_hand_minuteTintMode
     * @see #AnalogClock_hand_secondTint
     * @see #AnalogClock_hand_secondTintMode
     */
    public static final int[] AnalogClock={
      0x01010102, 0x01010103, 0x01010104, 0x010103cc, 
      0x01010623, 0x01010636, 0x01010637, 0x01010638, 
      0x01010639, 0x0101063a, 0x0101063b, 0x0101063c, 
      0x0101063d
    };
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#dial}
     * attribute's value can be found in the {@link #AnalogClock} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:dial
     */
    public static final int AnalogClock_dial=0;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#hand_hour}
     * attribute's value can be found in the {@link #AnalogClock} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:hand_hour
     */
    public static final int AnalogClock_hand_hour=1;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#hand_minute}
     * attribute's value can be found in the {@link #AnalogClock} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:hand_minute
     */
    public static final int AnalogClock_hand_minute=2;
    /**
     * <p>
     * @attr description
     * Specifies the time zone to use. When this attribute is specified, the
     * TextClock will ignore the time zone of the system. To use the user's
     * time zone, do not specify this attribute. The default value is the
     * user's time zone. Please refer to {@link java.util.TimeZone} for more
     * information about time zone ids.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:timeZone
     */
    public static final int AnalogClock_timeZone=3;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#hand_second}
     * attribute's value can be found in the {@link #AnalogClock} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:hand_second
     */
    public static final int AnalogClock_hand_second=4;
    /**
     * <p>
     * @attr description
     * Tint to apply to the dial graphic.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:dialTint
     */
    public static final int AnalogClock_dialTint=5;
    /**
     * <p>
     * @attr description
     * Blending mode used to apply the dial graphic tint.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     *
     * @attr name android:dialTintMode
     */
    public static final int AnalogClock_dialTintMode=6;
    /**
     * <p>
     * @attr description
     * Tint to apply to the hour hand graphic.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:hand_hourTint
     */
    public static final int AnalogClock_hand_hourTint=7;
    /**
     * <p>
     * @attr description
     * Blending mode used to apply the hour hand graphic tint.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     *
     * @attr name android:hand_hourTintMode
     */
    public static final int AnalogClock_hand_hourTintMode=8;
    /**
     * <p>
     * @attr description
     * Tint to apply to the minute hand graphic.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:hand_minuteTint
     */
    public static final int AnalogClock_hand_minuteTint=9;
    /**
     * <p>
     * @attr description
     * Blending mode used to apply the minute hand graphic tint.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     *
     * @attr name android:hand_minuteTintMode
     */
    public static final int AnalogClock_hand_minuteTintMode=10;
    /**
     * <p>
     * @attr description
     * Tint to apply to the second hand graphic.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:hand_secondTint
     */
    public static final int AnalogClock_hand_secondTint=11;
    /**
     * <p>
     * @attr description
     * Blending mode used to apply the second hand graphic tint.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     *
     * @attr name android:hand_secondTintMode
     */
    public static final int AnalogClock_hand_secondTintMode=12;
    /**
     * The <code>manifest</code> tag is the root of an
     * <code>AndroidManifest.xml</code> file,
     * describing the contents of an Android package (.apk) file.  One
     * attribute must always be supplied: <code>package</code> gives a
     * unique name for the package, using a Java-style naming convention
     * to avoid name collisions.  For example, applications published
     * by Google could have names of the form
     * <code>com.google.app.<em>appname</em></code>
     * <p>Inside of the manifest tag, may appear the following tags
     * in any order: {@link #AndroidManifestAttribution attribution},
     * {@link #AndroidManifestPermission permission},
     * {@link #AndroidManifestPermissionGroup permission-group},
     * {@link #AndroidManifestPermissionTree permission-tree},
     * {@link #AndroidManifestUsesSdk uses-sdk},
     * {@link #AndroidManifestUsesPermission uses-permission},
     * {@link #AndroidManifestUsesConfiguration uses-configuration},
     * {@link #AndroidManifestApplication application},
     * {@link #AndroidManifestInstrumentation instrumentation},
     * {@link #AndroidManifestUsesFeature uses-feature}.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifest_sharedUserId android:sharedUserId}</code></td><td>Specify the name of a user ID that will be shared between multiple
     * packages.</td></tr>
     * <tr><td><code>{@link #AndroidManifest_versionCode android:versionCode}</code></td><td>Internal version code.</td></tr>
     * <tr><td><code>{@link #AndroidManifest_versionName android:versionName}</code></td><td>The text shown to the user to indicate the version they have.</td></tr>
     * <tr><td><code>{@link #AndroidManifest_sharedUserLabel android:sharedUserLabel}</code></td><td>Specify a label for the shared user UID of this package.</td></tr>
     * <tr><td><code>{@link #AndroidManifest_installLocation android:installLocation}</code></td><td>The default install location defined by an application.</td></tr>
     * <tr><td><code>{@link #AndroidManifest_revisionCode android:revisionCode}</code></td><td>Internal revision code.</td></tr>
     * <tr><td><code>{@link #AndroidManifest_isolatedSplits android:isolatedSplits}</code></td><td>If set to <code>true</code>, indicates to the platform that any split APKs
     * installed for this application should be loaded into their own Context
     * objects and not appear in the base application's Context.</td></tr>
     * <tr><td><code>{@link #AndroidManifest_targetSandboxVersion android:targetSandboxVersion}</code></td><td>Specifies the target sandbox this app wants to use.</td></tr>
     * <tr><td><code>{@link #AndroidManifest_isFeatureSplit android:isFeatureSplit}</code></td><td>If set to <code>true</code>, indicates to the platform that this APK is
     * a 'feature' split and that it implicitly depends on the base APK.</td></tr>
     * <tr><td><code>{@link #AndroidManifest_compileSdkVersion android:compileSdkVersion}</code></td><td>The user-visible SDK version (ex.</td></tr>
     * <tr><td><code>{@link #AndroidManifest_compileSdkVersionCodename android:compileSdkVersionCodename}</code></td><td>The development codename (ex.</td></tr>
     * <tr><td><code>{@link #AndroidManifest_versionCodeMajor android:versionCodeMajor}</code></td><td>Internal major version code.</td></tr>
     * <tr><td><code>{@link #AndroidManifest_isSplitRequired android:isSplitRequired}</code></td><td>Flag to specify if this APK requires at least one split [either feature or
     * resource] to be present in order to function.</td></tr>
     * </table>
     * @see #AndroidManifest_sharedUserId
     * @see #AndroidManifest_versionCode
     * @see #AndroidManifest_versionName
     * @see #AndroidManifest_sharedUserLabel
     * @see #AndroidManifest_installLocation
     * @see #AndroidManifest_revisionCode
     * @see #AndroidManifest_isolatedSplits
     * @see #AndroidManifest_targetSandboxVersion
     * @see #AndroidManifest_isFeatureSplit
     * @see #AndroidManifest_compileSdkVersion
     * @see #AndroidManifest_compileSdkVersionCodename
     * @see #AndroidManifest_versionCodeMajor
     * @see #AndroidManifest_isSplitRequired
     */
    public static final int[] AndroidManifest={
      0x0101000b, 0x0101021b, 0x0101021c, 0x01010261, 
      0x010102b7, 0x010104d5, 0x0101054b, 0x0101054c, 
      0x0101055b, 0x01010572, 0x01010573, 0x01010576, 
      0x01010591
    };
    /**
     * <p>
     * @attr description
     * Specify the name of a user ID that will be shared between multiple
     * packages.  By default, each package gets its own unique user-id.
     * By setting this value on two or more packages, each of these packages
     * will be given a single shared user ID, so they can for example run
     * in the same process.  Note that for them to actually get the same
     * user ID, they must also be signed with the same signature.
     * @deprecated Shared user IDs cause non-deterministic behavior within the
     * package manager. As such, its use is strongly discouraged and may be
     * removed in a future version of Android. Instead, apps should use proper
     * communication mechanisms, such as services and content providers,
     * to facilitate interoperability between shared components. Note that
     * existing apps cannot remove this value, as migrating off a
     * shared user ID is not supported.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:sharedUserId
     */
    @Deprecated
    public static final int AndroidManifest_sharedUserId=0;
    /**
     * <p>
     * @attr description
     * Internal version code.  This is the number used to determine whether
     * one version is more recent than another: it has no other meaning than
     * that higher numbers are more recent.  You could use this number to
     * encode a "x.y" in the lower and upper 16 bits, make it a build
     * number, simply increase it by one each time a new version is
     * released, or define it however else you want, as long as each
     * successive version has a higher number.  This is not a version
     * number generally shown to the user, that is usually supplied
     * with {@link android.R.attr#versionName}.  When an app is delivered
     * as multiple split APKs, each APK must have the exact same versionCode.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:versionCode
     */
    public static final int AndroidManifest_versionCode=1;
    /**
     * <p>
     * @attr description
     * The text shown to the user to indicate the version they have.  This
     * is used for no other purpose than display to the user; the actual
     * significant version number is given by {@link android.R.attr#versionCode}.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:versionName
     */
    public static final int AndroidManifest_versionName=2;
    /**
     * <p>
     * @attr description
     * Specify a label for the shared user UID of this package.  This is
     * only used if you have also used android:sharedUserId.  This must
     * be a reference to a string resource; it can not be an explicit
     * string.
     * @deprecated There is no replacement for this attribute.
     * {@link android.R.attr#sharedUserId} has been deprecated making
     * this attribute unnecessary.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:sharedUserLabel
     */
    @Deprecated
    public static final int AndroidManifest_sharedUserLabel=3;
    /**
     * <p>
     * @attr description
     * The default install location defined by an application.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>auto</td><td>0</td><td>Let the system decide ideal install location</td></tr>
     * <tr><td>internalOnly</td><td>1</td><td>Explicitly request to be installed on internal phone storage
     * only.</td></tr>
     * <tr><td>preferExternal</td><td>2</td><td>Prefer to be installed on SD card. There is no guarantee that
     * the system will honor this request. The application might end
     * up being installed on internal storage if external media
     * is unavailable or too full.</td></tr>
     * </table>
     *
     * @attr name android:installLocation
     */
    public static final int AndroidManifest_installLocation=4;
    /**
     * <p>
     * @attr description
     * Internal revision code.  This number is the number used to determine
     * whether one APK is more recent than another: it has no other meaning
     * than that higher numbers are more recent.  This value is only meaningful
     * when the two {@link android.R.attr#versionCode} values are already
     * identical.  When an app is delivered as multiple split APKs, each
     * APK may have a different revisionCode value.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:revisionCode
     */
    public static final int AndroidManifest_revisionCode=5;
    /**
     * <p>
     * @attr description
     * If set to <code>true</code>, indicates to the platform that any split APKs
     * installed for this application should be loaded into their own Context
     * objects and not appear in the base application's Context.
     * <p>The default value of this attribute is <code>false</code>.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:isolatedSplits
     */
    public static final int AndroidManifest_isolatedSplits=6;
    /**
     * <p>
     * @attr description
     * Specifies the target sandbox this app wants to use. Higher sandbox versions
     * will have increasing levels of security.
     * <p>The default value of this attribute is <code>1</code>.
     * <p>
     * @deprecated The security properties have been moved to
     * {@link android.os.Build.VERSION Build.VERSION} 27 and 28.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:targetSandboxVersion
     */
    @Deprecated
    public static final int AndroidManifest_targetSandboxVersion=7;
    /**
     * <p>
     * @attr description
     * If set to <code>true</code>, indicates to the platform that this APK is
     * a 'feature' split and that it implicitly depends on the base APK. This distinguishes
     * this split APK from a 'configuration' split, which provides resource overrides
     * for a particular 'feature' split. Only useful when the base APK specifies
     * <code>android:isolatedSplits="true"</code>.
     * <p>The default value of this attribute is <code>false</code>.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:isFeatureSplit
     */
    public static final int AndroidManifest_isFeatureSplit=8;
    /**
     * <p>
     * @attr description
     * The user-visible SDK version (ex. 26) of the framework against which the application was
     * compiled. This attribute is automatically specified by the Android build tools and should
     * NOT be manually specified.
     * <p>
     * This attribute is the compile-time equivalent of
     * {@link android.os.Build.VERSION#SDK_INT Build.VERSION.SDK_INT}.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:compileSdkVersion
     */
    public static final int AndroidManifest_compileSdkVersion=9;
    /**
     * <p>
     * @attr description
     * The development codename (ex. "O") of the framework against which the application was
     * compiled, or "REL" if the application was compiled against a release build. This attribute
     * is automatically specified by the Android build tools and should NOT be manually
     * specified.
     * <p>
     * This attribute is the compile-time equivalent of
     * {@link android.os.Build.VERSION#CODENAME Build.VERSION.CODENAME}.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:compileSdkVersionCodename
     */
    public static final int AndroidManifest_compileSdkVersionCodename=10;
    /**
     * <p>
     * @attr description
     * Internal major version code.  This is essentially additional high bits
     * for the base version code; it has no other meaning than
     * that higher numbers are more recent.  This is not a version
     * number generally shown to the user, that is usually supplied
     * with {@link android.R.attr#versionName}.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:versionCodeMajor
     */
    public static final int AndroidManifest_versionCodeMajor=11;
    /**
     * <p>
     * @attr description
     * Flag to specify if this APK requires at least one split [either feature or
     * resource] to be present in order to function. Default value is false.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:isSplitRequired
     */
    public static final int AndroidManifest_isSplitRequired=12;
    /**
     * Attributes that can be supplied in an AndroidManifest.xml
     * <code>action</code> tag, a child of the
     * {@link #AndroidManifestIntentFilter intent-filter} tag.
     * See {@link android.content.IntentFilter#addAction} for
     * more information.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestAction_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * </table>
     * @see #AndroidManifestAction_name
     */
    public static final int[] AndroidManifestAction={
      0x01010003
    };
    /**
     * <p>
     * @attr description
     * The name of an action that is handled, using the Java-style
     * naming convention.  For example, to support
     * {@link android.content.Intent#ACTION_VIEW Intent.ACTION_VIEW}
     * you would put <code>android.intent.action.VIEW</code> here.
     * Custom actions should generally use a prefix matching the
     * package name.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AndroidManifestAction_name=0;
    /**
     * The <code>activity</code> tag declares an
     * {@link android.app.Activity} class that is available
     * as part of the package's application components, implementing
     * a part of the application's user interface.
     * <p>Zero or more {@link #AndroidManifestIntentFilter intent-filter}
     * tags can be included inside of an activity, to specify the Intents
     * that it can handle.  If none are specified, the activity can
     * only be started through direct specification of its class name.
     * The activity tag appears as a child tag of the
     * {@link #AndroidManifestApplication application} tag.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_theme android:theme}</code></td><td>The overall theme to use for an activity.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_permission android:permission}</code></td><td>Specify a permission that a client is required to have in order to
     * use the associated object.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_enabled android:enabled}</code></td><td>Specifies whether the widget is enabled.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_exported android:exported}</code></td><td>Flag indicating whether the given application component is available
     * to other applications.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_process android:process}</code></td><td>Specify a specific process that the associated code is to run in.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_taskAffinity android:taskAffinity}</code></td><td>Specify a task name that activities have an "affinity" to.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_multiprocess android:multiprocess}</code></td><td>Specify whether a component is allowed to have multiple instances
     * of itself running in different processes.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_finishOnTaskLaunch android:finishOnTaskLaunch}</code></td><td>Specify whether an activity should be finished when its task is
     * brought to the foreground by relaunching from the home screen.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_clearTaskOnLaunch android:clearTaskOnLaunch}</code></td><td>Specify whether an activity's task should be cleared when it
     * is re-launched from the home screen.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_stateNotNeeded android:stateNotNeeded}</code></td><td>Indicates that an Activity does not need to have its freeze state
     * (as returned by {@link android.app.Activity#onSaveInstanceState}
     * retained in order to be restarted.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_excludeFromRecents android:excludeFromRecents}</code></td><td>Indicates that an Activity should be excluded from the list of
     * recently launched activities.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_launchMode android:launchMode}</code></td><td>Specify how an activity should be launched.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_screenOrientation android:screenOrientation}</code></td><td>Specify the orientation an activity should be run in.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_configChanges android:configChanges}</code></td><td>Specify one or more configuration changes that the activity will
     * handle itself.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_description android:description}</code></td><td>Descriptive text for the associated data.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_alwaysRetainTaskState android:alwaysRetainTaskState}</code></td><td>Specify whether an acitivty's task state should always be maintained
     * by the system, or if it is allowed to reset the task to its initial
     * state in certain situations.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_allowTaskReparenting android:allowTaskReparenting}</code></td><td>Specify that an activity can be moved out of a task it is in to
     * the task it has an affinity for when appropriate.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_windowSoftInputMode android:windowSoftInputMode}</code></td><td>Defines the default soft input state that this window would
     * like when it is displayed.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_noHistory android:noHistory}</code></td><td>Specify whether an activity should be kept in its history stack.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_finishOnCloseSystemDialogs android:finishOnCloseSystemDialogs}</code></td><td>Specify whether an activity should be finished when a "close system
     * windows" request has been made.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_logo android:logo}</code></td><td>A Drawable resource providing an extended graphical logo for its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_immersive android:immersive}</code></td><td>Flag declaring this activity to be 'immersive'; immersive activities
     * should not be interrupted with other activities or notifications.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_hardwareAccelerated android:hardwareAccelerated}</code></td><td><p>Flag indicating whether the application's rendering should be hardware
     * accelerated if possible.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_uiOptions android:uiOptions}</code></td><td>Extra options for an activity's UI.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_parentActivityName android:parentActivityName}</code></td><td>The name of the logical parent of the activity as it appears in the manifest.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_singleUser android:singleUser}</code></td><td>If set to true, a single instance of this component will run for
     * all users.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_showOnLockScreen android:showOnLockScreen}</code></td><td>Specify that an Activity should be shown over the lock screen and,
     * in a multiuser environment, across all users' windows.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_banner android:banner}</code></td><td>A Drawable resource providing an extended graphical banner for its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_allowEmbedded android:allowEmbedded}</code></td><td>Indicate that the activity can be launched as the embedded child of another
     * activity.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_persistableMode android:persistableMode}</code></td><td>Define how an activity persist across reboots.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_documentLaunchMode android:documentLaunchMode}</code></td><td>This attribute specifies that an activity shall become the root activity of a
     * new task each time it is launched.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_maxRecents android:maxRecents}</code></td><td>The maximum number of entries of tasks rooted at this activity in the recent task list.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_autoRemoveFromRecents android:autoRemoveFromRecents}</code></td><td>Tasks launched by activities with this attribute will remain in the recent tasks
     * list until the last activity in the task is completed.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_relinquishTaskIdentity android:relinquishTaskIdentity}</code></td><td>Tasks whose root has this attribute set to true will replace baseIntent with that of the
     * next activity in the task.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_resumeWhilePausing android:resumeWhilePausing}</code></td><td>Indicate that it is okay for this activity be resumed while the previous
     * activity is in the process of pausing, without waiting for the previous pause
     * to complete.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_lockTaskMode android:lockTaskMode}</code></td><td>This value indicates how tasks rooted at this activity will behave in lockTask mode.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_showForAllUsers android:showForAllUsers}</code></td><td>Specify that an Activity should be shown even if the current/foreground user
     * is different from the user of the Activity.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_resizeableActivity android:resizeableActivity}</code></td><td>Hint to platform that the activity works well in multi-window mode.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_supportsPictureInPicture android:supportsPictureInPicture}</code></td><td>Indicates that the activity specifically supports the picture-in-picture form of
     * multi-window.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_directBootAware android:directBootAware}</code></td><td>Indicate if this component is aware of direct boot lifecycle, and can be
     * safely run before the user has entered their credentials (such as a lock
     * pattern or PIN).</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_enableVrMode android:enableVrMode}</code></td><td>Flag declaring that this activity will be run in VR mode, and specifying
     * the component of the {@link android.service.vr.VrListenerService} that should be
     * bound while this Activity is visible if it is installed and enabled on this device.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_roundIcon android:roundIcon}</code></td><td>A Drawable resource providing a graphical representation of its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_visibleToInstantApps android:visibleToInstantApps}</code></td><td>Specify whether a component should be visible to instant apps.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_rotationAnimation android:rotationAnimation}</code></td><td>Flag allowing the activity to specify which screen rotation animation
     * it desires.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_recreateOnConfigChanges android:recreateOnConfigChanges}</code></td><td>Specify the configuration changes that trigger the system to recreate the
     * current activity if any of these configuration changes happen in the system.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_splitName android:splitName}</code></td><td>When an application is partitioned into splits, this is the name of the
     * split that contains the defined component.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_colorMode android:colorMode}</code></td><td>Specify the color mode the activity desires.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_maxAspectRatio android:maxAspectRatio}</code></td><td>This value indicates the maximum aspect ratio the activity supports.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_showWhenLocked android:showWhenLocked}</code></td><td>Specifies whether an {@link android.app.Activity} should be shown on top of the lock screen
     * whenever the lockscreen is up and the activity is resumed.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_turnScreenOn android:turnScreenOn}</code></td><td>Specifies whether the screen should be turned on when the {@link android.app.Activity} is resumed.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_minAspectRatio android:minAspectRatio}</code></td><td>This value indicates the minimum aspect ratio the activity supports.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_inheritShowWhenLocked android:inheritShowWhenLocked}</code></td><td>Specifies whether this {@link android.app.Activity} should be shown on
     * top of the lock screen whenever the lockscreen is up and this activity has another
     * activity behind it with the {@link android.R.attr#showWhenLocked} attribute set.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_forceQueryable android:forceQueryable}</code></td><td></td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_preferMinimalPostProcessing android:preferMinimalPostProcessing}</code></td><td>Indicates whether the activity wants the connected display to do minimal
     * post processing on the produced image or video frames.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_attributionTags android:attributionTags}</code></td><td>Attribution tag to be used for permission sub-attribution if a
     * permission is checked in  {@link android.content.Context#sendBroadcast(Intent, String)}.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivity_playHomeTransitionSound android:playHomeTransitionSound}</code></td><td>Specifies whether a home sound effect should be played if the home app moves to
     * front after an activity with this flag set to <code>true</code>.</td></tr>
     * </table>
     * @see #AndroidManifestActivity_theme
     * @see #AndroidManifestActivity_label
     * @see #AndroidManifestActivity_icon
     * @see #AndroidManifestActivity_name
     * @see #AndroidManifestActivity_permission
     * @see #AndroidManifestActivity_enabled
     * @see #AndroidManifestActivity_exported
     * @see #AndroidManifestActivity_process
     * @see #AndroidManifestActivity_taskAffinity
     * @see #AndroidManifestActivity_multiprocess
     * @see #AndroidManifestActivity_finishOnTaskLaunch
     * @see #AndroidManifestActivity_clearTaskOnLaunch
     * @see #AndroidManifestActivity_stateNotNeeded
     * @see #AndroidManifestActivity_excludeFromRecents
     * @see #AndroidManifestActivity_launchMode
     * @see #AndroidManifestActivity_screenOrientation
     * @see #AndroidManifestActivity_configChanges
     * @see #AndroidManifestActivity_description
     * @see #AndroidManifestActivity_alwaysRetainTaskState
     * @see #AndroidManifestActivity_allowTaskReparenting
     * @see #AndroidManifestActivity_windowSoftInputMode
     * @see #AndroidManifestActivity_noHistory
     * @see #AndroidManifestActivity_finishOnCloseSystemDialogs
     * @see #AndroidManifestActivity_logo
     * @see #AndroidManifestActivity_immersive
     * @see #AndroidManifestActivity_hardwareAccelerated
     * @see #AndroidManifestActivity_uiOptions
     * @see #AndroidManifestActivity_parentActivityName
     * @see #AndroidManifestActivity_singleUser
     * @see #AndroidManifestActivity_showOnLockScreen
     * @see #AndroidManifestActivity_banner
     * @see #AndroidManifestActivity_allowEmbedded
     * @see #AndroidManifestActivity_persistableMode
     * @see #AndroidManifestActivity_documentLaunchMode
     * @see #AndroidManifestActivity_maxRecents
     * @see #AndroidManifestActivity_autoRemoveFromRecents
     * @see #AndroidManifestActivity_relinquishTaskIdentity
     * @see #AndroidManifestActivity_resumeWhilePausing
     * @see #AndroidManifestActivity_lockTaskMode
     * @see #AndroidManifestActivity_showForAllUsers
     * @see #AndroidManifestActivity_resizeableActivity
     * @see #AndroidManifestActivity_supportsPictureInPicture
     * @see #AndroidManifestActivity_directBootAware
     * @see #AndroidManifestActivity_enableVrMode
     * @see #AndroidManifestActivity_roundIcon
     * @see #AndroidManifestActivity_visibleToInstantApps
     * @see #AndroidManifestActivity_rotationAnimation
     * @see #AndroidManifestActivity_recreateOnConfigChanges
     * @see #AndroidManifestActivity_splitName
     * @see #AndroidManifestActivity_colorMode
     * @see #AndroidManifestActivity_maxAspectRatio
     * @see #AndroidManifestActivity_showWhenLocked
     * @see #AndroidManifestActivity_turnScreenOn
     * @see #AndroidManifestActivity_minAspectRatio
     * @see #AndroidManifestActivity_inheritShowWhenLocked
     * @see #AndroidManifestActivity_forceQueryable
     * @see #AndroidManifestActivity_preferMinimalPostProcessing
     * @see #AndroidManifestActivity_attributionTags
     * @see #AndroidManifestActivity_playHomeTransitionSound
     */
    public static final int[] AndroidManifestActivity={
      0x01010000, 0x01010001, 0x01010002, 0x01010003, 
      0x01010006, 0x0101000e, 0x01010010, 0x01010011, 
      0x01010012, 0x01010013, 0x01010014, 0x01010015, 
      0x01010016, 0x01010017, 0x0101001d, 0x0101001e, 
      0x0101001f, 0x01010020, 0x01010203, 0x01010204, 
      0x0101022b, 0x0101022d, 0x010102a7, 0x010102be, 
      0x010102c0, 0x010102d3, 0x01010398, 0x010103a7, 
      0x010103bf, 0x010103c9, 0x010103f2, 0x010103f5, 
      0x0101042d, 0x01010445, 0x01010446, 0x01010447, 
      0x01010476, 0x010104b2, 0x010104ed, 0x010104ef, 
      0x010104f6, 0x010104f7, 0x01010505, 0x01010525, 
      0x0101052c, 0x01010531, 0x0101053a, 0x01010547, 
      0x01010549, 0x0101054a, 0x01010560, 0x01010569, 
      0x0101056a, 0x0101059b, 0x0101059c, 0x01010608, 
      0x0101060c, 0x01010642, 0x01010646, 0x01120011, 
      0x011200e8
    };
    /**
     * <p>
     * @attr description
     * The overall theme to use for an activity.  Use with either the
     * application tag (to supply a default theme for all activities) or
     * the activity tag (to supply a specific theme for that activity).
     * <p>This automatically sets
     * your activity's Context to use this theme, and may also be used
     * for "starting" animations prior to the activity being launched (to
     * better match what the activity actually looks like).  It is a reference
     * to a style resource defining the theme.  If not set, the default
     * system theme will be used.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:theme
     */
    public static final int AndroidManifestActivity_theme=0;
    /**
     * <p>
     * @attr description
     * A user-legible name for the given item.  Use with the
     * application tag (to supply a default label for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific label for that component).  It may also be
     * used with the intent-filter tag to supply a label to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given label will be used wherever the user sees information
     * about its associated component; for example, as the name of a
     * main activity that is displayed in the launcher.  You should
     * generally set this to a reference to a string resource, so that
     * it can be localized, however it is also allowed to supply a plain
     * string for quick and dirty programming.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:label
     */
    public static final int AndroidManifestActivity_label=1;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing a graphical representation of its
     * associated item.  Use with the
     * application tag (to supply a default icon for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific icon for that component).  It may also be
     * used with the intent-filter tag to supply an icon to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given icon will be used to display to the user a graphical
     * representation of its associated component; for example, as the icon
     * for main activity that is displayed in the launcher.  This must be
     * a reference to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:icon
     */
    public static final int AndroidManifestActivity_icon=2;
    /**
     * <p>
     * @attr description
     * Required name of the class implementing the activity, deriving from
     * {@link android.app.Activity}.  This is a fully
     * qualified class name (for example, com.mycompany.myapp.MyActivity); as a
     * short-hand if the first character of the class
     * is a period then it is appended to your package name.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AndroidManifestActivity_name=3;
    /**
     * <p>
     * @attr description
     * Specify a permission that a client is required to have in order to
     * use the associated object.  If the client does not hold the named
     * permission, its request will fail.  See the
     * <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
     * document for more information on permissions.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:permission
     */
    public static final int AndroidManifestActivity_permission=4;
    /**
     * <p>
     * @attr description
     * Specify whether the activity is enabled or not (that is, can be instantiated by the system).
     * It can also be specified for an application as a whole, in which case a value of "false"
     * will override any component specific values (a value of "true" will not override the
     * component specific values).
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:enabled
     */
    public static final int AndroidManifestActivity_enabled=5;
    /**
     * <p>
     * @attr description
     * Flag indicating whether the given application component is available
     * to other applications.  If false, it can only be accessed by
     * applications with its same user id (which usually means only by
     * code in its own package).  If true, it can be invoked by external
     * entities, though which ones can do so may be controlled through
     * permissions.  The default value is false for activity, receiver,
     * and service components that do not specify any intent filters; it
     * is true for activity, receiver, and service components that do
     * have intent filters (implying they expect to be invoked by others
     * who do not know their particular component name) and for all
     * content providers.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:exported
     */
    public static final int AndroidManifestActivity_exported=6;
    /**
     * <p>
     * @attr description
     * Specify a specific process that the associated code is to run in.
     * Use with the application tag (to supply a default process for all
     * application components), or with the activity, receiver, service,
     * or provider tag (to supply a specific icon for that component).
     * <p>Application components are normally run in a single process that
     * is created for the entire application.  You can use this tag to modify
     * where they run.  If the process name begins with a ':' character,
     * a new process private to that application will be created when needed
     * to run that component (allowing you to spread your application across
     * multiple processes).  If the process name begins with a lower-case
     * character, the component will be run in a global process of that name,
     * provided that you have permission to do so, allowing multiple
     * applications to share one process to reduce resource usage.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:process
     */
    public static final int AndroidManifestActivity_process=7;
    /**
     * <p>
     * @attr description
     * Specify a task name that activities have an "affinity" to.
     * Use with the application tag (to supply a default affinity for all
     * activities in the application), or with the activity tag (to supply
     * a specific affinity for that component).
     * <p>The default value for this attribute is the same as the package
     * name, indicating that all activities in the manifest should generally
     * be considered a single "application" to the user.  You can use this
     * attribute to modify that behavior: either giving them an affinity
     * for another task, if the activities are intended to be part of that
     * task from the user's perspective, or using an empty string for
     * activities that have no affinity to a task.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:taskAffinity
     */
    public static final int AndroidManifestActivity_taskAffinity=8;
    /**
     * <p>
     * @attr description
     * Specify whether a component is allowed to have multiple instances
     * of itself running in different processes.  Use with the activity
     * and provider tags.
     * <p>Normally the system will ensure that all instances of a particular
     * component are only running in a single process.  You can use this
     * attribute to disable that behavior, allowing the system to create
     * instances wherever they are used (provided permissions allow it).
     * This is most often used with content providers, so that instances
     * of a provider can be created in each client process, allowing them
     * to be used without performing IPC.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:multiprocess
     */
    public static final int AndroidManifestActivity_multiprocess=9;
    /**
     * <p>
     * @attr description
     * Specify whether an activity should be finished when its task is
     * brought to the foreground by relaunching from the home screen.
     * <p>If both this option and {@link android.R.attr#allowTaskReparenting} are
     * specified, the finish trumps the affinity: the affinity will be
     * ignored and the activity simply finished.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:finishOnTaskLaunch
     */
    public static final int AndroidManifestActivity_finishOnTaskLaunch=10;
    /**
     * <p>
     * @attr description
     * Specify whether an activity's task should be cleared when it
     * is re-launched from the home screen.  As a result, every time the
     * user starts the task, they will be brought to its root activity,
     * regardless of whether they used BACK or HOME to last leave it.
     * This flag only applies to activities that
     * are used to start the root of a new task.
     * <p>An example of the use of this flag would be for the case where
     * a user launches activity A from home, and from there goes to
     * activity B.  They now press home, and then return to activity A.
     * Normally they would see activity B, since that is what they were
     * last doing in A's task.  However, if A has set this flag to true,
     * then upon going to the background all of the tasks on top of it (B
     * in this case) are removed, so when the user next returns to A they
     * will restart at its original activity.
     * <p>When this option is used in conjunction with
     * {@link android.R.attr#allowTaskReparenting}, the allowTaskReparenting trumps the
     * clear.  That is, all activities above the root activity of the
     * task will be removed: those that have an affinity will be moved
     * to the task they are associated with, otherwise they will simply
     * be dropped as described here.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:clearTaskOnLaunch
     */
    public static final int AndroidManifestActivity_clearTaskOnLaunch=11;
    /**
     * <p>
     * @attr description
     * Indicates that an Activity does not need to have its freeze state
     * (as returned by {@link android.app.Activity#onSaveInstanceState}
     * retained in order to be restarted.  Generally you use this for activities
     * that do not store any state.  When this flag is set, if for some reason
     * the activity is killed before it has a chance to save its state,
     * then the system will not remove it from the activity stack like
     * it normally would.  Instead, the next time the user navigates to
     * it its {@link android.app.Activity#onCreate} method will be called
     * with a null icicle, just like it was starting for the first time.
     * <p>This is used by the Home activity to make sure it does not get
     * removed if it crashes for some reason.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:stateNotNeeded
     */
    public static final int AndroidManifestActivity_stateNotNeeded=12;
    /**
     * <p>
     * @attr description
     * Indicates that an Activity should be excluded from the list of
     * recently launched activities.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:excludeFromRecents
     */
    public static final int AndroidManifestActivity_excludeFromRecents=13;
    /**
     * <p>
     * @attr description
     * Specify how an activity should be launched.  See the
     * <a href="{@docRoot}guide/topics/fundamentals/tasks-and-back-stack.html">Tasks and Back
     * Stack</a> document for important information on how these options impact
     * the behavior of your application.
     * <p>If this attribute is not specified, <code>standard</code> launch
     * mode will be used.  Note that the particular launch behavior can
     * be changed in some ways at runtime through the
     * {@link android.content.Intent} flags
     * {@link android.content.Intent#FLAG_ACTIVITY_SINGLE_TOP},
     * {@link android.content.Intent#FLAG_ACTIVITY_NEW_TASK}, and
     * {@link android.content.Intent#FLAG_ACTIVITY_MULTIPLE_TASK}.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>singleInstance</td><td>3</td><td>Only allow one instance of this activity to ever be
     * running.  This activity gets a unique task with only itself running
     * in it; if it is ever launched again with the same Intent, then that
     * task will be brought forward and its
     * {@link android.app.Activity#onNewIntent Activity.onNewIntent()}
     * method called.  If this
     * activity tries to start a new activity, that new activity will be
     * launched in a separate task.  See the
     * <a href="{@docRoot}guide/topics/fundamentals/tasks-and-back-stack.html">Tasks and Back
     * Stack</a> document for more details about tasks.</td></tr>
     * <tr><td>singleInstancePerTask</td><td>4</td><td>The activity can only be running as the root activity of the task, the first activity
     * that created the task, and therefore there will only be one instance of this activity
     * in a task. In constrast to the {@code singleTask} launch mode, this activity can be
     * started in multiple instances in different tasks if the
     * {@code FLAG_ACTIVITY_MULTIPLE_TASK} or {@code FLAG_ACTIVITY_NEW_DOCUMENT} is set.</td></tr>
     * <tr><td>singleTask</td><td>2</td><td>If, when starting the activity, there is already a task running
     * that starts with this activity, then instead of starting a new
     * instance the current task is brought to the front.  The existing
     * instance will receive a call to {@link android.app.Activity#onNewIntent
     * Activity.onNewIntent()}
     * with the new Intent that is being started, and with the
     * {@link android.content.Intent#FLAG_ACTIVITY_BROUGHT_TO_FRONT
     * Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT} flag set.  This is a superset
     * of the singleTop mode, where if there is already an instance
     * of the activity being started at the top of the stack, it will
     * receive the Intent as described there (without the
     * FLAG_ACTIVITY_BROUGHT_TO_FRONT flag set).  See the
     * <a href="{@docRoot}guide/topics/fundamentals/tasks-and-back-stack.html">Tasks and Back
     * Stack</a> document for more details about tasks.</td></tr>
     * <tr><td>singleTop</td><td>1</td><td>If, when starting the activity, there is already an
     * instance of the same activity class in the foreground that is
     * interacting with the user, then
     * re-use that instance.  This existing instance will receive a call to
     * {@link android.app.Activity#onNewIntent Activity.onNewIntent()} with
     * the new Intent that is being started.</td></tr>
     * <tr><td>standard</td><td>0</td><td>The default mode, which will usually create a new instance of
     * the activity when it is started, though this behavior may change
     * with the introduction of other options such as
     * {@link android.content.Intent#FLAG_ACTIVITY_NEW_TASK
     * Intent.FLAG_ACTIVITY_NEW_TASK}.</td></tr>
     * </table>
     *
     * @attr name android:launchMode
     */
    public static final int AndroidManifestActivity_launchMode=14;
    /**
     * <p>
     * @attr description
     * Specify the orientation an activity should be run in.  If not
     * specified, it will run in the current preferred orientation
     * of the screen.
     * <p>This attribute is supported by the <a
     * href="{@docRoot}guide/topics/manifest/activity-element.html">{@code <activity>}</a>
     * element.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>behind</td><td>3</td><td>Keep the screen in the same orientation as whatever is behind
     * this activity.
     * Corresponds to
     * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_BEHIND}.</td></tr>
     * <tr><td>fullSensor</td><td>a</td><td>Orientation is determined by a physical orientation sensor:
     * the display will rotate based on how the user moves the device.
     * This allows any of the 4 possible rotations, regardless of what
     * the device will normally do (for example some devices won't
     * normally use 180 degree rotation).
     * Corresponds to
     * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_FULL_SENSOR}.</td></tr>
     * <tr><td>fullUser</td><td>d</td><td>Respect the user's sensor-based rotation preference, but if
     * sensor-based rotation is enabled then allow the screen to rotate
     * in all 4 possible directions regardless of what
     * the device will normally do (for example some devices won't
     * normally use 180 degree rotation).
     * Corresponds to
     * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_FULL_USER}.</td></tr>
     * <tr><td>landscape</td><td>0</td><td>Would like to have the screen in a landscape orientation: that
     * is, with the display wider than it is tall, ignoring sensor data.
     * Corresponds to
     * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_LANDSCAPE}.</td></tr>
     * <tr><td>locked</td><td>e</td><td>Screen is locked to its current rotation, whatever that is.
     * Corresponds to
     * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_LOCKED}.</td></tr>
     * <tr><td>nosensor</td><td>5</td><td>Always ignore orientation determined by orientation sensor:
     * the display will not rotate when the user moves the device.
     * Corresponds to
     * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_NOSENSOR}.</td></tr>
     * <tr><td>portrait</td><td>1</td><td>Would like to have the screen in a portrait orientation: that
     * is, with the display taller than it is wide, ignoring sensor data.
     * Corresponds to
     * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_PORTRAIT}.</td></tr>
     * <tr><td>reverseLandscape</td><td>8</td><td>Would like to have the screen in landscape orientation, turned in
     * the opposite direction from normal landscape.
     * Corresponds to
     * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_REVERSE_LANDSCAPE}.</td></tr>
     * <tr><td>reversePortrait</td><td>9</td><td>Would like to have the screen in portrait orientation, turned in
     * the opposite direction from normal portrait.
     * Corresponds to
     * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_REVERSE_PORTRAIT}.</td></tr>
     * <tr><td>sensor</td><td>4</td><td>Orientation is determined by a physical orientation sensor:
     * the display will rotate based on how the user moves the device.
     * Ignores user's setting to turn off sensor-based rotation.
     * Corresponds to
     * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_SENSOR}.</td></tr>
     * <tr><td>sensorLandscape</td><td>6</td><td>Would like to have the screen in landscape orientation, but can
     * use the sensor to change which direction the screen is facing.
     * Corresponds to
     * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_SENSOR_LANDSCAPE}.</td></tr>
     * <tr><td>sensorPortrait</td><td>7</td><td>Would like to have the screen in portrait orientation, but can
     * use the sensor to change which direction the screen is facing.
     * Corresponds to
     * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_SENSOR_PORTRAIT}.</td></tr>
     * <tr><td>unspecified</td><td>ffffffff</td><td>No preference specified: let the system decide the best
     * orientation.  This will either be the orientation selected
     * by the activity below, or the user's preferred orientation
     * if this activity is the bottom of a task. If the user
     * explicitly turned off sensor based orientation through settings
     * sensor based device rotation will be ignored. If not by default
     * sensor based orientation will be taken into account and the
     * orientation will changed based on how the user rotates the device.
     * Corresponds to
     * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_UNSPECIFIED}.</td></tr>
     * <tr><td>user</td><td>2</td><td>Use the user's current preferred orientation of the handset.
     * Corresponds to
     * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_USER}.</td></tr>
     * <tr><td>userLandscape</td><td>b</td><td>Would like to have the screen in landscape orientation, but if
     * the user has enabled sensor-based rotation then we can use the
     * sensor to change which direction the screen is facing.
     * Corresponds to
     * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_USER_LANDSCAPE}.</td></tr>
     * <tr><td>userPortrait</td><td>c</td><td>Would like to have the screen in portrait orientation, but if
     * the user has enabled sensor-based rotation then we can use the
     * sensor to change which direction the screen is facing.
     * Corresponds to
     * {@link android.content.pm.ActivityInfo#SCREEN_ORIENTATION_USER_PORTRAIT}.</td></tr>
     * </table>
     *
     * @attr name android:screenOrientation
     */
    public static final int AndroidManifestActivity_screenOrientation=15;
    /**
     * <p>
     * @attr description
     * Specify one or more configuration changes that the activity will
     * handle itself.  If not specified, the activity will be restarted
     * if any of these configuration changes happen in the system.  Otherwise,
     * the activity will remain running and its
     * {@link android.app.Activity#onConfigurationChanged Activity.onConfigurationChanged}
     * method called with the new configuration.
     * <p>Note that all of these configuration changes can impact the
     * resource values seen by the application, so you will generally need
     * to re-retrieve all resources (including view layouts, drawables, etc)
     * to correctly handle any configuration change.
     * <p>These values must be kept in sync with those in
     * {@link android.content.pm.ActivityInfo} and
     * include/utils/ResourceTypes.h.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>colorMode</td><td>4000</td><td>The color mode of the screen has changed (color gamut or dynamic range).</td></tr>
     * <tr><td>density</td><td>1000</td><td>The display density has changed. This might be caused by the user
     * specifying a different display scale, or it might be caused by a
     * different display being activated.</td></tr>
     * <tr><td>fontScale</td><td>40000000</td><td>The font scaling factor has changed, that is the user has
     * selected a new global font size.</td></tr>
     * <tr><td>fontWeightAdjustment</td><td>10000000</td><td>The font weight adjustment value has changed. Used to reflect the user increasing font
     * weight.</td></tr>
     * <tr><td>keyboard</td><td>10</td><td>The keyboard type has changed, for example the user has plugged
     * in an external keyboard.</td></tr>
     * <tr><td>keyboardHidden</td><td>20</td><td>The keyboard or navigation accessibility has changed, for example
     * the user has slid the keyboard out to expose it.  Note that
     * despite its name, this applied to any accessibility: keyboard
     * or navigation.</td></tr>
     * <tr><td>layoutDirection</td><td>2000</td><td>The layout direction has changed. For example going from LTR to RTL.</td></tr>
     * <tr><td>locale</td><td>4</td><td>The locale has changed, that is the user has selected a new
     * language that text should be displayed in.</td></tr>
     * <tr><td>mcc</td><td>1</td><td>The IMSI MCC has changed, that is a SIM has been detected and
     * updated the Mobile Country Code. By default from Android O, we
     * don't recreate the activity even the app doesn't specify mcc in
     * configChanges. If the app wants to recreate the activity, specify
     * mcc in recreateOnConfigChanges.</td></tr>
     * <tr><td>mnc</td><td>2</td><td>The IMSI MNC has changed, that is a SIM has been detected and
     * updated the Mobile Network Code. By default from Android O, we
     * don't recreate the activity even the app doesn't specify mnc in
     * configChanges. If the app wants to recreate the acvitity, specify
     * mnc in recreateOnConfigChanges.</td></tr>
     * <tr><td>navigation</td><td>40</td><td>The navigation type has changed.  Should never normally happen.</td></tr>
     * <tr><td>orientation</td><td>80</td><td>The screen orientation has changed, that is the user has
     * rotated the device.</td></tr>
     * <tr><td>screenLayout</td><td>100</td><td>The screen layout has changed.  This might be caused by a
     * different display being activated.</td></tr>
     * <tr><td>screenSize</td><td>400</td><td>The current available screen size has changed.  If applications don't
     * target at least {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2}
     * then the activity will always handle this itself (the change
     * will not result in a restart).  This represents a change in the
     * currently available size, so will change when the user switches
     * between landscape and portrait.</td></tr>
     * <tr><td>smallestScreenSize</td><td>800</td><td>The physical screen size has changed.  If applications don't
     * target at least {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2}
     * then the activity will always handle this itself (the change
     * will not result in a restart).  This represents a change in size
     * regardless of orientation, so will only change when the actual
     * physical screen size has changed such as switching to an external
     * display.</td></tr>
     * <tr><td>touchscreen</td><td>8</td><td>The touchscreen has changed.  Should never normally happen.</td></tr>
     * <tr><td>uiMode</td><td>200</td><td>The global user interface mode has changed.  For example,
     * going in or out of car mode, night mode changing, etc.</td></tr>
     * </table>
     *
     * @attr name android:configChanges
     */
    public static final int AndroidManifestActivity_configChanges=16;
    /**
     * <p>
     * @attr description
     * Descriptive text for the associated data.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:description
     */
    public static final int AndroidManifestActivity_description=17;
    /**
     * <p>
     * @attr description
     * Specify whether an acitivty's task state should always be maintained
     * by the system, or if it is allowed to reset the task to its initial
     * state in certain situations.
     * <p>Normally the system will reset a task (remove all activities from
     * the stack and reset the root activity) in certain situations when
     * the user re-selects that task from the home screen.  Typically this
     * will be done if the user hasn't visited that task for a certain
     * amount of time, such as 30 minutes.
     * <p>By setting this attribute, the user will always return to your
     * task in its last state, regardless of how they get there.  This is
     * useful, for example, in an application like the web browser where there
     * is a lot of state (such as multiple open tabs) that the application
     * would not like to lose.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:alwaysRetainTaskState
     */
    public static final int AndroidManifestActivity_alwaysRetainTaskState=18;
    /**
     * <p>
     * @attr description
     * Specify that an activity can be moved out of a task it is in to
     * the task it has an affinity for when appropriate.  Use with the
     * application tag (to supply a default for all activities in the
     * application), or with an activity tag (to supply a specific
     * setting for that component).
     * <p>Normally when an application is started, it is associated with
     * the task of the activity that started it and stays there for its
     * entire lifetime.  You can use the allowTaskReparenting feature to force an
     * activity to be re-parented to a different task when the task it is
     * in goes to the background.  Typically this is used to cause the
     * activities of an application to move back to the main task associated
     * with that application.  The activity is re-parented to the task
     * with the same {@link android.R.attr#taskAffinity} as it has.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:allowTaskReparenting
     */
    public static final int AndroidManifestActivity_allowTaskReparenting=19;
    /**
     * <p>
     * @attr description
     * Specify the default soft-input mode for the main window of
     * this activity.  A value besides "unspecified" here overrides
     * any value in the theme.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>adjustNothing</td><td>30</td><td>Don't resize <em>or</em> pan the window to make room for the
     * soft input area; the window is never adjusted for it.</td></tr>
     * <tr><td>adjustPan</td><td>20</td><td>Don't resize the window to make room for the soft input area;
     * instead pan the contents of the window as focus moves inside
     * of it so that the user can see what they are typing.  This is
     * generally less desireable than panning because the user may
     * need to close the input area to get at and interact with
     * parts of the window.</td></tr>
     * <tr><td>adjustResize</td><td>10</td><td>Always resize the window: the content area of the window is
     * reduced to make room for the soft input area.</td></tr>
     * <tr><td>adjustUnspecified</td><td>0</td><td>The window resize/pan adjustment has not been specified,
     * the system will automatically select between resize and pan
     * modes, depending
     * on whether the content of the window has any layout views
     * that can scroll their contents.  If there is such a view,
     * then the window will be resized, with the assumption being
     * that the resizeable area can be reduced to make room for
     * the input UI.</td></tr>
     * <tr><td>stateAlwaysHidden</td><td>3</td><td>Always make the soft input area hidden when this window
     * has input focus.</td></tr>
     * <tr><td>stateAlwaysVisible</td><td>5</td><td>Always make the soft input area visible when this window
     * has input focus.</td></tr>
     * <tr><td>stateHidden</td><td>2</td><td>Make the soft input area hidden when normally appropriate
     * (when the user is navigating forward to your window).</td></tr>
     * <tr><td>stateUnchanged</td><td>1</td><td>Leave the soft input window as-is, in whatever state it
     * last was.</td></tr>
     * <tr><td>stateUnspecified</td><td>0</td><td>Not specified, use what the system thinks is best.  This
     * is the default.</td></tr>
     * <tr><td>stateVisible</td><td>4</td><td>Make the soft input area visible when normally appropriate
     * (when the user is navigating forward to your window).</td></tr>
     * </table>
     *
     * @attr name android:windowSoftInputMode
     */
    public static final int AndroidManifestActivity_windowSoftInputMode=20;
    /**
     * <p>
     * @attr description
     * Specify whether an activity should be kept in its history stack.
     * If this attribute is set, then as soon as the user navigates away
     * from the activity it will be finished and they will no longer be
     * able to return to it.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:noHistory
     */
    public static final int AndroidManifestActivity_noHistory=21;
    /**
     * <p>
     * @attr description
     * Specify whether an activity should be finished when a "close system
     * windows" request has been made.  This happens, for example, when
     * the home key is pressed, when the device is locked, when a system
     * dialog showing recent applications is displayed, etc.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:finishOnCloseSystemDialogs
     */
    public static final int AndroidManifestActivity_finishOnCloseSystemDialogs=22;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing an extended graphical logo for its
     * associated item. Use with the application tag (to supply a default
     * logo for all application components), or with the activity, receiver,
     * service, or instrumentation tag (to supply a specific logo for that
     * component). It may also be used with the intent-filter tag to supply
     * a logo to show to the user when an activity is being selected based
     * on a particular Intent.
     * <p>The given logo will be used to display to the user a graphical
     * representation of its associated component; for example as the
     * header in the Action Bar. The primary differences between an icon
     * and a logo are that logos are often wider and more detailed, and are
     * used without an accompanying text caption. This must be a reference
     * to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:logo
     */
    public static final int AndroidManifestActivity_logo=23;
    /**
     * <p>
     * @attr description
     * Flag declaring this activity to be 'immersive'; immersive activities
     * should not be interrupted with other activities or notifications.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:immersive
     */
    public static final int AndroidManifestActivity_immersive=24;
    /**
     * <p>
     * @attr description
     * <p>Flag indicating whether the application's rendering should be hardware
     * accelerated if possible. This flag is turned on by default for applications
     * that are targeting {@link android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH}
     * or later.</p>
     * <p>This flag can be set on the application and any activity declared
     * in the manifest. When enabled for the application, each activity is
     * automatically assumed to be hardware accelerated. This flag can be
     * overridden in the activity tags, either turning it off (if on for the
     * application) or on (if off for the application.)</p>
     * <p>When this flag is turned on for an activity (either directly or via
     * the application tag), every window created from the activity, including
     * the activity's own window, will be hardware accelerated, if possible.</p>
     * <p>Please refer to the documentation of
     * {@link android.view.WindowManager.LayoutParams#FLAG_HARDWARE_ACCELERATED}
     * for more information on how to control this flag programmatically.</p>
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:hardwareAccelerated
     */
    public static final int AndroidManifestActivity_hardwareAccelerated=25;
    /**
     * <p>
     * @attr description
     * Extra options for an activity's UI. Applies to either the {@code <activity>} or
     * {@code <application>} tag. If specified on the {@code <application>}
     * tag these will be considered defaults for all activities in the
     * application.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>none</td><td>0</td><td>No extra UI options. This is the default.</td></tr>
     * <tr><td>splitActionBarWhenNarrow</td><td>1</td><td>Split the options menu into a separate bar at the bottom of
     * the screen when severely constrained for horizontal space.
     * (e.g. portrait mode on a phone.) Instead of a small number
     * of action buttons appearing in the action bar at the top
     * of the screen, the action bar will split into the top navigation
     * section and the bottom menu section. Menu items will not be
     * split across the two bars; they will always appear together.</td></tr>
     * </table>
     *
     * @attr name android:uiOptions
     */
    public static final int AndroidManifestActivity_uiOptions=26;
    /**
     * <p>
     * @attr description
     * The name of the logical parent of the activity as it appears in the manifest.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:parentActivityName
     */
    public static final int AndroidManifestActivity_parentActivityName=27;
    /**
     * <p>
     * @attr description
     * If set to true, a single instance of this component will run for
     * all users.  That instance will run as user 0, the default/primary
     * user.  When the app running is in processes for other users and interacts
     * with this component (by binding to a service for example) those processes will
     * always interact with the instance running for user 0.  Enabling
     * single user mode forces "exported" of the component to be false, to
     * help avoid introducing multi-user security bugs.  This feature is only
     * available to applications built in to the system image; you must hold the
     * permission INTERACT_ACROSS_USERS in order
     * to use this feature.  This flag can only be used with services,
     * receivers, and providers; it can not be used with activities.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:singleUser
     */
    public static final int AndroidManifestActivity_singleUser=28;
    /**
     * <p>
     * @attr description
     * @deprecated use {@link android.R.attr#showForAllUsers} instead.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:showOnLockScreen
     */
    @Deprecated
    public static final int AndroidManifestActivity_showOnLockScreen=29;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing an extended graphical banner for its
     * associated item. Use with the application tag (to supply a default
     * banner for all application activities), or with the activity, tag to
     * supply a banner for a specific activity.
     * <p>The given banner will be used to display to the user a graphical
     * representation of an activity in the Leanback application launcher.
     * Since banners are displayed only in the Leanback launcher, they should
     * only be used with activities (and applications) that support Leanback
     * mode. These are activities that handle Intents of category
     * {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
     * Intent.CATEGORY_LEANBACK_LAUNCHER}.
     * <p>This must be a reference to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:banner
     */
    public static final int AndroidManifestActivity_banner=30;
    /**
     * <p>
     * @attr description
     * Indicate that the activity can be launched as the embedded child of another
     * activity. Particularly in the case where the child lives in a container
     * such as a Display owned by another activity.
     * <p>The default value of this attribute is <code>false</code>.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:allowEmbedded
     */
    public static final int AndroidManifestActivity_allowEmbedded=31;
    /**
     * <p>
     * @attr description
     * Define how an activity persist across reboots. Activities defined as "never" will not
     * be persisted. Those defined as "always" will be persisted. Those defined as "taskOnly"
     * will persist the root activity of the task only. See below for more detail as to
     * what gets persisted.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>persistAcrossReboots</td><td>2</td><td>If this activity forms the root of a task then the task and this activity will
     * be persisted across reboots. If the activity above this activity is also
     * tagged with the attribute <code>"persist"</code> then it will be persisted as well.
     * And so on up the task stack until either an activity without the
     * <code>persistableMode="persistAcrossReboots"</code> attribute or one that was launched
     * with the flag Intent.FLAG_CLEAR_TASK_WHEN_RESET is encountered.
     * <p>Activities that are declared with the persistAcrossReboots attribute will be
     * provided with a PersistableBundle in onSavedInstanceState(), These activities may
     * use this PeristableBundle to save their state. Then, following a reboot, that
     * PersistableBundle will be provided back to the activity in its onCreate() method.</td></tr>
     * <tr><td>persistNever</td><td>1</td><td>If this activity forms the root of a task then that task will not be persisted
     * across reboots</td></tr>
     * <tr><td>persistRootOnly</td><td>0</td><td>The default. If this activity forms the root of a task then that task will be
     * persisted across reboots but only the launching intent will be used. If the task
     * relinquishes its identity then the intent used is that of the topmost inherited
     * identity. All activities above this activity in the task will not be persisted.
     * In addition this activity will not be passed a PersistableBundle into which it
     * could have stored its state.</td></tr>
     * </table>
     *
     * @attr name android:persistableMode
     */
    public static final int AndroidManifestActivity_persistableMode=32;
    /**
     * <p>
     * @attr description
     * This attribute specifies that an activity shall become the root activity of a
     * new task each time it is launched. Using this attribute permits the user to
     * have multiple documents from the same applications appear in the recent tasks list.
     * <p>Such a document is any kind of item for which an application may want to
     * maintain multiple simultaneous instances. Examples might be text files, web
     * pages, spreadsheets, or emails. Each such document will be in a separate
     * task in the recent taskss list.
     * <p>This attribute is equivalent to adding the flag {@link
     * android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT} to every Intent used to launch
     * the activity.
     * <p>The documentLaunchMode attribute may be assigned one of four values, "none",
     * "intoExisting", "always" and "never", described in detail below. For values other than
     * <code>none</code> and <code>never</code> the activity must be defined with
     * {@link android.R.attr#launchMode} <code>standard</code>.
     * If this attribute is not specified, <code>none</code> will be used.
     * Note that <code>none</code> can be overridden at run time if the Intent used
     * to launch it contains the flag {@link android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT
     * Intent.FLAG_ACTIVITY_NEW_DOCUMENT}.
     * Similarly <code>intoExisting</code> will be overridden by the flag
     * {@link android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT
     * Intent.FLAG_ACTIVITY_NEW_DOCUMENT} combined with
     * {@link android.content.Intent#FLAG_ACTIVITY_MULTIPLE_TASK
     * Intent.FLAG_ACTIVITY_MULTIPLE_TASK}. If the value of
     * documentLaunchModes is <code>never</code> then any use of
     * {@link android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT
     * Intent.FLAG_ACTIVITY_NEW_DOCUMENT} to launch this activity will be ignored.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>always</td><td>2</td><td>A new task rooted at this activity will be created. This will happen whether or
     * not there is an existing task whose ComponentName and data URI match
     * that of the launcing intent This is the equivalent of launching an activity
     * with {@link
     * android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT Intent.FLAG_ACTIVITY_NEW_DOCUMENT}
     * and {@link android.content.Intent#FLAG_ACTIVITY_MULTIPLE_TASK
     * Intent.FLAG_ACTIVITY_MULTIPLE_TASK} both set.</td></tr>
     * <tr><td>intoExisting</td><td>1</td><td>All tasks will be searched for one whose base Intent's ComponentName and
     * data URI match those of the launching Intent. If such a task is found
     * that task will be cleared and restarted with the root activity receiving a call
     * to {@link android.app.Activity#onNewIntent Activity.onNewIntent}. If no
     * such task is found a new task will be created.
     * <p>This is the equivalent of launching an activity with {@link
     * android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT Intent.FLAG_ACTIVITY_NEW_DOCUMENT}
     * set and without {@link android.content.Intent#FLAG_ACTIVITY_MULTIPLE_TASK
     * Intent.FLAG_ACTIVITY_MULTIPLE_TASK} set.</td></tr>
     * <tr><td>never</td><td>3</td><td>This activity will not be launched into a new document even if the Intent contains
     * {@link android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT
     * Intent.FLAG_ACTIVITY_NEW_DOCUMENT}. This gives the activity writer ultimate
     * control over how their activity is used. Note that applications prior to api
     * 21 will default to documentLaunchMode="none" so only activities that explicitly
     * opt out with <code>"never"</code> may do so.</td></tr>
     * <tr><td>none</td><td>0</td><td>The default mode, which will create a new task only when
     * {@link android.content.Intent#FLAG_ACTIVITY_NEW_TASK
     * Intent.FLAG_ACTIVITY_NEW_TASK} is set.</td></tr>
     * </table>
     *
     * @attr name android:documentLaunchMode
     */
    public static final int AndroidManifestActivity_documentLaunchMode=33;
    /**
     * <p>
     * @attr description
     * The maximum number of entries of tasks rooted at this activity in the recent task list.
     * When this number of entries is reached the least recently used instance of this activity
     * will be removed from recents. The value will be clamped between 1 and 100 inclusive.
     * The default value for this if it is not specified is 15.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:maxRecents
     */
    public static final int AndroidManifestActivity_maxRecents=34;
    /**
     * <p>
     * @attr description
     * Tasks launched by activities with this attribute will remain in the recent tasks
     * list until the last activity in the task is completed.  When that happens the task
     * will be automatically removed from the recent tasks list.  This overrides the caller's
     * use of {@link android.content.Intent#FLAG_ACTIVITY_RETAIN_IN_RECENTS
     * Intent.FLAG_ACTIVITY_RETAIN_IN_RECENTS}
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:autoRemoveFromRecents
     */
    public static final int AndroidManifestActivity_autoRemoveFromRecents=35;
    /**
     * <p>
     * @attr description
     * Tasks whose root has this attribute set to true will replace baseIntent with that of the
     * next activity in the task. If the next activity also has this attribute set to true then
     * it will yield the baseIntent to any activity that it launches in the same task. This
     * continues until an activity is encountered which has this attribute set to false. False
     * is the default. This attribute set to true also permits activity's use of the
     * TaskDescription to change labels, colors and icons in the recent task list.
     * <p>NOTE: Setting this flag to <code>true</code> will not change the affinity of the task,
     * which is used for intent resolution during activity launch. The task's root activity will
     * always define its affinity.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:relinquishTaskIdentity
     */
    public static final int AndroidManifestActivity_relinquishTaskIdentity=36;
    /**
     * <p>
     * @attr description
     * Indicate that it is okay for this activity be resumed while the previous
     * activity is in the process of pausing, without waiting for the previous pause
     * to complete.  Use this with caution: your activity can not acquire any exclusive
     * resources (such as opening the camera or recording audio) when it launches, or it
     * may conflict with the previous activity and fail.
     * <p>The default value of this attribute is <code>false</code>.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:resumeWhilePausing
     */
    public static final int AndroidManifestActivity_resumeWhilePausing=37;
    /**
     * <p>
     * @attr description
     * This value indicates how tasks rooted at this activity will behave in lockTask mode.
     * While in lockTask mode the system will not launch non-permitted tasks until
     * lockTask mode is disabled.
     * <p>While in lockTask mode with multiple permitted tasks running, each launched task is
     * permitted to finish, transitioning to the previous locked task, until there is only one
     * task remaining. At that point the last task running is not permitted to finish, unless it
     * uses the value always.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>always</td><td>2</td><td>Tasks rooted at this activity will always launch into lockTask mode. If the system is
     * already in lockTask mode when this task is launched then the new task will be launched
     * on top of the current task. Tasks launched in this mode are capable of exiting
     * lockTask mode using {@link android.app.Activity#finish()}.
     * <p>Note: This mode is only available to system and privileged applications.
     * Non-privileged apps with this value will be treated as normal.</td></tr>
     * <tr><td>if_whitelisted</td><td>3</td><td>If the DevicePolicyManager (DPM) authorizes this package ({@link
     * android.app.admin.DevicePolicyManager#setLockTaskPackages}) then this mode is
     * identical to always, except that the activity needs to call
     * {@link android.app.Activity#stopLockTask} before being able to finish if it is the last
     * locked task.
     * If the DPM does not authorize this package then this mode is identical to normal.</td></tr>
     * <tr><td>never</td><td>1</td><td>Tasks will not launch into lockTask mode and cannot be placed there using
     * {@link android.app.Activity#startLockTask} or be pinned from the Overview screen.
     * If the system is already in lockTask mode when a new task rooted at this activity is
     * launched that task will not be started.
     * <p>Note: This mode is only available to system and privileged applications.
     * Non-privileged apps with this value will be treated as normal.</td></tr>
     * <tr><td>normal</td><td>0</td><td>This is the default value. Tasks will not launch into lockTask mode but can be
     * placed there by calling {@link android.app.Activity#startLockTask}. If a task with
     * this mode has been allowlisted using {@link
     * android.app.admin.DevicePolicyManager#setLockTaskPackages} then calling
     * {@link android.app.Activity#startLockTask} will enter lockTask mode immediately,
     * otherwise the user will be presented with a dialog to approve entering pinned mode.
     * <p>If the system is already in lockTask mode when a new task rooted at this activity
     * is launched that task will or will not start depending on whether the package of this
     * activity has been allowlisted.
     * <p>Tasks rooted at this activity can only exit lockTask mode using
     * {@link android.app.Activity#stopLockTask}.</td></tr>
     * </table>
     *
     * @attr name android:lockTaskMode
     */
    public static final int AndroidManifestActivity_lockTaskMode=38;
    /**
     * <p>
     * @attr description
     * Specify that an Activity should be shown even if the current/foreground user
     * is different from the user of the Activity. This will also force the
     * <code>android.view.LayoutParams.FLAG_SHOW_WHEN_LOCKED</code> flag
     * to be set for all windows of this activity
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:showForAllUsers
     */
    public static final int AndroidManifestActivity_showForAllUsers=39;
    /**
     * <p>
     * @attr description
     * Hint to platform that the activity works well in multi-window mode. Intended for a
     * multi-window device where there can be multiple activities of various sizes on the screen
     * at the same time.
     * <p>The default value is <code>false</code> for applications with
     * <code>targetSdkVersion</code> lesser than {@link android.os.Build.VERSION_CODES#N} and
     * <code>true</code> otherwise.
     * <p>Setting this flag to <code>false</code> lets the system know that the app may not be
     * tested or optimized for multi-window environment. The system may still put such activity in
     * multi-window with compatibility mode applied. It also does not guarantee that there will be
     * no other apps in multi-window visible on screen (e.g. picture-in-picture) or on other
     * displays. Therefore, this flag cannot be used to assure an exclusive resource access.
     * <p>NOTE: A task's root activity value is applied to all additional activities launched in
     * the task. That is if the root activity of a task is resizeable then the system will treat
     * all other activities in the task as resizeable and will not if the root activity isn't
     * resizeable.
     * <p>NOTE: The value of {@link android.R.attr#screenOrientation} is ignored for
     * resizeable activities when in multi-window mode before Android 12.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:resizeableActivity
     */
    public static final int AndroidManifestActivity_resizeableActivity=40;
    /**
     * <p>
     * @attr description
     * Indicates that the activity specifically supports the picture-in-picture form of
     * multi-window. If true, this activity will support entering picture-in-picture, but will
     * only support split-screen and other forms of multi-window if
     * {@link android.R.attr#resizeableActivity} is also set to true.
     * Note that your activity may still be resized even if this attribute is true and
     * {@link android.R.attr#resizeableActivity} is false.
     * <p>The default value is <code>false</code>.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:supportsPictureInPicture
     */
    public static final int AndroidManifestActivity_supportsPictureInPicture=41;
    /**
     * <p>
     * @attr description
     * Indicate if this component is aware of direct boot lifecycle, and can be
     * safely run before the user has entered their credentials (such as a lock
     * pattern or PIN).
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:directBootAware
     */
    public static final int AndroidManifestActivity_directBootAware=42;
    /**
     * <p>
     * @attr description
     * Flag declaring that this activity will be run in VR mode, and specifying
     * the component of the {@link android.service.vr.VrListenerService} that should be
     * bound while this Activity is visible if it is installed and enabled on this device.
     * This is equivalent to calling {@link android.app.Activity#setVrModeEnabled} with the
     * the given component name within the Activity that this attribute is set for.
     * Declaring this will prevent the system from leaving VR mode during an Activity
     * transtion from one VR activity to another.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:enableVrMode
     */
    public static final int AndroidManifestActivity_enableVrMode=43;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing a graphical representation of its
     * associated item.  Use with the
     * application tag (to supply a default round icon for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific round icon for that component).  It may also be
     * used with the intent-filter tag to supply a round icon to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given round icon will be used to display to the user a graphical
     * representation of its associated component; for example, as the round icon
     * for main activity that is displayed in the launcher.  This must be
     * a reference to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:roundIcon
     */
    public static final int AndroidManifestActivity_roundIcon=44;
    /**
     * <p>
     * @attr description
     * Specify whether a component should be visible to instant apps.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:visibleToInstantApps
     */
    public static final int AndroidManifestActivity_visibleToInstantApps=45;
    /**
     * <p>
     * @attr description
     * Flag allowing the activity to specify which screen rotation animation
     * it desires.  Valid values are "rotate", "crossfade", and "jumpcut"
     * as described in {@link android.view.WindowManager.LayoutParams#rotationAnimation}.
     * Specifying your Rotation animation in the WindowManager.LayoutParams
     * may be racy with app startup and updattransitions occuring during application startup and thusly
     * the manifest attribute is preferred.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>crossfade</td><td>1</td><td></td></tr>
     * <tr><td>jumpcut</td><td>2</td><td></td></tr>
     * <tr><td>rotate</td><td>0</td><td></td></tr>
     * <tr><td>seamless</td><td>3</td><td></td></tr>
     * </table>
     *
     * @attr name android:rotationAnimation
     */
    public static final int AndroidManifestActivity_rotationAnimation=46;
    /**
     * <p>
     * @attr description
     * Specify the configuration changes that trigger the system to recreate the
     * current activity if any of these configuration changes happen in the system.
     * The valid configuration changes include mcc and mnc which are the same with
     * those in configChanges. By default from Android O, we don't recreate the activity
     * even the app doesn't specify mcc or mnc in configChanges. If the app wants to
     * be recreated, specify them in recreateOnConfigChanges.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>mcc</td><td>1</td><td>The IMSI MCC has changed, that is a SIM has been detected and
     * updated the Mobile Country Code.</td></tr>
     * <tr><td>mnc</td><td>2</td><td>The IMSI MNC has changed, that is a SIM has been detected and
     * updated the Mobile Network Code.</td></tr>
     * </table>
     *
     * @attr name android:recreateOnConfigChanges
     */
    public static final int AndroidManifestActivity_recreateOnConfigChanges=47;
    /**
     * <p>
     * @attr description
     * The code for this component is located in the given split.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:splitName
     */
    public static final int AndroidManifestActivity_splitName=48;
    /**
     * <p>
     * @attr description
     * Specify the color mode the activity desires. The requested color mode may be ignored
     * depending on the capabilities of the display the activity is displayed on.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>default</td><td>0</td><td>The default color mode (typically sRGB, low-dynamic range).</td></tr>
     * <tr><td>hdr</td><td>2</td><td>High dynamic range color mode.</td></tr>
     * <tr><td>wideColorGamut</td><td>1</td><td>Wide color gamut color mode.</td></tr>
     * </table>
     *
     * @attr name android:colorMode
     */
    public static final int AndroidManifestActivity_colorMode=49;
    /**
     * <p>
     * @attr description
     * This value indicates the maximum aspect ratio the activity supports. If the app runs on a
     * device with a wider aspect ratio, the system automatically letterboxes the app, leaving
     * portions of the screen unused so the app can run at its specified maximum aspect ratio.
     * <p>
     * Maximum aspect ratio, expressed as (longer dimension / shorter dimension) in decimal
     * form. For example, if the maximum aspect ratio is 7:3, set value to 2.33.
     * <p>
     * Value needs to be greater or equal to 1.0, otherwise it is ignored.
     * <p>
     * NOTE: This attribute is ignored if the activity has
     * {@link android.R.attr#resizeableActivity} set to true.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:maxAspectRatio
     */
    public static final int AndroidManifestActivity_maxAspectRatio=50;
    /**
     * <p>
     * @attr description
     * Specifies whether an {@link android.app.Activity} should be shown on top of the lock screen
     * whenever the lockscreen is up and the activity is resumed. Normally an activity will be
     * transitioned to the stopped state if it is started while the lockscreen is up, but with
     * this flag set the activity will remain in the resumed state visible on-top of the lock
     * screen.
     * <p>This should be used instead of {@link android.view.WindowManager.LayoutParams#FLAG_SHOW_WHEN_LOCKED}
     * flag set for Windows. When using the Window flag during activity startup, there may not be
     * time to add it before the system stops your activity for being behind the lock-screen.
     * This leads to a double life-cycle as it is then restarted.</p>
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:showWhenLocked
     */
    public static final int AndroidManifestActivity_showWhenLocked=51;
    /**
     * <p>
     * @attr description
     * Specifies whether the screen should be turned on when the {@link android.app.Activity} is resumed.
     * Normally an activity will be transitioned to the stopped state if it is started while the
     * screen if off, but with this flag set the activity will cause the screen to turn on if the
     * activity will be visible and resumed due to the screen coming on. The screen will not be
     * turned on if the activity won't be visible after the screen is turned on. This flag is
     * normally used in conjunction with the {@link android.R.attr#showWhenLocked} flag to make
     * sure the activity is visible after the screen is turned on when the lockscreen is up. In
     * addition, if this flag is set and the activity calls
     * {@link android.app.KeyguardManager#requestDismissKeyguard}
     * the screen will turn on.
     * <p>This should be used instead of {@link android.view.WindowManager.LayoutParams#FLAG_TURN_SCREEN_ON}
     * flag set for Windows. When using the Window flag during activity startup, there may not be
     * time to add it before the system stops your activity because the screen has not yet turned
     * on. This leads to a double life-cycle as it is then restarted.</p>
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:turnScreenOn
     */
    public static final int AndroidManifestActivity_turnScreenOn=52;
    /**
     * <p>
     * @attr description
     * This value indicates the minimum aspect ratio the activity supports. If the app runs on a
     * device with a narrower aspect ratio, the system automatically letterboxes the app, leaving
     * portions of the screen unused so the app can run at its specified minimum aspect ratio.
     * <p>
     * Minimum aspect ratio, expressed as (longer dimension / shorter dimension) in decimal
     * form. For example, if the minimum aspect ratio is 4:3, set value to 1.33.
     * <p>
     * Value needs to be greater or equal to 1.0, otherwise it is ignored.
     * <p>
     * NOTE: This attribute is ignored if the activity has
     * {@link android.R.attr#resizeableActivity} set to true.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:minAspectRatio
     */
    public static final int AndroidManifestActivity_minAspectRatio=53;
    /**
     * <p>
     * @attr description
     * Specifies whether this {@link android.app.Activity} should be shown on
     * top of the lock screen whenever the lockscreen is up and this activity has another
     * activity behind it with the {@link android.R.attr#showWhenLocked} attribute set. That
     * is, this activity is only visible on the lock screen if there is another activity with
     * the {@link android.R.attr#showWhenLocked} attribute visible at the same time on the
     * lock screen. A use case for this is permission dialogs, that should only be visible on
     * the lock screen if their requesting activity is also visible.
     * <p>The default value of this attribute is <code>false</code>.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:inheritShowWhenLocked
     */
    public static final int AndroidManifestActivity_inheritShowWhenLocked=54;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#forceQueryable}
     * attribute's value can be found in the {@link #AndroidManifestActivity} array.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:forceQueryable
     */
    public static final int AndroidManifestActivity_forceQueryable=55;
    /**
     * <p>
     * @attr description
     * Indicates whether the activity wants the connected display to do minimal
     * post processing on the produced image or video frames. This will only be
     * requested if this activity's main window is visible on the screen.
     * <p> This setting should be used when low latency has a higher priority than
     * image enhancement processing (e.g. for games or video conferencing).
     * <p> If the Display sink is connected via HDMI, the device will begin to
     * send infoframes with Auto Low Latency Mode enabled and Game Content Type.
     * This will switch the connected display to a minimal image processing  mode
     * (if available), which reduces latency, improving the user experience for
     * gaming or video conferencing applications. For more information,
     * see HDMI 2.1 specification.
     * <p> If the Display sink has an internal connection or uses some other
     * protocol than HDMI, effects may be similar but implementation-defined.
     * <p> The ability to switch to a mode with minimal post proessing may be
     * disabled by a user setting in the system settings menu. In that case,
     * this field is ignored and the display will remain in its current
     * mode.
     * <p> See {@link android.content.pm.ActivityInfo#FLAG_PREFER_MINIMAL_POST_PROCESSING}
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:preferMinimalPostProcessing
     */
    public static final int AndroidManifestActivity_preferMinimalPostProcessing=56;
    /**
     * <p>
     * @attr description
     * Set of attribution tags that should be automatically applied to this component.
     * <p>
     * Each instance of this Activity will be automatically configured with
     * Context.createAttributionContext() using the first attribution tag
     * contained here.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:attributionTags
     */
    public static final int AndroidManifestActivity_attributionTags=57;
    /**
     * <p>
     * @attr description
     * Specifies whether a home sound effect should be played if the home app moves to
     * front after an activity with this flag set to <code>true</code>.
     * <p>The default value of this attribute is <code>true</code>.
     * <p>Also note that home sounds are only played if the device supports home sounds,
     * usually TVs.
     * <p>Requires permission {@code android.permission.DISABLE_SYSTEM_SOUND_EFFECTS}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:playHomeTransitionSound
     */
    public static final int AndroidManifestActivity_playHomeTransitionSound=58;
    /**
     * The <code>activity-alias</code> tag declares a new
     * name for an existing {@link #AndroidManifestActivity activity}
     * tag.
     * <p>Zero or more {@link #AndroidManifestIntentFilter intent-filter}
     * tags can be included inside of an activity-alias, to specify the Intents
     * that it can handle.  If none are specified, the activity can
     * only be started through direct specification of its class name.
     * The activity-alias tag appears as a child tag of the
     * {@link #AndroidManifestApplication application} tag.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestActivityAlias_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivityAlias_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivityAlias_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivityAlias_permission android:permission}</code></td><td>Specify a permission that a client is required to have in order to
     * use the associated object.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivityAlias_enabled android:enabled}</code></td><td>Specifies whether the widget is enabled.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivityAlias_exported android:exported}</code></td><td>Flag indicating whether the given application component is available
     * to other applications.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivityAlias_description android:description}</code></td><td>Descriptive text for the associated data.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivityAlias_targetActivity android:targetActivity}</code></td><td>Fully qualified class name of an activity that allows the user to view
     * their entire wallet</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivityAlias_logo android:logo}</code></td><td>A Drawable resource providing an extended graphical logo for its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivityAlias_parentActivityName android:parentActivityName}</code></td><td>The name of the logical parent of the activity as it appears in the manifest.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivityAlias_banner android:banner}</code></td><td>A Drawable resource providing an extended graphical banner for its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivityAlias_roundIcon android:roundIcon}</code></td><td>A Drawable resource providing a graphical representation of its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestActivityAlias_attributionTags android:attributionTags}</code></td><td>Attribution tag to be used for permission sub-attribution if a
     * permission is checked in  {@link android.content.Context#sendBroadcast(Intent, String)}.</td></tr>
     * </table>
     * @see #AndroidManifestActivityAlias_label
     * @see #AndroidManifestActivityAlias_icon
     * @see #AndroidManifestActivityAlias_name
     * @see #AndroidManifestActivityAlias_permission
     * @see #AndroidManifestActivityAlias_enabled
     * @see #AndroidManifestActivityAlias_exported
     * @see #AndroidManifestActivityAlias_description
     * @see #AndroidManifestActivityAlias_targetActivity
     * @see #AndroidManifestActivityAlias_logo
     * @see #AndroidManifestActivityAlias_parentActivityName
     * @see #AndroidManifestActivityAlias_banner
     * @see #AndroidManifestActivityAlias_roundIcon
     * @see #AndroidManifestActivityAlias_attributionTags
     */
    public static final int[] AndroidManifestActivityAlias={
      0x01010001, 0x01010002, 0x01010003, 0x01010006, 
      0x0101000e, 0x01010010, 0x01010020, 0x01010202, 
      0x010102be, 0x010103a7, 0x010103f2, 0x0101052c, 
      0x01010642
    };
    /**
     * <p>
     * @attr description
     * A user-legible name for the given item.  Use with the
     * application tag (to supply a default label for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific label for that component).  It may also be
     * used with the intent-filter tag to supply a label to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given label will be used wherever the user sees information
     * about its associated component; for example, as the name of a
     * main activity that is displayed in the launcher.  You should
     * generally set this to a reference to a string resource, so that
     * it can be localized, however it is also allowed to supply a plain
     * string for quick and dirty programming.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:label
     */
    public static final int AndroidManifestActivityAlias_label=0;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing a graphical representation of its
     * associated item.  Use with the
     * application tag (to supply a default icon for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific icon for that component).  It may also be
     * used with the intent-filter tag to supply an icon to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given icon will be used to display to the user a graphical
     * representation of its associated component; for example, as the icon
     * for main activity that is displayed in the launcher.  This must be
     * a reference to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:icon
     */
    public static final int AndroidManifestActivityAlias_icon=1;
    /**
     * <p>
     * @attr description
     * Required name of the class implementing the activity, deriving from
     * {@link android.app.Activity}.  This is a fully
     * qualified class name (for example, com.mycompany.myapp.MyActivity); as a
     * short-hand if the first character of the class
     * is a period then it is appended to your package name.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AndroidManifestActivityAlias_name=2;
    /**
     * <p>
     * @attr description
     * Specify a permission that a client is required to have in order to
     * use the associated object.  If the client does not hold the named
     * permission, its request will fail.  See the
     * <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
     * document for more information on permissions.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:permission
     */
    public static final int AndroidManifestActivityAlias_permission=3;
    /**
     * <p>
     * @attr description
     * Specify whether the activity-alias is enabled or not (that is, can be instantiated by the system).
     * It can also be specified for an application as a whole, in which case a value of "false"
     * will override any component specific values (a value of "true" will not override the
     * component specific values).
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:enabled
     */
    public static final int AndroidManifestActivityAlias_enabled=4;
    /**
     * <p>
     * @attr description
     * Flag indicating whether the given application component is available
     * to other applications.  If false, it can only be accessed by
     * applications with its same user id (which usually means only by
     * code in its own package).  If true, it can be invoked by external
     * entities, though which ones can do so may be controlled through
     * permissions.  The default value is false for activity, receiver,
     * and service components that do not specify any intent filters; it
     * is true for activity, receiver, and service components that do
     * have intent filters (implying they expect to be invoked by others
     * who do not know their particular component name) and for all
     * content providers.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:exported
     */
    public static final int AndroidManifestActivityAlias_exported=5;
    /**
     * <p>
     * @attr description
     * Descriptive text for the associated data.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:description
     */
    public static final int AndroidManifestActivityAlias_description=6;
    /**
     * <p>
     * @attr description
     * The name of the activity this alias should launch.  The activity
     * must be in the same manifest as the alias, and have been defined
     * in that manifest before the alias here.  This must use a Java-style
     * naming convention to ensure the name is unique, for example
     * "com.mycompany.MyName".
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:targetActivity
     */
    public static final int AndroidManifestActivityAlias_targetActivity=7;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing an extended graphical logo for its
     * associated item. Use with the application tag (to supply a default
     * logo for all application components), or with the activity, receiver,
     * service, or instrumentation tag (to supply a specific logo for that
     * component). It may also be used with the intent-filter tag to supply
     * a logo to show to the user when an activity is being selected based
     * on a particular Intent.
     * <p>The given logo will be used to display to the user a graphical
     * representation of its associated component; for example as the
     * header in the Action Bar. The primary differences between an icon
     * and a logo are that logos are often wider and more detailed, and are
     * used without an accompanying text caption. This must be a reference
     * to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:logo
     */
    public static final int AndroidManifestActivityAlias_logo=8;
    /**
     * <p>
     * @attr description
     * The name of the logical parent of the activity as it appears in the manifest.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:parentActivityName
     */
    public static final int AndroidManifestActivityAlias_parentActivityName=9;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing an extended graphical banner for its
     * associated item. Use with the application tag (to supply a default
     * banner for all application activities), or with the activity, tag to
     * supply a banner for a specific activity.
     * <p>The given banner will be used to display to the user a graphical
     * representation of an activity in the Leanback application launcher.
     * Since banners are displayed only in the Leanback launcher, they should
     * only be used with activities (and applications) that support Leanback
     * mode. These are activities that handle Intents of category
     * {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
     * Intent.CATEGORY_LEANBACK_LAUNCHER}.
     * <p>This must be a reference to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:banner
     */
    public static final int AndroidManifestActivityAlias_banner=10;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing a graphical representation of its
     * associated item.  Use with the
     * application tag (to supply a default round icon for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific round icon for that component).  It may also be
     * used with the intent-filter tag to supply a round icon to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given round icon will be used to display to the user a graphical
     * representation of its associated component; for example, as the round icon
     * for main activity that is displayed in the launcher.  This must be
     * a reference to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:roundIcon
     */
    public static final int AndroidManifestActivityAlias_roundIcon=11;
    /**
     * <p>
     * @attr description
     * Attribution tag to be used for permission sub-attribution if a
     * permission is checked in  {@link android.content.Context#sendBroadcast(Intent, String)}.
     * Multiple tags can be specified separated by '|'.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:attributionTags
     */
    public static final int AndroidManifestActivityAlias_attributionTags=12;
    /**
     * The <code>additional-certificate</code> specifies the SHA-256 digest of a static
     * shared library's additional signing certificate. You need to use this tag if the
     * library is singed with more than one certificate.
     * <p>This appears as a child tag of the
     * {@link #AndroidManifestUsesStaticLibrary uses-static-library} or
     * {@link #AndroidManifestUsesPackage uses-package} tag.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestAdditionalCertificate_certDigest android:certDigest}</code></td><td>Optional SHA-256 digest of the package signing certificate.</td></tr>
     * </table>
     * @see #AndroidManifestAdditionalCertificate_certDigest
     */
    public static final int[] AndroidManifestAdditionalCertificate={
      0x01010548
    };
    /**
     * <p>
     * @attr description
     * The SHA-256 digest of the library signing certificate.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:certDigest
     */
    public static final int AndroidManifestAdditionalCertificate_certDigest=0;
    /**
     * The <code>allow-permission</code> tag specifies that a permission is to be allowed
     * for a particular process, when it was previously denied for all processes through
     * {@link #AndroidManifestDenyPermission deny-permission}
     * <p>This appears as a child tag of the
     * {@link #AndroidManifestProcesses processes} and
     * {@link #AndroidManifestProcess process} tags.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestAllowPermission_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * </table>
     * @see #AndroidManifestAllowPermission_name
     */
    public static final int[] AndroidManifestAllowPermission={
      0x01010003
    };
    /**
     * <p>
     * @attr description
     * Required name of the permission that is to be allowed.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AndroidManifestAllowPermission_name=0;
    /**
     * The <code>application</code> tag describes application-level components
     * contained in the package, as well as general application
     * attributes.  Many of the attributes you can supply here (such
     * as theme, label, icon, permission, process, taskAffinity,
     * and allowTaskReparenting) serve
     * as default values for the corresponding attributes of components
     * declared inside of the application.
     * <p>Inside of this element you specify what the application contains,
     * using the elements {@link #AndroidManifestProvider provider},
     * {@link #AndroidManifestService service},
     * {@link #AndroidManifestReceiver receiver},
     * {@link #AndroidManifestActivity activity},
     * {@link #AndroidManifestActivityAlias activity-alias},
     * {@link #AndroidManifestUsesLibrary uses-library},
     * {@link #AndroidManifestUsesStaticLibrary uses-static-library}, and
     * {@link #AndroidManifestUsesPackage uses-package}.
     * The application tag
     * appears as a child of the root {@link #AndroidManifest manifest} tag in
     * an application's manifest file.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_theme android:theme}</code></td><td>The overall theme to use for an activity.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_manageSpaceActivity android:manageSpaceActivity}</code></td><td>Name of the activity to be launched to manage application's space on
     * device.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_allowClearUserData android:allowClearUserData}</code></td><td>Option to let applications specify that user data can/cannot be
     * cleared.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_permission android:permission}</code></td><td>Specify a permission that a client is required to have in order to
     * use the associated object.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_hasCode android:hasCode}</code></td><td>Indicate whether this application contains code.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_persistent android:persistent}</code></td><td>Flag to control special persistent mode of an application.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_enabled android:enabled}</code></td><td>Specifies whether the widget is enabled.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_debuggable android:debuggable}</code></td><td>Flag indicating whether the application can be debugged, even when
     * running on a device that is running in user mode.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_process android:process}</code></td><td>Specify a specific process that the associated code is to run in.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_taskAffinity android:taskAffinity}</code></td><td>Specify a task name that activities have an "affinity" to.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_description android:description}</code></td><td>Descriptive text for the associated data.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_allowTaskReparenting android:allowTaskReparenting}</code></td><td>Specify that an activity can be moved out of a task it is in to
     * the task it has an affinity for when appropriate.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_testOnly android:testOnly}</code></td><td>Option to indicate this application is only for testing purposes.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_backupAgent android:backupAgent}</code></td><td>The name of the class subclassing <code>BackupAgent</code> to manage
     * backup and restore of the application's data on external storage.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_allowBackup android:allowBackup}</code></td><td>Whether to allow the application to participate in the backup
     * and restore infrastructure.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_killAfterRestore android:killAfterRestore}</code></td><td>Whether the application in question should be terminated after its
     * settings have been restored during a full-system restore operation.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_restoreNeedsApplication android:restoreNeedsApplication}</code></td><td>@deprecated This attribute is not used by the Android operating system.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_vmSafeMode android:vmSafeMode}</code></td><td>Flag indicating whether the application requests the VM to operate in
     * the safe mode.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_restoreAnyVersion android:restoreAnyVersion}</code></td><td>Indicate that the application is prepared to attempt a restore of any
     * backed-up dataset, even if the backup is apparently from a newer version
     * of the application than is currently installed on the device.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_logo android:logo}</code></td><td>A Drawable resource providing an extended graphical logo for its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_hardwareAccelerated android:hardwareAccelerated}</code></td><td><p>Flag indicating whether the application's rendering should be hardware
     * accelerated if possible.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_largeHeap android:largeHeap}</code></td><td>Request that your application's processes be created with
     * a large Dalvik heap.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_uiOptions android:uiOptions}</code></td><td>Extra options for an activity's UI.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_supportsRtl android:supportsRtl}</code></td><td>Declare that your application will be able to deal with RTL (right to left) layouts.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_requiredForAllUsers android:requiredForAllUsers}</code></td><td>Flag to specify if this application needs to be present for all users.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_restrictedAccountType android:restrictedAccountType}</code></td><td>Declare that this application requires access to restricted accounts of a certain
     * type.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_requiredAccountType android:requiredAccountType}</code></td><td>Declare that this application requires an account of a certain
     * type.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_banner android:banner}</code></td><td>A Drawable resource providing an extended graphical banner for its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_isGame android:isGame}</code></td><td>A boolean flag used to indicate if an application is a Game or not.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_fullBackupOnly android:fullBackupOnly}</code></td><td>Indicates that even though the application provides a <code>BackupAgent</code>,
     * only full-data streaming backup operations are to be performed to save the app's
     * data.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_multiArch android:multiArch}</code></td><td>Declare that code from this application will need to be loaded into other
     * applications' processes.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_extractNativeLibs android:extractNativeLibs}</code></td><td>When set installer will extract native libraries.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_fullBackupContent android:fullBackupContent}</code></td><td>Applications will set this in their manifest to opt-in to or out of full app data back-up
     * and restore.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_usesCleartextTraffic android:usesCleartextTraffic}</code></td><td>Declare that this application may use cleartext traffic, such as HTTP rather than HTTPS;
     * WebSockets rather than WebSockets Secure; XMPP, IMAP, STMP without STARTTLS or TLS.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_resizeableActivity android:resizeableActivity}</code></td><td>Hint to platform that the activity works well in multi-window mode.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_defaultToDeviceProtectedStorage android:defaultToDeviceProtectedStorage}</code></td><td></td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_directBootAware android:directBootAware}</code></td><td>Indicate if this component is aware of direct boot lifecycle, and can be
     * safely run before the user has entered their credentials (such as a lock
     * pattern or PIN).</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_backupInForeground android:backupInForeground}</code></td><td>Indicates that full-data backup operations for this application may
     * be performed even if the application is in a foreground-equivalent
     * state.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_networkSecurityConfig android:networkSecurityConfig}</code></td><td>An XML resource with the application's Network Security Config.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_roundIcon android:roundIcon}</code></td><td>A Drawable resource providing a graphical representation of its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_appCategory android:appCategory}</code></td><td>Declare the category of this app.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_maxAspectRatio android:maxAspectRatio}</code></td><td>This value indicates the maximum aspect ratio the activity supports.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_persistentWhenFeatureAvailable android:persistentWhenFeatureAvailable}</code></td><td>If set, the "persistent" attribute will only be honored if the feature
     * specified here is present on the device.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_classLoader android:classLoader}</code></td><td>The classname of the classloader used to load the application's classes
     * from its APK.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_cantSaveState android:cantSaveState}</code></td><td>Declare that this application can't participate in the normal
     * state save/restore mechanism.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_appComponentFactory android:appComponentFactory}</code></td><td>The (optional) fully-qualified name for a subclass of
     * {@link android.app.AppComponentFactory} that the system uses to instantiate
     * every other manifest defined class.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_usesNonSdkApi android:usesNonSdkApi}</code></td><td></td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_hasFragileUserData android:hasFragileUserData}</code></td><td>If {@code true} the user is prompted to keep the app's data on uninstall</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_minAspectRatio android:minAspectRatio}</code></td><td>This value indicates the minimum aspect ratio the activity supports.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_zygotePreloadName android:zygotePreloadName}</code></td><td>Name of the class that gets invoked for preloading application code, when starting an
     * {@link android.R.attr#isolatedProcess} service that has
     * {@link android.R.attr#useAppZygote} set to <code>true</code>.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_useEmbeddedDex android:useEmbeddedDex}</code></td><td>Flag to specify if this app wants to run the dex within its APK but not extracted or
     * locally compiled variants.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_allowClearUserDataOnFailedRestore android:allowClearUserDataOnFailedRestore}</code></td><td>If {@code true} the system will clear app's data if a restore operation fails.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_allowAudioPlaybackCapture android:allowAudioPlaybackCapture}</code></td><td>If {@code true} the app's non sensitive audio can be captured by other apps with
     * {@link android.media.AudioPlaybackCaptureConfiguration} and a
     * {@link android.media.projection.MediaProjection}.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_requestLegacyExternalStorage android:requestLegacyExternalStorage}</code></td><td>If {@code true} this app would like to run under the legacy storage
     * model.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_forceQueryable android:forceQueryable}</code></td><td></td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_crossProfile android:crossProfile}</code></td><td>If {@code true} indicates that this application is capable of presenting a unified
     * interface representing multiple profiles.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_allowNativeHeapPointerTagging android:allowNativeHeapPointerTagging}</code></td><td>If {@code true} this app will receive tagged pointers to native heap allocations
     * from functions like malloc() on compatible devices.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_autoRevokePermissions android:autoRevokePermissions}</code></td><td>No longer used.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_preserveLegacyExternalStorage android:preserveLegacyExternalStorage}</code></td><td>If {@code true} this app would like to preserve the legacy storage
     * model from a previously installed version.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_gwpAsanMode android:gwpAsanMode}</code></td><td>Enable sampled memory bug detection in this process.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_rollbackDataPolicy android:rollbackDataPolicy}</code></td><td>Declare the policy to deal with user data when rollback is committed.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_memtagMode android:memtagMode}</code></td><td>Enable hardware memory tagging (ARM MTE) in this process.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_nativeHeapZeroInitialized android:nativeHeapZeroInitialized}</code></td><td>If {@code true} enables automatic zero initialization of all native heap
     * allocations.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_dataExtractionRules android:dataExtractionRules}</code></td><td>Applications can set this attribute to an xml resource within their app where they
     * specified the rules determining which files and directories can be copied from the device
     * as part of backup or transfer operations.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_requestRawExternalStorageAccess android:requestRawExternalStorageAccess}</code></td><td>If {@code true} this app would like raw external storage access.</td></tr>
     * <tr><td><code>{@link #AndroidManifestApplication_attributionsAreUserVisible android:attributionsAreUserVisible}</code></td><td>Whether attributions provided are meant to be user-visible.</td></tr>
     * </table>
     * @see #AndroidManifestApplication_theme
     * @see #AndroidManifestApplication_label
     * @see #AndroidManifestApplication_icon
     * @see #AndroidManifestApplication_name
     * @see #AndroidManifestApplication_manageSpaceActivity
     * @see #AndroidManifestApplication_allowClearUserData
     * @see #AndroidManifestApplication_permission
     * @see #AndroidManifestApplication_hasCode
     * @see #AndroidManifestApplication_persistent
     * @see #AndroidManifestApplication_enabled
     * @see #AndroidManifestApplication_debuggable
     * @see #AndroidManifestApplication_process
     * @see #AndroidManifestApplication_taskAffinity
     * @see #AndroidManifestApplication_description
     * @see #AndroidManifestApplication_allowTaskReparenting
     * @see #AndroidManifestApplication_testOnly
     * @see #AndroidManifestApplication_backupAgent
     * @see #AndroidManifestApplication_allowBackup
     * @see #AndroidManifestApplication_killAfterRestore
     * @see #AndroidManifestApplication_restoreNeedsApplication
     * @see #AndroidManifestApplication_vmSafeMode
     * @see #AndroidManifestApplication_restoreAnyVersion
     * @see #AndroidManifestApplication_logo
     * @see #AndroidManifestApplication_hardwareAccelerated
     * @see #AndroidManifestApplication_largeHeap
     * @see #AndroidManifestApplication_uiOptions
     * @see #AndroidManifestApplication_supportsRtl
     * @see #AndroidManifestApplication_requiredForAllUsers
     * @see #AndroidManifestApplication_restrictedAccountType
     * @see #AndroidManifestApplication_requiredAccountType
     * @see #AndroidManifestApplication_banner
     * @see #AndroidManifestApplication_isGame
     * @see #AndroidManifestApplication_fullBackupOnly
     * @see #AndroidManifestApplication_multiArch
     * @see #AndroidManifestApplication_extractNativeLibs
     * @see #AndroidManifestApplication_fullBackupContent
     * @see #AndroidManifestApplication_usesCleartextTraffic
     * @see #AndroidManifestApplication_resizeableActivity
     * @see #AndroidManifestApplication_defaultToDeviceProtectedStorage
     * @see #AndroidManifestApplication_directBootAware
     * @see #AndroidManifestApplication_backupInForeground
     * @see #AndroidManifestApplication_networkSecurityConfig
     * @see #AndroidManifestApplication_roundIcon
     * @see #AndroidManifestApplication_appCategory
     * @see #AndroidManifestApplication_maxAspectRatio
     * @see #AndroidManifestApplication_persistentWhenFeatureAvailable
     * @see #AndroidManifestApplication_classLoader
     * @see #AndroidManifestApplication_cantSaveState
     * @see #AndroidManifestApplication_appComponentFactory
     * @see #AndroidManifestApplication_usesNonSdkApi
     * @see #AndroidManifestApplication_hasFragileUserData
     * @see #AndroidManifestApplication_minAspectRatio
     * @see #AndroidManifestApplication_zygotePreloadName
     * @see #AndroidManifestApplication_useEmbeddedDex
     * @see #AndroidManifestApplication_allowClearUserDataOnFailedRestore
     * @see #AndroidManifestApplication_allowAudioPlaybackCapture
     * @see #AndroidManifestApplication_requestLegacyExternalStorage
     * @see #AndroidManifestApplication_forceQueryable
     * @see #AndroidManifestApplication_crossProfile
     * @see #AndroidManifestApplication_allowNativeHeapPointerTagging
     * @see #AndroidManifestApplication_autoRevokePermissions
     * @see #AndroidManifestApplication_preserveLegacyExternalStorage
     * @see #AndroidManifestApplication_gwpAsanMode
     * @see #AndroidManifestApplication_rollbackDataPolicy
     * @see #AndroidManifestApplication_memtagMode
     * @see #AndroidManifestApplication_nativeHeapZeroInitialized
     * @see #AndroidManifestApplication_dataExtractionRules
     * @see #AndroidManifestApplication_requestRawExternalStorageAccess
     * @see #AndroidManifestApplication_attributionsAreUserVisible
     */
    @Deprecated
    public static final int[] AndroidManifestApplication={
      0x01010000, 0x01010001, 0x01010002, 0x01010003, 
      0x01010004, 0x01010005, 0x01010006, 0x0101000c, 
      0x0101000d, 0x0101000e, 0x0101000f, 0x01010011, 
      0x01010012, 0x01010020, 0x01010204, 0x01010272, 
      0x0101027f, 0x01010280, 0x0101029c, 0x0101029d, 
      0x010102b8, 0x010102ba, 0x010102be, 0x010102d3, 
      0x0101035a, 0x01010398, 0x010103af, 0x010103d0, 
      0x010103d5, 0x010103d6, 0x010103f2, 0x010103f4, 
      0x01010473, 0x0101048e, 0x010104ea, 0x010104eb, 
      0x010104ec, 0x010104f6, 0x01010504, 0x01010505, 
      0x0101051a, 0x01010527, 0x0101052c, 0x01010545, 
      0x01010560, 0x01010563, 0x0101056b, 0x0101056e, 
      0x0101057a, 0x0101058e, 0x0101059a, 0x0101059b, 
      0x0101059d, 0x0101059e, 0x01010600, 0x01010601, 
      0x01010603, 0x01010608, 0x0101060e, 0x01010612, 
      0x01010613, 0x01010614, 0x01010616, 0x01010617, 
      0x01010624, 0x01010625, 0x0101063e, 0x01010645, 
      0x0101064a, 0x0101064b, 0x0112000e
    };
    /**
     * <p>
     * @attr description
     * The overall theme to use for an activity.  Use with either the
     * application tag (to supply a default theme for all activities) or
     * the activity tag (to supply a specific theme for that activity).
     * <p>This automatically sets
     * your activity's Context to use this theme, and may also be used
     * for "starting" animations prior to the activity being launched (to
     * better match what the activity actually looks like).  It is a reference
     * to a style resource defining the theme.  If not set, the default
     * system theme will be used.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:theme
     */
    public static final int AndroidManifestApplication_theme=0;
    /**
     * <p>
     * @attr description
     * A user-legible name for the given item.  Use with the
     * application tag (to supply a default label for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific label for that component).  It may also be
     * used with the intent-filter tag to supply a label to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given label will be used wherever the user sees information
     * about its associated component; for example, as the name of a
     * main activity that is displayed in the launcher.  You should
     * generally set this to a reference to a string resource, so that
     * it can be localized, however it is also allowed to supply a plain
     * string for quick and dirty programming.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:label
     */
    public static final int AndroidManifestApplication_label=1;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing a graphical representation of its
     * associated item.  Use with the
     * application tag (to supply a default icon for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific icon for that component).  It may also be
     * used with the intent-filter tag to supply an icon to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given icon will be used to display to the user a graphical
     * representation of its associated component; for example, as the icon
     * for main activity that is displayed in the launcher.  This must be
     * a reference to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:icon
     */
    public static final int AndroidManifestApplication_icon=2;
    /**
     * <p>
     * @attr description
     * The (optional) fully-qualified name for a subclass of
     * {@link android.app.Application} that the system instantiates before
     * any other class when an app's process starts. Most applications
     * don't need this attribute. If it's not specified, the system
     * instantiates the base Application class instead.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AndroidManifestApplication_name=3;
    /**
     * <p>
     * @attr description
     * Name of activity to be launched for managing the application's space on the device.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:manageSpaceActivity
     */
    public static final int AndroidManifestApplication_manageSpaceActivity=4;
    /**
     * <p>
     * @attr description
     * Option to let applications specify that user data can/cannot be
     * cleared. This flag is turned on by default.
     * <p>Starting from API level 29 this flag only controls if the user can
     * clear app data from Settings. To control clearing the data after a
     * failed restore use allowClearUserDataOnFailedRestore flag.
     * <p><em>This attribute is usable only by applications
     * included in the system image. Third-party apps cannot use it.</em>
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:allowClearUserData
     */
    public static final int AndroidManifestApplication_allowClearUserData=5;
    /**
     * <p>
     * @attr description
     * Specify a permission that a client is required to have in order to
     * use the associated object.  If the client does not hold the named
     * permission, its request will fail.  See the
     * <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
     * document for more information on permissions.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:permission
     */
    public static final int AndroidManifestApplication_permission=6;
    /**
     * <p>
     * @attr description
     * Indicate whether this application contains code.  If set to false,
     * there is no code associated with it and thus the system will not
     * try to load its code when launching components.  The default is true
     * for normal behavior.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:hasCode
     */
    public static final int AndroidManifestApplication_hasCode=7;
    /**
     * <p>
     * @attr description
     * Flag to control special persistent mode of an application.  This should
     * not normally be used by applications; it requires that the system keep
     * your application running at all times.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:persistent
     */
    public static final int AndroidManifestApplication_persistent=8;
    /**
     * <p>
     * @attr description
     * Specify whether the components in this application are enabled or not (that is, can be
     * instantiated by the system).
     * If "false", it overrides any component specific values (a value of "true" will not
     * override the component specific values).
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:enabled
     */
    public static final int AndroidManifestApplication_enabled=9;
    /**
     * <p>
     * @attr description
     * Flag indicating whether the application can be debugged, even when
     * running on a device that is running in user mode.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:debuggable
     */
    public static final int AndroidManifestApplication_debuggable=10;
    /**
     * <p>
     * @attr description
     * Specify a specific process that the associated code is to run in.
     * Use with the application tag (to supply a default process for all
     * application components), or with the activity, receiver, service,
     * or provider tag (to supply a specific icon for that component).
     * <p>Application components are normally run in a single process that
     * is created for the entire application.  You can use this tag to modify
     * where they run.  If the process name begins with a ':' character,
     * a new process private to that application will be created when needed
     * to run that component (allowing you to spread your application across
     * multiple processes).  If the process name begins with a lower-case
     * character, the component will be run in a global process of that name,
     * provided that you have permission to do so, allowing multiple
     * applications to share one process to reduce resource usage.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:process
     */
    public static final int AndroidManifestApplication_process=11;
    /**
     * <p>
     * @attr description
     * Specify a task name that activities have an "affinity" to.
     * Use with the application tag (to supply a default affinity for all
     * activities in the application), or with the activity tag (to supply
     * a specific affinity for that component).
     * <p>The default value for this attribute is the same as the package
     * name, indicating that all activities in the manifest should generally
     * be considered a single "application" to the user.  You can use this
     * attribute to modify that behavior: either giving them an affinity
     * for another task, if the activities are intended to be part of that
     * task from the user's perspective, or using an empty string for
     * activities that have no affinity to a task.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:taskAffinity
     */
    public static final int AndroidManifestApplication_taskAffinity=12;
    /**
     * <p>
     * @attr description
     * Descriptive text for the associated data.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:description
     */
    public static final int AndroidManifestApplication_description=13;
    /**
     * <p>
     * @attr description
     * Specify that an activity can be moved out of a task it is in to
     * the task it has an affinity for when appropriate.  Use with the
     * application tag (to supply a default for all activities in the
     * application), or with an activity tag (to supply a specific
     * setting for that component).
     * <p>Normally when an application is started, it is associated with
     * the task of the activity that started it and stays there for its
     * entire lifetime.  You can use the allowTaskReparenting feature to force an
     * activity to be re-parented to a different task when the task it is
     * in goes to the background.  Typically this is used to cause the
     * activities of an application to move back to the main task associated
     * with that application.  The activity is re-parented to the task
     * with the same {@link android.R.attr#taskAffinity} as it has.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:allowTaskReparenting
     */
    public static final int AndroidManifestApplication_allowTaskReparenting=14;
    /**
     * <p>
     * @attr description
     * Option to indicate this application is only for testing purposes.
     * For example, it may expose functionality or data outside of itself
     * that would cause a security hole, but is useful for testing.  This
     * kind of application can not be installed without the
     * INSTALL_ALLOW_TEST flag, which means only through adb install.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:testOnly
     */
    public static final int AndroidManifestApplication_testOnly=15;
    /**
     * <p>
     * @attr description
     * The name of the class subclassing <code>BackupAgent</code> to manage
     * backup and restore of the application's data on external storage.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:backupAgent
     */
    public static final int AndroidManifestApplication_backupAgent=16;
    /**
     * <p>
     * @attr description
     * Whether to allow the application to participate in the backup
     * and restore infrastructure.  If this attribute is set to <code>false</code>,
     * no backup or restore of the application will ever be performed, even by a
     * full-system backup that would otherwise cause all application data to be saved
     * via adb.  The default value of this attribute is <code>true</code>.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:allowBackup
     */
    public static final int AndroidManifestApplication_allowBackup=17;
    /**
     * <p>
     * @attr description
     * Whether the application in question should be terminated after its
     * settings have been restored during a full-system restore operation.
     * Single-package restore operations will never cause the application to
     * be shut down.  Full-system restore operations typically only occur once,
     * when the phone is first set up.  Third-party applications will not usually
     * need to use this attribute.
     * <p>The default is <code>true</code>, which means that after the application
     * has finished processing its data during a full-system restore, it will be
     * terminated.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:killAfterRestore
     */
    public static final int AndroidManifestApplication_killAfterRestore=18;
    /**
     * <p>
     * @attr description
     * @deprecated This attribute is not used by the Android operating system.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:restoreNeedsApplication
     */
    @Deprecated
    public static final int AndroidManifestApplication_restoreNeedsApplication=19;
    /**
     * <p>
     * @attr description
     * Flag indicating whether the application requests the VM to operate in
     * the safe mode.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:vmSafeMode
     */
    public static final int AndroidManifestApplication_vmSafeMode=20;
    /**
     * <p>
     * @attr description
     * Indicate that the application is prepared to attempt a restore of any
     * backed-up dataset, even if the backup is apparently from a newer version
     * of the application than is currently installed on the device.  Setting
     * this attribute to <code>true</code> will permit the Backup Manager to
     * attempt restore even when a version mismatch suggests that the data are
     * incompatible.  <em>Use with caution!</em>
     * <p>The default value of this attribute is <code>false</code>.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:restoreAnyVersion
     */
    public static final int AndroidManifestApplication_restoreAnyVersion=21;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing an extended graphical logo for its
     * associated item. Use with the application tag (to supply a default
     * logo for all application components), or with the activity, receiver,
     * service, or instrumentation tag (to supply a specific logo for that
     * component). It may also be used with the intent-filter tag to supply
     * a logo to show to the user when an activity is being selected based
     * on a particular Intent.
     * <p>The given logo will be used to display to the user a graphical
     * representation of its associated component; for example as the
     * header in the Action Bar. The primary differences between an icon
     * and a logo are that logos are often wider and more detailed, and are
     * used without an accompanying text caption. This must be a reference
     * to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:logo
     */
    public static final int AndroidManifestApplication_logo=22;
    /**
     * <p>
     * @attr description
     * <p>Flag indicating whether the application's rendering should be hardware
     * accelerated if possible. This flag is turned on by default for applications
     * that are targeting {@link android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH}
     * or later.</p>
     * <p>This flag can be set on the application and any activity declared
     * in the manifest. When enabled for the application, each activity is
     * automatically assumed to be hardware accelerated. This flag can be
     * overridden in the activity tags, either turning it off (if on for the
     * application) or on (if off for the application.)</p>
     * <p>When this flag is turned on for an activity (either directly or via
     * the application tag), every window created from the activity, including
     * the activity's own window, will be hardware accelerated, if possible.</p>
     * <p>Please refer to the documentation of
     * {@link android.view.WindowManager.LayoutParams#FLAG_HARDWARE_ACCELERATED}
     * for more information on how to control this flag programmatically.</p>
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:hardwareAccelerated
     */
    public static final int AndroidManifestApplication_hardwareAccelerated=23;
    /**
     * <p>
     * @attr description
     * Request that your application's processes be created with
     * a large Dalvik heap.  This applies to <em>all</em> processes
     * created for the application.  It only applies to the first
     * application loaded into a process; if using a sharedUserId
     * to allow multiple applications to use a process, they all must
     * use this option consistently or will get unpredictable results.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:largeHeap
     */
    public static final int AndroidManifestApplication_largeHeap=24;
    /**
     * <p>
     * @attr description
     * Extra options for an activity's UI. Applies to either the {@code <activity>} or
     * {@code <application>} tag. If specified on the {@code <application>}
     * tag these will be considered defaults for all activities in the
     * application.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>none</td><td>0</td><td>No extra UI options. This is the default.</td></tr>
     * <tr><td>splitActionBarWhenNarrow</td><td>1</td><td>Split the options menu into a separate bar at the bottom of
     * the screen when severely constrained for horizontal space.
     * (e.g. portrait mode on a phone.) Instead of a small number
     * of action buttons appearing in the action bar at the top
     * of the screen, the action bar will split into the top navigation
     * section and the bottom menu section. Menu items will not be
     * split across the two bars; they will always appear together.</td></tr>
     * </table>
     *
     * @attr name android:uiOptions
     */
    public static final int AndroidManifestApplication_uiOptions=25;
    /**
     * <p>
     * @attr description
     * Declare that your application will be able to deal with RTL (right to left) layouts.
     * The default value is false.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:supportsRtl
     */
    public static final int AndroidManifestApplication_supportsRtl=26;
    /**
     * <p>
     * @attr description
     * Flag to specify if this application needs to be present for all users. Only pre-installed
     * applications can request this feature. Default value is false.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:requiredForAllUsers
     */
    public static final int AndroidManifestApplication_requiredForAllUsers=27;
    /**
     * <p>
     * @attr description
     * Declare that this application requires access to restricted accounts of a certain
     * type. The default value is null and restricted accounts won\'t be visible to this
     * application. The type should correspond to the account authenticator type, such as
     * "com.google".
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:restrictedAccountType
     */
    public static final int AndroidManifestApplication_restrictedAccountType=28;
    /**
     * <p>
     * @attr description
     * Declare that this application requires an account of a certain
     * type. The default value is null and indicates that the application can work without
     * any accounts. The type should correspond to the account authenticator type, such as
     * "com.google".
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:requiredAccountType
     */
    public static final int AndroidManifestApplication_requiredAccountType=29;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing an extended graphical banner for its
     * associated item. Use with the application tag (to supply a default
     * banner for all application activities), or with the activity, tag to
     * supply a banner for a specific activity.
     * <p>The given banner will be used to display to the user a graphical
     * representation of an activity in the Leanback application launcher.
     * Since banners are displayed only in the Leanback launcher, they should
     * only be used with activities (and applications) that support Leanback
     * mode. These are activities that handle Intents of category
     * {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
     * Intent.CATEGORY_LEANBACK_LAUNCHER}.
     * <p>This must be a reference to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:banner
     */
    public static final int AndroidManifestApplication_banner=30;
    /**
     * <p>
     * @attr description
     * @deprecated replaced by setting appCategory attribute to "game"
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:isGame
     */
    @Deprecated
    public static final int AndroidManifestApplication_isGame=31;
    /**
     * <p>
     * @attr description
     * Indicates that even though the application provides a <code>BackupAgent</code>,
     * only full-data streaming backup operations are to be performed to save the app's
     * data.  This lets the app rely on full-data backups while still participating in
     * the backup and restore process via the BackupAgent's full-data backup APIs.
     * When this attribute is <code>true</code> the app's BackupAgent overrides of
     * the onBackup() and onRestore() callbacks can be empty stubs.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:fullBackupOnly
     */
    public static final int AndroidManifestApplication_fullBackupOnly=32;
    /**
     * <p>
     * @attr description
     * Declare that code from this application will need to be loaded into other
     * applications' processes. On devices that support multiple instruction sets,
     * this implies the code might be loaded into a process that's using any of the devices
     * supported instruction sets.
     * <p> The system might treat such applications specially, for eg., by
     * extracting the application's native libraries for all supported instruction
     * sets or by compiling the application's dex code for all supported instruction
     * sets.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:multiArch
     */
    public static final int AndroidManifestApplication_multiArch=33;
    /**
     * <p>
     * @attr description
     * When set installer will extract native libraries. If set to false
     * libraries in the apk must be stored and page-aligned.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:extractNativeLibs
     */
    public static final int AndroidManifestApplication_extractNativeLibs=34;
    /**
     * <p>
     * @attr description
     * Applications will set this in their manifest to opt-in to or out of full app data back-up
     * and restore. Alternatively they can set it to an xml resource within their app that will
     * be parsed by the BackupAgent to selectively backup files indicated within that xml.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:fullBackupContent
     */
    public static final int AndroidManifestApplication_fullBackupContent=35;
    /**
     * <p>
     * @attr description
     * Declare that this application may use cleartext traffic, such as HTTP rather than
     * HTTPS; WebSockets rather than WebSockets Secure; XMPP, IMAP, STMP without STARTTLS or
     * TLS). Defaults to true. If set to false {@code false}, the application declares that it
     * does not intend to use cleartext network traffic, in which case platform components
     * (e.g. HTTP stacks, {@code DownloadManager}, {@code MediaPlayer}) will refuse
     * applications's requests to use cleartext traffic. Third-party libraries are encouraged
     * to honor this flag as well.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:usesCleartextTraffic
     */
    public static final int AndroidManifestApplication_usesCleartextTraffic=36;
    /**
     * <p>
     * @attr description
     * Hint to platform that the activity works well in multi-window mode. Intended for a
     * multi-window device where there can be multiple activities of various sizes on the screen
     * at the same time.
     * <p>The default value is <code>false</code> for applications with
     * <code>targetSdkVersion</code> lesser than {@link android.os.Build.VERSION_CODES#N} and
     * <code>true</code> otherwise.
     * <p>Setting this flag to <code>false</code> lets the system know that the app may not be
     * tested or optimized for multi-window environment. The system may still put such activity in
     * multi-window with compatibility mode applied. It also does not guarantee that there will be
     * no other apps in multi-window visible on screen (e.g. picture-in-picture) or on other
     * displays. Therefore, this flag cannot be used to assure an exclusive resource access.
     * <p>NOTE: A task's root activity value is applied to all additional activities launched in
     * the task. That is if the root activity of a task is resizeable then the system will treat
     * all other activities in the task as resizeable and will not if the root activity isn't
     * resizeable.
     * <p>NOTE: The value of {@link android.R.attr#screenOrientation} is ignored for
     * resizeable activities when in multi-window mode before Android 12.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:resizeableActivity
     */
    public static final int AndroidManifestApplication_resizeableActivity=37;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#defaultToDeviceProtectedStorage}
     * attribute's value can be found in the {@link #AndroidManifestApplication} array.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:defaultToDeviceProtectedStorage
     */
    public static final int AndroidManifestApplication_defaultToDeviceProtectedStorage=38;
    /**
     * <p>
     * @attr description
     * Indicate if this component is aware of direct boot lifecycle, and can be
     * safely run before the user has entered their credentials (such as a lock
     * pattern or PIN).
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:directBootAware
     */
    public static final int AndroidManifestApplication_directBootAware=39;
    /**
     * <p>
     * @attr description
     * Indicates that full-data backup operations for this application may
     * be performed even if the application is in a foreground-equivalent
     * state.  <em>Use with caution!</em>  Setting this flag to <code>true</code>
     * can impact app behavior while the user is interacting with the device.
     * <p>If unspecified, the default value of this attribute is <code>false</code>,
     * which means that the OS will avoid backing up the application while it is
     * running in the foreground (such as a music app that is actively playing
     * music via a service in the startForeground() state).
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:backupInForeground
     */
    public static final int AndroidManifestApplication_backupInForeground=40;
    /**
     * <p>
     * @attr description
     * An XML resource with the application's Network Security Config.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:networkSecurityConfig
     */
    public static final int AndroidManifestApplication_networkSecurityConfig=41;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing a graphical representation of its
     * associated item.  Use with the
     * application tag (to supply a default round icon for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific round icon for that component).  It may also be
     * used with the intent-filter tag to supply a round icon to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given round icon will be used to display to the user a graphical
     * representation of its associated component; for example, as the round icon
     * for main activity that is displayed in the launcher.  This must be
     * a reference to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:roundIcon
     */
    public static final int AndroidManifestApplication_roundIcon=42;
    /**
     * <p>
     * @attr description
     * Declare the category of this app. Categories are used to cluster multiple apps
     * together into meaningful groups, such as when summarizing battery, network, or
     * disk usage. Apps should only define this value when they fit well into one of
     * the specific categories.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>accessibility</td><td>8</td><td>Apps which are primarily accessibility apps, such as screen-readers.</td></tr>
     * <tr><td>audio</td><td>1</td><td>Apps which primarily work with audio or music, such as music players.</td></tr>
     * <tr><td>game</td><td>0</td><td>Apps which are primarily games.</td></tr>
     * <tr><td>image</td><td>3</td><td>Apps which primarily work with images or photos, such as camera or gallery apps.</td></tr>
     * <tr><td>maps</td><td>6</td><td>Apps which are primarily maps apps, such as navigation apps.</td></tr>
     * <tr><td>news</td><td>5</td><td>Apps which are primarily news apps, such as newspapers, magazines, or sports apps.</td></tr>
     * <tr><td>productivity</td><td>7</td><td>Apps which are primarily productivity apps, such as cloud storage or workplace apps.</td></tr>
     * <tr><td>social</td><td>4</td><td>Apps which are primarily social apps, such as messaging, communication, email, or social network apps.</td></tr>
     * <tr><td>video</td><td>2</td><td>Apps which primarily work with video or movies, such as streaming video apps.</td></tr>
     * </table>
     *
     * @attr name android:appCategory
     */
    public static final int AndroidManifestApplication_appCategory=43;
    /**
     * <p>
     * @attr description
     * This value indicates the maximum aspect ratio the activity supports. If the app runs on a
     * device with a wider aspect ratio, the system automatically letterboxes the app, leaving
     * portions of the screen unused so the app can run at its specified maximum aspect ratio.
     * <p>
     * Maximum aspect ratio, expressed as (longer dimension / shorter dimension) in decimal
     * form. For example, if the maximum aspect ratio is 7:3, set value to 2.33.
     * <p>
     * Value needs to be greater or equal to 1.0, otherwise it is ignored.
     * <p>
     * NOTE: This attribute is ignored if the activity has
     * {@link android.R.attr#resizeableActivity} set to true.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:maxAspectRatio
     */
    public static final int AndroidManifestApplication_maxAspectRatio=44;
    /**
     * <p>
     * @attr description
     * If set, the "persistent" attribute will only be honored if the feature
     * specified here is present on the device.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:persistentWhenFeatureAvailable
     */
    public static final int AndroidManifestApplication_persistentWhenFeatureAvailable=45;
    /**
     * <p>
     * @attr description
     * Declares the kind of classloader this application's classes must be loaded with
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:classLoader
     */
    public static final int AndroidManifestApplication_classLoader=46;
    /**
     * <p>
     * @attr description
     * Declare that this application can't participate in the normal
     * state save/restore mechanism.  Since it is not able to save and
     * restore its state on demand,
     * it can not participate in the normal activity lifecycle.  It will
     * not be killed while in the background; the user must explicitly
     * quit it.  Only one such app can be running at a time; if the user
     * tries to launch a second such app, they will be prompted
     * to quit the first before doing so.  While the
     * application is running, the user will be informed of this.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:cantSaveState
     */
    public static final int AndroidManifestApplication_cantSaveState=47;
    /**
     * <p>
     * @attr description
     * The (optional) fully-qualified name for a subclass of
     * {@link android.app.AppComponentFactory} that the system uses to instantiate
     * every other manifest defined class. Most applications
     * don't need this attribute. If it's not specified, the system
     * instantiates items without it.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:appComponentFactory
     */
    public static final int AndroidManifestApplication_appComponentFactory=48;
    /**
     * <p>
     * @attr description
     * Declares that this application should be invoked without non-SDK API enforcement
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:usesNonSdkApi
     */
    public static final int AndroidManifestApplication_usesNonSdkApi=49;
    /**
     * <p>
     * @attr description
     * If {@code true} the user is prompted to keep the app's data on uninstall
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:hasFragileUserData
     */
    public static final int AndroidManifestApplication_hasFragileUserData=50;
    /**
     * <p>
     * @attr description
     * This value indicates the minimum aspect ratio the activity supports. If the app runs on a
     * device with a narrower aspect ratio, the system automatically letterboxes the app, leaving
     * portions of the screen unused so the app can run at its specified minimum aspect ratio.
     * <p>
     * Minimum aspect ratio, expressed as (longer dimension / shorter dimension) in decimal
     * form. For example, if the minimum aspect ratio is 4:3, set value to 1.33.
     * <p>
     * Value needs to be greater or equal to 1.0, otherwise it is ignored.
     * <p>
     * NOTE: This attribute is ignored if the activity has
     * {@link android.R.attr#resizeableActivity} set to true.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:minAspectRatio
     */
    public static final int AndroidManifestApplication_minAspectRatio=51;
    /**
     * <p>
     * @attr description
     * Name of the class that gets invoked for preloading application code, when starting an
     * {@link android.R.attr#isolatedProcess} service that has
     * {@link android.R.attr#useAppZygote} set to <code>true</code>. This is a fully
     * qualified class name (for example, com.mycompany.myapp.MyZygotePreload); as a
     * short-hand if the first character of the class is a period then it is appended
     * to your package name. The class must implement the {@link android.app.ZygotePreload}
     * interface.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:zygotePreloadName
     */
    public static final int AndroidManifestApplication_zygotePreloadName=52;
    /**
     * <p>
     * @attr description
     * Flag to specify if this app wants to run the dex within its APK but not extracted or
     * locally compiled variants. This keeps the dex code protected by the APK signature. Such
     * apps will always run in JIT mode (same when they are first installed), and the system will
     * never generate ahead-of-time compiled code for them. Depending on the app's workload,
     * there may be some run time performance change, noteably the cold start time.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:useEmbeddedDex
     */
    public static final int AndroidManifestApplication_useEmbeddedDex=53;
    /**
     * <p>
     * @attr description
     * If {@code true} the system will clear app's data if a restore operation fails.
     * This flag is turned on by default. <em>This attribute is usable only by system apps.
     * </em>
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:allowClearUserDataOnFailedRestore
     */
    public static final int AndroidManifestApplication_allowClearUserDataOnFailedRestore=54;
    /**
     * <p>
     * @attr description
     * If {@code true} the app's non sensitive audio can be captured by other apps with
     * {@link android.media.AudioPlaybackCaptureConfiguration} and a
     * {@link android.media.projection.MediaProjection}.
     * If {@code false} the audio played by the application will never be captured by non
     * system apps. It is equivalent to limiting
     * {@link android.media.AudioManager#setAllowedCapturePolicy(int)} to
     * {@link android.media.AudioAttributes#ALLOW_CAPTURE_BY_SYSTEM}.
     * <p>
     * Non sensitive audio is defined as audio whose {@code AttributeUsage} is
     * {@code USAGE_UNKNOWN}), {@code USAGE_MEDIA}) or {@code USAGE_GAME}).
     * All other usages like {@code USAGE_VOICE_COMMUNICATION} will not be captured.
     * <p>
     * The default value is:
     * - {@code true} for apps with targetSdkVersion >= 29 (Q).
     * - {@code false} for apps with targetSdkVersion < 29.
     * <p>
     * See {@link android.media.AudioPlaybackCaptureConfiguration} for more detail.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:allowAudioPlaybackCapture
     */
    public static final int AndroidManifestApplication_allowAudioPlaybackCapture=55;
    /**
     * <p>
     * @attr description
     * If {@code true} this app would like to run under the legacy storage
     * model. Note that this may not always be respected due to policy or
     * backwards compatibility reasons.
     * <p>Apps not requesting legacy storage can continue to discover and
     * read media belonging to other apps via {@code MediaStore}.
     * <p>
     * The default value is:
     * - {@code false} for apps with targetSdkVersion >= 29 (Q).
     * - {@code true} for apps with targetSdkVersion < 29.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:requestLegacyExternalStorage
     */
    public static final int AndroidManifestApplication_requestLegacyExternalStorage=56;
    /**
     * <p>
     * @attr description
     * If {@code true} this app declares that it should be visible to all other apps on
     * device, regardless of what they declare via the {@code queries} tags in their
     * manifest.
     * The default value is {@code false}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:forceQueryable
     */
    public static final int AndroidManifestApplication_forceQueryable=57;
    /**
     * <p>
     * @attr description
     * If {@code true} indicates that this application is capable of presenting a unified
     * interface representing multiple profiles.
     * The default value is {@code false}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:crossProfile
     */
    public static final int AndroidManifestApplication_crossProfile=58;
    /**
     * <p>
     * @attr description
     * If {@code true} this app will receive tagged pointers to native heap allocations
     * from functions like malloc() on compatible devices. Note that this may not always
     * be respected due to policy or backwards compatibility reasons. See the
     * <a href="https://source.android.com/devices/tech/debug/tagged-pointers">Tagged Pointers</a>
     * document for more information on this feature.
     * The default value is {@code true}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:allowNativeHeapPointerTagging
     */
    public static final int AndroidManifestApplication_allowNativeHeapPointerTagging=59;
    /**
     * <p>
     * @attr description
     * No longer used. Declaring this does nothing
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>allowed</td><td>0</td><td>No longer used</td></tr>
     * <tr><td>disallowed</td><td>2</td><td>No longer used</td></tr>
     * <tr><td>discouraged</td><td>1</td><td>No longer used</td></tr>
     * </table>
     *
     * @attr name android:autoRevokePermissions
     */
    public static final int AndroidManifestApplication_autoRevokePermissions=60;
    /**
     * <p>
     * @attr description
     * If {@code true} this app would like to preserve the legacy storage
     * model from a previously installed version. Note that this may not always be
     * respected due to policy or backwards compatibility reasons.
     * <p>This has no effect on the first install of an app on a device.
     * For an updating app, setting this to {@code true} will preserve the legacy behaviour
     * configured by the {@code requestLegacyExternalStorage} flag. If on an update, this
     * flag is set to {@code false} then the legacy access is not preserved, such an app can
     * only have legacy access with the {@code requestLegacyExternalStorage} flag.
     * <p>
     * The default value is {@code false}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:preserveLegacyExternalStorage
     */
    public static final int AndroidManifestApplication_preserveLegacyExternalStorage=61;
    /**
     * <p>
     * @attr description
     * Enable sampled memory bug detection in this process.
     * When enabled, a very small, random subset of native
     * memory allocations are protected with guard pages, providing an
     * ASan-like error report in case of a memory corruption bug.
     * GWP-ASan is a recursive acronym. It stands for “GWP-ASan Will Provide Allocation SANity”.
     * See the <a href="http://llvm.org/docs/GwpAsan.html">LLVM documentation</a>
     * for more information about this feature.
     * <p>This attribute can be applied to a
     * {@link android.R.styleable#AndroidManifestProcess process} tag, or to an
     * {@link android.R.styleable#AndroidManifestApplication application} tag (to supply
     * a default setting for all application components).
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>always</td><td>1</td><td>Always enable GwpAsan.</td></tr>
     * <tr><td>default</td><td>ffffffff</td><td>Default behavior: GwpAsan is disabled in user apps, randomly enabled in system apps.</td></tr>
     * <tr><td>never</td><td>0</td><td>Never enable GwpAsan.</td></tr>
     * </table>
     *
     * @attr name android:gwpAsanMode
     */
    public static final int AndroidManifestApplication_gwpAsanMode=62;
    /**
     * <p>
     * @attr description
     * Declare the policy to deal with user data when rollback is committed.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>restore</td><td>0</td><td>User data will be restored during rollback.</td></tr>
     * <tr><td>retain</td><td>2</td><td>User data will remain unchanged during rollback.</td></tr>
     * <tr><td>wipe</td><td>1</td><td>User data will be wiped out during rollback.</td></tr>
     * </table>
     *
     * @attr name android:rollbackDataPolicy
     */
    public static final int AndroidManifestApplication_rollbackDataPolicy=63;
    /**
     * <p>
     * @attr description
     * Enable hardware memory tagging (ARM MTE) in this process.
     * When enabled, heap memory bugs like use-after-free and buffer overlow
     * are detected and result in an immediate ("sync" mode) or delayed ("async"
     * mode) crash instead of a silent memory corruption. Sync mode, while slower,
     * provides enhanced bug reports including stack traces at the time of allocation
     * and deallocation of memory, similar to AddressSanitizer.
     * See the <a href="https://community.arm.com/developer/ip-products/processors/b/processors-ip-blog/posts/enhancing-memory-safety">ARM announcement</a>
     * for more details.
     * <p>This attribute can be applied to a
     * {@link android.R.styleable#AndroidManifestProcess process} tag, or to an
     * {@link android.R.styleable#AndroidManifestApplication application} tag (to supply
     * a default setting for all application components).
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>async</td><td>1</td><td></td></tr>
     * <tr><td>default</td><td>ffffffff</td><td></td></tr>
     * <tr><td>off</td><td>0</td><td></td></tr>
     * <tr><td>sync</td><td>2</td><td></td></tr>
     * </table>
     *
     * @attr name android:memtagMode
     */
    public static final int AndroidManifestApplication_memtagMode=64;
    /**
     * <p>
     * @attr description
     * If {@code true} enables automatic zero initialization of all native heap
     * allocations.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:nativeHeapZeroInitialized
     */
    public static final int AndroidManifestApplication_nativeHeapZeroInitialized=65;
    /**
     * <p>
     * @attr description
     * Applications can set this attribute to an xml resource within their app where they
     * specified the rules determining which files and directories can be copied from the device
     * as part of backup or transfer operations.
     * See the <a href="{@docRoot}about/versions/12/backup-restore">Changes in backup and restore</a>
     * document for the format of the XML file.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:dataExtractionRules
     */
    public static final int AndroidManifestApplication_dataExtractionRules=66;
    /**
     * <p>
     * @attr description
     * If {@code true} this app would like raw external storage access.
     * <p> This flag can only be used by apps holding
     * <ul>
     * <li>{@link android.Manifest.permission#MANAGE_EXTERNAL_STORAGE} permission or
     * <li>{@link android.app.role}#SYSTEM_GALLERY role.
     * </ul>
     * <p> When the flag is set, all file path access on external storage will bypass database
     * operations that update MediaStore collection. Raw external storage access as a side effect
     * can improve performance of bulk file path operations but can cause unexpected behavior in
     * apps due to inconsistencies in MediaStore collection and lower file system.
     * When the flag is set, app should scan the file after file path operations to ensure
     * consistency of MediaStore collection.
     * <p> The flag can be set to false if the app doesn't do many bulk file path operations or if
     * app prefers the system to ensure the consistency of the MediaStore collection for file path
     * operations without scanning the file.
     * <p> The default value is {@code true} if
     * <ul>
     * <li>app has {@link android.Manifest.permission#MANAGE_EXTERNAL_STORAGE} permission and
     * targets targetSDK<=30.
     * <li>app has {@link android.app.role}#SYSTEM_GALLERY role and targetSDK<=29
     * </ul>
     * {@code false} otherwise.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:requestRawExternalStorageAccess
     */
    public static final int AndroidManifestApplication_requestRawExternalStorageAccess=67;
    /**
     * <p>
     * @attr description
     * @hide Request exemption from the foreground service restrictions introduced in S
     * (https://developer.android.com/about/versions/12/foreground-services)
     * Note the framework <b>ignores</b> this attribute at this time. Once apps target S or above,
     * there's no way to be exempted (without using a privileged permission).
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:requestForegroundServiceExemption
     */
    public static final int AndroidManifestApplication_requestForegroundServiceExemption=68;
    /**
     * <p>
     * @attr description
     * Whether attributions provided are meant to be user-visible.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:attributionsAreUserVisible
     */
    public static final int AndroidManifestApplication_attributionsAreUserVisible=69;
    /**
     * An attribution is a logical part of an app and is identified by a tag.
     * E.g. a photo sharing app might include a direct messaging component. To tag certain code as
     * belonging to an attribution, use a context created via
     * {@link android.content.Context#createAttributionContext(String)} for any interaction with the
     * system.
     * <p>This appears as a child tag of the root {@link #AndroidManifest manifest} tag.
     * <p>In case this attribution inherits from another attribution, this tag can contain one or
     * multiple {@link #AndroidManifestAttributionInheritFrom inherit-from} tags.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestAttribution_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestAttribution_tag android:tag}</code></td><td>Supply a tag for this view containing a String, to be retrieved
     * later with {@link android.view.View#getTag View.getTag()} or
     * searched for with {@link android.view.View#findViewWithTag
     * View.findViewWithTag()}.</td></tr>
     * </table>
     * @see #AndroidManifestAttribution_label
     * @see #AndroidManifestAttribution_tag
     */
    public static final int[] AndroidManifestAttribution={
      0x01010001, 0x010100d1
    };
    /**
     * <p>
     * @attr description
     * Required user visible label for a attribution.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:label
     */
    public static final int AndroidManifestAttribution_label=0;
    /**
     * <p>
     * @attr description
     * Required identifier for a attribution. Can be passed to
     * {@link android.content.Context#createAttributionContext} to create a context tagged with
     * this attribution
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:tag
     */
    public static final int AndroidManifestAttribution_tag=1;
    /**
     * Declares previously declared attributions this attribution inherits from.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestAttributionInheritFrom_tag android:tag}</code></td><td>Supply a tag for this view containing a String, to be retrieved
     * later with {@link android.view.View#getTag View.getTag()} or
     * searched for with {@link android.view.View#findViewWithTag
     * View.findViewWithTag()}.</td></tr>
     * </table>
     * @see #AndroidManifestAttributionInheritFrom_tag
     */
    public static final int[] AndroidManifestAttributionInheritFrom={
      0x010100d1
    };
    /**
     * <p>
     * @attr description
     * Identifier of the attribution this attribution inherits from
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:tag
     */
    public static final int AndroidManifestAttributionInheritFrom_tag=0;
    /**
     * Attributes that can be supplied in an AndroidManifest.xml
     * <code>category</code> tag, a child of the
     * {@link #AndroidManifestIntentFilter intent-filter} tag.
     * See {@link android.content.IntentFilter#addCategory} for
     * more information.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestCategory_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * </table>
     * @see #AndroidManifestCategory_name
     */
    public static final int[] AndroidManifestCategory={
      0x01010003
    };
    /**
     * <p>
     * @attr description
     * The name of category that is handled, using the Java-style
     * naming convention.  For example, to support
     * {@link android.content.Intent#CATEGORY_LAUNCHER Intent.CATEGORY_LAUNCHER}
     * you would put <code>android.intent.category.LAUNCHER</code> here.
     * Custom actions should generally use a prefix matching the
     * package name.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AndroidManifestCategory_name=0;
    /**
     * Attributes that can be supplied in an AndroidManifest.xml
     * <code>screen</code> tag, a child of <code>compatible-screens</code>,
     * which is itself a child of the root
     * {@link #AndroidManifest manifest} tag.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestCompatibleScreensScreen_screenSize android:screenSize}</code></td><td>Specifies a compatible screen size, as per the device
     * configuration screen size bins.</td></tr>
     * <tr><td><code>{@link #AndroidManifestCompatibleScreensScreen_screenDensity android:screenDensity}</code></td><td>Specifies a compatible screen density, as per the device
     * configuration screen density bins.</td></tr>
     * </table>
     * @see #AndroidManifestCompatibleScreensScreen_screenSize
     * @see #AndroidManifestCompatibleScreensScreen_screenDensity
     */
    public static final int[] AndroidManifestCompatibleScreensScreen={
      0x010102ca, 0x010102cb
    };
    /**
     * <p>
     * @attr description
     * Specifies a compatible screen size, as per the device
     * configuration screen size bins.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>large</td><td>190</td><td>A large screen configuration, at least 400x530dp.</td></tr>
     * <tr><td>normal</td><td>12c</td><td>A normal screen configuration, at least 320x480dp.</td></tr>
     * <tr><td>small</td><td>c8</td><td>A small screen configuration, at least 240x320dp.</td></tr>
     * <tr><td>xlarge</td><td>1f4</td><td>An extra large screen configuration, at least 600x800dp.</td></tr>
     * </table>
     *
     * @attr name android:screenSize
     */
    public static final int AndroidManifestCompatibleScreensScreen_screenSize=0;
    /**
     * <p>
     * @attr description
     * Specifies a compatible screen density, as per the device
     * configuration screen density bins.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>hdpi</td><td>f0</td><td>A high density screen, approximately 240dpi.</td></tr>
     * <tr><td>ldpi</td><td>78</td><td>A low density screen, approximately 120dpi.</td></tr>
     * <tr><td>mdpi</td><td>a0</td><td>A medium density screen, approximately 160dpi.</td></tr>
     * <tr><td>xhdpi</td><td>140</td><td>An extra high density screen, approximately 320dpi.</td></tr>
     * <tr><td>xxhdpi</td><td>1e0</td><td>An extra extra high density screen, approximately 480dpi.</td></tr>
     * <tr><td>xxxhdpi</td><td>280</td><td>An extra extra extra high density screen, approximately 640dpi.</td></tr>
     * </table>
     *
     * @attr name android:screenDensity
     */
    public static final int AndroidManifestCompatibleScreensScreen_screenDensity=1;
    /**
     * Attributes that can be supplied in an AndroidManifest.xml
     * <code>data</code> tag, a child of the
     * {@link #AndroidManifestIntentFilter intent-filter} tag, describing
     * the types of data that match.  This tag can be specified multiple
     * times to supply multiple data options, as described in the
     * {@link android.content.IntentFilter} class.  Note that all such
     * tags are adding options to the same IntentFilter so that, for example,
     * <code>&lt;data android:scheme="myscheme" android:host="me.com" /&gt;</code>
     * is equivalent to <code>&lt;data android:scheme="myscheme" /&gt;
     * &lt;data android:host="me.com" /&gt;</code>.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestData_mimeType android:mimeType}</code></td><td>Specify a MIME type that is handled, as per
     * {@link android.content.IntentFilter#addDataType
     * IntentFilter.addDataType()}.</td></tr>
     * <tr><td><code>{@link #AndroidManifestData_scheme android:scheme}</code></td><td>Specify a URI scheme that is handled, as per
     * {@link android.content.IntentFilter#addDataScheme
     * IntentFilter.addDataScheme()}.</td></tr>
     * <tr><td><code>{@link #AndroidManifestData_host android:host}</code></td><td>Specify a URI authority host that is handled, as per
     * {@link android.content.IntentFilter#addDataAuthority
     * IntentFilter.addDataAuthority()}.</td></tr>
     * <tr><td><code>{@link #AndroidManifestData_port android:port}</code></td><td>Specify a URI authority port that is handled, as per
     * {@link android.content.IntentFilter#addDataAuthority
     * IntentFilter.addDataAuthority()}.</td></tr>
     * <tr><td><code>{@link #AndroidManifestData_path android:path}</code></td><td>Specify a URI path that must exactly match, as per
     * {@link android.os.PatternMatcher} with
     * {@link android.os.PatternMatcher#PATTERN_LITERAL}.</td></tr>
     * <tr><td><code>{@link #AndroidManifestData_pathPrefix android:pathPrefix}</code></td><td>Specify a URI path that must be a prefix to match, as per
     * {@link android.os.PatternMatcher} with
     * {@link android.os.PatternMatcher#PATTERN_PREFIX}.</td></tr>
     * <tr><td><code>{@link #AndroidManifestData_pathPattern android:pathPattern}</code></td><td>Specify a URI path that matches a simple pattern, as per
     * {@link android.os.PatternMatcher} with
     * {@link android.os.PatternMatcher#PATTERN_SIMPLE_GLOB}.</td></tr>
     * <tr><td><code>{@link #AndroidManifestData_ssp android:ssp}</code></td><td>Specify a URI scheme specific part that must exactly match, as per
     * {@link android.content.IntentFilter#addDataSchemeSpecificPart
     * IntentFilter.addDataSchemeSpecificPart()} with
     * {@link android.os.PatternMatcher#PATTERN_LITERAL}.</td></tr>
     * <tr><td><code>{@link #AndroidManifestData_sspPrefix android:sspPrefix}</code></td><td>Specify a URI scheme specific part that must be a prefix to match, as per
     * {@link android.content.IntentFilter#addDataSchemeSpecificPart
     * IntentFilter.addDataSchemeSpecificPart()} with
     * {@link android.os.PatternMatcher#PATTERN_PREFIX}.</td></tr>
     * <tr><td><code>{@link #AndroidManifestData_sspPattern android:sspPattern}</code></td><td>Specify a URI scheme specific part that matches a simple pattern, as per
     * {@link android.content.IntentFilter#addDataSchemeSpecificPart
     * IntentFilter.addDataSchemeSpecificPart()} with
     * {@link android.os.PatternMatcher#PATTERN_SIMPLE_GLOB}.</td></tr>
     * <tr><td><code>{@link #AndroidManifestData_mimeGroup android:mimeGroup}</code></td><td>Specify a group of MIME types that are handled.</td></tr>
     * <tr><td><code>{@link #AndroidManifestData_pathSuffix android:pathSuffix}</code></td><td>Specify a URI path that must be a suffix to match, as per
     * {@link android.os.PatternMatcher} with
     * {@link android.os.PatternMatcher#PATTERN_SUFFIX}.</td></tr>
     * <tr><td><code>{@link #AndroidManifestData_sspSuffix android:sspSuffix}</code></td><td>Specify a URI scheme specific part that must be a suffix to match, as per
     * {@link android.content.IntentFilter#addDataSchemeSpecificPart
     * IntentFilter.addDataSchemeSpecificPart()} with
     * {@link android.os.PatternMatcher#PATTERN_SUFFIX}.</td></tr>
     * <tr><td><code>{@link #AndroidManifestData_pathAdvancedPattern android:pathAdvancedPattern}</code></td><td></td></tr>
     * <tr><td><code>{@link #AndroidManifestData_sspAdvancedPattern android:sspAdvancedPattern}</code></td><td>Specify a URI scheme specific part that matches an advanced pattern, as per
     * {@link android.content.IntentFilter#addDataSchemeSpecificPart
     * IntentFilter.addDataSchemeSpecificPart()} with
     * {@link android.os.PatternMatcher#PATTERN_ADVANCED_GLOB}.</td></tr>
     * </table>
     * @see #AndroidManifestData_mimeType
     * @see #AndroidManifestData_scheme
     * @see #AndroidManifestData_host
     * @see #AndroidManifestData_port
     * @see #AndroidManifestData_path
     * @see #AndroidManifestData_pathPrefix
     * @see #AndroidManifestData_pathPattern
     * @see #AndroidManifestData_ssp
     * @see #AndroidManifestData_sspPrefix
     * @see #AndroidManifestData_sspPattern
     * @see #AndroidManifestData_mimeGroup
     * @see #AndroidManifestData_pathSuffix
     * @see #AndroidManifestData_sspSuffix
     * @see #AndroidManifestData_pathAdvancedPattern
     * @see #AndroidManifestData_sspAdvancedPattern
     */
    public static final int[] AndroidManifestData={
      0x01010026, 0x01010027, 0x01010028, 0x01010029, 
      0x0101002a, 0x0101002b, 0x0101002c, 0x010103e3, 
      0x010103e4, 0x010103e5, 0x01010615, 0x0101061e, 
      0x0101061f, 0x01010620, 0x01010621
    };
    /**
     * <p>
     * @attr description
     * Specify a MIME type that is handled, as per
     * {@link android.content.IntentFilter#addDataType
     * IntentFilter.addDataType()}.
     * <p><em>Note: MIME type matching in the Android framework is
     * case-sensitive, unlike formal RFC MIME types.  As a result,
     * MIME types here should always use lower case letters.</em></p>
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:mimeType
     */
    public static final int AndroidManifestData_mimeType=0;
    /**
     * <p>
     * @attr description
     * Specify a URI scheme that is handled, as per
     * {@link android.content.IntentFilter#addDataScheme
     * IntentFilter.addDataScheme()}.
     * <p><em>Note: scheme matching in the Android framework is
     * case-sensitive, unlike the formal RFC.  As a result,
     * schemes here should always use lower case letters.</em></p>
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:scheme
     */
    public static final int AndroidManifestData_scheme=1;
    /**
     * <p>
     * @attr description
     * Specify a URI authority host that is handled, as per
     * {@link android.content.IntentFilter#addDataAuthority
     * IntentFilter.addDataAuthority()}.
     * <p><em>Note: host name matching in the Android framework is
     * case-sensitive, unlike the formal RFC.  As a result,
     * host names here should always use lower case letters.</em></p>
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:host
     */
    public static final int AndroidManifestData_host=2;
    /**
     * <p>
     * @attr description
     * Specify a URI authority port that is handled, as per
     * {@link android.content.IntentFilter#addDataAuthority
     * IntentFilter.addDataAuthority()}.  If a host is supplied
     * but not a port, any port is matched.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:port
     */
    public static final int AndroidManifestData_port=3;
    /**
     * <p>
     * @attr description
     * Specify a URI path that must exactly match, as per
     * {@link android.content.IntentFilter#addDataPath
     * IntentFilter.addDataPath()} with
     * {@link android.os.PatternMatcher#PATTERN_LITERAL}.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:path
     */
    public static final int AndroidManifestData_path=4;
    /**
     * <p>
     * @attr description
     * Specify a URI path that must be a prefix to match, as per
     * {@link android.content.IntentFilter#addDataPath
     * IntentFilter.addDataPath()} with
     * {@link android.os.PatternMatcher#PATTERN_PREFIX}.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:pathPrefix
     */
    public static final int AndroidManifestData_pathPrefix=5;
    /**
     * <p>
     * @attr description
     * Specify a URI path that matches a simple pattern, as per
     * {@link android.content.IntentFilter#addDataPath
     * IntentFilter.addDataPath()} with
     * {@link android.os.PatternMatcher#PATTERN_SIMPLE_GLOB}.
     * Note that because '\' is used as an escape character when
     * reading the string from XML (before it is parsed as a pattern),
     * you will need to double-escape: for example a literal "*" would
     * be written as "\\*" and a literal "\" would be written as
     * "\\\\".  This is basically the same as what you would need to
     * write if constructing the string in Java code.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:pathPattern
     */
    public static final int AndroidManifestData_pathPattern=6;
    /**
     * <p>
     * @attr description
     * Specify a URI scheme specific part that must exactly match, as per
     * {@link android.content.IntentFilter#addDataSchemeSpecificPart
     * IntentFilter.addDataSchemeSpecificPart()} with
     * {@link android.os.PatternMatcher#PATTERN_LITERAL}.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:ssp
     */
    public static final int AndroidManifestData_ssp=7;
    /**
     * <p>
     * @attr description
     * Specify a URI scheme specific part that must be a prefix to match, as per
     * {@link android.content.IntentFilter#addDataSchemeSpecificPart
     * IntentFilter.addDataSchemeSpecificPart()} with
     * {@link android.os.PatternMatcher#PATTERN_PREFIX}.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:sspPrefix
     */
    public static final int AndroidManifestData_sspPrefix=8;
    /**
     * <p>
     * @attr description
     * Specify a URI scheme specific part that matches a simple pattern, as per
     * {@link android.content.IntentFilter#addDataSchemeSpecificPart
     * IntentFilter.addDataSchemeSpecificPart()} with
     * {@link android.os.PatternMatcher#PATTERN_SIMPLE_GLOB}.
     * Note that because '\' is used as an escape character when
     * reading the string from XML (before it is parsed as a pattern),
     * you will need to double-escape: for example a literal "*" would
     * be written as "\\*" and a literal "\" would be written as
     * "\\\\".  This is basically the same as what you would need to
     * write if constructing the string in Java code.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:sspPattern
     */
    public static final int AndroidManifestData_sspPattern=9;
    /**
     * <p>
     * @attr description
     * Specify a group of MIME types that are handled. MIME types can be added and
     * removed to a package's MIME group via the PackageManager.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:mimeGroup
     */
    public static final int AndroidManifestData_mimeGroup=10;
    /**
     * <p>
     * @attr description
     * Specify a URI path that must be a suffix to match, as per
     * {@link android.content.IntentFilter#addDataPath
     * IntentFilter.addDataPath()} with
     * {@link android.os.PatternMatcher#PATTERN_SUFFIX}.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:pathSuffix
     */
    public static final int AndroidManifestData_pathSuffix=11;
    /**
     * <p>
     * @attr description
     * Specify a URI scheme specific part that must be a suffix to match, as per
     * {@link android.content.IntentFilter#addDataSchemeSpecificPart
     * IntentFilter.addDataSchemeSpecificPart()} with
     * {@link android.os.PatternMatcher#PATTERN_SUFFIX}.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:sspSuffix
     */
    public static final int AndroidManifestData_sspSuffix=12;
    /**
     * <p>
     * @attr description
     * Specify a URI path that matches an advanced pattern, as per
     * {@link android.content.IntentFilter#addDataPath
     * IntentFilter.addDataPath()} with
     * {@link android.os.PatternMatcher#PATTERN_ADVANCED_GLOB}.
     * Note that because '\' is used as an escape character when
     * reading the string from XML (before it is parsed as a pattern),
     * you will need to double-escape: for example a literal "*" would
     * be written as "\\*" and a literal "\" would be written as
     * "\\\\".  This is basically the same as what you would need to
     * write if constructing the string in Java code.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:pathAdvancedPattern
     */
    public static final int AndroidManifestData_pathAdvancedPattern=13;
    /**
     * <p>
     * @attr description
     * Specify a URI scheme specific part that matches an advanced pattern, as per
     * {@link android.content.IntentFilter#addDataSchemeSpecificPart
     * IntentFilter.addDataSchemeSpecificPart()} with
     * {@link android.os.PatternMatcher#PATTERN_ADVANCED_GLOB}.
     * Note that because '\' is used as an escape character when
     * reading the string from XML (before it is parsed as a pattern),
     * you will need to double-escape: for example a literal "*" would
     * be written as "\\*" and a literal "\" would be written as
     * "\\\\".  This is basically the same as what you would need to
     * write if constructing the string in Java code.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:sspAdvancedPattern
     */
    public static final int AndroidManifestData_sspAdvancedPattern=14;
    /**
     * The <code>deny-permission</code> tag specifies that a permission is to be denied
     * for a particular process (if specified under the
     * {@link #AndroidManifestProcess process} tag) or by default for all
     * processes {if specified under the
     * @link #AndroidManifestProcesses processes} tag).
     * <p>This appears as a child tag of the
     * {@link #AndroidManifestProcesses processes} and
     * {@link #AndroidManifestProcess process} tags.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestDenyPermission_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * </table>
     * @see #AndroidManifestDenyPermission_name
     */
    public static final int[] AndroidManifestDenyPermission={
      0x01010003
    };
    /**
     * <p>
     * @attr description
     * Required name of the permission that is to be denied
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AndroidManifestDenyPermission_name=0;
    /**
     * The <code>extension-sdk</code> tag is a child of the <uses-sdk> tag,
     * and specifies required extension sdk features.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestExtensionSdk_sdkVersion android:sdkVersion}</code></td><td>The extension SDK version that this tag refers to.</td></tr>
     * <tr><td><code>{@link #AndroidManifestExtensionSdk_minExtensionVersion android:minExtensionVersion}</code></td><td>The minimum version of the extension SDK this application requires.</td></tr>
     * </table>
     * @see #AndroidManifestExtensionSdk_sdkVersion
     * @see #AndroidManifestExtensionSdk_minExtensionVersion
     */
    public static final int[] AndroidManifestExtensionSdk={
      0x01010610, 0x01010611
    };
    /**
     * <p>
     * @attr description
     * The extension SDK version that this tag refers to.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:sdkVersion
     */
    public static final int AndroidManifestExtensionSdk_sdkVersion=0;
    /**
     * <p>
     * @attr description
     * The minimum version of the extension SDK this application requires.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:minExtensionVersion
     */
    public static final int AndroidManifestExtensionSdk_minExtensionVersion=1;
    /**
     * The <code>feature-group</code> tag specifies
     * a set of one or more <code>uses-feature</code> elements that
     * the application can utilize. An application uses multiple
     * <code>feature-group</code> sets to indicate that it can support
     * different combinations of features.
     * <p>This appears as a child tag of the root
     * {@link #AndroidManifest manifest} tag.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestFeatureGroup_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
     * </table>
     * @see #AndroidManifestFeatureGroup_label
     */
    public static final int[] AndroidManifestFeatureGroup={
      0x01010001
    };
    /**
     * <p>
     * @attr description
     * The human-readable name of the feature group.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:label
     */
    public static final int AndroidManifestFeatureGroup_label=0;
    /**
     * Attributes that can be supplied in an AndroidManifest.xml
     * <code>grant-uri-permission</code> tag, a child of the
     * {@link #AndroidManifestProvider provider} tag, describing a specific
     * URI path that can be granted as a permission.  This tag can be
     * specified multiple time to supply multiple paths. If multiple
     * path matching attributes are supplied, they will be evaluated in the
     * following order with the first attribute being the only one honored:
     * <code>pathAdvancedPattern</code>, <code>pathPattern</code>,
     * <code>pathPrefix</code>, <code>pathSuffix</code>, <code>path</code>.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestGrantUriPermission_path android:path}</code></td><td>Specify a URI path that must exactly match, as per
     * {@link android.os.PatternMatcher} with
     * {@link android.os.PatternMatcher#PATTERN_LITERAL}.</td></tr>
     * <tr><td><code>{@link #AndroidManifestGrantUriPermission_pathPrefix android:pathPrefix}</code></td><td>Specify a URI path that must be a prefix to match, as per
     * {@link android.os.PatternMatcher} with
     * {@link android.os.PatternMatcher#PATTERN_PREFIX}.</td></tr>
     * <tr><td><code>{@link #AndroidManifestGrantUriPermission_pathPattern android:pathPattern}</code></td><td>Specify a URI path that matches a simple pattern, as per
     * {@link android.os.PatternMatcher} with
     * {@link android.os.PatternMatcher#PATTERN_SIMPLE_GLOB}.</td></tr>
     * <tr><td><code>{@link #AndroidManifestGrantUriPermission_pathSuffix android:pathSuffix}</code></td><td>Specify a URI path that must be a suffix to match, as per
     * {@link android.os.PatternMatcher} with
     * {@link android.os.PatternMatcher#PATTERN_SUFFIX}.</td></tr>
     * <tr><td><code>{@link #AndroidManifestGrantUriPermission_pathAdvancedPattern android:pathAdvancedPattern}</code></td><td></td></tr>
     * </table>
     * @see #AndroidManifestGrantUriPermission_path
     * @see #AndroidManifestGrantUriPermission_pathPrefix
     * @see #AndroidManifestGrantUriPermission_pathPattern
     * @see #AndroidManifestGrantUriPermission_pathSuffix
     * @see #AndroidManifestGrantUriPermission_pathAdvancedPattern
     */
    public static final int[] AndroidManifestGrantUriPermission={
      0x0101002a, 0x0101002b, 0x0101002c, 0x0101061e, 
      0x01010620
    };
    /**
     * <p>
     * @attr description
     * Specify a URI path that must exactly match, as per
     * {@link android.os.PatternMatcher} with
     * {@link android.os.PatternMatcher#PATTERN_LITERAL}.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:path
     */
    public static final int AndroidManifestGrantUriPermission_path=0;
    /**
     * <p>
     * @attr description
     * Specify a URI path that must be a prefix to match, as per
     * {@link android.os.PatternMatcher} with
     * {@link android.os.PatternMatcher#PATTERN_PREFIX}.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:pathPrefix
     */
    public static final int AndroidManifestGrantUriPermission_pathPrefix=1;
    /**
     * <p>
     * @attr description
     * Specify a URI path that matches a simple pattern, as per
     * {@link android.os.PatternMatcher} with
     * {@link android.os.PatternMatcher#PATTERN_SIMPLE_GLOB}.
     * Note that because '\' is used as an escape character when
     * reading the string from XML (before it is parsed as a pattern),
     * you will need to double-escape: for example a literal "*" would
     * be written as "\\*" and a literal "\" would be written as
     * "\\\\".  This is basically the same as what you would need to
     * write if constructing the string in Java code.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:pathPattern
     */
    public static final int AndroidManifestGrantUriPermission_pathPattern=2;
    /**
     * <p>
     * @attr description
     * Specify a URI path that must be a suffix to match, as per
     * {@link android.os.PatternMatcher} with
     * {@link android.os.PatternMatcher#PATTERN_SUFFIX}.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:pathSuffix
     */
    public static final int AndroidManifestGrantUriPermission_pathSuffix=3;
    /**
     * <p>
     * @attr description
     * Specify a URI path that matches an advanced pattern, as per
     * {@link android.os.PatternMatcher} with
     * {@link android.os.PatternMatcher#PATTERN_ADVANCED_GLOB}.
     * Note that because '\' is used as an escape character when
     * reading the string from XML (before it is parsed as a pattern),
     * you will need to double-escape: for example a literal "*" would
     * be written as "\\*" and a literal "\" would be written as
     * "\\\\".  This is basically the same as what you would need to
     * write if constructing the string in Java code.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:pathAdvancedPattern
     */
    public static final int AndroidManifestGrantUriPermission_pathAdvancedPattern=4;
    /**
     * Attributes that can be supplied in an AndroidManifest.xml
     * <code>instrumentation</code> tag, a child of the root
     * {@link #AndroidManifest manifest} tag.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestInstrumentation_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestInstrumentation_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestInstrumentation_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestInstrumentation_targetPackage android:targetPackage}</code></td><td>The name of the application package that an Instrumentation object
     * will run against.</td></tr>
     * <tr><td><code>{@link #AndroidManifestInstrumentation_handleProfiling android:handleProfiling}</code></td><td>Flag indicating that an Instrumentation class wants to take care
     * of starting/stopping profiling itself, rather than relying on
     * the default behavior of profiling the complete time it is running.</td></tr>
     * <tr><td><code>{@link #AndroidManifestInstrumentation_functionalTest android:functionalTest}</code></td><td>Flag indicating that an Instrumentation class should be run as a
     * functional test.</td></tr>
     * <tr><td><code>{@link #AndroidManifestInstrumentation_logo android:logo}</code></td><td>A Drawable resource providing an extended graphical logo for its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestInstrumentation_banner android:banner}</code></td><td>A Drawable resource providing an extended graphical banner for its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestInstrumentation_roundIcon android:roundIcon}</code></td><td>A Drawable resource providing a graphical representation of its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestInstrumentation_targetProcesses android:targetProcesses}</code></td><td>The name of an application's processes that an Instrumentation object
     * will run against.</td></tr>
     * </table>
     * @see #AndroidManifestInstrumentation_label
     * @see #AndroidManifestInstrumentation_icon
     * @see #AndroidManifestInstrumentation_name
     * @see #AndroidManifestInstrumentation_targetPackage
     * @see #AndroidManifestInstrumentation_handleProfiling
     * @see #AndroidManifestInstrumentation_functionalTest
     * @see #AndroidManifestInstrumentation_logo
     * @see #AndroidManifestInstrumentation_banner
     * @see #AndroidManifestInstrumentation_roundIcon
     * @see #AndroidManifestInstrumentation_targetProcesses
     */
    public static final int[] AndroidManifestInstrumentation={
      0x01010001, 0x01010002, 0x01010003, 0x01010021, 
      0x01010022, 0x01010023, 0x010102be, 0x010103f2, 
      0x0101052c, 0x01010541
    };
    /**
     * <p>
     * @attr description
     * A user-legible name for the given item.  Use with the
     * application tag (to supply a default label for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific label for that component).  It may also be
     * used with the intent-filter tag to supply a label to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given label will be used wherever the user sees information
     * about its associated component; for example, as the name of a
     * main activity that is displayed in the launcher.  You should
     * generally set this to a reference to a string resource, so that
     * it can be localized, however it is also allowed to supply a plain
     * string for quick and dirty programming.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:label
     */
    public static final int AndroidManifestInstrumentation_label=0;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing a graphical representation of its
     * associated item.  Use with the
     * application tag (to supply a default icon for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific icon for that component).  It may also be
     * used with the intent-filter tag to supply an icon to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given icon will be used to display to the user a graphical
     * representation of its associated component; for example, as the icon
     * for main activity that is displayed in the launcher.  This must be
     * a reference to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:icon
     */
    public static final int AndroidManifestInstrumentation_icon=1;
    /**
     * <p>
     * @attr description
     * Required name of the class implementing the instrumentation, deriving from
     * {@link android.app.Instrumentation}.  This is a fully
     * qualified class name (for example, com.mycompany.myapp.MyActivity); as a
     * short-hand if the first character of the class
     * is a period then it is appended to your package name.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AndroidManifestInstrumentation_name=2;
    /**
     * <p>
     * @attr description
     * The name of the application package that an Instrumentation object
     * will run against.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:targetPackage
     */
    public static final int AndroidManifestInstrumentation_targetPackage=3;
    /**
     * <p>
     * @attr description
     * Flag indicating that an Instrumentation class wants to take care
     * of starting/stopping profiling itself, rather than relying on
     * the default behavior of profiling the complete time it is running.
     * This allows it to target profiling data at a specific set of
     * operations.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:handleProfiling
     */
    public static final int AndroidManifestInstrumentation_handleProfiling=4;
    /**
     * <p>
     * @attr description
     * Flag indicating that an Instrumentation class should be run as a
     * functional test.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:functionalTest
     */
    public static final int AndroidManifestInstrumentation_functionalTest=5;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing an extended graphical logo for its
     * associated item. Use with the application tag (to supply a default
     * logo for all application components), or with the activity, receiver,
     * service, or instrumentation tag (to supply a specific logo for that
     * component). It may also be used with the intent-filter tag to supply
     * a logo to show to the user when an activity is being selected based
     * on a particular Intent.
     * <p>The given logo will be used to display to the user a graphical
     * representation of its associated component; for example as the
     * header in the Action Bar. The primary differences between an icon
     * and a logo are that logos are often wider and more detailed, and are
     * used without an accompanying text caption. This must be a reference
     * to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:logo
     */
    public static final int AndroidManifestInstrumentation_logo=6;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing an extended graphical banner for its
     * associated item. Use with the application tag (to supply a default
     * banner for all application activities), or with the activity, tag to
     * supply a banner for a specific activity.
     * <p>The given banner will be used to display to the user a graphical
     * representation of an activity in the Leanback application launcher.
     * Since banners are displayed only in the Leanback launcher, they should
     * only be used with activities (and applications) that support Leanback
     * mode. These are activities that handle Intents of category
     * {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
     * Intent.CATEGORY_LEANBACK_LAUNCHER}.
     * <p>This must be a reference to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:banner
     */
    public static final int AndroidManifestInstrumentation_banner=7;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing a graphical representation of its
     * associated item.  Use with the
     * application tag (to supply a default round icon for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific round icon for that component).  It may also be
     * used with the intent-filter tag to supply a round icon to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given round icon will be used to display to the user a graphical
     * representation of its associated component; for example, as the round icon
     * for main activity that is displayed in the launcher.  This must be
     * a reference to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:roundIcon
     */
    public static final int AndroidManifestInstrumentation_roundIcon=8;
    /**
     * <p>
     * @attr description
     * The name of an application's processes that an Instrumentation object
     * will run against.  If not specified, only runs in the main process of the targetPackage.
     * Can either be a comma-separated list of process names or '*' for any process that
     * launches to run targetPackage code.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:targetProcesses
     */
    public static final int AndroidManifestInstrumentation_targetProcesses=9;
    /**
     * The <code>intent-filter</code> tag is used to construct an
     * {@link android.content.IntentFilter} object that will be used
     * to determine which component can handle a particular
     * {@link android.content.Intent} that has been given to the system.
     * It can be used as a child of the
     * {@link #AndroidManifestActivity activity},
     * {@link #AndroidManifestReceiver receiver} and
     * {@link #AndroidManifestService service}
     * tags.
     * <p> Zero or more {@link #AndroidManifestAction action},
     * {@link #AndroidManifestCategory category}, and/or
     * {@link #AndroidManifestData data} tags should be
     * included inside to describe the contents of the filter.
     * <p> The optional label and icon attributes here are used with
     * an activity to supply an alternative description of that activity
     * when it is being started through an Intent matching this filter.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestIntentFilter_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestIntentFilter_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestIntentFilter_priority android:priority}</code></td><td>Specify the relative importance or ability in handling a particular
     * Intent.</td></tr>
     * <tr><td><code>{@link #AndroidManifestIntentFilter_order android:order}</code></td><td>The order for the Preference (lower values are to be ordered first).</td></tr>
     * <tr><td><code>{@link #AndroidManifestIntentFilter_logo android:logo}</code></td><td>A Drawable resource providing an extended graphical logo for its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestIntentFilter_banner android:banner}</code></td><td>A Drawable resource providing an extended graphical banner for its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestIntentFilter_autoVerify android:autoVerify}</code></td><td>Specify whether an activity intent filter will need to be verified thru its set
     * of data URIs.</td></tr>
     * <tr><td><code>{@link #AndroidManifestIntentFilter_roundIcon android:roundIcon}</code></td><td>A Drawable resource providing a graphical representation of its
     * associated item.</td></tr>
     * </table>
     * @see #AndroidManifestIntentFilter_label
     * @see #AndroidManifestIntentFilter_icon
     * @see #AndroidManifestIntentFilter_priority
     * @see #AndroidManifestIntentFilter_order
     * @see #AndroidManifestIntentFilter_logo
     * @see #AndroidManifestIntentFilter_banner
     * @see #AndroidManifestIntentFilter_autoVerify
     * @see #AndroidManifestIntentFilter_roundIcon
     */
    public static final int[] AndroidManifestIntentFilter={
      0x01010001, 0x01010002, 0x0101001c, 0x010101ea, 
      0x010102be, 0x010103f2, 0x010104ee, 0x0101052c
    };
    /**
     * <p>
     * @attr description
     * A user-legible name for the given item.  Use with the
     * application tag (to supply a default label for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific label for that component).  It may also be
     * used with the intent-filter tag to supply a label to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given label will be used wherever the user sees information
     * about its associated component; for example, as the name of a
     * main activity that is displayed in the launcher.  You should
     * generally set this to a reference to a string resource, so that
     * it can be localized, however it is also allowed to supply a plain
     * string for quick and dirty programming.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:label
     */
    public static final int AndroidManifestIntentFilter_label=0;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing a graphical representation of its
     * associated item.  Use with the
     * application tag (to supply a default icon for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific icon for that component).  It may also be
     * used with the intent-filter tag to supply an icon to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given icon will be used to display to the user a graphical
     * representation of its associated component; for example, as the icon
     * for main activity that is displayed in the launcher.  This must be
     * a reference to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:icon
     */
    public static final int AndroidManifestIntentFilter_icon=1;
    /**
     * <p>
     * @attr description
     * Specify the relative importance or ability in handling a particular
     * Intent.  For receivers, this controls the order in which they are
     * executed to receive a broadcast (note that for
     * asynchronous broadcasts, this order is ignored).  For activities,
     * this provides information about how good an activity is handling an
     * Intent; when multiple activities match an intent and have different
     * priorities, only those with the higher priority value will be
     * considered a match.
     * <p>Only use if you really need to impose some specific
     * order in which the broadcasts are received, or want to forcibly
     * place an activity to always be preferred over others.  The value is a
     * single integer, with higher numbers considered to be better.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:priority
     */
    public static final int AndroidManifestIntentFilter_priority=2;
    /**
     * <p>
     * @attr description
     * Within an application, multiple intent filters may match a particular
     * intent. This allows the app author to specify the order filters should
     * be considered. We don't want to use priority because that is global
     * across applications.
     * <p>Only use if you really need to forcibly set the order in which
     * filters are evaluated. It is preferred to target an activity with a
     * directed intent instead.
     * <p>The value is a single integer, with higher numbers considered to
     * be better. If not specified, the default order is 0.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:order
     */
    public static final int AndroidManifestIntentFilter_order=3;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing an extended graphical logo for its
     * associated item. Use with the application tag (to supply a default
     * logo for all application components), or with the activity, receiver,
     * service, or instrumentation tag (to supply a specific logo for that
     * component). It may also be used with the intent-filter tag to supply
     * a logo to show to the user when an activity is being selected based
     * on a particular Intent.
     * <p>The given logo will be used to display to the user a graphical
     * representation of its associated component; for example as the
     * header in the Action Bar. The primary differences between an icon
     * and a logo are that logos are often wider and more detailed, and are
     * used without an accompanying text caption. This must be a reference
     * to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:logo
     */
    public static final int AndroidManifestIntentFilter_logo=4;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing an extended graphical banner for its
     * associated item. Use with the application tag (to supply a default
     * banner for all application activities), or with the activity, tag to
     * supply a banner for a specific activity.
     * <p>The given banner will be used to display to the user a graphical
     * representation of an activity in the Leanback application launcher.
     * Since banners are displayed only in the Leanback launcher, they should
     * only be used with activities (and applications) that support Leanback
     * mode. These are activities that handle Intents of category
     * {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
     * Intent.CATEGORY_LEANBACK_LAUNCHER}.
     * <p>This must be a reference to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:banner
     */
    public static final int AndroidManifestIntentFilter_banner=5;
    /**
     * <p>
     * @attr description
     * Specify whether an activity intent filter will need to be verified thru its set
     * of data URIs. This will only be used when the Intent's action is set to
     * {@link android.content.Intent#ACTION_VIEW Intent.ACTION_VIEW} and the Intent's category is
     * set to {@link android.content.Intent#CATEGORY_BROWSABLE Intent.CATEGORY_BROWSABLE} and the
     * intern filter data scheme is set to "http" or "https". When set to true, the intent filter
     * will need to use its data tag for getting the URIs to verify with.
     * For each URI, an HTTPS network request will be done to <code>/.well-known/statements.json</code>
     * host to verify that the web site is okay with the app intercepting the URI.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:autoVerify
     */
    public static final int AndroidManifestIntentFilter_autoVerify=6;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing a graphical representation of its
     * associated item.  Use with the
     * application tag (to supply a default round icon for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific round icon for that component).  It may also be
     * used with the intent-filter tag to supply a round icon to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given round icon will be used to display to the user a graphical
     * representation of its associated component; for example, as the round icon
     * for main activity that is displayed in the launcher.  This must be
     * a reference to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:roundIcon
     */
    public static final int AndroidManifestIntentFilter_roundIcon=7;
    /**
     * Attributes that can be used with a AndroidManifestKeySet.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestKeySet_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * </table>
     * @see #AndroidManifestKeySet_name
     */
    public static final int[] AndroidManifestKeySet={
      0x01010003
    };
    /**
     * <p>
     * @attr description
     * A unique name for the given item.  This must use a Java-style naming
     * convention to ensure the name is unique, for example
     * "com.mycompany.MyName".
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AndroidManifestKeySet_name=0;
    /**
     * <code>layout</code> tag allows configuring the layout for the activity within multi-window
     * environment.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestLayout_gravity android:gravity}</code></td><td>Specifies how an object should position its content, on both the X and Y axes,
     * within its own bounds.</td></tr>
     * <tr><td><code>{@link #AndroidManifestLayout_minWidth android:minWidth}</code></td><td></td></tr>
     * <tr><td><code>{@link #AndroidManifestLayout_minHeight android:minHeight}</code></td><td></td></tr>
     * <tr><td><code>{@link #AndroidManifestLayout_defaultWidth android:defaultWidth}</code></td><td>Default width of the activity.</td></tr>
     * <tr><td><code>{@link #AndroidManifestLayout_defaultHeight android:defaultHeight}</code></td><td>Default height of the activity.</td></tr>
     * <tr><td><code>{@link #AndroidManifestLayout_windowLayoutAffinity android:windowLayoutAffinity}</code></td><td>Window layout affinity of this activity.</td></tr>
     * </table>
     * @see #AndroidManifestLayout_gravity
     * @see #AndroidManifestLayout_minWidth
     * @see #AndroidManifestLayout_minHeight
     * @see #AndroidManifestLayout_defaultWidth
     * @see #AndroidManifestLayout_defaultHeight
     * @see #AndroidManifestLayout_windowLayoutAffinity
     */
    public static final int[] AndroidManifestLayout={
      0x010100af, 0x0101013f, 0x01010140, 0x010104f4, 
      0x010104f5, 0x01010619
    };
    /**
     * <p>
     * @attr description
     * Where to initially position the activity inside the available space. Uses constants
     * defined in {@link android.view.Gravity}.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
     * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
     * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
     * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
     * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the horizontal gravity: a left gravity will clip the right
     * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
     * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the vertical gravity: a top gravity will clip the bottom
     * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
     * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
     * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
     * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
     * </table>
     *
     * @attr name android:gravity
     */
    public static final int AndroidManifestLayout_gravity=0;
    /**
     * <p>
     * @attr description
     * Minimal width of the activity.
     * <p><strong>NOTE:</strong> A task's root activity value is applied to all additional
     * activities launched in the task. That is if the root activity of a task set minimal width,
     * then the system will set the same minimal width on all other activities in the task. It
     * will also ignore any other minimal width attributes of non-root activities.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:minWidth
     */
    public static final int AndroidManifestLayout_minWidth=1;
    /**
     * <p>
     * @attr description
     * Minimal height of the activity.
     * <p><strong>NOTE:</strong> A task's root activity value is applied to all additional
     * activities launched in the task. That is if the root activity of a task set minimal height,
     * then the system will set the same minimal height on all other activities in the task. It
     * will also ignore any other minimal height attributes of non-root activities.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:minHeight
     */
    public static final int AndroidManifestLayout_minHeight=2;
    /**
     * <p>
     * @attr description
     * Default width of the activity. Can be either a fixed value or fraction, in which case
     * the width will be constructed as a fraction of the total available width.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:defaultWidth
     */
    public static final int AndroidManifestLayout_defaultWidth=3;
    /**
     * <p>
     * @attr description
     * Default height of the activity. Can be either a fixed value or fraction, in which case
     * the height will be constructed as a fraction of the total available height.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:defaultHeight
     */
    public static final int AndroidManifestLayout_defaultHeight=4;
    /**
     * <p>
     * @attr description
     * Window layout affinity of this activity. Activities with the same window layout
     * affinity will share the same layout record. That is, if a user is opening an activity in
     * a new task on a display that can host freeform windows, and the user had opened a task
     * before and that task had a root activity who had the same window layout affinity, the
     * new task's window will be created in the same window mode and around the location which
     * the previously opened task was in.
     * <p>For example, if a user maximizes a task with root activity A and opens another
     * activity B that has the same window layout affinity as activity A has, activity B will
     * be created in fullscreen window mode. Similarly, if they move/resize a task with root
     * activity C and open another activity D that has the same window layout affinity as
     * activity C has, activity D will be in freeform window mode and as close to the position
     * of activity C as conditions permit. It doesn't require the user to keep the task with
     * activity A or activity C open. It won't, however, put any task into split-screen or PIP
     * window mode on launch.
     * <p>If the user is opening an activity with its window layout affinity for the first time,
     * the window mode and position is OEM defined.
     * <p>By default activity doesn't share any affinity with other activities.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:windowLayoutAffinity
     */
    public static final int AndroidManifestLayout_windowLayoutAffinity=5;
    /**
     * The <code>library</code> tag declares that this apk is providing itself
     * as a shared library for other applications to use.  It can only be used
     * with apks that are built in to the system image.  Other apks can link to
     * it with the {@link #AndroidManifestUsesLibrary uses-library} tag.
     * <p>This appears as a child tag of the
     * {@link #AndroidManifestApplication application} tag.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestLibrary_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * </table>
     * @see #AndroidManifestLibrary_name
     */
    public static final int[] AndroidManifestLibrary={
      0x01010003
    };
    /**
     * <p>
     * @attr description
     * Required public name of the library, which other components and
     * packages will use when referring to this library.  This is a string using
     * Java-style scoping to ensure it is unique.  The name should typically
     * be the same as the apk's package name.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AndroidManifestLibrary_name=0;
    /**
     * The <code>meta-data</code> tag is used to attach additional
     * arbitrary data to an application component.  The data can later
     * be retrieved programmatically from the
     * {@link android.content.pm.ComponentInfo#metaData
     * ComponentInfo.metaData} field.  There is no meaning given to this
     * data by the system.  You may supply the data through either the
     * <code>value</code> or <code>resource</code> attribute; if both
     * are given, then <code>resource</code> will be used.
     * <p>It is highly recommended that you avoid supplying related data as
     * multiple separate meta-data entries.  Instead, if you have complex
     * data to associate with a component, then use the <code>resource</code>
     * attribute to assign an XML resource that the client can parse to
     * retrieve the complete data.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestMetaData_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestMetaData_value android:value}</code></td><td>Concrete value to assign to this piece of named meta-data.</td></tr>
     * <tr><td><code>{@link #AndroidManifestMetaData_resource android:resource}</code></td><td>Resource identifier to assign to this piece of named meta-data.</td></tr>
     * </table>
     * @see #AndroidManifestMetaData_name
     * @see #AndroidManifestMetaData_value
     * @see #AndroidManifestMetaData_resource
     */
    public static final int[] AndroidManifestMetaData={
      0x01010003, 0x01010024, 0x01010025
    };
    /**
     * <p>
     * @attr description
     * A unique name for the given item.  This must use a Java-style naming
     * convention to ensure the name is unique, for example
     * "com.mycompany.MyName".
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AndroidManifestMetaData_name=0;
    /**
     * <p>
     * @attr description
     * Concrete value to assign to this piece of named meta-data.
     * The data can later be retrieved from the meta data Bundle
     * through {@link android.os.Bundle#getString Bundle.getString},
     * {@link android.os.Bundle#getInt Bundle.getInt},
     * {@link android.os.Bundle#getBoolean Bundle.getBoolean},
     * or {@link android.os.Bundle#getFloat Bundle.getFloat} depending
     * on the type used here.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:value
     */
    public static final int AndroidManifestMetaData_value=1;
    /**
     * <p>
     * @attr description
     * Resource identifier to assign to this piece of named meta-data.
     * The resource identifier can later be retrieved from the meta data
     * Bundle through {@link android.os.Bundle#getInt Bundle.getInt}.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:resource
     */
    public static final int AndroidManifestMetaData_resource=2;
    /**
     * Private tag to declare the original package name that this package is
     * based on.  Only used for packages installed in the system image.  If
     * given, and different than the actual package name, and the given
     * original package was previously installed on the device but the new
     * one was not, then the data for the old one will be renamed to be
     * for the new package.
     * <p>This appears as a child tag of the root
     * {@link #AndroidManifest manifest} tag.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestOriginalPackage_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * </table>
     * @see #AndroidManifestOriginalPackage_name
     */
    public static final int[] AndroidManifestOriginalPackage={
      0x01010003
    };
    /**
     * <p>
     * @attr description
     * A unique name for the given item.  This must use a Java-style naming
     * convention to ensure the name is unique, for example
     * "com.mycompany.MyName".
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AndroidManifestOriginalPackage_name=0;
    /**
     * Attributes relating to a package verifier.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestPackageVerifier_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestPackageVerifier_publicKey android:publicKey}</code></td><td>The attribute that holds a Base64-encoded public key.</td></tr>
     * </table>
     * @see #AndroidManifestPackageVerifier_name
     * @see #AndroidManifestPackageVerifier_publicKey
     */
    public static final int[] AndroidManifestPackageVerifier={
      0x01010003, 0x010103a6
    };
    /**
     * <p>
     * @attr description
     * Specifies the Java-style package name that defines this
     * package verifier.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AndroidManifestPackageVerifier_name=0;
    /**
     * <p>
     * @attr description
     * The Base64 encoded public key of the package verifier's
     * signature.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:publicKey
     */
    public static final int AndroidManifestPackageVerifier_publicKey=1;
    /**
     * Attributes that can be supplied in an AndroidManifest.xml
     * <code>path-permission</code> tag, a child of the
     * {@link #AndroidManifestProvider provider} tag, describing a permission
     * that allows access to a specific path in the provider.  This tag can be
     * specified multiple time to supply multiple paths. If multiple
     * path matching attributes are supplied, they will be evaluated in the
     * following order with the first attribute being the only one honored:
     * <code>pathAdvancedPattern</code>, <code>pathPattern</code>,
     * <code>pathPrefix</code>, <code>pathSuffix</code>, <code>path</code>.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestPathPermission_permission android:permission}</code></td><td>Specify a permission that a client is required to have in order to
     * use the associated object.</td></tr>
     * <tr><td><code>{@link #AndroidManifestPathPermission_readPermission android:readPermission}</code></td><td>A specific {@link android.R.attr#permission} name for read-only
     * access to a {@link android.content.ContentProvider}.</td></tr>
     * <tr><td><code>{@link #AndroidManifestPathPermission_writePermission android:writePermission}</code></td><td>A specific {@link android.R.attr#permission} name for write
     * access to a {@link android.content.ContentProvider}.</td></tr>
     * <tr><td><code>{@link #AndroidManifestPathPermission_path android:path}</code></td><td>Specify a URI path that must exactly match, as per
     * {@link android.os.PatternMatcher} with
     * {@link android.os.PatternMatcher#PATTERN_LITERAL}.</td></tr>
     * <tr><td><code>{@link #AndroidManifestPathPermission_pathPrefix android:pathPrefix}</code></td><td>Specify a URI path that must be a prefix to match, as per
     * {@link android.os.PatternMatcher} with
     * {@link android.os.PatternMatcher#PATTERN_PREFIX}.</td></tr>
     * <tr><td><code>{@link #AndroidManifestPathPermission_pathPattern android:pathPattern}</code></td><td>Specify a URI path that matches a simple pattern, as per
     * {@link android.os.PatternMatcher} with
     * {@link android.os.PatternMatcher#PATTERN_SIMPLE_GLOB}.</td></tr>
     * <tr><td><code>{@link #AndroidManifestPathPermission_pathSuffix android:pathSuffix}</code></td><td>Specify a URI path that must be a suffix to match, as per
     * {@link android.os.PatternMatcher} with
     * {@link android.os.PatternMatcher#PATTERN_SUFFIX}.</td></tr>
     * <tr><td><code>{@link #AndroidManifestPathPermission_pathAdvancedPattern android:pathAdvancedPattern}</code></td><td></td></tr>
     * </table>
     * @see #AndroidManifestPathPermission_permission
     * @see #AndroidManifestPathPermission_readPermission
     * @see #AndroidManifestPathPermission_writePermission
     * @see #AndroidManifestPathPermission_path
     * @see #AndroidManifestPathPermission_pathPrefix
     * @see #AndroidManifestPathPermission_pathPattern
     * @see #AndroidManifestPathPermission_pathSuffix
     * @see #AndroidManifestPathPermission_pathAdvancedPattern
     */
    public static final int[] AndroidManifestPathPermission={
      0x01010006, 0x01010007, 0x01010008, 0x0101002a, 
      0x0101002b, 0x0101002c, 0x0101061e, 0x01010620
    };
    /**
     * <p>
     * @attr description
     * Specify a permission that a client is required to have in order to
     * use the associated object.  If the client does not hold the named
     * permission, its request will fail.  See the
     * <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
     * document for more information on permissions.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:permission
     */
    public static final int AndroidManifestPathPermission_permission=0;
    /**
     * <p>
     * @attr description
     * A specific {@link android.R.attr#permission} name for read-only
     * access to a {@link android.content.ContentProvider}.  See the
     * <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
     * document for more information on permissions.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:readPermission
     */
    public static final int AndroidManifestPathPermission_readPermission=1;
    /**
     * <p>
     * @attr description
     * A specific {@link android.R.attr#permission} name for write
     * access to a {@link android.content.ContentProvider}.  See the
     * <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
     * document for more information on permissions.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:writePermission
     */
    public static final int AndroidManifestPathPermission_writePermission=2;
    /**
     * <p>
     * @attr description
     * Specify a URI path that must exactly match, as per
     * {@link android.os.PatternMatcher} with
     * {@link android.os.PatternMatcher#PATTERN_LITERAL}.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:path
     */
    public static final int AndroidManifestPathPermission_path=3;
    /**
     * <p>
     * @attr description
     * Specify a URI path that must be a prefix to match, as per
     * {@link android.os.PatternMatcher} with
     * {@link android.os.PatternMatcher#PATTERN_PREFIX}.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:pathPrefix
     */
    public static final int AndroidManifestPathPermission_pathPrefix=4;
    /**
     * <p>
     * @attr description
     * Specify a URI path that matches a simple pattern, as per
     * {@link android.os.PatternMatcher} with
     * {@link android.os.PatternMatcher#PATTERN_SIMPLE_GLOB}.
     * Note that because '\' is used as an escape character when
     * reading the string from XML (before it is parsed as a pattern),
     * you will need to double-escape: for example a literal "*" would
     * be written as "\\*" and a literal "\" would be written as
     * "\\\\".  This is basically the same as what you would need to
     * write if constructing the string in Java code.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:pathPattern
     */
    public static final int AndroidManifestPathPermission_pathPattern=5;
    /**
     * <p>
     * @attr description
     * Specify a URI path that must be a suffix to match, as per
     * {@link android.os.PatternMatcher} with
     * {@link android.os.PatternMatcher#PATTERN_SUFFIX}.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:pathSuffix
     */
    public static final int AndroidManifestPathPermission_pathSuffix=6;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#pathAdvancedPattern}
     * attribute's value can be found in the {@link #AndroidManifestPathPermission} array.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:pathAdvancedPattern
     */
    public static final int AndroidManifestPathPermission_pathAdvancedPattern=7;
    /**
     * The <code>permission</code> tag declares a security permission that can be
     * used to control access from other packages to specific components or
     * features in your package (or other packages).  See the
     * <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
     * document for more information on permissions.
     * <p>This appears as a child tag of the root
     * {@link #AndroidManifest manifest} tag.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestPermission_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestPermission_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestPermission_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestPermission_protectionLevel android:protectionLevel}</code></td><td>Characterizes the potential risk implied in a permission and
     * indicates the procedure the system should follow when determining
     * whether to grant the permission to an application requesting it.</td></tr>
     * <tr><td><code>{@link #AndroidManifestPermission_permissionGroup android:permissionGroup}</code></td><td>Specified the name of a group that this permission is associated
     * with.</td></tr>
     * <tr><td><code>{@link #AndroidManifestPermission_description android:description}</code></td><td>Descriptive text for the associated data.</td></tr>
     * <tr><td><code>{@link #AndroidManifestPermission_logo android:logo}</code></td><td>A Drawable resource providing an extended graphical logo for its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestPermission_permissionFlags android:permissionFlags}</code></td><td>Flags indicating more context for a permission.</td></tr>
     * <tr><td><code>{@link #AndroidManifestPermission_banner android:banner}</code></td><td>A Drawable resource providing an extended graphical banner for its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestPermission_roundIcon android:roundIcon}</code></td><td>A Drawable resource providing a graphical representation of its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestPermission_knownCerts android:knownCerts}</code></td><td>A reference to an array resource containing the signing certificate digests to be granted
     * this permission when using the {@code knownSigner} protection flag.</td></tr>
     * </table>
     * @see #AndroidManifestPermission_label
     * @see #AndroidManifestPermission_icon
     * @see #AndroidManifestPermission_name
     * @see #AndroidManifestPermission_protectionLevel
     * @see #AndroidManifestPermission_permissionGroup
     * @see #AndroidManifestPermission_description
     * @see #AndroidManifestPermission_logo
     * @see #AndroidManifestPermission_permissionFlags
     * @see #AndroidManifestPermission_banner
     * @see #AndroidManifestPermission_roundIcon
     * @see #AndroidManifestPermission_knownCerts
     */
    public static final int[] AndroidManifestPermission={
      0x01010001, 0x01010002, 0x01010003, 0x01010009, 
      0x0101000a, 0x01010020, 0x010102be, 0x010103c7, 
      0x010103f2, 0x0101052c, 0x0101062a, 0x01120017, 
      0x011200cc
    };
    /**
     * <p>
     * @attr description
     * A user-legible name for the given item.  Use with the
     * application tag (to supply a default label for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific label for that component).  It may also be
     * used with the intent-filter tag to supply a label to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given label will be used wherever the user sees information
     * about its associated component; for example, as the name of a
     * main activity that is displayed in the launcher.  You should
     * generally set this to a reference to a string resource, so that
     * it can be localized, however it is also allowed to supply a plain
     * string for quick and dirty programming.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:label
     */
    public static final int AndroidManifestPermission_label=0;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing a graphical representation of its
     * associated item.  Use with the
     * application tag (to supply a default icon for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific icon for that component).  It may also be
     * used with the intent-filter tag to supply an icon to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given icon will be used to display to the user a graphical
     * representation of its associated component; for example, as the icon
     * for main activity that is displayed in the launcher.  This must be
     * a reference to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:icon
     */
    public static final int AndroidManifestPermission_icon=1;
    /**
     * <p>
     * @attr description
     * Required public name of the permission, which other components and
     * packages will use when referring to this permission.  This is a string using
     * Java-style scoping to ensure it is unique.  The prefix will often
     * be the same as our overall package name, for example
     * "com.mycompany.android.myapp.SomePermission".
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AndroidManifestPermission_name=2;
    /**
     * <p>
     * @attr description
     * Characterizes the potential risk implied in a permission and
     * indicates the procedure the system should follow when determining
     * whether to grant the permission to an application requesting it. {@link
     * android.Manifest.permission Standard permissions} have a predefined and
     * permanent protectionLevel. If you are creating a custom permission in an
     * application, you can define a protectionLevel attribute with one of the
     * values listed below. If no protectionLevel is defined for a custom
     * permission, the system assigns the default ("normal").
     * <p>Each protection level consists of a base permission type and zero or
     * more flags. Use the following functions to extract those.
     * <pre>
     * int basePermissionType = permissionInfo.getProtection();
     * int permissionFlags = permissionInfo.getProtectionFlags();
     * </pre>
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>appPredictor</td><td>200000</td><td>Additional flag from base permission type: this permission can be automatically
     * granted to the system app predictor</td></tr>
     * <tr><td>appop</td><td>40</td><td>Additional flag from base permission type: this permission is closely
     * associated with an app op for controlling access.</td></tr>
     * <tr><td>companion</td><td>800000</td><td>Additional flag from base permission type: this permission can be automatically
     * granted to the system companion device manager service</td></tr>
     * <tr><td>configurator</td><td>80000</td><td>Additional flag from base permission type: this permission automatically
     * granted to device configurator</td></tr>
     * <tr><td>dangerous</td><td>1</td><td><strong>Base permission type</strong>: a higher-risk permission that
     * would give a requesting application access to private user data or
     * control over the device that can negatively impact the user.  Because
     * this type of permission introduces potential risk, the system may
     * not automatically grant it to the requesting application.  For example,
     * any dangerous permissions requested by an application may be displayed
     * to the user and require confirmation before proceeding, or some other
     * approach may be taken to avoid the user automatically allowing
     * the use of such facilities.</td></tr>
     * <tr><td>development</td><td>20</td><td>Additional flag from base permission type: this permission can also
     * (optionally) be granted to development applications. Although undocumented, the
     * permission state used to be shared by all users (including future users), but it is
     * managed per-user since API level 31.</td></tr>
     * <tr><td>documenter</td><td>40000</td><td>Additional flag from base permission type: this permission can be automatically
     * granted to the document manager</td></tr>
     * <tr><td>incidentReportApprover</td><td>100000</td><td>Additional flag from base permission type: this permission designates the app
     * that will approve the sharing of incident reports.</td></tr>
     * <tr><td>installer</td><td>100</td><td>Additional flag from base permission type: this permission can be automatically
     * granted to system apps that install packages.</td></tr>
     * <tr><td>instant</td><td>1000</td><td>Additional flag from base permission type: this permission can be granted to instant
     * apps</td></tr>
     * <tr><td>internal</td><td>4</td><td><strong>Base permission type</strong>: a permission that is managed internally by the
     * system and only granted according to the protection flags.</td></tr>
     * <tr><td>knownSigner</td><td>8000000</td><td>Additional flag from base permission type: this permission can also be granted if the
     * requesting application is signed by, or has in its signing lineage, any of the
     * certificate digests declared in {@link android.R.attr#knownCerts}.</td></tr>
     * <tr><td>normal</td><td>0</td><td><strong>Base permission type</strong>: a lower-risk permission that gives
     * an application access to isolated application-level features, with minimal
     * risk to other applications, the system, or the user. The system
     * automatically grants this type of permission to a requesting application at
     * installation, without asking for the user's explicit approval (though the
     * user always has the option to review these permissions before installing).</td></tr>
     * <tr><td>oem</td><td>4000</td><td>Additional flag from base permission type: this permission can be granted only
     * if its protection level is signature, the requesting app resides on the OEM partition,
     * and the OEM has allowlisted the app to receive this permission by the OEM.</td></tr>
     * <tr><td>pre23</td><td>80</td><td>Additional flag from base permission type: this permission can be automatically
     * granted to apps that target API levels below
     * {@link android.os.Build.VERSION_CODES#M} (before runtime permissions
     * were introduced).</td></tr>
     * <tr><td>preinstalled</td><td>400</td><td>Additional flag from base permission type: this permission can be automatically
     * granted any application pre-installed on the system image (not just privileged
     * apps).</td></tr>
     * <tr><td>privileged</td><td>10</td><td>Additional flag from base permission type: this permission can also
     * be granted to any applications installed as privileged apps on the system image.
     * Please avoid using this option, as the
     * signature protection level should be sufficient for most needs and
     * works regardless of exactly where applications are installed.  This
     * permission flag is used for certain special situations where multiple
     * vendors have applications built in to a system image which need
     * to share specific features explicitly because they are being built
     * together.</td></tr>
     * <tr><td>recents</td><td>2000000</td><td>Additional flag from base permission type: this permission will be granted to the
     * recents app.</td></tr>
     * <tr><td>retailDemo</td><td>1000000</td><td>Additional flag from base permission type: this permission will be granted to the
     * retail demo app, as defined by the OEM.</td></tr>
     * <tr><td>role</td><td>4000000</td><td>Additional flag from base permission type: this permission is managed by role.</td></tr>
     * <tr><td>runtime</td><td>2000</td><td>Additional flag from base permission type: this permission can only be granted to apps
     * that target runtime permissions ({@link android.os.Build.VERSION_CODES#M} and above)</td></tr>
     * <tr><td>setup</td><td>800</td><td>Additional flag from base permission type: this permission can be automatically
     * granted to the setup wizard app</td></tr>
     * <tr><td>signature</td><td>2</td><td><strong>Base permission type</strong>: a permission that the system is
     * to grant only if the requesting application is signed with the same
     * certificate as the application that declared the permission. If the
     * certificates match, the system automatically grants the permission
     * without notifying the user or asking for the user's explicit approval.</td></tr>
     * <tr><td>signatureOrSystem</td><td>3</td><td>Old synonym for "signature|privileged". Deprecated in API level 23.
     * Base permission type: a permission that the system is to grant only
     * to packages in the Android system image <em>or</em> that are signed
     * with the same certificates. Please avoid using this option, as the
     * signature protection level should be sufficient for most needs and
     * works regardless of exactly where applications are installed.  This
     * permission is used for certain special situations where multiple
     * vendors have applications built in to a system image which need
     * to share specific features explicitly because they are being built
     * together.</td></tr>
     * <tr><td>system</td><td>10</td><td>Old synonym for "privileged". Deprecated in API level 23.</td></tr>
     * <tr><td>textClassifier</td><td>10000</td><td>Additional flag from base permission type: this permission can be automatically
     * granted to the system default text classifier</td></tr>
     * <tr><td>vendorPrivileged</td><td>8000</td><td>Additional flag from base permission type: this permission can be granted to
     * privileged apps in vendor partition.</td></tr>
     * <tr><td>verifier</td><td>200</td><td>Additional flag from base permission type: this permission can be automatically
     * granted to system apps that verify packages.</td></tr>
     * </table>
     *
     * @attr name android:protectionLevel
     */
    public static final int AndroidManifestPermission_protectionLevel=3;
    /**
     * <p>
     * @attr description
     * Specified the name of a group that this permission is associated
     * with.  The group must have been defined with the
     * {@link android.R.styleable#AndroidManifestPermissionGroup permission-group} tag.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:permissionGroup
     */
    public static final int AndroidManifestPermission_permissionGroup=4;
    /**
     * <p>
     * @attr description
     * Descriptive text for the associated data.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:description
     */
    public static final int AndroidManifestPermission_description=5;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing an extended graphical logo for its
     * associated item. Use with the application tag (to supply a default
     * logo for all application components), or with the activity, receiver,
     * service, or instrumentation tag (to supply a specific logo for that
     * component). It may also be used with the intent-filter tag to supply
     * a logo to show to the user when an activity is being selected based
     * on a particular Intent.
     * <p>The given logo will be used to display to the user a graphical
     * representation of its associated component; for example as the
     * header in the Action Bar. The primary differences between an icon
     * and a logo are that logos are often wider and more detailed, and are
     * used without an accompanying text caption. This must be a reference
     * to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:logo
     */
    public static final int AndroidManifestPermission_logo=6;
    /**
     * <p>
     * @attr description
     * Flags indicating more context for a permission.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>costsMoney</td><td>1</td><td>Set to indicate that this permission allows an operation that
     * may cost the user money.  Such permissions may be highlighted
     * when shown to the user with this additional information.</td></tr>
     * <tr><td>hardRestricted</td><td>4</td><td>This permission is restricted by the platform and it would be
     * grantable only to apps that meet special criteria per platform
     * policy.</td></tr>
     * <tr><td>immutablyRestricted</td><td>10</td><td>This permission is restricted immutably which means that its
     * restriction state may be specified only on the first install of
     * the app and will stay in this initial allowlist state until
     * the app is uninstalled.</td></tr>
     * <tr><td>installerExemptIgnored</td><td>20</td><td>Modifier for permission restriction. This permission cannot
     * be exempted by the installer.</td></tr>
     * <tr><td>removed</td><td>2</td><td>Additional flag from base permission type: this permission has been
     * removed and it is no longer enforced. It shouldn't be shown in the
     * UI. Removed permissions are kept as normal permissions for backwards
     * compatibility as apps may be checking them before calling an API.</td></tr>
     * <tr><td>softRestricted</td><td>8</td><td>This permission is restricted by the platform and it would be
     * grantable in its full form to apps that meet special criteria
     * per platform policy. Otherwise, a weaker form of the permission
     * would be granted. The weak grant depends on the permission.
     * <p>What weak grant means is described in the documentation of
     * the permissions.</td></tr>
     * </table>
     *
     * @attr name android:permissionFlags
     */
    public static final int AndroidManifestPermission_permissionFlags=7;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing an extended graphical banner for its
     * associated item. Use with the application tag (to supply a default
     * banner for all application activities), or with the activity, tag to
     * supply a banner for a specific activity.
     * <p>The given banner will be used to display to the user a graphical
     * representation of an activity in the Leanback application launcher.
     * Since banners are displayed only in the Leanback launcher, they should
     * only be used with activities (and applications) that support Leanback
     * mode. These are activities that handle Intents of category
     * {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
     * Intent.CATEGORY_LEANBACK_LAUNCHER}.
     * <p>This must be a reference to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:banner
     */
    public static final int AndroidManifestPermission_banner=8;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing a graphical representation of its
     * associated item.  Use with the
     * application tag (to supply a default round icon for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific round icon for that component).  It may also be
     * used with the intent-filter tag to supply a round icon to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given round icon will be used to display to the user a graphical
     * representation of its associated component; for example, as the round icon
     * for main activity that is displayed in the launcher.  This must be
     * a reference to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:roundIcon
     */
    public static final int AndroidManifestPermission_roundIcon=9;
    /**
     * <p>
     * @attr description
     * A reference to an array resource containing the signing certificate digests to be granted
     * this permission when using the {@code knownSigner} protection flag. The digest should
     * be computed over the DER encoding of the trusted certificate using the SHA-256 digest
     * algorithm.
     * <p>
     * If only a single signer is declared this can also be a string resource, or the digest
     * can be declared inline as the value for this attribute.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:knownCerts
     */
    public static final int AndroidManifestPermission_knownCerts=10;
    /**
     * The <code>permission-group</code> tag declares a logical grouping of
     * related permissions.
     * <p>Note that this tag does not declare a permission itself, only
     * a namespace in which further permissions can be placed.  See
     * the {@link #AndroidManifestPermission &lt;permission&gt;} tag for
     * more information.
     * <p>This appears as a child tag of the root
     * {@link #AndroidManifest manifest} tag.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestPermissionGroup_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestPermissionGroup_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestPermissionGroup_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestPermissionGroup_priority android:priority}</code></td><td>Specify the relative importance or ability in handling a particular
     * Intent.</td></tr>
     * <tr><td><code>{@link #AndroidManifestPermissionGroup_description android:description}</code></td><td>Descriptive text for the associated data.</td></tr>
     * <tr><td><code>{@link #AndroidManifestPermissionGroup_logo android:logo}</code></td><td>A Drawable resource providing an extended graphical logo for its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestPermissionGroup_permissionGroupFlags android:permissionGroupFlags}</code></td><td>Flags indicating more context for a permission group.</td></tr>
     * <tr><td><code>{@link #AndroidManifestPermissionGroup_banner android:banner}</code></td><td>A Drawable resource providing an extended graphical banner for its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestPermissionGroup_roundIcon android:roundIcon}</code></td><td>A Drawable resource providing a graphical representation of its
     * associated item.</td></tr>
     * </table>
     * @see #AndroidManifestPermissionGroup_label
     * @see #AndroidManifestPermissionGroup_icon
     * @see #AndroidManifestPermissionGroup_name
     * @see #AndroidManifestPermissionGroup_priority
     * @see #AndroidManifestPermissionGroup_description
     * @see #AndroidManifestPermissionGroup_logo
     * @see #AndroidManifestPermissionGroup_permissionGroupFlags
     * @see #AndroidManifestPermissionGroup_banner
     * @see #AndroidManifestPermissionGroup_roundIcon
     */
    public static final int[] AndroidManifestPermissionGroup={
      0x01010001, 0x01010002, 0x01010003, 0x0101001c, 
      0x01010020, 0x010102be, 0x010103c5, 0x010103f2, 
      0x0101052c, 0x01120018, 0x01120019, 0x011200cc, 
      0x011200cd
    };
    /**
     * <p>
     * @attr description
     * A user-legible name for the given item.  Use with the
     * application tag (to supply a default label for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific label for that component).  It may also be
     * used with the intent-filter tag to supply a label to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given label will be used wherever the user sees information
     * about its associated component; for example, as the name of a
     * main activity that is displayed in the launcher.  You should
     * generally set this to a reference to a string resource, so that
     * it can be localized, however it is also allowed to supply a plain
     * string for quick and dirty programming.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:label
     */
    public static final int AndroidManifestPermissionGroup_label=0;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing a graphical representation of its
     * associated item.  Use with the
     * application tag (to supply a default icon for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific icon for that component).  It may also be
     * used with the intent-filter tag to supply an icon to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given icon will be used to display to the user a graphical
     * representation of its associated component; for example, as the icon
     * for main activity that is displayed in the launcher.  This must be
     * a reference to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:icon
     */
    public static final int AndroidManifestPermissionGroup_icon=1;
    /**
     * <p>
     * @attr description
     * Required public name of the permission group, permissions will use
     * to specify the group they are in.  This is a string using
     * Java-style scoping to ensure it is unique.  The prefix will often
     * be the same as our overall package name, for example
     * "com.mycompany.android.myapp.SomePermission".
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AndroidManifestPermissionGroup_name=2;
    /**
     * <p>
     * @attr description
     * Specify the relative importance or ability in handling a particular
     * Intent.  For receivers, this controls the order in which they are
     * executed to receive a broadcast (note that for
     * asynchronous broadcasts, this order is ignored).  For activities,
     * this provides information about how good an activity is handling an
     * Intent; when multiple activities match an intent and have different
     * priorities, only those with the higher priority value will be
     * considered a match.
     * <p>Only use if you really need to impose some specific
     * order in which the broadcasts are received, or want to forcibly
     * place an activity to always be preferred over others.  The value is a
     * single integer, with higher numbers considered to be better.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:priority
     */
    public static final int AndroidManifestPermissionGroup_priority=3;
    /**
     * <p>
     * @attr description
     * Descriptive text for the associated data.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:description
     */
    public static final int AndroidManifestPermissionGroup_description=4;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing an extended graphical logo for its
     * associated item. Use with the application tag (to supply a default
     * logo for all application components), or with the activity, receiver,
     * service, or instrumentation tag (to supply a specific logo for that
     * component). It may also be used with the intent-filter tag to supply
     * a logo to show to the user when an activity is being selected based
     * on a particular Intent.
     * <p>The given logo will be used to display to the user a graphical
     * representation of its associated component; for example as the
     * header in the Action Bar. The primary differences between an icon
     * and a logo are that logos are often wider and more detailed, and are
     * used without an accompanying text caption. This must be a reference
     * to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:logo
     */
    public static final int AndroidManifestPermissionGroup_logo=5;
    /**
     * <p>
     * @attr description
     * Flags indicating more context for a permission group.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>personalInfo</td><td>1</td><td>Set to indicate that this permission group contains permissions
     * protecting access to some information that is considered
     * personal to the user (such as contacts, e-mails, etc).</td></tr>
     * </table>
     *
     * @attr name android:permissionGroupFlags
     */
    public static final int AndroidManifestPermissionGroup_permissionGroupFlags=6;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing an extended graphical banner for its
     * associated item. Use with the application tag (to supply a default
     * banner for all application activities), or with the activity, tag to
     * supply a banner for a specific activity.
     * <p>The given banner will be used to display to the user a graphical
     * representation of an activity in the Leanback application launcher.
     * Since banners are displayed only in the Leanback launcher, they should
     * only be used with activities (and applications) that support Leanback
     * mode. These are activities that handle Intents of category
     * {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
     * Intent.CATEGORY_LEANBACK_LAUNCHER}.
     * <p>This must be a reference to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:banner
     */
    public static final int AndroidManifestPermissionGroup_banner=7;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing a graphical representation of its
     * associated item.  Use with the
     * application tag (to supply a default round icon for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific round icon for that component).  It may also be
     * used with the intent-filter tag to supply a round icon to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given round icon will be used to display to the user a graphical
     * representation of its associated component; for example, as the round icon
     * for main activity that is displayed in the launcher.  This must be
     * a reference to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:roundIcon
     */
    public static final int AndroidManifestPermissionGroup_roundIcon=8;
    /**
     * The <code>permission-tree</code> tag declares the base of a tree of
     * permission values: it declares that this package has ownership of
     * the given permission name, as well as all names underneath it
     * (separated by '.').  This allows you to use the
     * {@link android.content.pm.PackageManager#addPermission
     * PackageManager.addPermission()} method to dynamically add new
     * permissions under this tree.
     * <p>Note that this tag does not declare a permission itself, only
     * a namespace in which further permissions can be placed.  See
     * the {@link #AndroidManifestPermission &lt;permission&gt;} tag for
     * more information.
     * <p>This appears as a child tag of the root
     * {@link #AndroidManifest manifest} tag.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestPermissionTree_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestPermissionTree_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestPermissionTree_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestPermissionTree_logo android:logo}</code></td><td>A Drawable resource providing an extended graphical logo for its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestPermissionTree_banner android:banner}</code></td><td>A Drawable resource providing an extended graphical banner for its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestPermissionTree_roundIcon android:roundIcon}</code></td><td>A Drawable resource providing a graphical representation of its
     * associated item.</td></tr>
     * </table>
     * @see #AndroidManifestPermissionTree_label
     * @see #AndroidManifestPermissionTree_icon
     * @see #AndroidManifestPermissionTree_name
     * @see #AndroidManifestPermissionTree_logo
     * @see #AndroidManifestPermissionTree_banner
     * @see #AndroidManifestPermissionTree_roundIcon
     */
    public static final int[] AndroidManifestPermissionTree={
      0x01010001, 0x01010002, 0x01010003, 0x010102be, 
      0x010103f2, 0x0101052c
    };
    /**
     * <p>
     * @attr description
     * A user-legible name for the given item.  Use with the
     * application tag (to supply a default label for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific label for that component).  It may also be
     * used with the intent-filter tag to supply a label to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given label will be used wherever the user sees information
     * about its associated component; for example, as the name of a
     * main activity that is displayed in the launcher.  You should
     * generally set this to a reference to a string resource, so that
     * it can be localized, however it is also allowed to supply a plain
     * string for quick and dirty programming.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:label
     */
    public static final int AndroidManifestPermissionTree_label=0;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing a graphical representation of its
     * associated item.  Use with the
     * application tag (to supply a default icon for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific icon for that component).  It may also be
     * used with the intent-filter tag to supply an icon to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given icon will be used to display to the user a graphical
     * representation of its associated component; for example, as the icon
     * for main activity that is displayed in the launcher.  This must be
     * a reference to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:icon
     */
    public static final int AndroidManifestPermissionTree_icon=1;
    /**
     * <p>
     * @attr description
     * Required public name of the permission tree, which is the base name
     * of all permissions under it.  This is a string using
     * Java-style scoping to ensure it is unique.  The prefix will often
     * be the same as our overall package name, for example
     * "com.mycompany.android.myapp.SomePermission".  A permission tree name
     * must have more than two segments in its path; that is,
     * "com.me.foo" is okay, but not "com.me" or "com".
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AndroidManifestPermissionTree_name=2;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing an extended graphical logo for its
     * associated item. Use with the application tag (to supply a default
     * logo for all application components), or with the activity, receiver,
     * service, or instrumentation tag (to supply a specific logo for that
     * component). It may also be used with the intent-filter tag to supply
     * a logo to show to the user when an activity is being selected based
     * on a particular Intent.
     * <p>The given logo will be used to display to the user a graphical
     * representation of its associated component; for example as the
     * header in the Action Bar. The primary differences between an icon
     * and a logo are that logos are often wider and more detailed, and are
     * used without an accompanying text caption. This must be a reference
     * to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:logo
     */
    public static final int AndroidManifestPermissionTree_logo=3;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing an extended graphical banner for its
     * associated item. Use with the application tag (to supply a default
     * banner for all application activities), or with the activity, tag to
     * supply a banner for a specific activity.
     * <p>The given banner will be used to display to the user a graphical
     * representation of an activity in the Leanback application launcher.
     * Since banners are displayed only in the Leanback launcher, they should
     * only be used with activities (and applications) that support Leanback
     * mode. These are activities that handle Intents of category
     * {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
     * Intent.CATEGORY_LEANBACK_LAUNCHER}.
     * <p>This must be a reference to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:banner
     */
    public static final int AndroidManifestPermissionTree_banner=4;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing a graphical representation of its
     * associated item.  Use with the
     * application tag (to supply a default round icon for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific round icon for that component).  It may also be
     * used with the intent-filter tag to supply a round icon to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given round icon will be used to display to the user a graphical
     * representation of its associated component; for example, as the round icon
     * for main activity that is displayed in the launcher.  This must be
     * a reference to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:roundIcon
     */
    public static final int AndroidManifestPermissionTree_roundIcon=5;
    /**
     * The <code>process</code> tag enumerates one of the available processes under its
     * containing <code>processes</code> tag.
     * <p>This appears as a child tag of the
     * {@link #AndroidManifestProcesses processes} tag.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestProcess_process android:process}</code></td><td>Specify a specific process that the associated code is to run in.</td></tr>
     * <tr><td><code>{@link #AndroidManifestProcess_gwpAsanMode android:gwpAsanMode}</code></td><td>Enable sampled memory bug detection in this process.</td></tr>
     * <tr><td><code>{@link #AndroidManifestProcess_memtagMode android:memtagMode}</code></td><td>Enable hardware memory tagging (ARM MTE) in this process.</td></tr>
     * <tr><td><code>{@link #AndroidManifestProcess_nativeHeapZeroInitialized android:nativeHeapZeroInitialized}</code></td><td>If {@code true} enables automatic zero initialization of all native heap
     * allocations.</td></tr>
     * </table>
     * @see #AndroidManifestProcess_process
     * @see #AndroidManifestProcess_gwpAsanMode
     * @see #AndroidManifestProcess_memtagMode
     * @see #AndroidManifestProcess_nativeHeapZeroInitialized
     */
    public static final int[] AndroidManifestProcess={
      0x01010011, 0x01010616, 0x01010624, 0x01010625
    };
    /**
     * <p>
     * @attr description
     * Required name of the process that is allowed
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:process
     */
    public static final int AndroidManifestProcess_process=0;
    /**
     * <p>
     * @attr description
     * Enable sampled memory bug detection in this process.
     * When enabled, a very small, random subset of native
     * memory allocations are protected with guard pages, providing an
     * ASan-like error report in case of a memory corruption bug.
     * GWP-ASan is a recursive acronym. It stands for “GWP-ASan Will Provide Allocation SANity”.
     * See the <a href="http://llvm.org/docs/GwpAsan.html">LLVM documentation</a>
     * for more information about this feature.
     * <p>This attribute can be applied to a
     * {@link android.R.styleable#AndroidManifestProcess process} tag, or to an
     * {@link android.R.styleable#AndroidManifestApplication application} tag (to supply
     * a default setting for all application components).
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>always</td><td>1</td><td>Always enable GwpAsan.</td></tr>
     * <tr><td>default</td><td>ffffffff</td><td>Default behavior: GwpAsan is disabled in user apps, randomly enabled in system apps.</td></tr>
     * <tr><td>never</td><td>0</td><td>Never enable GwpAsan.</td></tr>
     * </table>
     *
     * @attr name android:gwpAsanMode
     */
    public static final int AndroidManifestProcess_gwpAsanMode=1;
    /**
     * <p>
     * @attr description
     * Enable hardware memory tagging (ARM MTE) in this process.
     * When enabled, heap memory bugs like use-after-free and buffer overlow
     * are detected and result in an immediate ("sync" mode) or delayed ("async"
     * mode) crash instead of a silent memory corruption. Sync mode, while slower,
     * provides enhanced bug reports including stack traces at the time of allocation
     * and deallocation of memory, similar to AddressSanitizer.
     * See the <a href="https://community.arm.com/developer/ip-products/processors/b/processors-ip-blog/posts/enhancing-memory-safety">ARM announcement</a>
     * for more details.
     * <p>This attribute can be applied to a
     * {@link android.R.styleable#AndroidManifestProcess process} tag, or to an
     * {@link android.R.styleable#AndroidManifestApplication application} tag (to supply
     * a default setting for all application components).
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>async</td><td>1</td><td></td></tr>
     * <tr><td>default</td><td>ffffffff</td><td></td></tr>
     * <tr><td>off</td><td>0</td><td></td></tr>
     * <tr><td>sync</td><td>2</td><td></td></tr>
     * </table>
     *
     * @attr name android:memtagMode
     */
    public static final int AndroidManifestProcess_memtagMode=2;
    /**
     * <p>
     * @attr description
     * If {@code true} enables automatic zero initialization of all native heap
     * allocations.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:nativeHeapZeroInitialized
     */
    public static final int AndroidManifestProcess_nativeHeapZeroInitialized=3;
    public static final int[] AndroidManifestProcesses={
    };
    /**
     * Attributes that can be used with a AndroidManifestProfileable.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestProfileable_enabled android:enabled}</code></td><td>Specifies whether the widget is enabled.</td></tr>
     * <tr><td><code>{@link #AndroidManifestProfileable_shell android:shell}</code></td><td>Flag indicating whether the application can be profiled by the shell user,
     * even when running on a device that is running in user mode.</td></tr>
     * </table>
     * @see #AndroidManifestProfileable_enabled
     * @see #AndroidManifestProfileable_shell
     */
    public static final int[] AndroidManifestProfileable={
      0x0101000e, 0x01010594
    };
    /**
     * <p>
     * @attr description
     * Flag indicating whether the application can be profiled by system services, but not
     * necessarily via shell tools (for which also android:shell="true" must be set). If
     * false, the application cannot be profiled at all. Defaults to true.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:enabled
     */
    public static final int AndroidManifestProfileable_enabled=0;
    /**
     * <p>
     * @attr description
     * Flag indicating whether the application can be profiled by the shell user,
     * even when running on a device that is running in user mode.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:shell
     */
    public static final int AndroidManifestProfileable_shell=1;
    /**
     * The <code>property</code> tag is used to attach additional data that can
     * be supplied to the parent component. A component element can contain any
     * number of <code>property</code> subelements. Valid names are any of the
     * <code>PROPERTY_</code> constants defined in the
     * {@link android.content.pm.PackageManager PackageManager} class. Values
     * are obtained using the appropriate method on the
     * {@link android.content.pm.PackageManager.Property PackageManager.Property} class.
     * <p>Ordinary values are specified through the value attribute. Resource IDs are
     * specified through the resource attribute.
     * <p>It is invalid to specify both a value and resource attributes.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestProperty_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestProperty_value android:value}</code></td><td>Concrete value to assign to this piece of named meta-data.</td></tr>
     * <tr><td><code>{@link #AndroidManifestProperty_resource android:resource}</code></td><td>Resource identifier to assign to this piece of named meta-data.</td></tr>
     * </table>
     * @see #AndroidManifestProperty_name
     * @see #AndroidManifestProperty_value
     * @see #AndroidManifestProperty_resource
     */
    public static final int[] AndroidManifestProperty={
      0x01010003, 0x01010024, 0x01010025
    };
    /**
     * <p>
     * @attr description
     * A unique name for the given item.  This must use a Java-style naming
     * convention to ensure the name is unique, for example
     * "com.mycompany.MyName".
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AndroidManifestProperty_name=0;
    /**
     * <p>
     * @attr description
     * Concrete value to assign to this property.
     * The data can later be retrieved from the property object
     * through
     * {@link android.content.pm.PackageManager.Property#getString Property.getString},
     * {@link android.content.pm.PackageManager.Property#getInteger Property.getInteger},
     * {@link android.content.pm.PackageManager.Property#getBoolean Property.getBoolean},
     * or {@link android.content.pm.PackageManager.Property#getFloat Property.getFloat}
     * depending on the type used here.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:value
     */
    public static final int AndroidManifestProperty_value=1;
    /**
     * <p>
     * @attr description
     * The resource identifier to assign to this property.
     * The resource identifier can later be retrieved from the property object through
     * {@link android.content.pm.PackageManager.Property#getResourceId Property.getResourceId}.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:resource
     */
    public static final int AndroidManifestProperty_resource=2;
    /**
     * Private tag to declare system protected broadcast actions.
     * <p>This appears as a child tag of the root
     * {@link #AndroidManifest manifest} tag.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestProtectedBroadcast_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * </table>
     * @see #AndroidManifestProtectedBroadcast_name
     */
    public static final int[] AndroidManifestProtectedBroadcast={
      0x01010003
    };
    /**
     * <p>
     * @attr description
     * A unique name for the given item.  This must use a Java-style naming
     * convention to ensure the name is unique, for example
     * "com.mycompany.MyName".
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AndroidManifestProtectedBroadcast_name=0;
    /**
     * The <code>provider</code> tag declares a
     * {@link android.content.ContentProvider} class that is available
     * as part of the package's application components, supplying structured
     * access to data managed by the application.
     * <p>This appears as a child tag of the
     * {@link #AndroidManifestApplication application} tag.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestProvider_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestProvider_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestProvider_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestProvider_permission android:permission}</code></td><td>Specify a permission that a client is required to have in order to
     * use the associated object.</td></tr>
     * <tr><td><code>{@link #AndroidManifestProvider_readPermission android:readPermission}</code></td><td>A specific {@link android.R.attr#permission} name for read-only
     * access to a {@link android.content.ContentProvider}.</td></tr>
     * <tr><td><code>{@link #AndroidManifestProvider_writePermission android:writePermission}</code></td><td>A specific {@link android.R.attr#permission} name for write
     * access to a {@link android.content.ContentProvider}.</td></tr>
     * <tr><td><code>{@link #AndroidManifestProvider_enabled android:enabled}</code></td><td>Specifies whether the widget is enabled.</td></tr>
     * <tr><td><code>{@link #AndroidManifestProvider_exported android:exported}</code></td><td>Flag indicating whether the given application component is available
     * to other applications.</td></tr>
     * <tr><td><code>{@link #AndroidManifestProvider_process android:process}</code></td><td>Specify a specific process that the associated code is to run in.</td></tr>
     * <tr><td><code>{@link #AndroidManifestProvider_multiprocess android:multiprocess}</code></td><td>Specify whether a component is allowed to have multiple instances
     * of itself running in different processes.</td></tr>
     * <tr><td><code>{@link #AndroidManifestProvider_authorities android:authorities}</code></td><td>Specify the authorities under which this content provider can be
     * found.</td></tr>
     * <tr><td><code>{@link #AndroidManifestProvider_syncable android:syncable}</code></td><td>Flag indicating whether this content provider would like to
     * participate in data synchronization.</td></tr>
     * <tr><td><code>{@link #AndroidManifestProvider_initOrder android:initOrder}</code></td><td>Specify the order in which content providers hosted by a process
     * are instantiated when that process is created.</td></tr>
     * <tr><td><code>{@link #AndroidManifestProvider_grantUriPermissions android:grantUriPermissions}</code></td><td>If true, the {@link android.content.Context#grantUriPermission
     * Context.grantUriPermission} or corresponding Intent flags can
     * be used to allow others to access specific URIs in the content
     * provider, even if they do not have an explicit read or write
     * permission.</td></tr>
     * <tr><td><code>{@link #AndroidManifestProvider_description android:description}</code></td><td>Descriptive text for the associated data.</td></tr>
     * <tr><td><code>{@link #AndroidManifestProvider_logo android:logo}</code></td><td>A Drawable resource providing an extended graphical logo for its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestProvider_singleUser android:singleUser}</code></td><td>If set to true, a single instance of this component will run for
     * all users.</td></tr>
     * <tr><td><code>{@link #AndroidManifestProvider_banner android:banner}</code></td><td>A Drawable resource providing an extended graphical banner for its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestProvider_directBootAware android:directBootAware}</code></td><td>Indicate if this component is aware of direct boot lifecycle, and can be
     * safely run before the user has entered their credentials (such as a lock
     * pattern or PIN).</td></tr>
     * <tr><td><code>{@link #AndroidManifestProvider_roundIcon android:roundIcon}</code></td><td>A Drawable resource providing a graphical representation of its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestProvider_visibleToInstantApps android:visibleToInstantApps}</code></td><td>Specify whether a component should be visible to instant apps.</td></tr>
     * <tr><td><code>{@link #AndroidManifestProvider_splitName android:splitName}</code></td><td>When an application is partitioned into splits, this is the name of the
     * split that contains the defined component.</td></tr>
     * <tr><td><code>{@link #AndroidManifestProvider_forceUriPermissions android:forceUriPermissions}</code></td><td>If true, the system will always create URI permission grants
     * in the cases where {@link android.content.Intent#FLAG_GRANT_READ_URI_PERMISSION}
     * or {@link android.content.Intent#FLAG_GRANT_WRITE_URI_PERMISSION} would apply.</td></tr>
     * <tr><td><code>{@link #AndroidManifestProvider_attributionTags android:attributionTags}</code></td><td>Attribution tag to be used for permission sub-attribution if a
     * permission is checked in  {@link android.content.Context#sendBroadcast(Intent, String)}.</td></tr>
     * </table>
     * @see #AndroidManifestProvider_label
     * @see #AndroidManifestProvider_icon
     * @see #AndroidManifestProvider_name
     * @see #AndroidManifestProvider_permission
     * @see #AndroidManifestProvider_readPermission
     * @see #AndroidManifestProvider_writePermission
     * @see #AndroidManifestProvider_enabled
     * @see #AndroidManifestProvider_exported
     * @see #AndroidManifestProvider_process
     * @see #AndroidManifestProvider_multiprocess
     * @see #AndroidManifestProvider_authorities
     * @see #AndroidManifestProvider_syncable
     * @see #AndroidManifestProvider_initOrder
     * @see #AndroidManifestProvider_grantUriPermissions
     * @see #AndroidManifestProvider_description
     * @see #AndroidManifestProvider_logo
     * @see #AndroidManifestProvider_singleUser
     * @see #AndroidManifestProvider_banner
     * @see #AndroidManifestProvider_directBootAware
     * @see #AndroidManifestProvider_roundIcon
     * @see #AndroidManifestProvider_visibleToInstantApps
     * @see #AndroidManifestProvider_splitName
     * @see #AndroidManifestProvider_forceUriPermissions
     * @see #AndroidManifestProvider_attributionTags
     */
    public static final int[] AndroidManifestProvider={
      0x01010001, 0x01010002, 0x01010003, 0x01010006, 
      0x01010007, 0x01010008, 0x0101000e, 0x01010010, 
      0x01010011, 0x01010013, 0x01010018, 0x01010019, 
      0x0101001a, 0x0101001b, 0x01010020, 0x010102be, 
      0x010103bf, 0x010103f2, 0x01010505, 0x0101052c, 
      0x01010531, 0x01010549, 0x0101059f, 0x01010642
    };
    /**
     * <p>
     * @attr description
     * A user-legible name for the given item.  Use with the
     * application tag (to supply a default label for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific label for that component).  It may also be
     * used with the intent-filter tag to supply a label to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given label will be used wherever the user sees information
     * about its associated component; for example, as the name of a
     * main activity that is displayed in the launcher.  You should
     * generally set this to a reference to a string resource, so that
     * it can be localized, however it is also allowed to supply a plain
     * string for quick and dirty programming.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:label
     */
    public static final int AndroidManifestProvider_label=0;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing a graphical representation of its
     * associated item.  Use with the
     * application tag (to supply a default icon for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific icon for that component).  It may also be
     * used with the intent-filter tag to supply an icon to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given icon will be used to display to the user a graphical
     * representation of its associated component; for example, as the icon
     * for main activity that is displayed in the launcher.  This must be
     * a reference to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:icon
     */
    public static final int AndroidManifestProvider_icon=1;
    /**
     * <p>
     * @attr description
     * Required name of the class implementing the provider, deriving from
     * {@link android.content.ContentProvider}.  This is a fully
     * qualified class name (for example, com.mycompany.myapp.MyProvider); as a
     * short-hand if the first character of the class
     * is a period then it is appended to your package name.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AndroidManifestProvider_name=2;
    /**
     * <p>
     * @attr description
     * Specify a permission that a client is required to have in order to
     * use the associated object.  If the client does not hold the named
     * permission, its request will fail.  See the
     * <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
     * document for more information on permissions.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:permission
     */
    public static final int AndroidManifestProvider_permission=3;
    /**
     * <p>
     * @attr description
     * A specific {@link android.R.attr#permission} name for read-only
     * access to a {@link android.content.ContentProvider}.  See the
     * <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
     * document for more information on permissions.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:readPermission
     */
    public static final int AndroidManifestProvider_readPermission=4;
    /**
     * <p>
     * @attr description
     * A specific {@link android.R.attr#permission} name for write
     * access to a {@link android.content.ContentProvider}.  See the
     * <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
     * document for more information on permissions.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:writePermission
     */
    public static final int AndroidManifestProvider_writePermission=5;
    /**
     * <p>
     * @attr description
     * Specify whether this provider is enabled or not (that is, can be instantiated by the system).
     * It can also be specified for an application as a whole, in which case a value of "false"
     * will override any component specific values (a value of "true" will not override the
     * component specific values).
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:enabled
     */
    public static final int AndroidManifestProvider_enabled=6;
    /**
     * <p>
     * @attr description
     * Flag indicating whether the given application component is available
     * to other applications.  If false, it can only be accessed by
     * applications with its same user id (which usually means only by
     * code in its own package).  If true, it can be invoked by external
     * entities, though which ones can do so may be controlled through
     * permissions.  The default value is false for activity, receiver,
     * and service components that do not specify any intent filters; it
     * is true for activity, receiver, and service components that do
     * have intent filters (implying they expect to be invoked by others
     * who do not know their particular component name) and for all
     * content providers.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:exported
     */
    public static final int AndroidManifestProvider_exported=7;
    /**
     * <p>
     * @attr description
     * Specify a specific process that the associated code is to run in.
     * Use with the application tag (to supply a default process for all
     * application components), or with the activity, receiver, service,
     * or provider tag (to supply a specific icon for that component).
     * <p>Application components are normally run in a single process that
     * is created for the entire application.  You can use this tag to modify
     * where they run.  If the process name begins with a ':' character,
     * a new process private to that application will be created when needed
     * to run that component (allowing you to spread your application across
     * multiple processes).  If the process name begins with a lower-case
     * character, the component will be run in a global process of that name,
     * provided that you have permission to do so, allowing multiple
     * applications to share one process to reduce resource usage.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:process
     */
    public static final int AndroidManifestProvider_process=8;
    /**
     * <p>
     * @attr description
     * Specify whether a component is allowed to have multiple instances
     * of itself running in different processes.  Use with the activity
     * and provider tags.
     * <p>Normally the system will ensure that all instances of a particular
     * component are only running in a single process.  You can use this
     * attribute to disable that behavior, allowing the system to create
     * instances wherever they are used (provided permissions allow it).
     * This is most often used with content providers, so that instances
     * of a provider can be created in each client process, allowing them
     * to be used without performing IPC.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:multiprocess
     */
    public static final int AndroidManifestProvider_multiprocess=9;
    /**
     * <p>
     * @attr description
     * Specify the authorities under which this content provider can be
     * found.  Multiple authorities may be supplied by separating them
     * with a semicolon.  Authority names should use a Java-style naming
     * convention (such as <code>com.google.provider.MyProvider</code>)
     * in order to avoid conflicts.  Typically this name is the same
     * as the class implementation describing the provider's data structure.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:authorities
     */
    public static final int AndroidManifestProvider_authorities=10;
    /**
     * <p>
     * @attr description
     * Flag indicating whether this content provider would like to
     * participate in data synchronization.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:syncable
     */
    public static final int AndroidManifestProvider_syncable=11;
    /**
     * <p>
     * @attr description
     * Specify the order in which content providers hosted by a process
     * are instantiated when that process is created.  Not needed unless
     * you have providers with dependencies between each other, to make
     * sure that they are created in the order needed by those dependencies.
     * The value is a simple integer, with higher numbers being
     * initialized first.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:initOrder
     */
    public static final int AndroidManifestProvider_initOrder=12;
    /**
     * <p>
     * @attr description
     * If true, the {@link android.content.Context#grantUriPermission
     * Context.grantUriPermission} or corresponding Intent flags can
     * be used to allow others to access specific URIs in the content
     * provider, even if they do not have an explicit read or write
     * permission.  If you are supporting this feature, you must be
     * sure to call {@link android.content.Context#revokeUriPermission
     * Context.revokeUriPermission} when URIs are deleted from your
     * provider.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:grantUriPermissions
     */
    public static final int AndroidManifestProvider_grantUriPermissions=13;
    /**
     * <p>
     * @attr description
     * Descriptive text for the associated data.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:description
     */
    public static final int AndroidManifestProvider_description=14;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing an extended graphical logo for its
     * associated item. Use with the application tag (to supply a default
     * logo for all application components), or with the activity, receiver,
     * service, or instrumentation tag (to supply a specific logo for that
     * component). It may also be used with the intent-filter tag to supply
     * a logo to show to the user when an activity is being selected based
     * on a particular Intent.
     * <p>The given logo will be used to display to the user a graphical
     * representation of its associated component; for example as the
     * header in the Action Bar. The primary differences between an icon
     * and a logo are that logos are often wider and more detailed, and are
     * used without an accompanying text caption. This must be a reference
     * to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:logo
     */
    public static final int AndroidManifestProvider_logo=15;
    /**
     * <p>
     * @attr description
     * If set to true, a single instance of this component will run for
     * all users.  That instance will run as user 0, the default/primary
     * user.  When the app running is in processes for other users and interacts
     * with this component (by binding to a service for example) those processes will
     * always interact with the instance running for user 0.  Enabling
     * single user mode forces "exported" of the component to be false, to
     * help avoid introducing multi-user security bugs.  This feature is only
     * available to applications built in to the system image; you must hold the
     * permission INTERACT_ACROSS_USERS in order
     * to use this feature.  This flag can only be used with services,
     * receivers, and providers; it can not be used with activities.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:singleUser
     */
    public static final int AndroidManifestProvider_singleUser=16;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing an extended graphical banner for its
     * associated item. Use with the application tag (to supply a default
     * banner for all application activities), or with the activity, tag to
     * supply a banner for a specific activity.
     * <p>The given banner will be used to display to the user a graphical
     * representation of an activity in the Leanback application launcher.
     * Since banners are displayed only in the Leanback launcher, they should
     * only be used with activities (and applications) that support Leanback
     * mode. These are activities that handle Intents of category
     * {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
     * Intent.CATEGORY_LEANBACK_LAUNCHER}.
     * <p>This must be a reference to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:banner
     */
    public static final int AndroidManifestProvider_banner=17;
    /**
     * <p>
     * @attr description
     * Indicate if this component is aware of direct boot lifecycle, and can be
     * safely run before the user has entered their credentials (such as a lock
     * pattern or PIN).
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:directBootAware
     */
    public static final int AndroidManifestProvider_directBootAware=18;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing a graphical representation of its
     * associated item.  Use with the
     * application tag (to supply a default round icon for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific round icon for that component).  It may also be
     * used with the intent-filter tag to supply a round icon to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given round icon will be used to display to the user a graphical
     * representation of its associated component; for example, as the round icon
     * for main activity that is displayed in the launcher.  This must be
     * a reference to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:roundIcon
     */
    public static final int AndroidManifestProvider_roundIcon=19;
    /**
     * <p>
     * @attr description
     * Specify whether a component should be visible to instant apps.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:visibleToInstantApps
     */
    public static final int AndroidManifestProvider_visibleToInstantApps=20;
    /**
     * <p>
     * @attr description
     * The code for this component is located in the given split.
     * <p>NOTE: This is only applicable to instant app.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:splitName
     */
    public static final int AndroidManifestProvider_splitName=21;
    /**
     * <p>
     * @attr description
     * If true, the system will always create URI permission grants
     * in the cases where {@link android.content.Intent#FLAG_GRANT_READ_URI_PERMISSION}
     * or {@link android.content.Intent#FLAG_GRANT_WRITE_URI_PERMISSION} would apply.
     * This is useful for a content provider that dynamically enforces permissions
     * on calls in to the provider, instead of through the manifest: the system
     * needs to know that it should always apply permission grants, even if it
     * looks like the target of the grant would already have access to the URI.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:forceUriPermissions
     */
    public static final int AndroidManifestProvider_forceUriPermissions=22;
    /**
     * <p>
     * @attr description
     * Set of attribution tags that should be automatically applied to this component.
     * <p>
     * Each instance of this ContentProvider will be automatically configured with
     * Context.createAttributionContext() using the first attribution tag
     * contained here.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:attributionTags
     */
    public static final int AndroidManifestProvider_attributionTags=23;
    /**
     * Attributes that can be used with a AndroidManifestPublicKey.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestPublicKey_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestPublicKey_value android:value}</code></td><td>Concrete value to assign to this piece of named meta-data.</td></tr>
     * </table>
     * @see #AndroidManifestPublicKey_name
     * @see #AndroidManifestPublicKey_value
     */
    public static final int[] AndroidManifestPublicKey={
      0x01010003, 0x01010024
    };
    /**
     * <p>
     * @attr description
     * A unique name for the given item.  This must use a Java-style naming
     * convention to ensure the name is unique, for example
     * "com.mycompany.MyName".
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AndroidManifestPublicKey_name=0;
    /**
     * <p>
     * @attr description
     * Concrete value to assign to this piece of named meta-data.
     * The data can later be retrieved from the meta data Bundle
     * through {@link android.os.Bundle#getString Bundle.getString},
     * {@link android.os.Bundle#getInt Bundle.getInt},
     * {@link android.os.Bundle#getBoolean Bundle.getBoolean},
     * or {@link android.os.Bundle#getFloat Bundle.getFloat} depending
     * on the type used here.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:value
     */
    public static final int AndroidManifestPublicKey_value=1;
    public static final int[] AndroidManifestQueries={
    };
    public static final int[] AndroidManifestQueriesIntent={
    };
    /**
     * Attributes that can be used with a AndroidManifestQueriesPackage.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestQueriesPackage_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * </table>
     * @see #AndroidManifestQueriesPackage_name
     */
    public static final int[] AndroidManifestQueriesPackage={
      0x01010003
    };
    /**
     * <p>
     * @attr description
     * A unique name for the given item.  This must use a Java-style naming
     * convention to ensure the name is unique, for example
     * "com.mycompany.MyName".
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AndroidManifestQueriesPackage_name=0;
    /**
     * Attributes that can be used with a AndroidManifestQueriesProvider.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestQueriesProvider_authorities android:authorities}</code></td><td>Specify the authorities under which this content provider can be
     * found.</td></tr>
     * </table>
     * @see #AndroidManifestQueriesProvider_authorities
     */
    public static final int[] AndroidManifestQueriesProvider={
      0x01010018
    };
    /**
     * <p>
     * @attr description
     * Specify the authorities under which this content provider can be
     * found.  Multiple authorities may be supplied by separating them
     * with a semicolon.  Authority names should use a Java-style naming
     * convention (such as <code>com.google.provider.MyProvider</code>)
     * in order to avoid conflicts.  Typically this name is the same
     * as the class implementation describing the provider's data structure.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:authorities
     */
    public static final int AndroidManifestQueriesProvider_authorities=0;
    /**
     * The <code>receiver</code> tag declares an
     * {@link android.content.BroadcastReceiver} class that is available
     * as part of the package's application components, allowing the
     * application to receive actions or data broadcast by other
     * applications even if it is not currently running.
     * <p>Zero or more {@link #AndroidManifestIntentFilter intent-filter}
     * tags can be included inside of a receiver, to specify the Intents
     * it will receive.  If none are specified, the receiver will only
     * be run when an Intent is broadcast that is directed at its specific
     * class name.  The receiver tag appears as a child tag of the
     * {@link #AndroidManifestApplication application} tag.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestReceiver_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestReceiver_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestReceiver_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestReceiver_permission android:permission}</code></td><td>Specify a permission that a client is required to have in order to
     * use the associated object.</td></tr>
     * <tr><td><code>{@link #AndroidManifestReceiver_enabled android:enabled}</code></td><td>Specifies whether the widget is enabled.</td></tr>
     * <tr><td><code>{@link #AndroidManifestReceiver_exported android:exported}</code></td><td>Flag indicating whether the given application component is available
     * to other applications.</td></tr>
     * <tr><td><code>{@link #AndroidManifestReceiver_process android:process}</code></td><td>Specify a specific process that the associated code is to run in.</td></tr>
     * <tr><td><code>{@link #AndroidManifestReceiver_description android:description}</code></td><td>Descriptive text for the associated data.</td></tr>
     * <tr><td><code>{@link #AndroidManifestReceiver_logo android:logo}</code></td><td>A Drawable resource providing an extended graphical logo for its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestReceiver_singleUser android:singleUser}</code></td><td>If set to true, a single instance of this component will run for
     * all users.</td></tr>
     * <tr><td><code>{@link #AndroidManifestReceiver_banner android:banner}</code></td><td>A Drawable resource providing an extended graphical banner for its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestReceiver_directBootAware android:directBootAware}</code></td><td>Indicate if this component is aware of direct boot lifecycle, and can be
     * safely run before the user has entered their credentials (such as a lock
     * pattern or PIN).</td></tr>
     * <tr><td><code>{@link #AndroidManifestReceiver_roundIcon android:roundIcon}</code></td><td>A Drawable resource providing a graphical representation of its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestReceiver_attributionTags android:attributionTags}</code></td><td>Attribution tag to be used for permission sub-attribution if a
     * permission is checked in  {@link android.content.Context#sendBroadcast(Intent, String)}.</td></tr>
     * </table>
     * @see #AndroidManifestReceiver_label
     * @see #AndroidManifestReceiver_icon
     * @see #AndroidManifestReceiver_name
     * @see #AndroidManifestReceiver_permission
     * @see #AndroidManifestReceiver_enabled
     * @see #AndroidManifestReceiver_exported
     * @see #AndroidManifestReceiver_process
     * @see #AndroidManifestReceiver_description
     * @see #AndroidManifestReceiver_logo
     * @see #AndroidManifestReceiver_singleUser
     * @see #AndroidManifestReceiver_banner
     * @see #AndroidManifestReceiver_directBootAware
     * @see #AndroidManifestReceiver_roundIcon
     * @see #AndroidManifestReceiver_attributionTags
     */
    public static final int[] AndroidManifestReceiver={
      0x01010001, 0x01010002, 0x01010003, 0x01010006, 
      0x0101000e, 0x01010010, 0x01010011, 0x01010020, 
      0x010102be, 0x010103bf, 0x010103f2, 0x01010505, 
      0x0101052c, 0x01010642
    };
    /**
     * <p>
     * @attr description
     * A user-legible name for the given item.  Use with the
     * application tag (to supply a default label for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific label for that component).  It may also be
     * used with the intent-filter tag to supply a label to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given label will be used wherever the user sees information
     * about its associated component; for example, as the name of a
     * main activity that is displayed in the launcher.  You should
     * generally set this to a reference to a string resource, so that
     * it can be localized, however it is also allowed to supply a plain
     * string for quick and dirty programming.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:label
     */
    public static final int AndroidManifestReceiver_label=0;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing a graphical representation of its
     * associated item.  Use with the
     * application tag (to supply a default icon for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific icon for that component).  It may also be
     * used with the intent-filter tag to supply an icon to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given icon will be used to display to the user a graphical
     * representation of its associated component; for example, as the icon
     * for main activity that is displayed in the launcher.  This must be
     * a reference to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:icon
     */
    public static final int AndroidManifestReceiver_icon=1;
    /**
     * <p>
     * @attr description
     * Required name of the class implementing the receiver, deriving from
     * {@link android.content.BroadcastReceiver}.  This is a fully
     * qualified class name (for example, com.mycompany.myapp.MyReceiver); as a
     * short-hand if the first character of the class
     * is a period then it is appended to your package name.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AndroidManifestReceiver_name=2;
    /**
     * <p>
     * @attr description
     * Specify a permission that a client is required to have in order to
     * use the associated object.  If the client does not hold the named
     * permission, its request will fail.  See the
     * <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
     * document for more information on permissions.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:permission
     */
    public static final int AndroidManifestReceiver_permission=3;
    /**
     * <p>
     * @attr description
     * Specify whether the receiver is enabled or not (that is, can be instantiated by the system).
     * It can also be specified for an application as a whole, in which case a value of "false"
     * will override any component specific values (a value of "true" will not override the
     * component specific values).
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:enabled
     */
    public static final int AndroidManifestReceiver_enabled=4;
    /**
     * <p>
     * @attr description
     * Flag indicating whether the given application component is available
     * to other applications.  If false, it can only be accessed by
     * applications with its same user id (which usually means only by
     * code in its own package).  If true, it can be invoked by external
     * entities, though which ones can do so may be controlled through
     * permissions.  The default value is false for activity, receiver,
     * and service components that do not specify any intent filters; it
     * is true for activity, receiver, and service components that do
     * have intent filters (implying they expect to be invoked by others
     * who do not know their particular component name) and for all
     * content providers.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:exported
     */
    public static final int AndroidManifestReceiver_exported=5;
    /**
     * <p>
     * @attr description
     * Specify a specific process that the associated code is to run in.
     * Use with the application tag (to supply a default process for all
     * application components), or with the activity, receiver, service,
     * or provider tag (to supply a specific icon for that component).
     * <p>Application components are normally run in a single process that
     * is created for the entire application.  You can use this tag to modify
     * where they run.  If the process name begins with a ':' character,
     * a new process private to that application will be created when needed
     * to run that component (allowing you to spread your application across
     * multiple processes).  If the process name begins with a lower-case
     * character, the component will be run in a global process of that name,
     * provided that you have permission to do so, allowing multiple
     * applications to share one process to reduce resource usage.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:process
     */
    public static final int AndroidManifestReceiver_process=6;
    /**
     * <p>
     * @attr description
     * Descriptive text for the associated data.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:description
     */
    public static final int AndroidManifestReceiver_description=7;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing an extended graphical logo for its
     * associated item. Use with the application tag (to supply a default
     * logo for all application components), or with the activity, receiver,
     * service, or instrumentation tag (to supply a specific logo for that
     * component). It may also be used with the intent-filter tag to supply
     * a logo to show to the user when an activity is being selected based
     * on a particular Intent.
     * <p>The given logo will be used to display to the user a graphical
     * representation of its associated component; for example as the
     * header in the Action Bar. The primary differences between an icon
     * and a logo are that logos are often wider and more detailed, and are
     * used without an accompanying text caption. This must be a reference
     * to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:logo
     */
    public static final int AndroidManifestReceiver_logo=8;
    /**
     * <p>
     * @attr description
     * If set to true, a single instance of this component will run for
     * all users.  That instance will run as user 0, the default/primary
     * user.  When the app running is in processes for other users and interacts
     * with this component (by binding to a service for example) those processes will
     * always interact with the instance running for user 0.  Enabling
     * single user mode forces "exported" of the component to be false, to
     * help avoid introducing multi-user security bugs.  This feature is only
     * available to applications built in to the system image; you must hold the
     * permission INTERACT_ACROSS_USERS in order
     * to use this feature.  This flag can only be used with services,
     * receivers, and providers; it can not be used with activities.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:singleUser
     */
    public static final int AndroidManifestReceiver_singleUser=9;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing an extended graphical banner for its
     * associated item. Use with the application tag (to supply a default
     * banner for all application activities), or with the activity, tag to
     * supply a banner for a specific activity.
     * <p>The given banner will be used to display to the user a graphical
     * representation of an activity in the Leanback application launcher.
     * Since banners are displayed only in the Leanback launcher, they should
     * only be used with activities (and applications) that support Leanback
     * mode. These are activities that handle Intents of category
     * {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
     * Intent.CATEGORY_LEANBACK_LAUNCHER}.
     * <p>This must be a reference to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:banner
     */
    public static final int AndroidManifestReceiver_banner=10;
    /**
     * <p>
     * @attr description
     * Indicate if this component is aware of direct boot lifecycle, and can be
     * safely run before the user has entered their credentials (such as a lock
     * pattern or PIN).
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:directBootAware
     */
    public static final int AndroidManifestReceiver_directBootAware=11;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing a graphical representation of its
     * associated item.  Use with the
     * application tag (to supply a default round icon for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific round icon for that component).  It may also be
     * used with the intent-filter tag to supply a round icon to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given round icon will be used to display to the user a graphical
     * representation of its associated component; for example, as the round icon
     * for main activity that is displayed in the launcher.  This must be
     * a reference to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:roundIcon
     */
    public static final int AndroidManifestReceiver_roundIcon=12;
    /**
     * <p>
     * @attr description
     * Set of attribution tags that should be automatically applied to this component.
     * <p>
     * Each instance of this BroadcastReceiver will be automatically configured with
     * Context.createAttributionContext() using the first attribution tag
     * contained here.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:attributionTags
     */
    public static final int AndroidManifestReceiver_attributionTags=13;
    /**
     * <code>required-feature</code> and <code>required-not-feature</code> elements inside
     * <code>uses-permission<code/> can be used to request the permission based on the fact
     * whether the system supports or does not support certain features.
     * If multiple <code>required-feature</code> and/or <code>required-not-feature</code> elements
     * are present, the permission will be “requested” only if the system supports all of the
     * listed "required-features" and does not support any of the "required-not-features".
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestRequiredFeature_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * </table>
     * @see #AndroidManifestRequiredFeature_name
     */
    public static final int[] AndroidManifestRequiredFeature={
      0x01010003
    };
    /**
     * <p>
     * @attr description
     * The name of the feature.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AndroidManifestRequiredFeature_name=0;
    /**
     * Attributes that can be used with a AndroidManifestRequiredNotFeature.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestRequiredNotFeature_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * </table>
     * @see #AndroidManifestRequiredNotFeature_name
     */
    public static final int[] AndroidManifestRequiredNotFeature={
      0x01010003
    };
    /**
     * <p>
     * @attr description
     * The name of the feature.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AndroidManifestRequiredNotFeature_name=0;
    /**
     * Attributes relating to resource overlay packages.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestResourceOverlay_priority android:priority}</code></td><td>Specify the relative importance or ability in handling a particular
     * Intent.</td></tr>
     * <tr><td><code>{@link #AndroidManifestResourceOverlay_targetPackage android:targetPackage}</code></td><td>The name of the application package that an Instrumentation object
     * will run against.</td></tr>
     * <tr><td><code>{@link #AndroidManifestResourceOverlay_category android:category}</code></td><td>The category attribute will be used by the Android platform to present
     * multiple applications that register ISO 7816 Application IDs (AIDs) in the
     * same category uniformly.</td></tr>
     * <tr><td><code>{@link #AndroidManifestResourceOverlay_targetName android:targetName}</code></td><td>The transitionName of the target on which this transition will animation changes.</td></tr>
     * <tr><td><code>{@link #AndroidManifestResourceOverlay_isStatic android:isStatic}</code></td><td>Whether the given RRO is static or not.</td></tr>
     * <tr><td><code>{@link #AndroidManifestResourceOverlay_resourcesMap android:resourcesMap}</code></td><td>The xml file that defines the target id to overlay value mappings.</td></tr>
     * </table>
     * @see #AndroidManifestResourceOverlay_priority
     * @see #AndroidManifestResourceOverlay_targetPackage
     * @see #AndroidManifestResourceOverlay_category
     * @see #AndroidManifestResourceOverlay_targetName
     * @see #AndroidManifestResourceOverlay_isStatic
     * @see #AndroidManifestResourceOverlay_resourcesMap
     */
    public static final int[] AndroidManifestResourceOverlay={
      0x0101001c, 0x01010021, 0x010103e8, 0x0101044d, 
      0x0101055a, 0x01010565, 0x01010566, 0x01010609
    };
    /**
     * <p>
     * @attr description
     * Load order of overlay package.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:priority
     */
    public static final int AndroidManifestResourceOverlay_priority=0;
    /**
     * <p>
     * @attr description
     * Package name of base package whose resources will be overlaid.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:targetPackage
     */
    public static final int AndroidManifestResourceOverlay_targetPackage=1;
    /**
     * <p>
     * @attr description
     * Category of the resource overlay.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:category
     */
    public static final int AndroidManifestResourceOverlay_category=2;
    /**
     * <p>
     * @attr description
     * The name of the overlayable whose resources will be overlaid.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:targetName
     */
    public static final int AndroidManifestResourceOverlay_targetName=3;
    /**
     * <p>
     * @attr description
     * Whether the given RRO is static or not.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:isStatic
     */
    public static final int AndroidManifestResourceOverlay_isStatic=4;
    /**
     * <p>
     * @attr description
     * @hide This shouldn't be public.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:requiredSystemPropertyName
     */
    public static final int AndroidManifestResourceOverlay_requiredSystemPropertyName=5;
    /**
     * <p>
     * @attr description
     * @hide This shouldn't be public.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:requiredSystemPropertyValue
     */
    public static final int AndroidManifestResourceOverlay_requiredSystemPropertyValue=6;
    /**
     * <p>
     * @attr description
     * The xml file that defines the target id to overlay value mappings.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:resourcesMap
     */
    public static final int AndroidManifestResourceOverlay_resourcesMap=7;
    /**
     * <code>restrict-update</code> tag restricts system apps from being updated unless the
     * SHA-512 hash equals the specified value.
     * @hide
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * </table>
     */
    public static final int[] AndroidManifestRestrictUpdate={
      0x01010526
    };
    /**
     * <p>
     * @attr description
     * The SHA-512 hash of the only APK that can be used to update a package.
     * <p>NOTE: This is only applicable to system packages.
     * @hide
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:hash
     */
    public static final int AndroidManifestRestrictUpdate_hash=0;
    /**
     * The <code>service</code> tag declares a
     * {@link android.app.Service} class that is available
     * as part of the package's application components, implementing
     * long-running background operations or a rich communication API
     * that can be called by other packages.
     * <p>Zero or more {@link #AndroidManifestIntentFilter intent-filter}
     * tags can be included inside of a service, to specify the Intents
     * that can connect with it.  If none are specified, the service can
     * only be accessed by direct specification of its class name.
     * The service tag appears as a child tag of the
     * {@link #AndroidManifestApplication application} tag.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestService_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestService_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestService_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestService_permission android:permission}</code></td><td>Specify a permission that a client is required to have in order to
     * use the associated object.</td></tr>
     * <tr><td><code>{@link #AndroidManifestService_enabled android:enabled}</code></td><td>Specifies whether the widget is enabled.</td></tr>
     * <tr><td><code>{@link #AndroidManifestService_exported android:exported}</code></td><td>Flag indicating whether the given application component is available
     * to other applications.</td></tr>
     * <tr><td><code>{@link #AndroidManifestService_process android:process}</code></td><td>Specify a specific process that the associated code is to run in.</td></tr>
     * <tr><td><code>{@link #AndroidManifestService_description android:description}</code></td><td>Descriptive text for the associated data.</td></tr>
     * <tr><td><code>{@link #AndroidManifestService_logo android:logo}</code></td><td>A Drawable resource providing an extended graphical logo for its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestService_stopWithTask android:stopWithTask}</code></td><td>If set to true, this service with be automatically stopped
     * when the user remove a task rooted in an activity owned by
     * the application.</td></tr>
     * <tr><td><code>{@link #AndroidManifestService_isolatedProcess android:isolatedProcess}</code></td><td>If set to true, this service will run under a special process
     * that is isolated from the rest of the system.</td></tr>
     * <tr><td><code>{@link #AndroidManifestService_singleUser android:singleUser}</code></td><td>If set to true, a single instance of this component will run for
     * all users.</td></tr>
     * <tr><td><code>{@link #AndroidManifestService_banner android:banner}</code></td><td>A Drawable resource providing an extended graphical banner for its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestService_directBootAware android:directBootAware}</code></td><td>Indicate if this component is aware of direct boot lifecycle, and can be
     * safely run before the user has entered their credentials (such as a lock
     * pattern or PIN).</td></tr>
     * <tr><td><code>{@link #AndroidManifestService_externalService android:externalService}</code></td><td>If the service is an {@link android.R.attr#isolatedProcess} service, this permits a
     * client to bind to the service as if it were running it its own package.</td></tr>
     * <tr><td><code>{@link #AndroidManifestService_roundIcon android:roundIcon}</code></td><td>A Drawable resource providing a graphical representation of its
     * associated item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestService_visibleToInstantApps android:visibleToInstantApps}</code></td><td>Specify whether a component should be visible to instant apps.</td></tr>
     * <tr><td><code>{@link #AndroidManifestService_splitName android:splitName}</code></td><td>When an application is partitioned into splits, this is the name of the
     * split that contains the defined component.</td></tr>
     * <tr><td><code>{@link #AndroidManifestService_useAppZygote android:useAppZygote}</code></td><td>If true, and this is an {@link android.R.attr#isolatedProcess} service, the service
     * will be spawned from an Application Zygote, instead of the regular Zygote.</td></tr>
     * <tr><td><code>{@link #AndroidManifestService_foregroundServiceType android:foregroundServiceType}</code></td><td>Specify the type of foreground service.</td></tr>
     * <tr><td><code>{@link #AndroidManifestService_attributionTags android:attributionTags}</code></td><td>Attribution tag to be used for permission sub-attribution if a
     * permission is checked in  {@link android.content.Context#sendBroadcast(Intent, String)}.</td></tr>
     * </table>
     * @see #AndroidManifestService_label
     * @see #AndroidManifestService_icon
     * @see #AndroidManifestService_name
     * @see #AndroidManifestService_permission
     * @see #AndroidManifestService_enabled
     * @see #AndroidManifestService_exported
     * @see #AndroidManifestService_process
     * @see #AndroidManifestService_description
     * @see #AndroidManifestService_logo
     * @see #AndroidManifestService_stopWithTask
     * @see #AndroidManifestService_isolatedProcess
     * @see #AndroidManifestService_singleUser
     * @see #AndroidManifestService_banner
     * @see #AndroidManifestService_directBootAware
     * @see #AndroidManifestService_externalService
     * @see #AndroidManifestService_roundIcon
     * @see #AndroidManifestService_visibleToInstantApps
     * @see #AndroidManifestService_splitName
     * @see #AndroidManifestService_useAppZygote
     * @see #AndroidManifestService_foregroundServiceType
     * @see #AndroidManifestService_attributionTags
     */
    public static final int[] AndroidManifestService={
      0x01010001, 0x01010002, 0x01010003, 0x01010006, 
      0x0101000e, 0x01010010, 0x01010011, 0x01010020, 
      0x010102be, 0x0101036a, 0x010103a9, 0x010103bf, 
      0x010103f2, 0x01010505, 0x0101050e, 0x0101052c, 
      0x01010531, 0x01010549, 0x01010597, 0x01010599, 
      0x01010642
    };
    /**
     * <p>
     * @attr description
     * A user-legible name for the given item.  Use with the
     * application tag (to supply a default label for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific label for that component).  It may also be
     * used with the intent-filter tag to supply a label to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given label will be used wherever the user sees information
     * about its associated component; for example, as the name of a
     * main activity that is displayed in the launcher.  You should
     * generally set this to a reference to a string resource, so that
     * it can be localized, however it is also allowed to supply a plain
     * string for quick and dirty programming.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:label
     */
    public static final int AndroidManifestService_label=0;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing a graphical representation of its
     * associated item.  Use with the
     * application tag (to supply a default icon for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific icon for that component).  It may also be
     * used with the intent-filter tag to supply an icon to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given icon will be used to display to the user a graphical
     * representation of its associated component; for example, as the icon
     * for main activity that is displayed in the launcher.  This must be
     * a reference to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:icon
     */
    public static final int AndroidManifestService_icon=1;
    /**
     * <p>
     * @attr description
     * Required name of the class implementing the service, deriving from
     * {@link android.app.Service}.  This is a fully
     * qualified class name (for example, com.mycompany.myapp.MyService); as a
     * short-hand if the first character of the class
     * is a period then it is appended to your package name.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AndroidManifestService_name=2;
    /**
     * <p>
     * @attr description
     * Specify a permission that a client is required to have in order to
     * use the associated object.  If the client does not hold the named
     * permission, its request will fail.  See the
     * <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
     * document for more information on permissions.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:permission
     */
    public static final int AndroidManifestService_permission=3;
    /**
     * <p>
     * @attr description
     * Specify whether the service is enabled or not (that is, can be instantiated by the system).
     * It can also be specified for an application as a whole, in which case a value of "false"
     * will override any component specific values (a value of "true" will not override the
     * component specific values).
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:enabled
     */
    public static final int AndroidManifestService_enabled=4;
    /**
     * <p>
     * @attr description
     * Flag indicating whether the given application component is available
     * to other applications.  If false, it can only be accessed by
     * applications with its same user id (which usually means only by
     * code in its own package).  If true, it can be invoked by external
     * entities, though which ones can do so may be controlled through
     * permissions.  The default value is false for activity, receiver,
     * and service components that do not specify any intent filters; it
     * is true for activity, receiver, and service components that do
     * have intent filters (implying they expect to be invoked by others
     * who do not know their particular component name) and for all
     * content providers.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:exported
     */
    public static final int AndroidManifestService_exported=5;
    /**
     * <p>
     * @attr description
     * Specify a specific process that the associated code is to run in.
     * Use with the application tag (to supply a default process for all
     * application components), or with the activity, receiver, service,
     * or provider tag (to supply a specific icon for that component).
     * <p>Application components are normally run in a single process that
     * is created for the entire application.  You can use this tag to modify
     * where they run.  If the process name begins with a ':' character,
     * a new process private to that application will be created when needed
     * to run that component (allowing you to spread your application across
     * multiple processes).  If the process name begins with a lower-case
     * character, the component will be run in a global process of that name,
     * provided that you have permission to do so, allowing multiple
     * applications to share one process to reduce resource usage.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:process
     */
    public static final int AndroidManifestService_process=6;
    /**
     * <p>
     * @attr description
     * Descriptive text for the associated data.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:description
     */
    public static final int AndroidManifestService_description=7;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing an extended graphical logo for its
     * associated item. Use with the application tag (to supply a default
     * logo for all application components), or with the activity, receiver,
     * service, or instrumentation tag (to supply a specific logo for that
     * component). It may also be used with the intent-filter tag to supply
     * a logo to show to the user when an activity is being selected based
     * on a particular Intent.
     * <p>The given logo will be used to display to the user a graphical
     * representation of its associated component; for example as the
     * header in the Action Bar. The primary differences between an icon
     * and a logo are that logos are often wider and more detailed, and are
     * used without an accompanying text caption. This must be a reference
     * to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:logo
     */
    public static final int AndroidManifestService_logo=8;
    /**
     * <p>
     * @attr description
     * If set to true, this service with be automatically stopped
     * when the user remove a task rooted in an activity owned by
     * the application.  The default is false.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:stopWithTask
     */
    public static final int AndroidManifestService_stopWithTask=9;
    /**
     * <p>
     * @attr description
     * If set to true, this service will run under a special process
     * that is isolated from the rest of the system.  The only communication
     * with it is through the Service API (binding and starting).
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:isolatedProcess
     */
    public static final int AndroidManifestService_isolatedProcess=10;
    /**
     * <p>
     * @attr description
     * If set to true, a single instance of this component will run for
     * all users.  That instance will run as user 0, the default/primary
     * user.  When the app running is in processes for other users and interacts
     * with this component (by binding to a service for example) those processes will
     * always interact with the instance running for user 0.  Enabling
     * single user mode forces "exported" of the component to be false, to
     * help avoid introducing multi-user security bugs.  This feature is only
     * available to applications built in to the system image; you must hold the
     * permission INTERACT_ACROSS_USERS in order
     * to use this feature.  This flag can only be used with services,
     * receivers, and providers; it can not be used with activities.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:singleUser
     */
    public static final int AndroidManifestService_singleUser=11;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing an extended graphical banner for its
     * associated item. Use with the application tag (to supply a default
     * banner for all application activities), or with the activity, tag to
     * supply a banner for a specific activity.
     * <p>The given banner will be used to display to the user a graphical
     * representation of an activity in the Leanback application launcher.
     * Since banners are displayed only in the Leanback launcher, they should
     * only be used with activities (and applications) that support Leanback
     * mode. These are activities that handle Intents of category
     * {@link android.content.Intent#CATEGORY_LEANBACK_LAUNCHER
     * Intent.CATEGORY_LEANBACK_LAUNCHER}.
     * <p>This must be a reference to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:banner
     */
    public static final int AndroidManifestService_banner=12;
    /**
     * <p>
     * @attr description
     * Indicate if this component is aware of direct boot lifecycle, and can be
     * safely run before the user has entered their credentials (such as a lock
     * pattern or PIN).
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:directBootAware
     */
    public static final int AndroidManifestService_directBootAware=13;
    /**
     * <p>
     * @attr description
     * If the service is an {@link android.R.attr#isolatedProcess} service, this permits a
     * client to bind to the service as if it were running it its own package.  The service
     * must also be {@link android.R.attr#exported} if this flag is set.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:externalService
     */
    public static final int AndroidManifestService_externalService=14;
    /**
     * <p>
     * @attr description
     * A Drawable resource providing a graphical representation of its
     * associated item.  Use with the
     * application tag (to supply a default round icon for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific round icon for that component).  It may also be
     * used with the intent-filter tag to supply a round icon to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given round icon will be used to display to the user a graphical
     * representation of its associated component; for example, as the round icon
     * for main activity that is displayed in the launcher.  This must be
     * a reference to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:roundIcon
     */
    public static final int AndroidManifestService_roundIcon=15;
    /**
     * <p>
     * @attr description
     * Specify whether a component should be visible to instant apps.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:visibleToInstantApps
     */
    public static final int AndroidManifestService_visibleToInstantApps=16;
    /**
     * <p>
     * @attr description
     * The code for this component is located in the given split.
     * <p>NOTE: This is only applicable to instant app.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:splitName
     */
    public static final int AndroidManifestService_splitName=17;
    /**
     * <p>
     * @attr description
     * If true, and this is an {@link android.R.attr#isolatedProcess} service, the service
     * will be spawned from an Application Zygote, instead of the regular Zygote.
     * <p>
     * The Application Zygote will first pre-initialize the application's class loader. Then,
     * if the application has defined the {@link android.R.attr#zygotePreloadName} attribute,
     * the Application Zygote will call into that class to allow it to perform
     * application-specific preloads (such as loading a shared library). Therefore,
     * spawning from the Application Zygote will typically reduce the service
     * launch time and reduce its memory usage. The downside of using this flag
     * is that you will have an additional process (the app zygote itself) that
     * is taking up memory. Whether actual memory usage is improved therefore strongly
     * depends on the number of isolated services that an application starts,
     * and how much memory those services save by preloading and sharing memory with
     * the app zygote. Therefore, it is recommended to measure memory usage under
     * typical workloads to determine whether it makes sense to use this flag.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:useAppZygote
     */
    public static final int AndroidManifestService_useAppZygote=18;
    /**
     * <p>
     * @attr description
     * If this is a foreground service, specify its category.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>camera</td><td>40</td><td>Use the camera device or record video.
     * <p>For apps with <code>targetSdkVersion</code> {@link android.os.Build.VERSION_CODES#R}
     * and above, a foreground service will not be able to access the camera if this type is
     * not specified in the manifest and in
     * {@link android.app.Service#startForeground(int, android.app.Notification, int)}.</td></tr>
     * <tr><td>connectedDevice</td><td>10</td><td>Auto, bluetooth, TV or other devices connection, monitoring and interaction.</td></tr>
     * <tr><td>dataSync</td><td>1</td><td>Data (photo, file, account) upload/download, backup/restore, import/export, fetch,
     * transfer over network between device and cloud.</td></tr>
     * <tr><td>location</td><td>8</td><td>GPS, map, navigation location update.</td></tr>
     * <tr><td>mediaPlayback</td><td>2</td><td>Music, video, news or other media play.</td></tr>
     * <tr><td>mediaProjection</td><td>20</td><td>Managing a media projection session, e.g, for screen recording or taking
     * screenshots.</td></tr>
     * <tr><td>microphone</td><td>80</td><td>Use the microphone device or record audio.
     * <p>For apps with <code>targetSdkVersion</code> {@link android.os.Build.VERSION_CODES#R}
     * and above, a foreground service will not be able to access the microphone if this type
     * is not specified in the manifest and in
     * {@link android.app.Service#startForeground(int, android.app.Notification, int)}.</td></tr>
     * <tr><td>phoneCall</td><td>4</td><td>Ongoing operations related to phone calls, video conferencing,
     * or similar interactive communication.</td></tr>
     * </table>
     *
     * @attr name android:foregroundServiceType
     */
    public static final int AndroidManifestService_foregroundServiceType=19;
    /**
     * <p>
     * @attr description
     * Set of attribution tags that should be automatically applied to this component.
     * <p>
     * Each instance of this Service will be automatically configured with
     * Context.createAttributionContext() using the first attribution tag
     * contained here.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:attributionTags
     */
    public static final int AndroidManifestService_attributionTags=20;
    /**
     * The <code>static-library</code> tag declares that this apk is providing itself
     * as a static shared library for other applications to use. Any app can declare such
     * a library and there can be only one static shared library per package. These libraries
     * are updatable, multiple versions can be installed at the same time, and an app links
     * against a specific version simulating static linking while allowing code sharing.
     * Other apks can link to it with the {@link #AndroidManifestUsesLibrary uses-static-library}
     * tag.
     * <p>This appears as a child tag of the
     * {@link #AndroidManifestApplication application} tag.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestStaticLibrary_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestStaticLibrary_version android:version}</code></td><td>The version of the feature that is being used.</td></tr>
     * <tr><td><code>{@link #AndroidManifestStaticLibrary_versionMajor android:versionMajor}</code></td><td>Optional minimum major version of the package that satisfies the dependency.</td></tr>
     * </table>
     * @see #AndroidManifestStaticLibrary_name
     * @see #AndroidManifestStaticLibrary_version
     * @see #AndroidManifestStaticLibrary_versionMajor
     */
    public static final int[] AndroidManifestStaticLibrary={
      0x01010003, 0x01010519, 0x01010577
    };
    /**
     * <p>
     * @attr description
     * Required public name of the library, which other components and
     * packages will use when referring to this library.  This is a string using
     * Java-style scoping to ensure it is unique.  The name should typically
     * be the same as the apk's package name.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AndroidManifestStaticLibrary_name=0;
    /**
     * <p>
     * @attr description
     * Required specific library version.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:version
     */
    public static final int AndroidManifestStaticLibrary_version=1;
    /**
     * <p>
     * @attr description
     * Required specific library version.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:versionMajor
     */
    public static final int AndroidManifestStaticLibrary_versionMajor=2;
    /**
     * The <code>input-type</code> tag is a child of the <code>supports-input</code> tag, which
     * is itself a child of the root {@link #AndroidManifest manifest} tag. Each
     * <code>input-type</code> tag specifices the name of a specific input device type. When
     * grouped with the other elements of the parent <code>supports-input</code> tag it defines
     * a collection of input devices, which when all used together, are considered a supported
     * input mechanism for the application. There may be multiple <code>supports-input</code>
     * tags defined, each containing a different combination of input device types.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestSupportsInputInputType_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * </table>
     * @see #AndroidManifestSupportsInputInputType_name
     */
    public static final int[] AndroidManifestSupportsInputInputType={
      0x01010003
    };
    /**
     * <p>
     * @attr description
     * Specifices the name of the input device type
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AndroidManifestSupportsInputInputType_name=0;
    /**
     * The <code>supports-screens</code> specifies the screen dimensions an
     * application supports.  By default a modern application supports all
     * screen sizes and must explicitly disable certain screen sizes here;
     * older applications are assumed to only support the traditional normal
     * (HVGA) screen size.  Note that screen size is a separate axis from
     * density, and is determined as the available pixels to an application
     * after density scaling has been applied.
     * <p>This appears as a child tag of the
     * {@link #AndroidManifest manifest} tag.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestSupportsScreens_anyDensity android:anyDensity}</code></td><td>Indicates whether the application can accommodate any screen
     * density.</td></tr>
     * <tr><td><code>{@link #AndroidManifestSupportsScreens_smallScreens android:smallScreens}</code></td><td>Indicates whether the application supports smaller screen form-factors.</td></tr>
     * <tr><td><code>{@link #AndroidManifestSupportsScreens_normalScreens android:normalScreens}</code></td><td>Indicates whether an application supports the normal screen
     * form-factors.</td></tr>
     * <tr><td><code>{@link #AndroidManifestSupportsScreens_largeScreens android:largeScreens}</code></td><td>Indicates whether the application supports larger screen form-factors.</td></tr>
     * <tr><td><code>{@link #AndroidManifestSupportsScreens_resizeable android:resizeable}</code></td><td>Indicates whether the application can resize itself to newer
     * screen sizes.</td></tr>
     * <tr><td><code>{@link #AndroidManifestSupportsScreens_xlargeScreens android:xlargeScreens}</code></td><td>Indicates whether the application supports extra large screen form-factors.</td></tr>
     * <tr><td><code>{@link #AndroidManifestSupportsScreens_requiresSmallestWidthDp android:requiresSmallestWidthDp}</code></td><td>Starting with {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2},
     * this is the new way to specify the minimum screen size an application is
     * compatible with.</td></tr>
     * <tr><td><code>{@link #AndroidManifestSupportsScreens_compatibleWidthLimitDp android:compatibleWidthLimitDp}</code></td><td>Starting with {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2},
     * this is the new way to specify the largest screens an application is
     * compatible with.</td></tr>
     * <tr><td><code>{@link #AndroidManifestSupportsScreens_largestWidthLimitDp android:largestWidthLimitDp}</code></td><td>Starting with {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2},
     * this is the new way to specify the screens an application is
     * compatible with.</td></tr>
     * </table>
     * @see #AndroidManifestSupportsScreens_anyDensity
     * @see #AndroidManifestSupportsScreens_smallScreens
     * @see #AndroidManifestSupportsScreens_normalScreens
     * @see #AndroidManifestSupportsScreens_largeScreens
     * @see #AndroidManifestSupportsScreens_resizeable
     * @see #AndroidManifestSupportsScreens_xlargeScreens
     * @see #AndroidManifestSupportsScreens_requiresSmallestWidthDp
     * @see #AndroidManifestSupportsScreens_compatibleWidthLimitDp
     * @see #AndroidManifestSupportsScreens_largestWidthLimitDp
     */
    public static final int[] AndroidManifestSupportsScreens={
      0x0101026c, 0x01010284, 0x01010285, 0x01010286, 
      0x0101028d, 0x010102bf, 0x01010364, 0x01010365, 
      0x01010366
    };
    /**
     * <p>
     * @attr description
     * Indicates whether the application can accommodate any screen
     * density. This is assumed true if targetSdkVersion is 4 or higher.
     * @deprecated Should always be true by default and not overridden.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:anyDensity
     */
    @Deprecated
    public static final int AndroidManifestSupportsScreens_anyDensity=0;
    /**
     * <p>
     * @attr description
     * Indicates whether the application supports smaller screen form-factors.
     * A small screen is defined as one with a smaller aspect ratio than
     * the traditional HVGA screen; that is, for a portrait screen, less
     * tall than an HVGA screen.  In practice, this means a QVGA low
     * density or VGA high density screen.  An application that does
     * not support small screens <em>will not be available</em> for
     * small screen devices, since there is little the platform can do
     * to make such an application work on a smaller screen.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:smallScreens
     */
    public static final int AndroidManifestSupportsScreens_smallScreens=1;
    /**
     * <p>
     * @attr description
     * Indicates whether an application supports the normal screen
     * form-factors.  Traditionally this is an HVGA normal density
     * screen, but WQVGA low density and WVGA high density are also
     * considered to be normal.  This attribute is true by default,
     * and applications currently should leave it that way.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:normalScreens
     */
    public static final int AndroidManifestSupportsScreens_normalScreens=2;
    /**
     * <p>
     * @attr description
     * Indicates whether the application supports larger screen form-factors.
     * A large screen is defined as a screen that is significantly larger
     * than a normal phone screen, and thus may require some special care
     * on the application's part to make good use of it.  An example would
     * be a VGA <em>normal density</em> screen, though even larger screens
     * are certainly possible.  An application that does not support
     * large screens will be placed as a postage stamp on such a
     * screen, so that it retains the dimensions it was originally
     * designed for.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:largeScreens
     */
    public static final int AndroidManifestSupportsScreens_largeScreens=3;
    /**
     * <p>
     * @attr description
     * Indicates whether the application can resize itself to newer
     * screen sizes.  This is mostly used to distinguish between old
     * applications that may not be compatible with newly introduced
     * screen sizes and newer applications that should be; it will be
     * set for you automatically based on whether you are targeting
     * a newer platform that supports more screens.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:resizeable
     */
    public static final int AndroidManifestSupportsScreens_resizeable=4;
    /**
     * <p>
     * @attr description
     * Indicates whether the application supports extra large screen form-factors.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:xlargeScreens
     */
    public static final int AndroidManifestSupportsScreens_xlargeScreens=5;
    /**
     * <p>
     * @attr description
     * Starting with {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2},
     * this is the new way to specify the minimum screen size an application is
     * compatible with.  This attribute provides the required minimum
     * "smallest screen width" (as per the -swNNNdp resource configuration)
     * that the application can run on.  For example, a typical phone
     * screen is 320, a 7" tablet 600, and a 10" tablet 720.  If the
     * smallest screen width of the device is below the value supplied here,
     * then the application is considered incompatible with that device.
     * If not supplied, then any old smallScreens, normalScreens, largeScreens,
     * or xlargeScreens attributes will be used instead.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:requiresSmallestWidthDp
     */
    public static final int AndroidManifestSupportsScreens_requiresSmallestWidthDp=6;
    /**
     * <p>
     * @attr description
     * Starting with {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2},
     * this is the new way to specify the largest screens an application is
     * compatible with.  This attribute provides the maximum
     * "smallest screen width" (as per the -swNNNdp resource configuration)
     * that the application is designed for.  If this value is smaller than
     * the "smallest screen width" of the device it is running on, the user
     * is offered to run it in a compatibility mode that emulates a
     * smaller screen and zooms it to fit the screen. Currently the compatibility mode only
     * emulates phone screens with a 320dp width, so compatibility mode is not applied if the
     * value for compatibleWidthLimitDp is larger than 320.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:compatibleWidthLimitDp
     */
    public static final int AndroidManifestSupportsScreens_compatibleWidthLimitDp=7;
    /**
     * <p>
     * @attr description
     * Starting with {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2},
     * this is the new way to specify the screens an application is
     * compatible with.  This attribute provides the maximum
     * "smallest screen width" (as per the -swNNNdp resource configuration)
     * that the application can work well on.  If this value is smaller than
     * the "smallest screen width" of the device it is running on, the
     * application will be forced in to screen compatibility mode with
     * no way for the user to turn it off. Currently the compatibility mode only
     * emulates phone screens with a 320dp width, so compatibility mode is not applied if the
     * value for largestWidthLimitDp is larger than 320.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:largestWidthLimitDp
     */
    public static final int AndroidManifestSupportsScreens_largestWidthLimitDp=8;
    /**
     * Associate declared KeySets with upgrading capability.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestUpgradeKeySet_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * </table>
     * @see #AndroidManifestUpgradeKeySet_name
     */
    public static final int[] AndroidManifestUpgradeKeySet={
      0x01010003
    };
    /**
     * <p>
     * @attr description
     * A unique name for the given item.  This must use a Java-style naming
     * convention to ensure the name is unique, for example
     * "com.mycompany.MyName".
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AndroidManifestUpgradeKeySet_name=0;
    /**
     * The <code>uses-configuration</code> tag specifies
     * a specific hardware configuration value used by the application.
     * For example an application might specify that it requires
     * a physical keyboard or a particular navigation method like
     * trackball. Multiple such attribute values can be specified by the
     * application.
     * <p>This appears as a child tag of the root
     * {@link #AndroidManifest manifest} tag.
     * @deprecated Use <code>feature-group</code> instead.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestUsesConfiguration_reqTouchScreen android:reqTouchScreen}</code></td><td>The touch screen type used by an application.</td></tr>
     * <tr><td><code>{@link #AndroidManifestUsesConfiguration_reqKeyboardType android:reqKeyboardType}</code></td><td>The input method preferred by an application.</td></tr>
     * <tr><td><code>{@link #AndroidManifestUsesConfiguration_reqHardKeyboard android:reqHardKeyboard}</code></td><td>Application's requirement for a hard keyboard</td></tr>
     * <tr><td><code>{@link #AndroidManifestUsesConfiguration_reqNavigation android:reqNavigation}</code></td><td>The navigation device preferred by an application.</td></tr>
     * <tr><td><code>{@link #AndroidManifestUsesConfiguration_reqFiveWayNav android:reqFiveWayNav}</code></td><td>Application's requirement for five way navigation</td></tr>
     * </table>
     * @see #AndroidManifestUsesConfiguration_reqTouchScreen
     * @see #AndroidManifestUsesConfiguration_reqKeyboardType
     * @see #AndroidManifestUsesConfiguration_reqHardKeyboard
     * @see #AndroidManifestUsesConfiguration_reqNavigation
     * @see #AndroidManifestUsesConfiguration_reqFiveWayNav
     */
    @Deprecated
    public static final int[] AndroidManifestUsesConfiguration={
      0x01010227, 0x01010228, 0x01010229, 0x0101022a, 
      0x01010232
    };
    /**
     * <p>
     * @attr description
     * The type of touch screen used by an application.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>finger</td><td>3</td><td></td></tr>
     * <tr><td>notouch</td><td>1</td><td></td></tr>
     * <tr><td>stylus</td><td>2</td><td></td></tr>
     * <tr><td>undefined</td><td>0</td><td></td></tr>
     * </table>
     *
     * @attr name android:reqTouchScreen
     */
    public static final int AndroidManifestUsesConfiguration_reqTouchScreen=0;
    /**
     * <p>
     * @attr description
     * The input method preferred by an application.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>nokeys</td><td>1</td><td></td></tr>
     * <tr><td>qwerty</td><td>2</td><td></td></tr>
     * <tr><td>twelvekey</td><td>3</td><td></td></tr>
     * <tr><td>undefined</td><td>0</td><td></td></tr>
     * </table>
     *
     * @attr name android:reqKeyboardType
     */
    public static final int AndroidManifestUsesConfiguration_reqKeyboardType=1;
    /**
     * <p>
     * @attr description
     * Application's requirement for a hard keyboard
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:reqHardKeyboard
     */
    public static final int AndroidManifestUsesConfiguration_reqHardKeyboard=2;
    /**
     * <p>
     * @attr description
     * The navigation device preferred by an application.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>dpad</td><td>2</td><td></td></tr>
     * <tr><td>nonav</td><td>1</td><td></td></tr>
     * <tr><td>trackball</td><td>3</td><td></td></tr>
     * <tr><td>undefined</td><td>0</td><td></td></tr>
     * <tr><td>wheel</td><td>4</td><td></td></tr>
     * </table>
     *
     * @attr name android:reqNavigation
     */
    public static final int AndroidManifestUsesConfiguration_reqNavigation=3;
    /**
     * <p>
     * @attr description
     * Application's requirement for five way navigation
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:reqFiveWayNav
     */
    public static final int AndroidManifestUsesConfiguration_reqFiveWayNav=4;
    /**
     * The <code>uses-feature</code> tag specifies a specific device
     * hardware or software feature used by the application. For
     * example an application might specify that it requires
     * a camera. Multiple attribute values can be specified by the
     * application.
     * <p>This appears as a child tag of the root
     * {@link #AndroidManifest manifest} tag.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestUsesFeature_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestUsesFeature_glEsVersion android:glEsVersion}</code></td><td>The GLES driver version number needed by an application.</td></tr>
     * <tr><td><code>{@link #AndroidManifestUsesFeature_required android:required}</code></td><td>Specify whether this feature is required for the application.</td></tr>
     * <tr><td><code>{@link #AndroidManifestUsesFeature_version android:version}</code></td><td>The version of the feature that is being used.</td></tr>
     * </table>
     * @see #AndroidManifestUsesFeature_name
     * @see #AndroidManifestUsesFeature_glEsVersion
     * @see #AndroidManifestUsesFeature_required
     * @see #AndroidManifestUsesFeature_version
     */
    public static final int[] AndroidManifestUsesFeature={
      0x01010003, 0x01010281, 0x0101028e, 0x01010519
    };
    /**
     * <p>
     * @attr description
     * The name of the feature that is being used.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AndroidManifestUsesFeature_name=0;
    /**
     * <p>
     * @attr description
     * The GLES driver version number needed by an application.
     * The higher 16 bits represent the major number and the lower 16 bits
     * represent the minor number. For example for GL 1.2 referring to
     * 0x00000102, the actual value should be set as 0x00010002.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:glEsVersion
     */
    public static final int AndroidManifestUsesFeature_glEsVersion=1;
    /**
     * <p>
     * @attr description
     * Specify whether this feature is required for the application.
     * The default is true, meaning the application requires the
     * feature, and does not want to be installed on devices that
     * don't support it.  If you set this to false, then this will
     * not impose a restriction on where the application can be
     * installed.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:required
     */
    public static final int AndroidManifestUsesFeature_required=2;
    /**
     * <p>
     * @attr description
     * The version of the feature that is being used.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:version
     */
    public static final int AndroidManifestUsesFeature_version=3;
    /**
     * The <code>uses-libraries</code> specifies a shared library that this
     * package requires to be linked against.  Specifying this flag tells the
     * system to include this library's code in your class loader.
     * <p>This appears as a child tag of the
     * {@link #AndroidManifestApplication application} tag.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestUsesLibrary_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestUsesLibrary_required android:required}</code></td><td>Specify whether this feature is required for the application.</td></tr>
     * </table>
     * @see #AndroidManifestUsesLibrary_name
     * @see #AndroidManifestUsesLibrary_required
     */
    public static final int[] AndroidManifestUsesLibrary={
      0x01010003, 0x0101028e
    };
    /**
     * <p>
     * @attr description
     * Required name of the library you use.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AndroidManifestUsesLibrary_name=0;
    /**
     * <p>
     * @attr description
     * Specify whether this library is required for the application.
     * The default is true, meaning the application requires the
     * library, and does not want to be installed on devices that
     * don't support it.  If you set this to false, then this will
     * allow the application to be installed even if the library
     * doesn't exist, and you will need to check for its presence
     * dynamically at runtime.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:required
     */
    public static final int AndroidManifestUsesLibrary_required=1;
    /**
     * The <code>uses-native-library</code> specifies a native shared library that this
     * package requires to be linked against.  Specifying this flag tells the
     * system to make the native library to be available to your app.
     * <p>On devices running R or lower, this is ignored and the app has access to all
     * the public native shared libraries that are exported from the platform. This is
     * also ignored if the app is targeting R or lower.
     * <p>This appears as a child tag of the
     * {@link #AndroidManifestApplication application} tag.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestUsesNativeLibrary_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestUsesNativeLibrary_required android:required}</code></td><td>Specify whether this feature is required for the application.</td></tr>
     * </table>
     * @see #AndroidManifestUsesNativeLibrary_name
     * @see #AndroidManifestUsesNativeLibrary_required
     */
    public static final int[] AndroidManifestUsesNativeLibrary={
      0x01010003, 0x0101028e
    };
    /**
     * <p>
     * @attr description
     * Required name of the library you use.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AndroidManifestUsesNativeLibrary_name=0;
    /**
     * <p>
     * @attr description
     * Specify whether this native library is required for the application.
     * The default is true, meaning the application requires the
     * library, and does not want to be installed on devices that
     * don't support it. If you set this to false, then this will
     * allow the application to be installed even if the library
     * doesn't exist, and you will need to check for its presence
     * dynamically at runtime.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:required
     */
    public static final int AndroidManifestUsesNativeLibrary_required=1;
    /**
     * The <code>uses-package</code> specifies some kind of dependency on another
     * package.  It does not have any impact on the app's execution on the device,
     * but provides information about dependencies it has on other packages that need
     * to  be satisfied for it to run correctly.  That is, this is primarily for
     * installers to know what other apps need to be installed along with this one.
     * <p>This appears as a child tag of the
     * {@link #AndroidManifestApplication application} tag.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestUsesPackage_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestUsesPackage_version android:version}</code></td><td>The version of the feature that is being used.</td></tr>
     * <tr><td><code>{@link #AndroidManifestUsesPackage_certDigest android:certDigest}</code></td><td>Optional SHA-256 digest of the package signing certificate.</td></tr>
     * <tr><td><code>{@link #AndroidManifestUsesPackage_versionMajor android:versionMajor}</code></td><td>Optional minimum major version of the package that satisfies the dependency.</td></tr>
     * <tr><td><code>{@link #AndroidManifestUsesPackage_packageType android:packageType}</code></td><td>Required type of association with the package, for example "android.package.ad_service"
     * if it provides an advertising service.</td></tr>
     * </table>
     * @see #AndroidManifestUsesPackage_name
     * @see #AndroidManifestUsesPackage_version
     * @see #AndroidManifestUsesPackage_certDigest
     * @see #AndroidManifestUsesPackage_versionMajor
     * @see #AndroidManifestUsesPackage_packageType
     */
    public static final int[] AndroidManifestUsesPackage={
      0x01010003, 0x01010519, 0x01010548, 0x01010577, 
      0x01010587
    };
    /**
     * <p>
     * @attr description
     * Required name of the package you use.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AndroidManifestUsesPackage_name=0;
    /**
     * <p>
     * @attr description
     * Optional minimum version of the package that satisfies the dependency.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:version
     */
    public static final int AndroidManifestUsesPackage_version=1;
    /**
     * <p>
     * @attr description
     * Optional SHA-256 digest of the package signing certificate.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:certDigest
     */
    public static final int AndroidManifestUsesPackage_certDigest=2;
    /**
     * <p>
     * @attr description
     * Optional minimum major version of the package that satisfies the dependency.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:versionMajor
     */
    public static final int AndroidManifestUsesPackage_versionMajor=3;
    /**
     * <p>
     * @attr description
     * Required type of association with the package, for example "android.package.ad_service"
     * if it provides an advertising service.  This should use the standard scoped naming
     * convention as used for other things such as package names, based on the Java naming
     * convention.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:packageType
     */
    public static final int AndroidManifestUsesPackage_packageType=4;
    /**
     * The <code>uses-permission</code> tag requests a
     * {@link #AndroidManifestPermission &lt;permission&gt;} that the containing
     * package must be granted in order for it to operate correctly. For runtime
     * permissions, i.e. ones with <code>dangerous</code> protection level, on a
     * platform that supports runtime permissions, the permission will not be
     * granted until the app explicitly requests it at runtime and the user approves
     * the grant. You cannot request at runtime permissions that are not declared
     * as used in the manifest. See the
     * <a href="{@docRoot}guide/topics/security/security.html">Security and Permissions</a>
     * document for more information on permissions.  Also available is a
     * {@link android.Manifest.permission list of permissions} included
     * with the base platform.
     * <p>This appears as a child tag of the root
     * {@link #AndroidManifest manifest} tag.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestUsesPermission_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestUsesPermission_maxSdkVersion android:maxSdkVersion}</code></td><td>Optional: specify the maximum version of the Android OS for which the
     * application wishes to request the permission.</td></tr>
     * <tr><td><code>{@link #AndroidManifestUsesPermission_requiredFeature android:requiredFeature}</code></td><td>Optional: the system must support this feature for the permission to be
     * requested.</td></tr>
     * <tr><td><code>{@link #AndroidManifestUsesPermission_requiredNotFeature android:requiredNotFeature}</code></td><td>Optional: the system must NOT support this feature for the permission to be
     * requested.</td></tr>
     * <tr><td><code>{@link #AndroidManifestUsesPermission_usesPermissionFlags android:usesPermissionFlags}</code></td><td>Optional: set of flags that should apply to this permission request.</td></tr>
     * </table>
     * @see #AndroidManifestUsesPermission_name
     * @see #AndroidManifestUsesPermission_maxSdkVersion
     * @see #AndroidManifestUsesPermission_requiredFeature
     * @see #AndroidManifestUsesPermission_requiredNotFeature
     * @see #AndroidManifestUsesPermission_usesPermissionFlags
     */
    public static final int[] AndroidManifestUsesPermission={
      0x01010003, 0x01010271, 0x01010554, 0x01010555, 
      0x01010644
    };
    /**
     * <p>
     * @attr description
     * Required name of the permission you use, as published with the
     * corresponding name attribute of a
     * {@link android.R.styleable#AndroidManifestPermission &lt;permission&gt;}
     * tag; often this is one of the {@link android.Manifest.permission standard
     * system permissions}.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AndroidManifestUsesPermission_name=0;
    /**
     * <p>
     * @attr description
     * Optional: specify the maximum version of the Android OS for which the
     * application wishes to request the permission.  When running on a version
     * of Android higher than the number given here, the permission will not
     * be requested.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:maxSdkVersion
     */
    public static final int AndroidManifestUsesPermission_maxSdkVersion=1;
    /**
     * <p>
     * @attr description
     * Optional: the system must support this feature for the permission to be
     * requested.  If it doesn't support the feature, it will be as if the manifest didn't
     * request it at all.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:requiredFeature
     */
    public static final int AndroidManifestUsesPermission_requiredFeature=2;
    /**
     * <p>
     * @attr description
     * Optional: the system must NOT support this feature for the permission to be
     * requested.  If it does support the feature, it will be as if the manifest didn't
     * request it at all.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:requiredNotFeature
     */
    public static final int AndroidManifestUsesPermission_requiredNotFeature=3;
    /**
     * <p>
     * @attr description
     * Optional: set of flags that should apply to this permission request. Note that
     * these flags start at 0x4 to match PackageInfo.requestedPermissionsFlags.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>neverForLocation</td><td>10000</td><td>Strong assertion by a developer that they will never use this
     * permission to derive the physical location of the device, even
     * when the app has been granted the ACCESS_FINE_LOCATION and/or
     * ACCESS_COARSE_LOCATION permissions.</td></tr>
     * </table>
     *
     * @attr name android:usesPermissionFlags
     */
    public static final int AndroidManifestUsesPermission_usesPermissionFlags=4;
    /**
     * The <code>uses-sdk</code> tag describes the SDK features that the
     * containing package must be running on to operate correctly.
     * <p>This appears as a child tag of the root
     * {@link #AndroidManifest manifest} tag.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestUsesSdk_minSdkVersion android:minSdkVersion}</code></td><td>This is the minimum SDK version number that the application
     * requires.</td></tr>
     * <tr><td><code>{@link #AndroidManifestUsesSdk_targetSdkVersion android:targetSdkVersion}</code></td><td>This is the SDK version number that the application is targeting.</td></tr>
     * <tr><td><code>{@link #AndroidManifestUsesSdk_maxSdkVersion android:maxSdkVersion}</code></td><td>Optional: specify the maximum version of the Android OS for which the
     * application wishes to request the permission.</td></tr>
     * </table>
     * @see #AndroidManifestUsesSdk_minSdkVersion
     * @see #AndroidManifestUsesSdk_targetSdkVersion
     * @see #AndroidManifestUsesSdk_maxSdkVersion
     */
    public static final int[] AndroidManifestUsesSdk={
      0x0101020c, 0x01010270, 0x01010271
    };
    /**
     * <p>
     * @attr description
     * This is the minimum SDK version number that the application
     * requires.  This number is an abstract integer, from the list
     * in {@link android.os.Build.VERSION_CODES}  If
     * not supplied, the application will work on any SDK.  This
     * may also be string (such as "Donut") if the application was built
     * against a development branch, in which case it will only work against
     * the development builds.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:minSdkVersion
     */
    public static final int AndroidManifestUsesSdk_minSdkVersion=0;
    /**
     * <p>
     * @attr description
     * This is the SDK version number that the application is targeting.
     * It is able to run on older versions (down to minSdkVersion), but
     * was explicitly tested to work with the version specified here.
     * Specifying this version allows the platform to disable compatibility
     * code that are not required or enable newer features that are not
     * available to older applications.  This may also be a string
     * (such as "Donut") if this is built against a development
     * branch, in which case minSdkVersion is also forced to be that
     * string.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:targetSdkVersion
     */
    public static final int AndroidManifestUsesSdk_targetSdkVersion=1;
    /**
     * <p>
     * @attr description
     * This is the maximum SDK version number that an application works
     * on.  You can use this to ensure your application is filtered out
     * of later versions of the platform when you know you have
     * incompatibility with them.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:maxSdkVersion
     */
    public static final int AndroidManifestUsesSdk_maxSdkVersion=2;
    /**
     * Attributes that can be used with a AndroidManifestUsesSplit.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestUsesSplit_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * </table>
     * @see #AndroidManifestUsesSplit_name
     */
    public static final int[] AndroidManifestUsesSplit={
      0x01010003
    };
    /**
     * <p>
     * @attr description
     * A unique name for the given item.  This must use a Java-style naming
     * convention to ensure the name is unique, for example
     * "com.mycompany.MyName".
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AndroidManifestUsesSplit_name=0;
    /**
     * The <code>uses-static-library</code> specifies a shared <strong>static</strong>
     * library that this package requires to be statically linked against. Specifying
     * this tag tells the system to include this library's code in your class loader.
     * Depending on a static shared library is equivalent to statically linking with
     * the library at build time while it offers apps to share code defined in such
     * libraries. Hence, static libraries are strictly required.
     * <p>On devices running O MR1 or higher, if the library is singed with multiple
     * signing certificates you must to specify the SHA-256 hashes of the additional
     * certificates via adding
     * {@link #AndroidManifestAdditionalCertificate additional-certificate} tags.
     * <p>This appears as a child tag of the
     * {@link #AndroidManifestApplication application} tag.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AndroidManifestUsesStaticLibrary_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * <tr><td><code>{@link #AndroidManifestUsesStaticLibrary_version android:version}</code></td><td>The version of the feature that is being used.</td></tr>
     * <tr><td><code>{@link #AndroidManifestUsesStaticLibrary_certDigest android:certDigest}</code></td><td>Optional SHA-256 digest of the package signing certificate.</td></tr>
     * </table>
     * @see #AndroidManifestUsesStaticLibrary_name
     * @see #AndroidManifestUsesStaticLibrary_version
     * @see #AndroidManifestUsesStaticLibrary_certDigest
     */
    public static final int[] AndroidManifestUsesStaticLibrary={
      0x01010003, 0x01010519, 0x01010548
    };
    /**
     * <p>
     * @attr description
     * Required name of the library you use.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AndroidManifestUsesStaticLibrary_name=0;
    /**
     * <p>
     * @attr description
     * Specify which version of the shared library should be statically linked.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:version
     */
    public static final int AndroidManifestUsesStaticLibrary_version=1;
    /**
     * <p>
     * @attr description
     * The SHA-256 digest of the library signing certificate.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:certDigest
     */
    public static final int AndroidManifestUsesStaticLibrary_certDigest=2;
    /**
     * Drawable used to draw animated images (gif).
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AnimatedImageDrawable_src android:src}</code></td><td>Sets a drawable as the content of this ImageView.</td></tr>
     * <tr><td><code>{@link #AnimatedImageDrawable_repeatCount android:repeatCount}</code></td><td>Defines how many times the animation should repeat.</td></tr>
     * <tr><td><code>{@link #AnimatedImageDrawable_autoStart android:autoStart}</code></td><td>When true, automatically start animating.</td></tr>
     * <tr><td><code>{@link #AnimatedImageDrawable_autoMirrored android:autoMirrored}</code></td><td>Indicates if the drawable needs to be mirrored when its layout direction is
     * RTL (right-to-left).</td></tr>
     * </table>
     * @see #AnimatedImageDrawable_src
     * @see #AnimatedImageDrawable_repeatCount
     * @see #AnimatedImageDrawable_autoStart
     * @see #AnimatedImageDrawable_autoMirrored
     */
    public static final int[] AnimatedImageDrawable={
      0x01010119, 0x010101bf, 0x010102b5, 0x010103ea
    };
    /**
     * <p>
     * @attr description
     * Identifier of the image file. This attribute is mandatory.
     * It must be an image file with multiple frames, e.g. gif or webp
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:src
     */
    public static final int AnimatedImageDrawable_src=0;
    /**
     * <p>
     * @attr description
     * Replace the loop count in the encoded data. A repeat count of 0 means that
     * the animation will play once, regardless of the number of times specified
     * in the encoded data. Setting this to infinite (-1) will result in the
     * animation repeating as long as it is displayed (once start() is called).
     *
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>infinite</td><td>ffffffff</td><td></td></tr>
     * </table>
     *
     * @attr name android:repeatCount
     */
    public static final int AnimatedImageDrawable_repeatCount=1;
    /**
     * <p>
     * @attr description
     * When true, automatically start animating. The default is false, meaning
     * that the animation will not start until start() is called.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:autoStart
     */
    public static final int AnimatedImageDrawable_autoStart=2;
    /**
     * <p>
     * @attr description
     * Indicates if the drawable needs to be mirrored when its layout direction is
     * RTL (right-to-left).
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:autoMirrored
     */
    public static final int AnimatedImageDrawable_autoMirrored=3;
    /**
     * Attributes that can be used with a AnimatedRotateDrawable.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AnimatedRotateDrawable_visible android:visible}</code></td><td>Provides initial visibility state of the drawable; the default
     * value is false.</td></tr>
     * <tr><td><code>{@link #AnimatedRotateDrawable_drawable android:drawable}</code></td><td>Reference to a drawable resource to use for the frame.</td></tr>
     * <tr><td><code>{@link #AnimatedRotateDrawable_pivotX android:pivotX}</code></td><td></td></tr>
     * <tr><td><code>{@link #AnimatedRotateDrawable_pivotY android:pivotY}</code></td><td></td></tr>
     * </table>
     * @see #AnimatedRotateDrawable_visible
     * @see #AnimatedRotateDrawable_drawable
     * @see #AnimatedRotateDrawable_pivotX
     * @see #AnimatedRotateDrawable_pivotY
     */
    public static final int[] AnimatedRotateDrawable={
      0x01010194, 0x01010199, 0x010101b5, 0x010101b6, 
      0x01120052, 0x01120053
    };
    /**
     * <p>
     * @attr description
     * Provides initial visibility state of the drawable; the default
     * value is false.  See
     * {@link android.graphics.drawable.Drawable#setVisible}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:visible
     */
    public static final int AnimatedRotateDrawable_visible=0;
    /**
     * <p>
     * @attr description
     * Reference to a drawable resource to use for the frame.  If not
     * given, the drawable must be defined by the first child tag.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:drawable
     */
    public static final int AnimatedRotateDrawable_drawable=1;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#pivotX}
     * attribute's value can be found in the {@link #AnimatedRotateDrawable} array.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:pivotX
     */
    public static final int AnimatedRotateDrawable_pivotX=2;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#pivotY}
     * attribute's value can be found in the {@link #AnimatedRotateDrawable} array.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:pivotY
     */
    public static final int AnimatedRotateDrawable_pivotY=3;
    /**
     * Drawable used to render several states with animated transitions. Each state
     * is represented by a child drawable with an optional keyframe ID.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AnimatedStateListDrawable_dither android:dither}</code></td><td>Enables or disables dithering of the bitmap if the bitmap does not have the
     * same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
     * an RGB 565 screen).</td></tr>
     * <tr><td><code>{@link #AnimatedStateListDrawable_visible android:visible}</code></td><td>Provides initial visibility state of the drawable; the default
     * value is false.</td></tr>
     * <tr><td><code>{@link #AnimatedStateListDrawable_variablePadding android:variablePadding}</code></td><td>If true, allows the drawable's padding to change based on the
     * current state that is selected.</td></tr>
     * <tr><td><code>{@link #AnimatedStateListDrawable_constantSize android:constantSize}</code></td><td>If true, the drawable's reported internal size will remain
     * constant as the state changes; the size is the maximum of all
     * of the states.</td></tr>
     * <tr><td><code>{@link #AnimatedStateListDrawable_enterFadeDuration android:enterFadeDuration}</code></td><td>Amount of time (in milliseconds) to fade in a new state drawable.</td></tr>
     * <tr><td><code>{@link #AnimatedStateListDrawable_exitFadeDuration android:exitFadeDuration}</code></td><td>Amount of time (in milliseconds) to fade out an old state drawable.</td></tr>
     * <tr><td><code>{@link #AnimatedStateListDrawable_autoMirrored android:autoMirrored}</code></td><td>Indicates if the drawable needs to be mirrored when its layout direction is
     * RTL (right-to-left).</td></tr>
     * </table>
     * @see #AnimatedStateListDrawable_dither
     * @see #AnimatedStateListDrawable_visible
     * @see #AnimatedStateListDrawable_variablePadding
     * @see #AnimatedStateListDrawable_constantSize
     * @see #AnimatedStateListDrawable_enterFadeDuration
     * @see #AnimatedStateListDrawable_exitFadeDuration
     * @see #AnimatedStateListDrawable_autoMirrored
     */
    public static final int[] AnimatedStateListDrawable={
      0x0101011c, 0x01010194, 0x01010195, 0x01010196, 
      0x0101030c, 0x0101030d, 0x010103ea
    };
    /**
     * <p>
     * @attr description
     * Enables or disables dithering of the bitmap if the bitmap does not have the
     * same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
     * an RGB 565 screen).
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:dither
     */
    public static final int AnimatedStateListDrawable_dither=0;
    /**
     * <p>
     * @attr description
     * Indicates whether the drawable should be initially visible.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:visible
     */
    public static final int AnimatedStateListDrawable_visible=1;
    /**
     * <p>
     * @attr description
     * If true, allows the drawable's padding to change based on the
     * current state that is selected.  If false, the padding will
     * stay the same (based on the maximum padding of all the states).
     * Enabling this feature requires that the owner of the drawable
     * deal with performing layout when the state changes, which is
     * often not supported.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:variablePadding
     */
    public static final int AnimatedStateListDrawable_variablePadding=2;
    /**
     * <p>
     * @attr description
     * If true, the drawable's reported internal size will remain
     * constant as the state changes; the size is the maximum of all
     * of the states.  If false, the size will vary based on the
     * current state.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:constantSize
     */
    public static final int AnimatedStateListDrawable_constantSize=3;
    /**
     * <p>
     * @attr description
     * Amount of time (in milliseconds) to fade in a new state drawable.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:enterFadeDuration
     */
    public static final int AnimatedStateListDrawable_enterFadeDuration=4;
    /**
     * <p>
     * @attr description
     * Amount of time (in milliseconds) to fade out an old state drawable.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:exitFadeDuration
     */
    public static final int AnimatedStateListDrawable_exitFadeDuration=5;
    /**
     * <p>
     * @attr description
     * Indicates if the drawable needs to be mirrored when its layout direction is
     * RTL (right-to-left).
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:autoMirrored
     */
    public static final int AnimatedStateListDrawable_autoMirrored=6;
    /**
     * Transition used to animate between states with keyframe IDs.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AnimatedStateListDrawableItem_id android:id}</code></td><td>Supply an identifier name for this view, to later retrieve it
     * with {@link android.view.View#findViewById View.findViewById()} or
     * {@link android.app.Activity#findViewById Activity.findViewById()}.</td></tr>
     * <tr><td><code>{@link #AnimatedStateListDrawableItem_drawable android:drawable}</code></td><td>Reference to a drawable resource to use for the frame.</td></tr>
     * </table>
     * @see #AnimatedStateListDrawableItem_id
     * @see #AnimatedStateListDrawableItem_drawable
     */
    public static final int[] AnimatedStateListDrawableItem={
      0x010100d0, 0x01010199
    };
    /**
     * <p>
     * @attr description
     * Keyframe identifier for use in specifying transitions.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:id
     */
    public static final int AnimatedStateListDrawableItem_id=0;
    /**
     * <p>
     * @attr description
     * Reference to a drawable resource to use for the frame.  If not
     * given, the drawable must be defined by the first child tag.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:drawable
     */
    public static final int AnimatedStateListDrawableItem_drawable=1;
    /**
     * Transition used to animate between states with keyframe IDs.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AnimatedStateListDrawableTransition_drawable android:drawable}</code></td><td>Reference to a drawable resource to use for the frame.</td></tr>
     * <tr><td><code>{@link #AnimatedStateListDrawableTransition_toId android:toId}</code></td><td>Keyframe identifier for the ending state.</td></tr>
     * <tr><td><code>{@link #AnimatedStateListDrawableTransition_fromId android:fromId}</code></td><td>Keyframe identifier for the starting state.</td></tr>
     * <tr><td><code>{@link #AnimatedStateListDrawableTransition_reversible android:reversible}</code></td><td>Whether this transition is reversible.</td></tr>
     * </table>
     * @see #AnimatedStateListDrawableTransition_drawable
     * @see #AnimatedStateListDrawableTransition_toId
     * @see #AnimatedStateListDrawableTransition_fromId
     * @see #AnimatedStateListDrawableTransition_reversible
     */
    public static final int[] AnimatedStateListDrawableTransition={
      0x01010199, 0x01010449, 0x0101044a, 0x0101044b
    };
    /**
     * <p>
     * @attr description
     * Reference to a animation drawable resource to use for the frame.  If not
     * given, the animation drawable must be defined by the first child tag.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:drawable
     */
    public static final int AnimatedStateListDrawableTransition_drawable=0;
    /**
     * <p>
     * @attr description
     * Keyframe identifier for the ending state.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:toId
     */
    public static final int AnimatedStateListDrawableTransition_toId=1;
    /**
     * <p>
     * @attr description
     * Keyframe identifier for the starting state.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:fromId
     */
    public static final int AnimatedStateListDrawableTransition_fromId=2;
    /**
     * <p>
     * @attr description
     * Whether this transition is reversible.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:reversible
     */
    public static final int AnimatedStateListDrawableTransition_reversible=3;
    /**
     * Define the AnimatedVectorDrawable.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AnimatedVectorDrawable_drawable android:drawable}</code></td><td>Reference to a drawable resource to use for the frame.</td></tr>
     * </table>
     * @see #AnimatedVectorDrawable_drawable
     */
    public static final int[] AnimatedVectorDrawable={
      0x01010199
    };
    /**
     * <p>
     * @attr description
     * The static vector drawable.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:drawable
     */
    public static final int AnimatedVectorDrawable_drawable=0;
    /**
     * Defines the target used in the AnimatedVectorDrawable.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AnimatedVectorDrawableTarget_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * <tr><td><code>{@link #AnimatedVectorDrawableTarget_animation android:animation}</code></td><td>Animation to use on each child.</td></tr>
     * </table>
     * @see #AnimatedVectorDrawableTarget_name
     * @see #AnimatedVectorDrawableTarget_animation
     */
    public static final int[] AnimatedVectorDrawableTarget={
      0x01010003, 0x010101cd
    };
    /**
     * <p>
     * @attr description
     * The name of the target path, group or vector drawable.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AnimatedVectorDrawableTarget_name=0;
    /**
     * <p>
     * @attr description
     * The animation for the target path, group or vector drawable.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:animation
     */
    public static final int AnimatedVectorDrawableTarget_animation=1;
    /**
     * Attributes that can be used with a Animation.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Animation_background android:background}</code></td><td>A drawable to use as the background.</td></tr>
     * <tr><td><code>{@link #Animation_interpolator android:interpolator}</code></td><td>Sets the acceleration curve for the indeterminate animation.</td></tr>
     * <tr><td><code>{@link #Animation_duration android:duration}</code></td><td>Amount of time (in milliseconds) to display this frame.</td></tr>
     * <tr><td><code>{@link #Animation_fillBefore android:fillBefore}</code></td><td>When set to true or when fillEnabled is not set to true, the animation transformation
     * is applied before the animation has started.</td></tr>
     * <tr><td><code>{@link #Animation_fillAfter android:fillAfter}</code></td><td>When set to true, the animation transformation is applied after the animation is
     * over.</td></tr>
     * <tr><td><code>{@link #Animation_startOffset android:startOffset}</code></td><td>Delay in milliseconds before the animation runs, once start time is reached.</td></tr>
     * <tr><td><code>{@link #Animation_repeatCount android:repeatCount}</code></td><td>Defines how many times the animation should repeat.</td></tr>
     * <tr><td><code>{@link #Animation_repeatMode android:repeatMode}</code></td><td>Defines the animation behavior when it reaches the end and the repeat count is
     * greater than 0 or infinite.</td></tr>
     * <tr><td><code>{@link #Animation_zAdjustment android:zAdjustment}</code></td><td>Allows for an adjustment of the Z ordering of the content being
     * animated for the duration of the animation.</td></tr>
     * <tr><td><code>{@link #Animation_fillEnabled android:fillEnabled}</code></td><td>When set to true, the value of fillBefore is taken into account.</td></tr>
     * <tr><td><code>{@link #Animation_detachWallpaper android:detachWallpaper}</code></td><td>Special option for window animations: if this window is on top
     * of a wallpaper, don't animate the wallpaper with it.</td></tr>
     * </table>
     * @see #Animation_background
     * @see #Animation_interpolator
     * @see #Animation_duration
     * @see #Animation_fillBefore
     * @see #Animation_fillAfter
     * @see #Animation_startOffset
     * @see #Animation_repeatCount
     * @see #Animation_repeatMode
     * @see #Animation_zAdjustment
     * @see #Animation_fillEnabled
     * @see #Animation_detachWallpaper
     */
    public static final int[] Animation={
      0x010100d4, 0x01010141, 0x01010198, 0x010101bc, 
      0x010101bd, 0x010101be, 0x010101bf, 0x010101c0, 
      0x010101c1, 0x0101024f, 0x010102a6, 0x0112005a, 
      0x011200e0
    };
    /**
     * <p>
     * @attr description
     * Special background behind animation.  Only for use with window
     * animations.  Can only be a color, and only black.  If 0, the
     * default, there is no background.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:background
     */
    public static final int Animation_background=0;
    /**
     * <p>
     * @attr description
     * Defines the interpolator used to smooth the animation movement in time.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:interpolator
     */
    public static final int Animation_interpolator=1;
    /**
     * <p>
     * @attr description
     * Amount of time (in milliseconds) for the animation to run.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:duration
     */
    public static final int Animation_duration=2;
    /**
     * <p>
     * @attr description
     * When set to true or when fillEnabled is not set to true, the animation transformation
     * is applied before the animation has started. The default value is true.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:fillBefore
     */
    public static final int Animation_fillBefore=3;
    /**
     * <p>
     * @attr description
     * When set to true, the animation transformation is applied after the animation is
     * over. The default value is false. If fillEnabled is not set to true and the
     * animation is not set on a View, fillAfter is assumed to be true.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:fillAfter
     */
    public static final int Animation_fillAfter=4;
    /**
     * <p>
     * @attr description
     * Delay in milliseconds before the animation runs, once start time is reached.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:startOffset
     */
    public static final int Animation_startOffset=5;
    /**
     * <p>
     * @attr description
     * Defines how many times the animation should repeat. The default value is 0.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>infinite</td><td>ffffffff</td><td></td></tr>
     * </table>
     *
     * @attr name android:repeatCount
     */
    public static final int Animation_repeatCount=6;
    /**
     * <p>
     * @attr description
     * Defines the animation behavior when it reaches the end and the repeat count is
     * greater than 0 or infinite. The default value is restart.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>restart</td><td>1</td><td>The animation starts again from the beginning.</td></tr>
     * <tr><td>reverse</td><td>2</td><td>The animation plays backward.</td></tr>
     * </table>
     *
     * @attr name android:repeatMode
     */
    public static final int Animation_repeatMode=7;
    /**
     * <p>
     * @attr description
     * Allows for an adjustment of the Z ordering of the content being
     * animated for the duration of the animation.  The default value is normal.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>ffffffff</td><td>The content being animated is forced under all other
     * content for the duration of the animation.</td></tr>
     * <tr><td>normal</td><td>0</td><td>The content being animated be kept in its current Z order.</td></tr>
     * <tr><td>top</td><td>1</td><td>The content being animated is forced on top of all other
     * content for the duration of the animation.</td></tr>
     * </table>
     *
     * @attr name android:zAdjustment
     */
    public static final int Animation_zAdjustment=8;
    /**
     * <p>
     * @attr description
     * When set to true, the value of fillBefore is taken into account.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:fillEnabled
     */
    public static final int Animation_fillEnabled=9;
    /**
     * <p>
     * @attr description
     * Special option for window animations: if this window is on top
     * of a wallpaper, don't animate the wallpaper with it.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:detachWallpaper
     */
    public static final int Animation_detachWallpaper=10;
    /**
     * Drawable used to render several animated frames.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AnimationDrawable_visible android:visible}</code></td><td>Provides initial visibility state of the drawable; the default
     * value is false.</td></tr>
     * <tr><td><code>{@link #AnimationDrawable_variablePadding android:variablePadding}</code></td><td>If true, allows the drawable's padding to change based on the
     * current state that is selected.</td></tr>
     * <tr><td><code>{@link #AnimationDrawable_oneshot android:oneshot}</code></td><td>If true, the animation will only run a single time and then
     * stop.</td></tr>
     * </table>
     * @see #AnimationDrawable_visible
     * @see #AnimationDrawable_variablePadding
     * @see #AnimationDrawable_oneshot
     */
    public static final int[] AnimationDrawable={
      0x01010194, 0x01010195, 0x01010197
    };
    /**
     * <p>
     * @attr description
     * Provides initial visibility state of the drawable; the default
     * value is false.  See
     * {@link android.graphics.drawable.Drawable#setVisible}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:visible
     */
    public static final int AnimationDrawable_visible=0;
    /**
     * <p>
     * @attr description
     * If true, allows the drawable's padding to change based on the
     * current state that is selected.  If false, the padding will
     * stay the same (based on the maximum padding of all the states).
     * Enabling this feature requires that the owner of the drawable
     * deal with performing layout when the state changes, which is
     * often not supported.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:variablePadding
     */
    public static final int AnimationDrawable_variablePadding=1;
    /**
     * <p>
     * @attr description
     * If true, the animation will only run a single time and then
     * stop.  If false (the default), it will continually run,
     * restarting at the first frame after the last has finished.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:oneshot
     */
    public static final int AnimationDrawable_oneshot=2;
    /**
     * Represents a single frame inside an AnimationDrawable.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AnimationDrawableItem_duration android:duration}</code></td><td>Amount of time (in milliseconds) to display this frame.</td></tr>
     * <tr><td><code>{@link #AnimationDrawableItem_drawable android:drawable}</code></td><td>Reference to a drawable resource to use for the frame.</td></tr>
     * </table>
     * @see #AnimationDrawableItem_duration
     * @see #AnimationDrawableItem_drawable
     */
    public static final int[] AnimationDrawableItem={
      0x01010198, 0x01010199
    };
    /**
     * <p>
     * @attr description
     * Amount of time (in milliseconds) to display this frame.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:duration
     */
    public static final int AnimationDrawableItem_duration=0;
    /**
     * <p>
     * @attr description
     * Reference to a drawable resource to use for the frame.  If not
     * given, the drawable must be defined by the first child tag.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:drawable
     */
    public static final int AnimationDrawableItem_drawable=1;
    public static final int[] AnimationScaleListDrawable={
    };
    /**
     * Attributes that can be assigned to a AnimationScaleListDrawable item.
     * @hide
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AnimationScaleListDrawableItem_drawable android:drawable}</code></td><td>Reference to a drawable resource to use for the frame.</td></tr>
     * </table>
     * @see #AnimationScaleListDrawableItem_drawable
     */
    public static final int[] AnimationScaleListDrawableItem={
      0x01010199
    };
    /**
     * <p>
     * @attr description
     * Reference to a drawable resource to use for the state. If not
     * given, the drawable must be defined by the first child tag.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:drawable
     */
    public static final int AnimationScaleListDrawableItem_drawable=0;
    /**
     * Attributes that can be used with a AnimationSet.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AnimationSet_duration android:duration}</code></td><td>Amount of time (in milliseconds) to display this frame.</td></tr>
     * <tr><td><code>{@link #AnimationSet_shareInterpolator android:shareInterpolator}</code></td><td></td></tr>
     * <tr><td><code>{@link #AnimationSet_fillBefore android:fillBefore}</code></td><td>When set to true or when fillEnabled is not set to true, the animation transformation
     * is applied before the animation has started.</td></tr>
     * <tr><td><code>{@link #AnimationSet_fillAfter android:fillAfter}</code></td><td>When set to true, the animation transformation is applied after the animation is
     * over.</td></tr>
     * <tr><td><code>{@link #AnimationSet_startOffset android:startOffset}</code></td><td>Delay in milliseconds before the animation runs, once start time is reached.</td></tr>
     * <tr><td><code>{@link #AnimationSet_repeatMode android:repeatMode}</code></td><td>Defines the animation behavior when it reaches the end and the repeat count is
     * greater than 0 or infinite.</td></tr>
     * </table>
     * @see #AnimationSet_duration
     * @see #AnimationSet_shareInterpolator
     * @see #AnimationSet_fillBefore
     * @see #AnimationSet_fillAfter
     * @see #AnimationSet_startOffset
     * @see #AnimationSet_repeatMode
     */
    public static final int[] AnimationSet={
      0x01010198, 0x010101bb, 0x010101bc, 0x010101bd, 
      0x010101be, 0x010101c0
    };
    /**
     * <p>
     * @attr description
     * Amount of time (in milliseconds) to display this frame.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:duration
     */
    public static final int AnimationSet_duration=0;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#shareInterpolator}
     * attribute's value can be found in the {@link #AnimationSet} array.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:shareInterpolator
     */
    public static final int AnimationSet_shareInterpolator=1;
    /**
     * <p>
     * @attr description
     * When set to true or when fillEnabled is not set to true, the animation transformation
     * is applied before the animation has started. The default value is true.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:fillBefore
     */
    public static final int AnimationSet_fillBefore=2;
    /**
     * <p>
     * @attr description
     * When set to true, the animation transformation is applied after the animation is
     * over. The default value is false. If fillEnabled is not set to true and the
     * animation is not set on a View, fillAfter is assumed to be true.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:fillAfter
     */
    public static final int AnimationSet_fillAfter=3;
    /**
     * <p>
     * @attr description
     * Delay in milliseconds before the animation runs, once start time is reached.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:startOffset
     */
    public static final int AnimationSet_startOffset=4;
    /**
     * <p>
     * @attr description
     * Defines the animation behavior when it reaches the end and the repeat count is
     * greater than 0 or infinite. The default value is restart.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>restart</td><td>1</td><td>The animation starts again from the beginning.</td></tr>
     * <tr><td>reverse</td><td>2</td><td>The animation plays backward.</td></tr>
     * </table>
     *
     * @attr name android:repeatMode
     */
    public static final int AnimationSet_repeatMode=5;
    /**
     * Attributes that can be used with a Animator.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Animator_interpolator android:interpolator}</code></td><td>Sets the acceleration curve for the indeterminate animation.</td></tr>
     * <tr><td><code>{@link #Animator_duration android:duration}</code></td><td>Amount of time (in milliseconds) to display this frame.</td></tr>
     * <tr><td><code>{@link #Animator_startOffset android:startOffset}</code></td><td>Delay in milliseconds before the animation runs, once start time is reached.</td></tr>
     * <tr><td><code>{@link #Animator_repeatCount android:repeatCount}</code></td><td>Defines how many times the animation should repeat.</td></tr>
     * <tr><td><code>{@link #Animator_repeatMode android:repeatMode}</code></td><td>Defines the animation behavior when it reaches the end and the repeat count is
     * greater than 0 or infinite.</td></tr>
     * <tr><td><code>{@link #Animator_valueFrom android:valueFrom}</code></td><td>Value the animation starts from.</td></tr>
     * <tr><td><code>{@link #Animator_valueTo android:valueTo}</code></td><td>Value the animation animates to.</td></tr>
     * <tr><td><code>{@link #Animator_valueType android:valueType}</code></td><td>The type of valueFrom and valueTo.</td></tr>
     * </table>
     * @see #Animator_interpolator
     * @see #Animator_duration
     * @see #Animator_startOffset
     * @see #Animator_repeatCount
     * @see #Animator_repeatMode
     * @see #Animator_valueFrom
     * @see #Animator_valueTo
     * @see #Animator_valueType
     */
    public static final int[] Animator={
      0x01010141, 0x01010198, 0x010101be, 0x010101bf, 
      0x010101c0, 0x010102de, 0x010102df, 0x010102e0, 
      0x011200cb
    };
    /**
     * <p>
     * @attr description
     * Defines the interpolator used to smooth the animation movement in time.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:interpolator
     */
    public static final int Animator_interpolator=0;
    /**
     * <p>
     * @attr description
     * Amount of time (in milliseconds) for the animation to run.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:duration
     */
    public static final int Animator_duration=1;
    /**
     * <p>
     * @attr description
     * Delay in milliseconds before the animation runs, once start time is reached.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:startOffset
     */
    public static final int Animator_startOffset=2;
    /**
     * <p>
     * @attr description
     * Defines how many times the animation should repeat. The default value is 0.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>infinite</td><td>ffffffff</td><td></td></tr>
     * </table>
     *
     * @attr name android:repeatCount
     */
    public static final int Animator_repeatCount=3;
    /**
     * <p>
     * @attr description
     * Defines the animation behavior when it reaches the end and the repeat count is
     * greater than 0 or infinite. The default value is restart.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>restart</td><td>1</td><td>The animation starts again from the beginning.</td></tr>
     * <tr><td>reverse</td><td>2</td><td>The animation plays backward.</td></tr>
     * </table>
     *
     * @attr name android:repeatMode
     */
    public static final int Animator_repeatMode=4;
    /**
     * <p>
     * @attr description
     * Value the animation starts from.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:valueFrom
     */
    public static final int Animator_valueFrom=5;
    /**
     * <p>
     * @attr description
     * Value the animation animates to.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:valueTo
     */
    public static final int Animator_valueTo=6;
    /**
     * <p>
     * @attr description
     * The type of valueFrom and valueTo.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>colorType</td><td>3</td><td>values are colors, which are integers starting with "#".</td></tr>
     * <tr><td>floatType</td><td>0</td><td>The given values are floats. This is the default value if valueType is
     * unspecified. Note that if any value attribute has a color value
     * (beginning with "#"), then this attribute is ignored and the color values are
     * interpreted as integers.</td></tr>
     * <tr><td>intType</td><td>1</td><td>values are integers.</td></tr>
     * <tr><td>pathType</td><td>2</td><td>values are paths defined as strings.
     * This type is used for path morphing in AnimatedVectorDrawable.</td></tr>
     * </table>
     *
     * @attr name android:valueType
     */
    public static final int Animator_valueType=7;
    /**
     * Attributes that can be used with a AnimatorSet.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AnimatorSet_ordering android:ordering}</code></td><td>Name of the property being animated.</td></tr>
     * </table>
     * @see #AnimatorSet_ordering
     */
    public static final int[] AnimatorSet={
      0x010102e2
    };
    /**
     * <p>
     * @attr description
     * Name of the property being animated.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>sequentially</td><td>1</td><td>child animations should be played sequentially, in the same order as the xml.</td></tr>
     * <tr><td>together</td><td>0</td><td>child animations should be played together.</td></tr>
     * </table>
     *
     * @attr name android:ordering
     */
    public static final int AnimatorSet_ordering=0;
    /**
     * Attributes that can be used with a AnticipateInterpolator.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AnticipateInterpolator_tension android:tension}</code></td><td>This is the amount of tension.</td></tr>
     * </table>
     * @see #AnticipateInterpolator_tension
     */
    public static final int[] AnticipateInterpolator={
      0x0101026a
    };
    /**
     * <p>
     * @attr description
     * This is the amount of tension.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:tension
     */
    public static final int AnticipateInterpolator_tension=0;
    /**
     * Attributes that can be used with a AnticipateOvershootInterpolator.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AnticipateOvershootInterpolator_tension android:tension}</code></td><td>This is the amount of tension.</td></tr>
     * <tr><td><code>{@link #AnticipateOvershootInterpolator_extraTension android:extraTension}</code></td><td>This is the amount by which to multiply the tension.</td></tr>
     * </table>
     * @see #AnticipateOvershootInterpolator_tension
     * @see #AnticipateOvershootInterpolator_extraTension
     */
    public static final int[] AnticipateOvershootInterpolator={
      0x0101026a, 0x0101026b
    };
    /**
     * <p>
     * @attr description
     * This is the amount of tension.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:tension
     */
    public static final int AnticipateOvershootInterpolator_tension=0;
    /**
     * <p>
     * @attr description
     * This is the amount by which to multiply the tension.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:extraTension
     */
    public static final int AnticipateOvershootInterpolator_extraTension=1;
    /**
     * Use <code>appwidget-provider</code> as the root tag of the XML resource that
     * describes an AppWidget provider.  See {@link android.appwidget android.appwidget}
     * package for more info.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AppWidgetProviderInfo_description android:description}</code></td><td>Descriptive text for the associated data.</td></tr>
     * <tr><td><code>{@link #AppWidgetProviderInfo_minWidth android:minWidth}</code></td><td></td></tr>
     * <tr><td><code>{@link #AppWidgetProviderInfo_minHeight android:minHeight}</code></td><td></td></tr>
     * <tr><td><code>{@link #AppWidgetProviderInfo_updatePeriodMillis android:updatePeriodMillis}</code></td><td>Update period in milliseconds, or 0 if the AppWidget will update itself.</td></tr>
     * <tr><td><code>{@link #AppWidgetProviderInfo_initialLayout android:initialLayout}</code></td><td>A resource id of a layout.</td></tr>
     * <tr><td><code>{@link #AppWidgetProviderInfo_configure android:configure}</code></td><td>A class name in the AppWidget's package to be launched to configure.</td></tr>
     * <tr><td><code>{@link #AppWidgetProviderInfo_previewImage android:previewImage}</code></td><td>A preview, in a drawable resource id, of what the AppWidget will look like after it's
     * configured.</td></tr>
     * <tr><td><code>{@link #AppWidgetProviderInfo_autoAdvanceViewId android:autoAdvanceViewId}</code></td><td>The view id of the AppWidget subview which should be auto-advanced.</td></tr>
     * <tr><td><code>{@link #AppWidgetProviderInfo_resizeMode android:resizeMode}</code></td><td>Optional parameter which indicates if and how this widget can be
     * resized.</td></tr>
     * <tr><td><code>{@link #AppWidgetProviderInfo_minResizeWidth android:minResizeWidth}</code></td><td>Minimum width that the AppWidget can be resized to.</td></tr>
     * <tr><td><code>{@link #AppWidgetProviderInfo_minResizeHeight android:minResizeHeight}</code></td><td>Minimum height that the AppWidget can be resized to.</td></tr>
     * <tr><td><code>{@link #AppWidgetProviderInfo_initialKeyguardLayout android:initialKeyguardLayout}</code></td><td>A resource id of a layout.</td></tr>
     * <tr><td><code>{@link #AppWidgetProviderInfo_widgetCategory android:widgetCategory}</code></td><td>Optional parameter which indicates where this widget can be shown,
     * ie.</td></tr>
     * <tr><td><code>{@link #AppWidgetProviderInfo_widgetFeatures android:widgetFeatures}</code></td><td>Flags indicating various features supported by the widget.</td></tr>
     * <tr><td><code>{@link #AppWidgetProviderInfo_previewLayout android:previewLayout}</code></td><td>The layout resource id of a preview of what the AppWidget will look like after it's
     * configured.</td></tr>
     * <tr><td><code>{@link #AppWidgetProviderInfo_maxResizeWidth android:maxResizeWidth}</code></td><td>Maximum width that the AppWidget can be resized to.</td></tr>
     * <tr><td><code>{@link #AppWidgetProviderInfo_maxResizeHeight android:maxResizeHeight}</code></td><td>Maximum height that the AppWidget can be resized to.</td></tr>
     * <tr><td><code>{@link #AppWidgetProviderInfo_targetCellWidth android:targetCellWidth}</code></td><td>Default width of the AppWidget in units of launcher grid cells.</td></tr>
     * <tr><td><code>{@link #AppWidgetProviderInfo_targetCellHeight android:targetCellHeight}</code></td><td>Default height of the AppWidget in units of launcher grid cells.</td></tr>
     * </table>
     * @see #AppWidgetProviderInfo_description
     * @see #AppWidgetProviderInfo_minWidth
     * @see #AppWidgetProviderInfo_minHeight
     * @see #AppWidgetProviderInfo_updatePeriodMillis
     * @see #AppWidgetProviderInfo_initialLayout
     * @see #AppWidgetProviderInfo_configure
     * @see #AppWidgetProviderInfo_previewImage
     * @see #AppWidgetProviderInfo_autoAdvanceViewId
     * @see #AppWidgetProviderInfo_resizeMode
     * @see #AppWidgetProviderInfo_minResizeWidth
     * @see #AppWidgetProviderInfo_minResizeHeight
     * @see #AppWidgetProviderInfo_initialKeyguardLayout
     * @see #AppWidgetProviderInfo_widgetCategory
     * @see #AppWidgetProviderInfo_widgetFeatures
     * @see #AppWidgetProviderInfo_previewLayout
     * @see #AppWidgetProviderInfo_maxResizeWidth
     * @see #AppWidgetProviderInfo_maxResizeHeight
     * @see #AppWidgetProviderInfo_targetCellWidth
     * @see #AppWidgetProviderInfo_targetCellHeight
     */
    public static final int[] AppWidgetProviderInfo={
      0x01010020, 0x0101013f, 0x01010140, 0x01010250, 
      0x01010251, 0x0101025d, 0x010102da, 0x0101030f, 
      0x01010363, 0x01010395, 0x01010396, 0x010103c2, 
      0x010103c4, 0x01010579, 0x01010627, 0x01010632, 
      0x01010633, 0x01010634, 0x01010635
    };
    /**
     * <p>
     * @attr description
     * A resource identifier for a string containing a short description of the widget.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:description
     */
    public static final int AppWidgetProviderInfo_description=0;
    /**
     * <p>
     * @attr description
     * Minimum width of the AppWidget.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:minWidth
     */
    public static final int AppWidgetProviderInfo_minWidth=1;
    /**
     * <p>
     * @attr description
     * Minimum height of the AppWidget.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:minHeight
     */
    public static final int AppWidgetProviderInfo_minHeight=2;
    /**
     * <p>
     * @attr description
     * Update period in milliseconds, or 0 if the AppWidget will update itself.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:updatePeriodMillis
     */
    public static final int AppWidgetProviderInfo_updatePeriodMillis=3;
    /**
     * <p>
     * @attr description
     * A resource id of a layout.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:initialLayout
     */
    public static final int AppWidgetProviderInfo_initialLayout=4;
    /**
     * <p>
     * @attr description
     * A class name in the AppWidget's package to be launched to configure.
     * If not supplied, then no activity will be launched.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:configure
     */
    public static final int AppWidgetProviderInfo_configure=5;
    /**
     * <p>
     * @attr description
     * A preview, in a drawable resource id, of what the AppWidget will look like after it's
     * configured.
     * If not supplied, the AppWidget's icon will be used.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:previewImage
     */
    public static final int AppWidgetProviderInfo_previewImage=6;
    /**
     * <p>
     * @attr description
     * The view id of the AppWidget subview which should be auto-advanced.
     * by the widget's host.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:autoAdvanceViewId
     */
    public static final int AppWidgetProviderInfo_autoAdvanceViewId=7;
    /**
     * <p>
     * @attr description
     * Optional parameter which indicates if and how this widget can be
     * resized. Supports combined values using | operator.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>horizontal</td><td>1</td><td></td></tr>
     * <tr><td>none</td><td>0</td><td></td></tr>
     * <tr><td>vertical</td><td>2</td><td></td></tr>
     * </table>
     *
     * @attr name android:resizeMode
     */
    public static final int AppWidgetProviderInfo_resizeMode=8;
    /**
     * <p>
     * @attr description
     * Minimum width that the AppWidget can be resized to.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:minResizeWidth
     */
    public static final int AppWidgetProviderInfo_minResizeWidth=9;
    /**
     * <p>
     * @attr description
     * Minimum height that the AppWidget can be resized to.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:minResizeHeight
     */
    public static final int AppWidgetProviderInfo_minResizeHeight=10;
    /**
     * <p>
     * @attr description
     * A resource id of a layout.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:initialKeyguardLayout
     */
    public static final int AppWidgetProviderInfo_initialKeyguardLayout=11;
    /**
     * <p>
     * @attr description
     * Optional parameter which indicates where this widget can be shown,
     * ie. home screen, keyguard, search bar or any combination thereof.
     * Supports combined values using | operator.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>home_screen</td><td>1</td><td></td></tr>
     * <tr><td>keyguard</td><td>2</td><td></td></tr>
     * <tr><td>searchbox</td><td>4</td><td></td></tr>
     * </table>
     *
     * @attr name android:widgetCategory
     */
    public static final int AppWidgetProviderInfo_widgetCategory=12;
    /**
     * <p>
     * @attr description
     * Flags indicating various features supported by the widget. These are hints to the
     * widget host, and do not actually change the behavior of the widget.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>configuration_optional</td><td>4</td><td>The widget provides a default configuration. The host may decide not to launch
     * the provided configuration activity.</td></tr>
     * <tr><td>hide_from_picker</td><td>2</td><td>The widget is added directly by the app, and does not need to appear in
     * the global list of available widgets</td></tr>
     * <tr><td>reconfigurable</td><td>1</td><td>The widget can be reconfigured anytime after it is bound</td></tr>
     * </table>
     *
     * @attr name android:widgetFeatures
     */
    public static final int AppWidgetProviderInfo_widgetFeatures=13;
    /**
     * <p>
     * @attr description
     * The layout resource id of a preview of what the AppWidget will look like after it's
     * configured.
     * Unlike previewImage, previewLayout can better showcase AppWidget in different locales,
     * system themes, display sizes & density etc.
     * If supplied, this will take precedence over the previewImage on supported widget hosts.
     * Otherwise, previewImage will be used.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:previewLayout
     */
    public static final int AppWidgetProviderInfo_previewLayout=14;
    /**
     * <p>
     * @attr description
     * Maximum width that the AppWidget can be resized to.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:maxResizeWidth
     */
    public static final int AppWidgetProviderInfo_maxResizeWidth=15;
    /**
     * <p>
     * @attr description
     * Maximum height that the AppWidget can be resized to.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:maxResizeHeight
     */
    public static final int AppWidgetProviderInfo_maxResizeHeight=16;
    /**
     * <p>
     * @attr description
     * Default width of the AppWidget in units of launcher grid cells.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:targetCellWidth
     */
    public static final int AppWidgetProviderInfo_targetCellWidth=17;
    /**
     * <p>
     * @attr description
     * Default height of the AppWidget in units of launcher grid cells.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:targetCellHeight
     */
    public static final int AppWidgetProviderInfo_targetCellHeight=18;
    /**
     * Use <code>arcMotion</code> as the root tag of the XML resource that
     * describes a {@link android.transition.ArcMotion}. This must be used
     * within a transition with which the PathMotion should be associated.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ArcMotion_minimumHorizontalAngle android:minimumHorizontalAngle}</code></td><td>The minimum arc angle in degrees between the start and end points when
     * they are close to horizontal.</td></tr>
     * <tr><td><code>{@link #ArcMotion_minimumVerticalAngle android:minimumVerticalAngle}</code></td><td>The minimum arc angle in degrees between the start and end points when
     * they are close to vertical.</td></tr>
     * <tr><td><code>{@link #ArcMotion_maximumAngle android:maximumAngle}</code></td><td>The maximum arc angle in degrees between the start and end points.</td></tr>
     * </table>
     * @see #ArcMotion_minimumHorizontalAngle
     * @see #ArcMotion_minimumVerticalAngle
     * @see #ArcMotion_maximumAngle
     */
    public static final int[] ArcMotion={
      0x0101047d, 0x0101047e, 0x0101047f
    };
    /**
     * <p>
     * @attr description
     * The minimum arc angle in degrees between the start and end points when
     * they are close to horizontal.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:minimumHorizontalAngle
     */
    public static final int ArcMotion_minimumHorizontalAngle=0;
    /**
     * <p>
     * @attr description
     * The minimum arc angle in degrees between the start and end points when
     * they are close to vertical.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:minimumVerticalAngle
     */
    public static final int ArcMotion_minimumVerticalAngle=1;
    /**
     * <p>
     * @attr description
     * The maximum arc angle in degrees between the start and end points.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:maximumAngle
     */
    public static final int ArcMotion_maximumAngle=2;
    /**
     * Attributes that can be used with a AutoCompleteTextView.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AutoCompleteTextView_completionHint android:completionHint}</code></td><td>Defines the hint displayed in the drop down menu.</td></tr>
     * <tr><td><code>{@link #AutoCompleteTextView_completionHintView android:completionHintView}</code></td><td>Defines the hint view displayed in the drop down menu.</td></tr>
     * <tr><td><code>{@link #AutoCompleteTextView_completionThreshold android:completionThreshold}</code></td><td>Defines the number of characters that the user must type before
     * completion suggestions are displayed in a drop down menu.</td></tr>
     * <tr><td><code>{@link #AutoCompleteTextView_dropDownSelector android:dropDownSelector}</code></td><td>Selector in a drop down list.</td></tr>
     * <tr><td><code>{@link #AutoCompleteTextView_inputType android:inputType}</code></td><td>The type of data being placed in a text field, used to help an
     * input method decide how to let the user enter text.</td></tr>
     * <tr><td><code>{@link #AutoCompleteTextView_dropDownWidth android:dropDownWidth}</code></td><td>Specifies the basic width of the dropdown.</td></tr>
     * <tr><td><code>{@link #AutoCompleteTextView_dropDownAnchor android:dropDownAnchor}</code></td><td>View to anchor the auto-complete dropdown to.</td></tr>
     * <tr><td><code>{@link #AutoCompleteTextView_dropDownHeight android:dropDownHeight}</code></td><td>Specifies the basic height of the dropdown.</td></tr>
     * <tr><td><code>{@link #AutoCompleteTextView_popupTheme android:popupTheme}</code></td><td>Reference to a theme that should be used to inflate popups
     * shown by widgets in the toolbar.</td></tr>
     * </table>
     * @see #AutoCompleteTextView_completionHint
     * @see #AutoCompleteTextView_completionHintView
     * @see #AutoCompleteTextView_completionThreshold
     * @see #AutoCompleteTextView_dropDownSelector
     * @see #AutoCompleteTextView_inputType
     * @see #AutoCompleteTextView_dropDownWidth
     * @see #AutoCompleteTextView_dropDownAnchor
     * @see #AutoCompleteTextView_dropDownHeight
     * @see #AutoCompleteTextView_popupTheme
     */
    public static final int[] AutoCompleteTextView={
      0x01010172, 0x01010173, 0x01010174, 0x01010175, 
      0x01010220, 0x01010262, 0x01010263, 0x01010283, 
      0x010104a9
    };
    /**
     * <p>
     * @attr description
     * Defines the hint displayed in the drop down menu.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:completionHint
     */
    public static final int AutoCompleteTextView_completionHint=0;
    /**
     * <p>
     * @attr description
     * Defines the hint view displayed in the drop down menu.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:completionHintView
     */
    public static final int AutoCompleteTextView_completionHintView=1;
    /**
     * <p>
     * @attr description
     * Defines the number of characters that the user must type before
     * completion suggestions are displayed in a drop down menu.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:completionThreshold
     */
    public static final int AutoCompleteTextView_completionThreshold=2;
    /**
     * <p>
     * @attr description
     * Selector in a drop down list.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:dropDownSelector
     */
    public static final int AutoCompleteTextView_dropDownSelector=3;
    /**
     * <p>
     * @attr description
     * The type of data being placed in a text field, used to help an
     * input method decide how to let the user enter text.  The constants
     * here correspond to those defined by
     * {@link android.text.InputType}.  Generally you can select
     * a single value, though some can be combined together as
     * indicated.  Setting this attribute to anything besides
     * <var>none</var> also implies that the text is editable.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>date</td><td>14</td><td>For entering a date.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_DATETIME} |
     * {@link android.text.InputType#TYPE_DATETIME_VARIATION_DATE}.</td></tr>
     * <tr><td>datetime</td><td>4</td><td>For entering a date and time.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_DATETIME} |
     * {@link android.text.InputType#TYPE_DATETIME_VARIATION_NORMAL}.</td></tr>
     * <tr><td>none</td><td>0</td><td>There is no content type.  The text is not editable.</td></tr>
     * <tr><td>number</td><td>2</td><td>A numeric only field.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
     * {@link android.text.InputType#TYPE_NUMBER_VARIATION_NORMAL}.</td></tr>
     * <tr><td>numberDecimal</td><td>2002</td><td>Can be combined with <var>number</var> and its other options to
     * allow a decimal (fractional) number.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
     * {@link android.text.InputType#TYPE_NUMBER_FLAG_DECIMAL}.</td></tr>
     * <tr><td>numberPassword</td><td>12</td><td>A numeric password field.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
     * {@link android.text.InputType#TYPE_NUMBER_VARIATION_PASSWORD}.</td></tr>
     * <tr><td>numberSigned</td><td>1002</td><td>Can be combined with <var>number</var> and its other options to
     * allow a signed number.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
     * {@link android.text.InputType#TYPE_NUMBER_FLAG_SIGNED}.</td></tr>
     * <tr><td>phone</td><td>3</td><td>For entering a phone number.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_PHONE}.</td></tr>
     * <tr><td>text</td><td>1</td><td>Just plain old text.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_NORMAL}.</td></tr>
     * <tr><td>textAutoComplete</td><td>10001</td><td>Can be combined with <var>text</var> and its variations to
     * specify that this field will be doing its own auto-completion and
     * talking with the input method appropriately.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_AUTO_COMPLETE}.</td></tr>
     * <tr><td>textAutoCorrect</td><td>8001</td><td>Can be combined with <var>text</var> and its variations to
     * request auto-correction of text being input.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_AUTO_CORRECT}.</td></tr>
     * <tr><td>textCapCharacters</td><td>1001</td><td>Can be combined with <var>text</var> and its variations to
     * request capitalization of all characters.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_CHARACTERS}.</td></tr>
     * <tr><td>textCapSentences</td><td>4001</td><td>Can be combined with <var>text</var> and its variations to
     * request capitalization of the first character of every sentence.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_SENTENCES}.</td></tr>
     * <tr><td>textCapWords</td><td>2001</td><td>Can be combined with <var>text</var> and its variations to
     * request capitalization of the first character of every word.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_WORDS}.</td></tr>
     * <tr><td>textEmailAddress</td><td>21</td><td>Text that will be used as an e-mail address.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_EMAIL_ADDRESS}.</td></tr>
     * <tr><td>textEmailSubject</td><td>31</td><td>Text that is being supplied as the subject of an e-mail.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_EMAIL_SUBJECT}.</td></tr>
     * <tr><td>textFilter</td><td>b1</td><td>Text that is filtering some other data.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_FILTER}.</td></tr>
     * <tr><td>textImeMultiLine</td><td>40001</td><td>Can be combined with <var>text</var> and its variations to
     * indicate that though the regular text view should not be multiple
     * lines, the IME should provide multiple lines if it can.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_IME_MULTI_LINE}.</td></tr>
     * <tr><td>textLongMessage</td><td>51</td><td>Text that is the content of a long message.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_LONG_MESSAGE}.</td></tr>
     * <tr><td>textMultiLine</td><td>20001</td><td>Can be combined with <var>text</var> and its variations to
     * allow multiple lines of text in the field.  If this flag is not set,
     * the text field will be constrained to a single line.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_MULTI_LINE}.
     * Note: If this flag is not set and the text field doesn't have max length limit, the
     * framework automatically set maximum length of the characters to 5000 for the
     * performance reasons.</td></tr>
     * <tr><td>textNoSuggestions</td><td>80001</td><td>Can be combined with <var>text</var> and its variations to
     * indicate that the IME should not show any
     * dictionary-based word suggestions.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_NO_SUGGESTIONS}.</td></tr>
     * <tr><td>textPassword</td><td>81</td><td>Text that is a password.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_PASSWORD}.</td></tr>
     * <tr><td>textPersonName</td><td>61</td><td>Text that is the name of a person.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_PERSON_NAME}.</td></tr>
     * <tr><td>textPhonetic</td><td>c1</td><td>Text that is for phonetic pronunciation, such as a phonetic name
     * field in a contact entry.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_PHONETIC}.</td></tr>
     * <tr><td>textPostalAddress</td><td>71</td><td>Text that is being supplied as a postal mailing address.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_POSTAL_ADDRESS}.</td></tr>
     * <tr><td>textShortMessage</td><td>41</td><td>Text that is the content of a short message.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_SHORT_MESSAGE}.</td></tr>
     * <tr><td>textUri</td><td>11</td><td>Text that will be used as a URI.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_URI}.</td></tr>
     * <tr><td>textVisiblePassword</td><td>91</td><td>Text that is a password that should be visible.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_VISIBLE_PASSWORD}.</td></tr>
     * <tr><td>textWebEditText</td><td>a1</td><td>Text that is being supplied as text in a web form.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_EDIT_TEXT}.</td></tr>
     * <tr><td>textWebEmailAddress</td><td>d1</td><td>Text that will be used as an e-mail address on a web form.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS}.</td></tr>
     * <tr><td>textWebPassword</td><td>e1</td><td>Text that will be used as a password on a web form.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_PASSWORD}.</td></tr>
     * <tr><td>time</td><td>24</td><td>For entering a time.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_DATETIME} |
     * {@link android.text.InputType#TYPE_DATETIME_VARIATION_TIME}.</td></tr>
     * </table>
     *
     * @attr name android:inputType
     */
    public static final int AutoCompleteTextView_inputType=4;
    /**
     * <p>
     * @attr description
     * Specifies the basic width of the dropdown. Its value may
     * be a dimension (such as "12dip") for a constant width,
     * fill_parent or match_parent to match the width of the
     * screen, or wrap_content to match the width of
     * the anchored view.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>fill_parent</td><td>ffffffff</td><td>The dropdown should fill the width of the screen.
     * This constant is deprecated starting from API Level 8 and
     * is replaced by {@code match_parent}.</td></tr>
     * <tr><td>match_parent</td><td>ffffffff</td><td>The dropdown should fit the width of the screen.
     * Introduced in API Level 8.</td></tr>
     * <tr><td>wrap_content</td><td>fffffffe</td><td>The dropdown should fit the width of its anchor.</td></tr>
     * </table>
     *
     * @attr name android:dropDownWidth
     */
    public static final int AutoCompleteTextView_dropDownWidth=5;
    /**
     * <p>
     * @attr description
     * View to anchor the auto-complete dropdown to. If not specified, the text view itself
     * is used.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:dropDownAnchor
     */
    public static final int AutoCompleteTextView_dropDownAnchor=6;
    /**
     * <p>
     * @attr description
     * Specifies the basic height of the dropdown. Its value may
     * be a dimension (such as "12dip") for a constant height,
     * fill_parent or match_parent to fill the height of the
     * screen, or wrap_content to match the height of
     * the content of the drop down.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>fill_parent</td><td>ffffffff</td><td>The dropdown should fit the height of the screen.
     * This constant is deprecated starting from API Level 8 and
     * is replaced by {@code match_parent}.</td></tr>
     * <tr><td>match_parent</td><td>ffffffff</td><td>The dropdown should fit the height of the screen.
     * Introduced in API Level 8.</td></tr>
     * <tr><td>wrap_content</td><td>fffffffe</td><td>The dropdown should fit the height of the content.</td></tr>
     * </table>
     *
     * @attr name android:dropDownHeight
     */
    public static final int AutoCompleteTextView_dropDownHeight=7;
    /**
     * <p>
     * @attr description
     * Theme to use for the completion popup window.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:popupTheme
     */
    public static final int AutoCompleteTextView_popupTheme=8;
    /**
     * Use <code>autofill-service</code> as the root tag of the XML resource that describes a
     * {@link android.service.autofill.AutofillService}, which is referenced from its
     * {@link android.service.autofill.AutofillService#SERVICE_META_DATA} meta-data entry.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AutofillService_settingsActivity android:settingsActivity}</code></td><td>Fully qualified class name of an activity that allows the user to modify
     * the settings for this service.</td></tr>
     * <tr><td><code>{@link #AutofillService_supportsInlineSuggestions android:supportsInlineSuggestions}</code></td><td>Specifies whether the AutofillService supports inline suggestions</td></tr>
     * <tr><td><code>{@link #AutofillService_passwordsActivity android:passwordsActivity}</code></td><td>Fully qualified class name of an activity that allows the user to view any passwords
     * saved by this service.</td></tr>
     * </table>
     * @see #AutofillService_settingsActivity
     * @see #AutofillService_supportsInlineSuggestions
     * @see #AutofillService_passwordsActivity
     */
    public static final int[] AutofillService={
      0x01010225, 0x0101060d, 0x0101063f
    };
    /**
     * <p>
     * @attr description
     * Fully qualified class name of an activity that allows the user to modify
     * the settings for this service.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:settingsActivity
     */
    public static final int AutofillService_settingsActivity=0;
    /**
     * <p>
     * @attr description
     * Specifies whether the AutofillService supports inline suggestions
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:supportsInlineSuggestions
     */
    public static final int AutofillService_supportsInlineSuggestions=1;
    /**
     * <p>
     * @attr description
     * Fully qualified class name of an activity that allows the user to view any passwords
     * saved by this service.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:passwordsActivity
     */
    public static final int AutofillService_passwordsActivity=2;
    /**
     * Use <code>compatibility-package</code> as a child tag of <code>autofill-service</code>
     * in the XML resource that describes an {@link android.service.autofill.AutofillService}
     * to specify a package and an optional max version code for which to request compatibility
     * mode. If no max version code is specified compatibility mode is requested for all package
     * versions. The max version code is useful to avoid requesting compatibility mode for newer
     * package versions that are known to natively support autofill.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #AutofillService_CompatibilityPackage_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * <tr><td><code>{@link #AutofillService_CompatibilityPackage_maxLongVersionCode android:maxLongVersionCode}</code></td><td>The max version code of the package for which compatibility mode is
     * requested.</td></tr>
     * </table>
     * @see #AutofillService_CompatibilityPackage_name
     * @see #AutofillService_CompatibilityPackage_maxLongVersionCode
     */
    public static final int[] AutofillService_CompatibilityPackage={
      0x01010003, 0x01010583
    };
    /**
     * <p>
     * @attr description
     * The package name for which compatibility mode is requested.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int AutofillService_CompatibilityPackage_name=0;
    /**
     * <p>
     * @attr description
     * The max version code of the package for which compatibility mode is
     * requested. This corresponds to the long value returned by {@link
     * android.content.pm.PackageInfo#getLongVersionCode()} for the target package.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:maxLongVersionCode
     */
    public static final int AutofillService_CompatibilityPackage_maxLongVersionCode=1;
    /**
     * Drawable used to draw bitmaps.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #BitmapDrawable_gravity android:gravity}</code></td><td>Specifies how an object should position its content, on both the X and Y axes,
     * within its own bounds.</td></tr>
     * <tr><td><code>{@link #BitmapDrawable_src android:src}</code></td><td>Sets a drawable as the content of this ImageView.</td></tr>
     * <tr><td><code>{@link #BitmapDrawable_antialias android:antialias}</code></td><td>Enables or disables antialiasing.</td></tr>
     * <tr><td><code>{@link #BitmapDrawable_filter android:filter}</code></td><td>Enables or disables bitmap filtering.</td></tr>
     * <tr><td><code>{@link #BitmapDrawable_dither android:dither}</code></td><td>Enables or disables dithering of the bitmap if the bitmap does not have the
     * same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
     * an RGB 565 screen).</td></tr>
     * <tr><td><code>{@link #BitmapDrawable_tint android:tint}</code></td><td>The tinting color for the image.</td></tr>
     * <tr><td><code>{@link #BitmapDrawable_tileMode android:tileMode}</code></td><td>Defines the tile mode.</td></tr>
     * <tr><td><code>{@link #BitmapDrawable_alpha android:alpha}</code></td><td>alpha property of the view, as a value between 0 (completely transparent) and 1
     * (completely opaque).</td></tr>
     * <tr><td><code>{@link #BitmapDrawable_mipMap android:mipMap}</code></td><td>Enables or disables the mipmap hint.</td></tr>
     * <tr><td><code>{@link #BitmapDrawable_autoMirrored android:autoMirrored}</code></td><td>Indicates if the drawable needs to be mirrored when its layout direction is
     * RTL (right-to-left).</td></tr>
     * <tr><td><code>{@link #BitmapDrawable_tintMode android:tintMode}</code></td><td>When a tint color is set, specifies its Porter-Duff blending mode.</td></tr>
     * <tr><td><code>{@link #BitmapDrawable_tileModeX android:tileModeX}</code></td><td>Defines the horizontal tile mode.</td></tr>
     * <tr><td><code>{@link #BitmapDrawable_tileModeY android:tileModeY}</code></td><td>Defines the vertical tile mode.</td></tr>
     * </table>
     * @see #BitmapDrawable_gravity
     * @see #BitmapDrawable_src
     * @see #BitmapDrawable_antialias
     * @see #BitmapDrawable_filter
     * @see #BitmapDrawable_dither
     * @see #BitmapDrawable_tint
     * @see #BitmapDrawable_tileMode
     * @see #BitmapDrawable_alpha
     * @see #BitmapDrawable_mipMap
     * @see #BitmapDrawable_autoMirrored
     * @see #BitmapDrawable_tintMode
     * @see #BitmapDrawable_tileModeX
     * @see #BitmapDrawable_tileModeY
     */
    public static final int[] BitmapDrawable={
      0x010100af, 0x01010119, 0x0101011a, 0x0101011b, 
      0x0101011c, 0x01010121, 0x01010201, 0x0101031f, 
      0x010103cd, 0x010103ea, 0x010103fb, 0x01010477, 
      0x01010478
    };
    /**
     * <p>
     * @attr description
     * Defines the gravity for the bitmap. The gravity indicates where to position
     * the drawable in its container if the bitmap is smaller than the container.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
     * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
     * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
     * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
     * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the horizontal gravity: a left gravity will clip the right
     * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
     * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the vertical gravity: a top gravity will clip the bottom
     * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
     * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
     * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
     * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
     * </table>
     *
     * @attr name android:gravity
     */
    public static final int BitmapDrawable_gravity=0;
    /**
     * <p>
     * @attr description
     * Identifier of the bitmap file. This attribute is mandatory.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:src
     */
    public static final int BitmapDrawable_src=1;
    /**
     * <p>
     * @attr description
     * Enables or disables antialiasing. Antialiasing can be used to smooth the
     * edges of a bitmap when rotated. Default value is false.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:antialias
     */
    public static final int BitmapDrawable_antialias=2;
    /**
     * <p>
     * @attr description
     * Enables or disables bitmap filtering. Filtering is used when the bitmap is
     * shrunk or stretched to smooth its apperance. Default value is true.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:filter
     */
    public static final int BitmapDrawable_filter=3;
    /**
     * <p>
     * @attr description
     * Enables or disables dithering of the bitmap if the bitmap does not have the
     * same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
     * an RGB 565 screen). Default value is true.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:dither
     */
    public static final int BitmapDrawable_dither=4;
    /**
     * <p>
     * @attr description
     * If set, specifies the color to apply to the drawable as a tint. By default,
     * no tint is applied. May be a color state list.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:tint
     */
    public static final int BitmapDrawable_tint=5;
    /**
     * <p>
     * @attr description
     * Defines the tile mode. When the tile mode is enabled, the bitmap is repeated.
     * Gravity is ignored when the tile mode is enabled. Default value is "disabled".
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>clamp</td><td>0</td><td>Replicates the edge color.</td></tr>
     * <tr><td>disabled</td><td>ffffffff</td><td>Do not tile the bitmap. This is the default value.</td></tr>
     * <tr><td>mirror</td><td>2</td><td>Repeats the shader's image horizontally and vertically, alternating
     * mirror images so that adjacent images always seam.</td></tr>
     * <tr><td>repeat</td><td>1</td><td>Repeats the bitmap in both direction.</td></tr>
     * </table>
     *
     * @attr name android:tileMode
     */
    public static final int BitmapDrawable_tileMode=6;
    /**
     * <p>
     * @attr description
     * Specifies the alpha multiplier to apply to the base drawable.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:alpha
     */
    public static final int BitmapDrawable_alpha=7;
    /**
     * <p>
     * @attr description
     * Enables or disables the mipmap hint. See
     * {@link android.graphics.Bitmap#setHasMipMap(boolean)} for more information.
     * Default value is false.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:mipMap
     */
    public static final int BitmapDrawable_mipMap=8;
    /**
     * <p>
     * @attr description
     * Indicates if the drawable needs to be mirrored when its layout direction is
     * RTL (right-to-left).
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:autoMirrored
     */
    public static final int BitmapDrawable_autoMirrored=9;
    /**
     * <p>
     * @attr description
     * When a tint color is set, specifies its Porter-Duff blending mode. The
     * default value is src_in, which treats the drawable as an alpha mask.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     *
     * @attr name android:tintMode
     */
    public static final int BitmapDrawable_tintMode=10;
    /**
     * <p>
     * @attr description
     * Defines the horizontal tile mode. When the tile mode is enabled, the bitmap is repeated.
     * Gravity is ignored when the tile mode is enabled. Default value is "disabled".
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>clamp</td><td>0</td><td>Replicates the edge color.</td></tr>
     * <tr><td>disabled</td><td>ffffffff</td><td>Do not tile the bitmap. This is the default value.</td></tr>
     * <tr><td>mirror</td><td>2</td><td>Repeats the shader's image horizontally, alternating
     * mirror images so that adjacent images always seam.</td></tr>
     * <tr><td>repeat</td><td>1</td><td>Repeats the bitmap horizontally.</td></tr>
     * </table>
     *
     * @attr name android:tileModeX
     */
    public static final int BitmapDrawable_tileModeX=11;
    /**
     * <p>
     * @attr description
     * Defines the vertical tile mode. When the tile mode is enabled, the bitmap is repeated.
     * Gravity is ignored when the tile mode is enabled. Default value is "disabled".
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>clamp</td><td>0</td><td>Replicates the edge color.</td></tr>
     * <tr><td>disabled</td><td>ffffffff</td><td>Do not tile the bitmap. This is the default value.</td></tr>
     * <tr><td>mirror</td><td>2</td><td>Repeats the shader's image vertically, alternating
     * mirror images so that adjacent images always seam.</td></tr>
     * <tr><td>repeat</td><td>1</td><td>Repeats the bitmap vertically.</td></tr>
     * </table>
     *
     * @attr name android:tileModeY
     */
    public static final int BitmapDrawable_tileModeY=12;
    public static final int[] Button={
    };
    /**
     * @hide
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * </table>
     */
    public static final int[] ButtonBarLayout={
      0x01120010
    };
    /**
     * Attributes that can be used with a CalendarView.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #CalendarView_firstDayOfWeek android:firstDayOfWeek}</code></td><td>The first day of week according to {@link java.util.Calendar}.</td></tr>
     * <tr><td><code>{@link #CalendarView_showWeekNumber android:showWeekNumber}</code></td><td>@deprecated Whether do show week numbers.</td></tr>
     * <tr><td><code>{@link #CalendarView_minDate android:minDate}</code></td><td>The minimal date shown by this calendar view in mm/dd/yyyy format.</td></tr>
     * <tr><td><code>{@link #CalendarView_maxDate android:maxDate}</code></td><td>The maximal date shown by this calendar view in mm/dd/yyyy format.</td></tr>
     * <tr><td><code>{@link #CalendarView_shownWeekCount android:shownWeekCount}</code></td><td>@deprecated The number of weeks to be shown.</td></tr>
     * <tr><td><code>{@link #CalendarView_selectedWeekBackgroundColor android:selectedWeekBackgroundColor}</code></td><td>@deprecated The background color for the selected week.</td></tr>
     * <tr><td><code>{@link #CalendarView_focusedMonthDateColor android:focusedMonthDateColor}</code></td><td>@deprecated The color for the dates of the focused month.</td></tr>
     * <tr><td><code>{@link #CalendarView_unfocusedMonthDateColor android:unfocusedMonthDateColor}</code></td><td>@deprecated The color for the dates of an unfocused month.</td></tr>
     * <tr><td><code>{@link #CalendarView_weekNumberColor android:weekNumberColor}</code></td><td>@deprecated The color for the week numbers.</td></tr>
     * <tr><td><code>{@link #CalendarView_weekSeparatorLineColor android:weekSeparatorLineColor}</code></td><td>@deprecated The color for the separator line between weeks.</td></tr>
     * <tr><td><code>{@link #CalendarView_selectedDateVerticalBar android:selectedDateVerticalBar}</code></td><td>@deprecated Drawable for the vertical bar shown at the beginning and at the end of the selected date.</td></tr>
     * <tr><td><code>{@link #CalendarView_weekDayTextAppearance android:weekDayTextAppearance}</code></td><td>The text appearance for the week day abbreviation in the calendar header.</td></tr>
     * <tr><td><code>{@link #CalendarView_dateTextAppearance android:dateTextAppearance}</code></td><td>The text appearance for the day numbers in the calendar grid.</td></tr>
     * </table>
     * @see #CalendarView_firstDayOfWeek
     * @see #CalendarView_showWeekNumber
     * @see #CalendarView_minDate
     * @see #CalendarView_maxDate
     * @see #CalendarView_shownWeekCount
     * @see #CalendarView_selectedWeekBackgroundColor
     * @see #CalendarView_focusedMonthDateColor
     * @see #CalendarView_unfocusedMonthDateColor
     * @see #CalendarView_weekNumberColor
     * @see #CalendarView_weekSeparatorLineColor
     * @see #CalendarView_selectedDateVerticalBar
     * @see #CalendarView_weekDayTextAppearance
     * @see #CalendarView_dateTextAppearance
     */
    @Deprecated
    public static final int[] CalendarView={
      0x0101033d, 0x0101033e, 0x0101033f, 0x01010340, 
      0x01010341, 0x01010342, 0x01010343, 0x01010344, 
      0x01010345, 0x01010346, 0x01010347, 0x01010348, 
      0x01010349, 0x01120020, 0x01120033, 0x01120034, 
      0x0112008e
    };
    /**
     * <p>
     * @attr description
     * The first day of week according to {@link java.util.Calendar}.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:firstDayOfWeek
     */
    public static final int CalendarView_firstDayOfWeek=0;
    /**
     * <p>
     * @attr description
     * @deprecated Whether do show week numbers.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:showWeekNumber
     */
    @Deprecated
    public static final int CalendarView_showWeekNumber=1;
    /**
     * <p>
     * @attr description
     * The minimal date shown by this calendar view in mm/dd/yyyy format.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:minDate
     */
    public static final int CalendarView_minDate=2;
    /**
     * <p>
     * @attr description
     * The maximal date shown by this calendar view in mm/dd/yyyy format.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:maxDate
     */
    public static final int CalendarView_maxDate=3;
    /**
     * <p>
     * @attr description
     * @deprecated The number of weeks to be shown.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:shownWeekCount
     */
    @Deprecated
    public static final int CalendarView_shownWeekCount=4;
    /**
     * <p>
     * @attr description
     * @deprecated The background color for the selected week.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:selectedWeekBackgroundColor
     */
    @Deprecated
    public static final int CalendarView_selectedWeekBackgroundColor=5;
    /**
     * <p>
     * @attr description
     * @deprecated The color for the dates of the focused month.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:focusedMonthDateColor
     */
    @Deprecated
    public static final int CalendarView_focusedMonthDateColor=6;
    /**
     * <p>
     * @attr description
     * @deprecated The color for the dates of an unfocused month.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:unfocusedMonthDateColor
     */
    @Deprecated
    public static final int CalendarView_unfocusedMonthDateColor=7;
    /**
     * <p>
     * @attr description
     * @deprecated The color for the week numbers.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:weekNumberColor
     */
    @Deprecated
    public static final int CalendarView_weekNumberColor=8;
    /**
     * <p>
     * @attr description
     * @deprecated The color for the separator line between weeks.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:weekSeparatorLineColor
     */
    @Deprecated
    public static final int CalendarView_weekSeparatorLineColor=9;
    /**
     * <p>
     * @attr description
     * @deprecated Drawable for the vertical bar shown at the beginning and at the end of the selected date.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:selectedDateVerticalBar
     */
    @Deprecated
    public static final int CalendarView_selectedDateVerticalBar=10;
    /**
     * <p>
     * @attr description
     * The text appearance for the week day abbreviation in the calendar header.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:weekDayTextAppearance
     */
    public static final int CalendarView_weekDayTextAppearance=11;
    /**
     * <p>
     * @attr description
     * The text appearance for the day numbers in the calendar grid.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:dateTextAppearance
     */
    public static final int CalendarView_dateTextAppearance=12;
    /**
     * Use <code>changeBounds</code>as the root tag of the XML resource that
     * describes a {@link android.transition.ChangeBounds} transition.
     * The attributes of the {@link android.R.styleable#Transition Transition}
     * resource are available in addition to the specific attributes of ChangeBounds
     * described here.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ChangeBounds_resizeClip android:resizeClip}</code></td><td>Resize the view by adjusting the clipBounds rather than changing the
     * dimensions of the view itself.</td></tr>
     * </table>
     * @see #ChangeBounds_resizeClip
     */
    public static final int[] ChangeBounds={
      0x010104cf
    };
    /**
     * <p>
     * @attr description
     * Resize the view by adjusting the clipBounds rather than changing the
     * dimensions of the view itself. The default value is false.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:resizeClip
     */
    public static final int ChangeBounds_resizeClip=0;
    /**
     * Use <code>changeTransform</code> as the root tag of the XML resource that
     * describes a {@link android.transition.ChangeTransform} transition.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ChangeTransform_reparent android:reparent}</code></td><td>Tells ChangeTransform to track parent changes.</td></tr>
     * <tr><td><code>{@link #ChangeTransform_reparentWithOverlay android:reparentWithOverlay}</code></td><td>A parent change should use an overlay or affect the transform of the
     * transitionining View.</td></tr>
     * </table>
     * @see #ChangeTransform_reparent
     * @see #ChangeTransform_reparentWithOverlay
     */
    public static final int[] ChangeTransform={
      0x010104bc, 0x010104bd
    };
    /**
     * <p>
     * @attr description
     * Tells ChangeTransform to track parent changes. Default is true. Corresponds to
     * {@link android.transition.ChangeTransform#setReparent(boolean)}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:reparent
     */
    public static final int ChangeTransform_reparent=0;
    /**
     * <p>
     * @attr description
     * A parent change should use an overlay or affect the transform of the
     * transitionining View. Default is true. Corresponds to
     * {@link android.transition.ChangeTransform#setReparentWithOverlay(boolean)}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:reparentWithOverlay
     */
    public static final int ChangeTransform_reparentWithOverlay=1;
    /**
     * Base attributes available to CheckBoxPreference.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #CheckBoxPreference_summaryOn android:summaryOn}</code></td><td>The summary for the Preference in a PreferenceActivity screen when the
     * CheckBoxPreference is checked.</td></tr>
     * <tr><td><code>{@link #CheckBoxPreference_summaryOff android:summaryOff}</code></td><td>The summary for the Preference in a PreferenceActivity screen when the
     * CheckBoxPreference is unchecked.</td></tr>
     * <tr><td><code>{@link #CheckBoxPreference_disableDependentsState android:disableDependentsState}</code></td><td>The state (true for on, or false for off) that causes dependents to be disabled.</td></tr>
     * </table>
     * @see #CheckBoxPreference_summaryOn
     * @see #CheckBoxPreference_summaryOff
     * @see #CheckBoxPreference_disableDependentsState
     */
    public static final int[] CheckBoxPreference={
      0x010101ef, 0x010101f0, 0x010101f1
    };
    /**
     * <p>
     * @attr description
     * The summary for the Preference in a PreferenceActivity screen when the
     * CheckBoxPreference is checked. If separate on/off summaries are not
     * needed, the summary attribute can be used instead.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:summaryOn
     */
    public static final int CheckBoxPreference_summaryOn=0;
    /**
     * <p>
     * @attr description
     * The summary for the Preference in a PreferenceActivity screen when the
     * CheckBoxPreference is unchecked. If separate on/off summaries are not
     * needed, the summary attribute can be used instead.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:summaryOff
     */
    public static final int CheckBoxPreference_summaryOff=1;
    /**
     * <p>
     * @attr description
     * The state (true for on, or false for off) that causes dependents to be disabled. By default,
     * dependents will be disabled when this is unchecked, so the value of this preference is false.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:disableDependentsState
     */
    public static final int CheckBoxPreference_disableDependentsState=2;
    /**
     * Attributes that can be used with a CheckedTextView.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #CheckedTextView_checked android:checked}</code></td><td>Indicates the initial checked state of this button.</td></tr>
     * <tr><td><code>{@link #CheckedTextView_checkMark android:checkMark}</code></td><td>Drawable used for the check mark graphic.</td></tr>
     * <tr><td><code>{@link #CheckedTextView_checkMarkTint android:checkMarkTint}</code></td><td>Tint to apply to the check mark.</td></tr>
     * <tr><td><code>{@link #CheckedTextView_checkMarkTintMode android:checkMarkTintMode}</code></td><td>Blending mode used to apply the check mark tint.</td></tr>
     * </table>
     * @see #CheckedTextView_checked
     * @see #CheckedTextView_checkMark
     * @see #CheckedTextView_checkMarkTint
     * @see #CheckedTextView_checkMarkTintMode
     */
    public static final int[] CheckedTextView={
      0x01010106, 0x01010108, 0x010104a7, 0x010104a8, 
      0x01120021
    };
    /**
     * <p>
     * @attr description
     * Indicates the initial checked state of this text.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:checked
     */
    public static final int CheckedTextView_checked=0;
    /**
     * <p>
     * @attr description
     * Drawable used for the check mark graphic.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:checkMark
     */
    public static final int CheckedTextView_checkMark=1;
    /**
     * <p>
     * @attr description
     * Tint to apply to the check mark.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:checkMarkTint
     */
    public static final int CheckedTextView_checkMarkTint=2;
    /**
     * <p>
     * @attr description
     * Blending mode used to apply the check mark tint.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     *
     * @attr name android:checkMarkTintMode
     */
    public static final int CheckedTextView_checkMarkTintMode=3;
    /**
     * Attributes that can be used with a Chronometer.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Chronometer_format android:format}</code></td><td>Format string: if specified, the Chronometer will display this
     * string, with the first "%s" replaced by the current timer value
     * in "MM:SS" or "H:MM:SS" form.</td></tr>
     * <tr><td><code>{@link #Chronometer_countDown android:countDown}</code></td><td>Specifies whether this Chronometer counts down or counts up from the base.</td></tr>
     * </table>
     * @see #Chronometer_format
     * @see #Chronometer_countDown
     */
    public static final int[] Chronometer={
      0x01010105, 0x0101051b
    };
    /**
     * <p>
     * @attr description
     * Format string: if specified, the Chronometer will display this
     * string, with the first "%s" replaced by the current timer value
     * in "MM:SS" or "H:MM:SS" form.
     * If no format string is specified, the Chronometer will simply display
     * "MM:SS" or "H:MM:SS".
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:format
     */
    public static final int Chronometer_format=0;
    /**
     * <p>
     * @attr description
     * Specifies whether this Chronometer counts down or counts up from the base.
     * If not specified this is false and the Chronometer counts up.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:countDown
     */
    public static final int Chronometer_countDown=1;
    /**
     * Attributes that can be used with a ClipDrawable.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ClipDrawable_gravity android:gravity}</code></td><td>Specifies how an object should position its content, on both the X and Y axes,
     * within its own bounds.</td></tr>
     * <tr><td><code>{@link #ClipDrawable_drawable android:drawable}</code></td><td>Reference to a drawable resource to use for the frame.</td></tr>
     * <tr><td><code>{@link #ClipDrawable_clipOrientation android:clipOrientation}</code></td><td>The orientation for the clip.</td></tr>
     * </table>
     * @see #ClipDrawable_gravity
     * @see #ClipDrawable_drawable
     * @see #ClipDrawable_clipOrientation
     */
    public static final int[] ClipDrawable={
      0x010100af, 0x01010199, 0x0101020a
    };
    /**
     * <p>
     * @attr description
     * Specifies where to clip within the drawable. The default value is
     * left.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
     * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
     * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
     * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
     * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the horizontal gravity: a left gravity will clip the right
     * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
     * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the vertical gravity: a top gravity will clip the bottom
     * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
     * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
     * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
     * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
     * </table>
     *
     * @attr name android:gravity
     */
    public static final int ClipDrawable_gravity=0;
    /**
     * <p>
     * @attr description
     * Reference to a drawable resource to draw with the specified scale.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:drawable
     */
    public static final int ClipDrawable_drawable=1;
    /**
     * <p>
     * @attr description
     * The orientation for the clip.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>horizontal</td><td>1</td><td>Clip the drawable horizontally.</td></tr>
     * <tr><td>vertical</td><td>2</td><td>Clip the drawable vertically.</td></tr>
     * </table>
     *
     * @attr name android:clipOrientation
     */
    public static final int ClipDrawable_clipOrientation=2;
    /**
     * Attributes that can be used with a ClipRectAnimation.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * </table>
     */
    public static final int[] ClipRectAnimation={
      0x01120054, 0x01120055, 0x01120056, 0x01120057, 
      0x011200f9, 0x011200fa, 0x011200fb, 0x011200fc
    };
    /**
     * Drawable used to draw a single color.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ColorDrawable_color android:color}</code></td><td>Solid color for the gradient shape.</td></tr>
     * </table>
     * @see #ColorDrawable_color
     */
    public static final int[] ColorDrawable={
      0x010101a5
    };
    /**
     * <p>
     * @attr description
     * The color to use.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:color
     */
    public static final int ColorDrawable_color=0;
    /**
     * Attributes that can be assigned to a ColorStateList item.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ColorStateListItem_color android:color}</code></td><td>Solid color for the gradient shape.</td></tr>
     * <tr><td><code>{@link #ColorStateListItem_alpha android:alpha}</code></td><td>alpha property of the view, as a value between 0 (completely transparent) and 1
     * (completely opaque).</td></tr>
     * <tr><td><code>{@link #ColorStateListItem_lStar android:lStar}</code></td><td>Perceptual luminance of a color, in accessibility friendly color space.</td></tr>
     * </table>
     * @see #ColorStateListItem_color
     * @see #ColorStateListItem_alpha
     * @see #ColorStateListItem_lStar
     */
    public static final int[] ColorStateListItem={
      0x010101a5, 0x0101031f, 0x01010647
    };
    /**
     * <p>
     * @attr description
     * Base color for this state.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:color
     */
    public static final int ColorStateListItem_color=0;
    /**
     * <p>
     * @attr description
     * Alpha multiplier applied to the base color.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:alpha
     */
    public static final int ColorStateListItem_alpha=1;
    /**
     * <p>
     * @attr description
     * Perceptual luminance applied to the base color. From 0 to 100.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:lStar
     */
    public static final int ColorStateListItem_lStar=2;
    /**
     * Attributes that can be used with a CompoundButton.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #CompoundButton_checked android:checked}</code></td><td>Indicates the initial checked state of this button.</td></tr>
     * <tr><td><code>{@link #CompoundButton_button android:button}</code></td><td>Drawable used for the button graphic (for example, checkbox and radio button).</td></tr>
     * <tr><td><code>{@link #CompoundButton_buttonTint android:buttonTint}</code></td><td>Tint to apply to the button graphic.</td></tr>
     * <tr><td><code>{@link #CompoundButton_buttonTintMode android:buttonTintMode}</code></td><td>Blending mode used to apply the button graphic tint.</td></tr>
     * </table>
     * @see #CompoundButton_checked
     * @see #CompoundButton_button
     * @see #CompoundButton_buttonTint
     * @see #CompoundButton_buttonTintMode
     */
    public static final int[] CompoundButton={
      0x01010106, 0x01010107, 0x0101046f, 0x01010470
    };
    /**
     * <p>
     * @attr description
     * Indicates the initial checked state of this button.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:checked
     */
    public static final int CompoundButton_checked=0;
    /**
     * <p>
     * @attr description
     * Drawable used for the button graphic (for example, checkbox and radio button).
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:button
     */
    public static final int CompoundButton_button=1;
    /**
     * <p>
     * @attr description
     * Tint to apply to the button graphic.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:buttonTint
     */
    public static final int CompoundButton_buttonTint=2;
    /**
     * <p>
     * @attr description
     * Blending mode used to apply the button graphic tint.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     *
     * @attr name android:buttonTintMode
     */
    public static final int CompoundButton_buttonTintMode=3;
    /**
     * Maps a specific contact data MIME-type to styling information.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ContactsDataKind_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
     * associated item.</td></tr>
     * <tr><td><code>{@link #ContactsDataKind_mimeType android:mimeType}</code></td><td>Specify a MIME type that is handled, as per
     * {@link android.content.IntentFilter#addDataType
     * IntentFilter.addDataType()}.</td></tr>
     * <tr><td><code>{@link #ContactsDataKind_summaryColumn android:summaryColumn}</code></td><td>Column in data table that summarizes this data.</td></tr>
     * <tr><td><code>{@link #ContactsDataKind_detailColumn android:detailColumn}</code></td><td>Column in data table that contains details for this data.</td></tr>
     * <tr><td><code>{@link #ContactsDataKind_detailSocialSummary android:detailSocialSummary}</code></td><td>Flag indicating that detail should be built from SocialProvider.</td></tr>
     * <tr><td><code>{@link #ContactsDataKind_allContactsName android:allContactsName}</code></td><td>Resource representing the term "All Contacts" (for example, "All Friends" or
     * "All connections").</td></tr>
     * </table>
     * @see #ContactsDataKind_icon
     * @see #ContactsDataKind_mimeType
     * @see #ContactsDataKind_summaryColumn
     * @see #ContactsDataKind_detailColumn
     * @see #ContactsDataKind_detailSocialSummary
     * @see #ContactsDataKind_allContactsName
     */
    public static final int[] ContactsDataKind={
      0x01010002, 0x01010026, 0x010102a2, 0x010102a3, 
      0x010102a4, 0x010102cc
    };
    /**
     * <p>
     * @attr description
     * Icon used to represent data of this kind.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:icon
     */
    public static final int ContactsDataKind_icon=0;
    /**
     * <p>
     * @attr description
     * Mime-type handled by this mapping.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:mimeType
     */
    public static final int ContactsDataKind_mimeType=1;
    /**
     * <p>
     * @attr description
     * Column in data table that summarizes this data.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:summaryColumn
     */
    public static final int ContactsDataKind_summaryColumn=2;
    /**
     * <p>
     * @attr description
     * Column in data table that contains details for this data.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:detailColumn
     */
    public static final int ContactsDataKind_detailColumn=3;
    /**
     * <p>
     * @attr description
     * Flag indicating that detail should be built from SocialProvider.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:detailSocialSummary
     */
    public static final int ContactsDataKind_detailSocialSummary=4;
    /**
     * <p>
     * @attr description
     * Resource representing the term "All Contacts" (for example, "All Friends" or
     * "All connections"). Optional (Default is "All Contacts").
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:allContactsName
     */
    public static final int ContactsDataKind_allContactsName=5;
    /**
     * Use <code>content-capture-service</code> as the root tag of the XML resource that describes
     * a {@link android.service.contentcapture.ContentCaptureService}, which is referenced from
     * its {@link android.service.contentcapture.ContentCaptureService#SERVICE_META_DATA}
     * meta-data entry.
     * @hide
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ContentCaptureService_settingsActivity android:settingsActivity}</code></td><td>Fully qualified class name of an activity that allows the user to modify
     * the settings for this service.</td></tr>
     * </table>
     * @see #ContentCaptureService_settingsActivity
     */
    @android.annotation.SystemApi
    public static final int[] ContentCaptureService={
      0x01010225
    };
    /**
     * <p>
     * @attr description
     * Fully qualified class name of an activity that allows the user to modify
     * the settings for this service.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:settingsActivity
     */
    public static final int ContentCaptureService_settingsActivity=0;
    /**
     * Attributes that can be used with a CycleInterpolator.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #CycleInterpolator_cycles android:cycles}</code></td><td></td></tr>
     * </table>
     * @see #CycleInterpolator_cycles
     */
    public static final int[] CycleInterpolator={
      0x010101d4
    };
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#cycles}
     * attribute's value can be found in the {@link #CycleInterpolator} array.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:cycles
     */
    public static final int CycleInterpolator_cycles=0;
    /**
     * Attributes that can be used with a DatePicker.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #DatePicker_headerBackground android:headerBackground}</code></td><td>Default background for the menu header.</td></tr>
     * <tr><td><code>{@link #DatePicker_startYear android:startYear}</code></td><td>The first year (inclusive), for example "1940".</td></tr>
     * <tr><td><code>{@link #DatePicker_endYear android:endYear}</code></td><td>The last year (inclusive), for example "2010".</td></tr>
     * <tr><td><code>{@link #DatePicker_firstDayOfWeek android:firstDayOfWeek}</code></td><td>The first day of week according to {@link java.util.Calendar}.</td></tr>
     * <tr><td><code>{@link #DatePicker_minDate android:minDate}</code></td><td>The minimal date shown by this calendar view in mm/dd/yyyy format.</td></tr>
     * <tr><td><code>{@link #DatePicker_maxDate android:maxDate}</code></td><td>The maximal date shown by this calendar view in mm/dd/yyyy format.</td></tr>
     * <tr><td><code>{@link #DatePicker_spinnersShown android:spinnersShown}</code></td><td>Whether the spinners are shown.</td></tr>
     * <tr><td><code>{@link #DatePicker_calendarViewShown android:calendarViewShown}</code></td><td>Whether the calendar view is shown.</td></tr>
     * <tr><td><code>{@link #DatePicker_dayOfWeekBackground android:dayOfWeekBackground}</code></td><td>The background color for the header's day of week.</td></tr>
     * <tr><td><code>{@link #DatePicker_dayOfWeekTextAppearance android:dayOfWeekTextAppearance}</code></td><td>The text color for the header's day of week.</td></tr>
     * <tr><td><code>{@link #DatePicker_headerMonthTextAppearance android:headerMonthTextAppearance}</code></td><td>The text appearance for the month (ex.</td></tr>
     * <tr><td><code>{@link #DatePicker_headerDayOfMonthTextAppearance android:headerDayOfMonthTextAppearance}</code></td><td>The text appearance for the day of month (ex.</td></tr>
     * <tr><td><code>{@link #DatePicker_headerYearTextAppearance android:headerYearTextAppearance}</code></td><td>The text appearance for the year (ex.</td></tr>
     * <tr><td><code>{@link #DatePicker_yearListItemTextAppearance android:yearListItemTextAppearance}</code></td><td>The list year's text appearance in the list.</td></tr>
     * <tr><td><code>{@link #DatePicker_yearListSelectorColor android:yearListSelectorColor}</code></td><td>The list year's selected circle color in the list.</td></tr>
     * <tr><td><code>{@link #DatePicker_calendarTextColor android:calendarTextColor}</code></td><td>The text color list of the calendar.</td></tr>
     * <tr><td><code>{@link #DatePicker_datePickerMode android:datePickerMode}</code></td><td>Defines the look of the widget.</td></tr>
     * </table>
     * @see #DatePicker_headerBackground
     * @see #DatePicker_startYear
     * @see #DatePicker_endYear
     * @see #DatePicker_firstDayOfWeek
     * @see #DatePicker_minDate
     * @see #DatePicker_maxDate
     * @see #DatePicker_spinnersShown
     * @see #DatePicker_calendarViewShown
     * @see #DatePicker_dayOfWeekBackground
     * @see #DatePicker_dayOfWeekTextAppearance
     * @see #DatePicker_headerMonthTextAppearance
     * @see #DatePicker_headerDayOfMonthTextAppearance
     * @see #DatePicker_headerYearTextAppearance
     * @see #DatePicker_yearListItemTextAppearance
     * @see #DatePicker_yearListSelectorColor
     * @see #DatePicker_calendarTextColor
     * @see #DatePicker_datePickerMode
     */
    public static final int[] DatePicker={
      0x0101012f, 0x0101017c, 0x0101017d, 0x0101033d, 
      0x0101033f, 0x01010340, 0x0101034b, 0x0101034c, 
      0x01010494, 0x01010495, 0x01010496, 0x01010497, 
      0x01010498, 0x01010499, 0x0101049a, 0x0101049b, 
      0x010104b3, 0x01120037, 0x0112005d, 0x01120063, 
      0x01120076, 0x0112010d
    };
    /**
     * <p>
     * @attr description
     * The background for the selected date header.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:headerBackground
     */
    public static final int DatePicker_headerBackground=0;
    /**
     * <p>
     * @attr description
     * The first year (inclusive), for example "1940".
     * {@deprecated Use minDate instead.}
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:startYear
     */
    @Deprecated
    public static final int DatePicker_startYear=1;
    /**
     * <p>
     * @attr description
     * The last year (inclusive), for example "2010".
     * {@deprecated Use maxDate instead.}
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:endYear
     */
    @Deprecated
    public static final int DatePicker_endYear=2;
    /**
     * <p>
     * @attr description
     * The first day of week according to {@link java.util.Calendar}.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:firstDayOfWeek
     */
    public static final int DatePicker_firstDayOfWeek=3;
    /**
     * <p>
     * @attr description
     * The minimal date shown by this calendar view in mm/dd/yyyy format.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:minDate
     */
    public static final int DatePicker_minDate=4;
    /**
     * <p>
     * @attr description
     * The maximal date shown by this calendar view in mm/dd/yyyy format.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:maxDate
     */
    public static final int DatePicker_maxDate=5;
    /**
     * <p>
     * @attr description
     * Whether the spinners are shown. Only valid for "spinner" mode.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:spinnersShown
     */
    public static final int DatePicker_spinnersShown=6;
    /**
     * <p>
     * @attr description
     * Whether the calendar view is shown. Only valid for "spinner" mode.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:calendarViewShown
     */
    public static final int DatePicker_calendarViewShown=7;
    /**
     * <p>
     * @attr description
     * The background color for the header's day of week.
     * {@deprecated No longer displayed.}
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:dayOfWeekBackground
     */
    @Deprecated
    public static final int DatePicker_dayOfWeekBackground=8;
    /**
     * <p>
     * @attr description
     * The text color for the header's day of week.
     * {@deprecated No longer displayed.}
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:dayOfWeekTextAppearance
     */
    @Deprecated
    public static final int DatePicker_dayOfWeekTextAppearance=9;
    /**
     * <p>
     * @attr description
     * The text appearance for the month (ex. May) in the selected date header.
     * {@deprecated Use headerTextColor instead.}
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:headerMonthTextAppearance
     */
    @Deprecated
    public static final int DatePicker_headerMonthTextAppearance=10;
    /**
     * <p>
     * @attr description
     * The text appearance for the day of month (ex. 28) in the selected date header.
     * {@deprecated Use headerTextColor instead.}
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:headerDayOfMonthTextAppearance
     */
    @Deprecated
    public static final int DatePicker_headerDayOfMonthTextAppearance=11;
    /**
     * <p>
     * @attr description
     * The text appearance for the year (ex. 2014) in the selected date header.
     * {@deprecated Use headerTextColor instead.}
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:headerYearTextAppearance
     */
    @Deprecated
    public static final int DatePicker_headerYearTextAppearance=12;
    /**
     * <p>
     * @attr description
     * The list year's text appearance in the list.
     * {@deprecated Use yearListTextColor. }
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:yearListItemTextAppearance
     */
    @Deprecated
    public static final int DatePicker_yearListItemTextAppearance=13;
    /**
     * <p>
     * @attr description
     * The list year's selected circle color in the list.
     * {@deprecated No longer displayed.}
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:yearListSelectorColor
     */
    @Deprecated
    public static final int DatePicker_yearListSelectorColor=14;
    /**
     * <p>
     * @attr description
     * The text color list of the calendar.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:calendarTextColor
     */
    public static final int DatePicker_calendarTextColor=15;
    /**
     * <p>
     * @attr description
     * Defines the look of the widget. Prior to the L release, the only choice was
     * spinner. As of L, with the Material theme selected, the default layout is calendar,
     * but this attribute can be used to force spinner to be used instead.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>calendar</td><td>2</td><td>Date picker with calendar to select the date.</td></tr>
     * <tr><td>spinner</td><td>1</td><td>Date picker with spinner controls to select the date.</td></tr>
     * </table>
     *
     * @attr name android:datePickerMode
     */
    public static final int DatePicker_datePickerMode=16;
    /**
     * Attributes that can be used with a DateTimeView.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * </table>
     */
    public static final int[] DateTimeView={
      0x011200dd
    };
    /**
     * Attributes that can be used with a DecelerateInterpolator.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #DecelerateInterpolator_factor android:factor}</code></td><td>This is the amount of deceleration to add when easing in.</td></tr>
     * </table>
     * @see #DecelerateInterpolator_factor
     */
    public static final int[] DecelerateInterpolator={
      0x010101d3
    };
    /**
     * <p>
     * @attr description
     * This is the amount of acceleration to add when easing out.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:factor
     */
    public static final int DecelerateInterpolator_factor=0;
    /**
     * Use <code>device-admin</code> as the root tag of the XML resource that
     * describes a
     * {@link android.app.admin.DeviceAdminReceiver}, which is
     * referenced from its
     * {@link android.app.admin.DeviceAdminReceiver#DEVICE_ADMIN_META_DATA}
     * meta-data entry.  Described here are the attributes that can be
     * included in that tag.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #DeviceAdmin_visible android:visible}</code></td><td>Provides initial visibility state of the drawable; the default
     * value is false.</td></tr>
     * </table>
     * @see #DeviceAdmin_visible
     */
    public static final int[] DeviceAdmin={
      0x01010194
    };
    /**
     * <p>
     * @attr description
     * Control whether the admin is visible to the user, even when it
     * is not enabled.  This is true by default.  You may want to make
     * it false if your admin does not make sense to be turned on
     * unless some explicit action happens in your app.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:visible
     */
    public static final int DeviceAdmin_visible=0;
    /**
     * Base attributes available to DialogPreference.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #DialogPreference_dialogTitle android:dialogTitle}</code></td><td>The title in the dialog.</td></tr>
     * <tr><td><code>{@link #DialogPreference_dialogMessage android:dialogMessage}</code></td><td>The message in the dialog.</td></tr>
     * <tr><td><code>{@link #DialogPreference_dialogIcon android:dialogIcon}</code></td><td>The icon for the dialog.</td></tr>
     * <tr><td><code>{@link #DialogPreference_positiveButtonText android:positiveButtonText}</code></td><td>The positive button text for the dialog.</td></tr>
     * <tr><td><code>{@link #DialogPreference_negativeButtonText android:negativeButtonText}</code></td><td>The negative button text for the dialog.</td></tr>
     * <tr><td><code>{@link #DialogPreference_dialogLayout android:dialogLayout}</code></td><td>A layout to be used as the content View for the dialog.</td></tr>
     * </table>
     * @see #DialogPreference_dialogTitle
     * @see #DialogPreference_dialogMessage
     * @see #DialogPreference_dialogIcon
     * @see #DialogPreference_positiveButtonText
     * @see #DialogPreference_negativeButtonText
     * @see #DialogPreference_dialogLayout
     */
    public static final int[] DialogPreference={
      0x010101f2, 0x010101f3, 0x010101f4, 0x010101f5, 
      0x010101f6, 0x010101f7
    };
    /**
     * <p>
     * @attr description
     * The title in the dialog.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:dialogTitle
     */
    public static final int DialogPreference_dialogTitle=0;
    /**
     * <p>
     * @attr description
     * The message in the dialog. If a dialogLayout is provided and contains
     * a TextView with ID android:id/message, this message will be placed in there.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:dialogMessage
     */
    public static final int DialogPreference_dialogMessage=1;
    /**
     * <p>
     * @attr description
     * The icon for the dialog.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:dialogIcon
     */
    public static final int DialogPreference_dialogIcon=2;
    /**
     * <p>
     * @attr description
     * The positive button text for the dialog. Set to @null to hide the positive button.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:positiveButtonText
     */
    public static final int DialogPreference_positiveButtonText=3;
    /**
     * <p>
     * @attr description
     * The negative button text for the dialog. Set to @null to hide the negative button.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:negativeButtonText
     */
    public static final int DialogPreference_negativeButtonText=4;
    /**
     * <p>
     * @attr description
     * A layout to be used as the content View for the dialog. By default, this shouldn't
     * be needed. If a custom DialogPreference is required, this should be set. For example,
     * the EditTextPreference uses a layout with an EditText as this attribute.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:dialogLayout
     */
    public static final int DialogPreference_dialogLayout=5;
    /**
     * Base attributes that are available to all Drawable objects.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Drawable_visible android:visible}</code></td><td>Provides initial visibility state of the drawable; the default
     * value is false.</td></tr>
     * <tr><td><code>{@link #Drawable_autoMirrored android:autoMirrored}</code></td><td>Indicates if the drawable needs to be mirrored when its layout direction is
     * RTL (right-to-left).</td></tr>
     * </table>
     * @see #Drawable_visible
     * @see #Drawable_autoMirrored
     */
    public static final int[] Drawable={
      0x01010194, 0x010103ea
    };
    /**
     * <p>
     * @attr description
     * Provides initial visibility state of the drawable; the default
     * value is false.  See
     * {@link android.graphics.drawable.Drawable#setVisible}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:visible
     */
    public static final int Drawable_visible=0;
    /**
     * <p>
     * @attr description
     * Indicates if the drawable needs to be mirrored when its layout direction is
     * RTL (right-to-left).  See
     * {@link android.graphics.drawable.Drawable#setAutoMirrored}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:autoMirrored
     */
    public static final int Drawable_autoMirrored=1;
    /**
     * Describes the corners for the rectangle shape of a GradientDrawable.
     * This can be used to render rounded corners.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #DrawableCorners_radius android:radius}</code></td><td>Defines the radius of the four corners.</td></tr>
     * <tr><td><code>{@link #DrawableCorners_topLeftRadius android:topLeftRadius}</code></td><td>Radius of the top left corner.</td></tr>
     * <tr><td><code>{@link #DrawableCorners_topRightRadius android:topRightRadius}</code></td><td>Radius of the top right corner.</td></tr>
     * <tr><td><code>{@link #DrawableCorners_bottomLeftRadius android:bottomLeftRadius}</code></td><td>Radius of the bottom left corner.</td></tr>
     * <tr><td><code>{@link #DrawableCorners_bottomRightRadius android:bottomRightRadius}</code></td><td>Radius of the bottom right corner.</td></tr>
     * </table>
     * @see #DrawableCorners_radius
     * @see #DrawableCorners_topLeftRadius
     * @see #DrawableCorners_topRightRadius
     * @see #DrawableCorners_bottomLeftRadius
     * @see #DrawableCorners_bottomRightRadius
     */
    public static final int[] DrawableCorners={
      0x010101a8, 0x010101a9, 0x010101aa, 0x010101ab, 
      0x010101ac
    };
    /**
     * <p>
     * @attr description
     * Defines the radius of the four corners.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:radius
     */
    public static final int DrawableCorners_radius=0;
    /**
     * <p>
     * @attr description
     * Radius of the top left corner.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:topLeftRadius
     */
    public static final int DrawableCorners_topLeftRadius=1;
    /**
     * <p>
     * @attr description
     * Radius of the top right corner.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:topRightRadius
     */
    public static final int DrawableCorners_topRightRadius=2;
    /**
     * <p>
     * @attr description
     * Radius of the bottom left corner.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:bottomLeftRadius
     */
    public static final int DrawableCorners_bottomLeftRadius=3;
    /**
     * <p>
     * @attr description
     * Radius of the bottom right corner.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:bottomRightRadius
     */
    public static final int DrawableCorners_bottomRightRadius=4;
    /**
     * Set of framework-provided states that may be specified on a Drawable. Actual usage of
     * states may vary between view implementations, as documented on the individual state
     * attributes.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #DrawableStates_state_focused android:state_focused}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view has input focus.</td></tr>
     * <tr><td><code>{@link #DrawableStates_state_window_focused android:state_window_focused}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view's window has input focus.</td></tr>
     * <tr><td><code>{@link #DrawableStates_state_enabled android:state_enabled}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view is enabled.</td></tr>
     * <tr><td><code>{@link #DrawableStates_state_checkable android:state_checkable}</code></td><td>State identifier indicating that the object <var>may</var> display a check mark.</td></tr>
     * <tr><td><code>{@link #DrawableStates_state_checked android:state_checked}</code></td><td>State identifier indicating that the object is currently checked.</td></tr>
     * <tr><td><code>{@link #DrawableStates_state_selected android:state_selected}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view (or one of its parents) is currently selected.</td></tr>
     * <tr><td><code>{@link #DrawableStates_state_active android:state_active}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view or drawable is considered "active" by its host.</td></tr>
     * <tr><td><code>{@link #DrawableStates_state_single android:state_single}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view or drawable is considered "single" by its host.</td></tr>
     * <tr><td><code>{@link #DrawableStates_state_first android:state_first}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view or drawable is in the first position in an ordered set.</td></tr>
     * <tr><td><code>{@link #DrawableStates_state_middle android:state_middle}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view or drawable is in the middle position in an ordered set.</td></tr>
     * <tr><td><code>{@link #DrawableStates_state_last android:state_last}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view or drawable is in the last position in an ordered set.</td></tr>
     * <tr><td><code>{@link #DrawableStates_state_pressed android:state_pressed}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when the user is pressing down in a view.</td></tr>
     * <tr><td><code>{@link #DrawableStates_state_activated android:state_activated}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view or its parent has been "activated" meaning the user has currently
     * marked it as being of interest.</td></tr>
     * <tr><td><code>{@link #DrawableStates_state_accelerated android:state_accelerated}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * indicating that the Drawable is in a view that is hardware accelerated.</td></tr>
     * <tr><td><code>{@link #DrawableStates_state_hovered android:state_hovered}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a pointer is hovering over the view.</td></tr>
     * <tr><td><code>{@link #DrawableStates_state_drag_can_accept android:state_drag_can_accept}</code></td><td>State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
     * indicating that the Drawable is in a view that is capable of accepting a drop of
     * the content currently being manipulated in a drag-and-drop operation.</td></tr>
     * <tr><td><code>{@link #DrawableStates_state_drag_hovered android:state_drag_hovered}</code></td><td>State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
     * indicating that a drag operation (for which the Drawable's view is a valid recipient)
     * is currently positioned over the Drawable.</td></tr>
     * </table>
     * @see #DrawableStates_state_focused
     * @see #DrawableStates_state_window_focused
     * @see #DrawableStates_state_enabled
     * @see #DrawableStates_state_checkable
     * @see #DrawableStates_state_checked
     * @see #DrawableStates_state_selected
     * @see #DrawableStates_state_active
     * @see #DrawableStates_state_single
     * @see #DrawableStates_state_first
     * @see #DrawableStates_state_middle
     * @see #DrawableStates_state_last
     * @see #DrawableStates_state_pressed
     * @see #DrawableStates_state_activated
     * @see #DrawableStates_state_accelerated
     * @see #DrawableStates_state_hovered
     * @see #DrawableStates_state_drag_can_accept
     * @see #DrawableStates_state_drag_hovered
     */
    public static final int[] DrawableStates={
      0x0101009c, 0x0101009d, 0x0101009e, 0x0101009f, 
      0x010100a0, 0x010100a1, 0x010100a2, 0x010100a3, 
      0x010100a4, 0x010100a5, 0x010100a6, 0x010100a7, 
      0x010102fe, 0x0101031b, 0x01010367, 0x01010368, 
      0x01010369, 0x011200e4
    };
    /**
     * <p>
     * @attr description
     * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view has input focus.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_focused
     */
    public static final int DrawableStates_state_focused=0;
    /**
     * <p>
     * @attr description
     * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view's window has input focus.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_window_focused
     */
    public static final int DrawableStates_state_window_focused=1;
    /**
     * <p>
     * @attr description
     * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view is enabled.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_enabled
     */
    public static final int DrawableStates_state_enabled=2;
    /**
     * <p>
     * @attr description
     * State identifier indicating that the object <var>may</var> display a check mark. See
     * {@link android.R.attr#state_checked} for the identifier that indicates whether it is
     * actually checked.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_checkable
     */
    public static final int DrawableStates_state_checkable=3;
    /**
     * <p>
     * @attr description
     * State identifier indicating that the object is currently checked.  See
     * {@link android.R.attr#state_checkable} for an additional identifier that can indicate
     * if any object may ever display a check, regardless of whether state_checked is
     * currently set.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_checked
     */
    public static final int DrawableStates_state_checked=4;
    /**
     * <p>
     * @attr description
     * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view (or one of its parents) is currently selected.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_selected
     */
    public static final int DrawableStates_state_selected=5;
    /**
     * <p>
     * @attr description
     * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view or drawable is considered "active" by its host. Actual usage may vary
     * between views. Consult the host view documentation for details.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_active
     */
    public static final int DrawableStates_state_active=6;
    /**
     * <p>
     * @attr description
     * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view or drawable is considered "single" by its host. Actual usage may vary
     * between views. Consult the host view documentation for details.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_single
     */
    public static final int DrawableStates_state_single=7;
    /**
     * <p>
     * @attr description
     * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view or drawable is in the first position in an ordered set. Actual usage
     * may vary between views. Consult the host view documentation for details.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_first
     */
    public static final int DrawableStates_state_first=8;
    /**
     * <p>
     * @attr description
     * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view or drawable is in the middle position in an ordered set. Actual usage
     * may vary between views. Consult the host view documentation for details.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_middle
     */
    public static final int DrawableStates_state_middle=9;
    /**
     * <p>
     * @attr description
     * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view or drawable is in the last position in an ordered set. Actual usage
     * may vary between views. Consult the host view documentation for details.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_last
     */
    public static final int DrawableStates_state_last=10;
    /**
     * <p>
     * @attr description
     * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when the user is pressing down in a view.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_pressed
     */
    public static final int DrawableStates_state_pressed=11;
    /**
     * <p>
     * @attr description
     * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view or its parent has been "activated" meaning the user has currently
     * marked it as being of interest.  This is an alternative representation of
     * state_checked for when the state should be propagated down the view hierarchy.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_activated
     */
    public static final int DrawableStates_state_activated=12;
    /**
     * <p>
     * @attr description
     * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * indicating that the Drawable is in a view that is hardware accelerated.
     * This means that the device can at least render a full-screen scaled
     * bitmap with one layer of text and bitmaps composited on top of it
     * at 60fps.  When this is set, the colorBackgroundCacheHint will be
     * ignored even if it specifies a solid color, since that optimization
     * is not needed.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_accelerated
     */
    public static final int DrawableStates_state_accelerated=13;
    /**
     * <p>
     * @attr description
     * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a pointer is hovering over the view.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_hovered
     */
    public static final int DrawableStates_state_hovered=14;
    /**
     * <p>
     * @attr description
     * State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
     * indicating that the Drawable is in a view that is capable of accepting a drop of
     * the content currently being manipulated in a drag-and-drop operation.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_drag_can_accept
     */
    public static final int DrawableStates_state_drag_can_accept=15;
    /**
     * <p>
     * @attr description
     * State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
     * indicating that a drag operation (for which the Drawable's view is a valid recipient)
     * is currently positioned over the Drawable.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_drag_hovered
     */
    public static final int DrawableStates_state_drag_hovered=16;
    /**
     * Drawable class used to wrap other drawables.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #DrawableWrapper_drawable android:drawable}</code></td><td>Reference to a drawable resource to use for the frame.</td></tr>
     * </table>
     * @see #DrawableWrapper_drawable
     */
    public static final int[] DrawableWrapper={
      0x01010199
    };
    /**
     * <p>
     * @attr description
     * The wrapped drawable.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:drawable
     */
    public static final int DrawableWrapper_drawable=0;
    /**
     * Use <code>dream</code> as the root tag of the XML resource that
     * describes an
     * {@link android.service.dreams.DreamService}, which is
     * referenced from its
     * {@link android.service.dreams.DreamService#DREAM_META_DATA}
     * meta-data entry.  Described here are the attributes that can be
     * included in that tag.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Dream_settingsActivity android:settingsActivity}</code></td><td>Fully qualified class name of an activity that allows the user to modify
     * the settings for this service.</td></tr>
     * </table>
     * @see #Dream_settingsActivity
     */
    public static final int[] Dream={
      0x01010225
    };
    /**
     * <p>
     * @attr description
     * Component name of an activity that allows the user to modify
     * the settings for this dream.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:settingsActivity
     */
    public static final int Dream_settingsActivity=0;
    /**
     * Used as a filter array on the theme to pull out only the EdgeEffect-relevant bits.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #EdgeEffect_colorEdgeEffect android:colorEdgeEffect}</code></td><td>The color applied to the edge effect on scrolling containers.</td></tr>
     * </table>
     * @see #EdgeEffect_colorEdgeEffect
     */
    public static final int[] EdgeEffect={
      0x010104ce
    };
    /**
     * <p>
     * @attr description
     * The color applied to the edge effect on scrolling containers.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:colorEdgeEffect
     */
    public static final int EdgeEffect_colorEdgeEffect=0;
    public static final int[] EditText={
    };
    /**
     * @hide For internal use only. Use only as directed.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * </table>
     */
    public static final int[] EpicenterTranslateClipReveal={
      0x01120068, 0x01120069, 0x0112006a
    };
    /**
     * State array representing an expandable list child's indicator.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ExpandableListChildIndicatorState_state_last android:state_last}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view or drawable is in the last position in an ordered set.</td></tr>
     * </table>
     * @see #ExpandableListChildIndicatorState_state_last
     */
    public static final int[] ExpandableListChildIndicatorState={
      0x010100a6
    };
    /**
     * <p>
     * @attr description
     * State identifier indicating the child is the last child within its group.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_last
     */
    public static final int ExpandableListChildIndicatorState_state_last=0;
    /**
     * State array representing an expandable list group's indicator.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ExpandableListGroupIndicatorState_state_expanded android:state_expanded}</code></td><td>State identifier indicating the group is expanded.</td></tr>
     * <tr><td><code>{@link #ExpandableListGroupIndicatorState_state_empty android:state_empty}</code></td><td>State identifier indicating the group is empty (has no children).</td></tr>
     * </table>
     * @see #ExpandableListGroupIndicatorState_state_expanded
     * @see #ExpandableListGroupIndicatorState_state_empty
     */
    public static final int[] ExpandableListGroupIndicatorState={
      0x010100a8, 0x010100a9
    };
    /**
     * <p>
     * @attr description
     * State identifier indicating the group is expanded.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_expanded
     */
    public static final int ExpandableListGroupIndicatorState_state_expanded=0;
    /**
     * <p>
     * @attr description
     * State identifier indicating the group is empty (has no children).
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_empty
     */
    public static final int ExpandableListGroupIndicatorState_state_empty=1;
    /**
     * Attributes that can be used with a ExpandableListView.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ExpandableListView_groupIndicator android:groupIndicator}</code></td><td>Indicator shown beside the group View.</td></tr>
     * <tr><td><code>{@link #ExpandableListView_childIndicator android:childIndicator}</code></td><td>Indicator shown beside the child View.</td></tr>
     * <tr><td><code>{@link #ExpandableListView_indicatorLeft android:indicatorLeft}</code></td><td>The left bound for an item's indicator.</td></tr>
     * <tr><td><code>{@link #ExpandableListView_indicatorRight android:indicatorRight}</code></td><td>The right bound for an item's indicator.</td></tr>
     * <tr><td><code>{@link #ExpandableListView_childIndicatorLeft android:childIndicatorLeft}</code></td><td>The left bound for a child's indicator.</td></tr>
     * <tr><td><code>{@link #ExpandableListView_childIndicatorRight android:childIndicatorRight}</code></td><td>The right bound for a child's indicator.</td></tr>
     * <tr><td><code>{@link #ExpandableListView_childDivider android:childDivider}</code></td><td>Drawable or color that is used as a divider for children.</td></tr>
     * <tr><td><code>{@link #ExpandableListView_indicatorStart android:indicatorStart}</code></td><td>The start bound for an item's indicator.</td></tr>
     * <tr><td><code>{@link #ExpandableListView_indicatorEnd android:indicatorEnd}</code></td><td>The end bound for an item's indicator.</td></tr>
     * <tr><td><code>{@link #ExpandableListView_childIndicatorStart android:childIndicatorStart}</code></td><td>The start bound for a child's indicator.</td></tr>
     * <tr><td><code>{@link #ExpandableListView_childIndicatorEnd android:childIndicatorEnd}</code></td><td>The end bound for a child's indicator.</td></tr>
     * </table>
     * @see #ExpandableListView_groupIndicator
     * @see #ExpandableListView_childIndicator
     * @see #ExpandableListView_indicatorLeft
     * @see #ExpandableListView_indicatorRight
     * @see #ExpandableListView_childIndicatorLeft
     * @see #ExpandableListView_childIndicatorRight
     * @see #ExpandableListView_childDivider
     * @see #ExpandableListView_indicatorStart
     * @see #ExpandableListView_indicatorEnd
     * @see #ExpandableListView_childIndicatorStart
     * @see #ExpandableListView_childIndicatorEnd
     */
    public static final int[] ExpandableListView={
      0x0101010b, 0x0101010c, 0x0101010d, 0x0101010e, 
      0x0101010f, 0x01010110, 0x01010111, 0x010103d1, 
      0x010103d2, 0x010103d3, 0x010103d4
    };
    /**
     * <p>
     * @attr description
     * Indicator shown beside the group View. This can be a stateful Drawable.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:groupIndicator
     */
    public static final int ExpandableListView_groupIndicator=0;
    /**
     * <p>
     * @attr description
     * Indicator shown beside the child View. This can be a stateful Drawable.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:childIndicator
     */
    public static final int ExpandableListView_childIndicator=1;
    /**
     * <p>
     * @attr description
     * The left bound for an item's indicator. To specify a left bound specific to children,
     * use childIndicatorLeft.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:indicatorLeft
     */
    public static final int ExpandableListView_indicatorLeft=2;
    /**
     * <p>
     * @attr description
     * The right bound for an item's indicator. To specify a right bound specific to children,
     * use childIndicatorRight.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:indicatorRight
     */
    public static final int ExpandableListView_indicatorRight=3;
    /**
     * <p>
     * @attr description
     * The left bound for a child's indicator.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:childIndicatorLeft
     */
    public static final int ExpandableListView_childIndicatorLeft=4;
    /**
     * <p>
     * @attr description
     * The right bound for a child's indicator.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:childIndicatorRight
     */
    public static final int ExpandableListView_childIndicatorRight=5;
    /**
     * <p>
     * @attr description
     * Drawable or color that is used as a divider for children. (It will drawn
     * below and above child items.) The height of this will be the same as
     * the height of the normal list item divider.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:childDivider
     */
    public static final int ExpandableListView_childDivider=6;
    /**
     * <p>
     * @attr description
     * The start bound for an item's indicator. To specify a start bound specific to children,
     * use childIndicatorStart.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:indicatorStart
     */
    public static final int ExpandableListView_indicatorStart=7;
    /**
     * <p>
     * @attr description
     * The end bound for an item's indicator. To specify a right bound specific to children,
     * use childIndicatorEnd.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:indicatorEnd
     */
    public static final int ExpandableListView_indicatorEnd=8;
    /**
     * <p>
     * @attr description
     * The start bound for a child's indicator.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:childIndicatorStart
     */
    public static final int ExpandableListView_childIndicatorStart=9;
    /**
     * <p>
     * @attr description
     * The end bound for a child's indicator.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:childIndicatorEnd
     */
    public static final int ExpandableListView_childIndicatorEnd=10;
    /**
     * An extra data value to place into a an extra/name value pair held
     * in a Bundle, as per {@link android.os.Bundle}.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Extra_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * <tr><td><code>{@link #Extra_value android:value}</code></td><td>Concrete value to assign to this piece of named meta-data.</td></tr>
     * </table>
     * @see #Extra_name
     * @see #Extra_value
     */
    public static final int[] Extra={
      0x01010003, 0x01010024
    };
    /**
     * <p>
     * @attr description
     * Required name of the extra data.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int Extra_name=0;
    /**
     * <p>
     * @attr description
     * Concrete value to put for this named extra data.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:value
     */
    public static final int Extra_value=1;
    /**
     * Use <code>fade</code>as the root tag of the XML resource that
     * describes a {@link android.transition.Fade Fade} transition.
     * The attributes of the {@link android.R.styleable#Transition Transition}
     * resource are available in addition to the specific attributes of Fade
     * described here.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Fade_fadingMode android:fadingMode}</code></td><td>Equivalent to <code>transitionVisibilityMode</code>, fadingMode works only
     * with the Fade transition.</td></tr>
     * </table>
     * @see #Fade_fadingMode
     */
    public static final int[] Fade={
      0x010103e1
    };
    /**
     * <p>
     * @attr description
     * Equivalent to <code>transitionVisibilityMode</code>, fadingMode works only
     * with the Fade transition.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>fade_in</td><td>1</td><td>Fade will only fade appearing items in.</td></tr>
     * <tr><td>fade_in_out</td><td>3</td><td>Fade will fade appearing items in and disappearing items out.</td></tr>
     * <tr><td>fade_out</td><td>2</td><td>Fade will only fade disappearing items out.</td></tr>
     * </table>
     *
     * @attr name android:fadingMode
     */
    public static final int Fade_fadingMode=0;
    /**
     * Attributes that can be used with a FastScroll.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #FastScroll_textAppearance android:textAppearance}</code></td><td>Default appearance of text: color, typeface, size, and style.</td></tr>
     * <tr><td><code>{@link #FastScroll_textSize android:textSize}</code></td><td>Size of text.</td></tr>
     * <tr><td><code>{@link #FastScroll_textColor android:textColor}</code></td><td>Color of text (usually same as colorForeground).</td></tr>
     * <tr><td><code>{@link #FastScroll_padding android:padding}</code></td><td>Sets the padding, in pixels, of all four edges.</td></tr>
     * <tr><td><code>{@link #FastScroll_minWidth android:minWidth}</code></td><td></td></tr>
     * <tr><td><code>{@link #FastScroll_minHeight android:minHeight}</code></td><td></td></tr>
     * <tr><td><code>{@link #FastScroll_thumbPosition android:thumbPosition}</code></td><td>Position of thumb in relation to the track.</td></tr>
     * </table>
     * @see #FastScroll_textAppearance
     * @see #FastScroll_textSize
     * @see #FastScroll_textColor
     * @see #FastScroll_padding
     * @see #FastScroll_minWidth
     * @see #FastScroll_minHeight
     * @see #FastScroll_thumbPosition
     */
    public static final int[] FastScroll={
      0x01010034, 0x01010095, 0x01010098, 0x010100d5, 
      0x0101013f, 0x01010140, 0x010104e5, 0x01120016, 
      0x0112001a, 0x011200ba, 0x011200f6, 0x011200f7, 
      0x011200f8, 0x01120101
    };
    /**
     * <p>
     * @attr description
     * Default appearance of text: color, typeface, size, and style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textAppearance
     */
    public static final int FastScroll_textAppearance=0;
    /**
     * <p>
     * @attr description
     * Size of text. Recommended dimension type for text is "sp" for scaled-pixels (example: 15sp).
     * Supported values include the following:<p/>
     * <ul>
     * <li><b>px</b> Pixels</li>
     * <li><b>sp</b> Scaled pixels (scaled to relative pixel size on screen). See {@link android.util.DisplayMetrics} for more information.</li>
     * <li><b>pt</b> Points</li>
     * <li><b>dip</b> Device independent pixels. See {@link android.util.DisplayMetrics} for more information.</li>
     * </ul>
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:textSize
     */
    public static final int FastScroll_textSize=1;
    /**
     * <p>
     * @attr description
     * Color of text (usually same as colorForeground).
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:textColor
     */
    public static final int FastScroll_textColor=2;
    /**
     * <p>
     * @attr description
     * Padding for the section header preview.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:padding
     */
    public static final int FastScroll_padding=3;
    /**
     * <p>
     * @attr description
     * Minimum width of the section header preview.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:minWidth
     */
    public static final int FastScroll_minWidth=4;
    /**
     * <p>
     * @attr description
     * Minimum height of the section header preview.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:minHeight
     */
    public static final int FastScroll_minHeight=5;
    /**
     * <p>
     * @attr description
     * Position of thumb in relation to the track.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>inside</td><td>1</td><td>The thumb is entirely inside the track. At its extremes,
     * the thumb will be contained entirely within the track.</td></tr>
     * <tr><td>midpoint</td><td>0</td><td>The thumb's midpoint is anchored to the track. At its
     * extremes, the thumb will extend half-way outside the
     * track.</td></tr>
     * </table>
     *
     * @attr name android:thumbPosition
     */
    public static final int FastScroll_thumbPosition=6;
    /**
     * Attributes that are read when parsing a &lt;fontfamily&gt; tag.
     * {@deprecated Use Jetpack Core library instead.}
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #FontFamily_fontProviderAuthority android:fontProviderAuthority}</code></td><td>The authority of the Font Provider to be used for the request.</td></tr>
     * <tr><td><code>{@link #FontFamily_fontProviderQuery android:fontProviderQuery}</code></td><td>The query to be sent over to the provider.</td></tr>
     * <tr><td><code>{@link #FontFamily_fontProviderPackage android:fontProviderPackage}</code></td><td>The package for the Font Provider to be used for the request.</td></tr>
     * <tr><td><code>{@link #FontFamily_fontProviderCerts android:fontProviderCerts}</code></td><td>The sets of hashes for the certificates the provider should be signed with.</td></tr>
     * <tr><td><code>{@link #FontFamily_fontProviderSystemFontFamily android:fontProviderSystemFontFamily}</code></td><td>Provides the system font family name to check before downloading the font.</td></tr>
     * </table>
     * @see #FontFamily_fontProviderAuthority
     * @see #FontFamily_fontProviderQuery
     * @see #FontFamily_fontProviderPackage
     * @see #FontFamily_fontProviderCerts
     * @see #FontFamily_fontProviderSystemFontFamily
     */
    @Deprecated
    public static final int[] FontFamily={
      0x01010550, 0x01010551, 0x01010557, 0x0101055d, 
      0x01010622
    };
    /**
     * <p>
     * @attr description
     * The authority of the Font Provider to be used for the request.
     * {@deprecated Use app:fontProviderAuthority with Jetpack Core library instead for
     * consistent behavior across all devices.}
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:fontProviderAuthority
     */
    @Deprecated
    public static final int FontFamily_fontProviderAuthority=0;
    /**
     * <p>
     * @attr description
     * The query to be sent over to the provider. Refer to your font provider's documentation
     * on the format of this string.
     * {@deprecated Use app:fontProviderQuery with Jetpack Core library instead.}
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:fontProviderQuery
     */
    @Deprecated
    public static final int FontFamily_fontProviderQuery=1;
    /**
     * <p>
     * @attr description
     * The package for the Font Provider to be used for the request. This is used to verify
     * the identity of the provider.
     * {@deprecated Use app:fontProviderPackage with Jetpack Core library instead.}
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:fontProviderPackage
     */
    @Deprecated
    public static final int FontFamily_fontProviderPackage=2;
    /**
     * <p>
     * @attr description
     * The sets of hashes for the certificates the provider should be signed with. This is
     * used to verify the identity of the provider, and is only required if the provider is not
     * part of the system image. This value may point to one list or a list of lists, where each
     * individual list represents one collection of signature hashes. Refer to your font provider's
     * documentation for these values.
     * {@deprecated Use app:fontProviderCerts with Jetpack Core library instead.}
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:fontProviderCerts
     */
    @Deprecated
    public static final int FontFamily_fontProviderCerts=3;
    /**
     * <p>
     * @attr description
     * Provides the system font family name to check before downloading the font. For example
     * if the fontProviderQuery asked for "Sans Serif", it is possible to define
     * fontProviderSystemFontFamily as "sans-serif" to tell the system to use "sans-serif" font
     * family if it exists on the system.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:fontProviderSystemFontFamily
     */
    public static final int FontFamily_fontProviderSystemFontFamily=4;
    /**
     * Attributes that are read when parsing a &lt;font&gt; tag, which is a child of
     * &lt;font-family&gt;. This represents an actual font file and its attributes.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #FontFamilyFont_font android:font}</code></td><td>The reference to the font file to be used.</td></tr>
     * <tr><td><code>{@link #FontFamilyFont_fontWeight android:fontWeight}</code></td><td>The weight of the given font file.</td></tr>
     * <tr><td><code>{@link #FontFamilyFont_fontStyle android:fontStyle}</code></td><td>The style of the given font file.</td></tr>
     * <tr><td><code>{@link #FontFamilyFont_ttcIndex android:ttcIndex}</code></td><td>The index of the font in the ttc (TrueType Collection) font file.</td></tr>
     * <tr><td><code>{@link #FontFamilyFont_fontVariationSettings android:fontVariationSettings}</code></td><td>The variation settings to be applied to the font.</td></tr>
     * </table>
     * @see #FontFamilyFont_font
     * @see #FontFamilyFont_fontWeight
     * @see #FontFamilyFont_fontStyle
     * @see #FontFamilyFont_ttcIndex
     * @see #FontFamilyFont_fontVariationSettings
     */
    public static final int[] FontFamilyFont={
      0x01010532, 0x01010533, 0x0101053f, 0x0101056f, 
      0x01010570
    };
    /**
     * <p>
     * @attr description
     * The reference to the font file to be used. This should be a file in the res/font folder
     * and should therefore have an R reference value. E.g. @font/myfont
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:font
     */
    public static final int FontFamilyFont_font=0;
    /**
     * <p>
     * @attr description
     * The weight of the given font file. This will be used when the font is being loaded into
     * the font stack and will override any weight information in the font's header tables. Must
     * be a positive number, a multiple of 100, and between 100 and 900, inclusive. The most
     * common values are 400 for regular weight and 700 for bold weight. If unspecified, the value
     * in the font's header tables will be used.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:fontWeight
     */
    public static final int FontFamilyFont_fontWeight=1;
    /**
     * <p>
     * @attr description
     * The style of the given font file. This will be used when the font is being loaded into
     * the font stack and will override any style information in the font's header tables. If
     * unspecified, the value in the font's header tables will be used.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>italic</td><td>1</td><td></td></tr>
     * <tr><td>normal</td><td>0</td><td></td></tr>
     * </table>
     *
     * @attr name android:fontStyle
     */
    public static final int FontFamilyFont_fontStyle=2;
    /**
     * <p>
     * @attr description
     * The index of the font in the ttc (TrueType Collection) font file. If the font file
     * referenced is not in the ttc format, this attribute needs not be specified.
     * {@link android.graphics.Typeface.Builder#setTtcIndex(int)}.
     * The default value is 0. More details about the TrueType Collection font format can be found
     * here: https://en.wikipedia.org/wiki/TrueType#TrueType_Collection.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:ttcIndex
     */
    public static final int FontFamilyFont_ttcIndex=3;
    /**
     * <p>
     * @attr description
     * The variation settings to be applied to the font. The string should be in the following
     * format: "'tag1' value1, 'tag2' value2, ...". If the default variation settings should be
     * used, or the font used does not support variation settings, this attribute needs not be
     * specified.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:fontVariationSettings
     */
    public static final int FontFamilyFont_fontVariationSettings=4;
    /**
     * Attributes that can be used with <code>&lt;fragment&gt;</code>
     * tags inside of the layout of an Activity.  This instantiates
     * the given {@link android.app.Fragment} and inserts its content
     * view into the current location in the layout.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Fragment_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * <tr><td><code>{@link #Fragment_id android:id}</code></td><td>Supply an identifier name for this view, to later retrieve it
     * with {@link android.view.View#findViewById View.findViewById()} or
     * {@link android.app.Activity#findViewById Activity.findViewById()}.</td></tr>
     * <tr><td><code>{@link #Fragment_tag android:tag}</code></td><td>Supply a tag for this view containing a String, to be retrieved
     * later with {@link android.view.View#getTag View.getTag()} or
     * searched for with {@link android.view.View#findViewWithTag
     * View.findViewWithTag()}.</td></tr>
     * <tr><td><code>{@link #Fragment_fragmentExitTransition android:fragmentExitTransition}</code></td><td>The Transition that will be used to move Views out of the scene when the
     * fragment is removed, hidden, or detached when not popping the back stack.</td></tr>
     * <tr><td><code>{@link #Fragment_fragmentEnterTransition android:fragmentEnterTransition}</code></td><td>The Transition that will be used to move Views into the initial scene.</td></tr>
     * <tr><td><code>{@link #Fragment_fragmentSharedElementEnterTransition android:fragmentSharedElementEnterTransition}</code></td><td>The Transition that will be used for shared elements transferred into the content
     * Scene.</td></tr>
     * <tr><td><code>{@link #Fragment_fragmentReturnTransition android:fragmentReturnTransition}</code></td><td>The Transition that will be used to move Views out of the scene when the Fragment is
     * preparing to be removed, hidden, or detached because of popping the back stack.</td></tr>
     * <tr><td><code>{@link #Fragment_fragmentSharedElementReturnTransition android:fragmentSharedElementReturnTransition}</code></td><td>The Transition that will be used for shared elements transferred back during a
     * pop of the back stack.</td></tr>
     * <tr><td><code>{@link #Fragment_fragmentReenterTransition android:fragmentReenterTransition}</code></td><td>The Transition that will be used to move Views in to the scene when returning due
     * to popping a back stack.</td></tr>
     * <tr><td><code>{@link #Fragment_fragmentAllowEnterTransitionOverlap android:fragmentAllowEnterTransitionOverlap}</code></td><td>Sets whether the enter and exit transitions should overlap when transitioning
     * forward.</td></tr>
     * <tr><td><code>{@link #Fragment_fragmentAllowReturnTransitionOverlap android:fragmentAllowReturnTransitionOverlap}</code></td><td>Sets whether the enter and exit transitions should overlap when transitioning
     * because of popping the back stack.</td></tr>
     * </table>
     * @see #Fragment_name
     * @see #Fragment_id
     * @see #Fragment_tag
     * @see #Fragment_fragmentExitTransition
     * @see #Fragment_fragmentEnterTransition
     * @see #Fragment_fragmentSharedElementEnterTransition
     * @see #Fragment_fragmentReturnTransition
     * @see #Fragment_fragmentSharedElementReturnTransition
     * @see #Fragment_fragmentReenterTransition
     * @see #Fragment_fragmentAllowEnterTransitionOverlap
     * @see #Fragment_fragmentAllowReturnTransitionOverlap
     */
    public static final int[] Fragment={
      0x01010003, 0x010100d0, 0x010100d1, 0x010104c2, 
      0x010104c3, 0x010104c4, 0x010104c5, 0x010104c6, 
      0x010104c7, 0x010104c8, 0x010104c9
    };
    /**
     * <p>
     * @attr description
     * Supply the name of the fragment class to instantiate.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int Fragment_name=0;
    /**
     * <p>
     * @attr description
     * Supply an identifier name for the top-level view, to later retrieve it
     * with {@link android.view.View#findViewById View.findViewById()} or
     * {@link android.app.Activity#findViewById Activity.findViewById()}.
     * This must be a
     * resource reference; typically you set this using the
     * <code>@+</code> syntax to create a new ID resources.
     * For example: <code>android:id="@+id/my_id"</code> which
     * allows you to later retrieve the view
     * with <code>findViewById(R.id.my_id)</code>.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:id
     */
    public static final int Fragment_id=1;
    /**
     * <p>
     * @attr description
     * Supply a tag for the top-level view containing a String, to be retrieved
     * later with {@link android.view.View#getTag View.getTag()} or
     * searched for with {@link android.view.View#findViewWithTag
     * View.findViewWithTag()}.  It is generally preferable to use
     * IDs (through the android:id attribute) instead of tags because
     * they are faster and allow for compile-time type checking.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:tag
     */
    public static final int Fragment_tag=2;
    /**
     * <p>
     * @attr description
     * The Transition that will be used to move Views out of the scene when the
     * fragment is removed, hidden, or detached when not popping the back stack.
     * Corresponds to {@link android.app.Fragment#setExitTransition(
     * android.transition.Transition)}
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:fragmentExitTransition
     */
    public static final int Fragment_fragmentExitTransition=3;
    /**
     * <p>
     * @attr description
     * The Transition that will be used to move Views into the initial scene.
     * Corresponds to {@link android.app.Fragment#setEnterTransition(
     * android.transition.Transition)}
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:fragmentEnterTransition
     */
    public static final int Fragment_fragmentEnterTransition=4;
    /**
     * <p>
     * @attr description
     * The Transition that will be used for shared elements transferred into the content
     * Scene.
     * Corresponds to {@link android.app.Fragment#setSharedElementEnterTransition(
     * android.transition.Transition)}
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:fragmentSharedElementEnterTransition
     */
    public static final int Fragment_fragmentSharedElementEnterTransition=5;
    /**
     * <p>
     * @attr description
     * The Transition that will be used to move Views out of the scene when the Fragment is
     * preparing to be removed, hidden, or detached because of popping the back stack.
     * Corresponds to {@link android.app.Fragment#setReturnTransition(
     * android.transition.Transition)}
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:fragmentReturnTransition
     */
    public static final int Fragment_fragmentReturnTransition=6;
    /**
     * <p>
     * @attr description
     * The Transition that will be used for shared elements transferred back during a
     * pop of the back stack. This Transition acts in the leaving Fragment.
     * Corresponds to {@link android.app.Fragment#setSharedElementReturnTransition(
     * android.transition.Transition)}
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:fragmentSharedElementReturnTransition
     */
    public static final int Fragment_fragmentSharedElementReturnTransition=7;
    /**
     * <p>
     * @attr description
     * The Transition that will be used to move Views in to the scene when returning due
     * to popping a back stack.
     * Corresponds to {@link android.app.Fragment#setReenterTransition(
     * android.transition.Transition)}
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:fragmentReenterTransition
     */
    public static final int Fragment_fragmentReenterTransition=8;
    /**
     * <p>
     * @attr description
     * Sets whether the enter and exit transitions should overlap when transitioning
     * forward.
     * Corresponds to {@link android.app.Fragment#setAllowEnterTransitionOverlap(
     * boolean)}
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:fragmentAllowEnterTransitionOverlap
     */
    public static final int Fragment_fragmentAllowEnterTransitionOverlap=9;
    /**
     * <p>
     * @attr description
     * Sets whether the enter and exit transitions should overlap when transitioning
     * because of popping the back stack.
     * Corresponds to {@link android.app.Fragment#setAllowReturnTransitionOverlap(
     * boolean)}
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:fragmentAllowReturnTransitionOverlap
     */
    public static final int Fragment_fragmentAllowReturnTransitionOverlap=10;
    /**
     * Fragment animation class attributes.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #FragmentAnimation_fragmentOpenEnterAnimation android:fragmentOpenEnterAnimation}</code></td><td></td></tr>
     * <tr><td><code>{@link #FragmentAnimation_fragmentOpenExitAnimation android:fragmentOpenExitAnimation}</code></td><td></td></tr>
     * <tr><td><code>{@link #FragmentAnimation_fragmentCloseEnterAnimation android:fragmentCloseEnterAnimation}</code></td><td></td></tr>
     * <tr><td><code>{@link #FragmentAnimation_fragmentCloseExitAnimation android:fragmentCloseExitAnimation}</code></td><td></td></tr>
     * <tr><td><code>{@link #FragmentAnimation_fragmentFadeEnterAnimation android:fragmentFadeEnterAnimation}</code></td><td></td></tr>
     * <tr><td><code>{@link #FragmentAnimation_fragmentFadeExitAnimation android:fragmentFadeExitAnimation}</code></td><td></td></tr>
     * </table>
     * @see #FragmentAnimation_fragmentOpenEnterAnimation
     * @see #FragmentAnimation_fragmentOpenExitAnimation
     * @see #FragmentAnimation_fragmentCloseEnterAnimation
     * @see #FragmentAnimation_fragmentCloseExitAnimation
     * @see #FragmentAnimation_fragmentFadeEnterAnimation
     * @see #FragmentAnimation_fragmentFadeExitAnimation
     */
    public static final int[] FragmentAnimation={
      0x010102e5, 0x010102e6, 0x010102e7, 0x010102e8, 
      0x010102e9, 0x010102ea
    };
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#fragmentOpenEnterAnimation}
     * attribute's value can be found in the {@link #FragmentAnimation} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:fragmentOpenEnterAnimation
     */
    public static final int FragmentAnimation_fragmentOpenEnterAnimation=0;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#fragmentOpenExitAnimation}
     * attribute's value can be found in the {@link #FragmentAnimation} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:fragmentOpenExitAnimation
     */
    public static final int FragmentAnimation_fragmentOpenExitAnimation=1;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#fragmentCloseEnterAnimation}
     * attribute's value can be found in the {@link #FragmentAnimation} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:fragmentCloseEnterAnimation
     */
    public static final int FragmentAnimation_fragmentCloseEnterAnimation=2;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#fragmentCloseExitAnimation}
     * attribute's value can be found in the {@link #FragmentAnimation} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:fragmentCloseExitAnimation
     */
    public static final int FragmentAnimation_fragmentCloseExitAnimation=3;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#fragmentFadeEnterAnimation}
     * attribute's value can be found in the {@link #FragmentAnimation} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:fragmentFadeEnterAnimation
     */
    public static final int FragmentAnimation_fragmentFadeEnterAnimation=4;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#fragmentFadeExitAnimation}
     * attribute's value can be found in the {@link #FragmentAnimation} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:fragmentFadeExitAnimation
     */
    public static final int FragmentAnimation_fragmentFadeExitAnimation=5;
    /**
     * Attributes that can be used with <code>&lt;FragmentBreadCrumbs&gt;</code>
     * tags.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #FragmentBreadCrumbs_gravity android:gravity}</code></td><td>Specifies how an object should position its content, on both the X and Y axes,
     * within its own bounds.</td></tr>
     * </table>
     * @see #FragmentBreadCrumbs_gravity
     */
    public static final int[] FragmentBreadCrumbs={
      0x010100af, 0x0112006b, 0x0112006c
    };
    /**
     * <p>
     * @attr description
     * Specifies how an object should position its content, on both the X and Y axes,
     * within its own bounds.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
     * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
     * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
     * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
     * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the horizontal gravity: a left gravity will clip the right
     * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
     * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the vertical gravity: a top gravity will clip the bottom
     * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
     * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
     * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
     * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
     * </table>
     *
     * @attr name android:gravity
     */
    public static final int FragmentBreadCrumbs_gravity=0;
    /**
     * Attributes that can be used with a FrameLayout.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #FrameLayout_measureAllChildren android:measureAllChildren}</code></td><td>Determines whether to measure all children or just those in
     * the VISIBLE or INVISIBLE state when measuring.</td></tr>
     * </table>
     * @see #FrameLayout_measureAllChildren
     */
    public static final int[] FrameLayout={
      0x0101010a
    };
    /**
     * <p>
     * @attr description
     * Determines whether to measure all children or just those in
     * the VISIBLE or INVISIBLE state when measuring. Defaults to false.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:measureAllChildren
     */
    public static final int FrameLayout_measureAllChildren=0;
    /**
     * Attributes that can be used with a FrameLayout_Layout.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #FrameLayout_Layout_layout_gravity android:layout_gravity}</code></td><td>Standard gravity constant that a child supplies to its parent.</td></tr>
     * </table>
     * @see #FrameLayout_Layout_layout_gravity
     */
    public static final int[] FrameLayout_Layout={
      0x010100b3
    };
    /**
     * <p>
     * @attr description
     * Standard gravity constant that a child supplies to its parent.
     * Defines how the child view should be positioned, on both the X and Y axes, within its enclosing layout.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
     * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
     * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
     * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
     * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the horizontal gravity: a left gravity will clip the right
     * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
     * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the vertical gravity: a top gravity will clip the bottom
     * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
     * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
     * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
     * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
     * </table>
     *
     * @attr name android:layout_gravity
     */
    public static final int FrameLayout_Layout_layout_gravity=0;
    /**
     * Attributes that can be used with a Gallery.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Gallery_gravity android:gravity}</code></td><td>Specifies how an object should position its content, on both the X and Y axes,
     * within its own bounds.</td></tr>
     * <tr><td><code>{@link #Gallery_animationDuration android:animationDuration}</code></td><td>Sets how long a transition animation should run (in milliseconds)
     * when layout has changed.</td></tr>
     * <tr><td><code>{@link #Gallery_spacing android:spacing}</code></td><td></td></tr>
     * <tr><td><code>{@link #Gallery_unselectedAlpha android:unselectedAlpha}</code></td><td>Sets the alpha on the items that are not selected.</td></tr>
     * </table>
     * @see #Gallery_gravity
     * @see #Gallery_animationDuration
     * @see #Gallery_spacing
     * @see #Gallery_unselectedAlpha
     */
    public static final int[] Gallery={
      0x010100af, 0x01010112, 0x01010113, 0x0101020e
    };
    /**
     * <p>
     * @attr description
     * Specifies how an object should position its content, on both the X and Y axes,
     * within its own bounds.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
     * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
     * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
     * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
     * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the horizontal gravity: a left gravity will clip the right
     * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
     * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the vertical gravity: a top gravity will clip the bottom
     * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
     * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
     * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
     * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
     * </table>
     *
     * @attr name android:gravity
     */
    public static final int Gallery_gravity=0;
    /**
     * <p>
     * @attr description
     * Sets how long a transition animation should run (in milliseconds)
     * when layout has changed.  Only relevant if animation is turned on.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:animationDuration
     */
    public static final int Gallery_animationDuration=1;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#spacing}
     * attribute's value can be found in the {@link #Gallery} array.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:spacing
     */
    public static final int Gallery_spacing=2;
    /**
     * <p>
     * @attr description
     * Sets the alpha on the items that are not selected.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:unselectedAlpha
     */
    public static final int Gallery_unselectedAlpha=3;
    /**
     * GestureOverlayView specific attributes. These attributes are used to configure
     * a GestureOverlayView from XML.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #GestureOverlayView_orientation android:orientation}</code></td><td>Standard orientation constant.</td></tr>
     * <tr><td><code>{@link #GestureOverlayView_gestureStrokeWidth android:gestureStrokeWidth}</code></td><td>Width of the stroke used to draw the gesture.</td></tr>
     * <tr><td><code>{@link #GestureOverlayView_gestureColor android:gestureColor}</code></td><td>Color used to draw a gesture.</td></tr>
     * <tr><td><code>{@link #GestureOverlayView_uncertainGestureColor android:uncertainGestureColor}</code></td><td>Color used to draw the user's strokes until we are sure it's a gesture.</td></tr>
     * <tr><td><code>{@link #GestureOverlayView_fadeOffset android:fadeOffset}</code></td><td>Time, in milliseconds, to wait before the gesture fades out after the user
     * is done drawing it.</td></tr>
     * <tr><td><code>{@link #GestureOverlayView_fadeDuration android:fadeDuration}</code></td><td>Duration, in milliseconds, of the fade out effect after the user is done
     * drawing a gesture.</td></tr>
     * <tr><td><code>{@link #GestureOverlayView_gestureStrokeType android:gestureStrokeType}</code></td><td>Defines the type of strokes that define a gesture.</td></tr>
     * <tr><td><code>{@link #GestureOverlayView_gestureStrokeLengthThreshold android:gestureStrokeLengthThreshold}</code></td><td>Minimum length of a stroke before it is recognized as a gesture.</td></tr>
     * <tr><td><code>{@link #GestureOverlayView_gestureStrokeSquarenessThreshold android:gestureStrokeSquarenessThreshold}</code></td><td>Squareness threshold of a stroke before it is recognized as a gesture.</td></tr>
     * <tr><td><code>{@link #GestureOverlayView_gestureStrokeAngleThreshold android:gestureStrokeAngleThreshold}</code></td><td>Minimum curve angle a stroke must contain before it is recognized as a gesture.</td></tr>
     * <tr><td><code>{@link #GestureOverlayView_eventsInterceptionEnabled android:eventsInterceptionEnabled}</code></td><td>Defines whether the overlay should intercept the motion events when a gesture
     * is recognized.</td></tr>
     * <tr><td><code>{@link #GestureOverlayView_fadeEnabled android:fadeEnabled}</code></td><td>Defines whether the gesture will automatically fade out after being recognized.</td></tr>
     * </table>
     * @see #GestureOverlayView_orientation
     * @see #GestureOverlayView_gestureStrokeWidth
     * @see #GestureOverlayView_gestureColor
     * @see #GestureOverlayView_uncertainGestureColor
     * @see #GestureOverlayView_fadeOffset
     * @see #GestureOverlayView_fadeDuration
     * @see #GestureOverlayView_gestureStrokeType
     * @see #GestureOverlayView_gestureStrokeLengthThreshold
     * @see #GestureOverlayView_gestureStrokeSquarenessThreshold
     * @see #GestureOverlayView_gestureStrokeAngleThreshold
     * @see #GestureOverlayView_eventsInterceptionEnabled
     * @see #GestureOverlayView_fadeEnabled
     */
    public static final int[] GestureOverlayView={
      0x010100c4, 0x01010274, 0x01010275, 0x01010276, 
      0x01010277, 0x01010278, 0x01010279, 0x0101027a, 
      0x0101027b, 0x0101027c, 0x0101027d, 0x0101027e
    };
    /**
     * <p>
     * @attr description
     * Indicates whether horizontal (when the orientation is vertical) or vertical
     * (when orientation is horizontal) strokes automatically define a gesture.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>horizontal</td><td>0</td><td>Defines an horizontal widget.</td></tr>
     * <tr><td>vertical</td><td>1</td><td>Defines a vertical widget.</td></tr>
     * </table>
     *
     * @attr name android:orientation
     */
    public static final int GestureOverlayView_orientation=0;
    /**
     * <p>
     * @attr description
     * Width of the stroke used to draw the gesture.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:gestureStrokeWidth
     */
    public static final int GestureOverlayView_gestureStrokeWidth=1;
    /**
     * <p>
     * @attr description
     * Color used to draw a gesture.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:gestureColor
     */
    public static final int GestureOverlayView_gestureColor=2;
    /**
     * <p>
     * @attr description
     * Color used to draw the user's strokes until we are sure it's a gesture.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:uncertainGestureColor
     */
    public static final int GestureOverlayView_uncertainGestureColor=3;
    /**
     * <p>
     * @attr description
     * Time, in milliseconds, to wait before the gesture fades out after the user
     * is done drawing it.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:fadeOffset
     */
    public static final int GestureOverlayView_fadeOffset=4;
    /**
     * <p>
     * @attr description
     * Duration, in milliseconds, of the fade out effect after the user is done
     * drawing a gesture.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:fadeDuration
     */
    public static final int GestureOverlayView_fadeDuration=5;
    /**
     * <p>
     * @attr description
     * Defines the type of strokes that define a gesture.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>multiple</td><td>1</td><td>A gesture is made of multiple strokes.</td></tr>
     * <tr><td>single</td><td>0</td><td>A gesture is made of only one stroke.</td></tr>
     * </table>
     *
     * @attr name android:gestureStrokeType
     */
    public static final int GestureOverlayView_gestureStrokeType=6;
    /**
     * <p>
     * @attr description
     * Minimum length of a stroke before it is recognized as a gesture.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:gestureStrokeLengthThreshold
     */
    public static final int GestureOverlayView_gestureStrokeLengthThreshold=7;
    /**
     * <p>
     * @attr description
     * Squareness threshold of a stroke before it is recognized as a gesture.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:gestureStrokeSquarenessThreshold
     */
    public static final int GestureOverlayView_gestureStrokeSquarenessThreshold=8;
    /**
     * <p>
     * @attr description
     * Minimum curve angle a stroke must contain before it is recognized as a gesture.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:gestureStrokeAngleThreshold
     */
    public static final int GestureOverlayView_gestureStrokeAngleThreshold=9;
    /**
     * <p>
     * @attr description
     * Defines whether the overlay should intercept the motion events when a gesture
     * is recognized.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:eventsInterceptionEnabled
     */
    public static final int GestureOverlayView_eventsInterceptionEnabled=10;
    /**
     * <p>
     * @attr description
     * Defines whether the gesture will automatically fade out after being recognized.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:fadeEnabled
     */
    public static final int GestureOverlayView_fadeEnabled=11;
    /**
     * Attributes that can be used with a GlowPadView.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #GlowPadView_targetDescriptions android:targetDescriptions}</code></td><td>Reference to an array resource that be used as description for the targets around the circle.</td></tr>
     * <tr><td><code>{@link #GlowPadView_directionDescriptions android:directionDescriptions}</code></td><td>Reference to an array resource that be used to announce the directions with targets around the circle.</td></tr>
     * </table>
     * @see #GlowPadView_targetDescriptions
     * @see #GlowPadView_directionDescriptions
     */
    public static final int[] GlowPadView={
      0x010103a0, 0x010103a1
    };
    /**
     * <p>
     * @attr description
     * Reference to an array resource that be used as description for the targets around the circle.
     * {@deprecated Removed.}
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:targetDescriptions
     */
    @Deprecated
    public static final int GlowPadView_targetDescriptions=0;
    /**
     * <p>
     * @attr description
     * Reference to an array resource that be used to announce the directions with targets around the circle.
     * {@deprecated Removed.}
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:directionDescriptions
     */
    @Deprecated
    public static final int GlowPadView_directionDescriptions=1;
    /**
     * Used to describe the gradient for fill or stroke in a path of VectorDrawable.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #GradientColor_startColor android:startColor}</code></td><td>Start color of the gradient.</td></tr>
     * <tr><td><code>{@link #GradientColor_endColor android:endColor}</code></td><td>End color of the gradient.</td></tr>
     * <tr><td><code>{@link #GradientColor_type android:type}</code></td><td>Type of gradient.</td></tr>
     * <tr><td><code>{@link #GradientColor_centerX android:centerX}</code></td><td>X-position of the center point of the gradient within the shape as a fraction of the
     * width.</td></tr>
     * <tr><td><code>{@link #GradientColor_centerY android:centerY}</code></td><td>Y-position of the center point of the gradient within the shape as a fraction of the
     * height.</td></tr>
     * <tr><td><code>{@link #GradientColor_gradientRadius android:gradientRadius}</code></td><td>Radius of the gradient, used only with radial gradient.</td></tr>
     * <tr><td><code>{@link #GradientColor_tileMode android:tileMode}</code></td><td>Defines the tile mode.</td></tr>
     * <tr><td><code>{@link #GradientColor_centerColor android:centerColor}</code></td><td>Optional center color.</td></tr>
     * <tr><td><code>{@link #GradientColor_startX android:startX}</code></td><td>X coordinate of the start point origin of the gradient.</td></tr>
     * <tr><td><code>{@link #GradientColor_startY android:startY}</code></td><td>Y coordinate of the start point of the gradient within the shape.</td></tr>
     * <tr><td><code>{@link #GradientColor_endX android:endX}</code></td><td>X coordinate of the end point origin of the gradient.</td></tr>
     * <tr><td><code>{@link #GradientColor_endY android:endY}</code></td><td>Y coordinate of the end point of the gradient within the shape.</td></tr>
     * </table>
     * @see #GradientColor_startColor
     * @see #GradientColor_endColor
     * @see #GradientColor_type
     * @see #GradientColor_centerX
     * @see #GradientColor_centerY
     * @see #GradientColor_gradientRadius
     * @see #GradientColor_tileMode
     * @see #GradientColor_centerColor
     * @see #GradientColor_startX
     * @see #GradientColor_startY
     * @see #GradientColor_endX
     * @see #GradientColor_endY
     */
    public static final int[] GradientColor={
      0x0101019d, 0x0101019e, 0x010101a1, 0x010101a2, 
      0x010101a3, 0x010101a4, 0x01010201, 0x0101020b, 
      0x01010510, 0x01010511, 0x01010512, 0x01010513
    };
    /**
     * <p>
     * @attr description
     * Start color of the gradient.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:startColor
     */
    public static final int GradientColor_startColor=0;
    /**
     * <p>
     * @attr description
     * End color of the gradient.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:endColor
     */
    public static final int GradientColor_endColor=1;
    /**
     * <p>
     * @attr description
     * Type of gradient. The default type is linear.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>linear</td><td>0</td><td>Linear gradient extending across the center point.</td></tr>
     * <tr><td>radial</td><td>1</td><td>Radial gradient extending from the center point outward.</td></tr>
     * <tr><td>sweep</td><td>2</td><td>Sweep (or angular) gradient sweeping counter-clockwise around the center point.</td></tr>
     * </table>
     *
     * @attr name android:type
     */
    public static final int GradientColor_type=2;
    /**
     * <p>
     * @attr description
     * X coordinate of the center of the gradient within the path.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:centerX
     */
    public static final int GradientColor_centerX=3;
    /**
     * <p>
     * @attr description
     * Y coordinate of the center of the gradient within the path.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:centerY
     */
    public static final int GradientColor_centerY=4;
    /**
     * <p>
     * @attr description
     * Radius of the gradient, used only with radial gradient.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:gradientRadius
     */
    public static final int GradientColor_gradientRadius=5;
    /**
     * <p>
     * @attr description
     * Defines the tile mode of the gradient. SweepGradient don't support tiling.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>clamp</td><td>0</td><td>Replicates the edge color.</td></tr>
     * <tr><td>disabled</td><td>ffffffff</td><td>Do not tile the bitmap. This is the default value.</td></tr>
     * <tr><td>mirror</td><td>2</td><td>Repeats the shader's image horizontally and vertically, alternating
     * mirror images so that adjacent images always seam.</td></tr>
     * <tr><td>repeat</td><td>1</td><td>Repeats the bitmap in both direction.</td></tr>
     * </table>
     *
     * @attr name android:tileMode
     */
    public static final int GradientColor_tileMode=6;
    /**
     * <p>
     * @attr description
     * Optional center color.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:centerColor
     */
    public static final int GradientColor_centerColor=7;
    /**
     * <p>
     * @attr description
     * X coordinate of the start point origin of the gradient.
     * Defined in same coordinates as the path itself
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:startX
     */
    public static final int GradientColor_startX=8;
    /**
     * <p>
     * @attr description
     * Y coordinate of the start point of the gradient within the shape.
     * Defined in same coordinates as the path itself
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:startY
     */
    public static final int GradientColor_startY=9;
    /**
     * <p>
     * @attr description
     * X coordinate of the end point origin of the gradient.
     * Defined in same coordinates as the path itself
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:endX
     */
    public static final int GradientColor_endX=10;
    /**
     * <p>
     * @attr description
     * Y coordinate of the end point of the gradient within the shape.
     * Defined in same coordinates as the path itself
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:endY
     */
    public static final int GradientColor_endY=11;
    /**
     * Describes an item of a GradientColor. Minimally need 2 items to define the gradient
     * Colors defined in <item> override the simple color attributes such as
     * "startColor / centerColor / endColor" are ignored.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #GradientColorItem_color android:color}</code></td><td>Solid color for the gradient shape.</td></tr>
     * <tr><td><code>{@link #GradientColorItem_offset android:offset}</code></td><td>The offset (or ratio) of this current color item inside the gradient.</td></tr>
     * </table>
     * @see #GradientColorItem_color
     * @see #GradientColorItem_offset
     */
    public static final int[] GradientColorItem={
      0x010101a5, 0x01010514
    };
    /**
     * <p>
     * @attr description
     * The current color for the offset inside the gradient.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:color
     */
    public static final int GradientColorItem_color=0;
    /**
     * <p>
     * @attr description
     * The offset (or ratio) of this current color item inside the gradient.
     * The value is only meaningful when it is between 0 and 1.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:offset
     */
    public static final int GradientColorItem_offset=1;
    /**
     * Drawable used to render a geometric shape, with a gradient or a solid color.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #GradientDrawable_dither android:dither}</code></td><td>Enables or disables dithering of the bitmap if the bitmap does not have the
     * same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
     * an RGB 565 screen).</td></tr>
     * <tr><td><code>{@link #GradientDrawable_tint android:tint}</code></td><td>The tinting color for the image.</td></tr>
     * <tr><td><code>{@link #GradientDrawable_visible android:visible}</code></td><td>Provides initial visibility state of the drawable; the default
     * value is false.</td></tr>
     * <tr><td><code>{@link #GradientDrawable_shape android:shape}</code></td><td>Indicates what shape to fill with a gradient.</td></tr>
     * <tr><td><code>{@link #GradientDrawable_innerRadiusRatio android:innerRadiusRatio}</code></td><td>Inner radius of the ring expressed as a ratio of the ring's width.</td></tr>
     * <tr><td><code>{@link #GradientDrawable_thicknessRatio android:thicknessRatio}</code></td><td>Thickness of the ring expressed as a ratio of the ring's width.</td></tr>
     * <tr><td><code>{@link #GradientDrawable_useLevel android:useLevel}</code></td><td>Whether the drawable level value (see
     * {@link android.graphics.drawable.Drawable#getLevel()}) is used to scale the gradient.</td></tr>
     * <tr><td><code>{@link #GradientDrawable_innerRadius android:innerRadius}</code></td><td>Inner radius of the ring.</td></tr>
     * <tr><td><code>{@link #GradientDrawable_thickness android:thickness}</code></td><td>Thickness of the ring.</td></tr>
     * <tr><td><code>{@link #GradientDrawable_tintMode android:tintMode}</code></td><td>When a tint color is set, specifies its Porter-Duff blending mode.</td></tr>
     * <tr><td><code>{@link #GradientDrawable_opticalInsetLeft android:opticalInsetLeft}</code></td><td>Left optical inset.</td></tr>
     * <tr><td><code>{@link #GradientDrawable_opticalInsetTop android:opticalInsetTop}</code></td><td>Top optical inset.</td></tr>
     * <tr><td><code>{@link #GradientDrawable_opticalInsetRight android:opticalInsetRight}</code></td><td>Right optical inset.</td></tr>
     * <tr><td><code>{@link #GradientDrawable_opticalInsetBottom android:opticalInsetBottom}</code></td><td>Bottom optical inset.</td></tr>
     * </table>
     * @see #GradientDrawable_dither
     * @see #GradientDrawable_tint
     * @see #GradientDrawable_visible
     * @see #GradientDrawable_shape
     * @see #GradientDrawable_innerRadiusRatio
     * @see #GradientDrawable_thicknessRatio
     * @see #GradientDrawable_useLevel
     * @see #GradientDrawable_innerRadius
     * @see #GradientDrawable_thickness
     * @see #GradientDrawable_tintMode
     * @see #GradientDrawable_opticalInsetLeft
     * @see #GradientDrawable_opticalInsetTop
     * @see #GradientDrawable_opticalInsetRight
     * @see #GradientDrawable_opticalInsetBottom
     */
    public static final int[] GradientDrawable={
      0x0101011c, 0x01010121, 0x01010194, 0x0101019a, 
      0x0101019b, 0x0101019c, 0x0101019f, 0x0101025f, 
      0x01010260, 0x010103fb, 0x01010588, 0x01010589, 
      0x0101058a, 0x0101058b
    };
    /**
     * <p>
     * @attr description
     * Enables or disables dithering.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:dither
     */
    public static final int GradientDrawable_dither=0;
    /**
     * <p>
     * @attr description
     * If set, specifies the color to apply to the drawable as a tint. By default,
     * no tint is applied. May be a color state list.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:tint
     */
    public static final int GradientDrawable_tint=1;
    /**
     * <p>
     * @attr description
     * Indicates whether the drawable should intially be visible.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:visible
     */
    public static final int GradientDrawable_visible=2;
    /**
     * <p>
     * @attr description
     * Indicates what shape to fill with a gradient.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>line</td><td>2</td><td>Line shape.</td></tr>
     * <tr><td>oval</td><td>1</td><td>Oval shape.</td></tr>
     * <tr><td>rectangle</td><td>0</td><td>Rectangle shape, with optional rounder corners.</td></tr>
     * <tr><td>ring</td><td>3</td><td>Ring shape.</td></tr>
     * </table>
     *
     * @attr name android:shape
     */
    public static final int GradientDrawable_shape=3;
    /**
     * <p>
     * @attr description
     * Inner radius of the ring expressed as a ratio of the ring's width. For instance,
     * if innerRadiusRatio=9, then the inner radius equals the ring's width divided by 9.
     * This value is ignored if innerRadius is defined. Default value is 9.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:innerRadiusRatio
     */
    public static final int GradientDrawable_innerRadiusRatio=4;
    /**
     * <p>
     * @attr description
     * Thickness of the ring expressed as a ratio of the ring's width. For instance,
     * if thicknessRatio=3, then the thickness equals the ring's width divided by 3.
     * This value is ignored if innerRadius is defined. Default value is 3.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:thicknessRatio
     */
    public static final int GradientDrawable_thicknessRatio=5;
    /**
     * <p>
     * @attr description
     * Whether the drawable level value (see
     * {@link android.graphics.drawable.Drawable#getLevel()}) is used to scale the shape.
     * Scaling behavior depends on the shape type. For "ring", the angle is scaled from 0 to
     * 360. For all other types, there is no effect. The default value is true.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:useLevel
     */
    public static final int GradientDrawable_useLevel=6;
    /**
     * <p>
     * @attr description
     * Inner radius of the ring. When defined, innerRadiusRatio is ignored.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:innerRadius
     */
    public static final int GradientDrawable_innerRadius=7;
    /**
     * <p>
     * @attr description
     * Thickness of the ring. When defined, thicknessRatio is ignored.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:thickness
     */
    public static final int GradientDrawable_thickness=8;
    /**
     * <p>
     * @attr description
     * When a tint color is set, specifies its Porter-Duff blending mode. The
     * default value is src_in, which treats the drawable as an alpha mask.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     *
     * @attr name android:tintMode
     */
    public static final int GradientDrawable_tintMode=9;
    /**
     * <p>
     * @attr description
     * Left optical inset.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:opticalInsetLeft
     */
    public static final int GradientDrawable_opticalInsetLeft=10;
    /**
     * <p>
     * @attr description
     * Top optical inset.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:opticalInsetTop
     */
    public static final int GradientDrawable_opticalInsetTop=11;
    /**
     * <p>
     * @attr description
     * Right optical inset.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:opticalInsetRight
     */
    public static final int GradientDrawable_opticalInsetRight=12;
    /**
     * <p>
     * @attr description
     * Bottom optical inset.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:opticalInsetBottom
     */
    public static final int GradientDrawable_opticalInsetBottom=13;
    /**
     * Used to describe the gradient used to fill the shape of a GradientDrawable.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #GradientDrawableGradient_startColor android:startColor}</code></td><td>Start color of the gradient.</td></tr>
     * <tr><td><code>{@link #GradientDrawableGradient_endColor android:endColor}</code></td><td>End color of the gradient.</td></tr>
     * <tr><td><code>{@link #GradientDrawableGradient_useLevel android:useLevel}</code></td><td>Whether the drawable level value (see
     * {@link android.graphics.drawable.Drawable#getLevel()}) is used to scale the gradient.</td></tr>
     * <tr><td><code>{@link #GradientDrawableGradient_angle android:angle}</code></td><td>Angle of the gradient, used only with linear gradient.</td></tr>
     * <tr><td><code>{@link #GradientDrawableGradient_type android:type}</code></td><td>Type of gradient.</td></tr>
     * <tr><td><code>{@link #GradientDrawableGradient_centerX android:centerX}</code></td><td>X-position of the center point of the gradient within the shape as a fraction of the
     * width.</td></tr>
     * <tr><td><code>{@link #GradientDrawableGradient_centerY android:centerY}</code></td><td>Y-position of the center point of the gradient within the shape as a fraction of the
     * height.</td></tr>
     * <tr><td><code>{@link #GradientDrawableGradient_gradientRadius android:gradientRadius}</code></td><td>Radius of the gradient, used only with radial gradient.</td></tr>
     * <tr><td><code>{@link #GradientDrawableGradient_centerColor android:centerColor}</code></td><td>Optional center color.</td></tr>
     * </table>
     * @see #GradientDrawableGradient_startColor
     * @see #GradientDrawableGradient_endColor
     * @see #GradientDrawableGradient_useLevel
     * @see #GradientDrawableGradient_angle
     * @see #GradientDrawableGradient_type
     * @see #GradientDrawableGradient_centerX
     * @see #GradientDrawableGradient_centerY
     * @see #GradientDrawableGradient_gradientRadius
     * @see #GradientDrawableGradient_centerColor
     */
    public static final int[] GradientDrawableGradient={
      0x0101019d, 0x0101019e, 0x0101019f, 0x010101a0, 
      0x010101a1, 0x010101a2, 0x010101a3, 0x010101a4, 
      0x0101020b
    };
    /**
     * <p>
     * @attr description
     * Start color of the gradient.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:startColor
     */
    public static final int GradientDrawableGradient_startColor=0;
    /**
     * <p>
     * @attr description
     * End color of the gradient.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:endColor
     */
    public static final int GradientDrawableGradient_endColor=1;
    /**
     * <p>
     * @attr description
     * Whether the drawable level value (see
     * {@link android.graphics.drawable.Drawable#getLevel()}) is used to scale the gradient.
     * Scaling behavior varies based on gradient type. For "linear", adjusts the ending
     * position along the gradient's axis of orientation. For "radial", adjusts the outer
     * radius. For "sweep", adjusts the ending angle. The default value is false.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:useLevel
     */
    public static final int GradientDrawableGradient_useLevel=2;
    /**
     * <p>
     * @attr description
     * Angle of the gradient, used only with linear gradient. Must be a multiple of 45 in the
     * range [0, 315].
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:angle
     */
    public static final int GradientDrawableGradient_angle=3;
    /**
     * <p>
     * @attr description
     * Type of gradient. The default type is linear.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>linear</td><td>0</td><td>Linear gradient extending across the center point.</td></tr>
     * <tr><td>radial</td><td>1</td><td>Radial gradient extending from the center point outward.</td></tr>
     * <tr><td>sweep</td><td>2</td><td>Sweep (or angular) gradient sweeping counter-clockwise around the center point.</td></tr>
     * </table>
     *
     * @attr name android:type
     */
    public static final int GradientDrawableGradient_type=4;
    /**
     * <p>
     * @attr description
     * X-position of the center point of the gradient within the shape as a fraction of the
     * width. The default value is 0.5.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:centerX
     */
    public static final int GradientDrawableGradient_centerX=5;
    /**
     * <p>
     * @attr description
     * Y-position of the center point of the gradient within the shape as a fraction of the
     * height. The default value is 0.5.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:centerY
     */
    public static final int GradientDrawableGradient_centerY=6;
    /**
     * <p>
     * @attr description
     * Radius of the gradient, used only with radial gradient. May be an explicit dimension
     * or a fractional value relative to the shape's minimum dimension.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:gradientRadius
     */
    public static final int GradientDrawableGradient_gradientRadius=7;
    /**
     * <p>
     * @attr description
     * Optional center color. For linear gradients, use centerX or centerY to place the center
     * color.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:centerColor
     */
    public static final int GradientDrawableGradient_centerColor=8;
    /**
     * Used to specify the optional padding of a GradientDrawable.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #GradientDrawablePadding_left android:left}</code></td><td>Amount of left padding inside the gradient shape.</td></tr>
     * <tr><td><code>{@link #GradientDrawablePadding_top android:top}</code></td><td>Amount of top padding inside the gradient shape.</td></tr>
     * <tr><td><code>{@link #GradientDrawablePadding_right android:right}</code></td><td>Amount of right padding inside the gradient shape.</td></tr>
     * <tr><td><code>{@link #GradientDrawablePadding_bottom android:bottom}</code></td><td>Amount of bottom padding inside the gradient shape.</td></tr>
     * </table>
     * @see #GradientDrawablePadding_left
     * @see #GradientDrawablePadding_top
     * @see #GradientDrawablePadding_right
     * @see #GradientDrawablePadding_bottom
     */
    public static final int[] GradientDrawablePadding={
      0x010101ad, 0x010101ae, 0x010101af, 0x010101b0
    };
    /**
     * <p>
     * @attr description
     * Amount of left padding inside the gradient shape.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:left
     */
    public static final int GradientDrawablePadding_left=0;
    /**
     * <p>
     * @attr description
     * Amount of top padding inside the gradient shape.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:top
     */
    public static final int GradientDrawablePadding_top=1;
    /**
     * <p>
     * @attr description
     * Amount of right padding inside the gradient shape.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:right
     */
    public static final int GradientDrawablePadding_right=2;
    /**
     * <p>
     * @attr description
     * Amount of bottom padding inside the gradient shape.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:bottom
     */
    public static final int GradientDrawablePadding_bottom=3;
    /**
     * Used to specify the size of the shape for GradientDrawable.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #GradientDrawableSize_height android:height}</code></td><td>Makes the TextView be exactly this tall.</td></tr>
     * <tr><td><code>{@link #GradientDrawableSize_width android:width}</code></td><td>Makes the TextView be exactly this wide.</td></tr>
     * </table>
     * @see #GradientDrawableSize_height
     * @see #GradientDrawableSize_width
     */
    public static final int[] GradientDrawableSize={
      0x01010155, 0x01010159
    };
    /**
     * <p>
     * @attr description
     * Height of the gradient shape.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:height
     */
    public static final int GradientDrawableSize_height=0;
    /**
     * <p>
     * @attr description
     * Width of the gradient shape.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:width
     */
    public static final int GradientDrawableSize_width=1;
    /**
     * Used to fill the shape of GradientDrawable with a solid color.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #GradientDrawableSolid_color android:color}</code></td><td>Solid color for the gradient shape.</td></tr>
     * </table>
     * @see #GradientDrawableSolid_color
     */
    public static final int[] GradientDrawableSolid={
      0x010101a5
    };
    /**
     * <p>
     * @attr description
     * Solid color for the gradient shape.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:color
     */
    public static final int GradientDrawableSolid_color=0;
    /**
     * Used to describe the optional stroke of a GradientDrawable.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #GradientDrawableStroke_width android:width}</code></td><td>Makes the TextView be exactly this wide.</td></tr>
     * <tr><td><code>{@link #GradientDrawableStroke_color android:color}</code></td><td>Solid color for the gradient shape.</td></tr>
     * <tr><td><code>{@link #GradientDrawableStroke_dashWidth android:dashWidth}</code></td><td>Length of a dash in the stroke.</td></tr>
     * <tr><td><code>{@link #GradientDrawableStroke_dashGap android:dashGap}</code></td><td>Gap between dashes in the stroke.</td></tr>
     * </table>
     * @see #GradientDrawableStroke_width
     * @see #GradientDrawableStroke_color
     * @see #GradientDrawableStroke_dashWidth
     * @see #GradientDrawableStroke_dashGap
     */
    public static final int[] GradientDrawableStroke={
      0x01010159, 0x010101a5, 0x010101a6, 0x010101a7
    };
    /**
     * <p>
     * @attr description
     * Width of the gradient shape's stroke.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:width
     */
    public static final int GradientDrawableStroke_width=0;
    /**
     * <p>
     * @attr description
     * Color of the gradient shape's stroke.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:color
     */
    public static final int GradientDrawableStroke_color=1;
    /**
     * <p>
     * @attr description
     * Length of a dash in the stroke.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:dashWidth
     */
    public static final int GradientDrawableStroke_dashWidth=2;
    /**
     * <p>
     * @attr description
     * Gap between dashes in the stroke.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:dashGap
     */
    public static final int GradientDrawableStroke_dashGap=3;
    /**
     * Attributes that can be used with a GridLayout.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #GridLayout_orientation android:orientation}</code></td><td>Standard orientation constant.</td></tr>
     * <tr><td><code>{@link #GridLayout_rowCount android:rowCount}</code></td><td>The maximum number of rows to create when automatically positioning children.</td></tr>
     * <tr><td><code>{@link #GridLayout_rowOrderPreserved android:rowOrderPreserved}</code></td><td>When set to true, forces row boundaries to appear in the same order
     * as row indices.</td></tr>
     * <tr><td><code>{@link #GridLayout_columnCount android:columnCount}</code></td><td>The maximum number of columns to create when automatically positioning children.</td></tr>
     * <tr><td><code>{@link #GridLayout_columnOrderPreserved android:columnOrderPreserved}</code></td><td>When set to true, forces column boundaries to appear in the same order
     * as column indices.</td></tr>
     * <tr><td><code>{@link #GridLayout_useDefaultMargins android:useDefaultMargins}</code></td><td>When set to true, tells GridLayout to use default margins when none are specified
     * in a view's layout parameters.</td></tr>
     * <tr><td><code>{@link #GridLayout_alignmentMode android:alignmentMode}</code></td><td>Alignment constants.</td></tr>
     * </table>
     * @see #GridLayout_orientation
     * @see #GridLayout_rowCount
     * @see #GridLayout_rowOrderPreserved
     * @see #GridLayout_columnCount
     * @see #GridLayout_columnOrderPreserved
     * @see #GridLayout_useDefaultMargins
     * @see #GridLayout_alignmentMode
     */
    public static final int[] GridLayout={
      0x010100c4, 0x01010375, 0x01010376, 0x01010377, 
      0x01010378, 0x01010379, 0x0101037a
    };
    /**
     * <p>
     * @attr description
     * The orientation property is not used during layout. It is only used to
     * allocate row and column parameters when they are not specified by its children's
     * layout paramters. GridLayout works like LinearLayout in this case;
     * putting all the components either in a single row or in a single column -
     * depending on the value of this flag. In the horizontal case, a columnCount
     * property may be additionally supplied to force new rows to be created when a
     * row is full. The rowCount attribute may be used similarly in the vertical case.
     * The default is horizontal.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>horizontal</td><td>0</td><td>Defines an horizontal widget.</td></tr>
     * <tr><td>vertical</td><td>1</td><td>Defines a vertical widget.</td></tr>
     * </table>
     *
     * @attr name android:orientation
     */
    public static final int GridLayout_orientation=0;
    /**
     * <p>
     * @attr description
     * The maximum number of rows to create when automatically positioning children.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:rowCount
     */
    public static final int GridLayout_rowCount=1;
    /**
     * <p>
     * @attr description
     * When set to true, forces row boundaries to appear in the same order
     * as row indices.
     * The default is true.
     * See {@link android.widget.GridLayout#setRowOrderPreserved(boolean)}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:rowOrderPreserved
     */
    public static final int GridLayout_rowOrderPreserved=2;
    /**
     * <p>
     * @attr description
     * The maximum number of columns to create when automatically positioning children.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:columnCount
     */
    public static final int GridLayout_columnCount=3;
    /**
     * <p>
     * @attr description
     * When set to true, forces column boundaries to appear in the same order
     * as column indices.
     * The default is true.
     * See {@link android.widget.GridLayout#setColumnOrderPreserved(boolean)}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:columnOrderPreserved
     */
    public static final int GridLayout_columnOrderPreserved=4;
    /**
     * <p>
     * @attr description
     * When set to true, tells GridLayout to use default margins when none are specified
     * in a view's layout parameters.
     * The default value is false.
     * See {@link android.widget.GridLayout#setUseDefaultMargins(boolean)}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:useDefaultMargins
     */
    public static final int GridLayout_useDefaultMargins=5;
    /**
     * <p>
     * @attr description
     * When set to alignMargins, causes alignment to take place between the outer
     * boundary of a view, as defined by its margins. When set to alignBounds,
     * causes alignment to take place between the edges of the view.
     * The default is alignMargins.
     * See {@link android.widget.GridLayout#setAlignmentMode(int)}.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>alignBounds</td><td>0</td><td>Align the bounds of the children.
     * See {@link android.widget.GridLayout#ALIGN_BOUNDS}.</td></tr>
     * <tr><td>alignMargins</td><td>1</td><td>Align the margins of the children.
     * See {@link android.widget.GridLayout#ALIGN_MARGINS}.</td></tr>
     * </table>
     *
     * @attr name android:alignmentMode
     */
    public static final int GridLayout_alignmentMode=6;
    /**
     * Attributes that can be used with a GridLayoutAnimation.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #GridLayoutAnimation_columnDelay android:columnDelay}</code></td><td>Fraction of the animation duration used to delay the beginning of
     * the animation of each column.</td></tr>
     * <tr><td><code>{@link #GridLayoutAnimation_rowDelay android:rowDelay}</code></td><td>Fraction of the animation duration used to delay the beginning of
     * the animation of each row.</td></tr>
     * <tr><td><code>{@link #GridLayoutAnimation_direction android:direction}</code></td><td>Direction of the animation in the grid.</td></tr>
     * <tr><td><code>{@link #GridLayoutAnimation_directionPriority android:directionPriority}</code></td><td>Priority of the rows and columns.</td></tr>
     * </table>
     * @see #GridLayoutAnimation_columnDelay
     * @see #GridLayoutAnimation_rowDelay
     * @see #GridLayoutAnimation_direction
     * @see #GridLayoutAnimation_directionPriority
     */
    public static final int[] GridLayoutAnimation={
      0x010101cf, 0x010101d0, 0x010101d1, 0x010101d2
    };
    /**
     * <p>
     * @attr description
     * Fraction of the animation duration used to delay the beginning of
     * the animation of each column.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:columnDelay
     */
    public static final int GridLayoutAnimation_columnDelay=0;
    /**
     * <p>
     * @attr description
     * Fraction of the animation duration used to delay the beginning of
     * the animation of each row.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:rowDelay
     */
    public static final int GridLayoutAnimation_rowDelay=1;
    /**
     * <p>
     * @attr description
     * Direction of the animation in the grid.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom_to_top</td><td>2</td><td>Animates rows from bottom to top.</td></tr>
     * <tr><td>left_to_right</td><td>0</td><td>Animates columns from left to right.</td></tr>
     * <tr><td>right_to_left</td><td>1</td><td>Animates columns from right to left.</td></tr>
     * <tr><td>top_to_bottom</td><td>0</td><td>Animates rows from top to bottom.</td></tr>
     * </table>
     *
     * @attr name android:direction
     */
    public static final int GridLayoutAnimation_direction=2;
    /**
     * <p>
     * @attr description
     * Priority of the rows and columns. When the priority is none,
     * both rows and columns have the same priority. When the priority is
     * column, the animations will be applied on the columns first. The same
     * goes for rows.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>column</td><td>1</td><td>Columns are animated first.</td></tr>
     * <tr><td>none</td><td>0</td><td>Rows and columns are animated at the same time.</td></tr>
     * <tr><td>row</td><td>2</td><td>Rows are animated first.</td></tr>
     * </table>
     *
     * @attr name android:directionPriority
     */
    public static final int GridLayoutAnimation_directionPriority=3;
    /**
     * Attributes that can be used with a GridLayout_Layout.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #GridLayout_Layout_layout_gravity android:layout_gravity}</code></td><td>Standard gravity constant that a child supplies to its parent.</td></tr>
     * <tr><td><code>{@link #GridLayout_Layout_layout_column android:layout_column}</code></td><td>The index of the column in which this child should be.</td></tr>
     * <tr><td><code>{@link #GridLayout_Layout_layout_row android:layout_row}</code></td><td>The row boundary delimiting the top of the group of cells
     * occupied by this view.</td></tr>
     * <tr><td><code>{@link #GridLayout_Layout_layout_rowSpan android:layout_rowSpan}</code></td><td>The row span: the difference between the top and bottom
     * boundaries delimiting the group of cells occupied by this view.</td></tr>
     * <tr><td><code>{@link #GridLayout_Layout_layout_columnSpan android:layout_columnSpan}</code></td><td>The column span: the difference between the right and left
     * boundaries delimiting the group of cells occupied by this view.</td></tr>
     * <tr><td><code>{@link #GridLayout_Layout_layout_rowWeight android:layout_rowWeight}</code></td><td>The relative proportion of vertical space that should be allocated to this view
     * during excess space distribution.</td></tr>
     * <tr><td><code>{@link #GridLayout_Layout_layout_columnWeight android:layout_columnWeight}</code></td><td>The relative proportion of horizontal space that should be allocated to this view
     * during excess space distribution.</td></tr>
     * </table>
     * @see #GridLayout_Layout_layout_gravity
     * @see #GridLayout_Layout_layout_column
     * @see #GridLayout_Layout_layout_row
     * @see #GridLayout_Layout_layout_rowSpan
     * @see #GridLayout_Layout_layout_columnSpan
     * @see #GridLayout_Layout_layout_rowWeight
     * @see #GridLayout_Layout_layout_columnWeight
     */
    public static final int[] GridLayout_Layout={
      0x010100b3, 0x0101014c, 0x0101037b, 0x0101037c, 
      0x0101037d, 0x01010458, 0x01010459
    };
    /**
     * <p>
     * @attr description
     * Gravity specifies how a component should be placed in its group of cells.
     * The default is LEFT | BASELINE.
     * See {@link android.widget.GridLayout.LayoutParams#setGravity(int)}.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
     * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
     * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
     * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
     * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the horizontal gravity: a left gravity will clip the right
     * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
     * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the vertical gravity: a top gravity will clip the bottom
     * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
     * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
     * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
     * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
     * </table>
     *
     * @attr name android:layout_gravity
     */
    public static final int GridLayout_Layout_layout_gravity=0;
    /**
     * <p>
     * @attr description
     * The column boundary delimiting the left of the group of cells
     * occupied by this view.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:layout_column
     */
    public static final int GridLayout_Layout_layout_column=1;
    /**
     * <p>
     * @attr description
     * The row boundary delimiting the top of the group of cells
     * occupied by this view.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:layout_row
     */
    public static final int GridLayout_Layout_layout_row=2;
    /**
     * <p>
     * @attr description
     * The row span: the difference between the top and bottom
     * boundaries delimiting the group of cells occupied by this view.
     * The default is one.
     * See {@link android.widget.GridLayout.Spec}.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:layout_rowSpan
     */
    public static final int GridLayout_Layout_layout_rowSpan=3;
    /**
     * <p>
     * @attr description
     * The column span: the difference between the right and left
     * boundaries delimiting the group of cells occupied by this view.
     * The default is one.
     * See {@link android.widget.GridLayout.Spec}.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:layout_columnSpan
     */
    public static final int GridLayout_Layout_layout_columnSpan=4;
    /**
     * <p>
     * @attr description
     * The relative proportion of vertical space that should be allocated to this view
     * during excess space distribution.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:layout_rowWeight
     */
    public static final int GridLayout_Layout_layout_rowWeight=5;
    /**
     * <p>
     * @attr description
     * The relative proportion of horizontal space that should be allocated to this view
     * during excess space distribution.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:layout_columnWeight
     */
    public static final int GridLayout_Layout_layout_columnWeight=6;
    /**
     * Attributes that can be used with a GridView.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #GridView_gravity android:gravity}</code></td><td>Specifies how an object should position its content, on both the X and Y axes,
     * within its own bounds.</td></tr>
     * <tr><td><code>{@link #GridView_horizontalSpacing android:horizontalSpacing}</code></td><td>Defines the default horizontal spacing between columns.</td></tr>
     * <tr><td><code>{@link #GridView_verticalSpacing android:verticalSpacing}</code></td><td>Defines the default vertical spacing between rows.</td></tr>
     * <tr><td><code>{@link #GridView_stretchMode android:stretchMode}</code></td><td>Defines how columns should stretch to fill the available empty space, if any.</td></tr>
     * <tr><td><code>{@link #GridView_columnWidth android:columnWidth}</code></td><td>Specifies the fixed width for each column.</td></tr>
     * <tr><td><code>{@link #GridView_numColumns android:numColumns}</code></td><td>Defines how many columns to show.</td></tr>
     * </table>
     * @see #GridView_gravity
     * @see #GridView_horizontalSpacing
     * @see #GridView_verticalSpacing
     * @see #GridView_stretchMode
     * @see #GridView_columnWidth
     * @see #GridView_numColumns
     */
    public static final int[] GridView={
      0x010100af, 0x01010114, 0x01010115, 0x01010116, 
      0x01010117, 0x01010118
    };
    /**
     * <p>
     * @attr description
     * Specifies the gravity within each cell.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
     * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
     * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
     * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
     * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the horizontal gravity: a left gravity will clip the right
     * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
     * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the vertical gravity: a top gravity will clip the bottom
     * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
     * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
     * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
     * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
     * </table>
     *
     * @attr name android:gravity
     */
    public static final int GridView_gravity=0;
    /**
     * <p>
     * @attr description
     * Defines the default horizontal spacing between columns.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:horizontalSpacing
     */
    public static final int GridView_horizontalSpacing=1;
    /**
     * <p>
     * @attr description
     * Defines the default vertical spacing between rows.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:verticalSpacing
     */
    public static final int GridView_verticalSpacing=2;
    /**
     * <p>
     * @attr description
     * Defines how columns should stretch to fill the available empty space, if any.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>columnWidth</td><td>2</td><td>Each column is stretched equally.</td></tr>
     * <tr><td>none</td><td>0</td><td>Stretching is disabled.</td></tr>
     * <tr><td>spacingWidth</td><td>1</td><td>The spacing between each column is stretched.</td></tr>
     * <tr><td>spacingWidthUniform</td><td>3</td><td>The spacing between each column is uniformly stretched..</td></tr>
     * </table>
     *
     * @attr name android:stretchMode
     */
    public static final int GridView_stretchMode=3;
    /**
     * <p>
     * @attr description
     * Specifies the fixed width for each column.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:columnWidth
     */
    public static final int GridView_columnWidth=4;
    /**
     * <p>
     * @attr description
     * Defines how many columns to show.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>auto_fit</td><td>ffffffff</td><td>Display as many columns as possible to fill the available space.</td></tr>
     * </table>
     *
     * @attr name android:numColumns
     */
    public static final int GridView_numColumns=5;
    /**
     * Attributes that can be used with a HorizontalScrollView.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #HorizontalScrollView_fillViewport android:fillViewport}</code></td><td>Defines whether the scrollview should stretch its content to fill the viewport.</td></tr>
     * </table>
     * @see #HorizontalScrollView_fillViewport
     */
    public static final int[] HorizontalScrollView={
      0x0101017a
    };
    /**
     * <p>
     * @attr description
     * Defines whether the scrollview should stretch its content to fill the viewport.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:fillViewport
     */
    public static final int HorizontalScrollView_fillViewport=0;
    /**
     * Use <code>host-apdu-service</code> as the root tag of the XML resource that
     * describes an {@link android.nfc.cardemulation.HostApduService} service, which
     * is referenced from its {@link android.nfc.cardemulation.HostApduService#SERVICE_META_DATA}
     * entry.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #HostApduService_description android:description}</code></td><td>Descriptive text for the associated data.</td></tr>
     * <tr><td><code>{@link #HostApduService_settingsActivity android:settingsActivity}</code></td><td>Fully qualified class name of an activity that allows the user to modify
     * the settings for this service.</td></tr>
     * <tr><td><code>{@link #HostApduService_requireDeviceUnlock android:requireDeviceUnlock}</code></td><td>Whether the device must be unlocked before routing data to this service.</td></tr>
     * <tr><td><code>{@link #HostApduService_apduServiceBanner android:apduServiceBanner}</code></td><td>A drawable that can be rendered in Android's system UI for representing
     * the service.</td></tr>
     * <tr><td><code>{@link #HostApduService_requireDeviceScreenOn android:requireDeviceScreenOn}</code></td><td>Whether the device must be screen on before routing data to this service.</td></tr>
     * </table>
     * @see #HostApduService_description
     * @see #HostApduService_settingsActivity
     * @see #HostApduService_requireDeviceUnlock
     * @see #HostApduService_apduServiceBanner
     * @see #HostApduService_requireDeviceScreenOn
     */
    public static final int[] HostApduService={
      0x01010020, 0x01010225, 0x010103ec, 0x010103ed, 
      0x0101061d
    };
    /**
     * <p>
     * @attr description
     * Short description of the functionality the service implements. This attribute
     * is mandatory.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:description
     */
    public static final int HostApduService_description=0;
    /**
     * <p>
     * @attr description
     * Component name of an activity that allows the user to modify
     * the settings for this service.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:settingsActivity
     */
    public static final int HostApduService_settingsActivity=1;
    /**
     * <p>
     * @attr description
     * Whether the device must be unlocked before routing data to this service.
     * The default is false.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:requireDeviceUnlock
     */
    public static final int HostApduService_requireDeviceUnlock=2;
    /**
     * <p>
     * @attr description
     * A drawable that can be rendered in Android's system UI for representing
     * the service.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:apduServiceBanner
     */
    public static final int HostApduService_apduServiceBanner=3;
    /**
     * <p>
     * @attr description
     * Whether the device must be screen on before routing data to this service.
     * The default is true.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:requireDeviceScreenOn
     */
    public static final int HostApduService_requireDeviceScreenOn=4;
    /**
     * Use <code>host-nfcf-service</code> as the root tag of the XML resource that
     * describes an {@link android.nfc.cardemulation.HostNfcFService} service, which
     * is referenced from its {@link android.nfc.cardemulation.HostNfcFService#SERVICE_META_DATA}
     * entry.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #HostNfcFService_description android:description}</code></td><td>Descriptive text for the associated data.</td></tr>
     * </table>
     * @see #HostNfcFService_description
     */
    public static final int[] HostNfcFService={
      0x01010020
    };
    /**
     * <p>
     * @attr description
     * Short description of the functionality the service implements. This attribute
     * is mandatory.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:description
     */
    public static final int HostNfcFService_description=0;
    /**
     * Attributes that can be used with a Icon.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Icon_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
     * associated item.</td></tr>
     * <tr><td><code>{@link #Icon_mimeType android:mimeType}</code></td><td>Specify a MIME type that is handled, as per
     * {@link android.content.IntentFilter#addDataType
     * IntentFilter.addDataType()}.</td></tr>
     * </table>
     * @see #Icon_icon
     * @see #Icon_mimeType
     */
    public static final int[] Icon={
      0x01010002, 0x01010026
    };
    /**
     * <p>
     * @attr description
     * A Drawable resource providing a graphical representation of its
     * associated item.  Use with the
     * application tag (to supply a default icon for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific icon for that component).  It may also be
     * used with the intent-filter tag to supply an icon to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given icon will be used to display to the user a graphical
     * representation of its associated component; for example, as the icon
     * for main activity that is displayed in the launcher.  This must be
     * a reference to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:icon
     */
    public static final int Icon_icon=0;
    /**
     * <p>
     * @attr description
     * Specify a MIME type that is handled, as per
     * {@link android.content.IntentFilter#addDataType
     * IntentFilter.addDataType()}.
     * <p><em>Note: MIME type matching in the Android framework is
     * case-sensitive, unlike formal RFC MIME types.  As a result,
     * MIME types here should always use lower case letters.</em></p>
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:mimeType
     */
    public static final int Icon_mimeType=1;
    /**
     * Attributes that can be used with a IconDefault.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #IconDefault_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
     * associated item.</td></tr>
     * </table>
     * @see #IconDefault_icon
     */
    public static final int[] IconDefault={
      0x01010002
    };
    /**
     * <p>
     * @attr description
     * A Drawable resource providing a graphical representation of its
     * associated item.  Use with the
     * application tag (to supply a default icon for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific icon for that component).  It may also be
     * used with the intent-filter tag to supply an icon to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given icon will be used to display to the user a graphical
     * representation of its associated component; for example, as the icon
     * for main activity that is displayed in the launcher.  This must be
     * a reference to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:icon
     */
    public static final int IconDefault_icon=0;
    /**
     * Attributes that can be used with a IconMenuView.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #IconMenuView_rowHeight android:rowHeight}</code></td><td>Defines the height of each row.</td></tr>
     * <tr><td><code>{@link #IconMenuView_maxRows android:maxRows}</code></td><td>Defines the maximum number of rows displayed.</td></tr>
     * <tr><td><code>{@link #IconMenuView_maxItemsPerRow android:maxItemsPerRow}</code></td><td>Defines the maximum number of items per row.</td></tr>
     * <tr><td><code>{@link #IconMenuView_moreIcon android:moreIcon}</code></td><td>'More' icon.</td></tr>
     * </table>
     * @see #IconMenuView_rowHeight
     * @see #IconMenuView_maxRows
     * @see #IconMenuView_maxItemsPerRow
     * @see #IconMenuView_moreIcon
     */
    public static final int[] IconMenuView={
      0x01010132, 0x01010133, 0x01010134, 0x01010135, 
      0x0112008b
    };
    /**
     * <p>
     * @attr description
     * Defines the height of each row.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:rowHeight
     */
    public static final int IconMenuView_rowHeight=0;
    /**
     * <p>
     * @attr description
     * Defines the maximum number of rows displayed.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:maxRows
     */
    public static final int IconMenuView_maxRows=1;
    /**
     * <p>
     * @attr description
     * Defines the maximum number of items per row.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:maxItemsPerRow
     */
    public static final int IconMenuView_maxItemsPerRow=2;
    /**
     * <p>
     * @attr description
     * 'More' icon.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:moreIcon
     */
    public static final int IconMenuView_moreIcon=3;
    public static final int[] ImageSwitcher={
    };
    /**
     * Attributes that can be used with a ImageView.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ImageView_src android:src}</code></td><td>Sets a drawable as the content of this ImageView.</td></tr>
     * <tr><td><code>{@link #ImageView_scaleType android:scaleType}</code></td><td>Controls how the image should be resized or moved to match the size
     * of this ImageView.</td></tr>
     * <tr><td><code>{@link #ImageView_adjustViewBounds android:adjustViewBounds}</code></td><td>Set this to true if you want the ImageView to adjust its bounds
     * to preserve the aspect ratio of its drawable.</td></tr>
     * <tr><td><code>{@link #ImageView_maxWidth android:maxWidth}</code></td><td>An optional argument to supply a maximum width for this view.</td></tr>
     * <tr><td><code>{@link #ImageView_maxHeight android:maxHeight}</code></td><td>An optional argument to supply a maximum height for this view.</td></tr>
     * <tr><td><code>{@link #ImageView_tint android:tint}</code></td><td>The tinting color for the image.</td></tr>
     * <tr><td><code>{@link #ImageView_baselineAlignBottom android:baselineAlignBottom}</code></td><td>If true, the image view will be baseline aligned with based on its
     * bottom edge.</td></tr>
     * <tr><td><code>{@link #ImageView_cropToPadding android:cropToPadding}</code></td><td>If true, the image will be cropped to fit within its padding.</td></tr>
     * <tr><td><code>{@link #ImageView_baseline android:baseline}</code></td><td>The offset of the baseline within this view.</td></tr>
     * <tr><td><code>{@link #ImageView_tintMode android:tintMode}</code></td><td>When a tint color is set, specifies its Porter-Duff blending mode.</td></tr>
     * </table>
     * @see #ImageView_src
     * @see #ImageView_scaleType
     * @see #ImageView_adjustViewBounds
     * @see #ImageView_maxWidth
     * @see #ImageView_maxHeight
     * @see #ImageView_tint
     * @see #ImageView_baselineAlignBottom
     * @see #ImageView_cropToPadding
     * @see #ImageView_baseline
     * @see #ImageView_tintMode
     */
    public static final int[] ImageView={
      0x01010119, 0x0101011d, 0x0101011e, 0x0101011f, 
      0x01010120, 0x01010121, 0x01010122, 0x01010123, 
      0x0101031c, 0x010103fb, 0x0112003d
    };
    /**
     * <p>
     * @attr description
     * Sets a drawable as the content of this ImageView.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:src
     */
    public static final int ImageView_src=0;
    /**
     * <p>
     * @attr description
     * Controls how the image should be resized or moved to match the size
     * of this ImageView.  See {@link android.widget.ImageView.ScaleType}
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>center</td><td>5</td><td>Center the image in the view, but perform no scaling.</td></tr>
     * <tr><td>centerCrop</td><td>6</td><td>Scale the image uniformly (maintain the image's aspect ratio) so both dimensions
     * (width and height) of the image will be equal to or larger than the corresponding
     * dimension of the view (minus padding). The image is then centered in the view.</td></tr>
     * <tr><td>centerInside</td><td>7</td><td>Scale the image uniformly (maintain the image's aspect ratio) so that both
     * dimensions (width and height) of the image will be equal to or less than the
     * corresponding dimension of the view (minus padding). The image is then centered in
     * the view.</td></tr>
     * <tr><td>fitCenter</td><td>3</td><td>Scale the image using {@link android.graphics.Matrix.ScaleToFit#CENTER}.</td></tr>
     * <tr><td>fitEnd</td><td>4</td><td>Scale the image using {@link android.graphics.Matrix.ScaleToFit#END}.</td></tr>
     * <tr><td>fitStart</td><td>2</td><td>Scale the image using {@link android.graphics.Matrix.ScaleToFit#START}.</td></tr>
     * <tr><td>fitXY</td><td>1</td><td>Scale the image using {@link android.graphics.Matrix.ScaleToFit#FILL}.</td></tr>
     * <tr><td>matrix</td><td>0</td><td>Scale using the image matrix when drawing. See
     * {@link android.widget.ImageView#setImageMatrix(Matrix)}.</td></tr>
     * </table>
     *
     * @attr name android:scaleType
     */
    public static final int ImageView_scaleType=1;
    /**
     * <p>
     * @attr description
     * Set this to true if you want the ImageView to adjust its bounds
     * to preserve the aspect ratio of its drawable.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:adjustViewBounds
     */
    public static final int ImageView_adjustViewBounds=2;
    /**
     * <p>
     * @attr description
     * An optional argument to supply a maximum width for this view.
     * See {see android.widget.ImageView#setMaxWidth} for details.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:maxWidth
     */
    public static final int ImageView_maxWidth=3;
    /**
     * <p>
     * @attr description
     * An optional argument to supply a maximum height for this view.
     * See {see android.widget.ImageView#setMaxHeight} for details.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:maxHeight
     */
    public static final int ImageView_maxHeight=4;
    /**
     * <p>
     * @attr description
     * The tinting color for the image. By default, the tint will blend using SRC_ATOP mode.
     * Please note that for compatibility reasons, this is NOT consistent with the default
     * SRC_IN tint mode used by {@link android.widget.ImageView#setImageTintList} and by
     * similar tint attributes on other views.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:tint
     */
    public static final int ImageView_tint=5;
    /**
     * <p>
     * @attr description
     * If true, the image view will be baseline aligned with based on its
     * bottom edge.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:baselineAlignBottom
     */
    public static final int ImageView_baselineAlignBottom=6;
    /**
     * <p>
     * @attr description
     * If true, the image will be cropped to fit within its padding.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:cropToPadding
     */
    public static final int ImageView_cropToPadding=7;
    /**
     * <p>
     * @attr description
     * The offset of the baseline within this view. See {see android.view.View#getBaseline}
     * for details
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:baseline
     */
    public static final int ImageView_baseline=8;
    /**
     * <p>
     * @attr description
     * Blending mode used to apply the image tint.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     *
     * @attr name android:tintMode
     */
    public static final int ImageView_tintMode=9;
    /**
     * Attributes that can be assigned to an &lt;include&gt; tag.
     * @hide
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Include_id android:id}</code></td><td>Supply an identifier name for this view, to later retrieve it
     * with {@link android.view.View#findViewById View.findViewById()} or
     * {@link android.app.Activity#findViewById Activity.findViewById()}.</td></tr>
     * <tr><td><code>{@link #Include_visibility android:visibility}</code></td><td>Controls the initial visibility of the view.</td></tr>
     * </table>
     * @see #Include_id
     * @see #Include_visibility
     */
    public static final int[] Include={
      0x010100d0, 0x010100dc
    };
    /**
     * <p>
     * @attr description
     * Supply an identifier name for this view, to later retrieve it
     * with {@link android.view.View#findViewById View.findViewById()} or
     * {@link android.app.Activity#findViewById Activity.findViewById()}.
     * This must be a
     * resource reference; typically you set this using the
     * <code>@+</code> syntax to create a new ID resources.
     * For example: <code>android:id="@+id/my_id"</code> which
     * allows you to later retrieve the view
     * with <code>findViewById(R.id.my_id)</code>.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:id
     */
    public static final int Include_id=0;
    /**
     * <p>
     * @attr description
     * Controls the initial visibility of the view.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>gone</td><td>2</td><td>Completely hidden, as if the view had not been added.</td></tr>
     * <tr><td>invisible</td><td>1</td><td>Not displayed, but taken into account during layout (space is left for it).</td></tr>
     * <tr><td>visible</td><td>0</td><td>Visible on screen; the default value.</td></tr>
     * </table>
     *
     * @attr name android:visibility
     */
    public static final int Include_visibility=1;
    public static final int[] InputExtras={
    };
    /**
     * Use <code>input-method</code> as the root tag of the XML resource that
     * describes an
     * {@link android.view.inputmethod.InputMethod} service, which is
     * referenced from its
     * {@link android.view.inputmethod.InputMethod#SERVICE_META_DATA}
     * meta-data entry.  Described here are the attributes that can be
     * included in that tag.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #InputMethod_configChanges android:configChanges}</code></td><td>Specify one or more configuration changes that the activity will
     * handle itself.</td></tr>
     * <tr><td><code>{@link #InputMethod_isDefault android:isDefault}</code></td><td>Set to true in all of the configurations for which this input
     * method should be considered an option as the default.</td></tr>
     * <tr><td><code>{@link #InputMethod_settingsActivity android:settingsActivity}</code></td><td>Fully qualified class name of an activity that allows the user to modify
     * the settings for this service.</td></tr>
     * <tr><td><code>{@link #InputMethod_supportsSwitchingToNextInputMethod android:supportsSwitchingToNextInputMethod}</code></td><td>Set to true if this input method supports ways to switch to
     * a next input method (for example, a globe key.).</td></tr>
     * <tr><td><code>{@link #InputMethod_isVrOnly android:isVrOnly}</code></td><td>Specifies if an IME can only be used while a device is in VR mode or on a dedicated
     * device</td></tr>
     * <tr><td><code>{@link #InputMethod_supportsInlineSuggestions android:supportsInlineSuggestions}</code></td><td>Specifies whether the AutofillService supports inline suggestions</td></tr>
     * <tr><td><code>{@link #InputMethod_suppressesSpellChecker android:suppressesSpellChecker}</code></td><td>Specifies whether the IME suppresses system spell checker.</td></tr>
     * <tr><td><code>{@link #InputMethod_showInInputMethodPicker android:showInInputMethodPicker}</code></td><td>Specifies whether the IME wants to be shown in the Input Method picker.</td></tr>
     * </table>
     * @see #InputMethod_configChanges
     * @see #InputMethod_isDefault
     * @see #InputMethod_settingsActivity
     * @see #InputMethod_supportsSwitchingToNextInputMethod
     * @see #InputMethod_isVrOnly
     * @see #InputMethod_supportsInlineSuggestions
     * @see #InputMethod_suppressesSpellChecker
     * @see #InputMethod_showInInputMethodPicker
     */
    public static final int[] InputMethod={
      0x0101001f, 0x01010221, 0x01010225, 0x010103eb, 
      0x01010578, 0x0101060d, 0x01010643, 0x01010648, 
      0x01120002
    };
    /**
     * <p>
     * @attr description
     * Specify one or more configuration changes that the IME will handle itself. If not
     * specified, the IME will be restarted if any of these configuration changes happen in
     * the system.  Otherwise, the IME will remain running and its
     * {@link android.inputmethodservice.InputMethodService#onConfigurationChanged}
     * method is called with the new configuration.
     * <p>Note that all of these configuration changes can impact the
     * resource values seen by the application, so you will generally need
     * to re-retrieve all resources (including view layouts, drawables, etc)
     * to correctly handle any configuration change.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>colorMode</td><td>4000</td><td>The color mode of the screen has changed (color gamut or dynamic range).</td></tr>
     * <tr><td>density</td><td>1000</td><td>The display density has changed. This might be caused by the user
     * specifying a different display scale, or it might be caused by a
     * different display being activated.</td></tr>
     * <tr><td>fontScale</td><td>40000000</td><td>The font scaling factor has changed, that is the user has
     * selected a new global font size.</td></tr>
     * <tr><td>fontWeightAdjustment</td><td>10000000</td><td>The font weight adjustment value has changed. Used to reflect the user increasing font
     * weight.</td></tr>
     * <tr><td>keyboard</td><td>10</td><td>The keyboard type has changed, for example the user has plugged
     * in an external keyboard.</td></tr>
     * <tr><td>keyboardHidden</td><td>20</td><td>The keyboard or navigation accessibility has changed, for example
     * the user has slid the keyboard out to expose it.  Note that
     * despite its name, this applied to any accessibility: keyboard
     * or navigation.</td></tr>
     * <tr><td>layoutDirection</td><td>2000</td><td>The layout direction has changed. For example going from LTR to RTL.</td></tr>
     * <tr><td>locale</td><td>4</td><td>The locale has changed, that is the user has selected a new
     * language that text should be displayed in.</td></tr>
     * <tr><td>mcc</td><td>1</td><td>The IMSI MCC has changed, that is a SIM has been detected and
     * updated the Mobile Country Code. By default from Android O, we
     * don't recreate the activity even the app doesn't specify mcc in
     * configChanges. If the app wants to recreate the activity, specify
     * mcc in recreateOnConfigChanges.</td></tr>
     * <tr><td>mnc</td><td>2</td><td>The IMSI MNC has changed, that is a SIM has been detected and
     * updated the Mobile Network Code. By default from Android O, we
     * don't recreate the activity even the app doesn't specify mnc in
     * configChanges. If the app wants to recreate the acvitity, specify
     * mnc in recreateOnConfigChanges.</td></tr>
     * <tr><td>navigation</td><td>40</td><td>The navigation type has changed.  Should never normally happen.</td></tr>
     * <tr><td>orientation</td><td>80</td><td>The screen orientation has changed, that is the user has
     * rotated the device.</td></tr>
     * <tr><td>screenLayout</td><td>100</td><td>The screen layout has changed.  This might be caused by a
     * different display being activated.</td></tr>
     * <tr><td>screenSize</td><td>400</td><td>The current available screen size has changed.  If applications don't
     * target at least {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2}
     * then the activity will always handle this itself (the change
     * will not result in a restart).  This represents a change in the
     * currently available size, so will change when the user switches
     * between landscape and portrait.</td></tr>
     * <tr><td>smallestScreenSize</td><td>800</td><td>The physical screen size has changed.  If applications don't
     * target at least {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2}
     * then the activity will always handle this itself (the change
     * will not result in a restart).  This represents a change in size
     * regardless of orientation, so will only change when the actual
     * physical screen size has changed such as switching to an external
     * display.</td></tr>
     * <tr><td>touchscreen</td><td>8</td><td>The touchscreen has changed.  Should never normally happen.</td></tr>
     * <tr><td>uiMode</td><td>200</td><td>The global user interface mode has changed.  For example,
     * going in or out of car mode, night mode changing, etc.</td></tr>
     * </table>
     *
     * @attr name android:configChanges
     */
    public static final int InputMethod_configChanges=0;
    /**
     * <p>
     * @attr description
     * Set to true in all of the configurations for which this input
     * method should be considered an option as the default.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:isDefault
     */
    public static final int InputMethod_isDefault=1;
    /**
     * <p>
     * @attr description
     * Component name of an activity that allows the user to modify
     * the settings for this service.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:settingsActivity
     */
    public static final int InputMethod_settingsActivity=2;
    /**
     * <p>
     * @attr description
     * Set to true if this input method supports ways to switch to
     * a next input method (for example, a globe key.). When this is true and
     * InputMethodManager#shouldOfferSwitchingToNextInputMethod() returns true,
     * the IME has to offer ways to invoke InputMethodManager#switchToNextInputMethod()
     * accordingly.
     * <p> Note that the system determines the most appropriate next input method
     * and subtype in order to provide the consistent user experience in switching
     * between IMEs and subtypes.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:supportsSwitchingToNextInputMethod
     */
    public static final int InputMethod_supportsSwitchingToNextInputMethod=3;
    /**
     * <p>
     * @attr description
     * Specifies if an IME can only be used while a device is in VR mode or on a dedicated
     * device
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:isVrOnly
     */
    public static final int InputMethod_isVrOnly=4;
    /**
     * <p>
     * @attr description
     * Specifies whether the IME supports showing inline suggestions.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:supportsInlineSuggestions
     */
    public static final int InputMethod_supportsInlineSuggestions=5;
    /**
     * <p>
     * @attr description
     * Specifies whether the IME suppresses system spell checker.
     * The default value is false. If an IME sets this attribute to true,
     * the system spell checker will be disabled while the IME has an
     * active input session.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:suppressesSpellChecker
     */
    public static final int InputMethod_suppressesSpellChecker=6;
    /**
     * <p>
     * @attr description
     * Specifies whether the IME wants to be shown in the Input Method picker. Defaults to
     * true. Set this to false if the IME is intended to be accessed programmatically.
     * <p>
     * Note: This functions as a hint to the system, which may choose to ignore this
     * preference in certain situations or in future releases.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:showInInputMethodPicker
     */
    public static final int InputMethod_showInInputMethodPicker=7;
    /**
     * Attributes that can be used with a InputMethodService.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #InputMethodService_imeFullscreenBackground android:imeFullscreenBackground}</code></td><td>Background to use for entire input method when it is being
     * shown in fullscreen mode with the extract view, to ensure
     * that it completely covers the application.</td></tr>
     * <tr><td><code>{@link #InputMethodService_imeExtractEnterAnimation android:imeExtractEnterAnimation}</code></td><td>Animation to use when showing the fullscreen extract UI after
     * it had previously been hidden.</td></tr>
     * <tr><td><code>{@link #InputMethodService_imeExtractExitAnimation android:imeExtractExitAnimation}</code></td><td>Animation to use when hiding the fullscreen extract UI after
     * it had previously been shown.</td></tr>
     * </table>
     * @see #InputMethodService_imeFullscreenBackground
     * @see #InputMethodService_imeExtractEnterAnimation
     * @see #InputMethodService_imeExtractExitAnimation
     */
    public static final int[] InputMethodService={
      0x0101022c, 0x01010268, 0x01010269
    };
    /**
     * <p>
     * @attr description
     * Background to use for entire input method when it is being
     * shown in fullscreen mode with the extract view, to ensure
     * that it completely covers the application.  This allows,
     * for example, the candidate view to be hidden
     * while in fullscreen mode without having the application show through
     * behind it.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:imeFullscreenBackground
     */
    public static final int InputMethodService_imeFullscreenBackground=0;
    /**
     * <p>
     * @attr description
     * Animation to use when showing the fullscreen extract UI after
     * it had previously been hidden.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:imeExtractEnterAnimation
     */
    public static final int InputMethodService_imeExtractEnterAnimation=1;
    /**
     * <p>
     * @attr description
     * Animation to use when hiding the fullscreen extract UI after
     * it had previously been shown.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:imeExtractExitAnimation
     */
    public static final int InputMethodService_imeExtractExitAnimation=2;
    /**
     * This is the subtype of InputMethod. Subtype can describe locales (for example, en_US and
     * fr_FR) and modes (for example, voice and keyboard), and is used for IME switch. This
     * subtype allows the system to call the specified subtype of the IME directly.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #InputMethod_Subtype_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
     * <tr><td><code>{@link #InputMethod_Subtype_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
     * associated item.</td></tr>
     * <tr><td><code>{@link #InputMethod_Subtype_imeSubtypeLocale android:imeSubtypeLocale}</code></td><td>The locale of the subtype.</td></tr>
     * <tr><td><code>{@link #InputMethod_Subtype_imeSubtypeMode android:imeSubtypeMode}</code></td><td>The mode of the subtype.</td></tr>
     * <tr><td><code>{@link #InputMethod_Subtype_imeSubtypeExtraValue android:imeSubtypeExtraValue}</code></td><td>The extra value of the subtype.</td></tr>
     * <tr><td><code>{@link #InputMethod_Subtype_isAuxiliary android:isAuxiliary}</code></td><td>Set true if the subtype is auxiliary.</td></tr>
     * <tr><td><code>{@link #InputMethod_Subtype_overridesImplicitlyEnabledSubtype android:overridesImplicitlyEnabledSubtype}</code></td><td>Set true when this subtype should be selected by default if no other subtypes are
     * selected explicitly.</td></tr>
     * <tr><td><code>{@link #InputMethod_Subtype_subtypeId android:subtypeId}</code></td><td>The unique id for the subtype.</td></tr>
     * <tr><td><code>{@link #InputMethod_Subtype_isAsciiCapable android:isAsciiCapable}</code></td><td>Set to {@code true} if this subtype is ASCII capable.</td></tr>
     * <tr><td><code>{@link #InputMethod_Subtype_languageTag android:languageTag}</code></td><td>The BCP-47 Language Tag of the subtype.</td></tr>
     * </table>
     * @see #InputMethod_Subtype_label
     * @see #InputMethod_Subtype_icon
     * @see #InputMethod_Subtype_imeSubtypeLocale
     * @see #InputMethod_Subtype_imeSubtypeMode
     * @see #InputMethod_Subtype_imeSubtypeExtraValue
     * @see #InputMethod_Subtype_isAuxiliary
     * @see #InputMethod_Subtype_overridesImplicitlyEnabledSubtype
     * @see #InputMethod_Subtype_subtypeId
     * @see #InputMethod_Subtype_isAsciiCapable
     * @see #InputMethod_Subtype_languageTag
     */
    public static final int[] InputMethod_Subtype={
      0x01010001, 0x01010002, 0x010102ec, 0x010102ed, 
      0x010102ee, 0x0101037f, 0x010103a2, 0x010103c1, 
      0x010103e9, 0x01010508
    };
    /**
     * <p>
     * @attr description
     * The name of the subtype.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:label
     */
    public static final int InputMethod_Subtype_label=0;
    /**
     * <p>
     * @attr description
     * The icon of the subtype.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:icon
     */
    public static final int InputMethod_Subtype_icon=1;
    /**
     * <p>
     * @attr description
     * The locale of the subtype. This string should be a locale (for example en_US and fr_FR)
     * and will be passed to the IME when the framework calls the IME
     * with the subtype. This is also used by the framework to know the supported locales
     * of the IME.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:imeSubtypeLocale
     */
    public static final int InputMethod_Subtype_imeSubtypeLocale=2;
    /**
     * <p>
     * @attr description
     * The mode of the subtype. This string can be a mode (for example, voice and keyboard)
     * and this string will be passed to the IME when the framework calls the IME with the
     * subtype.  {@link android.view.inputmethod.InputMethodSubtype#getLocale()} returns the
     * value specified in this attribute.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:imeSubtypeMode
     */
    public static final int InputMethod_Subtype_imeSubtypeMode=3;
    /**
     * <p>
     * @attr description
     * The extra value of the subtype. This string can be any string and will be passed to
     * the IME when the framework calls the IME with the subtype.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:imeSubtypeExtraValue
     */
    public static final int InputMethod_Subtype_imeSubtypeExtraValue=4;
    /**
     * <p>
     * @attr description
     * Set true if the subtype is auxiliary.  An auxiliary subtype won't be shown in the
     * input method selection list in the settings app.
     * InputMethodManager#switchToLastInputMethod will ignore auxiliary subtypes when it
     * chooses a target subtype.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:isAuxiliary
     */
    public static final int InputMethod_Subtype_isAuxiliary=5;
    /**
     * <p>
     * @attr description
     * Set true when this subtype should be selected by default if no other subtypes are
     * selected explicitly. Note that a subtype with this parameter being true will
     * not be shown in the subtypes list.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:overridesImplicitlyEnabledSubtype
     */
    public static final int InputMethod_Subtype_overridesImplicitlyEnabledSubtype=6;
    /**
     * <p>
     * @attr description
     * The unique id for the subtype. The input method framework keeps track of enabled
     * subtypes by ID. When the IME package gets upgraded, enabled IDs will stay enabled even
     * if other attributes are different. If the ID is unspecified (by calling the other
     * constructor or 0. Arrays.hashCode(new Object[] {locale, mode, extraValue,
     * isAuxiliary, overridesImplicitlyEnabledSubtype}) will be used instead.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:subtypeId
     */
    public static final int InputMethod_Subtype_subtypeId=7;
    /**
     * <p>
     * @attr description
     * Set to {@code true} if this subtype is ASCII capable. If the subtype is ASCII
     * capable, it should guarantee that the user can input ASCII characters with
     * this subtype. This is important because many password fields only allow
     * ASCII-characters.
     * <p>Note: In order to avoid some known system issues on
     * {@link android.os.Build.VERSION_CODES#P} and prior OSes, you may want to include
     * {@code "AsciiCapable"} in
     * {@link android.R.styleable#InputMethod_Subtype_imeSubtypeExtraValue} when you specify
     * {@code true} to this attribute.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:isAsciiCapable
     */
    public static final int InputMethod_Subtype_isAsciiCapable=8;
    /**
     * <p>
     * @attr description
     * The BCP-47 Language Tag of the subtype.  This replaces
     * {@link android.R.styleable#InputMethod_Subtype_imeSubtypeLocale}.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:languageTag
     */
    public static final int InputMethod_Subtype_languageTag=9;
    /**
     * Drawable used to wrap and inset another drawable.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #InsetDrawable_visible android:visible}</code></td><td>Provides initial visibility state of the drawable; the default
     * value is false.</td></tr>
     * <tr><td><code>{@link #InsetDrawable_drawable android:drawable}</code></td><td>Reference to a drawable resource to use for the frame.</td></tr>
     * <tr><td><code>{@link #InsetDrawable_insetLeft android:insetLeft}</code></td><td></td></tr>
     * <tr><td><code>{@link #InsetDrawable_insetRight android:insetRight}</code></td><td></td></tr>
     * <tr><td><code>{@link #InsetDrawable_insetTop android:insetTop}</code></td><td></td></tr>
     * <tr><td><code>{@link #InsetDrawable_insetBottom android:insetBottom}</code></td><td></td></tr>
     * <tr><td><code>{@link #InsetDrawable_inset android:inset}</code></td><td></td></tr>
     * </table>
     * @see #InsetDrawable_visible
     * @see #InsetDrawable_drawable
     * @see #InsetDrawable_insetLeft
     * @see #InsetDrawable_insetRight
     * @see #InsetDrawable_insetTop
     * @see #InsetDrawable_insetBottom
     * @see #InsetDrawable_inset
     */
    public static final int[] InsetDrawable={
      0x01010194, 0x01010199, 0x010101b7, 0x010101b8, 
      0x010101b9, 0x010101ba, 0x010104b5
    };
    /**
     * <p>
     * @attr description
     * Provides initial visibility state of the drawable; the default
     * value is false.  See
     * {@link android.graphics.drawable.Drawable#setVisible}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:visible
     */
    public static final int InsetDrawable_visible=0;
    /**
     * <p>
     * @attr description
     * Reference to a drawable resource to use for the frame.  If not
     * given, the drawable must be defined by the first child tag.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:drawable
     */
    public static final int InsetDrawable_drawable=1;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#insetLeft}
     * attribute's value can be found in the {@link #InsetDrawable} array.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:insetLeft
     */
    public static final int InsetDrawable_insetLeft=2;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#insetRight}
     * attribute's value can be found in the {@link #InsetDrawable} array.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:insetRight
     */
    public static final int InsetDrawable_insetRight=3;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#insetTop}
     * attribute's value can be found in the {@link #InsetDrawable} array.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:insetTop
     */
    public static final int InsetDrawable_insetTop=4;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#insetBottom}
     * attribute's value can be found in the {@link #InsetDrawable} array.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:insetBottom
     */
    public static final int InsetDrawable_insetBottom=5;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#inset}
     * attribute's value can be found in the {@link #InsetDrawable} array.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:inset
     */
    public static final int InsetDrawable_inset=6;
    /**
     * Declaration of an {@link android.content.Intent} object in XML.  May
     * also include zero or more {@link #IntentCategory <category>} and
     * {@link #Extra <extra>} tags.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Intent_targetPackage android:targetPackage}</code></td><td>The name of the application package that an Instrumentation object
     * will run against.</td></tr>
     * <tr><td><code>{@link #Intent_mimeType android:mimeType}</code></td><td>Specify a MIME type that is handled, as per
     * {@link android.content.IntentFilter#addDataType
     * IntentFilter.addDataType()}.</td></tr>
     * <tr><td><code>{@link #Intent_action android:action}</code></td><td>The action name to assign to the Intent, as per
     * {@link android.content.Intent#setAction Intent.setAction()}.</td></tr>
     * <tr><td><code>{@link #Intent_data android:data}</code></td><td>The data URI to assign to the Intent, as per
     * {@link android.content.Intent#setData Intent.setData()}.</td></tr>
     * <tr><td><code>{@link #Intent_targetClass android:targetClass}</code></td><td>The class part of the ComponentName to assign to the Intent, as per
     * {@link android.content.Intent#setComponent Intent.setComponent()}.</td></tr>
     * <tr><td><code>{@link #Intent_identifier android:identifier}</code></td><td>The identifier to assign to the intent, as per
     * {@link android.content.Intent#setIdentifier Intent.setIdentifier()}.</td></tr>
     * </table>
     * @see #Intent_targetPackage
     * @see #Intent_mimeType
     * @see #Intent_action
     * @see #Intent_data
     * @see #Intent_targetClass
     * @see #Intent_identifier
     */
    public static final int[] Intent={
      0x01010021, 0x01010026, 0x0101002d, 0x0101002e, 
      0x0101002f, 0x01010606
    };
    /**
     * <p>
     * @attr description
     * The package part of the ComponentName to assign to the Intent, as per
     * {@link android.content.Intent#setComponent Intent.setComponent()}.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:targetPackage
     */
    public static final int Intent_targetPackage=0;
    /**
     * <p>
     * @attr description
     * The MIME type name to assign to the Intent, as per
     * {@link android.content.Intent#setType Intent.setType()}.
     * <p><em>Note: MIME type matching in the Android framework is
     * case-sensitive, unlike formal RFC MIME types.  As a result,
     * MIME types here should always use lower case letters.</em></p>
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:mimeType
     */
    public static final int Intent_mimeType=1;
    /**
     * <p>
     * @attr description
     * The action name to assign to the Intent, as per
     * {@link android.content.Intent#setAction Intent.setAction()}.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:action
     */
    public static final int Intent_action=2;
    /**
     * <p>
     * @attr description
     * The data URI to assign to the Intent, as per
     * {@link android.content.Intent#setData Intent.setData()}.
     * <p><em>Note: scheme and host name matching in the Android framework is
     * case-sensitive, unlike the formal RFC.  As a result,
     * URIs here should always be normalized to use lower case letters
     * for these elements (as well as other proper Uri normalization).</em></p>
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:data
     */
    public static final int Intent_data=3;
    /**
     * <p>
     * @attr description
     * The class part of the ComponentName to assign to the Intent, as per
     * {@link android.content.Intent#setComponent Intent.setComponent()}.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:targetClass
     */
    public static final int Intent_targetClass=4;
    /**
     * <p>
     * @attr description
     * The identifier to assign to the intent, as per
     * {@link android.content.Intent#setIdentifier Intent.setIdentifier()}.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:identifier
     */
    public static final int Intent_identifier=5;
    /**
     * A category to add to an Intent, as per
     * {@link android.content.Intent#addCategory Intent.addCategory()}.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #IntentCategory_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * </table>
     * @see #IntentCategory_name
     */
    public static final int[] IntentCategory={
      0x01010003
    };
    /**
     * <p>
     * @attr description
     * Required name of the category.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int IntentCategory_name=0;
    /**
     * {@deprecated Copy this definition into your own application project.}
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Keyboard_keyWidth android:keyWidth}</code></td><td>Default width of a key, in pixels or percentage of display width.</td></tr>
     * <tr><td><code>{@link #Keyboard_keyHeight android:keyHeight}</code></td><td>Default height of a key, in pixels or percentage of display width.</td></tr>
     * <tr><td><code>{@link #Keyboard_horizontalGap android:horizontalGap}</code></td><td>Default horizontal gap between keys.</td></tr>
     * <tr><td><code>{@link #Keyboard_verticalGap android:verticalGap}</code></td><td>Default vertical gap between rows of keys.</td></tr>
     * </table>
     * @see #Keyboard_keyWidth
     * @see #Keyboard_keyHeight
     * @see #Keyboard_horizontalGap
     * @see #Keyboard_verticalGap
     */
    @Deprecated
    public static final int[] Keyboard={
      0x0101023d, 0x0101023e, 0x0101023f, 0x01010240
    };
    /**
     * <p>
     * @attr description
     * Default width of a key, in pixels or percentage of display width.
     * {@deprecated Copy this definition into your own application project.}
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:keyWidth
     */
    @Deprecated
    public static final int Keyboard_keyWidth=0;
    /**
     * <p>
     * @attr description
     * Default height of a key, in pixels or percentage of display width.
     * {@deprecated Copy this definition into your own application project.}
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:keyHeight
     */
    @Deprecated
    public static final int Keyboard_keyHeight=1;
    /**
     * <p>
     * @attr description
     * Default horizontal gap between keys.
     * {@deprecated Copy this definition into your own application project.}
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:horizontalGap
     */
    @Deprecated
    public static final int Keyboard_horizontalGap=2;
    /**
     * <p>
     * @attr description
     * Default vertical gap between rows of keys.
     * {@deprecated Copy this definition into your own application project.}
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:verticalGap
     */
    @Deprecated
    public static final int Keyboard_verticalGap=3;
    /**
     * Use <code>keyboard-layouts</code> as the root tag of the XML resource that
     * describes a collection of keyboard layouts provided by an application.
     * Each keyboard layout is declared by a <code>keyboard-layout</code> tag
     * with these attributes.
     * The XML resource that contains the keyboard layouts must be referenced from its
     * {@link android.hardware.input.InputManager#META_DATA_KEYBOARD_LAYOUTS}
     * meta-data entry used with broadcast receivers for
     * {@link android.hardware.input.InputManager#ACTION_QUERY_KEYBOARD_LAYOUTS}.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #KeyboardLayout_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
     * <tr><td><code>{@link #KeyboardLayout_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * <tr><td><code>{@link #KeyboardLayout_keyboardLayout android:keyboardLayout}</code></td><td>The key character map file resource.</td></tr>
     * </table>
     * @see #KeyboardLayout_label
     * @see #KeyboardLayout_name
     * @see #KeyboardLayout_keyboardLayout
     */
    public static final int[] KeyboardLayout={
      0x01010001, 0x01010003, 0x010103ab, 0x0112007c, 
      0x011200c4, 0x01120104
    };
    /**
     * <p>
     * @attr description
     * The display label of the keyboard layout.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:label
     */
    public static final int KeyboardLayout_label=0;
    /**
     * <p>
     * @attr description
     * The name of the keyboard layout, must be unique in the receiver.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int KeyboardLayout_name=1;
    /**
     * <p>
     * @attr description
     * The key character map file resource.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:keyboardLayout
     */
    public static final int KeyboardLayout_keyboardLayout=2;
    /**
     * {@deprecated Copy this definition into your own application project.}
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #KeyboardView_shadowColor android:shadowColor}</code></td><td>Place a blurred shadow of text underneath the text, drawn with the
     * specified color.</td></tr>
     * <tr><td><code>{@link #KeyboardView_shadowRadius android:shadowRadius}</code></td><td>Blur radius of the text shadow.</td></tr>
     * <tr><td><code>{@link #KeyboardView_keyBackground android:keyBackground}</code></td><td>Image for the key.</td></tr>
     * <tr><td><code>{@link #KeyboardView_keyTextSize android:keyTextSize}</code></td><td>Size of the text for character keys.</td></tr>
     * <tr><td><code>{@link #KeyboardView_labelTextSize android:labelTextSize}</code></td><td>Size of the text for custom keys with some text and no icon.</td></tr>
     * <tr><td><code>{@link #KeyboardView_keyTextColor android:keyTextColor}</code></td><td>Color to use for the label in a key.</td></tr>
     * <tr><td><code>{@link #KeyboardView_keyPreviewLayout android:keyPreviewLayout}</code></td><td>Layout resource for key press feedback.</td></tr>
     * <tr><td><code>{@link #KeyboardView_keyPreviewOffset android:keyPreviewOffset}</code></td><td>Vertical offset of the key press feedback from the key.</td></tr>
     * <tr><td><code>{@link #KeyboardView_keyPreviewHeight android:keyPreviewHeight}</code></td><td>Height of the key press feedback popup.</td></tr>
     * <tr><td><code>{@link #KeyboardView_verticalCorrection android:verticalCorrection}</code></td><td>Amount to offset the touch Y coordinate by, for bias correction.</td></tr>
     * <tr><td><code>{@link #KeyboardView_popupLayout android:popupLayout}</code></td><td>Layout resource for popup keyboards.</td></tr>
     * </table>
     * @see #KeyboardView_shadowColor
     * @see #KeyboardView_shadowRadius
     * @see #KeyboardView_keyBackground
     * @see #KeyboardView_keyTextSize
     * @see #KeyboardView_labelTextSize
     * @see #KeyboardView_keyTextColor
     * @see #KeyboardView_keyPreviewLayout
     * @see #KeyboardView_keyPreviewOffset
     * @see #KeyboardView_keyPreviewHeight
     * @see #KeyboardView_verticalCorrection
     * @see #KeyboardView_popupLayout
     */
    @Deprecated
    public static final int[] KeyboardView={
      0x01010161, 0x01010164, 0x01010233, 0x01010234, 
      0x01010235, 0x01010236, 0x01010237, 0x01010238, 
      0x01010239, 0x0101023a, 0x0101023b, 0x0112006d
    };
    /**
     * <p>
     * @attr description
     * {@deprecated Copy this definition into your own application project.}
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:shadowColor
     */
    @Deprecated
    public static final int KeyboardView_shadowColor=0;
    /**
     * <p>
     * @attr description
     * {@deprecated Copy this definition into your own application project.}
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:shadowRadius
     */
    @Deprecated
    public static final int KeyboardView_shadowRadius=1;
    /**
     * <p>
     * @attr description
     * Image for the key. This image needs to be a StateListDrawable, with the following
     * possible states: normal, pressed, checkable, checkable+pressed, checkable+checked,
     * checkable+checked+pressed.
     * {@deprecated Copy this definition into your own application project.}
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:keyBackground
     */
    @Deprecated
    public static final int KeyboardView_keyBackground=2;
    /**
     * <p>
     * @attr description
     * Size of the text for character keys.
     * {@deprecated Copy this definition into your own application project.}
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:keyTextSize
     */
    @Deprecated
    public static final int KeyboardView_keyTextSize=3;
    /**
     * <p>
     * @attr description
     * Size of the text for custom keys with some text and no icon.
     * {@deprecated Copy this definition into your own application project.}
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:labelTextSize
     */
    @Deprecated
    public static final int KeyboardView_labelTextSize=4;
    /**
     * <p>
     * @attr description
     * Color to use for the label in a key.
     * {@deprecated Copy this definition into your own application project.}
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:keyTextColor
     */
    @Deprecated
    public static final int KeyboardView_keyTextColor=5;
    /**
     * <p>
     * @attr description
     * Layout resource for key press feedback.
     * {@deprecated Copy this definition into your own application project.}
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:keyPreviewLayout
     */
    @Deprecated
    public static final int KeyboardView_keyPreviewLayout=6;
    /**
     * <p>
     * @attr description
     * Vertical offset of the key press feedback from the key.
     * {@deprecated Copy this definition into your own application project.}
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:keyPreviewOffset
     */
    @Deprecated
    public static final int KeyboardView_keyPreviewOffset=7;
    /**
     * <p>
     * @attr description
     * Height of the key press feedback popup.
     * {@deprecated Copy this definition into your own application project.}
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:keyPreviewHeight
     */
    @Deprecated
    public static final int KeyboardView_keyPreviewHeight=8;
    /**
     * <p>
     * @attr description
     * Amount to offset the touch Y coordinate by, for bias correction.
     * {@deprecated Copy this definition into your own application project.}
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:verticalCorrection
     */
    @Deprecated
    public static final int KeyboardView_verticalCorrection=9;
    /**
     * <p>
     * @attr description
     * Layout resource for popup keyboards.
     * {@deprecated Copy this definition into your own application project.}
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:popupLayout
     */
    @Deprecated
    public static final int KeyboardView_popupLayout=10;
    /**
     * {@deprecated Copy this definition into your own application project.}
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #KeyboardViewPreviewState_state_long_pressable android:state_long_pressable}</code></td><td>State for {@link android.inputmethodservice.KeyboardView KeyboardView}
     * key preview background.</td></tr>
     * </table>
     * @see #KeyboardViewPreviewState_state_long_pressable
     */
    @Deprecated
    public static final int[] KeyboardViewPreviewState={
      0x0101023c
    };
    /**
     * <p>
     * @attr description
     * State for {@link android.inputmethodservice.KeyboardView KeyboardView}
     * key preview background.
     * {@deprecated Copy this definition into your own application project.}
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_long_pressable
     */
    @Deprecated
    public static final int KeyboardViewPreviewState_state_long_pressable=0;
    /**
     * {@deprecated Copy this definition into your own application project.}
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Keyboard_Key_codes android:codes}</code></td><td>The unicode value or comma-separated values that this key outputs.</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_popupKeyboard android:popupKeyboard}</code></td><td>The XML keyboard layout of any popup keyboard.</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_popupCharacters android:popupCharacters}</code></td><td>The characters to display in the popup keyboard.</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_keyEdgeFlags android:keyEdgeFlags}</code></td><td>Key edge flags.</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_isModifier android:isModifier}</code></td><td>Whether this is a modifier key such as Alt or Shift.</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_isSticky android:isSticky}</code></td><td>Whether this is a toggle key.</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_isRepeatable android:isRepeatable}</code></td><td>Whether long-pressing on this key will make it repeat.</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_iconPreview android:iconPreview}</code></td><td>The icon to show in the popup preview.</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_keyOutputText android:keyOutputText}</code></td><td>The string of characters to output when this key is pressed.</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_keyLabel android:keyLabel}</code></td><td>The label to display on the key.</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_keyIcon android:keyIcon}</code></td><td>The icon to display on the key instead of the label.</td></tr>
     * <tr><td><code>{@link #Keyboard_Key_keyboardMode android:keyboardMode}</code></td><td>Mode of the keyboard.</td></tr>
     * </table>
     * @see #Keyboard_Key_codes
     * @see #Keyboard_Key_popupKeyboard
     * @see #Keyboard_Key_popupCharacters
     * @see #Keyboard_Key_keyEdgeFlags
     * @see #Keyboard_Key_isModifier
     * @see #Keyboard_Key_isSticky
     * @see #Keyboard_Key_isRepeatable
     * @see #Keyboard_Key_iconPreview
     * @see #Keyboard_Key_keyOutputText
     * @see #Keyboard_Key_keyLabel
     * @see #Keyboard_Key_keyIcon
     * @see #Keyboard_Key_keyboardMode
     */
    @Deprecated
    public static final int[] Keyboard_Key={
      0x01010242, 0x01010243, 0x01010244, 0x01010245, 
      0x01010246, 0x01010247, 0x01010248, 0x01010249, 
      0x0101024a, 0x0101024b, 0x0101024c, 0x0101024d
    };
    /**
     * <p>
     * @attr description
     * The unicode value or comma-separated values that this key outputs.
     * {@deprecated Copy this definition into your own application project.}
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:codes
     */
    @Deprecated
    public static final int Keyboard_Key_codes=0;
    /**
     * <p>
     * @attr description
     * The XML keyboard layout of any popup keyboard.
     * {@deprecated Copy this definition into your own application project.}
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:popupKeyboard
     */
    @Deprecated
    public static final int Keyboard_Key_popupKeyboard=1;
    /**
     * <p>
     * @attr description
     * The characters to display in the popup keyboard.
     * {@deprecated Copy this definition into your own application project.}
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:popupCharacters
     */
    @Deprecated
    public static final int Keyboard_Key_popupCharacters=2;
    /**
     * <p>
     * @attr description
     * Key edge flags.
     * {@deprecated Copy this definition into your own application project.}
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>left</td><td>1</td><td>Key is anchored to the left of the keyboard.
     * {@deprecated Copy this definition into your own application project.}</td></tr>
     * <tr><td>right</td><td>2</td><td>Key is anchored to the right of the keyboard.
     * {@deprecated Copy this definition into your own application project.}</td></tr>
     * </table>
     *
     * @attr name android:keyEdgeFlags
     */
    @Deprecated
    public static final int Keyboard_Key_keyEdgeFlags=3;
    /**
     * <p>
     * @attr description
     * Whether this is a modifier key such as Alt or Shift.
     * {@deprecated Copy this definition into your own application project.}
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:isModifier
     */
    @Deprecated
    public static final int Keyboard_Key_isModifier=4;
    /**
     * <p>
     * @attr description
     * Whether this is a toggle key.
     * {@deprecated Copy this definition into your own application project.}
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:isSticky
     */
    @Deprecated
    public static final int Keyboard_Key_isSticky=5;
    /**
     * <p>
     * @attr description
     * Whether long-pressing on this key will make it repeat.
     * {@deprecated Copy this definition into your own application project.}
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:isRepeatable
     */
    @Deprecated
    public static final int Keyboard_Key_isRepeatable=6;
    /**
     * <p>
     * @attr description
     * The icon to show in the popup preview.
     * {@deprecated Copy this definition into your own application project.}
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:iconPreview
     */
    @Deprecated
    public static final int Keyboard_Key_iconPreview=7;
    /**
     * <p>
     * @attr description
     * The string of characters to output when this key is pressed.
     * {@deprecated Copy this definition into your own application project.}
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:keyOutputText
     */
    @Deprecated
    public static final int Keyboard_Key_keyOutputText=8;
    /**
     * <p>
     * @attr description
     * The label to display on the key.
     * {@deprecated Copy this definition into your own application project.}
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:keyLabel
     */
    @Deprecated
    public static final int Keyboard_Key_keyLabel=9;
    /**
     * <p>
     * @attr description
     * The icon to display on the key instead of the label.
     * {@deprecated Copy this definition into your own application project.}
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:keyIcon
     */
    @Deprecated
    public static final int Keyboard_Key_keyIcon=10;
    /**
     * <p>
     * @attr description
     * Mode of the keyboard. If the mode doesn't match the
     * requested keyboard mode, the key will be skipped.
     * {@deprecated Copy this definition into your own application project.}
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:keyboardMode
     */
    @Deprecated
    public static final int Keyboard_Key_keyboardMode=11;
    /**
     * {@deprecated Copy this definition into your own application project.}
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Keyboard_Row_rowEdgeFlags android:rowEdgeFlags}</code></td><td>Row edge flags.</td></tr>
     * <tr><td><code>{@link #Keyboard_Row_keyboardMode android:keyboardMode}</code></td><td>Mode of the keyboard.</td></tr>
     * </table>
     * @see #Keyboard_Row_rowEdgeFlags
     * @see #Keyboard_Row_keyboardMode
     */
    @Deprecated
    public static final int[] Keyboard_Row={
      0x01010241, 0x0101024d
    };
    /**
     * <p>
     * @attr description
     * Row edge flags.
     * {@deprecated Copy this definition into your own application project.}
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>8</td><td>Row is anchored to the bottom of the keyboard.
     * {@deprecated Copy this definition into your own application project.}</td></tr>
     * <tr><td>top</td><td>4</td><td>Row is anchored to the top of the keyboard.
     * {@deprecated Copy this definition into your own application project.}</td></tr>
     * </table>
     *
     * @attr name android:rowEdgeFlags
     */
    @Deprecated
    public static final int Keyboard_Row_rowEdgeFlags=0;
    /**
     * <p>
     * @attr description
     * Mode of the keyboard. If the mode doesn't match the
     * requested keyboard mode, the row will be skipped.
     * {@deprecated Copy this definition into your own application project.}
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:keyboardMode
     */
    @Deprecated
    public static final int Keyboard_Row_keyboardMode=1;
    /**
     * Attributes that can be used with a Keyframe.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Keyframe_value android:value}</code></td><td>Concrete value to assign to this piece of named meta-data.</td></tr>
     * <tr><td><code>{@link #Keyframe_interpolator android:interpolator}</code></td><td>Sets the acceleration curve for the indeterminate animation.</td></tr>
     * <tr><td><code>{@link #Keyframe_valueType android:valueType}</code></td><td>The type of valueFrom and valueTo.</td></tr>
     * <tr><td><code>{@link #Keyframe_fraction android:fraction}</code></td><td></td></tr>
     * </table>
     * @see #Keyframe_value
     * @see #Keyframe_interpolator
     * @see #Keyframe_valueType
     * @see #Keyframe_fraction
     */
    public static final int[] Keyframe={
      0x01010024, 0x01010141, 0x010102e0, 0x010104d8
    };
    /**
     * <p>
     * @attr description
     * Concrete value to assign to this piece of named meta-data.
     * The data can later be retrieved from the meta data Bundle
     * through {@link android.os.Bundle#getString Bundle.getString},
     * {@link android.os.Bundle#getInt Bundle.getInt},
     * {@link android.os.Bundle#getBoolean Bundle.getBoolean},
     * or {@link android.os.Bundle#getFloat Bundle.getFloat} depending
     * on the type used here.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:value
     */
    public static final int Keyframe_value=0;
    /**
     * <p>
     * @attr description
     * Defines a per-interval interpolator for this keyframe. This interpolator will be used
     * to interpolate between this keyframe and the previous keyframe.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:interpolator
     */
    public static final int Keyframe_interpolator=1;
    /**
     * <p>
     * @attr description
     * The type of valueFrom and valueTo.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>colorType</td><td>3</td><td>values are colors, which are integers starting with "#".</td></tr>
     * <tr><td>floatType</td><td>0</td><td>The given values are floats. This is the default value if valueType is
     * unspecified. Note that if any value attribute has a color value
     * (beginning with "#"), then this attribute is ignored and the color values are
     * interpreted as integers.</td></tr>
     * <tr><td>intType</td><td>1</td><td>values are integers.</td></tr>
     * <tr><td>pathType</td><td>2</td><td>values are paths defined as strings.
     * This type is used for path morphing in AnimatedVectorDrawable.</td></tr>
     * </table>
     *
     * @attr name android:valueType
     */
    public static final int Keyframe_valueType=2;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#fraction}
     * attribute's value can be found in the {@link #Keyframe} array.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:fraction
     */
    public static final int Keyframe_fraction=3;
    /**
     * Attributes that can be used with a KeyguardGlowStripView.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * </table>
     */
    public static final int[] KeyguardGlowStripView={
      0x0112003c, 0x01120059, 0x01120075, 0x01120098
    };
    /**
     * Drawable used to render several drawables stacked on top of each other.
     * Each child drawable can be controlled individually.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #LayerDrawable_paddingLeft android:paddingLeft}</code></td><td>Sets the padding, in pixels, of the left edge; see {@link android.R.attr#padding}.</td></tr>
     * <tr><td><code>{@link #LayerDrawable_paddingTop android:paddingTop}</code></td><td>Sets the padding, in pixels, of the top edge; see {@link android.R.attr#padding}.</td></tr>
     * <tr><td><code>{@link #LayerDrawable_paddingRight android:paddingRight}</code></td><td>Sets the padding, in pixels, of the right edge; see {@link android.R.attr#padding}.</td></tr>
     * <tr><td><code>{@link #LayerDrawable_paddingBottom android:paddingBottom}</code></td><td>Sets the padding, in pixels, of the bottom edge; see {@link android.R.attr#padding}.</td></tr>
     * <tr><td><code>{@link #LayerDrawable_opacity android:opacity}</code></td><td>Indicates the opacity of the layer.</td></tr>
     * <tr><td><code>{@link #LayerDrawable_paddingStart android:paddingStart}</code></td><td>Sets the padding, in pixels, of the start edge; see {@link android.R.attr#padding}.</td></tr>
     * <tr><td><code>{@link #LayerDrawable_paddingEnd android:paddingEnd}</code></td><td>Sets the padding, in pixels, of the end edge; see {@link android.R.attr#padding}.</td></tr>
     * <tr><td><code>{@link #LayerDrawable_autoMirrored android:autoMirrored}</code></td><td>Indicates if the drawable needs to be mirrored when its layout direction is
     * RTL (right-to-left).</td></tr>
     * <tr><td><code>{@link #LayerDrawable_paddingMode android:paddingMode}</code></td><td>Indicates how layer padding should affect the bounds of subsequent layers.</td></tr>
     * </table>
     * @see #LayerDrawable_paddingLeft
     * @see #LayerDrawable_paddingTop
     * @see #LayerDrawable_paddingRight
     * @see #LayerDrawable_paddingBottom
     * @see #LayerDrawable_opacity
     * @see #LayerDrawable_paddingStart
     * @see #LayerDrawable_paddingEnd
     * @see #LayerDrawable_autoMirrored
     * @see #LayerDrawable_paddingMode
     */
    public static final int[] LayerDrawable={
      0x010100d6, 0x010100d7, 0x010100d8, 0x010100d9, 
      0x0101031e, 0x010103b3, 0x010103b4, 0x010103ea, 
      0x01010457
    };
    /**
     * <p>
     * @attr description
     * Explicit left padding. Overrides child padding.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:paddingLeft
     */
    public static final int LayerDrawable_paddingLeft=0;
    /**
     * <p>
     * @attr description
     * Explicit top padding. Overrides child padding.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:paddingTop
     */
    public static final int LayerDrawable_paddingTop=1;
    /**
     * <p>
     * @attr description
     * Explicit right padding. Overrides child padding.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:paddingRight
     */
    public static final int LayerDrawable_paddingRight=2;
    /**
     * <p>
     * @attr description
     * Explicit bottom padding. Overrides child padding.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:paddingBottom
     */
    public static final int LayerDrawable_paddingBottom=3;
    /**
     * <p>
     * @attr description
     * Indicates the opacity of the layer. This can be useful to allow the
     * system to enable drawing optimizations. The default value is
     * translucent.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>opaque</td><td>ffffffff</td><td>Indicates that the layer is opaque and contains no transparent
     * nor translucent pixels.</td></tr>
     * <tr><td>translucent</td><td>fffffffd</td><td>The layer has translucent pixels.</td></tr>
     * <tr><td>transparent</td><td>fffffffe</td><td>The layer is completely transparent (no pixel will be drawn).</td></tr>
     * </table>
     *
     * @attr name android:opacity
     */
    public static final int LayerDrawable_opacity=4;
    /**
     * <p>
     * @attr description
     * Explicit start padding. Overrides child padding. Takes precedence
     * over absolute padding (for example, left when layout direction is LTR).
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:paddingStart
     */
    public static final int LayerDrawable_paddingStart=5;
    /**
     * <p>
     * @attr description
     * Explicit end padding. Overrides child padding. Takes precedence
     * over absolute padding (for example, right when layout direction is LTR).
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:paddingEnd
     */
    public static final int LayerDrawable_paddingEnd=6;
    /**
     * <p>
     * @attr description
     * Indicates if the drawable needs to be mirrored when its layout direction is
     * RTL (right-to-left).
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:autoMirrored
     */
    public static final int LayerDrawable_autoMirrored=7;
    /**
     * <p>
     * @attr description
     * Indicates how layer padding should affect the bounds of subsequent layers.
     * The default padding mode value is nest.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>nest</td><td>0</td><td>Nest each layer inside the padding of the previous layer.</td></tr>
     * <tr><td>stack</td><td>1</td><td>Stack each layer directly atop the previous layer.</td></tr>
     * </table>
     *
     * @attr name android:paddingMode
     */
    public static final int LayerDrawable_paddingMode=8;
    /**
     * Describes an item (or child) of a LayerDrawable.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #LayerDrawableItem_gravity android:gravity}</code></td><td>Specifies how an object should position its content, on both the X and Y axes,
     * within its own bounds.</td></tr>
     * <tr><td><code>{@link #LayerDrawableItem_id android:id}</code></td><td>Supply an identifier name for this view, to later retrieve it
     * with {@link android.view.View#findViewById View.findViewById()} or
     * {@link android.app.Activity#findViewById Activity.findViewById()}.</td></tr>
     * <tr><td><code>{@link #LayerDrawableItem_height android:height}</code></td><td>Makes the TextView be exactly this tall.</td></tr>
     * <tr><td><code>{@link #LayerDrawableItem_width android:width}</code></td><td>Makes the TextView be exactly this wide.</td></tr>
     * <tr><td><code>{@link #LayerDrawableItem_drawable android:drawable}</code></td><td>Reference to a drawable resource to use for the frame.</td></tr>
     * <tr><td><code>{@link #LayerDrawableItem_left android:left}</code></td><td>Amount of left padding inside the gradient shape.</td></tr>
     * <tr><td><code>{@link #LayerDrawableItem_top android:top}</code></td><td>Amount of top padding inside the gradient shape.</td></tr>
     * <tr><td><code>{@link #LayerDrawableItem_right android:right}</code></td><td>Amount of right padding inside the gradient shape.</td></tr>
     * <tr><td><code>{@link #LayerDrawableItem_bottom android:bottom}</code></td><td>Amount of bottom padding inside the gradient shape.</td></tr>
     * <tr><td><code>{@link #LayerDrawableItem_start android:start}</code></td><td>Start inset to apply to the layer.</td></tr>
     * <tr><td><code>{@link #LayerDrawableItem_end android:end}</code></td><td>End inset to apply to the layer.</td></tr>
     * </table>
     * @see #LayerDrawableItem_gravity
     * @see #LayerDrawableItem_id
     * @see #LayerDrawableItem_height
     * @see #LayerDrawableItem_width
     * @see #LayerDrawableItem_drawable
     * @see #LayerDrawableItem_left
     * @see #LayerDrawableItem_top
     * @see #LayerDrawableItem_right
     * @see #LayerDrawableItem_bottom
     * @see #LayerDrawableItem_start
     * @see #LayerDrawableItem_end
     */
    public static final int[] LayerDrawableItem={
      0x010100af, 0x010100d0, 0x01010155, 0x01010159, 
      0x01010199, 0x010101ad, 0x010101ae, 0x010101af, 
      0x010101b0, 0x010104db, 0x010104dc
    };
    /**
     * <p>
     * @attr description
     * Gravity used to align the layer within its container. If no value
     * is specified, the default behavior depends on whether an explicit
     * width or height has been set, If no dimension is set, gravity in
     * that direction defaults to {@code fill_horizontal} or
     * {@code fill_vertical}; otherwise, it defaults to {@code left} or
     * {@code top}.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
     * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
     * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
     * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
     * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the horizontal gravity: a left gravity will clip the right
     * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
     * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the vertical gravity: a top gravity will clip the bottom
     * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
     * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
     * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
     * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
     * </table>
     *
     * @attr name android:gravity
     */
    public static final int LayerDrawableItem_gravity=0;
    /**
     * <p>
     * @attr description
     * Identifier of the layer. This can be used to retrieve the layer
     * from a drawable container.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:id
     */
    public static final int LayerDrawableItem_id=1;
    /**
     * <p>
     * @attr description
     * Height of the layer. Defaults to the layer's intrinsic height.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:height
     */
    public static final int LayerDrawableItem_height=2;
    /**
     * <p>
     * @attr description
     * Width of the layer. Defaults to the layer's intrinsic width.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:width
     */
    public static final int LayerDrawableItem_width=3;
    /**
     * <p>
     * @attr description
     * Drawable used to render the layer.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:drawable
     */
    public static final int LayerDrawableItem_drawable=4;
    /**
     * <p>
     * @attr description
     * Left inset to apply to the layer.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:left
     */
    public static final int LayerDrawableItem_left=5;
    /**
     * <p>
     * @attr description
     * Top inset to apply to the layer.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:top
     */
    public static final int LayerDrawableItem_top=6;
    /**
     * <p>
     * @attr description
     * Right inset to apply to the layer.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:right
     */
    public static final int LayerDrawableItem_right=7;
    /**
     * <p>
     * @attr description
     * Bottom inset to apply to the layer.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:bottom
     */
    public static final int LayerDrawableItem_bottom=8;
    /**
     * <p>
     * @attr description
     * Start inset to apply to the layer. Overrides {@code left} or
     * {@code right} depending on layout direction.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:start
     */
    public static final int LayerDrawableItem_start=9;
    /**
     * <p>
     * @attr description
     * End inset to apply to the layer. Overrides {@code left} or
     * {@code right} depending on layout direction.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:end
     */
    public static final int LayerDrawableItem_end=10;
    /**
     * Attributes that can be used with a LayoutAnimation.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #LayoutAnimation_interpolator android:interpolator}</code></td><td>Sets the acceleration curve for the indeterminate animation.</td></tr>
     * <tr><td><code>{@link #LayoutAnimation_delay android:delay}</code></td><td>Fraction of the animation duration used to delay the beginning of
     * the animation of each child.</td></tr>
     * <tr><td><code>{@link #LayoutAnimation_animation android:animation}</code></td><td>Animation to use on each child.</td></tr>
     * <tr><td><code>{@link #LayoutAnimation_animationOrder android:animationOrder}</code></td><td>The order in which the animations will be started.</td></tr>
     * </table>
     * @see #LayoutAnimation_interpolator
     * @see #LayoutAnimation_delay
     * @see #LayoutAnimation_animation
     * @see #LayoutAnimation_animationOrder
     */
    public static final int[] LayoutAnimation={
      0x01010141, 0x010101cc, 0x010101cd, 0x010101ce
    };
    /**
     * <p>
     * @attr description
     * Interpolator used to interpolate the delay between the start of
     * each animation.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:interpolator
     */
    public static final int LayoutAnimation_interpolator=0;
    /**
     * <p>
     * @attr description
     * Fraction of the animation duration used to delay the beginning of
     * the animation of each child.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:delay
     */
    public static final int LayoutAnimation_delay=1;
    /**
     * <p>
     * @attr description
     * Animation to use on each child.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:animation
     */
    public static final int LayoutAnimation_animation=2;
    /**
     * <p>
     * @attr description
     * The order in which the animations will be started.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>normal</td><td>0</td><td>Animations are started in the natural order.</td></tr>
     * <tr><td>random</td><td>2</td><td>Animations are started randomly.</td></tr>
     * <tr><td>reverse</td><td>1</td><td>Animations are started in the reverse order.</td></tr>
     * </table>
     *
     * @attr name android:animationOrder
     */
    public static final int LayoutAnimation_animationOrder=3;
    /**
     * Attributes that can be used with a LevelListDrawableItem.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #LevelListDrawableItem_drawable android:drawable}</code></td><td>Reference to a drawable resource to use for the frame.</td></tr>
     * <tr><td><code>{@link #LevelListDrawableItem_minLevel android:minLevel}</code></td><td>The minimum level allowed for this item.</td></tr>
     * <tr><td><code>{@link #LevelListDrawableItem_maxLevel android:maxLevel}</code></td><td>The maximum level allowed for this item.</td></tr>
     * </table>
     * @see #LevelListDrawableItem_drawable
     * @see #LevelListDrawableItem_minLevel
     * @see #LevelListDrawableItem_maxLevel
     */
    public static final int[] LevelListDrawableItem={
      0x01010199, 0x010101b1, 0x010101b2
    };
    /**
     * <p>
     * @attr description
     * Reference to a drawable resource to use for the frame.  If not
     * given, the drawable must be defined by the first child tag.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:drawable
     */
    public static final int LevelListDrawableItem_drawable=0;
    /**
     * <p>
     * @attr description
     * The minimum level allowed for this item.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:minLevel
     */
    public static final int LevelListDrawableItem_minLevel=1;
    /**
     * <p>
     * @attr description
     * The maximum level allowed for this item.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:maxLevel
     */
    public static final int LevelListDrawableItem_maxLevel=2;
    /**
     * @hide
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Lighting_ambientShadowAlpha android:ambientShadowAlpha}</code></td><td>Alpha value of the ambient shadow projected by elevated views, between 0 and 1.</td></tr>
     * <tr><td><code>{@link #Lighting_spotShadowAlpha android:spotShadowAlpha}</code></td><td>Alpha value of the spot shadow projected by elevated views, between 0 and 1.</td></tr>
     * </table>
     * @see #Lighting_ambientShadowAlpha
     * @see #Lighting_spotShadowAlpha
     */
    public static final int[] Lighting={
      0x010104be, 0x010104bf, 0x01120077, 0x01120078, 
      0x01120079
    };
    /**
     * <p>
     * @attr description
     * Alpha value of the ambient shadow projected by elevated views, between 0 and 1.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:ambientShadowAlpha
     */
    public static final int Lighting_ambientShadowAlpha=0;
    /**
     * <p>
     * @attr description
     * Alpha value of the spot shadow projected by elevated views, between 0 and 1.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:spotShadowAlpha
     */
    public static final int Lighting_spotShadowAlpha=1;
    /**
     * Attributes that can be used with a LinearLayout.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #LinearLayout_gravity android:gravity}</code></td><td>Specifies how an object should position its content, on both the X and Y axes,
     * within its own bounds.</td></tr>
     * <tr><td><code>{@link #LinearLayout_orientation android:orientation}</code></td><td>Standard orientation constant.</td></tr>
     * <tr><td><code>{@link #LinearLayout_baselineAligned android:baselineAligned}</code></td><td>When set to false, prevents the layout from aligning its children's
     * baselines.</td></tr>
     * <tr><td><code>{@link #LinearLayout_baselineAlignedChildIndex android:baselineAlignedChildIndex}</code></td><td>When a linear layout is part of another layout that is baseline
     * aligned, it can specify which of its children to baseline align to
     * (that is, which child TextView).</td></tr>
     * <tr><td><code>{@link #LinearLayout_weightSum android:weightSum}</code></td><td>Defines the maximum weight sum.</td></tr>
     * <tr><td><code>{@link #LinearLayout_divider android:divider}</code></td><td>Drawable or color to draw between list items.</td></tr>
     * <tr><td><code>{@link #LinearLayout_measureWithLargestChild android:measureWithLargestChild}</code></td><td>When set to true, all children with a weight will be considered having
     * the minimum size of the largest child.</td></tr>
     * <tr><td><code>{@link #LinearLayout_showDividers android:showDividers}</code></td><td>Setting for which dividers to show.</td></tr>
     * <tr><td><code>{@link #LinearLayout_dividerPadding android:dividerPadding}</code></td><td>Size of padding on either end of a divider.</td></tr>
     * </table>
     * @see #LinearLayout_gravity
     * @see #LinearLayout_orientation
     * @see #LinearLayout_baselineAligned
     * @see #LinearLayout_baselineAlignedChildIndex
     * @see #LinearLayout_weightSum
     * @see #LinearLayout_divider
     * @see #LinearLayout_measureWithLargestChild
     * @see #LinearLayout_showDividers
     * @see #LinearLayout_dividerPadding
     */
    public static final int[] LinearLayout={
      0x010100af, 0x010100c4, 0x01010126, 0x01010127, 
      0x01010128, 0x01010129, 0x010102d4, 0x01010329, 
      0x0101032a
    };
    /**
     * <p>
     * @attr description
     * Specifies how an object should position its content, on both the X and Y axes,
     * within its own bounds.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
     * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
     * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
     * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
     * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the horizontal gravity: a left gravity will clip the right
     * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
     * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the vertical gravity: a top gravity will clip the bottom
     * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
     * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
     * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
     * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
     * </table>
     *
     * @attr name android:gravity
     */
    public static final int LinearLayout_gravity=0;
    /**
     * <p>
     * @attr description
     * Should the layout be a column or a row?  Use "horizontal"
     * for a row, "vertical" for a column.  The default is
     * horizontal.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>horizontal</td><td>0</td><td>Defines an horizontal widget.</td></tr>
     * <tr><td>vertical</td><td>1</td><td>Defines a vertical widget.</td></tr>
     * </table>
     *
     * @attr name android:orientation
     */
    public static final int LinearLayout_orientation=1;
    /**
     * <p>
     * @attr description
     * When set to false, prevents the layout from aligning its children's
     * baselines. This attribute is particularly useful when the children
     * use different values for gravity. The default value is true.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:baselineAligned
     */
    public static final int LinearLayout_baselineAligned=2;
    /**
     * <p>
     * @attr description
     * When a linear layout is part of another layout that is baseline
     * aligned, it can specify which of its children to baseline align to
     * (that is, which child TextView).
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:baselineAlignedChildIndex
     */
    public static final int LinearLayout_baselineAlignedChildIndex=3;
    /**
     * <p>
     * @attr description
     * Defines the maximum weight sum. If unspecified, the sum is computed
     * by adding the layout_weight of all of the children. This can be
     * used for instance to give a single child 50% of the total available
     * space by giving it a layout_weight of 0.5 and setting the weightSum
     * to 1.0.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:weightSum
     */
    public static final int LinearLayout_weightSum=4;
    /**
     * <p>
     * @attr description
     * Drawable to use as a vertical divider between buttons.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:divider
     */
    public static final int LinearLayout_divider=5;
    /**
     * <p>
     * @attr description
     * When set to true, all children with a weight will be considered having
     * the minimum size of the largest child. If false, all children are
     * measured normally.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:measureWithLargestChild
     */
    public static final int LinearLayout_measureWithLargestChild=6;
    /**
     * <p>
     * @attr description
     * Setting for which dividers to show.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>beginning</td><td>1</td><td></td></tr>
     * <tr><td>end</td><td>4</td><td></td></tr>
     * <tr><td>middle</td><td>2</td><td></td></tr>
     * <tr><td>none</td><td>0</td><td></td></tr>
     * </table>
     *
     * @attr name android:showDividers
     */
    public static final int LinearLayout_showDividers=7;
    /**
     * <p>
     * @attr description
     * Size of padding on either end of a divider.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:dividerPadding
     */
    public static final int LinearLayout_dividerPadding=8;
    /**
     * Attributes that can be used with a LinearLayout_Layout.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #LinearLayout_Layout_layout_gravity android:layout_gravity}</code></td><td>Standard gravity constant that a child supplies to its parent.</td></tr>
     * <tr><td><code>{@link #LinearLayout_Layout_layout_width android:layout_width}</code></td><td>Specifies the basic width of the view.</td></tr>
     * <tr><td><code>{@link #LinearLayout_Layout_layout_height android:layout_height}</code></td><td>Specifies the basic height of the view.</td></tr>
     * <tr><td><code>{@link #LinearLayout_Layout_layout_weight android:layout_weight}</code></td><td>Indicates how much of the extra space in the LinearLayout is
     * allocated to the view associated with these LayoutParams.</td></tr>
     * </table>
     * @see #LinearLayout_Layout_layout_gravity
     * @see #LinearLayout_Layout_layout_width
     * @see #LinearLayout_Layout_layout_height
     * @see #LinearLayout_Layout_layout_weight
     */
    public static final int[] LinearLayout_Layout={
      0x010100b3, 0x010100f4, 0x010100f5, 0x01010181
    };
    /**
     * <p>
     * @attr description
     * Gravity specifies how a component should be placed in its group of cells.
     * The default is {@link android.view.Gravity#TOP}.
     * See {@link android.widget.LinearLayout#setGravity(int)}.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
     * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
     * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
     * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
     * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the horizontal gravity: a left gravity will clip the right
     * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
     * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the vertical gravity: a top gravity will clip the bottom
     * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
     * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
     * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
     * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
     * </table>
     *
     * @attr name android:layout_gravity
     */
    public static final int LinearLayout_Layout_layout_gravity=0;
    /**
     * <p>
     * @attr description
     * Specifies the basic width of the view.  This is a required attribute
     * for any view inside of a containing layout manager.  Its value may
     * be a dimension (such as "12dip") for a constant width or one of
     * the special constants.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>fill_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
     * This constant is deprecated starting from API Level 8 and
     * is replaced by {@code match_parent}.</td></tr>
     * <tr><td>match_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
     * Introduced in API Level 8.</td></tr>
     * <tr><td>wrap_content</td><td>fffffffe</td><td>The view should be only big enough to enclose its content (plus padding).</td></tr>
     * </table>
     *
     * @attr name android:layout_width
     */
    public static final int LinearLayout_Layout_layout_width=1;
    /**
     * <p>
     * @attr description
     * Specifies the basic height of the view.  This is a required attribute
     * for any view inside of a containing layout manager.  Its value may
     * be a dimension (such as "12dip") for a constant height or one of
     * the special constants.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>fill_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
     * This constant is deprecated starting from API Level 8 and
     * is replaced by {@code match_parent}.</td></tr>
     * <tr><td>match_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
     * Introduced in API Level 8.</td></tr>
     * <tr><td>wrap_content</td><td>fffffffe</td><td>The view should be only big enough to enclose its content (plus padding).</td></tr>
     * </table>
     *
     * @attr name android:layout_height
     */
    public static final int LinearLayout_Layout_layout_height=2;
    /**
     * <p>
     * @attr description
     * Indicates how much of the extra space in the LinearLayout is
     * allocated to the view associated with these LayoutParams. Specify
     * 0 if the view should not be stretched. Otherwise the extra pixels
     * will be pro-rated among all views whose weight is greater than 0.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:layout_weight
     */
    public static final int LinearLayout_Layout_layout_weight=3;
    /**
     * Attributes that can be used with a ListPopupWindow.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ListPopupWindow_dropDownHorizontalOffset android:dropDownHorizontalOffset}</code></td><td>Amount of pixels by which the drop down should be offset horizontally.</td></tr>
     * <tr><td><code>{@link #ListPopupWindow_dropDownVerticalOffset android:dropDownVerticalOffset}</code></td><td>Amount of pixels by which the drop down should be offset vertically.</td></tr>
     * </table>
     * @see #ListPopupWindow_dropDownHorizontalOffset
     * @see #ListPopupWindow_dropDownVerticalOffset
     */
    public static final int[] ListPopupWindow={
      0x010102ac, 0x010102ad
    };
    /**
     * <p>
     * @attr description
     * Amount of pixels by which the drop down should be offset horizontally.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:dropDownHorizontalOffset
     */
    public static final int ListPopupWindow_dropDownHorizontalOffset=0;
    /**
     * <p>
     * @attr description
     * Amount of pixels by which the drop down should be offset vertically.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:dropDownVerticalOffset
     */
    public static final int ListPopupWindow_dropDownVerticalOffset=1;
    /**
     * Base attributes available to ListPreference.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ListPreference_entries android:entries}</code></td><td>Reference to an array resource that will populate a list/adapter.</td></tr>
     * <tr><td><code>{@link #ListPreference_entryValues android:entryValues}</code></td><td>The array to find the value to save for a preference when an entry from
     * entries is selected.</td></tr>
     * </table>
     * @see #ListPreference_entries
     * @see #ListPreference_entryValues
     */
    public static final int[] ListPreference={
      0x010100b2, 0x010101f8
    };
    /**
     * <p>
     * @attr description
     * The human-readable array to present as a list. Each entry must have a corresponding
     * index in entryValues.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:entries
     */
    public static final int ListPreference_entries=0;
    /**
     * <p>
     * @attr description
     * The array to find the value to save for a preference when an entry from
     * entries is selected. If a user clicks on the second item in entries, the
     * second item in this array will be saved to the preference.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:entryValues
     */
    public static final int ListPreference_entryValues=1;
    /**
     * Attributes that can be used with a ListView.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ListView_entries android:entries}</code></td><td>Reference to an array resource that will populate a list/adapter.</td></tr>
     * <tr><td><code>{@link #ListView_divider android:divider}</code></td><td>Drawable or color to draw between list items.</td></tr>
     * <tr><td><code>{@link #ListView_dividerHeight android:dividerHeight}</code></td><td>Height of the divider.</td></tr>
     * <tr><td><code>{@link #ListView_headerDividersEnabled android:headerDividersEnabled}</code></td><td>When set to false, the ListView will not draw the divider after each header view.</td></tr>
     * <tr><td><code>{@link #ListView_footerDividersEnabled android:footerDividersEnabled}</code></td><td>When set to false, the ListView will not draw the divider before each footer view.</td></tr>
     * <tr><td><code>{@link #ListView_overScrollHeader android:overScrollHeader}</code></td><td>Drawable to draw above list content.</td></tr>
     * <tr><td><code>{@link #ListView_overScrollFooter android:overScrollFooter}</code></td><td>Drawable to draw below list content.</td></tr>
     * </table>
     * @see #ListView_entries
     * @see #ListView_divider
     * @see #ListView_dividerHeight
     * @see #ListView_headerDividersEnabled
     * @see #ListView_footerDividersEnabled
     * @see #ListView_overScrollHeader
     * @see #ListView_overScrollFooter
     */
    public static final int[] ListView={
      0x010100b2, 0x01010129, 0x0101012a, 0x0101022e, 
      0x0101022f, 0x010102c2, 0x010102c3
    };
    /**
     * <p>
     * @attr description
     * Reference to an array resource that will populate the ListView.  For static content,
     * this is simpler than populating the ListView programmatically.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:entries
     */
    public static final int ListView_entries=0;
    /**
     * <p>
     * @attr description
     * Drawable or color to draw between list items.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:divider
     */
    public static final int ListView_divider=1;
    /**
     * <p>
     * @attr description
     * Height of the divider. Will use the intrinsic height of the divider if this
     * is not specified.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:dividerHeight
     */
    public static final int ListView_dividerHeight=2;
    /**
     * <p>
     * @attr description
     * When set to false, the ListView will not draw the divider after each header view.
     * The default value is true.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:headerDividersEnabled
     */
    public static final int ListView_headerDividersEnabled=3;
    /**
     * <p>
     * @attr description
     * When set to false, the ListView will not draw the divider before each footer view.
     * The default value is true.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:footerDividersEnabled
     */
    public static final int ListView_footerDividersEnabled=4;
    /**
     * <p>
     * @attr description
     * Drawable to draw above list content.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:overScrollHeader
     */
    public static final int ListView_overScrollHeader=5;
    /**
     * <p>
     * @attr description
     * Drawable to draw below list content.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:overScrollFooter
     */
    public static final int ListView_overScrollFooter=6;
    /**
     * Attributes that can be used with a LockPatternView.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * </table>
     */
    public static final int[] LockPatternView={
      0x01120012, 0x0112003b, 0x01120042, 0x011200a0, 
      0x011200c9, 0x011200e7
    };
    /**
     * Attributes that can be used with a Magnifier.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * </table>
     */
    public static final int[] Magnifier={
      0x0112007e, 0x0112007f, 0x01120080, 0x01120081, 
      0x01120083, 0x01120084, 0x01120085
    };
    /**
     * The set of attributes for a MapView.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #MapView_apiKey android:apiKey}</code></td><td>Value is a string that specifies the Maps API Key to use.</td></tr>
     * </table>
     * @see #MapView_apiKey
     */
    public static final int[] MapView={
      0x01010211
    };
    /**
     * <p>
     * @attr description
     * Value is a string that specifies the Maps API Key to use.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:apiKey
     */
    public static final int MapView_apiKey=0;
    /**
     * Drawable used to render the Material progress indicator.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #MaterialProgressDrawable_height android:height}</code></td><td>Makes the TextView be exactly this tall.</td></tr>
     * <tr><td><code>{@link #MaterialProgressDrawable_width android:width}</code></td><td>Makes the TextView be exactly this wide.</td></tr>
     * <tr><td><code>{@link #MaterialProgressDrawable_visible android:visible}</code></td><td>Provides initial visibility state of the drawable; the default
     * value is false.</td></tr>
     * <tr><td><code>{@link #MaterialProgressDrawable_color android:color}</code></td><td>Solid color for the gradient shape.</td></tr>
     * <tr><td><code>{@link #MaterialProgressDrawable_innerRadius android:innerRadius}</code></td><td>Inner radius of the ring.</td></tr>
     * <tr><td><code>{@link #MaterialProgressDrawable_thickness android:thickness}</code></td><td>Thickness of the ring.</td></tr>
     * </table>
     * @see #MaterialProgressDrawable_height
     * @see #MaterialProgressDrawable_width
     * @see #MaterialProgressDrawable_visible
     * @see #MaterialProgressDrawable_color
     * @see #MaterialProgressDrawable_innerRadius
     * @see #MaterialProgressDrawable_thickness
     */
    public static final int[] MaterialProgressDrawable={
      0x01010155, 0x01010159, 0x01010194, 0x010101a5, 
      0x0101025f, 0x01010260
    };
    /**
     * <p>
     * @attr description
     * Makes the TextView be exactly this tall.
     * You could get the same effect by specifying this number in the
     * layout parameters.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:height
     */
    public static final int MaterialProgressDrawable_height=0;
    /**
     * <p>
     * @attr description
     * Makes the TextView be exactly this wide.
     * You could get the same effect by specifying this number in the
     * layout parameters.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:width
     */
    public static final int MaterialProgressDrawable_width=1;
    /**
     * <p>
     * @attr description
     * Provides initial visibility state of the drawable; the default
     * value is false.  See
     * {@link android.graphics.drawable.Drawable#setVisible}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:visible
     */
    public static final int MaterialProgressDrawable_visible=2;
    /**
     * <p>
     * @attr description
     * Solid color for the gradient shape.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:color
     */
    public static final int MaterialProgressDrawable_color=3;
    /**
     * <p>
     * @attr description
     * Inner radius of the ring. When defined, innerRadiusRatio is ignored.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:innerRadius
     */
    public static final int MaterialProgressDrawable_innerRadius=4;
    /**
     * <p>
     * @attr description
     * Thickness of the ring. When defined, thicknessRatio is ignored.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:thickness
     */
    public static final int MaterialProgressDrawable_thickness=5;
    /**
     * Attributes that can be used with a MediaRouteButton.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #MediaRouteButton_minWidth android:minWidth}</code></td><td></td></tr>
     * <tr><td><code>{@link #MediaRouteButton_minHeight android:minHeight}</code></td><td></td></tr>
     * <tr><td><code>{@link #MediaRouteButton_mediaRouteTypes android:mediaRouteTypes}</code></td><td>The types of media routes the button and its resulting
     * chooser will filter by.</td></tr>
     * </table>
     * @see #MediaRouteButton_minWidth
     * @see #MediaRouteButton_minHeight
     * @see #MediaRouteButton_mediaRouteTypes
     */
    public static final int[] MediaRouteButton={
      0x0101013f, 0x01010140, 0x010103ae, 0x01120046
    };
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#minWidth}
     * attribute's value can be found in the {@link #MediaRouteButton} array.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:minWidth
     */
    public static final int MediaRouteButton_minWidth=0;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#minHeight}
     * attribute's value can be found in the {@link #MediaRouteButton} array.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:minHeight
     */
    public static final int MediaRouteButton_minHeight=1;
    /**
     * <p>
     * @attr description
     * The types of media routes the button and its resulting
     * chooser will filter by.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>liveAudio</td><td>1</td><td>Allow selection of live audio routes.</td></tr>
     * <tr><td>user</td><td>800000</td><td>Allow selection of user (app-specified) routes.</td></tr>
     * </table>
     *
     * @attr name android:mediaRouteTypes
     */
    public static final int MediaRouteButton_mediaRouteTypes=2;
    public static final int[] Menu={
    };
    /**
     * Base attributes that are available to all groups.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #MenuGroup_enabled android:enabled}</code></td><td>Specifies whether the widget is enabled.</td></tr>
     * <tr><td><code>{@link #MenuGroup_id android:id}</code></td><td>Supply an identifier name for this view, to later retrieve it
     * with {@link android.view.View#findViewById View.findViewById()} or
     * {@link android.app.Activity#findViewById Activity.findViewById()}.</td></tr>
     * <tr><td><code>{@link #MenuGroup_visible android:visible}</code></td><td>Provides initial visibility state of the drawable; the default
     * value is false.</td></tr>
     * <tr><td><code>{@link #MenuGroup_menuCategory android:menuCategory}</code></td><td>The category applied to all items within this group.</td></tr>
     * <tr><td><code>{@link #MenuGroup_orderInCategory android:orderInCategory}</code></td><td>The order within the category applied to all items within this group.</td></tr>
     * <tr><td><code>{@link #MenuGroup_checkableBehavior android:checkableBehavior}</code></td><td>Whether the items are capable of displaying a check mark.</td></tr>
     * </table>
     * @see #MenuGroup_enabled
     * @see #MenuGroup_id
     * @see #MenuGroup_visible
     * @see #MenuGroup_menuCategory
     * @see #MenuGroup_orderInCategory
     * @see #MenuGroup_checkableBehavior
     */
    public static final int[] MenuGroup={
      0x0101000e, 0x010100d0, 0x01010194, 0x010101de, 
      0x010101df, 0x010101e0
    };
    /**
     * <p>
     * @attr description
     * Whether the items are enabled.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:enabled
     */
    public static final int MenuGroup_enabled=0;
    /**
     * <p>
     * @attr description
     * The ID of the group.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:id
     */
    public static final int MenuGroup_id=1;
    /**
     * <p>
     * @attr description
     * Whether the items are shown/visible.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:visible
     */
    public static final int MenuGroup_visible=2;
    /**
     * <p>
     * @attr description
     * The category applied to all items within this group.
     * (This will be or'ed with the orderInCategory attribute.)
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>alternative</td><td>40000</td><td>Items are alternative actions.</td></tr>
     * <tr><td>container</td><td>10000</td><td>Items are part of a container.</td></tr>
     * <tr><td>secondary</td><td>30000</td><td>Items are user-supplied secondary (infrequently used).</td></tr>
     * <tr><td>system</td><td>20000</td><td>Items are provided by the system.</td></tr>
     * </table>
     *
     * @attr name android:menuCategory
     */
    public static final int MenuGroup_menuCategory=3;
    /**
     * <p>
     * @attr description
     * The order within the category applied to all items within this group.
     * (This will be or'ed with the category attribute.)
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:orderInCategory
     */
    public static final int MenuGroup_orderInCategory=4;
    /**
     * <p>
     * @attr description
     * Whether the items are capable of displaying a check mark.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>all</td><td>1</td><td>The items are all checkable.</td></tr>
     * <tr><td>none</td><td>0</td><td>The items are not checkable.</td></tr>
     * <tr><td>single</td><td>2</td><td>The items are checkable and there will only be a single checked item in
     * this group.</td></tr>
     * </table>
     *
     * @attr name android:checkableBehavior
     */
    public static final int MenuGroup_checkableBehavior=5;
    /**
     * Base attributes that are available to all Item objects.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #MenuItem_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
     * associated item.</td></tr>
     * <tr><td><code>{@link #MenuItem_enabled android:enabled}</code></td><td>Specifies whether the widget is enabled.</td></tr>
     * <tr><td><code>{@link #MenuItem_id android:id}</code></td><td>Supply an identifier name for this view, to later retrieve it
     * with {@link android.view.View#findViewById View.findViewById()} or
     * {@link android.app.Activity#findViewById Activity.findViewById()}.</td></tr>
     * <tr><td><code>{@link #MenuItem_checked android:checked}</code></td><td>Indicates the initial checked state of this button.</td></tr>
     * <tr><td><code>{@link #MenuItem_visible android:visible}</code></td><td>Provides initial visibility state of the drawable; the default
     * value is false.</td></tr>
     * <tr><td><code>{@link #MenuItem_menuCategory android:menuCategory}</code></td><td>The category applied to all items within this group.</td></tr>
     * <tr><td><code>{@link #MenuItem_orderInCategory android:orderInCategory}</code></td><td>The order within the category applied to all items within this group.</td></tr>
     * <tr><td><code>{@link #MenuItem_title android:title}</code></td><td>The title associated with the item.</td></tr>
     * <tr><td><code>{@link #MenuItem_titleCondensed android:titleCondensed}</code></td><td>The condensed title associated with the item.</td></tr>
     * <tr><td><code>{@link #MenuItem_alphabeticShortcut android:alphabeticShortcut}</code></td><td>The alphabetic shortcut key.</td></tr>
     * <tr><td><code>{@link #MenuItem_numericShortcut android:numericShortcut}</code></td><td>The numeric shortcut key.</td></tr>
     * <tr><td><code>{@link #MenuItem_checkable android:checkable}</code></td><td>Whether the item is capable of displaying a check mark.</td></tr>
     * <tr><td><code>{@link #MenuItem_onClick android:onClick}</code></td><td>Name of the method in this View's context to invoke when the view is
     * clicked.</td></tr>
     * <tr><td><code>{@link #MenuItem_contentDescription android:contentDescription}</code></td><td>The content description associated with the item.</td></tr>
     * <tr><td><code>{@link #MenuItem_showAsAction android:showAsAction}</code></td><td>How this item should display in the Action Bar, if present.</td></tr>
     * <tr><td><code>{@link #MenuItem_actionLayout android:actionLayout}</code></td><td>An optional layout to be used as an action view.</td></tr>
     * <tr><td><code>{@link #MenuItem_actionViewClass android:actionViewClass}</code></td><td>The name of an optional View class to instantiate and use as an
     * action view.</td></tr>
     * <tr><td><code>{@link #MenuItem_actionProviderClass android:actionProviderClass}</code></td><td>The name of an optional ActionProvider class to instantiate an action view
     * and perform operations such as default action for that menu item.</td></tr>
     * <tr><td><code>{@link #MenuItem_tooltipText android:tooltipText}</code></td><td>The tooltip text associated with the item.</td></tr>
     * <tr><td><code>{@link #MenuItem_alphabeticModifiers android:alphabeticModifiers}</code></td><td>The alphabetic modifier key.</td></tr>
     * <tr><td><code>{@link #MenuItem_numericModifiers android:numericModifiers}</code></td><td>The numeric modifier key.</td></tr>
     * <tr><td><code>{@link #MenuItem_iconTint android:iconTint}</code></td><td>Tint to apply to the icon.</td></tr>
     * <tr><td><code>{@link #MenuItem_iconTintMode android:iconTintMode}</code></td><td>Blending mode used to apply the icon tint.</td></tr>
     * </table>
     * @see #MenuItem_icon
     * @see #MenuItem_enabled
     * @see #MenuItem_id
     * @see #MenuItem_checked
     * @see #MenuItem_visible
     * @see #MenuItem_menuCategory
     * @see #MenuItem_orderInCategory
     * @see #MenuItem_title
     * @see #MenuItem_titleCondensed
     * @see #MenuItem_alphabeticShortcut
     * @see #MenuItem_numericShortcut
     * @see #MenuItem_checkable
     * @see #MenuItem_onClick
     * @see #MenuItem_contentDescription
     * @see #MenuItem_showAsAction
     * @see #MenuItem_actionLayout
     * @see #MenuItem_actionViewClass
     * @see #MenuItem_actionProviderClass
     * @see #MenuItem_tooltipText
     * @see #MenuItem_alphabeticModifiers
     * @see #MenuItem_numericModifiers
     * @see #MenuItem_iconTint
     * @see #MenuItem_iconTintMode
     */
    public static final int[] MenuItem={
      0x01010002, 0x0101000e, 0x010100d0, 0x01010106, 
      0x01010194, 0x010101de, 0x010101df, 0x010101e1, 
      0x010101e2, 0x010101e3, 0x010101e4, 0x010101e5, 
      0x0101026f, 0x01010273, 0x010102d9, 0x010102fb, 
      0x010102fc, 0x01010389, 0x01010534, 0x0101054e, 
      0x0101054f, 0x0101055e, 0x0101055f
    };
    /**
     * <p>
     * @attr description
     * The icon associated with this item.  This icon will not always be shown, so
     * the title should be sufficient in describing this item.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:icon
     */
    public static final int MenuItem_icon=0;
    /**
     * <p>
     * @attr description
     * Whether the item is enabled.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:enabled
     */
    public static final int MenuItem_enabled=1;
    /**
     * <p>
     * @attr description
     * The ID of the item.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:id
     */
    public static final int MenuItem_id=2;
    /**
     * <p>
     * @attr description
     * Whether the item is checked.  Note that you must first have enabled checking with
     * the checkable attribute or else the check mark will not appear.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:checked
     */
    public static final int MenuItem_checked=3;
    /**
     * <p>
     * @attr description
     * Whether the item is shown/visible.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:visible
     */
    public static final int MenuItem_visible=4;
    /**
     * <p>
     * @attr description
     * The category applied to the item.
     * (This will be or'ed with the orderInCategory attribute.)
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>alternative</td><td>40000</td><td>Items are alternative actions.</td></tr>
     * <tr><td>container</td><td>10000</td><td>Items are part of a container.</td></tr>
     * <tr><td>secondary</td><td>30000</td><td>Items are user-supplied secondary (infrequently used).</td></tr>
     * <tr><td>system</td><td>20000</td><td>Items are provided by the system.</td></tr>
     * </table>
     *
     * @attr name android:menuCategory
     */
    public static final int MenuItem_menuCategory=5;
    /**
     * <p>
     * @attr description
     * The order within the category applied to the item.
     * (This will be or'ed with the category attribute.)
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:orderInCategory
     */
    public static final int MenuItem_orderInCategory=6;
    /**
     * <p>
     * @attr description
     * The title associated with the item.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:title
     */
    public static final int MenuItem_title=7;
    /**
     * <p>
     * @attr description
     * The condensed title associated with the item.  This is used in situations where the
     * normal title may be too long to be displayed.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:titleCondensed
     */
    public static final int MenuItem_titleCondensed=8;
    /**
     * <p>
     * @attr description
     * The alphabetic shortcut key.  This is the shortcut when using a keyboard
     * with alphabetic keys.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:alphabeticShortcut
     */
    public static final int MenuItem_alphabeticShortcut=9;
    /**
     * <p>
     * @attr description
     * The numeric shortcut key.  This is the shortcut when using a numeric (for example,
     * 12-key) keyboard.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:numericShortcut
     */
    public static final int MenuItem_numericShortcut=10;
    /**
     * <p>
     * @attr description
     * Whether the item is capable of displaying a check mark.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:checkable
     */
    public static final int MenuItem_checkable=11;
    /**
     * <p>
     * @attr description
     * Name of a method on the Context used to inflate the menu that will be
     * called when the item is clicked.
     * {@deprecated Menu actually traverses the Context hierarchy looking for the
     * relevant method, which is fragile (an intermediate ContextWrapper adding a
     * same-named method would change behavior) and restricts bytecode optimizers
     * such as R8. Instead, use MenuItem.setOnMenuItemClickListener.}
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:onClick
     */
    @Deprecated
    public static final int MenuItem_onClick=12;
    /**
     * <p>
     * @attr description
     * The content description associated with the item.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:contentDescription
     */
    public static final int MenuItem_contentDescription=13;
    /**
     * <p>
     * @attr description
     * How this item should display in the Action Bar, if present.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>always</td><td>2</td><td>Always show this item in an actionbar, even if it would override
     * the system's limits of how much stuff to put there. This may make
     * your action bar look bad on some screens. In most cases you should
     * use "ifRoom" instead. Mutually exclusive with "ifRoom" and "never".</td></tr>
     * <tr><td>collapseActionView</td><td>8</td><td>This item's action view collapses to a normal menu
     * item. When expanded, the action view takes over a
     * larger segment of its container.</td></tr>
     * <tr><td>ifRoom</td><td>1</td><td>Show this item in an action bar if there is room for it as determined
     * by the system. Favor this option over "always" where possible.
     * Mutually exclusive with "never" and "always".</td></tr>
     * <tr><td>never</td><td>0</td><td>Never show this item in an action bar, show it in the overflow menu instead.
     * Mutually exclusive with "ifRoom" and "always".</td></tr>
     * <tr><td>withText</td><td>4</td><td>When this item is shown as an action in the action bar, show a text
     * label with it even if it has an icon representation.</td></tr>
     * </table>
     *
     * @attr name android:showAsAction
     */
    public static final int MenuItem_showAsAction=14;
    /**
     * <p>
     * @attr description
     * An optional layout to be used as an action view.
     * See {@link android.view.MenuItem#setActionView(android.view.View)}
     * for more info.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:actionLayout
     */
    public static final int MenuItem_actionLayout=15;
    /**
     * <p>
     * @attr description
     * The name of an optional View class to instantiate and use as an
     * action view. See {@link android.view.MenuItem#setActionView(android.view.View)}
     * for more info.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:actionViewClass
     */
    public static final int MenuItem_actionViewClass=16;
    /**
     * <p>
     * @attr description
     * The name of an optional ActionProvider class to instantiate an action view
     * and perform operations such as default action for that menu item.
     * See {@link android.view.MenuItem#setActionProvider(android.view.ActionProvider)}
     * for more info.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:actionProviderClass
     */
    public static final int MenuItem_actionProviderClass=17;
    /**
     * <p>
     * @attr description
     * The tooltip text associated with the item.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:tooltipText
     */
    public static final int MenuItem_tooltipText=18;
    /**
     * <p>
     * @attr description
     * The alphabetic modifier key. This is the modifier when using a keyboard
     * with alphabetic keys. The values should be kept in sync with KeyEvent
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>ALT</td><td>2</td><td></td></tr>
     * <tr><td>CTRL</td><td>1000</td><td></td></tr>
     * <tr><td>FUNCTION</td><td>8</td><td></td></tr>
     * <tr><td>META</td><td>10000</td><td></td></tr>
     * <tr><td>SHIFT</td><td>1</td><td></td></tr>
     * <tr><td>SYM</td><td>4</td><td></td></tr>
     * </table>
     *
     * @attr name android:alphabeticModifiers
     */
    public static final int MenuItem_alphabeticModifiers=19;
    /**
     * <p>
     * @attr description
     * The numeric modifier key. This is the modifier when using a numeric (for example,
     * 12-key) keyboard. The values should be kept in sync with KeyEvent
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>ALT</td><td>2</td><td></td></tr>
     * <tr><td>CTRL</td><td>1000</td><td></td></tr>
     * <tr><td>FUNCTION</td><td>8</td><td></td></tr>
     * <tr><td>META</td><td>10000</td><td></td></tr>
     * <tr><td>SHIFT</td><td>1</td><td></td></tr>
     * <tr><td>SYM</td><td>4</td><td></td></tr>
     * </table>
     *
     * @attr name android:numericModifiers
     */
    public static final int MenuItem_numericModifiers=20;
    /**
     * <p>
     * @attr description
     * Tint to apply to the icon.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:iconTint
     */
    public static final int MenuItem_iconTint=21;
    /**
     * <p>
     * @attr description
     * Blending mode used to apply the icon tint.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and icon color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the icon with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the icon, but with the icon’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the icon. The icon’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the icon.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     *
     * @attr name android:iconTintMode
     */
    public static final int MenuItem_iconTintMode=22;
    /**
     * State array representing a menu item that is currently focused and checked.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #MenuItemCheckedFocusedState_state_focused android:state_focused}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view has input focus.</td></tr>
     * <tr><td><code>{@link #MenuItemCheckedFocusedState_state_checkable android:state_checkable}</code></td><td>State identifier indicating that the object <var>may</var> display a check mark.</td></tr>
     * <tr><td><code>{@link #MenuItemCheckedFocusedState_state_checked android:state_checked}</code></td><td>State identifier indicating that the object is currently checked.</td></tr>
     * </table>
     * @see #MenuItemCheckedFocusedState_state_focused
     * @see #MenuItemCheckedFocusedState_state_checkable
     * @see #MenuItemCheckedFocusedState_state_checked
     */
    public static final int[] MenuItemCheckedFocusedState={
      0x0101009c, 0x0101009f, 0x010100a0
    };
    /**
     * <p>
     * @attr description
     * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view has input focus.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_focused
     */
    public static final int MenuItemCheckedFocusedState_state_focused=0;
    /**
     * <p>
     * @attr description
     * State identifier indicating that the object <var>may</var> display a check mark. See
     * {@link android.R.attr#state_checked} for the identifier that indicates whether it is
     * actually checked.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_checkable
     */
    public static final int MenuItemCheckedFocusedState_state_checkable=1;
    /**
     * <p>
     * @attr description
     * State identifier indicating that the object is currently checked.  See
     * {@link android.R.attr#state_checkable} for an additional identifier that can indicate
     * if any object may ever display a check, regardless of whether state_checked is
     * currently set.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_checked
     */
    public static final int MenuItemCheckedFocusedState_state_checked=2;
    /**
     * State array representing a menu item that is currently checked.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #MenuItemCheckedState_state_checkable android:state_checkable}</code></td><td>State identifier indicating that the object <var>may</var> display a check mark.</td></tr>
     * <tr><td><code>{@link #MenuItemCheckedState_state_checked android:state_checked}</code></td><td>State identifier indicating that the object is currently checked.</td></tr>
     * </table>
     * @see #MenuItemCheckedState_state_checkable
     * @see #MenuItemCheckedState_state_checked
     */
    public static final int[] MenuItemCheckedState={
      0x0101009f, 0x010100a0
    };
    /**
     * <p>
     * @attr description
     * State identifier indicating that the object <var>may</var> display a check mark. See
     * {@link android.R.attr#state_checked} for the identifier that indicates whether it is
     * actually checked.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_checkable
     */
    public static final int MenuItemCheckedState_state_checkable=0;
    /**
     * <p>
     * @attr description
     * State identifier indicating that the object is currently checked.  See
     * {@link android.R.attr#state_checkable} for an additional identifier that can indicate
     * if any object may ever display a check, regardless of whether state_checked is
     * currently set.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_checked
     */
    public static final int MenuItemCheckedState_state_checked=1;
    /**
     * State array representing a menu item that is focused and checkable but is not currently checked.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #MenuItemUncheckedFocusedState_state_focused android:state_focused}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view has input focus.</td></tr>
     * <tr><td><code>{@link #MenuItemUncheckedFocusedState_state_checkable android:state_checkable}</code></td><td>State identifier indicating that the object <var>may</var> display a check mark.</td></tr>
     * </table>
     * @see #MenuItemUncheckedFocusedState_state_focused
     * @see #MenuItemUncheckedFocusedState_state_checkable
     */
    public static final int[] MenuItemUncheckedFocusedState={
      0x0101009c, 0x0101009f
    };
    /**
     * <p>
     * @attr description
     * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view has input focus.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_focused
     */
    public static final int MenuItemUncheckedFocusedState_state_focused=0;
    /**
     * <p>
     * @attr description
     * State identifier indicating that the object <var>may</var> display a check mark. See
     * {@link android.R.attr#state_checked} for the identifier that indicates whether it is
     * actually checked.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_checkable
     */
    public static final int MenuItemUncheckedFocusedState_state_checkable=1;
    /**
     * State array representing a menu item that is checkable but is not currently checked.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #MenuItemUncheckedState_state_checkable android:state_checkable}</code></td><td>State identifier indicating that the object <var>may</var> display a check mark.</td></tr>
     * </table>
     * @see #MenuItemUncheckedState_state_checkable
     */
    public static final int[] MenuItemUncheckedState={
      0x0101009f
    };
    /**
     * <p>
     * @attr description
     * State identifier indicating that the object <var>may</var> display a check mark. See
     * {@link android.R.attr#state_checked} for the identifier that indicates whether it is
     * actually checked.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_checkable
     */
    public static final int MenuItemUncheckedState_state_checkable=0;
    /**
     * Attributes that can be used with a MenuView.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #MenuView_windowAnimationStyle android:windowAnimationStyle}</code></td><td>Reference to a style resource holding
     * the set of window animations to use, which can be
     * any of the attributes defined by
     * {@link android.R.styleable#WindowAnimation}.</td></tr>
     * <tr><td><code>{@link #MenuView_itemTextAppearance android:itemTextAppearance}</code></td><td>Default appearance of menu item text.</td></tr>
     * <tr><td><code>{@link #MenuView_horizontalDivider android:horizontalDivider}</code></td><td>Default horizontal divider between rows of menu items.</td></tr>
     * <tr><td><code>{@link #MenuView_verticalDivider android:verticalDivider}</code></td><td>Default vertical divider between menu items.</td></tr>
     * <tr><td><code>{@link #MenuView_headerBackground android:headerBackground}</code></td><td>Default background for the menu header.</td></tr>
     * <tr><td><code>{@link #MenuView_itemBackground android:itemBackground}</code></td><td>Default background for each menu item.</td></tr>
     * <tr><td><code>{@link #MenuView_itemIconDisabledAlpha android:itemIconDisabledAlpha}</code></td><td>Default disabled icon alpha for each menu item that shows an icon.</td></tr>
     * <tr><td><code>{@link #MenuView_subMenuArrow android:subMenuArrow}</code></td><td>Drawable for the arrow icon indicating a particular item is a submenu.</td></tr>
     * </table>
     * @see #MenuView_windowAnimationStyle
     * @see #MenuView_itemTextAppearance
     * @see #MenuView_horizontalDivider
     * @see #MenuView_verticalDivider
     * @see #MenuView_headerBackground
     * @see #MenuView_itemBackground
     * @see #MenuView_itemIconDisabledAlpha
     * @see #MenuView_subMenuArrow
     */
    public static final int[] MenuView={
      0x010100ae, 0x0101012c, 0x0101012d, 0x0101012e, 
      0x0101012f, 0x01010130, 0x01010131, 0x010104f3, 
      0x011200c2
    };
    /**
     * <p>
     * @attr description
     * Default animations for the menu.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:windowAnimationStyle
     */
    public static final int MenuView_windowAnimationStyle=0;
    /**
     * <p>
     * @attr description
     * Default appearance of menu item text.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:itemTextAppearance
     */
    public static final int MenuView_itemTextAppearance=1;
    /**
     * <p>
     * @attr description
     * Default horizontal divider between rows of menu items.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:horizontalDivider
     */
    public static final int MenuView_horizontalDivider=2;
    /**
     * <p>
     * @attr description
     * Default vertical divider between menu items.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:verticalDivider
     */
    public static final int MenuView_verticalDivider=3;
    /**
     * <p>
     * @attr description
     * Default background for the menu header.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:headerBackground
     */
    public static final int MenuView_headerBackground=4;
    /**
     * <p>
     * @attr description
     * Default background for each menu item.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:itemBackground
     */
    public static final int MenuView_itemBackground=5;
    /**
     * <p>
     * @attr description
     * Default disabled icon alpha for each menu item that shows an icon.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:itemIconDisabledAlpha
     */
    public static final int MenuView_itemIconDisabledAlpha=6;
    /**
     * <p>
     * @attr description
     * Drawable for the arrow icon indicating a particular item is a submenu.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:subMenuArrow
     */
    public static final int MenuView_subMenuArrow=7;
    /**
     * Attributes that can be used with a MessagingLinearLayout.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #MessagingLinearLayout_spacing android:spacing}</code></td><td></td></tr>
     * </table>
     * @see #MessagingLinearLayout_spacing
     */
    public static final int[] MessagingLinearLayout={
      0x01010113
    };
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#spacing}
     * attribute's value can be found in the {@link #MessagingLinearLayout} array.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:spacing
     */
    public static final int MessagingLinearLayout_spacing=0;
    /**
     * Attributes that can be used with a MultiSelectListPreference.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #MultiSelectListPreference_entries android:entries}</code></td><td>Reference to an array resource that will populate a list/adapter.</td></tr>
     * <tr><td><code>{@link #MultiSelectListPreference_entryValues android:entryValues}</code></td><td>The array to find the value to save for a preference when an entry from
     * entries is selected.</td></tr>
     * </table>
     * @see #MultiSelectListPreference_entries
     * @see #MultiSelectListPreference_entryValues
     */
    public static final int[] MultiSelectListPreference={
      0x010100b2, 0x010101f8
    };
    /**
     * <p>
     * @attr description
     * The human-readable array to present as a list. Each entry must have a corresponding
     * index in entryValues.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:entries
     */
    public static final int MultiSelectListPreference_entries=0;
    /**
     * <p>
     * @attr description
     * The array to find the value to save for a preference when an entry from
     * entries is selected. If a user clicks the second item in entries, the
     * second item in this array will be saved to the preference.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:entryValues
     */
    public static final int MultiSelectListPreference_entryValues=1;
    /**
     * Specify one or more <code>nfcid2-filter</code> elements inside a
     * <code>host-nfcf-service</code> element to specify a NFCID2
     * your service can handle.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Nfcid2Filter_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * </table>
     * @see #Nfcid2Filter_name
     */
    public static final int[] Nfcid2Filter={
      0x01010003
    };
    /**
     * <p>
     * @attr description
     * The NFCID2. This attribute is mandatory.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int Nfcid2Filter_name=0;
    /**
     * Drawable used to draw 9-patches.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #NinePatchDrawable_src android:src}</code></td><td>Sets a drawable as the content of this ImageView.</td></tr>
     * <tr><td><code>{@link #NinePatchDrawable_dither android:dither}</code></td><td>Enables or disables dithering of the bitmap if the bitmap does not have the
     * same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
     * an RGB 565 screen).</td></tr>
     * <tr><td><code>{@link #NinePatchDrawable_tint android:tint}</code></td><td>The tinting color for the image.</td></tr>
     * <tr><td><code>{@link #NinePatchDrawable_alpha android:alpha}</code></td><td>alpha property of the view, as a value between 0 (completely transparent) and 1
     * (completely opaque).</td></tr>
     * <tr><td><code>{@link #NinePatchDrawable_autoMirrored android:autoMirrored}</code></td><td>Indicates if the drawable needs to be mirrored when its layout direction is
     * RTL (right-to-left).</td></tr>
     * <tr><td><code>{@link #NinePatchDrawable_tintMode android:tintMode}</code></td><td>When a tint color is set, specifies its Porter-Duff blending mode.</td></tr>
     * </table>
     * @see #NinePatchDrawable_src
     * @see #NinePatchDrawable_dither
     * @see #NinePatchDrawable_tint
     * @see #NinePatchDrawable_alpha
     * @see #NinePatchDrawable_autoMirrored
     * @see #NinePatchDrawable_tintMode
     */
    public static final int[] NinePatchDrawable={
      0x01010119, 0x0101011c, 0x01010121, 0x0101031f, 
      0x010103ea, 0x010103fb
    };
    /**
     * <p>
     * @attr description
     * Identifier of the bitmap file. This attribute is mandatory.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:src
     */
    public static final int NinePatchDrawable_src=0;
    /**
     * <p>
     * @attr description
     * Enables or disables dithering of the bitmap if the bitmap does not have the
     * same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
     * an RGB 565 screen).
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:dither
     */
    public static final int NinePatchDrawable_dither=1;
    /**
     * <p>
     * @attr description
     * If set, specifies the color to apply to the drawable as a tint. By default,
     * no tint is applied. May be a color state list.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:tint
     */
    public static final int NinePatchDrawable_tint=2;
    /**
     * <p>
     * @attr description
     * Specifies the alpha multiplier to apply to the base drawable.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:alpha
     */
    public static final int NinePatchDrawable_alpha=3;
    /**
     * <p>
     * @attr description
     * Indicates if the drawable needs to be mirrored when its layout direction is
     * RTL (right-to-left).
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:autoMirrored
     */
    public static final int NinePatchDrawable_autoMirrored=4;
    /**
     * <p>
     * @attr description
     * When a tint color is set, specifies its Porter-Duff blending mode. The
     * default value is src_in, which treats the drawable as an alpha mask.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     *
     * @attr name android:tintMode
     */
    public static final int NinePatchDrawable_tintMode=5;
    /**
     * @hide
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * </table>
     */
    public static final int[] NotificationTheme={
      0x01120094, 0x01120095, 0x01120096, 0x01120097
    };
    /**
     * Attributes that can be used with a NumberPicker.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #NumberPicker_selectionDividerHeight android:selectionDividerHeight}</code></td><td>The height of the selection divider.</td></tr>
     * </table>
     * @see #NumberPicker_selectionDividerHeight
     */
    public static final int[] NumberPicker={
      0x0101034a, 0x01010598, 0x0112005e, 0x01120063, 
      0x01120064, 0x01120065, 0x01120066, 0x01120067, 
      0x011200d9, 0x011200da, 0x01120106
    };
    /**
     * <p>
     * @attr description
     * @hide Color for the solid color background if such for optimized rendering.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:solidColor
     */
    public static final int NumberPicker_solidColor=0;
    /**
     * <p>
     * @attr description
     * The height of the selection divider.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:selectionDividerHeight
     */
    public static final int NumberPicker_selectionDividerHeight=1;
    /**
     * Use <code>offhost-apdu-service</code> as the root tag of the XML resource that
     * describes an {@link android.nfc.cardemulation.OffHostApduService}
     * service, which is referenced from its
     * {@link android.nfc.cardemulation.OffHostApduService#SERVICE_META_DATA} entry.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #OffHostApduService_description android:description}</code></td><td>Descriptive text for the associated data.</td></tr>
     * <tr><td><code>{@link #OffHostApduService_settingsActivity android:settingsActivity}</code></td><td>Fully qualified class name of an activity that allows the user to modify
     * the settings for this service.</td></tr>
     * <tr><td><code>{@link #OffHostApduService_requireDeviceUnlock android:requireDeviceUnlock}</code></td><td>Whether the device must be unlocked before routing data to this service.</td></tr>
     * <tr><td><code>{@link #OffHostApduService_apduServiceBanner android:apduServiceBanner}</code></td><td>A drawable that can be rendered in Android's system UI for representing
     * the service.</td></tr>
     * <tr><td><code>{@link #OffHostApduService_secureElementName android:secureElementName}</code></td><td>Secure Element which the AIDs should be routed to</td></tr>
     * <tr><td><code>{@link #OffHostApduService_requireDeviceScreenOn android:requireDeviceScreenOn}</code></td><td>Whether the device must be screen on before routing data to this service.</td></tr>
     * </table>
     * @see #OffHostApduService_description
     * @see #OffHostApduService_settingsActivity
     * @see #OffHostApduService_requireDeviceUnlock
     * @see #OffHostApduService_apduServiceBanner
     * @see #OffHostApduService_secureElementName
     * @see #OffHostApduService_requireDeviceScreenOn
     */
    public static final int[] OffHostApduService={
      0x01010020, 0x01010225, 0x010103ec, 0x010103ed, 
      0x01010602, 0x0101061d
    };
    /**
     * <p>
     * @attr description
     * Short description of the functionality the service implements. This attribute
     * is mandatory.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:description
     */
    public static final int OffHostApduService_description=0;
    /**
     * <p>
     * @attr description
     * Component name of an activity that allows the user to modify
     * the settings for this service.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:settingsActivity
     */
    public static final int OffHostApduService_settingsActivity=1;
    /**
     * <p>
     * @attr description
     * Whether the device must be unlocked before routing data to this service.
     * The default is false.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:requireDeviceUnlock
     */
    public static final int OffHostApduService_requireDeviceUnlock=2;
    /**
     * <p>
     * @attr description
     * A drawable that can be rendered in Android's system UI for representing
     * the service.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:apduServiceBanner
     */
    public static final int OffHostApduService_apduServiceBanner=3;
    /**
     * <p>
     * @attr description
     * Secure Element which the AIDs should be routed to
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:secureElementName
     */
    public static final int OffHostApduService_secureElementName=4;
    /**
     * <p>
     * @attr description
     * Whether the device must be screen on before routing data to this service.
     * The default is false.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:requireDeviceScreenOn
     */
    public static final int OffHostApduService_requireDeviceScreenOn=5;
    /**
     * Use <code>on-device-recognition-service</code> as the root tag of the XML resource that
     * describes a {@link android.service.speech.RecognitionService}, which is referenced
     * from its {@link android.service.speech.RecognitionService#SERVICE_META_DATA} meta-data
     * entry.
     * @hide
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #OnDeviceRecognitionService_settingsActivity android:settingsActivity}</code></td><td>Fully qualified class name of an activity that allows the user to modify
     * the settings for this service.</td></tr>
     * </table>
     * @see #OnDeviceRecognitionService_settingsActivity
     */
    @android.annotation.SystemApi
    public static final int[] OnDeviceRecognitionService={
      0x01010225
    };
    /**
     * <p>
     * @attr description
     * Fully qualified class name of an activity that allows the user to modify
     * the settings for this service.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:settingsActivity
     */
    public static final int OnDeviceRecognitionService_settingsActivity=0;
    /**
     * Attributes that can be used with a OvershootInterpolator.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #OvershootInterpolator_tension android:tension}</code></td><td>This is the amount of tension.</td></tr>
     * </table>
     * @see #OvershootInterpolator_tension
     */
    public static final int[] OvershootInterpolator={
      0x0101026a
    };
    /**
     * <p>
     * @attr description
     * This is the amount of tension.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:tension
     */
    public static final int OvershootInterpolator_tension=0;
    /**
     * PagedView specific attributes. These attributes are used to customize
     * a PagedView view in XML files.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * </table>
     */
    public static final int[] PagedView={
      0x0112009c, 0x011200d2, 0x011200d3
    };
    /**
     * Attributes that can be used with a PathInterpolator.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #PathInterpolator_controlX1 android:controlX1}</code></td><td>The x coordinate of the first control point of the cubic Bezier.</td></tr>
     * <tr><td><code>{@link #PathInterpolator_controlY1 android:controlY1}</code></td><td>The y coordinate of the first control point of the cubic Bezier.</td></tr>
     * <tr><td><code>{@link #PathInterpolator_controlX2 android:controlX2}</code></td><td>The x coordinate of the second control point of the cubic Bezier.</td></tr>
     * <tr><td><code>{@link #PathInterpolator_controlY2 android:controlY2}</code></td><td>The y coordinate of the second control point of the cubic Bezier.</td></tr>
     * <tr><td><code>{@link #PathInterpolator_pathData android:pathData}</code></td><td>The specification of the operations that define the path.</td></tr>
     * </table>
     * @see #PathInterpolator_controlX1
     * @see #PathInterpolator_controlY1
     * @see #PathInterpolator_controlX2
     * @see #PathInterpolator_controlY2
     * @see #PathInterpolator_pathData
     */
    public static final int[] PathInterpolator={
      0x010103fc, 0x010103fd, 0x010103fe, 0x010103ff, 
      0x01010405
    };
    /**
     * <p>
     * @attr description
     * The x coordinate of the first control point of the cubic Bezier.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:controlX1
     */
    public static final int PathInterpolator_controlX1=0;
    /**
     * <p>
     * @attr description
     * The y coordinate of the first control point of the cubic Bezier.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:controlY1
     */
    public static final int PathInterpolator_controlY1=1;
    /**
     * <p>
     * @attr description
     * The x coordinate of the second control point of the cubic Bezier.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:controlX2
     */
    public static final int PathInterpolator_controlX2=2;
    /**
     * <p>
     * @attr description
     * The y coordinate of the second control point of the cubic Bezier.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:controlY2
     */
    public static final int PathInterpolator_controlY2=3;
    /**
     * <p>
     * @attr description
     * The control points defined as a path.
     * When pathData is defined, then both of the control points of the
     * cubic Bezier will be ignored.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:pathData
     */
    public static final int PathInterpolator_pathData=4;
    /**
     * Use <code>patternPathMotion</code> as the root tag of the XML resource that
     * describes a {@link android.transition.PatternPathMotion}. This must be used
     * within a transition with which the PathMotion should be associated.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #PatternPathMotion_patternPathData android:patternPathData}</code></td><td>The path string describing the pattern to use for the PathPathMotion.</td></tr>
     * </table>
     * @see #PatternPathMotion_patternPathData
     */
    public static final int[] PatternPathMotion={
      0x010104ca
    };
    /**
     * <p>
     * @attr description
     * The path string describing the pattern to use for the PathPathMotion.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:patternPathData
     */
    public static final int PatternPathMotion_patternPathData=0;
    /**
     * Attributes that can be used with a Pointer.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * </table>
     */
    public static final int[] Pointer={
      0x011200a1, 0x011200a2, 0x011200a3, 0x011200a4, 
      0x011200a5, 0x011200a6, 0x011200a7, 0x011200a8, 
      0x011200a9, 0x011200aa, 0x011200ab, 0x011200ac, 
      0x011200ad, 0x011200ae, 0x011200af, 0x011200b0, 
      0x011200b1, 0x011200b2, 0x011200b3, 0x011200b4, 
      0x011200b5, 0x011200b6, 0x011200b7, 0x011200b8
    };
    /**
     * Attributes that can be used with a PointerIcon.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #PointerIcon_bitmap android:bitmap}</code></td><td>Drawable to use as the icon bitmap.</td></tr>
     * <tr><td><code>{@link #PointerIcon_hotSpotX android:hotSpotX}</code></td><td>X coordinate of the icon hot spot.</td></tr>
     * <tr><td><code>{@link #PointerIcon_hotSpotY android:hotSpotY}</code></td><td>Y coordinate of the icon hot spot.</td></tr>
     * </table>
     * @see #PointerIcon_bitmap
     * @see #PointerIcon_hotSpotX
     * @see #PointerIcon_hotSpotY
     */
    public static final int[] PointerIcon={
      0x01010516, 0x01010517, 0x01010518
    };
    /**
     * <p>
     * @attr description
     * Drawable to use as the icon bitmap.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:bitmap
     */
    public static final int PointerIcon_bitmap=0;
    /**
     * <p>
     * @attr description
     * X coordinate of the icon hot spot.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:hotSpotX
     */
    public static final int PointerIcon_hotSpotX=1;
    /**
     * <p>
     * @attr description
     * Y coordinate of the icon hot spot.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:hotSpotY
     */
    public static final int PointerIcon_hotSpotY=2;
    /**
     * Attributes that can be used with a PopupWindow.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #PopupWindow_popupBackground android:popupBackground}</code></td><td>The background to use for the popup window.</td></tr>
     * <tr><td><code>{@link #PopupWindow_popupAnimationStyle android:popupAnimationStyle}</code></td><td>The animation style to use for the popup window.</td></tr>
     * <tr><td><code>{@link #PopupWindow_overlapAnchor android:overlapAnchor}</code></td><td>Whether the popup window should overlap its anchor view.</td></tr>
     * <tr><td><code>{@link #PopupWindow_popupElevation android:popupElevation}</code></td><td>Window elevation to use for the popup window.</td></tr>
     * <tr><td><code>{@link #PopupWindow_popupEnterTransition android:popupEnterTransition}</code></td><td>Transition used to move views into the popup window.</td></tr>
     * <tr><td><code>{@link #PopupWindow_popupExitTransition android:popupExitTransition}</code></td><td>Transition used to move views out of the popup window.</td></tr>
     * </table>
     * @see #PopupWindow_popupBackground
     * @see #PopupWindow_popupAnimationStyle
     * @see #PopupWindow_overlapAnchor
     * @see #PopupWindow_popupElevation
     * @see #PopupWindow_popupEnterTransition
     * @see #PopupWindow_popupExitTransition
     */
    public static final int[] PopupWindow={
      0x01010176, 0x010102c9, 0x01010462, 0x0101048c, 
      0x0101051f, 0x01010520
    };
    /**
     * <p>
     * @attr description
     * The background to use for the popup window.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:popupBackground
     */
    public static final int PopupWindow_popupBackground=0;
    /**
     * <p>
     * @attr description
     * The animation style to use for the popup window.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:popupAnimationStyle
     */
    public static final int PopupWindow_popupAnimationStyle=1;
    /**
     * <p>
     * @attr description
     * Whether the popup window should overlap its anchor view.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:overlapAnchor
     */
    public static final int PopupWindow_overlapAnchor=2;
    /**
     * <p>
     * @attr description
     * Window elevation to use for the popup window.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:popupElevation
     */
    public static final int PopupWindow_popupElevation=3;
    /**
     * <p>
     * @attr description
     * Transition used to move views into the popup window.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:popupEnterTransition
     */
    public static final int PopupWindow_popupEnterTransition=4;
    /**
     * <p>
     * @attr description
     * Transition used to move views out of the popup window.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:popupExitTransition
     */
    public static final int PopupWindow_popupExitTransition=5;
    /**
     * Attributes that can be used with a PopupWindowBackgroundState.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #PopupWindowBackgroundState_state_above_anchor android:state_above_anchor}</code></td><td>State identifier indicating the popup will be above the anchor.</td></tr>
     * </table>
     * @see #PopupWindowBackgroundState_state_above_anchor
     */
    public static final int[] PopupWindowBackgroundState={
      0x010100aa
    };
    /**
     * <p>
     * @attr description
     * State identifier indicating the popup will be above the anchor.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_above_anchor
     */
    public static final int PopupWindowBackgroundState_state_above_anchor=0;
    /**
     * Base attributes available to Preference.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Preference_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
     * associated item.</td></tr>
     * <tr><td><code>{@link #Preference_persistent android:persistent}</code></td><td>Flag to control special persistent mode of an application.</td></tr>
     * <tr><td><code>{@link #Preference_enabled android:enabled}</code></td><td>Specifies whether the widget is enabled.</td></tr>
     * <tr><td><code>{@link #Preference_layout android:layout}</code></td><td>Supply an identifier for the layout resource to inflate when the ViewStub
     * becomes visible or when forced to do so.</td></tr>
     * <tr><td><code>{@link #Preference_title android:title}</code></td><td>The title associated with the item.</td></tr>
     * <tr><td><code>{@link #Preference_selectable android:selectable}</code></td><td>Whether the Preference is selectable.</td></tr>
     * <tr><td><code>{@link #Preference_key android:key}</code></td><td>The key to store the Preference value.</td></tr>
     * <tr><td><code>{@link #Preference_summary android:summary}</code></td><td>The summary for the item.</td></tr>
     * <tr><td><code>{@link #Preference_order android:order}</code></td><td>The order for the Preference (lower values are to be ordered first).</td></tr>
     * <tr><td><code>{@link #Preference_widgetLayout android:widgetLayout}</code></td><td>The layout for the controllable widget portion of a Preference.</td></tr>
     * <tr><td><code>{@link #Preference_dependency android:dependency}</code></td><td>The key of another Preference that this Preference will depend on.</td></tr>
     * <tr><td><code>{@link #Preference_defaultValue android:defaultValue}</code></td><td>The default value for the preference, which will be set either if persistence
     * is off or persistence is on and the preference is not found in the persistent
     * storage.</td></tr>
     * <tr><td><code>{@link #Preference_shouldDisableView android:shouldDisableView}</code></td><td>Whether the view of this Preference should be disabled when
     * this Preference is disabled.</td></tr>
     * <tr><td><code>{@link #Preference_fragment android:fragment}</code></td><td>The fragment that is displayed when the user selects this item.</td></tr>
     * <tr><td><code>{@link #Preference_recycleEnabled android:recycleEnabled}</code></td><td>Whether the preference has enabled to have its view recycled when used in the list
     * view.</td></tr>
     * <tr><td><code>{@link #Preference_singleLineTitle android:singleLineTitle}</code></td><td>Whether to use single line for the preference title text.</td></tr>
     * <tr><td><code>{@link #Preference_iconSpaceReserved android:iconSpaceReserved}</code></td><td>Whether the space for the preference icon view will be reserved.</td></tr>
     * </table>
     * @see #Preference_icon
     * @see #Preference_persistent
     * @see #Preference_enabled
     * @see #Preference_layout
     * @see #Preference_title
     * @see #Preference_selectable
     * @see #Preference_key
     * @see #Preference_summary
     * @see #Preference_order
     * @see #Preference_widgetLayout
     * @see #Preference_dependency
     * @see #Preference_defaultValue
     * @see #Preference_shouldDisableView
     * @see #Preference_fragment
     * @see #Preference_recycleEnabled
     * @see #Preference_singleLineTitle
     * @see #Preference_iconSpaceReserved
     */
    public static final int[] Preference={
      0x01010002, 0x0101000d, 0x0101000e, 0x010100f2, 
      0x010101e1, 0x010101e6, 0x010101e8, 0x010101e9, 
      0x010101ea, 0x010101eb, 0x010101ec, 0x010101ed, 
      0x010101ee, 0x010102e3, 0x01010559, 0x0101055c, 
      0x01010561
    };
    /**
     * <p>
     * @attr description
     * The optional icon for the preference.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:icon
     */
    public static final int Preference_icon=0;
    /**
     * <p>
     * @attr description
     * Whether the Preference stores its value to the storage.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:persistent
     */
    public static final int Preference_persistent=1;
    /**
     * <p>
     * @attr description
     * Whether the Preference is enabled.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:enabled
     */
    public static final int Preference_enabled=2;
    /**
     * <p>
     * @attr description
     * The layout for the Preference in a PreferenceActivity screen. This should
     * rarely need to be changed, look at widgetLayout instead.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:layout
     */
    public static final int Preference_layout=3;
    /**
     * <p>
     * @attr description
     * The title for the Preference. In API 25 and earlier, this value is read as a
     * plain string with styling information stripped.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:title
     */
    public static final int Preference_title=4;
    /**
     * <p>
     * @attr description
     * Whether the Preference is selectable.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:selectable
     */
    public static final int Preference_selectable=5;
    /**
     * <p>
     * @attr description
     * The key to store the Preference value.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:key
     */
    public static final int Preference_key=6;
    /**
     * <p>
     * @attr description
     * The summary for the Preference. In API 25 and earlier, this value is read as a
     * plain string with styling information stripped.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:summary
     */
    public static final int Preference_summary=7;
    /**
     * <p>
     * @attr description
     * The order for the Preference (lower values are to be ordered first). If this is not
     * specified, the default ordering will be alphabetic.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:order
     */
    public static final int Preference_order=8;
    /**
     * <p>
     * @attr description
     * The layout for the controllable widget portion of a Preference. This is inflated
     * into the layout for a Preference and should be used more frequently than
     * the layout attribute. For example, a checkbox preference would specify
     * a custom layout (consisting of just the CheckBox) here.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:widgetLayout
     */
    public static final int Preference_widgetLayout=9;
    /**
     * <p>
     * @attr description
     * The key of another Preference that this Preference will depend on.  If the other
     * Preference is not set or is off, this Preference will be disabled.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:dependency
     */
    public static final int Preference_dependency=10;
    /**
     * <p>
     * @attr description
     * The default value for the preference, which will be set either if persistence
     * is off or persistence is on and the preference is not found in the persistent
     * storage.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:defaultValue
     */
    public static final int Preference_defaultValue=11;
    /**
     * <p>
     * @attr description
     * Whether the view of this Preference should be disabled when
     * this Preference is disabled.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:shouldDisableView
     */
    public static final int Preference_shouldDisableView=12;
    /**
     * <p>
     * @attr description
     * When used inside of a modern PreferenceActivity, this declares
     * a new PreferenceFragment to be shown when the user selects this item.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:fragment
     */
    public static final int Preference_fragment=13;
    /**
     * <p>
     * @attr description
     * Whether the preference has enabled to have its view recycled when used in the list
     * view. This is true by default.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:recycleEnabled
     */
    public static final int Preference_recycleEnabled=14;
    /**
     * <p>
     * @attr description
     * Whether to use single line for the preference title text. By default, preference title
     * will be constrained to one line, so the default value of this attribute is true.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:singleLineTitle
     */
    public static final int Preference_singleLineTitle=15;
    /**
     * <p>
     * @attr description
     * Whether the space for the preference icon view will be reserved. By default, preference
     * icon view visibility will be set to GONE when there is no icon provided, so the default
     * value of this attribute is false.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:iconSpaceReserved
     */
    public static final int Preference_iconSpaceReserved=16;
    /**
     * Base attributes available to PreferenceActivity.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #PreferenceActivity_layout android:layout}</code></td><td>Supply an identifier for the layout resource to inflate when the ViewStub
     * becomes visible or when forced to do so.</td></tr>
     * </table>
     * @see #PreferenceActivity_layout
     */
    public static final int[] PreferenceActivity={
      0x010100f2, 0x0112005b, 0x0112005c
    };
    /**
     * <p>
     * @attr description
     * The layout for the Preference Activity. This should rarely need to be changed.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:layout
     */
    public static final int PreferenceActivity_layout=0;
    /**
     * Base attributes available to PreferenceFragment.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #PreferenceFragment_layout android:layout}</code></td><td>Supply an identifier for the layout resource to inflate when the ViewStub
     * becomes visible or when forced to do so.</td></tr>
     * <tr><td><code>{@link #PreferenceFragment_divider android:divider}</code></td><td>Drawable or color to draw between list items.</td></tr>
     * </table>
     * @see #PreferenceFragment_layout
     * @see #PreferenceFragment_divider
     */
    public static final int[] PreferenceFragment={
      0x010100f2, 0x01010129
    };
    /**
     * <p>
     * @attr description
     * The layout for the PreferenceFragment. This should rarely need to be changed.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:layout
     */
    public static final int PreferenceFragment_layout=0;
    /**
     * <p>
     * @attr description
     * Drawable or color to draw between list items.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:divider
     */
    public static final int PreferenceFragment_divider=1;
    /**
     * Attributes that can be used with a PreferenceFrameLayout.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * </table>
     */
    public static final int[] PreferenceFrameLayout={
      0x0112001b, 0x0112001c, 0x0112001d, 0x0112001e
    };
    /**
     * Attributes that can be used with a PreferenceFrameLayout_Layout.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * </table>
     */
    public static final int[] PreferenceFrameLayout_Layout={
      0x01120074
    };
    /**
     * Base attributes available to PreferenceGroup.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #PreferenceGroup_orderingFromXml android:orderingFromXml}</code></td><td>Whether to order the Preference under this group as they appear in the XML file.</td></tr>
     * </table>
     * @see #PreferenceGroup_orderingFromXml
     */
    public static final int[] PreferenceGroup={
      0x010101e7
    };
    /**
     * <p>
     * @attr description
     * Whether to order the Preference under this group as they appear in the XML file.
     * If this is false, the ordering will follow the Preference order attribute and
     * default to alphabetic for those without the order attribute.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:orderingFromXml
     */
    public static final int PreferenceGroup_orderingFromXml=0;
    /**
     * Attribute for a header describing the item shown in the top-level list
     * from which the selects the set of preference to dig in to.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #PreferenceHeader_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
     * associated item.</td></tr>
     * <tr><td><code>{@link #PreferenceHeader_id android:id}</code></td><td>Supply an identifier name for this view, to later retrieve it
     * with {@link android.view.View#findViewById View.findViewById()} or
     * {@link android.app.Activity#findViewById Activity.findViewById()}.</td></tr>
     * <tr><td><code>{@link #PreferenceHeader_title android:title}</code></td><td>The title associated with the item.</td></tr>
     * <tr><td><code>{@link #PreferenceHeader_summary android:summary}</code></td><td>The summary for the item.</td></tr>
     * <tr><td><code>{@link #PreferenceHeader_fragment android:fragment}</code></td><td>The fragment that is displayed when the user selects this item.</td></tr>
     * <tr><td><code>{@link #PreferenceHeader_breadCrumbTitle android:breadCrumbTitle}</code></td><td>The title for the bread crumb of this item.</td></tr>
     * <tr><td><code>{@link #PreferenceHeader_breadCrumbShortTitle android:breadCrumbShortTitle}</code></td><td>The short title for the bread crumb of this item.</td></tr>
     * </table>
     * @see #PreferenceHeader_icon
     * @see #PreferenceHeader_id
     * @see #PreferenceHeader_title
     * @see #PreferenceHeader_summary
     * @see #PreferenceHeader_fragment
     * @see #PreferenceHeader_breadCrumbTitle
     * @see #PreferenceHeader_breadCrumbShortTitle
     */
    public static final int[] PreferenceHeader={
      0x01010002, 0x010100d0, 0x010101e1, 0x010101e9, 
      0x010102e3, 0x01010303, 0x01010304
    };
    /**
     * <p>
     * @attr description
     * An icon for the item.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:icon
     */
    public static final int PreferenceHeader_icon=0;
    /**
     * <p>
     * @attr description
     * Identifier value for the header.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:id
     */
    public static final int PreferenceHeader_id=1;
    /**
     * <p>
     * @attr description
     * The title of the item that is shown to the user.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:title
     */
    public static final int PreferenceHeader_title=2;
    /**
     * <p>
     * @attr description
     * The summary for the item.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:summary
     */
    public static final int PreferenceHeader_summary=3;
    /**
     * <p>
     * @attr description
     * The fragment that is displayed when the user selects this item.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:fragment
     */
    public static final int PreferenceHeader_fragment=4;
    /**
     * <p>
     * @attr description
     * The title for the bread crumb of this item.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:breadCrumbTitle
     */
    public static final int PreferenceHeader_breadCrumbTitle=5;
    /**
     * <p>
     * @attr description
     * The short title for the bread crumb of this item.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:breadCrumbShortTitle
     */
    public static final int PreferenceHeader_breadCrumbShortTitle=6;
    /**
     * Base attributes available to PreferenceScreen.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #PreferenceScreen_divider android:divider}</code></td><td>Drawable or color to draw between list items.</td></tr>
     * </table>
     * @see #PreferenceScreen_divider
     */
    public static final int[] PreferenceScreen={
      0x01010129, 0x011200d0
    };
    /**
     * <p>
     * @attr description
     * Drawable or color to draw between list items.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:divider
     */
    public static final int PreferenceScreen_divider=0;
    /**
     * Use <code>print-service</code> as the root tag of the XML resource that
     * describes an {@link android.printservice.PrintService} service, which is
     * referenced from its {@link android.printservice.PrintService#SERVICE_META_DATA}
     * meta-data entry.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #PrintService_settingsActivity android:settingsActivity}</code></td><td>Fully qualified class name of an activity that allows the user to modify
     * the settings for this service.</td></tr>
     * <tr><td><code>{@link #PrintService_addPrintersActivity android:addPrintersActivity}</code></td><td>Fully qualified class name of an activity that allows the user to manually
     * add printers to this print service.</td></tr>
     * <tr><td><code>{@link #PrintService_vendor android:vendor}</code></td><td>The vendor name if this print service is vendor specific.</td></tr>
     * <tr><td><code>{@link #PrintService_advancedPrintOptionsActivity android:advancedPrintOptionsActivity}</code></td><td>Fully qualified class name of an activity with advanced print options
     * specific to this print service.</td></tr>
     * </table>
     * @see #PrintService_settingsActivity
     * @see #PrintService_addPrintersActivity
     * @see #PrintService_vendor
     * @see #PrintService_advancedPrintOptionsActivity
     */
    public static final int[] PrintService={
      0x01010225, 0x010103e6, 0x010103e7, 0x010103f1
    };
    /**
     * <p>
     * @attr description
     * Fully qualified class name of an activity that allows the user to modify
     * the settings for this service.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:settingsActivity
     */
    public static final int PrintService_settingsActivity=0;
    /**
     * <p>
     * @attr description
     * Fully qualified class name of an activity that allows the user to manually
     * add printers to this print service.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:addPrintersActivity
     */
    public static final int PrintService_addPrintersActivity=1;
    /**
     * <p>
     * @attr description
     * The vendor name if this print service is vendor specific.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:vendor
     */
    public static final int PrintService_vendor=2;
    /**
     * <p>
     * @attr description
     * Fully qualified class name of an activity with advanced print options
     * specific to this print service.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:advancedPrintOptionsActivity
     */
    public static final int PrintService_advancedPrintOptionsActivity=3;
    /**
     * Attributes that can be used with a ProgressBar.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ProgressBar_maxWidth android:maxWidth}</code></td><td>An optional argument to supply a maximum width for this view.</td></tr>
     * <tr><td><code>{@link #ProgressBar_maxHeight android:maxHeight}</code></td><td>An optional argument to supply a maximum height for this view.</td></tr>
     * <tr><td><code>{@link #ProgressBar_max android:max}</code></td><td>Defines the maximum value.</td></tr>
     * <tr><td><code>{@link #ProgressBar_progress android:progress}</code></td><td>Defines the default progress value, between 0 and max.</td></tr>
     * <tr><td><code>{@link #ProgressBar_secondaryProgress android:secondaryProgress}</code></td><td>Defines the secondary progress value, between 0 and max.</td></tr>
     * <tr><td><code>{@link #ProgressBar_indeterminate android:indeterminate}</code></td><td>Allows to enable the indeterminate mode.</td></tr>
     * <tr><td><code>{@link #ProgressBar_indeterminateOnly android:indeterminateOnly}</code></td><td>Restricts to ONLY indeterminate mode (state-keeping progress mode will not work).</td></tr>
     * <tr><td><code>{@link #ProgressBar_indeterminateDrawable android:indeterminateDrawable}</code></td><td>Drawable used for the indeterminate mode.</td></tr>
     * <tr><td><code>{@link #ProgressBar_progressDrawable android:progressDrawable}</code></td><td>Drawable used for the progress mode.</td></tr>
     * <tr><td><code>{@link #ProgressBar_indeterminateDuration android:indeterminateDuration}</code></td><td>Duration of the indeterminate animation.</td></tr>
     * <tr><td><code>{@link #ProgressBar_indeterminateBehavior android:indeterminateBehavior}</code></td><td>Defines how the indeterminate mode should behave when the progress reaches max.</td></tr>
     * <tr><td><code>{@link #ProgressBar_minWidth android:minWidth}</code></td><td></td></tr>
     * <tr><td><code>{@link #ProgressBar_minHeight android:minHeight}</code></td><td></td></tr>
     * <tr><td><code>{@link #ProgressBar_interpolator android:interpolator}</code></td><td>Sets the acceleration curve for the indeterminate animation.</td></tr>
     * <tr><td><code>{@link #ProgressBar_animationResolution android:animationResolution}</code></td><td>Timeout between frames of animation in milliseconds.</td></tr>
     * <tr><td><code>{@link #ProgressBar_mirrorForRtl android:mirrorForRtl}</code></td><td>Defines if the associated drawables need to be mirrored when in RTL mode.</td></tr>
     * <tr><td><code>{@link #ProgressBar_progressTint android:progressTint}</code></td><td>Tint to apply to the progress indicator.</td></tr>
     * <tr><td><code>{@link #ProgressBar_progressTintMode android:progressTintMode}</code></td><td>Blending mode used to apply the progress indicator tint.</td></tr>
     * <tr><td><code>{@link #ProgressBar_progressBackgroundTint android:progressBackgroundTint}</code></td><td>Tint to apply to the progress indicator background.</td></tr>
     * <tr><td><code>{@link #ProgressBar_progressBackgroundTintMode android:progressBackgroundTintMode}</code></td><td>Blending mode used to apply the progress indicator background tint.</td></tr>
     * <tr><td><code>{@link #ProgressBar_secondaryProgressTint android:secondaryProgressTint}</code></td><td>Tint to apply to the secondary progress indicator.</td></tr>
     * <tr><td><code>{@link #ProgressBar_secondaryProgressTintMode android:secondaryProgressTintMode}</code></td><td>Blending mode used to apply the secondary progress indicator tint.</td></tr>
     * <tr><td><code>{@link #ProgressBar_indeterminateTint android:indeterminateTint}</code></td><td>Tint to apply to the indeterminate progress indicator.</td></tr>
     * <tr><td><code>{@link #ProgressBar_indeterminateTintMode android:indeterminateTintMode}</code></td><td>Blending mode used to apply the indeterminate progress indicator tint.</td></tr>
     * <tr><td><code>{@link #ProgressBar_backgroundTint android:backgroundTint}</code></td><td>Tint to apply to the background.</td></tr>
     * <tr><td><code>{@link #ProgressBar_backgroundTintMode android:backgroundTintMode}</code></td><td>Blending mode used to apply the background tint.</td></tr>
     * <tr><td><code>{@link #ProgressBar_min android:min}</code></td><td>Defines the minimum value.</td></tr>
     * </table>
     * @see #ProgressBar_maxWidth
     * @see #ProgressBar_maxHeight
     * @see #ProgressBar_max
     * @see #ProgressBar_progress
     * @see #ProgressBar_secondaryProgress
     * @see #ProgressBar_indeterminate
     * @see #ProgressBar_indeterminateOnly
     * @see #ProgressBar_indeterminateDrawable
     * @see #ProgressBar_progressDrawable
     * @see #ProgressBar_indeterminateDuration
     * @see #ProgressBar_indeterminateBehavior
     * @see #ProgressBar_minWidth
     * @see #ProgressBar_minHeight
     * @see #ProgressBar_interpolator
     * @see #ProgressBar_animationResolution
     * @see #ProgressBar_mirrorForRtl
     * @see #ProgressBar_progressTint
     * @see #ProgressBar_progressTintMode
     * @see #ProgressBar_progressBackgroundTint
     * @see #ProgressBar_progressBackgroundTintMode
     * @see #ProgressBar_secondaryProgressTint
     * @see #ProgressBar_secondaryProgressTintMode
     * @see #ProgressBar_indeterminateTint
     * @see #ProgressBar_indeterminateTintMode
     * @see #ProgressBar_backgroundTint
     * @see #ProgressBar_backgroundTintMode
     * @see #ProgressBar_min
     */
    public static final int[] ProgressBar={
      0x0101011f, 0x01010120, 0x01010136, 0x01010137, 
      0x01010138, 0x01010139, 0x0101013a, 0x0101013b, 
      0x0101013c, 0x0101013d, 0x0101013e, 0x0101013f, 
      0x01010140, 0x01010141, 0x0101031a, 0x010103ce, 
      0x01010463, 0x01010464, 0x01010465, 0x01010466, 
      0x01010467, 0x01010468, 0x01010469, 0x0101046a, 
      0x0101046b, 0x0101046c, 0x01010539
    };
    /**
     * <p>
     * @attr description
     * An optional argument to supply a maximum width for this view.
     * See {see android.widget.ImageView#setMaxWidth} for details.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:maxWidth
     */
    public static final int ProgressBar_maxWidth=0;
    /**
     * <p>
     * @attr description
     * An optional argument to supply a maximum height for this view.
     * See {see android.widget.ImageView#setMaxHeight} for details.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:maxHeight
     */
    public static final int ProgressBar_maxHeight=1;
    /**
     * <p>
     * @attr description
     * Defines the maximum value.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:max
     */
    public static final int ProgressBar_max=2;
    /**
     * <p>
     * @attr description
     * Defines the default progress value, between 0 and max.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:progress
     */
    public static final int ProgressBar_progress=3;
    /**
     * <p>
     * @attr description
     * Defines the secondary progress value, between 0 and max. This progress is drawn between
     * the primary progress and the background.  It can be ideal for media scenarios such as
     * showing the buffering progress while the default progress shows the play progress.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:secondaryProgress
     */
    public static final int ProgressBar_secondaryProgress=4;
    /**
     * <p>
     * @attr description
     * Allows to enable the indeterminate mode. In this mode the progress
     * bar plays an infinite looping animation.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:indeterminate
     */
    public static final int ProgressBar_indeterminate=5;
    /**
     * <p>
     * @attr description
     * Restricts to ONLY indeterminate mode (state-keeping progress mode will not work).
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:indeterminateOnly
     */
    public static final int ProgressBar_indeterminateOnly=6;
    /**
     * <p>
     * @attr description
     * Drawable used for the indeterminate mode. One that implements Animatable offers more
     * control over the animation.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:indeterminateDrawable
     */
    public static final int ProgressBar_indeterminateDrawable=7;
    /**
     * <p>
     * @attr description
     * Drawable used for the progress mode.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:progressDrawable
     */
    public static final int ProgressBar_progressDrawable=8;
    /**
     * <p>
     * @attr description
     * Duration of the indeterminate animation. Only affects the indeterminate animation
     * if the indeterminate Drawable does not implement
     * android.graphics.drawable.Animatable.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:indeterminateDuration
     */
    public static final int ProgressBar_indeterminateDuration=9;
    /**
     * <p>
     * @attr description
     * Defines how the indeterminate mode should behave when the progress reaches max. Only
     * affects the indeterminate animation if the indeterminate Drawable does not implement
     * android.graphics.drawable.Animatable.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>cycle</td><td>2</td><td>Progress keeps the current value and goes back to 0.</td></tr>
     * <tr><td>repeat</td><td>1</td><td>Progress starts over from 0.</td></tr>
     * </table>
     *
     * @attr name android:indeterminateBehavior
     */
    public static final int ProgressBar_indeterminateBehavior=10;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#minWidth}
     * attribute's value can be found in the {@link #ProgressBar} array.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:minWidth
     */
    public static final int ProgressBar_minWidth=11;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#minHeight}
     * attribute's value can be found in the {@link #ProgressBar} array.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:minHeight
     */
    public static final int ProgressBar_minHeight=12;
    /**
     * <p>
     * @attr description
     * Sets the acceleration curve for the indeterminate animation. Defaults to a linear
     * interpolation. Only affects the indeterminate animation if the indeterminate Drawable
     * does not implement android.graphics.drawable.Animatable.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:interpolator
     */
    public static final int ProgressBar_interpolator=13;
    /**
     * <p>
     * @attr description
     * Timeout between frames of animation in milliseconds.
     * {@deprecated Not used by the framework}.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:animationResolution
     */
    @Deprecated
    public static final int ProgressBar_animationResolution=14;
    /**
     * <p>
     * @attr description
     * Defines if the associated drawables need to be mirrored when in RTL mode.
     * Default is false.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:mirrorForRtl
     */
    public static final int ProgressBar_mirrorForRtl=15;
    /**
     * <p>
     * @attr description
     * Tint to apply to the progress indicator.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:progressTint
     */
    public static final int ProgressBar_progressTint=16;
    /**
     * <p>
     * @attr description
     * Blending mode used to apply the progress indicator tint.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     *
     * @attr name android:progressTintMode
     */
    public static final int ProgressBar_progressTintMode=17;
    /**
     * <p>
     * @attr description
     * Tint to apply to the progress indicator background.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:progressBackgroundTint
     */
    public static final int ProgressBar_progressBackgroundTint=18;
    /**
     * <p>
     * @attr description
     * Blending mode used to apply the progress indicator background tint.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     *
     * @attr name android:progressBackgroundTintMode
     */
    public static final int ProgressBar_progressBackgroundTintMode=19;
    /**
     * <p>
     * @attr description
     * Tint to apply to the secondary progress indicator.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:secondaryProgressTint
     */
    public static final int ProgressBar_secondaryProgressTint=20;
    /**
     * <p>
     * @attr description
     * Blending mode used to apply the secondary progress indicator tint.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     *
     * @attr name android:secondaryProgressTintMode
     */
    public static final int ProgressBar_secondaryProgressTintMode=21;
    /**
     * <p>
     * @attr description
     * Tint to apply to the indeterminate progress indicator.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:indeterminateTint
     */
    public static final int ProgressBar_indeterminateTint=22;
    /**
     * <p>
     * @attr description
     * Blending mode used to apply the indeterminate progress indicator tint.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     *
     * @attr name android:indeterminateTintMode
     */
    public static final int ProgressBar_indeterminateTintMode=23;
    /**
     * <p>
     * @attr description
     * Tint to apply to the background.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:backgroundTint
     */
    public static final int ProgressBar_backgroundTint=24;
    /**
     * <p>
     * @attr description
     * Blending mode used to apply the background tint.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     *
     * @attr name android:backgroundTintMode
     */
    public static final int ProgressBar_backgroundTintMode=25;
    /**
     * <p>
     * @attr description
     * Defines the minimum value.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:min
     */
    public static final int ProgressBar_min=26;
    /**
     * Attributes that can be used with a PropertyAnimator.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #PropertyAnimator_propertyName android:propertyName}</code></td><td>Name of the property being animated.</td></tr>
     * <tr><td><code>{@link #PropertyAnimator_pathData android:pathData}</code></td><td>The specification of the operations that define the path.</td></tr>
     * <tr><td><code>{@link #PropertyAnimator_propertyXName android:propertyXName}</code></td><td>Name of the property being animated as the X coordinate of the pathData.</td></tr>
     * <tr><td><code>{@link #PropertyAnimator_propertyYName android:propertyYName}</code></td><td>Name of the property being animated as the Y coordinate of the pathData.</td></tr>
     * </table>
     * @see #PropertyAnimator_propertyName
     * @see #PropertyAnimator_pathData
     * @see #PropertyAnimator_propertyXName
     * @see #PropertyAnimator_propertyYName
     */
    public static final int[] PropertyAnimator={
      0x010102e1, 0x01010405, 0x01010474, 0x01010475
    };
    /**
     * <p>
     * @attr description
     * Name of the property being animated.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:propertyName
     */
    public static final int PropertyAnimator_propertyName=0;
    /**
     * <p>
     * @attr description
     * The path used to animate the properties in the ObjectAnimator.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:pathData
     */
    public static final int PropertyAnimator_pathData=1;
    /**
     * <p>
     * @attr description
     * Name of the property being animated as the X coordinate of the pathData.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:propertyXName
     */
    public static final int PropertyAnimator_propertyXName=2;
    /**
     * <p>
     * @attr description
     * Name of the property being animated as the Y coordinate of the pathData.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:propertyYName
     */
    public static final int PropertyAnimator_propertyYName=3;
    /**
     * Attributes that can be used with a PropertyValuesHolder.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #PropertyValuesHolder_valueFrom android:valueFrom}</code></td><td>Value the animation starts from.</td></tr>
     * <tr><td><code>{@link #PropertyValuesHolder_valueTo android:valueTo}</code></td><td>Value the animation animates to.</td></tr>
     * <tr><td><code>{@link #PropertyValuesHolder_valueType android:valueType}</code></td><td>The type of valueFrom and valueTo.</td></tr>
     * <tr><td><code>{@link #PropertyValuesHolder_propertyName android:propertyName}</code></td><td>Name of the property being animated.</td></tr>
     * </table>
     * @see #PropertyValuesHolder_valueFrom
     * @see #PropertyValuesHolder_valueTo
     * @see #PropertyValuesHolder_valueType
     * @see #PropertyValuesHolder_propertyName
     */
    public static final int[] PropertyValuesHolder={
      0x010102de, 0x010102df, 0x010102e0, 0x010102e1
    };
    /**
     * <p>
     * @attr description
     * Value the animation starts from.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:valueFrom
     */
    public static final int PropertyValuesHolder_valueFrom=0;
    /**
     * <p>
     * @attr description
     * Value the animation animates to.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:valueTo
     */
    public static final int PropertyValuesHolder_valueTo=1;
    /**
     * <p>
     * @attr description
     * The type of valueFrom and valueTo.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>colorType</td><td>3</td><td>values are colors, which are integers starting with "#".</td></tr>
     * <tr><td>floatType</td><td>0</td><td>The given values are floats. This is the default value if valueType is
     * unspecified. Note that if any value attribute has a color value
     * (beginning with "#"), then this attribute is ignored and the color values are
     * interpreted as integers.</td></tr>
     * <tr><td>intType</td><td>1</td><td>values are integers.</td></tr>
     * <tr><td>pathType</td><td>2</td><td>values are paths defined as strings.
     * This type is used for path morphing in AnimatedVectorDrawable.</td></tr>
     * </table>
     *
     * @attr name android:valueType
     */
    public static final int PropertyValuesHolder_valueType=2;
    /**
     * <p>
     * @attr description
     * Name of the property being animated.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:propertyName
     */
    public static final int PropertyValuesHolder_propertyName=3;
    /**
     * Use <code>quickaccesswallet-service</code> as the root tag of the XML resource
     * that describes a {@link android.service.quickaccesswallet.QuickAccessWalletService},
     * which is referenced from its
     * {@link android.service.quickaccesswallet.QuickAccessWalletService#SERVICE_META_DATA}
     * meta-data entry.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #QuickAccessWalletService_targetActivity android:targetActivity}</code></td><td>Fully qualified class name of an activity that allows the user to view
     * their entire wallet</td></tr>
     * <tr><td><code>{@link #QuickAccessWalletService_settingsActivity android:settingsActivity}</code></td><td>Fully qualified class name of an activity that allows the user to modify
     * the settings for this service.</td></tr>
     * <tr><td><code>{@link #QuickAccessWalletService_shortcutShortLabel android:shortcutShortLabel}</code></td><td></td></tr>
     * <tr><td><code>{@link #QuickAccessWalletService_shortcutLongLabel android:shortcutLongLabel}</code></td><td></td></tr>
     * </table>
     * @see #QuickAccessWalletService_targetActivity
     * @see #QuickAccessWalletService_settingsActivity
     * @see #QuickAccessWalletService_shortcutShortLabel
     * @see #QuickAccessWalletService_shortcutLongLabel
     */
    public static final int[] QuickAccessWalletService={
      0x01010202, 0x01010225, 0x01010529, 0x0101052a
    };
    /**
     * <p>
     * @attr description
     * Fully qualified class name of an activity that allows the user to view
     * their entire wallet
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:targetActivity
     */
    public static final int QuickAccessWalletService_targetActivity=0;
    /**
     * <p>
     * @attr description
     * Fully qualified class name of an activity that allows the user to modify
     * the settings for this service.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:settingsActivity
     */
    public static final int QuickAccessWalletService_settingsActivity=1;
    /**
     * <p>
     * @attr description
     * Text shown on the button that takes users to the wallet application
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:shortcutShortLabel
     */
    public static final int QuickAccessWalletService_shortcutShortLabel=2;
    /**
     * <p>
     * @attr description
     * Text shown on the empty state button if no cards are provided
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:shortcutLongLabel
     */
    public static final int QuickAccessWalletService_shortcutLongLabel=3;
    /**
     * Attributes that can be used with a QuickContactBadge.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * </table>
     */
    public static final int[] QuickContactBadge={
      0x011200c8
    };
    /**
     * Attributes that can be used with a RadioGroup.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #RadioGroup_orientation android:orientation}</code></td><td>Standard orientation constant.</td></tr>
     * <tr><td><code>{@link #RadioGroup_checkedButton android:checkedButton}</code></td><td>The id of the child radio button that should be checked by default
     * within this radio group.</td></tr>
     * </table>
     * @see #RadioGroup_orientation
     * @see #RadioGroup_checkedButton
     */
    public static final int[] RadioGroup={
      0x010100c4, 0x01010148
    };
    /**
     * <p>
     * @attr description
     * Should the radio group be a column or a row?  Use "horizontal"
     * for a row, "vertical" for a column.  The default is
     * vertical.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>horizontal</td><td>0</td><td>Defines an horizontal widget.</td></tr>
     * <tr><td>vertical</td><td>1</td><td>Defines a vertical widget.</td></tr>
     * </table>
     *
     * @attr name android:orientation
     */
    public static final int RadioGroup_orientation=0;
    /**
     * <p>
     * @attr description
     * The id of the child radio button that should be checked by default
     * within this radio group.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:checkedButton
     */
    public static final int RadioGroup_checkedButton=1;
    /**
     * Attributes that can be used with a RatingBar.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #RatingBar_numStars android:numStars}</code></td><td>The number of stars (or rating items) to show.</td></tr>
     * <tr><td><code>{@link #RatingBar_rating android:rating}</code></td><td>The rating to set by default.</td></tr>
     * <tr><td><code>{@link #RatingBar_stepSize android:stepSize}</code></td><td>The step size of the rating.</td></tr>
     * <tr><td><code>{@link #RatingBar_isIndicator android:isIndicator}</code></td><td>Whether this rating bar is an indicator (and non-changeable by the user).</td></tr>
     * </table>
     * @see #RatingBar_numStars
     * @see #RatingBar_rating
     * @see #RatingBar_stepSize
     * @see #RatingBar_isIndicator
     */
    public static final int[] RatingBar={
      0x01010144, 0x01010145, 0x01010146, 0x01010147
    };
    /**
     * <p>
     * @attr description
     * The number of stars (or rating items) to show.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:numStars
     */
    public static final int RatingBar_numStars=0;
    /**
     * <p>
     * @attr description
     * The rating to set by default.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:rating
     */
    public static final int RatingBar_rating=1;
    /**
     * <p>
     * @attr description
     * The step size of the rating.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:stepSize
     */
    public static final int RatingBar_stepSize=2;
    /**
     * <p>
     * @attr description
     * Whether this rating bar is an indicator (and non-changeable by the user).
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:isIndicator
     */
    public static final int RatingBar_isIndicator=3;
    /**
     * Attributes that can be used with <code>rating-definition</code> tags inside of the XML
     * resource that describes TV content rating of a {@link android.media.tv.TvInputService},
     * which is referenced from its
     * {@link android.media.tv.TvInputManager#META_DATA_CONTENT_RATING_SYSTEMS}.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #RatingDefinition_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * <tr><td><code>{@link #RatingDefinition_description android:description}</code></td><td>Descriptive text for the associated data.</td></tr>
     * <tr><td><code>{@link #RatingDefinition_title android:title}</code></td><td>The title associated with the item.</td></tr>
     * <tr><td><code>{@link #RatingDefinition_contentAgeHint android:contentAgeHint}</code></td><td>The age associated with the content rating.</td></tr>
     * </table>
     * @see #RatingDefinition_name
     * @see #RatingDefinition_description
     * @see #RatingDefinition_title
     * @see #RatingDefinition_contentAgeHint
     */
    public static final int[] RatingDefinition={
      0x01010003, 0x01010020, 0x010101e1, 0x010104b9
    };
    /**
     * <p>
     * @attr description
     * The unique name of the content rating.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int RatingDefinition_name=0;
    /**
     * <p>
     * @attr description
     * The short description of the content rating.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:description
     */
    public static final int RatingDefinition_description=1;
    /**
     * <p>
     * @attr description
     * The title of the content rating which is shown to the user.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:title
     */
    public static final int RatingDefinition_title=2;
    /**
     * <p>
     * @attr description
     * The age associated with the content rating. The content of this rating is suitable for
     * people of this age or above.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:contentAgeHint
     */
    public static final int RatingDefinition_contentAgeHint=3;
    /**
     * Attributes that can be used with <code>rating-system-definition</code> tags inside of the
     * XML resource that describes TV content rating of a {@link android.media.tv.TvInputService},
     * which is referenced from its
     * {@link android.media.tv.TvInputManager#META_DATA_CONTENT_RATING_SYSTEMS}.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #RatingSystemDefinition_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * <tr><td><code>{@link #RatingSystemDefinition_description android:description}</code></td><td>Descriptive text for the associated data.</td></tr>
     * <tr><td><code>{@link #RatingSystemDefinition_title android:title}</code></td><td>The title associated with the item.</td></tr>
     * <tr><td><code>{@link #RatingSystemDefinition_country android:country}</code></td><td>The country code associated with the content rating system, which consists of two
     * uppercase letters that conform to the ISO 3166 standard.</td></tr>
     * </table>
     * @see #RatingSystemDefinition_name
     * @see #RatingSystemDefinition_description
     * @see #RatingSystemDefinition_title
     * @see #RatingSystemDefinition_country
     */
    public static final int[] RatingSystemDefinition={
      0x01010003, 0x01010020, 0x010101e1, 0x010104ba
    };
    /**
     * <p>
     * @attr description
     * The unique name of the content rating system.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int RatingSystemDefinition_name=0;
    /**
     * <p>
     * @attr description
     * The short description of the content rating system.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:description
     */
    public static final int RatingSystemDefinition_description=1;
    /**
     * <p>
     * @attr description
     * The title of the content rating system which is shown to the user.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:title
     */
    public static final int RatingSystemDefinition_title=2;
    /**
     * <p>
     * @attr description
     * The country code associated with the content rating system, which consists of two
     * uppercase letters that conform to the ISO 3166 standard.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:country
     */
    public static final int RatingSystemDefinition_country=3;
    /**
     * Use <code>recognition-service</code> as the root tag of the XML resource that
     * describes a {@link android.speech.RecognitionService}, which is referenced from
     * its {@link android.speech.RecognitionService#SERVICE_META_DATA} meta-data entry.
     * Described here are the attributes that can be included in that tag.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #RecognitionService_settingsActivity android:settingsActivity}</code></td><td>Fully qualified class name of an activity that allows the user to modify
     * the settings for this service.</td></tr>
     * <tr><td><code>{@link #RecognitionService_selectableAsDefault android:selectableAsDefault}</code></td><td>Flag indicating whether a recognition service can be selected as default.</td></tr>
     * </table>
     * @see #RecognitionService_settingsActivity
     * @see #RecognitionService_selectableAsDefault
     */
    public static final int[] RecognitionService={
      0x01010225, 0x01010640
    };
    /**
     * <p>
     * @attr description
     * Fully qualified class name of an activity that allows the user to modify
     * the settings for this service.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:settingsActivity
     */
    public static final int RecognitionService_settingsActivity=0;
    /**
     * <p>
     * @attr description
     * Flag indicating whether a recognition service can be selected as default. The default
     * value of this flag is true.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:selectableAsDefault
     */
    public static final int RecognitionService_selectableAsDefault=1;
    /**
     * @hide
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * </table>
     */
    public static final int[] RecycleListView={
      0x0112009a, 0x0112009b
    };
    /**
     * @hide
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #RecyclerView_orientation android:orientation}</code></td><td>Standard orientation constant.</td></tr>
     * <tr><td><code>{@link #RecyclerView_descendantFocusability android:descendantFocusability}</code></td><td>Defines the relationship between the ViewGroup and its descendants
     * when looking for a View to take focus.</td></tr>
     * </table>
     * @see #RecyclerView_orientation
     * @see #RecyclerView_descendantFocusability
     */
    public static final int[] RecyclerView={
      0x010100c4, 0x010100f1, 0x0112006e, 0x011200cf, 
      0x011200e2, 0x011200e3
    };
    /**
     * <p>
     * @attr description
     * Standard orientation constant.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>horizontal</td><td>0</td><td>Defines an horizontal widget.</td></tr>
     * <tr><td>vertical</td><td>1</td><td>Defines a vertical widget.</td></tr>
     * </table>
     *
     * @attr name android:orientation
     */
    public static final int RecyclerView_orientation=0;
    /**
     * <p>
     * @attr description
     * Defines the relationship between the ViewGroup and its descendants
     * when looking for a View to take focus.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>afterDescendants</td><td>1</td><td>The ViewGroup will get focus only if none of its descendants want it.</td></tr>
     * <tr><td>beforeDescendants</td><td>0</td><td>The ViewGroup will get focus before any of its descendants.</td></tr>
     * <tr><td>blocksDescendants</td><td>2</td><td>The ViewGroup will block its descendants from receiving focus.</td></tr>
     * </table>
     *
     * @attr name android:descendantFocusability
     */
    public static final int RecyclerView_descendantFocusability=1;
    /**
     * Attributes that can be used with a RelativeLayout.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #RelativeLayout_gravity android:gravity}</code></td><td>Specifies how an object should position its content, on both the X and Y axes,
     * within its own bounds.</td></tr>
     * <tr><td><code>{@link #RelativeLayout_ignoreGravity android:ignoreGravity}</code></td><td>Indicates what view should not be affected by gravity.</td></tr>
     * </table>
     * @see #RelativeLayout_gravity
     * @see #RelativeLayout_ignoreGravity
     */
    public static final int[] RelativeLayout={
      0x010100af, 0x010101ff
    };
    /**
     * <p>
     * @attr description
     * Specifies how an object should position its content, on both the X and Y axes,
     * within its own bounds.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
     * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
     * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
     * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
     * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the horizontal gravity: a left gravity will clip the right
     * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
     * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the vertical gravity: a top gravity will clip the bottom
     * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
     * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
     * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
     * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
     * </table>
     *
     * @attr name android:gravity
     */
    public static final int RelativeLayout_gravity=0;
    /**
     * <p>
     * @attr description
     * Indicates what view should not be affected by gravity.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:ignoreGravity
     */
    public static final int RelativeLayout_ignoreGravity=1;
    /**
     * Attributes that can be used with a RelativeLayout_Layout.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #RelativeLayout_Layout_layout_toLeftOf android:layout_toLeftOf}</code></td><td>Positions the right edge of this view to the left of the given anchor view ID.</td></tr>
     * <tr><td><code>{@link #RelativeLayout_Layout_layout_toRightOf android:layout_toRightOf}</code></td><td>Positions the left edge of this view to the right of the given anchor view ID.</td></tr>
     * <tr><td><code>{@link #RelativeLayout_Layout_layout_above android:layout_above}</code></td><td>Positions the bottom edge of this view above the given anchor view ID.</td></tr>
     * <tr><td><code>{@link #RelativeLayout_Layout_layout_below android:layout_below}</code></td><td>Positions the top edge of this view below the given anchor view ID.</td></tr>
     * <tr><td><code>{@link #RelativeLayout_Layout_layout_alignBaseline android:layout_alignBaseline}</code></td><td>Positions the baseline of this view on the baseline of the given anchor view ID.</td></tr>
     * <tr><td><code>{@link #RelativeLayout_Layout_layout_alignLeft android:layout_alignLeft}</code></td><td>Makes the left edge of this view match the left edge of the given anchor view ID.</td></tr>
     * <tr><td><code>{@link #RelativeLayout_Layout_layout_alignTop android:layout_alignTop}</code></td><td>Makes the top edge of this view match the top edge of the given anchor view ID.</td></tr>
     * <tr><td><code>{@link #RelativeLayout_Layout_layout_alignRight android:layout_alignRight}</code></td><td>Makes the right edge of this view match the right edge of the given anchor view ID.</td></tr>
     * <tr><td><code>{@link #RelativeLayout_Layout_layout_alignBottom android:layout_alignBottom}</code></td><td>Makes the bottom edge of this view match the bottom edge of the given anchor view ID.</td></tr>
     * <tr><td><code>{@link #RelativeLayout_Layout_layout_alignParentLeft android:layout_alignParentLeft}</code></td><td>If true, makes the left edge of this view match the left edge of the parent.</td></tr>
     * <tr><td><code>{@link #RelativeLayout_Layout_layout_alignParentTop android:layout_alignParentTop}</code></td><td>If true, makes the top edge of this view match the top edge of the parent.</td></tr>
     * <tr><td><code>{@link #RelativeLayout_Layout_layout_alignParentRight android:layout_alignParentRight}</code></td><td>If true, makes the right edge of this view match the right edge of the parent.</td></tr>
     * <tr><td><code>{@link #RelativeLayout_Layout_layout_alignParentBottom android:layout_alignParentBottom}</code></td><td>If true, makes the bottom edge of this view match the bottom edge of the parent.</td></tr>
     * <tr><td><code>{@link #RelativeLayout_Layout_layout_centerInParent android:layout_centerInParent}</code></td><td>If true, centers this child horizontally and vertically within its parent.</td></tr>
     * <tr><td><code>{@link #RelativeLayout_Layout_layout_centerHorizontal android:layout_centerHorizontal}</code></td><td>If true, centers this child horizontally within its parent.</td></tr>
     * <tr><td><code>{@link #RelativeLayout_Layout_layout_centerVertical android:layout_centerVertical}</code></td><td>If true, centers this child vertically within its parent.</td></tr>
     * <tr><td><code>{@link #RelativeLayout_Layout_layout_alignWithParentIfMissing android:layout_alignWithParentIfMissing}</code></td><td>If set to true, the parent will be used as the anchor when the anchor cannot be
     * be found for layout_toLeftOf, layout_toRightOf, etc.</td></tr>
     * <tr><td><code>{@link #RelativeLayout_Layout_layout_toStartOf android:layout_toStartOf}</code></td><td>Positions the end edge of this view to the start of the given anchor view ID.</td></tr>
     * <tr><td><code>{@link #RelativeLayout_Layout_layout_toEndOf android:layout_toEndOf}</code></td><td>Positions the start edge of this view to the end of the given anchor view ID.</td></tr>
     * <tr><td><code>{@link #RelativeLayout_Layout_layout_alignStart android:layout_alignStart}</code></td><td>Makes the start edge of this view match the start edge of the given anchor view ID.</td></tr>
     * <tr><td><code>{@link #RelativeLayout_Layout_layout_alignEnd android:layout_alignEnd}</code></td><td>Makes the end edge of this view match the end edge of the given anchor view ID.</td></tr>
     * <tr><td><code>{@link #RelativeLayout_Layout_layout_alignParentStart android:layout_alignParentStart}</code></td><td>If true, makes the start edge of this view match the start edge of the parent.</td></tr>
     * <tr><td><code>{@link #RelativeLayout_Layout_layout_alignParentEnd android:layout_alignParentEnd}</code></td><td>If true, makes the end edge of this view match the end edge of the parent.</td></tr>
     * </table>
     * @see #RelativeLayout_Layout_layout_toLeftOf
     * @see #RelativeLayout_Layout_layout_toRightOf
     * @see #RelativeLayout_Layout_layout_above
     * @see #RelativeLayout_Layout_layout_below
     * @see #RelativeLayout_Layout_layout_alignBaseline
     * @see #RelativeLayout_Layout_layout_alignLeft
     * @see #RelativeLayout_Layout_layout_alignTop
     * @see #RelativeLayout_Layout_layout_alignRight
     * @see #RelativeLayout_Layout_layout_alignBottom
     * @see #RelativeLayout_Layout_layout_alignParentLeft
     * @see #RelativeLayout_Layout_layout_alignParentTop
     * @see #RelativeLayout_Layout_layout_alignParentRight
     * @see #RelativeLayout_Layout_layout_alignParentBottom
     * @see #RelativeLayout_Layout_layout_centerInParent
     * @see #RelativeLayout_Layout_layout_centerHorizontal
     * @see #RelativeLayout_Layout_layout_centerVertical
     * @see #RelativeLayout_Layout_layout_alignWithParentIfMissing
     * @see #RelativeLayout_Layout_layout_toStartOf
     * @see #RelativeLayout_Layout_layout_toEndOf
     * @see #RelativeLayout_Layout_layout_alignStart
     * @see #RelativeLayout_Layout_layout_alignEnd
     * @see #RelativeLayout_Layout_layout_alignParentStart
     * @see #RelativeLayout_Layout_layout_alignParentEnd
     */
    public static final int[] RelativeLayout_Layout={
      0x01010182, 0x01010183, 0x01010184, 0x01010185, 
      0x01010186, 0x01010187, 0x01010188, 0x01010189, 
      0x0101018a, 0x0101018b, 0x0101018c, 0x0101018d, 
      0x0101018e, 0x0101018f, 0x01010190, 0x01010191, 
      0x01010192, 0x010103b7, 0x010103b8, 0x010103b9, 
      0x010103ba, 0x010103bb, 0x010103bc
    };
    /**
     * <p>
     * @attr description
     * Positions the right edge of this view to the left of the given anchor view ID.
     * Accommodates right margin of this view and left margin of anchor view.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:layout_toLeftOf
     */
    public static final int RelativeLayout_Layout_layout_toLeftOf=0;
    /**
     * <p>
     * @attr description
     * Positions the left edge of this view to the right of the given anchor view ID.
     * Accommodates left margin of this view and right margin of anchor view.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:layout_toRightOf
     */
    public static final int RelativeLayout_Layout_layout_toRightOf=1;
    /**
     * <p>
     * @attr description
     * Positions the bottom edge of this view above the given anchor view ID.
     * Accommodates bottom margin of this view and top margin of anchor view.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:layout_above
     */
    public static final int RelativeLayout_Layout_layout_above=2;
    /**
     * <p>
     * @attr description
     * Positions the top edge of this view below the given anchor view ID.
     * Accommodates top margin of this view and bottom margin of anchor view.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:layout_below
     */
    public static final int RelativeLayout_Layout_layout_below=3;
    /**
     * <p>
     * @attr description
     * Positions the baseline of this view on the baseline of the given anchor view ID.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:layout_alignBaseline
     */
    public static final int RelativeLayout_Layout_layout_alignBaseline=4;
    /**
     * <p>
     * @attr description
     * Makes the left edge of this view match the left edge of the given anchor view ID.
     * Accommodates left margin.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:layout_alignLeft
     */
    public static final int RelativeLayout_Layout_layout_alignLeft=5;
    /**
     * <p>
     * @attr description
     * Makes the top edge of this view match the top edge of the given anchor view ID.
     * Accommodates top margin.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:layout_alignTop
     */
    public static final int RelativeLayout_Layout_layout_alignTop=6;
    /**
     * <p>
     * @attr description
     * Makes the right edge of this view match the right edge of the given anchor view ID.
     * Accommodates right margin.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:layout_alignRight
     */
    public static final int RelativeLayout_Layout_layout_alignRight=7;
    /**
     * <p>
     * @attr description
     * Makes the bottom edge of this view match the bottom edge of the given anchor view ID.
     * Accommodates bottom margin.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:layout_alignBottom
     */
    public static final int RelativeLayout_Layout_layout_alignBottom=8;
    /**
     * <p>
     * @attr description
     * If true, makes the left edge of this view match the left edge of the parent.
     * Accommodates left margin.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:layout_alignParentLeft
     */
    public static final int RelativeLayout_Layout_layout_alignParentLeft=9;
    /**
     * <p>
     * @attr description
     * If true, makes the top edge of this view match the top edge of the parent.
     * Accommodates top margin.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:layout_alignParentTop
     */
    public static final int RelativeLayout_Layout_layout_alignParentTop=10;
    /**
     * <p>
     * @attr description
     * If true, makes the right edge of this view match the right edge of the parent.
     * Accommodates right margin.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:layout_alignParentRight
     */
    public static final int RelativeLayout_Layout_layout_alignParentRight=11;
    /**
     * <p>
     * @attr description
     * If true, makes the bottom edge of this view match the bottom edge of the parent.
     * Accommodates bottom margin.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:layout_alignParentBottom
     */
    public static final int RelativeLayout_Layout_layout_alignParentBottom=12;
    /**
     * <p>
     * @attr description
     * If true, centers this child horizontally and vertically within its parent.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:layout_centerInParent
     */
    public static final int RelativeLayout_Layout_layout_centerInParent=13;
    /**
     * <p>
     * @attr description
     * If true, centers this child horizontally within its parent.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:layout_centerHorizontal
     */
    public static final int RelativeLayout_Layout_layout_centerHorizontal=14;
    /**
     * <p>
     * @attr description
     * If true, centers this child vertically within its parent.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:layout_centerVertical
     */
    public static final int RelativeLayout_Layout_layout_centerVertical=15;
    /**
     * <p>
     * @attr description
     * If set to true, the parent will be used as the anchor when the anchor cannot be
     * be found for layout_toLeftOf, layout_toRightOf, etc.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:layout_alignWithParentIfMissing
     */
    public static final int RelativeLayout_Layout_layout_alignWithParentIfMissing=16;
    /**
     * <p>
     * @attr description
     * Positions the end edge of this view to the start of the given anchor view ID.
     * Accommodates end margin of this view and start margin of anchor view.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:layout_toStartOf
     */
    public static final int RelativeLayout_Layout_layout_toStartOf=17;
    /**
     * <p>
     * @attr description
     * Positions the start edge of this view to the end of the given anchor view ID.
     * Accommodates start margin of this view and end margin of anchor view.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:layout_toEndOf
     */
    public static final int RelativeLayout_Layout_layout_toEndOf=18;
    /**
     * <p>
     * @attr description
     * Makes the start edge of this view match the start edge of the given anchor view ID.
     * Accommodates start margin.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:layout_alignStart
     */
    public static final int RelativeLayout_Layout_layout_alignStart=19;
    /**
     * <p>
     * @attr description
     * Makes the end edge of this view match the end edge of the given anchor view ID.
     * Accommodates end margin.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:layout_alignEnd
     */
    public static final int RelativeLayout_Layout_layout_alignEnd=20;
    /**
     * <p>
     * @attr description
     * If true, makes the start edge of this view match the start edge of the parent.
     * Accommodates start margin.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:layout_alignParentStart
     */
    public static final int RelativeLayout_Layout_layout_alignParentStart=21;
    /**
     * <p>
     * @attr description
     * If true, makes the end edge of this view match the end edge of the parent.
     * Accommodates end margin.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:layout_alignParentEnd
     */
    public static final int RelativeLayout_Layout_layout_alignParentEnd=22;
    /**
     * Attributes that can be used with a ResolverDrawerLayout.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ResolverDrawerLayout_maxWidth android:maxWidth}</code></td><td>An optional argument to supply a maximum width for this view.</td></tr>
     * </table>
     * @see #ResolverDrawerLayout_maxWidth
     */
    public static final int[] ResolverDrawerLayout={
      0x0101011f, 0x01120088, 0x01120089, 0x011200dc
    };
    /**
     * <p>
     * @attr description
     * An optional argument to supply a maximum width for this view.
     * See {see android.widget.ImageView#setMaxWidth} for details.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:maxWidth
     */
    public static final int ResolverDrawerLayout_maxWidth=0;
    /**
     * Attributes that can be used with a ResolverDrawerLayout_LayoutParams.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ResolverDrawerLayout_LayoutParams_layout_gravity android:layout_gravity}</code></td><td>Standard gravity constant that a child supplies to its parent.</td></tr>
     * </table>
     * @see #ResolverDrawerLayout_LayoutParams_layout_gravity
     */
    public static final int[] ResolverDrawerLayout_LayoutParams={
      0x010100b3, 0x0112006f, 0x01120071, 0x01120072, 
      0x01120073
    };
    /**
     * <p>
     * @attr description
     * Standard gravity constant that a child supplies to its parent.
     * Defines how the child view should be positioned, on both the X and Y axes, within its enclosing layout.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
     * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
     * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
     * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
     * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the horizontal gravity: a left gravity will clip the right
     * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
     * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the vertical gravity: a top gravity will clip the bottom
     * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
     * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
     * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
     * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
     * </table>
     *
     * @attr name android:layout_gravity
     */
    public static final int ResolverDrawerLayout_LayoutParams_layout_gravity=0;
    /**
     * Attributes that can be used with a RestrictionEntry.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #RestrictionEntry_description android:description}</code></td><td>Descriptive text for the associated data.</td></tr>
     * <tr><td><code>{@link #RestrictionEntry_entries android:entries}</code></td><td>Reference to an array resource that will populate a list/adapter.</td></tr>
     * <tr><td><code>{@link #RestrictionEntry_title android:title}</code></td><td>The title associated with the item.</td></tr>
     * <tr><td><code>{@link #RestrictionEntry_key android:key}</code></td><td>The key to store the Preference value.</td></tr>
     * <tr><td><code>{@link #RestrictionEntry_defaultValue android:defaultValue}</code></td><td>The default value for the preference, which will be set either if persistence
     * is off or persistence is on and the preference is not found in the persistent
     * storage.</td></tr>
     * <tr><td><code>{@link #RestrictionEntry_entryValues android:entryValues}</code></td><td>The array to find the value to save for a preference when an entry from
     * entries is selected.</td></tr>
     * <tr><td><code>{@link #RestrictionEntry_restrictionType android:restrictionType}</code></td><td></td></tr>
     * </table>
     * @see #RestrictionEntry_description
     * @see #RestrictionEntry_entries
     * @see #RestrictionEntry_title
     * @see #RestrictionEntry_key
     * @see #RestrictionEntry_defaultValue
     * @see #RestrictionEntry_entryValues
     * @see #RestrictionEntry_restrictionType
     */
    public static final int[] RestrictionEntry={
      0x01010020, 0x010100b2, 0x010101e1, 0x010101e8, 
      0x010101ed, 0x010101f8, 0x01010493
    };
    /**
     * <p>
     * @attr description
     * Descriptive text for the associated data.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:description
     */
    public static final int RestrictionEntry_description=0;
    /**
     * <p>
     * @attr description
     * Reference to an array resource that will populate a list/adapter.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:entries
     */
    public static final int RestrictionEntry_entries=1;
    /**
     * <p>
     * @attr description
     * The title associated with the item.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:title
     */
    public static final int RestrictionEntry_title=2;
    /**
     * <p>
     * @attr description
     * The key to store the Preference value.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:key
     */
    public static final int RestrictionEntry_key=3;
    /**
     * <p>
     * @attr description
     * The default value for the preference, which will be set either if persistence
     * is off or persistence is on and the preference is not found in the persistent
     * storage.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:defaultValue
     */
    public static final int RestrictionEntry_defaultValue=4;
    /**
     * <p>
     * @attr description
     * The array to find the value to save for a preference when an entry from
     * entries is selected. If a user clicks on the second item in entries, the
     * second item in this array will be saved to the preference.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:entryValues
     */
    public static final int RestrictionEntry_entryValues=5;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#restrictionType}
     * attribute's value can be found in the {@link #RestrictionEntry} array.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bool</td><td>1</td><td></td></tr>
     * <tr><td>bundle</td><td>7</td><td></td></tr>
     * <tr><td>bundle_array</td><td>8</td><td></td></tr>
     * <tr><td>choice</td><td>2</td><td></td></tr>
     * <tr><td>hidden</td><td>0</td><td></td></tr>
     * <tr><td>integer</td><td>5</td><td></td></tr>
     * <tr><td>multi-select</td><td>4</td><td></td></tr>
     * <tr><td>string</td><td>6</td><td></td></tr>
     * </table>
     *
     * @attr name android:restrictionType
     */
    public static final int RestrictionEntry_restrictionType=6;
    /**
     * Base attributes available to RingtonePreference.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #RingtonePreference_ringtoneType android:ringtoneType}</code></td><td>Which ringtone type(s) to show in the picker.</td></tr>
     * <tr><td><code>{@link #RingtonePreference_showDefault android:showDefault}</code></td><td>Whether to show an item for a default sound.</td></tr>
     * <tr><td><code>{@link #RingtonePreference_showSilent android:showSilent}</code></td><td>Whether to show an item for 'Silent'.</td></tr>
     * </table>
     * @see #RingtonePreference_ringtoneType
     * @see #RingtonePreference_showDefault
     * @see #RingtonePreference_showSilent
     */
    public static final int[] RingtonePreference={
      0x010101f9, 0x010101fa, 0x010101fb
    };
    /**
     * <p>
     * @attr description
     * Which ringtone type(s) to show in the picker.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>alarm</td><td>4</td><td>Alarm sounds.</td></tr>
     * <tr><td>all</td><td>7</td><td>All available ringtone sounds.</td></tr>
     * <tr><td>notification</td><td>2</td><td>Notification sounds.</td></tr>
     * <tr><td>ringtone</td><td>1</td><td>Ringtones.</td></tr>
     * </table>
     *
     * @attr name android:ringtoneType
     */
    public static final int RingtonePreference_ringtoneType=0;
    /**
     * <p>
     * @attr description
     * Whether to show an item for a default sound.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:showDefault
     */
    public static final int RingtonePreference_showDefault=1;
    /**
     * <p>
     * @attr description
     * Whether to show an item for 'Silent'.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:showSilent
     */
    public static final int RingtonePreference_showSilent=2;
    /**
     * Drawable used to show animated touch feedback.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #RippleDrawable_color android:color}</code></td><td>Solid color for the gradient shape.</td></tr>
     * <tr><td><code>{@link #RippleDrawable_radius android:radius}</code></td><td>Defines the radius of the four corners.</td></tr>
     * <tr><td><code>{@link #RippleDrawable_effectColor android:effectColor}</code></td><td>Color applied to effects.</td></tr>
     * </table>
     * @see #RippleDrawable_color
     * @see #RippleDrawable_radius
     * @see #RippleDrawable_effectColor
     */
    public static final int[] RippleDrawable={
      0x010101a5, 0x010101a8, 0x01010649
    };
    /**
     * <p>
     * @attr description
     * The color to use for ripple effects. This attribute is required.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:color
     */
    public static final int RippleDrawable_color=0;
    /**
     * <p>
     * @attr description
     * The radius of the ripple when fully expanded. By default, the
     * radius is computed based on the size of the ripple's container.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:radius
     */
    public static final int RippleDrawable_radius=1;
    /**
     * <p>
     * @attr description
     * Secondary color of the ripple effect.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:effectColor
     */
    public static final int RippleDrawable_effectColor=2;
    /**
     * Attributes that can be used with a RotateAnimation.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #RotateAnimation_fromDegrees android:fromDegrees}</code></td><td></td></tr>
     * <tr><td><code>{@link #RotateAnimation_toDegrees android:toDegrees}</code></td><td></td></tr>
     * <tr><td><code>{@link #RotateAnimation_pivotX android:pivotX}</code></td><td></td></tr>
     * <tr><td><code>{@link #RotateAnimation_pivotY android:pivotY}</code></td><td></td></tr>
     * </table>
     * @see #RotateAnimation_fromDegrees
     * @see #RotateAnimation_toDegrees
     * @see #RotateAnimation_pivotX
     * @see #RotateAnimation_pivotY
     */
    public static final int[] RotateAnimation={
      0x010101b3, 0x010101b4, 0x010101b5, 0x010101b6
    };
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#fromDegrees}
     * attribute's value can be found in the {@link #RotateAnimation} array.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:fromDegrees
     */
    public static final int RotateAnimation_fromDegrees=0;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#toDegrees}
     * attribute's value can be found in the {@link #RotateAnimation} array.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:toDegrees
     */
    public static final int RotateAnimation_toDegrees=1;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#pivotX}
     * attribute's value can be found in the {@link #RotateAnimation} array.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:pivotX
     */
    public static final int RotateAnimation_pivotX=2;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#pivotY}
     * attribute's value can be found in the {@link #RotateAnimation} array.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:pivotY
     */
    public static final int RotateAnimation_pivotY=3;
    /**
     * Drawable used to rotate another drawable.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #RotateDrawable_visible android:visible}</code></td><td>Provides initial visibility state of the drawable; the default
     * value is false.</td></tr>
     * <tr><td><code>{@link #RotateDrawable_drawable android:drawable}</code></td><td>Reference to a drawable resource to use for the frame.</td></tr>
     * <tr><td><code>{@link #RotateDrawable_fromDegrees android:fromDegrees}</code></td><td></td></tr>
     * <tr><td><code>{@link #RotateDrawable_toDegrees android:toDegrees}</code></td><td></td></tr>
     * <tr><td><code>{@link #RotateDrawable_pivotX android:pivotX}</code></td><td></td></tr>
     * <tr><td><code>{@link #RotateDrawable_pivotY android:pivotY}</code></td><td></td></tr>
     * </table>
     * @see #RotateDrawable_visible
     * @see #RotateDrawable_drawable
     * @see #RotateDrawable_fromDegrees
     * @see #RotateDrawable_toDegrees
     * @see #RotateDrawable_pivotX
     * @see #RotateDrawable_pivotY
     */
    public static final int[] RotateDrawable={
      0x01010194, 0x01010199, 0x010101b3, 0x010101b4, 
      0x010101b5, 0x010101b6
    };
    /**
     * <p>
     * @attr description
     * Provides initial visibility state of the drawable; the default
     * value is false.  See
     * {@link android.graphics.drawable.Drawable#setVisible}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:visible
     */
    public static final int RotateDrawable_visible=0;
    /**
     * <p>
     * @attr description
     * Reference to a drawable resource to use for the frame.  If not
     * given, the drawable must be defined by the first child tag.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:drawable
     */
    public static final int RotateDrawable_drawable=1;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#fromDegrees}
     * attribute's value can be found in the {@link #RotateDrawable} array.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:fromDegrees
     */
    public static final int RotateDrawable_fromDegrees=2;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#toDegrees}
     * attribute's value can be found in the {@link #RotateDrawable} array.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:toDegrees
     */
    public static final int RotateDrawable_toDegrees=3;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#pivotX}
     * attribute's value can be found in the {@link #RotateDrawable} array.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:pivotX
     */
    public static final int RotateDrawable_pivotX=4;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#pivotY}
     * attribute's value can be found in the {@link #RotateDrawable} array.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:pivotY
     */
    public static final int RotateDrawable_pivotY=5;
    /**
     * Attributes that can be used with a ScaleAnimation.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ScaleAnimation_pivotX android:pivotX}</code></td><td></td></tr>
     * <tr><td><code>{@link #ScaleAnimation_pivotY android:pivotY}</code></td><td></td></tr>
     * <tr><td><code>{@link #ScaleAnimation_fromXScale android:fromXScale}</code></td><td></td></tr>
     * <tr><td><code>{@link #ScaleAnimation_toXScale android:toXScale}</code></td><td></td></tr>
     * <tr><td><code>{@link #ScaleAnimation_fromYScale android:fromYScale}</code></td><td></td></tr>
     * <tr><td><code>{@link #ScaleAnimation_toYScale android:toYScale}</code></td><td></td></tr>
     * </table>
     * @see #ScaleAnimation_pivotX
     * @see #ScaleAnimation_pivotY
     * @see #ScaleAnimation_fromXScale
     * @see #ScaleAnimation_toXScale
     * @see #ScaleAnimation_fromYScale
     * @see #ScaleAnimation_toYScale
     */
    public static final int[] ScaleAnimation={
      0x010101b5, 0x010101b6, 0x010101c2, 0x010101c3, 
      0x010101c4, 0x010101c5
    };
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#pivotX}
     * attribute's value can be found in the {@link #ScaleAnimation} array.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:pivotX
     */
    public static final int ScaleAnimation_pivotX=0;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#pivotY}
     * attribute's value can be found in the {@link #ScaleAnimation} array.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:pivotY
     */
    public static final int ScaleAnimation_pivotY=1;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#fromXScale}
     * attribute's value can be found in the {@link #ScaleAnimation} array.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:fromXScale
     */
    public static final int ScaleAnimation_fromXScale=2;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#toXScale}
     * attribute's value can be found in the {@link #ScaleAnimation} array.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:toXScale
     */
    public static final int ScaleAnimation_toXScale=3;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#fromYScale}
     * attribute's value can be found in the {@link #ScaleAnimation} array.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:fromYScale
     */
    public static final int ScaleAnimation_fromYScale=4;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#toYScale}
     * attribute's value can be found in the {@link #ScaleAnimation} array.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:toYScale
     */
    public static final int ScaleAnimation_toYScale=5;
    /**
     * Attributes that can be used with a ScaleDrawable.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ScaleDrawable_drawable android:drawable}</code></td><td>Reference to a drawable resource to use for the frame.</td></tr>
     * <tr><td><code>{@link #ScaleDrawable_scaleWidth android:scaleWidth}</code></td><td>Scale width, expressed as a percentage of the drawable's bound.</td></tr>
     * <tr><td><code>{@link #ScaleDrawable_scaleHeight android:scaleHeight}</code></td><td>Scale height, expressed as a percentage of the drawable's bound.</td></tr>
     * <tr><td><code>{@link #ScaleDrawable_scaleGravity android:scaleGravity}</code></td><td>Specifies where the drawable is positioned after scaling.</td></tr>
     * <tr><td><code>{@link #ScaleDrawable_useIntrinsicSizeAsMinimum android:useIntrinsicSizeAsMinimum}</code></td><td>Use the drawable's intrinsic width and height as minimum size values.</td></tr>
     * <tr><td><code>{@link #ScaleDrawable_level android:level}</code></td><td>Specifies the initial drawable level in the range 0 to 10000.</td></tr>
     * </table>
     * @see #ScaleDrawable_drawable
     * @see #ScaleDrawable_scaleWidth
     * @see #ScaleDrawable_scaleHeight
     * @see #ScaleDrawable_scaleGravity
     * @see #ScaleDrawable_useIntrinsicSizeAsMinimum
     * @see #ScaleDrawable_level
     */
    public static final int[] ScaleDrawable={
      0x01010199, 0x010101fc, 0x010101fd, 0x010101fe, 
      0x01010310, 0x01010500
    };
    /**
     * <p>
     * @attr description
     * Reference to a drawable resource to draw with the specified scale.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:drawable
     */
    public static final int ScaleDrawable_drawable=0;
    /**
     * <p>
     * @attr description
     * Scale width, expressed as a percentage of the drawable's bound. The value's
     * format is XX%. For instance: 100%, 12.5%, etc.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:scaleWidth
     */
    public static final int ScaleDrawable_scaleWidth=1;
    /**
     * <p>
     * @attr description
     * Scale height, expressed as a percentage of the drawable's bound. The value's
     * format is XX%. For instance: 100%, 12.5%, etc.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:scaleHeight
     */
    public static final int ScaleDrawable_scaleHeight=2;
    /**
     * <p>
     * @attr description
     * Specifies where the drawable is positioned after scaling. The default value is
     * left.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
     * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
     * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
     * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
     * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the horizontal gravity: a left gravity will clip the right
     * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
     * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the vertical gravity: a top gravity will clip the bottom
     * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
     * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
     * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
     * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
     * </table>
     *
     * @attr name android:scaleGravity
     */
    public static final int ScaleDrawable_scaleGravity=3;
    /**
     * <p>
     * @attr description
     * Use the drawable's intrinsic width and height as minimum size values.
     * Useful if the target drawable is a 9-patch or otherwise should not be scaled
     * down beyond a minimum size.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:useIntrinsicSizeAsMinimum
     */
    public static final int ScaleDrawable_useIntrinsicSizeAsMinimum=4;
    /**
     * <p>
     * @attr description
     * Specifies the initial drawable level in the range 0 to 10000.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:level
     */
    public static final int ScaleDrawable_level=5;
    /**
     * Attributes that can be used with a ScrollView.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ScrollView_fillViewport android:fillViewport}</code></td><td>Defines whether the scrollview should stretch its content to fill the viewport.</td></tr>
     * </table>
     * @see #ScrollView_fillViewport
     */
    public static final int[] ScrollView={
      0x0101017a
    };
    /**
     * <p>
     * @attr description
     * Defines whether the scrollview should stretch its content to fill the viewport.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:fillViewport
     */
    public static final int ScrollView_fillViewport=0;
    /**
     * Attributes that can be used with a SearchView.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #SearchView_layout android:layout}</code></td><td>Supply an identifier for the layout resource to inflate when the ViewStub
     * becomes visible or when forced to do so.</td></tr>
     * <tr><td><code>{@link #SearchView_maxWidth android:maxWidth}</code></td><td>An optional argument to supply a maximum width for this view.</td></tr>
     * <tr><td><code>{@link #SearchView_inputType android:inputType}</code></td><td>The type of data being placed in a text field, used to help an
     * input method decide how to let the user enter text.</td></tr>
     * <tr><td><code>{@link #SearchView_imeOptions android:imeOptions}</code></td><td>Additional features you can enable in an IME associated with an editor
     * to improve the integration with your application.</td></tr>
     * <tr><td><code>{@link #SearchView_iconifiedByDefault android:iconifiedByDefault}</code></td><td>The default state of the SearchView.</td></tr>
     * <tr><td><code>{@link #SearchView_queryHint android:queryHint}</code></td><td>An optional query hint string to be displayed in the empty query field.</td></tr>
     * <tr><td><code>{@link #SearchView_closeIcon android:closeIcon}</code></td><td>Close button icon.</td></tr>
     * <tr><td><code>{@link #SearchView_goIcon android:goIcon}</code></td><td>Go button icon.</td></tr>
     * <tr><td><code>{@link #SearchView_searchIcon android:searchIcon}</code></td><td>Search icon.</td></tr>
     * <tr><td><code>{@link #SearchView_voiceIcon android:voiceIcon}</code></td><td>Voice button icon.</td></tr>
     * <tr><td><code>{@link #SearchView_commitIcon android:commitIcon}</code></td><td>Commit icon shown in the query suggestion row.</td></tr>
     * <tr><td><code>{@link #SearchView_suggestionRowLayout android:suggestionRowLayout}</code></td><td>Layout for query suggestion rows.</td></tr>
     * <tr><td><code>{@link #SearchView_queryBackground android:queryBackground}</code></td><td>Background for the section containing the search query.</td></tr>
     * <tr><td><code>{@link #SearchView_submitBackground android:submitBackground}</code></td><td>Background for the section containing the action (for example, voice search).</td></tr>
     * <tr><td><code>{@link #SearchView_searchHintIcon android:searchHintIcon}</code></td><td>Search icon displayed as a text field hint.</td></tr>
     * </table>
     * @see #SearchView_layout
     * @see #SearchView_maxWidth
     * @see #SearchView_inputType
     * @see #SearchView_imeOptions
     * @see #SearchView_iconifiedByDefault
     * @see #SearchView_queryHint
     * @see #SearchView_closeIcon
     * @see #SearchView_goIcon
     * @see #SearchView_searchIcon
     * @see #SearchView_voiceIcon
     * @see #SearchView_commitIcon
     * @see #SearchView_suggestionRowLayout
     * @see #SearchView_queryBackground
     * @see #SearchView_submitBackground
     * @see #SearchView_searchHintIcon
     */
    public static final int[] SearchView={
      0x010100f2, 0x0101011f, 0x01010220, 0x01010264, 
      0x010102fa, 0x01010358, 0x01010481, 0x01010482, 
      0x01010483, 0x01010484, 0x01010485, 0x01010486, 
      0x01010487, 0x01010488, 0x010104d4, 0x01120035
    };
    /**
     * <p>
     * @attr description
     * The layout to use for the search view.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:layout
     */
    public static final int SearchView_layout=0;
    /**
     * <p>
     * @attr description
     * An optional maximum width of the SearchView.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:maxWidth
     */
    public static final int SearchView_maxWidth=1;
    /**
     * <p>
     * @attr description
     * The input type to set on the query text field.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>date</td><td>14</td><td>For entering a date.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_DATETIME} |
     * {@link android.text.InputType#TYPE_DATETIME_VARIATION_DATE}.</td></tr>
     * <tr><td>datetime</td><td>4</td><td>For entering a date and time.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_DATETIME} |
     * {@link android.text.InputType#TYPE_DATETIME_VARIATION_NORMAL}.</td></tr>
     * <tr><td>none</td><td>0</td><td>There is no content type.  The text is not editable.</td></tr>
     * <tr><td>number</td><td>2</td><td>A numeric only field.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
     * {@link android.text.InputType#TYPE_NUMBER_VARIATION_NORMAL}.</td></tr>
     * <tr><td>numberDecimal</td><td>2002</td><td>Can be combined with <var>number</var> and its other options to
     * allow a decimal (fractional) number.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
     * {@link android.text.InputType#TYPE_NUMBER_FLAG_DECIMAL}.</td></tr>
     * <tr><td>numberPassword</td><td>12</td><td>A numeric password field.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
     * {@link android.text.InputType#TYPE_NUMBER_VARIATION_PASSWORD}.</td></tr>
     * <tr><td>numberSigned</td><td>1002</td><td>Can be combined with <var>number</var> and its other options to
     * allow a signed number.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
     * {@link android.text.InputType#TYPE_NUMBER_FLAG_SIGNED}.</td></tr>
     * <tr><td>phone</td><td>3</td><td>For entering a phone number.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_PHONE}.</td></tr>
     * <tr><td>text</td><td>1</td><td>Just plain old text.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_NORMAL}.</td></tr>
     * <tr><td>textAutoComplete</td><td>10001</td><td>Can be combined with <var>text</var> and its variations to
     * specify that this field will be doing its own auto-completion and
     * talking with the input method appropriately.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_AUTO_COMPLETE}.</td></tr>
     * <tr><td>textAutoCorrect</td><td>8001</td><td>Can be combined with <var>text</var> and its variations to
     * request auto-correction of text being input.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_AUTO_CORRECT}.</td></tr>
     * <tr><td>textCapCharacters</td><td>1001</td><td>Can be combined with <var>text</var> and its variations to
     * request capitalization of all characters.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_CHARACTERS}.</td></tr>
     * <tr><td>textCapSentences</td><td>4001</td><td>Can be combined with <var>text</var> and its variations to
     * request capitalization of the first character of every sentence.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_SENTENCES}.</td></tr>
     * <tr><td>textCapWords</td><td>2001</td><td>Can be combined with <var>text</var> and its variations to
     * request capitalization of the first character of every word.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_WORDS}.</td></tr>
     * <tr><td>textEmailAddress</td><td>21</td><td>Text that will be used as an e-mail address.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_EMAIL_ADDRESS}.</td></tr>
     * <tr><td>textEmailSubject</td><td>31</td><td>Text that is being supplied as the subject of an e-mail.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_EMAIL_SUBJECT}.</td></tr>
     * <tr><td>textFilter</td><td>b1</td><td>Text that is filtering some other data.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_FILTER}.</td></tr>
     * <tr><td>textImeMultiLine</td><td>40001</td><td>Can be combined with <var>text</var> and its variations to
     * indicate that though the regular text view should not be multiple
     * lines, the IME should provide multiple lines if it can.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_IME_MULTI_LINE}.</td></tr>
     * <tr><td>textLongMessage</td><td>51</td><td>Text that is the content of a long message.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_LONG_MESSAGE}.</td></tr>
     * <tr><td>textMultiLine</td><td>20001</td><td>Can be combined with <var>text</var> and its variations to
     * allow multiple lines of text in the field.  If this flag is not set,
     * the text field will be constrained to a single line.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_MULTI_LINE}.
     * Note: If this flag is not set and the text field doesn't have max length limit, the
     * framework automatically set maximum length of the characters to 5000 for the
     * performance reasons.</td></tr>
     * <tr><td>textNoSuggestions</td><td>80001</td><td>Can be combined with <var>text</var> and its variations to
     * indicate that the IME should not show any
     * dictionary-based word suggestions.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_NO_SUGGESTIONS}.</td></tr>
     * <tr><td>textPassword</td><td>81</td><td>Text that is a password.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_PASSWORD}.</td></tr>
     * <tr><td>textPersonName</td><td>61</td><td>Text that is the name of a person.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_PERSON_NAME}.</td></tr>
     * <tr><td>textPhonetic</td><td>c1</td><td>Text that is for phonetic pronunciation, such as a phonetic name
     * field in a contact entry.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_PHONETIC}.</td></tr>
     * <tr><td>textPostalAddress</td><td>71</td><td>Text that is being supplied as a postal mailing address.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_POSTAL_ADDRESS}.</td></tr>
     * <tr><td>textShortMessage</td><td>41</td><td>Text that is the content of a short message.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_SHORT_MESSAGE}.</td></tr>
     * <tr><td>textUri</td><td>11</td><td>Text that will be used as a URI.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_URI}.</td></tr>
     * <tr><td>textVisiblePassword</td><td>91</td><td>Text that is a password that should be visible.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_VISIBLE_PASSWORD}.</td></tr>
     * <tr><td>textWebEditText</td><td>a1</td><td>Text that is being supplied as text in a web form.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_EDIT_TEXT}.</td></tr>
     * <tr><td>textWebEmailAddress</td><td>d1</td><td>Text that will be used as an e-mail address on a web form.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS}.</td></tr>
     * <tr><td>textWebPassword</td><td>e1</td><td>Text that will be used as a password on a web form.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_PASSWORD}.</td></tr>
     * <tr><td>time</td><td>24</td><td>For entering a time.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_DATETIME} |
     * {@link android.text.InputType#TYPE_DATETIME_VARIATION_TIME}.</td></tr>
     * </table>
     *
     * @attr name android:inputType
     */
    public static final int SearchView_inputType=2;
    /**
     * <p>
     * @attr description
     * The IME options to set on the query text field.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>actionDone</td><td>6</td><td>The action key performs a "done"
     * operation, closing the soft input method.
     * Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_ACTION_DONE}.</td></tr>
     * <tr><td>actionGo</td><td>2</td><td>The action key performs a "go"
     * operation to take the user to the target of the text they typed.
     * Typically used, for example, when entering a URL.
     * Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_ACTION_GO}.</td></tr>
     * <tr><td>actionNext</td><td>5</td><td>The action key performs a "next"
     * operation, taking the user to the next field that will accept text.
     * Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_ACTION_NEXT}.</td></tr>
     * <tr><td>actionNone</td><td>1</td><td>This editor has no action associated with it.
     * Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_ACTION_NONE}.</td></tr>
     * <tr><td>actionPrevious</td><td>7</td><td>The action key performs a "previous"
     * operation, taking the user to the previous field that will accept text.
     * Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_ACTION_PREVIOUS}.</td></tr>
     * <tr><td>actionSearch</td><td>3</td><td>The action key performs a "search"
     * operation, taking the user to the results of searching for the text
     * the have typed (in whatever context is appropriate).
     * Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_ACTION_SEARCH}.</td></tr>
     * <tr><td>actionSend</td><td>4</td><td>The action key performs a "send"
     * operation, delivering the text to its target.  This is typically used
     * when composing a message.
     * Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_ACTION_SEND}.</td></tr>
     * <tr><td>actionUnspecified</td><td>0</td><td>There is no specific action associated with this editor, let the
     * editor come up with its own if it can.
     * Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_NULL}.</td></tr>
     * <tr><td>flagForceAscii</td><td>80000000</td><td>Used to request that the IME should be capable of inputting ASCII
     * characters.  The intention of this flag is to ensure that the user
     * can type Roman alphabet characters in a {@link android.widget.TextView}
     * used for, typically, account ID or password input.  It is expected that IMEs
     * normally are able to input ASCII even without being told so (such IMEs
     * already respect this flag in a sense), but there could be some cases they
     * aren't when, for instance, only non-ASCII input languages like Arabic,
     * Greek, Hebrew, Russian are enabled in the IME.  Applications need to be
     * aware that the flag is not a guarantee, and not all IMEs will respect it.
     * However, it is strongly recommended for IME authors to respect this flag
     * especially when their IME could end up with a state that has only non-ASCII
     * input languages enabled.
     * <p>Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_FLAG_FORCE_ASCII}.</td></tr>
     * <tr><td>flagNavigateNext</td><td>8000000</td><td>Used to specify that there is something
     * interesting that a forward navigation can focus on. This is like using
     * actionNext, except allows the IME to be multiline (with
     * an enter key) as well as provide forward navigation.  Note that some
     * IMEs may not be able to do this, especially when running on a small
     * screen where there is little space.  In that case it does not need to
     * present a UI for this option.  Like actionNext, if the
     * user selects the IME's facility to forward navigate, this will show up
     * in the application at
     * {@link android.view.inputmethod.InputConnection#performEditorAction(int)
     * InputConnection.performEditorAction(int)}.
     * <p>Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NAVIGATE_NEXT}.</td></tr>
     * <tr><td>flagNavigatePrevious</td><td>4000000</td><td>Like flagNavigateNext, but
     * specifies there is something interesting that a backward navigation
     * can focus on.  If the user selects the IME's facility to backward
     * navigate, this will show up in the application as an actionPrevious
     * at {@link android.view.inputmethod.InputConnection#performEditorAction(int)
     * InputConnection.performEditorAction(int)}.
     * <p>Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NAVIGATE_PREVIOUS}.</td></tr>
     * <tr><td>flagNoAccessoryAction</td><td>20000000</td><td>Used in conjunction with a custom action, this indicates that the
     * action should not be available as an accessory button when the
     * input method is full-screen.
     * Note that by setting this flag, there can be cases where the action
     * is simply never available to the user.  Setting this generally means
     * that you think showing text being edited is more important than the
     * action you have supplied.
     * <p>Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_ACCESSORY_ACTION}.</td></tr>
     * <tr><td>flagNoEnterAction</td><td>40000000</td><td>Used in conjunction with a custom action,
     * this indicates that the action should not be available in-line as
     * a replacement for the "enter" key.  Typically this is
     * because the action has such a significant impact or is not recoverable
     * enough that accidentally hitting it should be avoided, such as sending
     * a message.    Note that {@link android.widget.TextView} will
     * automatically set this flag for you on multi-line text views.
     * <p>Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_ENTER_ACTION}.</td></tr>
     * <tr><td>flagNoExtractUi</td><td>10000000</td><td>Used to specify that the IME does not need
     * to show its extracted text UI.  For input methods that may be fullscreen,
     * often when in landscape mode, this allows them to be smaller and let part
     * of the application be shown behind.  Though there will likely be limited
     * access to the application available from the user, it can make the
     * experience of a (mostly) fullscreen IME less jarring.  Note that when
     * this flag is specified the IME may <em>not</em> be set up to be able
     * to display text, so it should only be used in situations where this is
     * not needed.
     * <p>Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_EXTRACT_UI}.</td></tr>
     * <tr><td>flagNoFullscreen</td><td>2000000</td><td>Used to request that the IME never go
     * into fullscreen mode.  Applications need to be aware that the flag is not
     * a guarantee, and not all IMEs will respect it.
     * <p>Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_FULLSCREEN}.</td></tr>
     * <tr><td>flagNoPersonalizedLearning</td><td>1000000</td><td>Used to request that the IME should not update any personalized data such as typing
     * history and personalized language model based on what the user typed on this text
     * editing object. Typical use cases are:
     * <ul>
     * <li>When the application is in a special mode, where user's activities are expected
     * to be not recorded in the application's history. Some web browsers and chat
     * applications may have this kind of modes.</li>
     * <li>When storing typing history does not make much sense.  Specifying this flag in
     * typing games may help to avoid typing history from being filled up with words that
     * the user is less likely to type in their daily life.  Another example is that when
     * the application already knows that the expected input is not a valid word (e.g. a
     * promotion code that is not a valid word in any natural language).</li>
     * </ul>
     * <p>Applications need to be aware that the flag is not a guarantee, and some IMEs may
     * not respect it.</p></td></tr>
     * <tr><td>normal</td><td>0</td><td>There are no special semantics associated with this editor.</td></tr>
     * </table>
     *
     * @attr name android:imeOptions
     */
    public static final int SearchView_imeOptions=3;
    /**
     * <p>
     * @attr description
     * The default state of the SearchView. If true, it will be iconified when not in
     * use and expanded when clicked.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:iconifiedByDefault
     */
    public static final int SearchView_iconifiedByDefault=4;
    /**
     * <p>
     * @attr description
     * An optional query hint string to be displayed in the empty query field.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:queryHint
     */
    public static final int SearchView_queryHint=5;
    /**
     * <p>
     * @attr description
     * Close button icon.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:closeIcon
     */
    public static final int SearchView_closeIcon=6;
    /**
     * <p>
     * @attr description
     * Go button icon.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:goIcon
     */
    public static final int SearchView_goIcon=7;
    /**
     * <p>
     * @attr description
     * Search icon.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:searchIcon
     */
    public static final int SearchView_searchIcon=8;
    /**
     * <p>
     * @attr description
     * Voice button icon.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:voiceIcon
     */
    public static final int SearchView_voiceIcon=9;
    /**
     * <p>
     * @attr description
     * Commit icon shown in the query suggestion row.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:commitIcon
     */
    public static final int SearchView_commitIcon=10;
    /**
     * <p>
     * @attr description
     * Layout for query suggestion rows.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:suggestionRowLayout
     */
    public static final int SearchView_suggestionRowLayout=11;
    /**
     * <p>
     * @attr description
     * Background for the section containing the search query.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:queryBackground
     */
    public static final int SearchView_queryBackground=12;
    /**
     * <p>
     * @attr description
     * Background for the section containing the action (for example, voice search).
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:submitBackground
     */
    public static final int SearchView_submitBackground=13;
    /**
     * <p>
     * @attr description
     * Search icon displayed as a text field hint.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:searchHintIcon
     */
    public static final int SearchView_searchHintIcon=14;
    /**
     * Searchable activities and applications must provide search configuration information
     * in an XML file, typically called searchable.xml.  This file is referenced in your manifest.
     * For a more in-depth discussion of search configuration, please refer to
     * {@link android.app.SearchManager}.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Searchable_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
     * <tr><td><code>{@link #Searchable_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
     * associated item.</td></tr>
     * <tr><td><code>{@link #Searchable_hint android:hint}</code></td><td>Hint text to display when the text is empty.</td></tr>
     * <tr><td><code>{@link #Searchable_searchMode android:searchMode}</code></td><td>Additional features are controlled by mode bits in this field.</td></tr>
     * <tr><td><code>{@link #Searchable_searchSuggestAuthority android:searchSuggestAuthority}</code></td><td>If provided, this is the trigger indicating that the searchable activity
     * provides suggestions as well.</td></tr>
     * <tr><td><code>{@link #Searchable_searchSuggestPath android:searchSuggestPath}</code></td><td>If provided, this will be inserted in the suggestions query Uri, after the authority
     * you have provide but before the standard suggestions path.</td></tr>
     * <tr><td><code>{@link #Searchable_searchSuggestSelection android:searchSuggestSelection}</code></td><td>If provided, suggestion queries will be passed into your query function
     * as the <i>selection</i> parameter.</td></tr>
     * <tr><td><code>{@link #Searchable_searchSuggestIntentAction android:searchSuggestIntentAction}</code></td><td>If provided, and not overridden by an action in the selected suggestion, this
     * string will be placed in the action field of the {@link android.content.Intent Intent}
     * when the user clicks a suggestion.</td></tr>
     * <tr><td><code>{@link #Searchable_searchSuggestIntentData android:searchSuggestIntentData}</code></td><td>If provided, and not overridden by an action in the selected suggestion, this
     * string will be placed in the data field of the {@link android.content.Intent Intent}
     * when the user clicks a suggestion.</td></tr>
     * <tr><td><code>{@link #Searchable_searchButtonText android:searchButtonText}</code></td><td>If supplied, this string will be displayed as the text of the "Search" button.</td></tr>
     * <tr><td><code>{@link #Searchable_inputType android:inputType}</code></td><td>The type of data being placed in a text field, used to help an
     * input method decide how to let the user enter text.</td></tr>
     * <tr><td><code>{@link #Searchable_voiceSearchMode android:voiceSearchMode}</code></td><td>Voice search features are controlled by mode bits in this field.</td></tr>
     * <tr><td><code>{@link #Searchable_voiceLanguageModel android:voiceLanguageModel}</code></td><td>If provided, this specifies the language model that should be used by the
     * voice recognition system.</td></tr>
     * <tr><td><code>{@link #Searchable_voicePromptText android:voicePromptText}</code></td><td>If provided, this specifies a prompt that will be displayed during voice input.</td></tr>
     * <tr><td><code>{@link #Searchable_voiceLanguage android:voiceLanguage}</code></td><td>If provided, this specifies the spoken language to be expected, and that it will be
     * different than the one set in the {@link java.util.Locale#getDefault()}.</td></tr>
     * <tr><td><code>{@link #Searchable_voiceMaxResults android:voiceMaxResults}</code></td><td>If provided, enforces the maximum number of results to return, including the "best"
     * result which will always be provided as the SEARCH intent's primary query.</td></tr>
     * <tr><td><code>{@link #Searchable_imeOptions android:imeOptions}</code></td><td>Additional features you can enable in an IME associated with an editor
     * to improve the integration with your application.</td></tr>
     * <tr><td><code>{@link #Searchable_searchSuggestThreshold android:searchSuggestThreshold}</code></td><td>If provided, this is the minimum number of characters needed to trigger
     * search suggestions.</td></tr>
     * <tr><td><code>{@link #Searchable_includeInGlobalSearch android:includeInGlobalSearch}</code></td><td>If provided and <code>true</code>, this searchable activity will be
     * included in any global lists of search targets.</td></tr>
     * <tr><td><code>{@link #Searchable_queryAfterZeroResults android:queryAfterZeroResults}</code></td><td>If provided and <code>true</code>, this searchable activity will be invoked for all
     * queries in a particular session.</td></tr>
     * <tr><td><code>{@link #Searchable_searchSettingsDescription android:searchSettingsDescription}</code></td><td>If provided, this string will be used to describe the searchable item in the
     * searchable items settings within system search settings.</td></tr>
     * <tr><td><code>{@link #Searchable_autoUrlDetect android:autoUrlDetect}</code></td><td>If provided and <code>true</code>, URLs entered in the search dialog while searching
     * within this activity would be detected and treated as URLs (show a 'go' button in the
     * keyboard and invoke the browser directly when user launches the URL instead of passing
     * the URL to the activity).</td></tr>
     * </table>
     * @see #Searchable_label
     * @see #Searchable_icon
     * @see #Searchable_hint
     * @see #Searchable_searchMode
     * @see #Searchable_searchSuggestAuthority
     * @see #Searchable_searchSuggestPath
     * @see #Searchable_searchSuggestSelection
     * @see #Searchable_searchSuggestIntentAction
     * @see #Searchable_searchSuggestIntentData
     * @see #Searchable_searchButtonText
     * @see #Searchable_inputType
     * @see #Searchable_voiceSearchMode
     * @see #Searchable_voiceLanguageModel
     * @see #Searchable_voicePromptText
     * @see #Searchable_voiceLanguage
     * @see #Searchable_voiceMaxResults
     * @see #Searchable_imeOptions
     * @see #Searchable_searchSuggestThreshold
     * @see #Searchable_includeInGlobalSearch
     * @see #Searchable_queryAfterZeroResults
     * @see #Searchable_searchSettingsDescription
     * @see #Searchable_autoUrlDetect
     */
    public static final int[] Searchable={
      0x01010001, 0x01010002, 0x01010150, 0x010101d5, 
      0x010101d6, 0x010101d7, 0x010101d8, 0x010101d9, 
      0x010101da, 0x01010205, 0x01010220, 0x01010252, 
      0x01010253, 0x01010254, 0x01010255, 0x01010256, 
      0x01010264, 0x0101026d, 0x0101026e, 0x01010282, 
      0x0101028a, 0x0101028c
    };
    /**
     * <p>
     * @attr description
     * This is the user-displayed name of the searchable activity.  <i>Required
     * attribute.</i>
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:label
     */
    public static final int Searchable_label=0;
    /**
     * <p>
     * @attr description
     * <strong>This is deprecated.</strong><br/>The default
     * application icon is now always used, so this attribute is
     * obsolete.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:icon
     */
    public static final int Searchable_icon=1;
    /**
     * <p>
     * @attr description
     * If supplied, this string will be displayed as a hint to the user.  <i>Optional
     * attribute.</i>
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:hint
     */
    public static final int Searchable_hint=2;
    /**
     * <p>
     * @attr description
     * Additional features are controlled by mode bits in this field.  Omitting
     * this field, or setting to zero, provides default behavior.  <i>Optional attribute.</i>
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>queryRewriteFromData</td><td>10</td><td>If set, this flag causes the suggestion column SUGGEST_COLUMN_INTENT_DATA to
     * be considered as the text for suggestion query rewriting.  This should only
     * be used when the values in SUGGEST_COLUMN_INTENT_DATA are suitable for user
     * inspection and editing - typically, HTTP/HTTPS Uri's.</td></tr>
     * <tr><td>queryRewriteFromText</td><td>20</td><td>If set, this flag causes the suggestion column SUGGEST_COLUMN_TEXT_1 to
     * be considered as the text for suggestion query rewriting.  This should be used
     * for suggestions in which no query text is provided and the SUGGEST_COLUMN_INTENT_DATA
     * values are not suitable for user inspection and editing.</td></tr>
     * <tr><td>showSearchIconAsBadge</td><td>8</td><td><strong>This is deprecated.</strong><br/>The default
     * application icon is now always used, so this option is
     * obsolete.</td></tr>
     * <tr><td>showSearchLabelAsBadge</td><td>4</td><td>If set, this flag enables the display of the search target (label) within the
     * search bar.  If neither bad mode is selected, no badge will be shown.</td></tr>
     * </table>
     *
     * @attr name android:searchMode
     */
    public static final int Searchable_searchMode=3;
    /**
     * <p>
     * @attr description
     * If provided, this is the trigger indicating that the searchable activity
     * provides suggestions as well.  The value must be a fully-qualified content provider
     * authority (for example, "com.example.android.apis.SuggestionProvider") and should match
     * the "android:authorities" tag in your content provider's manifest entry.  <i>Optional
     * attribute.</i>
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:searchSuggestAuthority
     */
    public static final int Searchable_searchSuggestAuthority=4;
    /**
     * <p>
     * @attr description
     * If provided, this will be inserted in the suggestions query Uri, after the authority
     * you have provide but before the standard suggestions path. <i>Optional attribute.</i>
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:searchSuggestPath
     */
    public static final int Searchable_searchSuggestPath=5;
    /**
     * <p>
     * @attr description
     * If provided, suggestion queries will be passed into your query function
     * as the <i>selection</i> parameter.  Typically this will be a WHERE clause for your
     * database, and will contain a single question mark, which represents the actual query
     * string that has been typed by the user.  If not provided, then the user query text
     * will be appended to the query Uri (after an additional "/".)  <i>Optional
     * attribute.</i>
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:searchSuggestSelection
     */
    public static final int Searchable_searchSuggestSelection=6;
    /**
     * <p>
     * @attr description
     * If provided, and not overridden by an action in the selected suggestion, this
     * string will be placed in the action field of the {@link android.content.Intent Intent}
     * when the user clicks a suggestion.  <i>Optional attribute.</i>
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:searchSuggestIntentAction
     */
    public static final int Searchable_searchSuggestIntentAction=7;
    /**
     * <p>
     * @attr description
     * If provided, and not overridden by an action in the selected suggestion, this
     * string will be placed in the data field of the {@link android.content.Intent Intent}
     * when the user clicks a suggestion.  <i>Optional attribute.</i>
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:searchSuggestIntentData
     */
    public static final int Searchable_searchSuggestIntentData=8;
    /**
     * <p>
     * @attr description
     * If supplied, this string will be displayed as the text of the "Search" button.
     * <i>Optional attribute.</i>
     * {@deprecated This will create a non-standard UI appearance, because the search bar UI is
     * changing to use only icons for its buttons.}
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:searchButtonText
     */
    @Deprecated
    public static final int Searchable_searchButtonText=9;
    /**
     * <p>
     * @attr description
     * The type of data being placed in a text field, used to help an
     * input method decide how to let the user enter text.  The constants
     * here correspond to those defined by
     * {@link android.text.InputType}.  Generally you can select
     * a single value, though some can be combined together as
     * indicated.  Setting this attribute to anything besides
     * <var>none</var> also implies that the text is editable.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>date</td><td>14</td><td>For entering a date.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_DATETIME} |
     * {@link android.text.InputType#TYPE_DATETIME_VARIATION_DATE}.</td></tr>
     * <tr><td>datetime</td><td>4</td><td>For entering a date and time.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_DATETIME} |
     * {@link android.text.InputType#TYPE_DATETIME_VARIATION_NORMAL}.</td></tr>
     * <tr><td>none</td><td>0</td><td>There is no content type.  The text is not editable.</td></tr>
     * <tr><td>number</td><td>2</td><td>A numeric only field.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
     * {@link android.text.InputType#TYPE_NUMBER_VARIATION_NORMAL}.</td></tr>
     * <tr><td>numberDecimal</td><td>2002</td><td>Can be combined with <var>number</var> and its other options to
     * allow a decimal (fractional) number.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
     * {@link android.text.InputType#TYPE_NUMBER_FLAG_DECIMAL}.</td></tr>
     * <tr><td>numberPassword</td><td>12</td><td>A numeric password field.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
     * {@link android.text.InputType#TYPE_NUMBER_VARIATION_PASSWORD}.</td></tr>
     * <tr><td>numberSigned</td><td>1002</td><td>Can be combined with <var>number</var> and its other options to
     * allow a signed number.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
     * {@link android.text.InputType#TYPE_NUMBER_FLAG_SIGNED}.</td></tr>
     * <tr><td>phone</td><td>3</td><td>For entering a phone number.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_PHONE}.</td></tr>
     * <tr><td>text</td><td>1</td><td>Just plain old text.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_NORMAL}.</td></tr>
     * <tr><td>textAutoComplete</td><td>10001</td><td>Can be combined with <var>text</var> and its variations to
     * specify that this field will be doing its own auto-completion and
     * talking with the input method appropriately.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_AUTO_COMPLETE}.</td></tr>
     * <tr><td>textAutoCorrect</td><td>8001</td><td>Can be combined with <var>text</var> and its variations to
     * request auto-correction of text being input.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_AUTO_CORRECT}.</td></tr>
     * <tr><td>textCapCharacters</td><td>1001</td><td>Can be combined with <var>text</var> and its variations to
     * request capitalization of all characters.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_CHARACTERS}.</td></tr>
     * <tr><td>textCapSentences</td><td>4001</td><td>Can be combined with <var>text</var> and its variations to
     * request capitalization of the first character of every sentence.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_SENTENCES}.</td></tr>
     * <tr><td>textCapWords</td><td>2001</td><td>Can be combined with <var>text</var> and its variations to
     * request capitalization of the first character of every word.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_WORDS}.</td></tr>
     * <tr><td>textEmailAddress</td><td>21</td><td>Text that will be used as an e-mail address.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_EMAIL_ADDRESS}.</td></tr>
     * <tr><td>textEmailSubject</td><td>31</td><td>Text that is being supplied as the subject of an e-mail.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_EMAIL_SUBJECT}.</td></tr>
     * <tr><td>textFilter</td><td>b1</td><td>Text that is filtering some other data.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_FILTER}.</td></tr>
     * <tr><td>textImeMultiLine</td><td>40001</td><td>Can be combined with <var>text</var> and its variations to
     * indicate that though the regular text view should not be multiple
     * lines, the IME should provide multiple lines if it can.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_IME_MULTI_LINE}.</td></tr>
     * <tr><td>textLongMessage</td><td>51</td><td>Text that is the content of a long message.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_LONG_MESSAGE}.</td></tr>
     * <tr><td>textMultiLine</td><td>20001</td><td>Can be combined with <var>text</var> and its variations to
     * allow multiple lines of text in the field.  If this flag is not set,
     * the text field will be constrained to a single line.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_MULTI_LINE}.
     * Note: If this flag is not set and the text field doesn't have max length limit, the
     * framework automatically set maximum length of the characters to 5000 for the
     * performance reasons.</td></tr>
     * <tr><td>textNoSuggestions</td><td>80001</td><td>Can be combined with <var>text</var> and its variations to
     * indicate that the IME should not show any
     * dictionary-based word suggestions.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_NO_SUGGESTIONS}.</td></tr>
     * <tr><td>textPassword</td><td>81</td><td>Text that is a password.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_PASSWORD}.</td></tr>
     * <tr><td>textPersonName</td><td>61</td><td>Text that is the name of a person.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_PERSON_NAME}.</td></tr>
     * <tr><td>textPhonetic</td><td>c1</td><td>Text that is for phonetic pronunciation, such as a phonetic name
     * field in a contact entry.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_PHONETIC}.</td></tr>
     * <tr><td>textPostalAddress</td><td>71</td><td>Text that is being supplied as a postal mailing address.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_POSTAL_ADDRESS}.</td></tr>
     * <tr><td>textShortMessage</td><td>41</td><td>Text that is the content of a short message.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_SHORT_MESSAGE}.</td></tr>
     * <tr><td>textUri</td><td>11</td><td>Text that will be used as a URI.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_URI}.</td></tr>
     * <tr><td>textVisiblePassword</td><td>91</td><td>Text that is a password that should be visible.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_VISIBLE_PASSWORD}.</td></tr>
     * <tr><td>textWebEditText</td><td>a1</td><td>Text that is being supplied as text in a web form.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_EDIT_TEXT}.</td></tr>
     * <tr><td>textWebEmailAddress</td><td>d1</td><td>Text that will be used as an e-mail address on a web form.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS}.</td></tr>
     * <tr><td>textWebPassword</td><td>e1</td><td>Text that will be used as a password on a web form.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_PASSWORD}.</td></tr>
     * <tr><td>time</td><td>24</td><td>For entering a time.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_DATETIME} |
     * {@link android.text.InputType#TYPE_DATETIME_VARIATION_TIME}.</td></tr>
     * </table>
     *
     * @attr name android:inputType
     */
    public static final int Searchable_inputType=10;
    /**
     * <p>
     * @attr description
     * Voice search features are controlled by mode bits in this field.  Omitting
     * this field, or setting to zero, provides default behavior.
     * If showVoiceSearchButton is set, then launchWebSearch or launchRecognizer must
     * also be set.  <i>Optional attribute.</i>
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>launchRecognizer</td><td>4</td><td>If set, the voice search button will take the user directly to a built-in
     * voice recording activity.  This activity will prompt the user to speak,
     * transcribe the spoken text, and forward the resulting query
     * text to the searchable activity, just as if the user had typed it into
     * the search UI and clicked the search button.</td></tr>
     * <tr><td>launchWebSearch</td><td>2</td><td>If set, the voice search button will take the user directly to a built-in
     * voice web search activity.  Most applications will not use this flag, as it
     * will take the user away from the activity in which search was invoked.</td></tr>
     * <tr><td>showVoiceSearchButton</td><td>1</td><td>If set, display a voice search button.  This only takes effect if voice search is
     * available on the device.</td></tr>
     * </table>
     *
     * @attr name android:voiceSearchMode
     */
    public static final int Searchable_voiceSearchMode=11;
    /**
     * <p>
     * @attr description
     * If provided, this specifies the language model that should be used by the
     * voice recognition system.  See
     * {@link android.speech.RecognizerIntent#EXTRA_LANGUAGE_MODEL } for more information.
     * If not provided, the default value
     * {@link android.speech.RecognizerIntent#LANGUAGE_MODEL_FREE_FORM } will be used.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:voiceLanguageModel
     */
    public static final int Searchable_voiceLanguageModel=12;
    /**
     * <p>
     * @attr description
     * If provided, this specifies a prompt that will be displayed during voice input.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:voicePromptText
     */
    public static final int Searchable_voicePromptText=13;
    /**
     * <p>
     * @attr description
     * If provided, this specifies the spoken language to be expected, and that it will be
     * different than the one set in the {@link java.util.Locale#getDefault()}.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:voiceLanguage
     */
    public static final int Searchable_voiceLanguage=14;
    /**
     * <p>
     * @attr description
     * If provided, enforces the maximum number of results to return, including the "best"
     * result which will always be provided as the SEARCH intent's primary query.  Must be one
     * or greater.  If not provided, the recognizer will choose how many results to return.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:voiceMaxResults
     */
    public static final int Searchable_voiceMaxResults=15;
    /**
     * <p>
     * @attr description
     * Additional features you can enable in an IME associated with an editor
     * to improve the integration with your application.  The constants
     * here correspond to those defined by
     * {@link android.view.inputmethod.EditorInfo#imeOptions}.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>actionDone</td><td>6</td><td>The action key performs a "done"
     * operation, closing the soft input method.
     * Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_ACTION_DONE}.</td></tr>
     * <tr><td>actionGo</td><td>2</td><td>The action key performs a "go"
     * operation to take the user to the target of the text they typed.
     * Typically used, for example, when entering a URL.
     * Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_ACTION_GO}.</td></tr>
     * <tr><td>actionNext</td><td>5</td><td>The action key performs a "next"
     * operation, taking the user to the next field that will accept text.
     * Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_ACTION_NEXT}.</td></tr>
     * <tr><td>actionNone</td><td>1</td><td>This editor has no action associated with it.
     * Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_ACTION_NONE}.</td></tr>
     * <tr><td>actionPrevious</td><td>7</td><td>The action key performs a "previous"
     * operation, taking the user to the previous field that will accept text.
     * Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_ACTION_PREVIOUS}.</td></tr>
     * <tr><td>actionSearch</td><td>3</td><td>The action key performs a "search"
     * operation, taking the user to the results of searching for the text
     * the have typed (in whatever context is appropriate).
     * Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_ACTION_SEARCH}.</td></tr>
     * <tr><td>actionSend</td><td>4</td><td>The action key performs a "send"
     * operation, delivering the text to its target.  This is typically used
     * when composing a message.
     * Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_ACTION_SEND}.</td></tr>
     * <tr><td>actionUnspecified</td><td>0</td><td>There is no specific action associated with this editor, let the
     * editor come up with its own if it can.
     * Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_NULL}.</td></tr>
     * <tr><td>flagForceAscii</td><td>80000000</td><td>Used to request that the IME should be capable of inputting ASCII
     * characters.  The intention of this flag is to ensure that the user
     * can type Roman alphabet characters in a {@link android.widget.TextView}
     * used for, typically, account ID or password input.  It is expected that IMEs
     * normally are able to input ASCII even without being told so (such IMEs
     * already respect this flag in a sense), but there could be some cases they
     * aren't when, for instance, only non-ASCII input languages like Arabic,
     * Greek, Hebrew, Russian are enabled in the IME.  Applications need to be
     * aware that the flag is not a guarantee, and not all IMEs will respect it.
     * However, it is strongly recommended for IME authors to respect this flag
     * especially when their IME could end up with a state that has only non-ASCII
     * input languages enabled.
     * <p>Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_FLAG_FORCE_ASCII}.</td></tr>
     * <tr><td>flagNavigateNext</td><td>8000000</td><td>Used to specify that there is something
     * interesting that a forward navigation can focus on. This is like using
     * actionNext, except allows the IME to be multiline (with
     * an enter key) as well as provide forward navigation.  Note that some
     * IMEs may not be able to do this, especially when running on a small
     * screen where there is little space.  In that case it does not need to
     * present a UI for this option.  Like actionNext, if the
     * user selects the IME's facility to forward navigate, this will show up
     * in the application at
     * {@link android.view.inputmethod.InputConnection#performEditorAction(int)
     * InputConnection.performEditorAction(int)}.
     * <p>Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NAVIGATE_NEXT}.</td></tr>
     * <tr><td>flagNavigatePrevious</td><td>4000000</td><td>Like flagNavigateNext, but
     * specifies there is something interesting that a backward navigation
     * can focus on.  If the user selects the IME's facility to backward
     * navigate, this will show up in the application as an actionPrevious
     * at {@link android.view.inputmethod.InputConnection#performEditorAction(int)
     * InputConnection.performEditorAction(int)}.
     * <p>Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NAVIGATE_PREVIOUS}.</td></tr>
     * <tr><td>flagNoAccessoryAction</td><td>20000000</td><td>Used in conjunction with a custom action, this indicates that the
     * action should not be available as an accessory button when the
     * input method is full-screen.
     * Note that by setting this flag, there can be cases where the action
     * is simply never available to the user.  Setting this generally means
     * that you think showing text being edited is more important than the
     * action you have supplied.
     * <p>Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_ACCESSORY_ACTION}.</td></tr>
     * <tr><td>flagNoEnterAction</td><td>40000000</td><td>Used in conjunction with a custom action,
     * this indicates that the action should not be available in-line as
     * a replacement for the "enter" key.  Typically this is
     * because the action has such a significant impact or is not recoverable
     * enough that accidentally hitting it should be avoided, such as sending
     * a message.    Note that {@link android.widget.TextView} will
     * automatically set this flag for you on multi-line text views.
     * <p>Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_ENTER_ACTION}.</td></tr>
     * <tr><td>flagNoExtractUi</td><td>10000000</td><td>Used to specify that the IME does not need
     * to show its extracted text UI.  For input methods that may be fullscreen,
     * often when in landscape mode, this allows them to be smaller and let part
     * of the application be shown behind.  Though there will likely be limited
     * access to the application available from the user, it can make the
     * experience of a (mostly) fullscreen IME less jarring.  Note that when
     * this flag is specified the IME may <em>not</em> be set up to be able
     * to display text, so it should only be used in situations where this is
     * not needed.
     * <p>Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_EXTRACT_UI}.</td></tr>
     * <tr><td>flagNoFullscreen</td><td>2000000</td><td>Used to request that the IME never go
     * into fullscreen mode.  Applications need to be aware that the flag is not
     * a guarantee, and not all IMEs will respect it.
     * <p>Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_FULLSCREEN}.</td></tr>
     * <tr><td>flagNoPersonalizedLearning</td><td>1000000</td><td>Used to request that the IME should not update any personalized data such as typing
     * history and personalized language model based on what the user typed on this text
     * editing object. Typical use cases are:
     * <ul>
     * <li>When the application is in a special mode, where user's activities are expected
     * to be not recorded in the application's history. Some web browsers and chat
     * applications may have this kind of modes.</li>
     * <li>When storing typing history does not make much sense.  Specifying this flag in
     * typing games may help to avoid typing history from being filled up with words that
     * the user is less likely to type in their daily life.  Another example is that when
     * the application already knows that the expected input is not a valid word (e.g. a
     * promotion code that is not a valid word in any natural language).</li>
     * </ul>
     * <p>Applications need to be aware that the flag is not a guarantee, and some IMEs may
     * not respect it.</p></td></tr>
     * <tr><td>normal</td><td>0</td><td>There are no special semantics associated with this editor.</td></tr>
     * </table>
     *
     * @attr name android:imeOptions
     */
    public static final int Searchable_imeOptions=16;
    /**
     * <p>
     * @attr description
     * If provided, this is the minimum number of characters needed to trigger
     * search suggestions. The default value is 0. <i>Optional attribute.</i>
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:searchSuggestThreshold
     */
    public static final int Searchable_searchSuggestThreshold=17;
    /**
     * <p>
     * @attr description
     * If provided and <code>true</code>, this searchable activity will be
     * included in any global lists of search targets.
     * The default value is <code>false</code>. <i>Optional attribute.</i>.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:includeInGlobalSearch
     */
    public static final int Searchable_includeInGlobalSearch=18;
    /**
     * <p>
     * @attr description
     * If provided and <code>true</code>, this searchable activity will be invoked for all
     * queries in a particular session. If set to <code>false</code> and the activity
     * returned zero results for a query, it will not be invoked again in that session for
     * supersets of that zero-results query. For example, if the activity returned zero
     * results for "bo", it would not be queried again for "bob".
     * The default value is <code>false</code>. <i>Optional attribute.</i>.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:queryAfterZeroResults
     */
    public static final int Searchable_queryAfterZeroResults=19;
    /**
     * <p>
     * @attr description
     * If provided, this string will be used to describe the searchable item in the
     * searchable items settings within system search settings. <i>Optional
     * attribute.</i>
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:searchSettingsDescription
     */
    public static final int Searchable_searchSettingsDescription=20;
    /**
     * <p>
     * @attr description
     * If provided and <code>true</code>, URLs entered in the search dialog while searching
     * within this activity would be detected and treated as URLs (show a 'go' button in the
     * keyboard and invoke the browser directly when user launches the URL instead of passing
     * the URL to the activity). If set to <code>false</code> any URLs entered are treated as
     * normal query text.
     * The default value is <code>false</code>. <i>Optional attribute.</i>.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:autoUrlDetect
     */
    public static final int Searchable_autoUrlDetect=21;
    /**
     * In order to process special action keys during search, you must define them using
     * one or more "ActionKey" elements in your Searchable metadata.  For a more in-depth
     * discussion of action code handling, please refer to {@link android.app.SearchManager}.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #SearchableActionKey_keycode android:keycode}</code></td><td>This enum provides the same keycode values as can be found in
     * {@link android.view.KeyEvent}.</td></tr>
     * <tr><td><code>{@link #SearchableActionKey_queryActionMsg android:queryActionMsg}</code></td><td>If you wish to handle an action key during normal search query entry, you
     * must define an action string here.</td></tr>
     * <tr><td><code>{@link #SearchableActionKey_suggestActionMsg android:suggestActionMsg}</code></td><td>If you wish to handle an action key while a suggestion is being displayed <i>and
     * selected</i>, there are two ways to handle this.</td></tr>
     * <tr><td><code>{@link #SearchableActionKey_suggestActionMsgColumn android:suggestActionMsgColumn}</code></td><td>If you wish to handle an action key while a suggestion is being displayed <i>and
     * selected</i>, but you do not wish to enable this action key for every suggestion,
     * then you can use this attribute to control it on a suggestion-by-suggestion basis.</td></tr>
     * </table>
     * @see #SearchableActionKey_keycode
     * @see #SearchableActionKey_queryActionMsg
     * @see #SearchableActionKey_suggestActionMsg
     * @see #SearchableActionKey_suggestActionMsgColumn
     */
    public static final int[] SearchableActionKey={
      0x010100c5, 0x010101db, 0x010101dc, 0x010101dd
    };
    /**
     * <p>
     * @attr description
     * This attribute denotes the action key you wish to respond to.  Note that not
     * all action keys are actually supported using this mechanism, as many of them are
     * used for typing, navigation, or system functions.  This will be added to the
     * {@link android.content.Intent#ACTION_SEARCH ACTION_SEARCH} intent that is passed to your
     * searchable activity.  To examine the key code, use
     * {@link android.content.Intent#getIntExtra getIntExtra(SearchManager.ACTION_KEY)}.
     * <p>Note, in addition to the keycode, you must also provide one or more of the action
     * specifier attributes.  <i>Required attribute.</i>
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>KEYCODE_0</td><td>7</td><td></td></tr>
     * <tr><td>KEYCODE_1</td><td>8</td><td></td></tr>
     * <tr><td>KEYCODE_11</td><td>e3</td><td></td></tr>
     * <tr><td>KEYCODE_12</td><td>e4</td><td></td></tr>
     * <tr><td>KEYCODE_2</td><td>9</td><td></td></tr>
     * <tr><td>KEYCODE_3</td><td>a</td><td></td></tr>
     * <tr><td>KEYCODE_3D_MODE</td><td>ce</td><td></td></tr>
     * <tr><td>KEYCODE_4</td><td>b</td><td></td></tr>
     * <tr><td>KEYCODE_5</td><td>c</td><td></td></tr>
     * <tr><td>KEYCODE_6</td><td>d</td><td></td></tr>
     * <tr><td>KEYCODE_7</td><td>e</td><td></td></tr>
     * <tr><td>KEYCODE_8</td><td>f</td><td></td></tr>
     * <tr><td>KEYCODE_9</td><td>10</td><td></td></tr>
     * <tr><td>KEYCODE_A</td><td>1d</td><td></td></tr>
     * <tr><td>KEYCODE_ALL_APPS</td><td>11c</td><td></td></tr>
     * <tr><td>KEYCODE_ALT_LEFT</td><td>39</td><td></td></tr>
     * <tr><td>KEYCODE_ALT_RIGHT</td><td>3a</td><td></td></tr>
     * <tr><td>KEYCODE_APOSTROPHE</td><td>4b</td><td></td></tr>
     * <tr><td>KEYCODE_APP_SWITCH</td><td>bb</td><td></td></tr>
     * <tr><td>KEYCODE_ASSIST</td><td>db</td><td></td></tr>
     * <tr><td>KEYCODE_AT</td><td>4d</td><td></td></tr>
     * <tr><td>KEYCODE_AVR_INPUT</td><td>b6</td><td></td></tr>
     * <tr><td>KEYCODE_AVR_POWER</td><td>b5</td><td></td></tr>
     * <tr><td>KEYCODE_B</td><td>1e</td><td></td></tr>
     * <tr><td>KEYCODE_BACK</td><td>4</td><td></td></tr>
     * <tr><td>KEYCODE_BACKSLASH</td><td>49</td><td></td></tr>
     * <tr><td>KEYCODE_BOOKMARK</td><td>ae</td><td></td></tr>
     * <tr><td>KEYCODE_BREAK</td><td>79</td><td></td></tr>
     * <tr><td>KEYCODE_BRIGHTNESS_DOWN</td><td>dc</td><td></td></tr>
     * <tr><td>KEYCODE_BRIGHTNESS_UP</td><td>dd</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_1</td><td>bc</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_10</td><td>c5</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_11</td><td>c6</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_12</td><td>c7</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_13</td><td>c8</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_14</td><td>c9</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_15</td><td>ca</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_16</td><td>cb</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_2</td><td>bd</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_3</td><td>be</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_4</td><td>bf</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_5</td><td>c0</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_6</td><td>c1</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_7</td><td>c2</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_8</td><td>c3</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_9</td><td>c4</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_A</td><td>60</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_B</td><td>61</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_C</td><td>62</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_L1</td><td>66</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_L2</td><td>68</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_MODE</td><td>6e</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_R1</td><td>67</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_R2</td><td>69</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_SELECT</td><td>6d</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_START</td><td>6c</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_THUMBL</td><td>6a</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_THUMBR</td><td>6b</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_X</td><td>63</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_Y</td><td>64</td><td></td></tr>
     * <tr><td>KEYCODE_BUTTON_Z</td><td>65</td><td></td></tr>
     * <tr><td>KEYCODE_C</td><td>1f</td><td></td></tr>
     * <tr><td>KEYCODE_CALCULATOR</td><td>d2</td><td></td></tr>
     * <tr><td>KEYCODE_CALENDAR</td><td>d0</td><td></td></tr>
     * <tr><td>KEYCODE_CALL</td><td>5</td><td></td></tr>
     * <tr><td>KEYCODE_CAMERA</td><td>1b</td><td></td></tr>
     * <tr><td>KEYCODE_CAPS_LOCK</td><td>73</td><td></td></tr>
     * <tr><td>KEYCODE_CAPTIONS</td><td>af</td><td></td></tr>
     * <tr><td>KEYCODE_CHANNEL_DOWN</td><td>a7</td><td></td></tr>
     * <tr><td>KEYCODE_CHANNEL_UP</td><td>a6</td><td></td></tr>
     * <tr><td>KEYCODE_CLEAR</td><td>1c</td><td></td></tr>
     * <tr><td>KEYCODE_COMMA</td><td>37</td><td></td></tr>
     * <tr><td>KEYCODE_CONTACTS</td><td>cf</td><td></td></tr>
     * <tr><td>KEYCODE_COPY</td><td>116</td><td></td></tr>
     * <tr><td>KEYCODE_CTRL_LEFT</td><td>71</td><td></td></tr>
     * <tr><td>KEYCODE_CTRL_RIGHT</td><td>72</td><td></td></tr>
     * <tr><td>KEYCODE_CUT</td><td>115</td><td></td></tr>
     * <tr><td>KEYCODE_D</td><td>20</td><td></td></tr>
     * <tr><td>KEYCODE_DEL</td><td>43</td><td></td></tr>
     * <tr><td>KEYCODE_DPAD_CENTER</td><td>17</td><td></td></tr>
     * <tr><td>KEYCODE_DPAD_DOWN</td><td>14</td><td></td></tr>
     * <tr><td>KEYCODE_DPAD_DOWN_LEFT</td><td>10d</td><td></td></tr>
     * <tr><td>KEYCODE_DPAD_DOWN_RIGHT</td><td>10f</td><td></td></tr>
     * <tr><td>KEYCODE_DPAD_LEFT</td><td>15</td><td></td></tr>
     * <tr><td>KEYCODE_DPAD_RIGHT</td><td>16</td><td></td></tr>
     * <tr><td>KEYCODE_DPAD_UP</td><td>13</td><td></td></tr>
     * <tr><td>KEYCODE_DPAD_UP_LEFT</td><td>10c</td><td></td></tr>
     * <tr><td>KEYCODE_DPAD_UP_RIGHT</td><td>10e</td><td></td></tr>
     * <tr><td>KEYCODE_DVR</td><td>ad</td><td></td></tr>
     * <tr><td>KEYCODE_E</td><td>21</td><td></td></tr>
     * <tr><td>KEYCODE_EISU</td><td>d4</td><td></td></tr>
     * <tr><td>KEYCODE_ENDCALL</td><td>6</td><td></td></tr>
     * <tr><td>KEYCODE_ENTER</td><td>42</td><td></td></tr>
     * <tr><td>KEYCODE_ENVELOPE</td><td>41</td><td></td></tr>
     * <tr><td>KEYCODE_EQUALS</td><td>46</td><td></td></tr>
     * <tr><td>KEYCODE_ESCAPE</td><td>6f</td><td></td></tr>
     * <tr><td>KEYCODE_EXPLORER</td><td>40</td><td></td></tr>
     * <tr><td>KEYCODE_F</td><td>22</td><td></td></tr>
     * <tr><td>KEYCODE_F1</td><td>83</td><td></td></tr>
     * <tr><td>KEYCODE_F10</td><td>8c</td><td></td></tr>
     * <tr><td>KEYCODE_F11</td><td>8d</td><td></td></tr>
     * <tr><td>KEYCODE_F12</td><td>8e</td><td></td></tr>
     * <tr><td>KEYCODE_F2</td><td>84</td><td></td></tr>
     * <tr><td>KEYCODE_F3</td><td>85</td><td></td></tr>
     * <tr><td>KEYCODE_F4</td><td>86</td><td></td></tr>
     * <tr><td>KEYCODE_F5</td><td>87</td><td></td></tr>
     * <tr><td>KEYCODE_F6</td><td>88</td><td></td></tr>
     * <tr><td>KEYCODE_F7</td><td>89</td><td></td></tr>
     * <tr><td>KEYCODE_F8</td><td>8a</td><td></td></tr>
     * <tr><td>KEYCODE_F9</td><td>8b</td><td></td></tr>
     * <tr><td>KEYCODE_FOCUS</td><td>50</td><td></td></tr>
     * <tr><td>KEYCODE_FORWARD</td><td>7d</td><td></td></tr>
     * <tr><td>KEYCODE_FORWARD_DEL</td><td>70</td><td></td></tr>
     * <tr><td>KEYCODE_FUNCTION</td><td>77</td><td></td></tr>
     * <tr><td>KEYCODE_G</td><td>23</td><td></td></tr>
     * <tr><td>KEYCODE_GRAVE</td><td>44</td><td></td></tr>
     * <tr><td>KEYCODE_GUIDE</td><td>ac</td><td></td></tr>
     * <tr><td>KEYCODE_H</td><td>24</td><td></td></tr>
     * <tr><td>KEYCODE_HEADSETHOOK</td><td>4f</td><td></td></tr>
     * <tr><td>KEYCODE_HELP</td><td>103</td><td></td></tr>
     * <tr><td>KEYCODE_HENKAN</td><td>d6</td><td></td></tr>
     * <tr><td>KEYCODE_HOME</td><td>3</td><td></td></tr>
     * <tr><td>KEYCODE_I</td><td>25</td><td></td></tr>
     * <tr><td>KEYCODE_INFO</td><td>a5</td><td></td></tr>
     * <tr><td>KEYCODE_INSERT</td><td>7c</td><td></td></tr>
     * <tr><td>KEYCODE_J</td><td>26</td><td></td></tr>
     * <tr><td>KEYCODE_K</td><td>27</td><td></td></tr>
     * <tr><td>KEYCODE_KANA</td><td>da</td><td></td></tr>
     * <tr><td>KEYCODE_KATAKANA_HIRAGANA</td><td>d7</td><td></td></tr>
     * <tr><td>KEYCODE_L</td><td>28</td><td></td></tr>
     * <tr><td>KEYCODE_LANGUAGE_SWITCH</td><td>cc</td><td></td></tr>
     * <tr><td>KEYCODE_LAST_CHANNEL</td><td>e5</td><td></td></tr>
     * <tr><td>KEYCODE_LEFT_BRACKET</td><td>47</td><td></td></tr>
     * <tr><td>KEYCODE_M</td><td>29</td><td></td></tr>
     * <tr><td>KEYCODE_MANNER_MODE</td><td>cd</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_AUDIO_TRACK</td><td>de</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_CLOSE</td><td>80</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_EJECT</td><td>81</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_FAST_FORWARD</td><td>5a</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_NEXT</td><td>57</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_PAUSE</td><td>7f</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_PLAY</td><td>7e</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_PLAY_PAUSE</td><td>55</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_PREVIOUS</td><td>58</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_RECORD</td><td>82</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_REWIND</td><td>59</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_SKIP_BACKWARD</td><td>111</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_SKIP_FORWARD</td><td>110</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_SLEEP</td><td>df</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_STEP_BACKWARD</td><td>113</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_STEP_FORWARD</td><td>112</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_STOP</td><td>56</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_TOP_MENU</td><td>e2</td><td></td></tr>
     * <tr><td>KEYCODE_MEDIA_WAKEUP</td><td>e0</td><td></td></tr>
     * <tr><td>KEYCODE_MENU</td><td>52</td><td></td></tr>
     * <tr><td>KEYCODE_META_LEFT</td><td>75</td><td></td></tr>
     * <tr><td>KEYCODE_META_RIGHT</td><td>76</td><td></td></tr>
     * <tr><td>KEYCODE_MINUS</td><td>45</td><td></td></tr>
     * <tr><td>KEYCODE_MOVE_END</td><td>7b</td><td></td></tr>
     * <tr><td>KEYCODE_MOVE_HOME</td><td>7a</td><td></td></tr>
     * <tr><td>KEYCODE_MUHENKAN</td><td>d5</td><td></td></tr>
     * <tr><td>KEYCODE_MUSIC</td><td>d1</td><td></td></tr>
     * <tr><td>KEYCODE_MUTE</td><td>5b</td><td></td></tr>
     * <tr><td>KEYCODE_N</td><td>2a</td><td></td></tr>
     * <tr><td>KEYCODE_NAVIGATE_IN</td><td>106</td><td></td></tr>
     * <tr><td>KEYCODE_NAVIGATE_NEXT</td><td>105</td><td></td></tr>
     * <tr><td>KEYCODE_NAVIGATE_OUT</td><td>107</td><td></td></tr>
     * <tr><td>KEYCODE_NAVIGATE_PREVIOUS</td><td>104</td><td></td></tr>
     * <tr><td>KEYCODE_NOTIFICATION</td><td>53</td><td></td></tr>
     * <tr><td>KEYCODE_NUM</td><td>4e</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_0</td><td>90</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_1</td><td>91</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_2</td><td>92</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_3</td><td>93</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_4</td><td>94</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_5</td><td>95</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_6</td><td>96</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_7</td><td>97</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_8</td><td>98</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_9</td><td>99</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_ADD</td><td>9d</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_COMMA</td><td>9f</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_DIVIDE</td><td>9a</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_DOT</td><td>9e</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_ENTER</td><td>a0</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_EQUALS</td><td>a1</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_LEFT_PAREN</td><td>a2</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_MULTIPLY</td><td>9b</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_RIGHT_PAREN</td><td>a3</td><td></td></tr>
     * <tr><td>KEYCODE_NUMPAD_SUBTRACT</td><td>9c</td><td></td></tr>
     * <tr><td>KEYCODE_NUM_LOCK</td><td>8f</td><td></td></tr>
     * <tr><td>KEYCODE_O</td><td>2b</td><td></td></tr>
     * <tr><td>KEYCODE_P</td><td>2c</td><td></td></tr>
     * <tr><td>KEYCODE_PAGE_DOWN</td><td>5d</td><td></td></tr>
     * <tr><td>KEYCODE_PAGE_UP</td><td>5c</td><td></td></tr>
     * <tr><td>KEYCODE_PAIRING</td><td>e1</td><td></td></tr>
     * <tr><td>KEYCODE_PASTE</td><td>117</td><td></td></tr>
     * <tr><td>KEYCODE_PERIOD</td><td>38</td><td></td></tr>
     * <tr><td>KEYCODE_PICTSYMBOLS</td><td>5e</td><td></td></tr>
     * <tr><td>KEYCODE_PLUS</td><td>51</td><td></td></tr>
     * <tr><td>KEYCODE_POUND</td><td>12</td><td></td></tr>
     * <tr><td>KEYCODE_POWER</td><td>1a</td><td></td></tr>
     * <tr><td>KEYCODE_PROFILE_SWITCH</td><td>120</td><td></td></tr>
     * <tr><td>KEYCODE_PROG_BLUE</td><td>ba</td><td></td></tr>
     * <tr><td>KEYCODE_PROG_GRED</td><td>b7</td><td></td></tr>
     * <tr><td>KEYCODE_PROG_GREEN</td><td>b8</td><td></td></tr>
     * <tr><td>KEYCODE_PROG_YELLOW</td><td>b9</td><td></td></tr>
     * <tr><td>KEYCODE_Q</td><td>2d</td><td></td></tr>
     * <tr><td>KEYCODE_R</td><td>2e</td><td></td></tr>
     * <tr><td>KEYCODE_REFRESH</td><td>11d</td><td></td></tr>
     * <tr><td>KEYCODE_RIGHT_BRACKET</td><td>48</td><td></td></tr>
     * <tr><td>KEYCODE_RO</td><td>d9</td><td></td></tr>
     * <tr><td>KEYCODE_S</td><td>2f</td><td></td></tr>
     * <tr><td>KEYCODE_SCROLL_LOCK</td><td>74</td><td></td></tr>
     * <tr><td>KEYCODE_SEARCH</td><td>54</td><td></td></tr>
     * <tr><td>KEYCODE_SEMICOLON</td><td>4a</td><td></td></tr>
     * <tr><td>KEYCODE_SETTINGS</td><td>b0</td><td></td></tr>
     * <tr><td>KEYCODE_SHIFT_LEFT</td><td>3b</td><td></td></tr>
     * <tr><td>KEYCODE_SHIFT_RIGHT</td><td>3c</td><td></td></tr>
     * <tr><td>KEYCODE_SLASH</td><td>4c</td><td></td></tr>
     * <tr><td>KEYCODE_SOFT_LEFT</td><td>1</td><td></td></tr>
     * <tr><td>KEYCODE_SOFT_RIGHT</td><td>2</td><td></td></tr>
     * <tr><td>KEYCODE_SOFT_SLEEP</td><td>114</td><td></td></tr>
     * <tr><td>KEYCODE_SPACE</td><td>3e</td><td></td></tr>
     * <tr><td>KEYCODE_STAR</td><td>11</td><td></td></tr>
     * <tr><td>KEYCODE_STB_INPUT</td><td>b4</td><td></td></tr>
     * <tr><td>KEYCODE_STB_POWER</td><td>b3</td><td></td></tr>
     * <tr><td>KEYCODE_STEM_1</td><td>109</td><td></td></tr>
     * <tr><td>KEYCODE_STEM_2</td><td>10a</td><td></td></tr>
     * <tr><td>KEYCODE_STEM_3</td><td>10b</td><td></td></tr>
     * <tr><td>KEYCODE_STEM_PRIMARY</td><td>108</td><td></td></tr>
     * <tr><td>KEYCODE_SWITCH_CHARSET</td><td>5f</td><td></td></tr>
     * <tr><td>KEYCODE_SYM</td><td>3f</td><td></td></tr>
     * <tr><td>KEYCODE_SYSRQ</td><td>78</td><td></td></tr>
     * <tr><td>KEYCODE_SYSTEM_NAVIGATION_DOWN</td><td>119</td><td></td></tr>
     * <tr><td>KEYCODE_SYSTEM_NAVIGATION_LEFT</td><td>11a</td><td></td></tr>
     * <tr><td>KEYCODE_SYSTEM_NAVIGATION_RIGHT</td><td>11b</td><td></td></tr>
     * <tr><td>KEYCODE_SYSTEM_NAVIGATION_UP</td><td>118</td><td></td></tr>
     * <tr><td>KEYCODE_T</td><td>30</td><td></td></tr>
     * <tr><td>KEYCODE_TAB</td><td>3d</td><td></td></tr>
     * <tr><td>KEYCODE_THUMBS_DOWN</td><td>11f</td><td></td></tr>
     * <tr><td>KEYCODE_THUMBS_UP</td><td>11e</td><td></td></tr>
     * <tr><td>KEYCODE_TV</td><td>aa</td><td></td></tr>
     * <tr><td>KEYCODE_TV_ANTENNA_CABLE</td><td>f2</td><td></td></tr>
     * <tr><td>KEYCODE_TV_AUDIO_DESCRIPTION</td><td>fc</td><td></td></tr>
     * <tr><td>KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN</td><td>fe</td><td></td></tr>
     * <tr><td>KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP</td><td>fd</td><td></td></tr>
     * <tr><td>KEYCODE_TV_CONTENTS_MENU</td><td>100</td><td></td></tr>
     * <tr><td>KEYCODE_TV_DATA_SERVICE</td><td>e6</td><td></td></tr>
     * <tr><td>KEYCODE_TV_INPUT</td><td>b2</td><td></td></tr>
     * <tr><td>KEYCODE_TV_INPUT_COMPONENT_1</td><td>f9</td><td></td></tr>
     * <tr><td>KEYCODE_TV_INPUT_COMPONENT_2</td><td>fa</td><td></td></tr>
     * <tr><td>KEYCODE_TV_INPUT_COMPOSITE_1</td><td>f7</td><td></td></tr>
     * <tr><td>KEYCODE_TV_INPUT_COMPOSITE_2</td><td>f8</td><td></td></tr>
     * <tr><td>KEYCODE_TV_INPUT_HDMI_1</td><td>f3</td><td></td></tr>
     * <tr><td>KEYCODE_TV_INPUT_HDMI_2</td><td>f4</td><td></td></tr>
     * <tr><td>KEYCODE_TV_INPUT_HDMI_3</td><td>f5</td><td></td></tr>
     * <tr><td>KEYCODE_TV_INPUT_HDMI_4</td><td>f6</td><td></td></tr>
     * <tr><td>KEYCODE_TV_INPUT_VGA_1</td><td>fb</td><td></td></tr>
     * <tr><td>KEYCODE_TV_MEDIA_CONTEXT_MENU</td><td>101</td><td></td></tr>
     * <tr><td>KEYCODE_TV_NETWORK</td><td>f1</td><td></td></tr>
     * <tr><td>KEYCODE_TV_NUMBER_ENTRY</td><td>ea</td><td></td></tr>
     * <tr><td>KEYCODE_TV_POWER</td><td>b1</td><td></td></tr>
     * <tr><td>KEYCODE_TV_RADIO_SERVICE</td><td>e8</td><td></td></tr>
     * <tr><td>KEYCODE_TV_SATELLITE</td><td>ed</td><td></td></tr>
     * <tr><td>KEYCODE_TV_SATELLITE_BS</td><td>ee</td><td></td></tr>
     * <tr><td>KEYCODE_TV_SATELLITE_CS</td><td>ef</td><td></td></tr>
     * <tr><td>KEYCODE_TV_SATELLITE_SERVICE</td><td>f0</td><td></td></tr>
     * <tr><td>KEYCODE_TV_TELETEXT</td><td>e9</td><td></td></tr>
     * <tr><td>KEYCODE_TV_TERRESTRIAL_ANALOG</td><td>eb</td><td></td></tr>
     * <tr><td>KEYCODE_TV_TERRESTRIAL_DIGITAL</td><td>ec</td><td></td></tr>
     * <tr><td>KEYCODE_TV_TIMER_PROGRAMMING</td><td>102</td><td></td></tr>
     * <tr><td>KEYCODE_TV_ZOOM_MODE</td><td>ff</td><td></td></tr>
     * <tr><td>KEYCODE_U</td><td>31</td><td></td></tr>
     * <tr><td>KEYCODE_UNKNOWN</td><td>0</td><td></td></tr>
     * <tr><td>KEYCODE_V</td><td>32</td><td></td></tr>
     * <tr><td>KEYCODE_VOICE_ASSIST</td><td>e7</td><td></td></tr>
     * <tr><td>KEYCODE_VOLUME_DOWN</td><td>19</td><td></td></tr>
     * <tr><td>KEYCODE_VOLUME_MUTE</td><td>a4</td><td></td></tr>
     * <tr><td>KEYCODE_VOLUME_UP</td><td>18</td><td></td></tr>
     * <tr><td>KEYCODE_W</td><td>33</td><td></td></tr>
     * <tr><td>KEYCODE_WINDOW</td><td>ab</td><td></td></tr>
     * <tr><td>KEYCODE_X</td><td>34</td><td></td></tr>
     * <tr><td>KEYCODE_Y</td><td>35</td><td></td></tr>
     * <tr><td>KEYCODE_YEN</td><td>d8</td><td></td></tr>
     * <tr><td>KEYCODE_Z</td><td>36</td><td></td></tr>
     * <tr><td>KEYCODE_ZENKAKU_HANKAKU</td><td>d3</td><td></td></tr>
     * <tr><td>KEYCODE_ZOOM_IN</td><td>a8</td><td></td></tr>
     * <tr><td>KEYCODE_ZOOM_OUT</td><td>a9</td><td></td></tr>
     * </table>
     *
     * @attr name android:keycode
     */
    public static final int SearchableActionKey_keycode=0;
    /**
     * <p>
     * @attr description
     * If you wish to handle an action key during normal search query entry, you
     * must define an action string here.  This will be added to the
     * {@link android.content.Intent#ACTION_SEARCH ACTION_SEARCH} intent that is passed to your
     * searchable activity.  To examine the string, use
     * {@link android.content.Intent#getStringExtra getStringExtra(SearchManager.ACTION_MSG)}.
     * <i>Optional attribute.</i>
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:queryActionMsg
     */
    public static final int SearchableActionKey_queryActionMsg=1;
    /**
     * <p>
     * @attr description
     * If you wish to handle an action key while a suggestion is being displayed <i>and
     * selected</i>, there are two ways to handle this.  If <i>all</i> of your suggestions
     * can handle the action key, you can simply define the action message using this
     * attribute.  This will be added to the
     * {@link android.content.Intent#ACTION_SEARCH ACTION_SEARCH} intent that is passed to your
     * searchable activity.  To examine the string, use
     * {@link android.content.Intent#getStringExtra getStringExtra(SearchManager.ACTION_MSG)}.
     * <i>Optional attribute.</i>
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:suggestActionMsg
     */
    public static final int SearchableActionKey_suggestActionMsg=2;
    /**
     * <p>
     * @attr description
     * If you wish to handle an action key while a suggestion is being displayed <i>and
     * selected</i>, but you do not wish to enable this action key for every suggestion,
     * then you can use this attribute to control it on a suggestion-by-suggestion basis.
     * First, you must define a column (and name it here) where your suggestions will include
     * the action string.  Then, in your content provider, you must provide this column, and
     * when desired, provide data in this column.
     * The search manager will look at your suggestion cursor, using the string
     * provided here in order to select a column, and will use that to select a string from
     * the cursor.  That string will be added to the
     * {@link android.content.Intent#ACTION_SEARCH ACTION_SEARCH} intent that is passed to
     * your searchable activity.  To examine the string, use
     * {@link android.content.Intent#getStringExtra
     * getStringExtra(SearchManager.ACTION_MSG)}.  <i>If the data does not exist for the
     * selection suggestion, the action key will be ignored.</i><i>Optional attribute.</i>
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:suggestActionMsgColumn
     */
    public static final int SearchableActionKey_suggestActionMsgColumn=3;
    /**
     * Attributes that can be used with a SeekBar.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #SeekBar_thumb android:thumb}</code></td><td>Draws the thumb on a seekbar.</td></tr>
     * <tr><td><code>{@link #SeekBar_thumbOffset android:thumbOffset}</code></td><td>An offset for the thumb that allows it to extend out of the range of the track.</td></tr>
     * <tr><td><code>{@link #SeekBar_splitTrack android:splitTrack}</code></td><td>Whether to split the track and leave a gap for the thumb drawable.</td></tr>
     * <tr><td><code>{@link #SeekBar_thumbTint android:thumbTint}</code></td><td>Tint to apply to the thumb drawable.</td></tr>
     * <tr><td><code>{@link #SeekBar_thumbTintMode android:thumbTintMode}</code></td><td>Blending mode used to apply the thumb tint.</td></tr>
     * <tr><td><code>{@link #SeekBar_tickMark android:tickMark}</code></td><td>Drawable displayed at each progress position on a seekbar.</td></tr>
     * <tr><td><code>{@link #SeekBar_tickMarkTint android:tickMarkTint}</code></td><td>Tint to apply to the tick mark drawable.</td></tr>
     * <tr><td><code>{@link #SeekBar_tickMarkTintMode android:tickMarkTintMode}</code></td><td>Blending mode used to apply the tick mark tint.</td></tr>
     * </table>
     * @see #SeekBar_thumb
     * @see #SeekBar_thumbOffset
     * @see #SeekBar_splitTrack
     * @see #SeekBar_thumbTint
     * @see #SeekBar_thumbTintMode
     * @see #SeekBar_tickMark
     * @see #SeekBar_tickMarkTint
     * @see #SeekBar_tickMarkTintMode
     */
    public static final int[] SeekBar={
      0x01010142, 0x01010143, 0x0101044c, 0x01010471, 
      0x01010472, 0x0101050a, 0x0101050b, 0x0101050c, 
      0x01120103
    };
    /**
     * <p>
     * @attr description
     * Draws the thumb on a seekbar.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:thumb
     */
    public static final int SeekBar_thumb=0;
    /**
     * <p>
     * @attr description
     * An offset for the thumb that allows it to extend out of the range of the track.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:thumbOffset
     */
    public static final int SeekBar_thumbOffset=1;
    /**
     * <p>
     * @attr description
     * Whether to split the track and leave a gap for the thumb drawable.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:splitTrack
     */
    public static final int SeekBar_splitTrack=2;
    /**
     * <p>
     * @attr description
     * Tint to apply to the thumb drawable.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:thumbTint
     */
    public static final int SeekBar_thumbTint=3;
    /**
     * <p>
     * @attr description
     * Blending mode used to apply the thumb tint.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     *
     * @attr name android:thumbTintMode
     */
    public static final int SeekBar_thumbTintMode=4;
    /**
     * <p>
     * @attr description
     * Drawable displayed at each progress position on a seekbar.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:tickMark
     */
    public static final int SeekBar_tickMark=5;
    /**
     * <p>
     * @attr description
     * Tint to apply to the tick mark drawable.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:tickMarkTint
     */
    public static final int SeekBar_tickMarkTint=6;
    /**
     * <p>
     * @attr description
     * Blending mode used to apply the tick mark tint.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     *
     * @attr name android:tickMarkTintMode
     */
    public static final int SeekBar_tickMarkTintMode=7;
    /**
     * Attributes that can be used with a SeekBarPreference.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #SeekBarPreference_layout android:layout}</code></td><td>Supply an identifier for the layout resource to inflate when the ViewStub
     * becomes visible or when forced to do so.</td></tr>
     * </table>
     * @see #SeekBarPreference_layout
     */
    public static final int[] SeekBarPreference={
      0x010100f2, 0x0112000b, 0x011200de
    };
    /**
     * <p>
     * @attr description
     * Supply an identifier for the layout resource to inflate when the ViewStub
     * becomes visible or when forced to do so. The layout resource must be a
     * valid reference to a layout.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:layout
     */
    public static final int SeekBarPreference_layout=0;
    /**
     * Attributes that can be used with a SelectionModeDrawables.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #SelectionModeDrawables_actionModeCutDrawable android:actionModeCutDrawable}</code></td><td>Drawable to use for the Cut action button in Contextual Action Bar.</td></tr>
     * <tr><td><code>{@link #SelectionModeDrawables_actionModeCopyDrawable android:actionModeCopyDrawable}</code></td><td>Drawable to use for the Copy action button in Contextual Action Bar.</td></tr>
     * <tr><td><code>{@link #SelectionModeDrawables_actionModePasteDrawable android:actionModePasteDrawable}</code></td><td>Drawable to use for the Paste action button in Contextual Action Bar.</td></tr>
     * <tr><td><code>{@link #SelectionModeDrawables_actionModeSelectAllDrawable android:actionModeSelectAllDrawable}</code></td><td>Drawable to use for the Select all action button in Contextual Action Bar.</td></tr>
     * </table>
     * @see #SelectionModeDrawables_actionModeCutDrawable
     * @see #SelectionModeDrawables_actionModeCopyDrawable
     * @see #SelectionModeDrawables_actionModePasteDrawable
     * @see #SelectionModeDrawables_actionModeSelectAllDrawable
     */
    public static final int[] SelectionModeDrawables={
      0x01010311, 0x01010312, 0x01010313, 0x0101037e
    };
    /**
     * <p>
     * @attr description
     * Drawable to use for the Cut action button in Contextual Action Bar.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:actionModeCutDrawable
     */
    public static final int SelectionModeDrawables_actionModeCutDrawable=0;
    /**
     * <p>
     * @attr description
     * Drawable to use for the Copy action button in Contextual Action Bar.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:actionModeCopyDrawable
     */
    public static final int SelectionModeDrawables_actionModeCopyDrawable=1;
    /**
     * <p>
     * @attr description
     * Drawable to use for the Paste action button in Contextual Action Bar.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:actionModePasteDrawable
     */
    public static final int SelectionModeDrawables_actionModePasteDrawable=2;
    /**
     * <p>
     * @attr description
     * Drawable to use for the Select all action button in Contextual Action Bar.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:actionModeSelectAllDrawable
     */
    public static final int SelectionModeDrawables_actionModeSelectAllDrawable=3;
    /**
     * Use <code>injected-location-setting</code> as the root tag of the XML resource that
     * describes an injected "Location services" setting. Note that the status value (subtitle)
     * for the setting is specified dynamically by a subclass of SettingInjectorService.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #SettingInjectorService_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
     * associated item.</td></tr>
     * <tr><td><code>{@link #SettingInjectorService_title android:title}</code></td><td>The title associated with the item.</td></tr>
     * <tr><td><code>{@link #SettingInjectorService_settingsActivity android:settingsActivity}</code></td><td>Fully qualified class name of an activity that allows the user to modify
     * the settings for this service.</td></tr>
     * <tr><td><code>{@link #SettingInjectorService_userRestriction android:userRestriction}</code></td><td>The user restriction for this preference.</td></tr>
     * </table>
     * @see #SettingInjectorService_icon
     * @see #SettingInjectorService_title
     * @see #SettingInjectorService_settingsActivity
     * @see #SettingInjectorService_userRestriction
     */
    public static final int[] SettingInjectorService={
      0x01010002, 0x010101e1, 0x01010225, 0x01010584
    };
    /**
     * <p>
     * @attr description
     * The icon for the preference, should refer to all apps covered by the setting. Typically
     * a generic icon for the developer.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:icon
     */
    public static final int SettingInjectorService_icon=0;
    /**
     * <p>
     * @attr description
     * The title for the preference.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:title
     */
    public static final int SettingInjectorService_title=1;
    /**
     * <p>
     * @attr description
     * The activity to launch when the setting is clicked on.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:settingsActivity
     */
    public static final int SettingInjectorService_settingsActivity=2;
    /**
     * <p>
     * @attr description
     * The user restriction for this preference.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:userRestriction
     */
    public static final int SettingInjectorService_userRestriction=3;
    /**
     * Drawable used to draw shapes.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ShapeDrawable_dither android:dither}</code></td><td>Enables or disables dithering of the bitmap if the bitmap does not have the
     * same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
     * an RGB 565 screen).</td></tr>
     * <tr><td><code>{@link #ShapeDrawable_tint android:tint}</code></td><td>The tinting color for the image.</td></tr>
     * <tr><td><code>{@link #ShapeDrawable_height android:height}</code></td><td>Makes the TextView be exactly this tall.</td></tr>
     * <tr><td><code>{@link #ShapeDrawable_width android:width}</code></td><td>Makes the TextView be exactly this wide.</td></tr>
     * <tr><td><code>{@link #ShapeDrawable_color android:color}</code></td><td>Solid color for the gradient shape.</td></tr>
     * <tr><td><code>{@link #ShapeDrawable_tintMode android:tintMode}</code></td><td>When a tint color is set, specifies its Porter-Duff blending mode.</td></tr>
     * </table>
     * @see #ShapeDrawable_dither
     * @see #ShapeDrawable_tint
     * @see #ShapeDrawable_height
     * @see #ShapeDrawable_width
     * @see #ShapeDrawable_color
     * @see #ShapeDrawable_tintMode
     */
    public static final int[] ShapeDrawable={
      0x0101011c, 0x01010121, 0x01010155, 0x01010159, 
      0x010101a5, 0x010103fb
    };
    /**
     * <p>
     * @attr description
     * Enables or disables dithering.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:dither
     */
    public static final int ShapeDrawable_dither=0;
    /**
     * <p>
     * @attr description
     * If set, specifies the color to apply to the drawable as a tint. By default,
     * no tint is applied. May be a color state list.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:tint
     */
    public static final int ShapeDrawable_tint=1;
    /**
     * <p>
     * @attr description
     * Defines the height of the shape.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:height
     */
    public static final int ShapeDrawable_height=2;
    /**
     * <p>
     * @attr description
     * Defines the width of the shape.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:width
     */
    public static final int ShapeDrawable_width=3;
    /**
     * <p>
     * @attr description
     * Defines the color of the shape.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:color
     */
    public static final int ShapeDrawable_color=4;
    /**
     * <p>
     * @attr description
     * When a tint color is set, specifies its Porter-Duff blending mode. The
     * default value is src_in, which treats the drawable as an alpha mask.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     *
     * @attr name android:tintMode
     */
    public static final int ShapeDrawable_tintMode=5;
    /**
     * Defines the padding of a ShapeDrawable.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ShapeDrawablePadding_left android:left}</code></td><td>Amount of left padding inside the gradient shape.</td></tr>
     * <tr><td><code>{@link #ShapeDrawablePadding_top android:top}</code></td><td>Amount of top padding inside the gradient shape.</td></tr>
     * <tr><td><code>{@link #ShapeDrawablePadding_right android:right}</code></td><td>Amount of right padding inside the gradient shape.</td></tr>
     * <tr><td><code>{@link #ShapeDrawablePadding_bottom android:bottom}</code></td><td>Amount of bottom padding inside the gradient shape.</td></tr>
     * </table>
     * @see #ShapeDrawablePadding_left
     * @see #ShapeDrawablePadding_top
     * @see #ShapeDrawablePadding_right
     * @see #ShapeDrawablePadding_bottom
     */
    public static final int[] ShapeDrawablePadding={
      0x010101ad, 0x010101ae, 0x010101af, 0x010101b0
    };
    /**
     * <p>
     * @attr description
     * Left padding.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:left
     */
    public static final int ShapeDrawablePadding_left=0;
    /**
     * <p>
     * @attr description
     * Top padding.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:top
     */
    public static final int ShapeDrawablePadding_top=1;
    /**
     * <p>
     * @attr description
     * Right padding.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:right
     */
    public static final int ShapeDrawablePadding_right=2;
    /**
     * <p>
     * @attr description
     * Bottom padding.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:bottom
     */
    public static final int ShapeDrawablePadding_bottom=3;
    /**
     * Attributes that can be used with a Shortcut.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Shortcut_icon android:icon}</code></td><td>A Drawable resource providing a graphical representation of its
     * associated item.</td></tr>
     * <tr><td><code>{@link #Shortcut_enabled android:enabled}</code></td><td>Specifies whether the widget is enabled.</td></tr>
     * <tr><td><code>{@link #Shortcut_shortcutId android:shortcutId}</code></td><td></td></tr>
     * <tr><td><code>{@link #Shortcut_shortcutShortLabel android:shortcutShortLabel}</code></td><td></td></tr>
     * <tr><td><code>{@link #Shortcut_shortcutLongLabel android:shortcutLongLabel}</code></td><td></td></tr>
     * <tr><td><code>{@link #Shortcut_shortcutDisabledMessage android:shortcutDisabledMessage}</code></td><td></td></tr>
     * <tr><td><code>{@link #Shortcut_splashScreenTheme android:splashScreenTheme}</code></td><td></td></tr>
     * </table>
     * @see #Shortcut_icon
     * @see #Shortcut_enabled
     * @see #Shortcut_shortcutId
     * @see #Shortcut_shortcutShortLabel
     * @see #Shortcut_shortcutLongLabel
     * @see #Shortcut_shortcutDisabledMessage
     * @see #Shortcut_splashScreenTheme
     */
    public static final int[] Shortcut={
      0x01010002, 0x0101000e, 0x01010528, 0x01010529, 
      0x0101052a, 0x0101052b, 0x01010631
    };
    /**
     * <p>
     * @attr description
     * A Drawable resource providing a graphical representation of its
     * associated item.  Use with the
     * application tag (to supply a default icon for all application
     * components), or with the activity, receiver, service, or instrumentation
     * tag (to supply a specific icon for that component).  It may also be
     * used with the intent-filter tag to supply an icon to show to the
     * user when an activity is being selected based on a particular Intent.
     * <p>The given icon will be used to display to the user a graphical
     * representation of its associated component; for example, as the icon
     * for main activity that is displayed in the launcher.  This must be
     * a reference to a Drawable resource containing the image definition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:icon
     */
    public static final int Shortcut_icon=0;
    /**
     * <p>
     * @attr description
     * Specifies whether the widget is enabled. The interpretation of the enabled state varies by subclass.
     * For example, a non-enabled EditText prevents the user from editing the contained text, and
     * a non-enabled Button prevents the user from tapping the button.
     * The appearance of enabled and non-enabled widgets may differ, if the drawables referenced
     * from evaluating state_enabled differ.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:enabled
     */
    public static final int Shortcut_enabled=1;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#shortcutId}
     * attribute's value can be found in the {@link #Shortcut} array.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:shortcutId
     */
    public static final int Shortcut_shortcutId=2;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#shortcutShortLabel}
     * attribute's value can be found in the {@link #Shortcut} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:shortcutShortLabel
     */
    public static final int Shortcut_shortcutShortLabel=3;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#shortcutLongLabel}
     * attribute's value can be found in the {@link #Shortcut} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:shortcutLongLabel
     */
    public static final int Shortcut_shortcutLongLabel=4;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#shortcutDisabledMessage}
     * attribute's value can be found in the {@link #Shortcut} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:shortcutDisabledMessage
     */
    public static final int Shortcut_shortcutDisabledMessage=5;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#splashScreenTheme}
     * attribute's value can be found in the {@link #Shortcut} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:splashScreenTheme
     */
    public static final int Shortcut_splashScreenTheme=6;
    /**
     * Attributes that can be used with a ShortcutCategories.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ShortcutCategories_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * </table>
     * @see #ShortcutCategories_name
     */
    public static final int[] ShortcutCategories={
      0x01010003
    };
    /**
     * <p>
     * @attr description
     * A unique name for the given item.  This must use a Java-style naming
     * convention to ensure the name is unique, for example
     * "com.mycompany.MyName".
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int ShortcutCategories_name=0;
    /**
     * Use <code>slide</code>as the root tag of the XML resource that
     * describes a {@link android.transition.Slide Slide} transition.
     * The attributes of the {@link android.R.styleable#Transition Transition}
     * resource are available in addition to the specific attributes of Slide
     * described here.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Slide_slideEdge android:slideEdge}</code></td><td></td></tr>
     * </table>
     * @see #Slide_slideEdge
     */
    public static final int[] Slide={
      0x01010430
    };
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#slideEdge}
     * attribute's value can be found in the {@link #Slide} array.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Slide to and from the bottom edge of the Scene.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Slide to and from the x-axis position at the end of the Scene root.</td></tr>
     * <tr><td>left</td><td>3</td><td>Slide to and from the left edge of the Scene.</td></tr>
     * <tr><td>right</td><td>5</td><td>Slide to and from the right edge of the Scene.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Slide to and from the x-axis position at the start of the Scene root.</td></tr>
     * <tr><td>top</td><td>30</td><td>Slide to and from the top edge of the Scene.</td></tr>
     * </table>
     *
     * @attr name android:slideEdge
     */
    public static final int Slide_slideEdge=0;
    /**
     * SlidingDrawer specific attributes. These attributes are used to configure
     * a SlidingDrawer from XML.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #SlidingDrawer_orientation android:orientation}</code></td><td>Standard orientation constant.</td></tr>
     * <tr><td><code>{@link #SlidingDrawer_bottomOffset android:bottomOffset}</code></td><td>Extra offset for the handle at the bottom of the SlidingDrawer.</td></tr>
     * <tr><td><code>{@link #SlidingDrawer_topOffset android:topOffset}</code></td><td>Extra offset for the handle at the top of the SlidingDrawer.</td></tr>
     * <tr><td><code>{@link #SlidingDrawer_allowSingleTap android:allowSingleTap}</code></td><td>Indicates whether the drawer can be opened/closed by a single tap
     * on the handle.</td></tr>
     * <tr><td><code>{@link #SlidingDrawer_handle android:handle}</code></td><td>Identifier for the child that represents the drawer's handle.</td></tr>
     * <tr><td><code>{@link #SlidingDrawer_content android:content}</code></td><td>Identifier for the child that represents the drawer's content.</td></tr>
     * <tr><td><code>{@link #SlidingDrawer_animateOnClick android:animateOnClick}</code></td><td>Indicates whether the drawer should be opened/closed with an animation
     * when the user clicks the handle.</td></tr>
     * </table>
     * @see #SlidingDrawer_orientation
     * @see #SlidingDrawer_bottomOffset
     * @see #SlidingDrawer_topOffset
     * @see #SlidingDrawer_allowSingleTap
     * @see #SlidingDrawer_handle
     * @see #SlidingDrawer_content
     * @see #SlidingDrawer_animateOnClick
     */
    public static final int[] SlidingDrawer={
      0x010100c4, 0x01010257, 0x01010258, 0x01010259, 
      0x0101025a, 0x0101025b, 0x0101025c
    };
    /**
     * <p>
     * @attr description
     * Orientation of the SlidingDrawer.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>horizontal</td><td>0</td><td>Defines an horizontal widget.</td></tr>
     * <tr><td>vertical</td><td>1</td><td>Defines a vertical widget.</td></tr>
     * </table>
     *
     * @attr name android:orientation
     */
    public static final int SlidingDrawer_orientation=0;
    /**
     * <p>
     * @attr description
     * Extra offset for the handle at the bottom of the SlidingDrawer.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:bottomOffset
     */
    public static final int SlidingDrawer_bottomOffset=1;
    /**
     * <p>
     * @attr description
     * Extra offset for the handle at the top of the SlidingDrawer.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:topOffset
     */
    public static final int SlidingDrawer_topOffset=2;
    /**
     * <p>
     * @attr description
     * Indicates whether the drawer can be opened/closed by a single tap
     * on the handle.  (If false, the user must drag or fling, or click
     * using the trackball, to open/close the drawer.)  Default is true.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:allowSingleTap
     */
    public static final int SlidingDrawer_allowSingleTap=3;
    /**
     * <p>
     * @attr description
     * Identifier for the child that represents the drawer's handle.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:handle
     */
    public static final int SlidingDrawer_handle=4;
    /**
     * <p>
     * @attr description
     * Identifier for the child that represents the drawer's content.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:content
     */
    public static final int SlidingDrawer_content=5;
    /**
     * <p>
     * @attr description
     * Indicates whether the drawer should be opened/closed with an animation
     * when the user clicks the handle. Default is true.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:animateOnClick
     */
    public static final int SlidingDrawer_animateOnClick=6;
    /**
     * Attributes that can be used with a SlidingTab.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #SlidingTab_orientation android:orientation}</code></td><td>Standard orientation constant.</td></tr>
     * </table>
     * @see #SlidingTab_orientation
     */
    public static final int[] SlidingTab={
      0x010100c4
    };
    /**
     * <p>
     * @attr description
     * Use "horizontal" for a row, "vertical" for a column.  The default is horizontal.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>horizontal</td><td>0</td><td>Defines an horizontal widget.</td></tr>
     * <tr><td>vertical</td><td>1</td><td>Defines a vertical widget.</td></tr>
     * </table>
     *
     * @attr name android:orientation
     */
    public static final int SlidingTab_orientation=0;
    /**
     * Use <code>spell-checker</code> as the root tag of the XML resource that
     * describes an
     * {@link android.service.textservice.SpellCheckerService} service, which is
     * referenced from its
     * {@link android.view.textservice.SpellCheckerSession#SERVICE_META_DATA}
     * meta-data entry.  Described here are the attributes that can be
     * included in that tag.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #SpellChecker_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
     * <tr><td><code>{@link #SpellChecker_settingsActivity android:settingsActivity}</code></td><td>Fully qualified class name of an activity that allows the user to modify
     * the settings for this service.</td></tr>
     * </table>
     * @see #SpellChecker_label
     * @see #SpellChecker_settingsActivity
     */
    public static final int[] SpellChecker={
      0x01010001, 0x01010225
    };
    /**
     * <p>
     * @attr description
     * The name of the spell checker.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:label
     */
    public static final int SpellChecker_label=0;
    /**
     * <p>
     * @attr description
     * Component name of an activity that allows the user to modify
     * the settings for this service.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:settingsActivity
     */
    public static final int SpellChecker_settingsActivity=1;
    /**
     * This is the subtype of the spell checker. Subtype can describe locales (for example,
     * en_US and fr_FR).
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #SpellChecker_Subtype_label android:label}</code></td><td>A user-legible name for the given item.</td></tr>
     * <tr><td><code>{@link #SpellChecker_Subtype_subtypeLocale android:subtypeLocale}</code></td><td>The locale of the subtype.</td></tr>
     * <tr><td><code>{@link #SpellChecker_Subtype_subtypeExtraValue android:subtypeExtraValue}</code></td><td>The extra value of the subtype.</td></tr>
     * <tr><td><code>{@link #SpellChecker_Subtype_subtypeId android:subtypeId}</code></td><td>The unique id for the subtype.</td></tr>
     * <tr><td><code>{@link #SpellChecker_Subtype_languageTag android:languageTag}</code></td><td>The BCP-47 Language Tag of the subtype.</td></tr>
     * </table>
     * @see #SpellChecker_Subtype_label
     * @see #SpellChecker_Subtype_subtypeLocale
     * @see #SpellChecker_Subtype_subtypeExtraValue
     * @see #SpellChecker_Subtype_subtypeId
     * @see #SpellChecker_Subtype_languageTag
     */
    public static final int[] SpellChecker_Subtype={
      0x01010001, 0x01010399, 0x0101039a, 0x010103c1, 
      0x01010508
    };
    /**
     * <p>
     * @attr description
     * The name of the subtype.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:label
     */
    public static final int SpellChecker_Subtype_label=0;
    /**
     * <p>
     * @attr description
     * The locale of the subtype. This string should be a locale (for example, en_US and
     * fr_FR). This is also used by the framework to know the supported locales
     * of the spell checker. {@link android.view.textservice.SpellCheckerSubtype#getLocale()}
     * returns the value specified in this attribute.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:subtypeLocale
     */
    public static final int SpellChecker_Subtype_subtypeLocale=1;
    /**
     * <p>
     * @attr description
     * The extra value of the subtype. This string can be any string and will be passed to
     * the SpellChecker.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:subtypeExtraValue
     */
    public static final int SpellChecker_Subtype_subtypeExtraValue=2;
    /**
     * <p>
     * @attr description
     * The unique id for the subtype. The text service (spell checker) framework keeps track
     * of enabled subtypes by ID. When the spell checker package gets upgraded, enabled IDs
     * will stay enabled even if other attributes are different. If the ID is unspecified or
     * explicitly specified to 0 in XML resources,
     * {@code Arrays.hashCode(new Object[] {subtypeLocale, extraValue})} will be used instead.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:subtypeId
     */
    public static final int SpellChecker_Subtype_subtypeId=3;
    /**
     * <p>
     * @attr description
     * The BCP-47 Language Tag of the subtype.  This replaces
     * {@link android.R.styleable#SpellChecker_Subtype_subtypeLocale}.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:languageTag
     */
    public static final int SpellChecker_Subtype_languageTag=4;
    /**
     * Attributes that can be used with a Spinner.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Spinner_gravity android:gravity}</code></td><td>Specifies how an object should position its content, on both the X and Y axes,
     * within its own bounds.</td></tr>
     * <tr><td><code>{@link #Spinner_dropDownSelector android:dropDownSelector}</code></td><td>Selector in a drop down list.</td></tr>
     * <tr><td><code>{@link #Spinner_popupBackground android:popupBackground}</code></td><td>The background to use for the popup window.</td></tr>
     * <tr><td><code>{@link #Spinner_prompt android:prompt}</code></td><td>The prompt to display when the spinner's dialog is shown.</td></tr>
     * <tr><td><code>{@link #Spinner_dropDownWidth android:dropDownWidth}</code></td><td>Specifies the basic width of the dropdown.</td></tr>
     * <tr><td><code>{@link #Spinner_spinnerMode android:spinnerMode}</code></td><td>Display mode for spinner options.</td></tr>
     * <tr><td><code>{@link #Spinner_popupElevation android:popupElevation}</code></td><td>Window elevation to use for the popup window.</td></tr>
     * <tr><td><code>{@link #Spinner_popupTheme android:popupTheme}</code></td><td>Reference to a theme that should be used to inflate popups
     * shown by widgets in the toolbar.</td></tr>
     * </table>
     * @see #Spinner_gravity
     * @see #Spinner_dropDownSelector
     * @see #Spinner_popupBackground
     * @see #Spinner_prompt
     * @see #Spinner_dropDownWidth
     * @see #Spinner_spinnerMode
     * @see #Spinner_popupElevation
     * @see #Spinner_popupTheme
     */
    public static final int[] Spinner={
      0x010100af, 0x01010175, 0x01010176, 0x0101017b, 
      0x01010262, 0x010102f1, 0x0101048c, 0x010104a9, 
      0x0112003a, 0x011200b9
    };
    /**
     * <p>
     * @attr description
     * Gravity setting for positioning the currently selected item.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
     * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
     * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
     * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
     * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the horizontal gravity: a left gravity will clip the right
     * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
     * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the vertical gravity: a top gravity will clip the bottom
     * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
     * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
     * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
     * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
     * </table>
     *
     * @attr name android:gravity
     */
    public static final int Spinner_gravity=0;
    /**
     * <p>
     * @attr description
     * List selector to use for spinnerMode="dropdown" display.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:dropDownSelector
     */
    public static final int Spinner_dropDownSelector=1;
    /**
     * <p>
     * @attr description
     * Background drawable to use for the dropdown in spinnerMode="dropdown".
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:popupBackground
     */
    public static final int Spinner_popupBackground=2;
    /**
     * <p>
     * @attr description
     * The prompt to display when the spinner's dialog is shown.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:prompt
     */
    public static final int Spinner_prompt=3;
    /**
     * <p>
     * @attr description
     * Width of the dropdown in spinnerMode="dropdown".
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>fill_parent</td><td>ffffffff</td><td>The dropdown should fill the width of the screen.
     * This constant is deprecated starting from API Level 8 and
     * is replaced by {@code match_parent}.</td></tr>
     * <tr><td>match_parent</td><td>ffffffff</td><td>The dropdown should fit the width of the screen.
     * Introduced in API Level 8.</td></tr>
     * <tr><td>wrap_content</td><td>fffffffe</td><td>The dropdown should fit the width of its anchor.</td></tr>
     * </table>
     *
     * @attr name android:dropDownWidth
     */
    public static final int Spinner_dropDownWidth=4;
    /**
     * <p>
     * @attr description
     * Display mode for spinner options.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>dialog</td><td>0</td><td>Spinner options will be presented to the user as a dialog window.</td></tr>
     * <tr><td>dropdown</td><td>1</td><td>Spinner options will be presented to the user as an inline dropdown
     * anchored to the spinner widget itself.</td></tr>
     * </table>
     *
     * @attr name android:spinnerMode
     */
    public static final int Spinner_spinnerMode=5;
    /**
     * <p>
     * @attr description
     * Window elevation to use for the dropdown in spinnerMode="dropdown".
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:popupElevation
     */
    public static final int Spinner_popupElevation=6;
    /**
     * <p>
     * @attr description
     * Theme to use for the drop-down or dialog popup window.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:popupTheme
     */
    public static final int Spinner_popupTheme=7;
    /**
     * Attributes that can be used with a StackView.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * </table>
     */
    public static final int[] StackView={
      0x01120022, 0x011200ce
    };
    /**
     * Attributes that can be assigned to a StateListAnimator item.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #StateListAnimatorItem_animation android:animation}</code></td><td>Animation to use on each child.</td></tr>
     * </table>
     * @see #StateListAnimatorItem_animation
     */
    public static final int[] StateListAnimatorItem={
      0x010101cd
    };
    /**
     * <p>
     * @attr description
     * Animation to use on each child.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:animation
     */
    public static final int StateListAnimatorItem_animation=0;
    /**
     * Drawable used to render several states. Each state is represented by
     * a child drawable.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #StateListDrawable_dither android:dither}</code></td><td>Enables or disables dithering of the bitmap if the bitmap does not have the
     * same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
     * an RGB 565 screen).</td></tr>
     * <tr><td><code>{@link #StateListDrawable_visible android:visible}</code></td><td>Provides initial visibility state of the drawable; the default
     * value is false.</td></tr>
     * <tr><td><code>{@link #StateListDrawable_variablePadding android:variablePadding}</code></td><td>If true, allows the drawable's padding to change based on the
     * current state that is selected.</td></tr>
     * <tr><td><code>{@link #StateListDrawable_constantSize android:constantSize}</code></td><td>If true, the drawable's reported internal size will remain
     * constant as the state changes; the size is the maximum of all
     * of the states.</td></tr>
     * <tr><td><code>{@link #StateListDrawable_enterFadeDuration android:enterFadeDuration}</code></td><td>Amount of time (in milliseconds) to fade in a new state drawable.</td></tr>
     * <tr><td><code>{@link #StateListDrawable_exitFadeDuration android:exitFadeDuration}</code></td><td>Amount of time (in milliseconds) to fade out an old state drawable.</td></tr>
     * <tr><td><code>{@link #StateListDrawable_autoMirrored android:autoMirrored}</code></td><td>Indicates if the drawable needs to be mirrored when its layout direction is
     * RTL (right-to-left).</td></tr>
     * </table>
     * @see #StateListDrawable_dither
     * @see #StateListDrawable_visible
     * @see #StateListDrawable_variablePadding
     * @see #StateListDrawable_constantSize
     * @see #StateListDrawable_enterFadeDuration
     * @see #StateListDrawable_exitFadeDuration
     * @see #StateListDrawable_autoMirrored
     */
    public static final int[] StateListDrawable={
      0x0101011c, 0x01010194, 0x01010195, 0x01010196, 
      0x0101030c, 0x0101030d, 0x010103ea
    };
    /**
     * <p>
     * @attr description
     * Enables or disables dithering of the bitmap if the bitmap does not have the
     * same pixel configuration as the screen (for instance: a ARGB 8888 bitmap with
     * an RGB 565 screen).
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:dither
     */
    public static final int StateListDrawable_dither=0;
    /**
     * <p>
     * @attr description
     * Indicates whether the drawable should be initially visible.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:visible
     */
    public static final int StateListDrawable_visible=1;
    /**
     * <p>
     * @attr description
     * If true, allows the drawable's padding to change based on the
     * current state that is selected.  If false, the padding will
     * stay the same (based on the maximum padding of all the states).
     * Enabling this feature requires that the owner of the drawable
     * deal with performing layout when the state changes, which is
     * often not supported.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:variablePadding
     */
    public static final int StateListDrawable_variablePadding=2;
    /**
     * <p>
     * @attr description
     * If true, the drawable's reported internal size will remain
     * constant as the state changes; the size is the maximum of all
     * of the states.  If false, the size will vary based on the
     * current state.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:constantSize
     */
    public static final int StateListDrawable_constantSize=3;
    /**
     * <p>
     * @attr description
     * Amount of time (in milliseconds) to fade in a new state drawable.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:enterFadeDuration
     */
    public static final int StateListDrawable_enterFadeDuration=4;
    /**
     * <p>
     * @attr description
     * Amount of time (in milliseconds) to fade out an old state drawable.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:exitFadeDuration
     */
    public static final int StateListDrawable_exitFadeDuration=5;
    /**
     * <p>
     * @attr description
     * Indicates if the drawable needs to be mirrored when its layout direction is
     * RTL (right-to-left).
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:autoMirrored
     */
    public static final int StateListDrawable_autoMirrored=6;
    /**
     * Represents a single state inside a StateListDrawable.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #StateListDrawableItem_drawable android:drawable}</code></td><td>Reference to a drawable resource to use for the frame.</td></tr>
     * </table>
     * @see #StateListDrawableItem_drawable
     */
    public static final int[] StateListDrawableItem={
      0x01010199
    };
    /**
     * <p>
     * @attr description
     * Reference to a drawable resource to use for the state. If not
     * given, the drawable must be defined by the first child tag.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:drawable
     */
    public static final int StateListDrawableItem_drawable=0;
    /**
     * Attributes that can be used with a Storage.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * </table>
     */
    public static final int[] Storage={
      0x0112000f, 0x0112003f, 0x0112008a, 0x0112008f, 
      0x01120090, 0x011200c3, 0x011200ca, 0x011200e6
    };
    /**
     * Attributes that can be used with a SuggestionSpan.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * </table>
     */
    public static final int[] SuggestionSpan={
      0x011200f4, 0x011200f5
    };
    /**
     * Attributes that can be used with a Switch.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Switch_textOn android:textOn}</code></td><td>The text for the button when it is checked.</td></tr>
     * <tr><td><code>{@link #Switch_textOff android:textOff}</code></td><td>The text for the button when it is not checked.</td></tr>
     * <tr><td><code>{@link #Switch_thumb android:thumb}</code></td><td>Draws the thumb on a seekbar.</td></tr>
     * <tr><td><code>{@link #Switch_switchTextAppearance android:switchTextAppearance}</code></td><td>TextAppearance style for text displayed on the switch thumb.</td></tr>
     * <tr><td><code>{@link #Switch_track android:track}</code></td><td>Drawable to use as the "track" that the switch thumb slides within.</td></tr>
     * <tr><td><code>{@link #Switch_switchMinWidth android:switchMinWidth}</code></td><td>Minimum width for the switch component.</td></tr>
     * <tr><td><code>{@link #Switch_switchPadding android:switchPadding}</code></td><td>Minimum space between the switch and caption text.</td></tr>
     * <tr><td><code>{@link #Switch_thumbTextPadding android:thumbTextPadding}</code></td><td>Amount of padding on either side of text within the switch thumb.</td></tr>
     * <tr><td><code>{@link #Switch_splitTrack android:splitTrack}</code></td><td>Whether to split the track and leave a gap for the thumb drawable.</td></tr>
     * <tr><td><code>{@link #Switch_thumbTint android:thumbTint}</code></td><td>Tint to apply to the thumb drawable.</td></tr>
     * <tr><td><code>{@link #Switch_thumbTintMode android:thumbTintMode}</code></td><td>Blending mode used to apply the thumb tint.</td></tr>
     * <tr><td><code>{@link #Switch_showText android:showText}</code></td><td>Whether to draw on/off text.</td></tr>
     * <tr><td><code>{@link #Switch_trackTint android:trackTint}</code></td><td>Tint to apply to the track.</td></tr>
     * <tr><td><code>{@link #Switch_trackTintMode android:trackTintMode}</code></td><td>Blending mode used to apply the track tint.</td></tr>
     * </table>
     * @see #Switch_textOn
     * @see #Switch_textOff
     * @see #Switch_thumb
     * @see #Switch_switchTextAppearance
     * @see #Switch_track
     * @see #Switch_switchMinWidth
     * @see #Switch_switchPadding
     * @see #Switch_thumbTextPadding
     * @see #Switch_splitTrack
     * @see #Switch_thumbTint
     * @see #Switch_thumbTintMode
     * @see #Switch_showText
     * @see #Switch_trackTint
     * @see #Switch_trackTintMode
     */
    public static final int[] Switch={
      0x01010124, 0x01010125, 0x01010142, 0x0101036e, 
      0x0101036f, 0x01010370, 0x01010371, 0x01010372, 
      0x0101044c, 0x01010471, 0x01010472, 0x010104ad, 
      0x010104d9, 0x010104da
    };
    /**
     * <p>
     * @attr description
     * Text to use when the switch is in the checked/"on" state.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:textOn
     */
    public static final int Switch_textOn=0;
    /**
     * <p>
     * @attr description
     * Text to use when the switch is in the unchecked/"off" state.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:textOff
     */
    public static final int Switch_textOff=1;
    /**
     * <p>
     * @attr description
     * Drawable to use as the "thumb" that switches back and forth.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:thumb
     */
    public static final int Switch_thumb=2;
    /**
     * <p>
     * @attr description
     * TextAppearance style for text displayed on the switch thumb.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:switchTextAppearance
     */
    public static final int Switch_switchTextAppearance=3;
    /**
     * <p>
     * @attr description
     * Drawable to use as the "track" that the switch thumb slides within.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:track
     */
    public static final int Switch_track=4;
    /**
     * <p>
     * @attr description
     * Minimum width for the switch component.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:switchMinWidth
     */
    public static final int Switch_switchMinWidth=5;
    /**
     * <p>
     * @attr description
     * Minimum space between the switch and caption text.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:switchPadding
     */
    public static final int Switch_switchPadding=6;
    /**
     * <p>
     * @attr description
     * Amount of padding on either side of text within the switch thumb.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:thumbTextPadding
     */
    public static final int Switch_thumbTextPadding=7;
    /**
     * <p>
     * @attr description
     * Whether to split the track and leave a gap for the thumb drawable.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:splitTrack
     */
    public static final int Switch_splitTrack=8;
    /**
     * <p>
     * @attr description
     * Tint to apply to the thumb.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:thumbTint
     */
    public static final int Switch_thumbTint=9;
    /**
     * <p>
     * @attr description
     * Blending mode used to apply the thumb tint.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     *
     * @attr name android:thumbTintMode
     */
    public static final int Switch_thumbTintMode=10;
    /**
     * <p>
     * @attr description
     * Whether to draw on/off text.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:showText
     */
    public static final int Switch_showText=11;
    /**
     * <p>
     * @attr description
     * Tint to apply to the track.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:trackTint
     */
    public static final int Switch_trackTint=12;
    /**
     * <p>
     * @attr description
     * Blending mode used to apply the track tint.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     *
     * @attr name android:trackTintMode
     */
    public static final int Switch_trackTintMode=13;
    /**
     * Attributes that can be used with a SwitchPreference.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #SwitchPreference_summaryOn android:summaryOn}</code></td><td>The summary for the Preference in a PreferenceActivity screen when the
     * CheckBoxPreference is checked.</td></tr>
     * <tr><td><code>{@link #SwitchPreference_summaryOff android:summaryOff}</code></td><td>The summary for the Preference in a PreferenceActivity screen when the
     * CheckBoxPreference is unchecked.</td></tr>
     * <tr><td><code>{@link #SwitchPreference_disableDependentsState android:disableDependentsState}</code></td><td>The state (true for on, or false for off) that causes dependents to be disabled.</td></tr>
     * <tr><td><code>{@link #SwitchPreference_switchTextOn android:switchTextOn}</code></td><td>The text used on the switch itself when in the "on" state.</td></tr>
     * <tr><td><code>{@link #SwitchPreference_switchTextOff android:switchTextOff}</code></td><td>The text used on the switch itself when in the "off" state.</td></tr>
     * </table>
     * @see #SwitchPreference_summaryOn
     * @see #SwitchPreference_summaryOff
     * @see #SwitchPreference_disableDependentsState
     * @see #SwitchPreference_switchTextOn
     * @see #SwitchPreference_switchTextOff
     */
    public static final int[] SwitchPreference={
      0x010101ef, 0x010101f0, 0x010101f1, 0x0101036b, 
      0x0101036c
    };
    /**
     * <p>
     * @attr description
     * The summary for the Preference in a PreferenceActivity screen when the
     * SwitchPreference is checked. If separate on/off summaries are not
     * needed, the summary attribute can be used instead.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:summaryOn
     */
    public static final int SwitchPreference_summaryOn=0;
    /**
     * <p>
     * @attr description
     * The summary for the Preference in a PreferenceActivity screen when the
     * SwitchPreference is unchecked. If separate on/off summaries are not
     * needed, the summary attribute can be used instead.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:summaryOff
     */
    public static final int SwitchPreference_summaryOff=1;
    /**
     * <p>
     * @attr description
     * The state (true for on, or false for off) that causes dependents to be disabled. By default,
     * dependents will be disabled when this is unchecked, so the value of this preference is false.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:disableDependentsState
     */
    public static final int SwitchPreference_disableDependentsState=2;
    /**
     * <p>
     * @attr description
     * The text used on the switch itself when in the "on" state.
     * This should be a very SHORT string, as it appears in a small space.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:switchTextOn
     */
    public static final int SwitchPreference_switchTextOn=3;
    /**
     * <p>
     * @attr description
     * The text used on the switch itself when in the "off" state.
     * This should be a very SHORT string, as it appears in a small space.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:switchTextOff
     */
    public static final int SwitchPreference_switchTextOff=4;
    /**
     * Use <code>account-authenticator</code> as the root tag of the XML resource that
     * describes an account authenticator.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #SyncAdapter_settingsActivity android:settingsActivity}</code></td><td>Fully qualified class name of an activity that allows the user to modify
     * the settings for this service.</td></tr>
     * <tr><td><code>{@link #SyncAdapter_accountType android:accountType}</code></td><td>The account type this authenticator handles.</td></tr>
     * <tr><td><code>{@link #SyncAdapter_contentAuthority android:contentAuthority}</code></td><td>the authority of a content provider.</td></tr>
     * <tr><td><code>{@link #SyncAdapter_userVisible android:userVisible}</code></td><td></td></tr>
     * <tr><td><code>{@link #SyncAdapter_supportsUploading android:supportsUploading}</code></td><td></td></tr>
     * <tr><td><code>{@link #SyncAdapter_allowParallelSyncs android:allowParallelSyncs}</code></td><td>Set to true to tell the SyncManager that this SyncAdapter supports
     * multiple simultaneous syncs for the same account type and authority.</td></tr>
     * <tr><td><code>{@link #SyncAdapter_isAlwaysSyncable android:isAlwaysSyncable}</code></td><td>Set to true to tell the SyncManager to automatically call setIsSyncable(..., ..., 1)
     * for the SyncAdapter instead of issuaing an initialization sync to the SyncAdapter.</td></tr>
     * </table>
     * @see #SyncAdapter_settingsActivity
     * @see #SyncAdapter_accountType
     * @see #SyncAdapter_contentAuthority
     * @see #SyncAdapter_userVisible
     * @see #SyncAdapter_supportsUploading
     * @see #SyncAdapter_allowParallelSyncs
     * @see #SyncAdapter_isAlwaysSyncable
     */
    public static final int[] SyncAdapter={
      0x01010225, 0x0101028f, 0x01010290, 0x01010291, 
      0x0101029b, 0x01010332, 0x01010333
    };
    /**
     * <p>
     * @attr description
     * If provided, specifies the action of the settings
     * activity for this SyncAdapter.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:settingsActivity
     */
    public static final int SyncAdapter_settingsActivity=0;
    /**
     * <p>
     * @attr description
     * The account type this authenticator handles.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:accountType
     */
    public static final int SyncAdapter_accountType=1;
    /**
     * <p>
     * @attr description
     * the authority of a content provider.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:contentAuthority
     */
    public static final int SyncAdapter_contentAuthority=2;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#userVisible}
     * attribute's value can be found in the {@link #SyncAdapter} array.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:userVisible
     */
    public static final int SyncAdapter_userVisible=3;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#supportsUploading}
     * attribute's value can be found in the {@link #SyncAdapter} array.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:supportsUploading
     */
    public static final int SyncAdapter_supportsUploading=4;
    /**
     * <p>
     * @attr description
     * Set to true to tell the SyncManager that this SyncAdapter supports
     * multiple simultaneous syncs for the same account type and authority.
     * Otherwise the SyncManager will be sure not to issue a start sync request
     * to this SyncAdapter if the SyncAdapter is already syncing another account.
     * Defaults to false.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:allowParallelSyncs
     */
    public static final int SyncAdapter_allowParallelSyncs=5;
    /**
     * <p>
     * @attr description
     * Set to true to tell the SyncManager to automatically call setIsSyncable(..., ..., 1)
     * for the SyncAdapter instead of issuaing an initialization sync to the SyncAdapter.
     * Defaults to false.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:isAlwaysSyncable
     */
    public static final int SyncAdapter_isAlwaysSyncable=6;
    /**
     * Specify one or more <code>system-code-filter</code> elements inside a
     * <code>host-nfcf-service</code> element to specify a System Code
     * your service can handle.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #SystemCodeFilter_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * </table>
     * @see #SystemCodeFilter_name
     */
    public static final int[] SystemCodeFilter={
      0x01010003
    };
    /**
     * <p>
     * @attr description
     * The System Code. This attribute is mandatory.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int SystemCodeFilter_name=0;
    /**
     * Specify one or more <code>t3tPmm-filter</code> elements inside a
     * <code>host-nfcf-service</code> element to specify a LF_T3T_PMM.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #T3tPmmFilter_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * </table>
     * @see #T3tPmmFilter_name
     */
    public static final int[] T3tPmmFilter={
      0x01010003
    };
    /**
     * <p>
     * @attr description
     * A unique name for the given item.  This must use a Java-style naming
     * convention to ensure the name is unique, for example
     * "com.mycompany.MyName".
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int T3tPmmFilter_name=0;
    /**
     * Attributes that can be used with a TabWidget.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #TabWidget_divider android:divider}</code></td><td>Drawable or color to draw between list items.</td></tr>
     * <tr><td><code>{@link #TabWidget_tabStripLeft android:tabStripLeft}</code></td><td>Drawable used to draw the left part of the strip underneath the tabs.</td></tr>
     * <tr><td><code>{@link #TabWidget_tabStripRight android:tabStripRight}</code></td><td>Drawable used to draw the right part of the strip underneath the tabs.</td></tr>
     * <tr><td><code>{@link #TabWidget_tabStripEnabled android:tabStripEnabled}</code></td><td>Determines whether the strip under the tab indicators is drawn or not.</td></tr>
     * </table>
     * @see #TabWidget_divider
     * @see #TabWidget_tabStripLeft
     * @see #TabWidget_tabStripRight
     * @see #TabWidget_tabStripEnabled
     */
    public static final int[] TabWidget={
      0x01010129, 0x010102bb, 0x010102bc, 0x010102bd, 
      0x011200e9
    };
    /**
     * <p>
     * @attr description
     * Drawable used to draw the divider between tabs.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:divider
     */
    public static final int TabWidget_divider=0;
    /**
     * <p>
     * @attr description
     * Drawable used to draw the left part of the strip underneath the tabs.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:tabStripLeft
     */
    public static final int TabWidget_tabStripLeft=1;
    /**
     * <p>
     * @attr description
     * Drawable used to draw the right part of the strip underneath the tabs.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:tabStripRight
     */
    public static final int TabWidget_tabStripRight=2;
    /**
     * <p>
     * @attr description
     * Determines whether the strip under the tab indicators is drawn or not.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:tabStripEnabled
     */
    public static final int TabWidget_tabStripEnabled=3;
    /**
     * Attributes that can be used with a TableLayout.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #TableLayout_stretchColumns android:stretchColumns}</code></td><td>The zero-based index of the columns to stretch.</td></tr>
     * <tr><td><code>{@link #TableLayout_shrinkColumns android:shrinkColumns}</code></td><td>The zero-based index of the columns to shrink.</td></tr>
     * <tr><td><code>{@link #TableLayout_collapseColumns android:collapseColumns}</code></td><td>The zero-based index of the columns to collapse.</td></tr>
     * </table>
     * @see #TableLayout_stretchColumns
     * @see #TableLayout_shrinkColumns
     * @see #TableLayout_collapseColumns
     */
    public static final int[] TableLayout={
      0x01010149, 0x0101014a, 0x0101014b
    };
    /**
     * <p>
     * @attr description
     * The zero-based index of the columns to stretch. The column indices
     * must be separated by a comma: 1, 2, 5. Illegal and duplicate
     * indices are ignored. You can stretch all columns by using the
     * value "*" instead. Note that a column can be marked stretchable
     * and shrinkable at the same time.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:stretchColumns
     */
    public static final int TableLayout_stretchColumns=0;
    /**
     * <p>
     * @attr description
     * The zero-based index of the columns to shrink. The column indices
     * must be separated by a comma: 1, 2, 5. Illegal and duplicate
     * indices are ignored. You can shrink all columns by using the
     * value "*" instead. Note that a column can be marked stretchable
     * and shrinkable at the same time.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:shrinkColumns
     */
    public static final int TableLayout_shrinkColumns=1;
    /**
     * <p>
     * @attr description
     * The zero-based index of the columns to collapse. The column indices
     * must be separated by a comma: 1, 2, 5. Illegal and duplicate
     * indices are ignored.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:collapseColumns
     */
    public static final int TableLayout_collapseColumns=2;
    public static final int[] TableRow={
    };
    /**
     * Attributes that can be used with a TableRow_Cell.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #TableRow_Cell_layout_column android:layout_column}</code></td><td>The index of the column in which this child should be.</td></tr>
     * <tr><td><code>{@link #TableRow_Cell_layout_span android:layout_span}</code></td><td>Defines how many columns this child should span.</td></tr>
     * </table>
     * @see #TableRow_Cell_layout_column
     * @see #TableRow_Cell_layout_span
     */
    public static final int[] TableRow_Cell={
      0x0101014c, 0x0101014d
    };
    /**
     * <p>
     * @attr description
     * The index of the column in which this child should be.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:layout_column
     */
    public static final int TableRow_Cell_layout_column=0;
    /**
     * <p>
     * @attr description
     * Defines how many columns this child should span.  Must be >= 1.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:layout_span
     */
    public static final int TableRow_Cell_layout_span=1;
    /**
     * Attributes that can be used with a TextAppearance.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #TextAppearance_textSize android:textSize}</code></td><td>Size of text.</td></tr>
     * <tr><td><code>{@link #TextAppearance_typeface android:typeface}</code></td><td>Default text typeface.</td></tr>
     * <tr><td><code>{@link #TextAppearance_textStyle android:textStyle}</code></td><td>Default text typeface style.</td></tr>
     * <tr><td><code>{@link #TextAppearance_textColor android:textColor}</code></td><td>Color of text (usually same as colorForeground).</td></tr>
     * <tr><td><code>{@link #TextAppearance_textColorHighlight android:textColorHighlight}</code></td><td>Color of highlighted text.</td></tr>
     * <tr><td><code>{@link #TextAppearance_textColorHint android:textColorHint}</code></td><td>Color of hint text (displayed when the field is empty).</td></tr>
     * <tr><td><code>{@link #TextAppearance_textColorLink android:textColorLink}</code></td><td>Color of link text (URLs).</td></tr>
     * <tr><td><code>{@link #TextAppearance_shadowColor android:shadowColor}</code></td><td>Place a blurred shadow of text underneath the text, drawn with the
     * specified color.</td></tr>
     * <tr><td><code>{@link #TextAppearance_shadowDx android:shadowDx}</code></td><td>Horizontal offset of the text shadow.</td></tr>
     * <tr><td><code>{@link #TextAppearance_shadowDy android:shadowDy}</code></td><td>Vertical offset of the text shadow.</td></tr>
     * <tr><td><code>{@link #TextAppearance_shadowRadius android:shadowRadius}</code></td><td>Blur radius of the text shadow.</td></tr>
     * <tr><td><code>{@link #TextAppearance_textAllCaps android:textAllCaps}</code></td><td>Present the text in ALL CAPS.</td></tr>
     * <tr><td><code>{@link #TextAppearance_fontFamily android:fontFamily}</code></td><td>Default font family.</td></tr>
     * <tr><td><code>{@link #TextAppearance_elegantTextHeight android:elegantTextHeight}</code></td><td>Elegant text height, especially for less compacted complex script text.</td></tr>
     * <tr><td><code>{@link #TextAppearance_letterSpacing android:letterSpacing}</code></td><td>Text letter-spacing.</td></tr>
     * <tr><td><code>{@link #TextAppearance_fontFeatureSettings android:fontFeatureSettings}</code></td><td>Font feature settings.</td></tr>
     * <tr><td><code>{@link #TextAppearance_fontVariationSettings android:fontVariationSettings}</code></td><td>The variation settings to be applied to the font.</td></tr>
     * <tr><td><code>{@link #TextAppearance_fallbackLineSpacing android:fallbackLineSpacing}</code></td><td>Whether to respect the ascent and descent of the fallback fonts that are used in
     * displaying the text.</td></tr>
     * <tr><td><code>{@link #TextAppearance_textFontWeight android:textFontWeight}</code></td><td>Weight for the font used in the TextView.</td></tr>
     * <tr><td><code>{@link #TextAppearance_textLocale android:textLocale}</code></td><td>Specifies the {@link android.os.LocaleList} for the text in this TextView.</td></tr>
     * </table>
     * @see #TextAppearance_textSize
     * @see #TextAppearance_typeface
     * @see #TextAppearance_textStyle
     * @see #TextAppearance_textColor
     * @see #TextAppearance_textColorHighlight
     * @see #TextAppearance_textColorHint
     * @see #TextAppearance_textColorLink
     * @see #TextAppearance_shadowColor
     * @see #TextAppearance_shadowDx
     * @see #TextAppearance_shadowDy
     * @see #TextAppearance_shadowRadius
     * @see #TextAppearance_textAllCaps
     * @see #TextAppearance_fontFamily
     * @see #TextAppearance_elegantTextHeight
     * @see #TextAppearance_letterSpacing
     * @see #TextAppearance_fontFeatureSettings
     * @see #TextAppearance_fontVariationSettings
     * @see #TextAppearance_fallbackLineSpacing
     * @see #TextAppearance_textFontWeight
     * @see #TextAppearance_textLocale
     */
    public static final int[] TextAppearance={
      0x01010095, 0x01010096, 0x01010097, 0x01010098, 
      0x01010099, 0x0101009a, 0x0101009b, 0x01010161, 
      0x01010162, 0x01010163, 0x01010164, 0x0101038c, 
      0x010103ac, 0x0101045d, 0x010104b6, 0x010104b7, 
      0x01010570, 0x0101057b, 0x01010585, 0x01010592
    };
    /**
     * <p>
     * @attr description
     * Size of the text. Recommended dimension type for text is "sp" for scaled-pixels (example: 15sp).
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:textSize
     */
    public static final int TextAppearance_textSize=0;
    /**
     * <p>
     * @attr description
     * Typeface (normal, sans, serif, monospace) for the text.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>monospace</td><td>3</td><td></td></tr>
     * <tr><td>normal</td><td>0</td><td></td></tr>
     * <tr><td>sans</td><td>1</td><td></td></tr>
     * <tr><td>serif</td><td>2</td><td></td></tr>
     * </table>
     *
     * @attr name android:typeface
     */
    public static final int TextAppearance_typeface=1;
    /**
     * <p>
     * @attr description
     * Style (normal, bold, italic, bold|italic) for the text.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bold</td><td>1</td><td></td></tr>
     * <tr><td>italic</td><td>2</td><td></td></tr>
     * <tr><td>normal</td><td>0</td><td></td></tr>
     * </table>
     *
     * @attr name android:textStyle
     */
    public static final int TextAppearance_textStyle=2;
    /**
     * <p>
     * @attr description
     * Text color.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:textColor
     */
    public static final int TextAppearance_textColor=3;
    /**
     * <p>
     * @attr description
     * Color of the text selection highlight.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:textColorHighlight
     */
    public static final int TextAppearance_textColorHighlight=4;
    /**
     * <p>
     * @attr description
     * Color of the hint text.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:textColorHint
     */
    public static final int TextAppearance_textColorHint=5;
    /**
     * <p>
     * @attr description
     * Color of the links.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:textColorLink
     */
    public static final int TextAppearance_textColorLink=6;
    /**
     * <p>
     * @attr description
     * Place a blurred shadow of text underneath the text, drawn with the
     * specified color. The text shadow produced does not interact with
     * properties on View that are responsible for real time shadows,
     * {@link android.R.styleable#View_elevation elevation} and
     * {@link android.R.styleable#View_translationZ translationZ}.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:shadowColor
     */
    public static final int TextAppearance_shadowColor=7;
    /**
     * <p>
     * @attr description
     * Horizontal offset of the text shadow.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:shadowDx
     */
    public static final int TextAppearance_shadowDx=8;
    /**
     * <p>
     * @attr description
     * Vertical offset of the text shadow.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:shadowDy
     */
    public static final int TextAppearance_shadowDy=9;
    /**
     * <p>
     * @attr description
     * Blur radius of the text shadow.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:shadowRadius
     */
    public static final int TextAppearance_shadowRadius=10;
    /**
     * <p>
     * @attr description
     * Present the text in ALL CAPS. This may use a small-caps form when available.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:textAllCaps
     */
    public static final int TextAppearance_textAllCaps=11;
    /**
     * <p>
     * @attr description
     * Font family (named by string or as a font resource reference) for the text.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:fontFamily
     */
    public static final int TextAppearance_fontFamily=12;
    /**
     * <p>
     * @attr description
     * Elegant text height, especially for less compacted complex script text.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:elegantTextHeight
     */
    public static final int TextAppearance_elegantTextHeight=13;
    /**
     * <p>
     * @attr description
     * Text letter-spacing.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:letterSpacing
     */
    public static final int TextAppearance_letterSpacing=14;
    /**
     * <p>
     * @attr description
     * Font feature settings.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:fontFeatureSettings
     */
    public static final int TextAppearance_fontFeatureSettings=15;
    /**
     * <p>
     * @attr description
     * Font variation settings.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:fontVariationSettings
     */
    public static final int TextAppearance_fontVariationSettings=16;
    /**
     * <p>
     * @attr description
     * Whether to respect the ascent and descent of the fallback fonts that are used in
     * displaying the text. When true, fallback fonts that end up getting used can increase
     * the ascent and descent of the lines that they are used on.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:fallbackLineSpacing
     */
    public static final int TextAppearance_fallbackLineSpacing=17;
    /**
     * <p>
     * @attr description
     * Weight for the font used in the TextView.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:textFontWeight
     */
    public static final int TextAppearance_textFontWeight=18;
    /**
     * <p>
     * @attr description
     * Specifies the {@link android.os.LocaleList} for the text.
     * May be a string value, which is a comma-separated language tag list, such as "ja-JP,zh-CN".
     * When not specified or an empty string is given, it will fallback to the default one.
     * {@see android.os.LocaleList#forLanguageTags(String)}
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:textLocale
     */
    public static final int TextAppearance_textLocale=19;
    /**
     * Attributes that can be used with a TextClock.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #TextClock_format12Hour android:format12Hour}</code></td><td>Specifies the formatting pattern used to show the time and/or date
     * in 12-hour mode.</td></tr>
     * <tr><td><code>{@link #TextClock_format24Hour android:format24Hour}</code></td><td>Specifies the formatting pattern used to show the time and/or date
     * in 24-hour mode.</td></tr>
     * <tr><td><code>{@link #TextClock_timeZone android:timeZone}</code></td><td>Specifies the time zone to use.</td></tr>
     * </table>
     * @see #TextClock_format12Hour
     * @see #TextClock_format24Hour
     * @see #TextClock_timeZone
     */
    public static final int[] TextClock={
      0x010103ca, 0x010103cb, 0x010103cc
    };
    /**
     * <p>
     * @attr description
     * Specifies the formatting pattern used to show the time and/or date
     * in 12-hour mode. Please refer to {@link android.text.format.DateFormat}
     * for a complete description of accepted formatting patterns.
     * The default pattern is a locale-appropriate equivalent of "h:mm a".
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:format12Hour
     */
    public static final int TextClock_format12Hour=0;
    /**
     * <p>
     * @attr description
     * Specifies the formatting pattern used to show the time and/or date
     * in 24-hour mode. Please refer to {@link android.text.format.DateFormat}
     * for a complete description of accepted formatting patterns.
     * The default pattern is a locale-appropriate equivalent of "H:mm".
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:format24Hour
     */
    public static final int TextClock_format24Hour=1;
    /**
     * <p>
     * @attr description
     * Specifies the time zone to use. When this attribute is specified, the
     * TextClock will ignore the time zone of the system. To use the user's
     * time zone, do not specify this attribute. The default value is the
     * user's time zone. Please refer to {@link java.util.TimeZone} for more
     * information about time zone ids.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:timeZone
     */
    public static final int TextClock_timeZone=2;
    public static final int[] TextSwitcher={
    };
    /**
     * Use <code>tts-engine</code> as the root tag of the XML resource that
     * describes a text to speech engine implemented as a subclass of
     * {@link android.speech.tts.TextToSpeechService}.
     * The XML resource must be referenced from its
     * {@link android.speech.tts.TextToSpeech.Engine#SERVICE_META_DATA} meta-data
     * entry.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #TextToSpeechEngine_settingsActivity android:settingsActivity}</code></td><td>Fully qualified class name of an activity that allows the user to modify
     * the settings for this service.</td></tr>
     * </table>
     * @see #TextToSpeechEngine_settingsActivity
     */
    public static final int[] TextToSpeechEngine={
      0x01010225
    };
    /**
     * <p>
     * @attr description
     * Fully qualified class name of an activity that allows the user to modify
     * the settings for this service.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:settingsActivity
     */
    public static final int TextToSpeechEngine_settingsActivity=0;
    /**
     * Attributes that can be used with a TextView.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #TextView_enabled android:enabled}</code></td><td>Specifies whether the widget is enabled.</td></tr>
     * <tr><td><code>{@link #TextView_textAppearance android:textAppearance}</code></td><td>Default appearance of text: color, typeface, size, and style.</td></tr>
     * <tr><td><code>{@link #TextView_textSize android:textSize}</code></td><td>Size of text.</td></tr>
     * <tr><td><code>{@link #TextView_typeface android:typeface}</code></td><td>Default text typeface.</td></tr>
     * <tr><td><code>{@link #TextView_textStyle android:textStyle}</code></td><td>Default text typeface style.</td></tr>
     * <tr><td><code>{@link #TextView_textColor android:textColor}</code></td><td>Color of text (usually same as colorForeground).</td></tr>
     * <tr><td><code>{@link #TextView_textColorHighlight android:textColorHighlight}</code></td><td>Color of highlighted text.</td></tr>
     * <tr><td><code>{@link #TextView_textColorHint android:textColorHint}</code></td><td>Color of hint text (displayed when the field is empty).</td></tr>
     * <tr><td><code>{@link #TextView_textColorLink android:textColorLink}</code></td><td>Color of link text (URLs).</td></tr>
     * <tr><td><code>{@link #TextView_ellipsize android:ellipsize}</code></td><td>Where to ellipsize text.</td></tr>
     * <tr><td><code>{@link #TextView_gravity android:gravity}</code></td><td>Specifies how an object should position its content, on both the X and Y axes,
     * within its own bounds.</td></tr>
     * <tr><td><code>{@link #TextView_autoLink android:autoLink}</code></td><td>Controls whether links such as urls and email addresses are
     * automatically found and converted to clickable links.</td></tr>
     * <tr><td><code>{@link #TextView_linksClickable android:linksClickable}</code></td><td>If set to false, keeps the movement method from being set
     * to the link movement method even if autoLink causes links
     * to be found.</td></tr>
     * <tr><td><code>{@link #TextView_maxWidth android:maxWidth}</code></td><td>An optional argument to supply a maximum width for this view.</td></tr>
     * <tr><td><code>{@link #TextView_maxHeight android:maxHeight}</code></td><td>An optional argument to supply a maximum height for this view.</td></tr>
     * <tr><td><code>{@link #TextView_minWidth android:minWidth}</code></td><td></td></tr>
     * <tr><td><code>{@link #TextView_minHeight android:minHeight}</code></td><td></td></tr>
     * <tr><td><code>{@link #TextView_bufferType android:bufferType}</code></td><td>Determines the minimum type that getText() will return.</td></tr>
     * <tr><td><code>{@link #TextView_text android:text}</code></td><td>Text to display.</td></tr>
     * <tr><td><code>{@link #TextView_hint android:hint}</code></td><td>Hint text to display when the text is empty.</td></tr>
     * <tr><td><code>{@link #TextView_textScaleX android:textScaleX}</code></td><td>Sets the horizontal scaling factor for the text.</td></tr>
     * <tr><td><code>{@link #TextView_cursorVisible android:cursorVisible}</code></td><td>Makes the cursor visible (the default) or invisible.</td></tr>
     * <tr><td><code>{@link #TextView_maxLines android:maxLines}</code></td><td>Makes the TextView be at most this many lines tall.</td></tr>
     * <tr><td><code>{@link #TextView_lines android:lines}</code></td><td>Makes the TextView be exactly this many lines tall.</td></tr>
     * <tr><td><code>{@link #TextView_height android:height}</code></td><td>Makes the TextView be exactly this tall.</td></tr>
     * <tr><td><code>{@link #TextView_minLines android:minLines}</code></td><td>Makes the TextView be at least this many lines tall.</td></tr>
     * <tr><td><code>{@link #TextView_maxEms android:maxEms}</code></td><td>Makes the TextView be at most this many ems wide.</td></tr>
     * <tr><td><code>{@link #TextView_ems android:ems}</code></td><td>Makes the TextView be exactly this many ems wide.</td></tr>
     * <tr><td><code>{@link #TextView_width android:width}</code></td><td>Makes the TextView be exactly this wide.</td></tr>
     * <tr><td><code>{@link #TextView_minEms android:minEms}</code></td><td>Makes the TextView be at least this many ems wide.</td></tr>
     * <tr><td><code>{@link #TextView_scrollHorizontally android:scrollHorizontally}</code></td><td>Whether the text is allowed to be wider than the view (and
     * therefore can be scrolled horizontally).</td></tr>
     * <tr><td><code>{@link #TextView_password android:password}</code></td><td>Whether the characters of the field are displayed as
     * password dots instead of themselves.</td></tr>
     * <tr><td><code>{@link #TextView_singleLine android:singleLine}</code></td><td>Constrains the text to a single horizontally scrolling line
     * instead of letting it wrap onto multiple lines, and advances
     * focus instead of inserting a newline when you press the
     * enter key.</td></tr>
     * <tr><td><code>{@link #TextView_selectAllOnFocus android:selectAllOnFocus}</code></td><td>If the text is selectable, select it all when the view takes
     * focus.</td></tr>
     * <tr><td><code>{@link #TextView_includeFontPadding android:includeFontPadding}</code></td><td>Leave enough room for ascenders and descenders instead of
     * using the font ascent and descent strictly.</td></tr>
     * <tr><td><code>{@link #TextView_maxLength android:maxLength}</code></td><td>Set an input filter to constrain the text length to the
     * specified number.</td></tr>
     * <tr><td><code>{@link #TextView_shadowColor android:shadowColor}</code></td><td>Place a blurred shadow of text underneath the text, drawn with the
     * specified color.</td></tr>
     * <tr><td><code>{@link #TextView_shadowDx android:shadowDx}</code></td><td>Horizontal offset of the text shadow.</td></tr>
     * <tr><td><code>{@link #TextView_shadowDy android:shadowDy}</code></td><td>Vertical offset of the text shadow.</td></tr>
     * <tr><td><code>{@link #TextView_shadowRadius android:shadowRadius}</code></td><td>Blur radius of the text shadow.</td></tr>
     * <tr><td><code>{@link #TextView_numeric android:numeric}</code></td><td>If set, specifies that this TextView has a numeric input method.</td></tr>
     * <tr><td><code>{@link #TextView_digits android:digits}</code></td><td>If set, specifies that this TextView has a numeric input method
     * and that these specific characters are the ones that it will
     * accept.</td></tr>
     * <tr><td><code>{@link #TextView_phoneNumber android:phoneNumber}</code></td><td>If set, specifies that this TextView has a phone number input
     * method.</td></tr>
     * <tr><td><code>{@link #TextView_inputMethod android:inputMethod}</code></td><td>If set, specifies that this TextView should use the specified
     * input method (specified by fully-qualified class name).</td></tr>
     * <tr><td><code>{@link #TextView_capitalize android:capitalize}</code></td><td>If set, specifies that this TextView has a textual input method
     * and should automatically capitalize what the user types.</td></tr>
     * <tr><td><code>{@link #TextView_autoText android:autoText}</code></td><td>If set, specifies that this TextView has a textual input method
     * and automatically corrects some common spelling errors.</td></tr>
     * <tr><td><code>{@link #TextView_editable android:editable}</code></td><td>If set, specifies that this TextView has an input method.</td></tr>
     * <tr><td><code>{@link #TextView_freezesText android:freezesText}</code></td><td>If set, the text view will include its current complete text
     * inside of its frozen icicle in addition to meta-data such as
     * the current cursor position.</td></tr>
     * <tr><td><code>{@link #TextView_drawableTop android:drawableTop}</code></td><td>The drawable to be drawn above the text.</td></tr>
     * <tr><td><code>{@link #TextView_drawableBottom android:drawableBottom}</code></td><td>The drawable to be drawn below the text.</td></tr>
     * <tr><td><code>{@link #TextView_drawableLeft android:drawableLeft}</code></td><td>The drawable to be drawn to the left of the text.</td></tr>
     * <tr><td><code>{@link #TextView_drawableRight android:drawableRight}</code></td><td>The drawable to be drawn to the right of the text.</td></tr>
     * <tr><td><code>{@link #TextView_drawablePadding android:drawablePadding}</code></td><td>The padding between the drawables and the text.</td></tr>
     * <tr><td><code>{@link #TextView_lineSpacingExtra android:lineSpacingExtra}</code></td><td>Extra spacing between lines of text.</td></tr>
     * <tr><td><code>{@link #TextView_lineSpacingMultiplier android:lineSpacingMultiplier}</code></td><td>Extra spacing between lines of text, as a multiplier.</td></tr>
     * <tr><td><code>{@link #TextView_marqueeRepeatLimit android:marqueeRepeatLimit}</code></td><td>The number of times to repeat the marquee animation.</td></tr>
     * <tr><td><code>{@link #TextView_inputType android:inputType}</code></td><td>The type of data being placed in a text field, used to help an
     * input method decide how to let the user enter text.</td></tr>
     * <tr><td><code>{@link #TextView_privateImeOptions android:privateImeOptions}</code></td><td>An addition content type description to supply to the input
     * method attached to the text view, which is private to the
     * implementation of the input method.</td></tr>
     * <tr><td><code>{@link #TextView_editorExtras android:editorExtras}</code></td><td>Reference to an
     * {@link android.R.styleable#InputExtras &lt;input-extras&gt;}
     * XML resource containing additional data to
     * supply to an input method, which is private to the implementation
     * of the input method.</td></tr>
     * <tr><td><code>{@link #TextView_imeOptions android:imeOptions}</code></td><td>Additional features you can enable in an IME associated with an editor
     * to improve the integration with your application.</td></tr>
     * <tr><td><code>{@link #TextView_imeActionLabel android:imeActionLabel}</code></td><td>Supply a value for
     * {@link android.view.inputmethod.EditorInfo#actionLabel EditorInfo.actionLabel}
     * used when an input method is connected to the text view.</td></tr>
     * <tr><td><code>{@link #TextView_imeActionId android:imeActionId}</code></td><td>Supply a value for
     * {@link android.view.inputmethod.EditorInfo#actionId EditorInfo.actionId}
     * used when an input method is connected to the text view.</td></tr>
     * <tr><td><code>{@link #TextView_textSelectHandleLeft android:textSelectHandleLeft}</code></td><td>Reference to a drawable that will be used to display a text selection
     * anchor on the left side of a selection region.</td></tr>
     * <tr><td><code>{@link #TextView_textSelectHandleRight android:textSelectHandleRight}</code></td><td>Reference to a drawable that will be used to display a text selection
     * anchor on the right side of a selection region.</td></tr>
     * <tr><td><code>{@link #TextView_textSelectHandle android:textSelectHandle}</code></td><td>Reference to a drawable that will be used to display a text selection
     * anchor for positioning the cursor within text.</td></tr>
     * <tr><td><code>{@link #TextView_textEditPasteWindowLayout android:textEditPasteWindowLayout}</code></td><td>The layout of the view that is displayed on top of the cursor to paste inside a
     * TextEdit field.</td></tr>
     * <tr><td><code>{@link #TextView_textEditNoPasteWindowLayout android:textEditNoPasteWindowLayout}</code></td><td>Variation of textEditPasteWindowLayout displayed when the clipboard is empty.</td></tr>
     * <tr><td><code>{@link #TextView_textIsSelectable android:textIsSelectable}</code></td><td>Indicates that the content of a non-editable TextView can be selected.</td></tr>
     * <tr><td><code>{@link #TextView_textEditSidePasteWindowLayout android:textEditSidePasteWindowLayout}</code></td><td>Used instead of textEditPasteWindowLayout when the window is moved on the side of the
     * insertion cursor because it would be clipped if it were positioned on top.</td></tr>
     * <tr><td><code>{@link #TextView_textEditSideNoPasteWindowLayout android:textEditSideNoPasteWindowLayout}</code></td><td>Variation of textEditSidePasteWindowLayout displayed when the clipboard is empty.</td></tr>
     * <tr><td><code>{@link #TextView_textCursorDrawable android:textCursorDrawable}</code></td><td>Reference to a drawable that will be drawn under the insertion cursor.</td></tr>
     * <tr><td><code>{@link #TextView_textEditSuggestionItemLayout android:textEditSuggestionItemLayout}</code></td><td>Layout of the TextView item that will populate the suggestion popup window.</td></tr>
     * <tr><td><code>{@link #TextView_textAllCaps android:textAllCaps}</code></td><td>Present the text in ALL CAPS.</td></tr>
     * <tr><td><code>{@link #TextView_drawableStart android:drawableStart}</code></td><td>The drawable to be drawn to the start of the text.</td></tr>
     * <tr><td><code>{@link #TextView_drawableEnd android:drawableEnd}</code></td><td>The drawable to be drawn to the end of the text.</td></tr>
     * <tr><td><code>{@link #TextView_fontFamily android:fontFamily}</code></td><td>Default font family.</td></tr>
     * <tr><td><code>{@link #TextView_elegantTextHeight android:elegantTextHeight}</code></td><td>Elegant text height, especially for less compacted complex script text.</td></tr>
     * <tr><td><code>{@link #TextView_letterSpacing android:letterSpacing}</code></td><td>Text letter-spacing.</td></tr>
     * <tr><td><code>{@link #TextView_fontFeatureSettings android:fontFeatureSettings}</code></td><td>Font feature settings.</td></tr>
     * <tr><td><code>{@link #TextView_drawableTint android:drawableTint}</code></td><td>Tint to apply to the compound (left, top, etc.) drawables.</td></tr>
     * <tr><td><code>{@link #TextView_drawableTintMode android:drawableTintMode}</code></td><td>Blending mode used to apply the compound (left, top, etc.) drawables tint.</td></tr>
     * <tr><td><code>{@link #TextView_breakStrategy android:breakStrategy}</code></td><td>Break strategy (control over paragraph layout).</td></tr>
     * <tr><td><code>{@link #TextView_hyphenationFrequency android:hyphenationFrequency}</code></td><td>Frequency of automatic hyphenation.</td></tr>
     * <tr><td><code>{@link #TextView_allowUndo android:allowUndo}</code></td><td>Whether undo should be allowed for editable text.</td></tr>
     * <tr><td><code>{@link #TextView_autoSizeTextType android:autoSizeTextType}</code></td><td>Specify the type of auto-size.</td></tr>
     * <tr><td><code>{@link #TextView_autoSizeStepGranularity android:autoSizeStepGranularity}</code></td><td>Specify the auto-size step size if <code>autoSizeTextType</code> is set to
     * <code>uniform</code>.</td></tr>
     * <tr><td><code>{@link #TextView_autoSizePresetSizes android:autoSizePresetSizes}</code></td><td></td></tr>
     * <tr><td><code>{@link #TextView_autoSizeMinTextSize android:autoSizeMinTextSize}</code></td><td>The minimum text size constraint to be used when auto-sizing text.</td></tr>
     * <tr><td><code>{@link #TextView_autoSizeMaxTextSize android:autoSizeMaxTextSize}</code></td><td>The maximum text size constraint to be used when auto-sizing text.</td></tr>
     * <tr><td><code>{@link #TextView_justificationMode android:justificationMode}</code></td><td>Mode for justification.</td></tr>
     * <tr><td><code>{@link #TextView_fontVariationSettings android:fontVariationSettings}</code></td><td>The variation settings to be applied to the font.</td></tr>
     * <tr><td><code>{@link #TextView_fallbackLineSpacing android:fallbackLineSpacing}</code></td><td>Whether to respect the ascent and descent of the fallback fonts that are used in
     * displaying the text.</td></tr>
     * <tr><td><code>{@link #TextView_firstBaselineToTopHeight android:firstBaselineToTopHeight}</code></td><td>Distance from the top of the TextView to the first text baseline.</td></tr>
     * <tr><td><code>{@link #TextView_lastBaselineToBottomHeight android:lastBaselineToBottomHeight}</code></td><td>Distance from the bottom of the TextView to the last text baseline.</td></tr>
     * <tr><td><code>{@link #TextView_lineHeight android:lineHeight}</code></td><td>Explicit height between lines of text.</td></tr>
     * <tr><td><code>{@link #TextView_textFontWeight android:textFontWeight}</code></td><td>Weight for the font used in the TextView.</td></tr>
     * <tr><td><code>{@link #TextView_textLocale android:textLocale}</code></td><td>Specifies the {@link android.os.LocaleList} for the text in this TextView.</td></tr>
     * </table>
     * @see #TextView_enabled
     * @see #TextView_textAppearance
     * @see #TextView_textSize
     * @see #TextView_typeface
     * @see #TextView_textStyle
     * @see #TextView_textColor
     * @see #TextView_textColorHighlight
     * @see #TextView_textColorHint
     * @see #TextView_textColorLink
     * @see #TextView_ellipsize
     * @see #TextView_gravity
     * @see #TextView_autoLink
     * @see #TextView_linksClickable
     * @see #TextView_maxWidth
     * @see #TextView_maxHeight
     * @see #TextView_minWidth
     * @see #TextView_minHeight
     * @see #TextView_bufferType
     * @see #TextView_text
     * @see #TextView_hint
     * @see #TextView_textScaleX
     * @see #TextView_cursorVisible
     * @see #TextView_maxLines
     * @see #TextView_lines
     * @see #TextView_height
     * @see #TextView_minLines
     * @see #TextView_maxEms
     * @see #TextView_ems
     * @see #TextView_width
     * @see #TextView_minEms
     * @see #TextView_scrollHorizontally
     * @see #TextView_password
     * @see #TextView_singleLine
     * @see #TextView_selectAllOnFocus
     * @see #TextView_includeFontPadding
     * @see #TextView_maxLength
     * @see #TextView_shadowColor
     * @see #TextView_shadowDx
     * @see #TextView_shadowDy
     * @see #TextView_shadowRadius
     * @see #TextView_numeric
     * @see #TextView_digits
     * @see #TextView_phoneNumber
     * @see #TextView_inputMethod
     * @see #TextView_capitalize
     * @see #TextView_autoText
     * @see #TextView_editable
     * @see #TextView_freezesText
     * @see #TextView_drawableTop
     * @see #TextView_drawableBottom
     * @see #TextView_drawableLeft
     * @see #TextView_drawableRight
     * @see #TextView_drawablePadding
     * @see #TextView_lineSpacingExtra
     * @see #TextView_lineSpacingMultiplier
     * @see #TextView_marqueeRepeatLimit
     * @see #TextView_inputType
     * @see #TextView_privateImeOptions
     * @see #TextView_editorExtras
     * @see #TextView_imeOptions
     * @see #TextView_imeActionLabel
     * @see #TextView_imeActionId
     * @see #TextView_textSelectHandleLeft
     * @see #TextView_textSelectHandleRight
     * @see #TextView_textSelectHandle
     * @see #TextView_textEditPasteWindowLayout
     * @see #TextView_textEditNoPasteWindowLayout
     * @see #TextView_textIsSelectable
     * @see #TextView_textEditSidePasteWindowLayout
     * @see #TextView_textEditSideNoPasteWindowLayout
     * @see #TextView_textCursorDrawable
     * @see #TextView_textEditSuggestionItemLayout
     * @see #TextView_textAllCaps
     * @see #TextView_drawableStart
     * @see #TextView_drawableEnd
     * @see #TextView_fontFamily
     * @see #TextView_elegantTextHeight
     * @see #TextView_letterSpacing
     * @see #TextView_fontFeatureSettings
     * @see #TextView_drawableTint
     * @see #TextView_drawableTintMode
     * @see #TextView_breakStrategy
     * @see #TextView_hyphenationFrequency
     * @see #TextView_allowUndo
     * @see #TextView_autoSizeTextType
     * @see #TextView_autoSizeStepGranularity
     * @see #TextView_autoSizePresetSizes
     * @see #TextView_autoSizeMinTextSize
     * @see #TextView_autoSizeMaxTextSize
     * @see #TextView_justificationMode
     * @see #TextView_fontVariationSettings
     * @see #TextView_fallbackLineSpacing
     * @see #TextView_firstBaselineToTopHeight
     * @see #TextView_lastBaselineToBottomHeight
     * @see #TextView_lineHeight
     * @see #TextView_textFontWeight
     * @see #TextView_textLocale
     */
    public static final int[] TextView={
      0x0101000e, 0x01010034, 0x01010095, 0x01010096, 
      0x01010097, 0x01010098, 0x01010099, 0x0101009a, 
      0x0101009b, 0x010100ab, 0x010100af, 0x010100b0, 
      0x010100b1, 0x0101011f, 0x01010120, 0x0101013f, 
      0x01010140, 0x0101014e, 0x0101014f, 0x01010150, 
      0x01010151, 0x01010152, 0x01010153, 0x01010154, 
      0x01010155, 0x01010156, 0x01010157, 0x01010158, 
      0x01010159, 0x0101015a, 0x0101015b, 0x0101015c, 
      0x0101015d, 0x0101015e, 0x0101015f, 0x01010160, 
      0x01010161, 0x01010162, 0x01010163, 0x01010164, 
      0x01010165, 0x01010166, 0x01010167, 0x01010168, 
      0x01010169, 0x0101016a, 0x0101016b, 0x0101016c, 
      0x0101016d, 0x0101016e, 0x0101016f, 0x01010170, 
      0x01010171, 0x01010217, 0x01010218, 0x0101021d, 
      0x01010220, 0x01010223, 0x01010224, 0x01010264, 
      0x01010265, 0x01010266, 0x010102c5, 0x010102c6, 
      0x010102c7, 0x01010314, 0x01010315, 0x01010316, 
      0x0101035e, 0x0101035f, 0x01010362, 0x01010374, 
      0x0101038c, 0x01010392, 0x01010393, 0x010103ac, 
      0x0101045d, 0x010104b6, 0x010104b7, 0x010104d6, 
      0x010104d7, 0x010104dd, 0x010104de, 0x010104df, 
      0x01010535, 0x01010536, 0x01010537, 0x01010538, 
      0x01010546, 0x01010567, 0x01010570, 0x0101057b, 
      0x0101057d, 0x0101057e, 0x0101057f, 0x01010585, 
      0x01010592, 0x011200f2, 0x011200f3
    };
    /**
     * <p>
     * @attr description
     * Specifies whether the widget is enabled. The interpretation of the enabled state varies by subclass.
     * For example, a non-enabled EditText prevents the user from editing the contained text, and
     * a non-enabled Button prevents the user from tapping the button.
     * The appearance of enabled and non-enabled widgets may differ, if the drawables referenced
     * from evaluating state_enabled differ.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:enabled
     */
    public static final int TextView_enabled=0;
    /**
     * <p>
     * @attr description
     * Base text color, typeface, size, and style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textAppearance
     */
    public static final int TextView_textAppearance=1;
    /**
     * <p>
     * @attr description
     * Size of the text. Recommended dimension type for text is "sp" for scaled-pixels (example: 15sp).
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:textSize
     */
    public static final int TextView_textSize=2;
    /**
     * <p>
     * @attr description
     * Typeface (normal, sans, serif, monospace) for the text.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>monospace</td><td>3</td><td></td></tr>
     * <tr><td>normal</td><td>0</td><td></td></tr>
     * <tr><td>sans</td><td>1</td><td></td></tr>
     * <tr><td>serif</td><td>2</td><td></td></tr>
     * </table>
     *
     * @attr name android:typeface
     */
    public static final int TextView_typeface=3;
    /**
     * <p>
     * @attr description
     * Style (normal, bold, italic, bold|italic) for the text.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bold</td><td>1</td><td></td></tr>
     * <tr><td>italic</td><td>2</td><td></td></tr>
     * <tr><td>normal</td><td>0</td><td></td></tr>
     * </table>
     *
     * @attr name android:textStyle
     */
    public static final int TextView_textStyle=4;
    /**
     * <p>
     * @attr description
     * Text color.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:textColor
     */
    public static final int TextView_textColor=5;
    /**
     * <p>
     * @attr description
     * Color of the text selection highlight.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:textColorHighlight
     */
    public static final int TextView_textColorHighlight=6;
    /**
     * <p>
     * @attr description
     * Color of the hint text.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:textColorHint
     */
    public static final int TextView_textColorHint=7;
    /**
     * <p>
     * @attr description
     * Text color for links.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:textColorLink
     */
    public static final int TextView_textColorLink=8;
    /**
     * <p>
     * @attr description
     * If set, causes words that are longer than the view is wide
     * to be ellipsized instead of broken in the middle.
     * You will often also want to set scrollHorizontally or singleLine
     * as well so that the text as a whole is also constrained to
     * a single line instead of still allowed to be broken onto
     * multiple lines.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>end</td><td>3</td><td></td></tr>
     * <tr><td>marquee</td><td>4</td><td></td></tr>
     * <tr><td>middle</td><td>2</td><td></td></tr>
     * <tr><td>none</td><td>0</td><td></td></tr>
     * <tr><td>start</td><td>1</td><td></td></tr>
     * </table>
     *
     * @attr name android:ellipsize
     */
    public static final int TextView_ellipsize=9;
    /**
     * <p>
     * @attr description
     * Specifies how to align the text by the view's x- and/or y-axis
     * when the text is smaller than the view.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
     * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
     * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
     * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
     * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the horizontal gravity: a left gravity will clip the right
     * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
     * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the vertical gravity: a top gravity will clip the bottom
     * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
     * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
     * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
     * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
     * </table>
     *
     * @attr name android:gravity
     */
    public static final int TextView_gravity=10;
    /**
     * <p>
     * @attr description
     * Controls whether links such as urls and email addresses are
     * automatically found and converted to clickable links.  The default
     * value is "none", disabling this feature.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>all</td><td>f</td><td>Match all patterns (equivalent to web|email|phone|map).</td></tr>
     * <tr><td>email</td><td>2</td><td>Match email addresses.</td></tr>
     * <tr><td>map</td><td>8</td><td>Match map addresses.
     * Deprecated: see {@link android.text.util.Linkify#MAP_ADDRESSES}.</td></tr>
     * <tr><td>none</td><td>0</td><td>Match no patterns (default).</td></tr>
     * <tr><td>phone</td><td>4</td><td>Match phone numbers.</td></tr>
     * <tr><td>web</td><td>1</td><td>Match Web URLs.</td></tr>
     * </table>
     *
     * @attr name android:autoLink
     */
    public static final int TextView_autoLink=11;
    /**
     * <p>
     * @attr description
     * If set to false, keeps the movement method from being set
     * to the link movement method even if autoLink causes links
     * to be found.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:linksClickable
     */
    public static final int TextView_linksClickable=12;
    /**
     * <p>
     * @attr description
     * Makes the TextView be at most this many pixels wide.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:maxWidth
     */
    public static final int TextView_maxWidth=13;
    /**
     * <p>
     * @attr description
     * Makes the TextView be at most this many pixels tall.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:maxHeight
     */
    public static final int TextView_maxHeight=14;
    /**
     * <p>
     * @attr description
     * Makes the TextView be at least this many pixels wide.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:minWidth
     */
    public static final int TextView_minWidth=15;
    /**
     * <p>
     * @attr description
     * Makes the TextView be at least this many pixels tall.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:minHeight
     */
    public static final int TextView_minHeight=16;
    /**
     * <p>
     * @attr description
     * Determines the minimum type that getText() will return.
     * The default is "normal".
     * Note that EditText and LogTextBox always return Editable,
     * even if you specify something less powerful here.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>editable</td><td>2</td><td>Can only return Spannable and Editable.</td></tr>
     * <tr><td>normal</td><td>0</td><td>Can return any CharSequence, possibly a
     * Spanned one if the source text was Spanned.</td></tr>
     * <tr><td>spannable</td><td>1</td><td>Can only return Spannable.</td></tr>
     * </table>
     *
     * @attr name android:bufferType
     */
    public static final int TextView_bufferType=17;
    /**
     * <p>
     * @attr description
     * Text to display.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:text
     */
    public static final int TextView_text=18;
    /**
     * <p>
     * @attr description
     * Hint text to display when the text is empty.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:hint
     */
    public static final int TextView_hint=19;
    /**
     * <p>
     * @attr description
     * Sets the horizontal scaling factor for the text.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:textScaleX
     */
    public static final int TextView_textScaleX=20;
    /**
     * <p>
     * @attr description
     * Makes the cursor visible (the default) or invisible.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:cursorVisible
     */
    public static final int TextView_cursorVisible=21;
    /**
     * <p>
     * @attr description
     * Makes the TextView be at most this many lines tall.
     * When used on an editable text, the <code>inputType</code> attribute's value must be
     * combined with the <code>textMultiLine</code> flag for the maxLines attribute to apply.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:maxLines
     */
    public static final int TextView_maxLines=22;
    /**
     * <p>
     * @attr description
     * Makes the TextView be exactly this many lines tall.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:lines
     */
    public static final int TextView_lines=23;
    /**
     * <p>
     * @attr description
     * Makes the TextView be exactly this tall.
     * You could get the same effect by specifying this number in the
     * layout parameters.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:height
     */
    public static final int TextView_height=24;
    /**
     * <p>
     * @attr description
     * Makes the TextView be at least this many lines tall.
     * When used on an editable text, the <code>inputType</code> attribute's value must be
     * combined with the <code>textMultiLine</code> flag for the minLines attribute to apply.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:minLines
     */
    public static final int TextView_minLines=25;
    /**
     * <p>
     * @attr description
     * Makes the TextView be at most this many ems wide.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:maxEms
     */
    public static final int TextView_maxEms=26;
    /**
     * <p>
     * @attr description
     * Makes the TextView be exactly this many ems wide.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:ems
     */
    public static final int TextView_ems=27;
    /**
     * <p>
     * @attr description
     * Makes the TextView be exactly this wide.
     * You could get the same effect by specifying this number in the
     * layout parameters.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:width
     */
    public static final int TextView_width=28;
    /**
     * <p>
     * @attr description
     * Makes the TextView be at least this many ems wide.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:minEms
     */
    public static final int TextView_minEms=29;
    /**
     * <p>
     * @attr description
     * Whether the text is allowed to be wider than the view (and
     * therefore can be scrolled horizontally).
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:scrollHorizontally
     */
    public static final int TextView_scrollHorizontally=30;
    /**
     * <p>
     * @attr description
     * Whether the characters of the field are displayed as
     * password dots instead of themselves.
     * {@deprecated Use inputType instead.}
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:password
     */
    @Deprecated
    public static final int TextView_password=31;
    /**
     * <p>
     * @attr description
     * Constrains the text to a single horizontally scrolling line
     * instead of letting it wrap onto multiple lines, and advances
     * focus instead of inserting a newline when you press the
     * enter key.
     * The default value is false (multi-line wrapped text mode) for non-editable text, but if
     * you specify any value for inputType, the default is true (single-line input field mode).
     * {@deprecated This attribute is deprecated. Use <code>maxLines</code> instead to change
     * the layout of a static text, and use the <code>textMultiLine</code> flag in the
     * inputType attribute instead for editable text views (if both singleLine and inputType
     * are supplied, the inputType flags will override the value of singleLine). }
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:singleLine
     */
    @Deprecated
    public static final int TextView_singleLine=32;
    /**
     * <p>
     * @attr description
     * If the text is selectable, select it all when the view takes
     * focus.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:selectAllOnFocus
     */
    public static final int TextView_selectAllOnFocus=33;
    /**
     * <p>
     * @attr description
     * Leave enough room for ascenders and descenders instead of
     * using the font ascent and descent strictly.  (Normally true).
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:includeFontPadding
     */
    public static final int TextView_includeFontPadding=34;
    /**
     * <p>
     * @attr description
     * Set an input filter to constrain the text length to the
     * specified number.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:maxLength
     */
    public static final int TextView_maxLength=35;
    /**
     * <p>
     * @attr description
     * Place a blurred shadow of text underneath the text, drawn with the
     * specified color. The text shadow produced does not interact with
     * properties on View that are responsible for real time shadows,
     * {@link android.R.styleable#View_elevation elevation} and
     * {@link android.R.styleable#View_translationZ translationZ}.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:shadowColor
     */
    public static final int TextView_shadowColor=36;
    /**
     * <p>
     * @attr description
     * Horizontal offset of the text shadow.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:shadowDx
     */
    public static final int TextView_shadowDx=37;
    /**
     * <p>
     * @attr description
     * Vertical offset of the text shadow.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:shadowDy
     */
    public static final int TextView_shadowDy=38;
    /**
     * <p>
     * @attr description
     * Blur radius of the text shadow.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:shadowRadius
     */
    public static final int TextView_shadowRadius=39;
    /**
     * <p>
     * @attr description
     * If set, specifies that this TextView has a numeric input method.
     * The default is false.
     * {@deprecated Use inputType instead.}
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>decimal</td><td>5</td><td>Input is numeric, with decimals allowed.</td></tr>
     * <tr><td>integer</td><td>1</td><td>Input is numeric.</td></tr>
     * <tr><td>signed</td><td>3</td><td>Input is numeric, with sign allowed.</td></tr>
     * </table>
     *
     * @attr name android:numeric
     */
    @Deprecated
    public static final int TextView_numeric=40;
    /**
     * <p>
     * @attr description
     * If set, specifies that this TextView has a numeric input method
     * and that these specific characters are the ones that it will
     * accept.
     * If this is set, numeric is implied to be true.
     * The default is false.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:digits
     */
    public static final int TextView_digits=41;
    /**
     * <p>
     * @attr description
     * If set, specifies that this TextView has a phone number input
     * method. The default is false.
     * {@deprecated Use inputType instead.}
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:phoneNumber
     */
    @Deprecated
    public static final int TextView_phoneNumber=42;
    /**
     * <p>
     * @attr description
     * If set, specifies that this TextView should use the specified
     * input method (specified by fully-qualified class name).
     * {@deprecated Use inputType instead.}
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:inputMethod
     */
    @Deprecated
    public static final int TextView_inputMethod=43;
    /**
     * <p>
     * @attr description
     * If set, specifies that this TextView has a textual input method
     * and should automatically capitalize what the user types.
     * The default is "none".
     * {@deprecated Use inputType instead.}
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>characters</td><td>3</td><td>Capitalize every character.</td></tr>
     * <tr><td>none</td><td>0</td><td>Don't automatically capitalize anything.</td></tr>
     * <tr><td>sentences</td><td>1</td><td>Capitalize the first word of each sentence.</td></tr>
     * <tr><td>words</td><td>2</td><td>Capitalize the first letter of every word.</td></tr>
     * </table>
     *
     * @attr name android:capitalize
     */
    @Deprecated
    public static final int TextView_capitalize=44;
    /**
     * <p>
     * @attr description
     * If set, specifies that this TextView has a textual input method
     * and automatically corrects some common spelling errors.
     * The default is "false".
     * {@deprecated Use inputType instead.}
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:autoText
     */
    @Deprecated
    public static final int TextView_autoText=45;
    /**
     * <p>
     * @attr description
     * If set, specifies that this TextView has an input method.
     * It will be a textual one unless it has otherwise been specified.
     * For TextView, this is false by default.  For EditText, it is
     * true by default.
     * {@deprecated Use inputType instead.}
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:editable
     */
    @Deprecated
    public static final int TextView_editable=46;
    /**
     * <p>
     * @attr description
     * If set, the text view will include its current complete text
     * inside of its frozen icicle in addition to meta-data such as
     * the current cursor position.  By default this is disabled;
     * it can be useful when the contents of a text view is not stored
     * in a persistent place such as a content provider. For
     * {@link android.widget.EditText} it is always enabled, regardless
     * of the value of the attribute.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:freezesText
     */
    public static final int TextView_freezesText=47;
    /**
     * <p>
     * @attr description
     * The drawable to be drawn above the text.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:drawableTop
     */
    public static final int TextView_drawableTop=48;
    /**
     * <p>
     * @attr description
     * The drawable to be drawn below the text.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:drawableBottom
     */
    public static final int TextView_drawableBottom=49;
    /**
     * <p>
     * @attr description
     * The drawable to be drawn to the left of the text.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:drawableLeft
     */
    public static final int TextView_drawableLeft=50;
    /**
     * <p>
     * @attr description
     * The drawable to be drawn to the right of the text.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:drawableRight
     */
    public static final int TextView_drawableRight=51;
    /**
     * <p>
     * @attr description
     * The padding between the drawables and the text.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:drawablePadding
     */
    public static final int TextView_drawablePadding=52;
    /**
     * <p>
     * @attr description
     * Extra spacing between lines of text. The value will not be applied for the last
     * line of text.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:lineSpacingExtra
     */
    public static final int TextView_lineSpacingExtra=53;
    /**
     * <p>
     * @attr description
     * Extra spacing between lines of text, as a multiplier. The value will not be applied
     * for the last line of text.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:lineSpacingMultiplier
     */
    public static final int TextView_lineSpacingMultiplier=54;
    /**
     * <p>
     * @attr description
     * The number of times to repeat the marquee animation. Only applied if the
     * TextView has marquee enabled.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>marquee_forever</td><td>ffffffff</td><td>Indicates that marquee should repeat indefinitely.</td></tr>
     * </table>
     *
     * @attr name android:marqueeRepeatLimit
     */
    public static final int TextView_marqueeRepeatLimit=55;
    /**
     * <p>
     * @attr description
     * The type of data being placed in a text field, used to help an
     * input method decide how to let the user enter text.  The constants
     * here correspond to those defined by
     * {@link android.text.InputType}.  Generally you can select
     * a single value, though some can be combined together as
     * indicated.  Setting this attribute to anything besides
     * <var>none</var> also implies that the text is editable.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>date</td><td>14</td><td>For entering a date.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_DATETIME} |
     * {@link android.text.InputType#TYPE_DATETIME_VARIATION_DATE}.</td></tr>
     * <tr><td>datetime</td><td>4</td><td>For entering a date and time.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_DATETIME} |
     * {@link android.text.InputType#TYPE_DATETIME_VARIATION_NORMAL}.</td></tr>
     * <tr><td>none</td><td>0</td><td>There is no content type.  The text is not editable.</td></tr>
     * <tr><td>number</td><td>2</td><td>A numeric only field.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
     * {@link android.text.InputType#TYPE_NUMBER_VARIATION_NORMAL}.</td></tr>
     * <tr><td>numberDecimal</td><td>2002</td><td>Can be combined with <var>number</var> and its other options to
     * allow a decimal (fractional) number.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
     * {@link android.text.InputType#TYPE_NUMBER_FLAG_DECIMAL}.</td></tr>
     * <tr><td>numberPassword</td><td>12</td><td>A numeric password field.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
     * {@link android.text.InputType#TYPE_NUMBER_VARIATION_PASSWORD}.</td></tr>
     * <tr><td>numberSigned</td><td>1002</td><td>Can be combined with <var>number</var> and its other options to
     * allow a signed number.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_NUMBER} |
     * {@link android.text.InputType#TYPE_NUMBER_FLAG_SIGNED}.</td></tr>
     * <tr><td>phone</td><td>3</td><td>For entering a phone number.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_PHONE}.</td></tr>
     * <tr><td>text</td><td>1</td><td>Just plain old text.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_NORMAL}.</td></tr>
     * <tr><td>textAutoComplete</td><td>10001</td><td>Can be combined with <var>text</var> and its variations to
     * specify that this field will be doing its own auto-completion and
     * talking with the input method appropriately.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_AUTO_COMPLETE}.</td></tr>
     * <tr><td>textAutoCorrect</td><td>8001</td><td>Can be combined with <var>text</var> and its variations to
     * request auto-correction of text being input.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_AUTO_CORRECT}.</td></tr>
     * <tr><td>textCapCharacters</td><td>1001</td><td>Can be combined with <var>text</var> and its variations to
     * request capitalization of all characters.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_CHARACTERS}.</td></tr>
     * <tr><td>textCapSentences</td><td>4001</td><td>Can be combined with <var>text</var> and its variations to
     * request capitalization of the first character of every sentence.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_SENTENCES}.</td></tr>
     * <tr><td>textCapWords</td><td>2001</td><td>Can be combined with <var>text</var> and its variations to
     * request capitalization of the first character of every word.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_CAP_WORDS}.</td></tr>
     * <tr><td>textEmailAddress</td><td>21</td><td>Text that will be used as an e-mail address.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_EMAIL_ADDRESS}.</td></tr>
     * <tr><td>textEmailSubject</td><td>31</td><td>Text that is being supplied as the subject of an e-mail.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_EMAIL_SUBJECT}.</td></tr>
     * <tr><td>textFilter</td><td>b1</td><td>Text that is filtering some other data.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_FILTER}.</td></tr>
     * <tr><td>textImeMultiLine</td><td>40001</td><td>Can be combined with <var>text</var> and its variations to
     * indicate that though the regular text view should not be multiple
     * lines, the IME should provide multiple lines if it can.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_IME_MULTI_LINE}.</td></tr>
     * <tr><td>textLongMessage</td><td>51</td><td>Text that is the content of a long message.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_LONG_MESSAGE}.</td></tr>
     * <tr><td>textMultiLine</td><td>20001</td><td>Can be combined with <var>text</var> and its variations to
     * allow multiple lines of text in the field.  If this flag is not set,
     * the text field will be constrained to a single line.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_MULTI_LINE}.
     * Note: If this flag is not set and the text field doesn't have max length limit, the
     * framework automatically set maximum length of the characters to 5000 for the
     * performance reasons.</td></tr>
     * <tr><td>textNoSuggestions</td><td>80001</td><td>Can be combined with <var>text</var> and its variations to
     * indicate that the IME should not show any
     * dictionary-based word suggestions.  Corresponds to
     * {@link android.text.InputType#TYPE_TEXT_FLAG_NO_SUGGESTIONS}.</td></tr>
     * <tr><td>textPassword</td><td>81</td><td>Text that is a password.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_PASSWORD}.</td></tr>
     * <tr><td>textPersonName</td><td>61</td><td>Text that is the name of a person.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_PERSON_NAME}.</td></tr>
     * <tr><td>textPhonetic</td><td>c1</td><td>Text that is for phonetic pronunciation, such as a phonetic name
     * field in a contact entry.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_PHONETIC}.</td></tr>
     * <tr><td>textPostalAddress</td><td>71</td><td>Text that is being supplied as a postal mailing address.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_POSTAL_ADDRESS}.</td></tr>
     * <tr><td>textShortMessage</td><td>41</td><td>Text that is the content of a short message.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_SHORT_MESSAGE}.</td></tr>
     * <tr><td>textUri</td><td>11</td><td>Text that will be used as a URI.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_URI}.</td></tr>
     * <tr><td>textVisiblePassword</td><td>91</td><td>Text that is a password that should be visible.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_VISIBLE_PASSWORD}.</td></tr>
     * <tr><td>textWebEditText</td><td>a1</td><td>Text that is being supplied as text in a web form.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_EDIT_TEXT}.</td></tr>
     * <tr><td>textWebEmailAddress</td><td>d1</td><td>Text that will be used as an e-mail address on a web form.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS}.</td></tr>
     * <tr><td>textWebPassword</td><td>e1</td><td>Text that will be used as a password on a web form.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_TEXT} |
     * {@link android.text.InputType#TYPE_TEXT_VARIATION_WEB_PASSWORD}.</td></tr>
     * <tr><td>time</td><td>24</td><td>For entering a time.  Corresponds to
     * {@link android.text.InputType#TYPE_CLASS_DATETIME} |
     * {@link android.text.InputType#TYPE_DATETIME_VARIATION_TIME}.</td></tr>
     * </table>
     *
     * @attr name android:inputType
     */
    public static final int TextView_inputType=56;
    /**
     * <p>
     * @attr description
     * An addition content type description to supply to the input
     * method attached to the text view, which is private to the
     * implementation of the input method.  This simply fills in
     * the {@link android.view.inputmethod.EditorInfo#privateImeOptions
     * EditorInfo.privateImeOptions} field when the input
     * method is connected.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:privateImeOptions
     */
    public static final int TextView_privateImeOptions=57;
    /**
     * <p>
     * @attr description
     * Reference to an
     * {@link android.R.styleable#InputExtras &lt;input-extras&gt;}
     * XML resource containing additional data to
     * supply to an input method, which is private to the implementation
     * of the input method.  This simply fills in
     * the {@link android.view.inputmethod.EditorInfo#extras
     * EditorInfo.extras} field when the input
     * method is connected.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:editorExtras
     */
    public static final int TextView_editorExtras=58;
    /**
     * <p>
     * @attr description
     * Additional features you can enable in an IME associated with an editor
     * to improve the integration with your application.  The constants
     * here correspond to those defined by
     * {@link android.view.inputmethod.EditorInfo#imeOptions}.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>actionDone</td><td>6</td><td>The action key performs a "done"
     * operation, closing the soft input method.
     * Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_ACTION_DONE}.</td></tr>
     * <tr><td>actionGo</td><td>2</td><td>The action key performs a "go"
     * operation to take the user to the target of the text they typed.
     * Typically used, for example, when entering a URL.
     * Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_ACTION_GO}.</td></tr>
     * <tr><td>actionNext</td><td>5</td><td>The action key performs a "next"
     * operation, taking the user to the next field that will accept text.
     * Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_ACTION_NEXT}.</td></tr>
     * <tr><td>actionNone</td><td>1</td><td>This editor has no action associated with it.
     * Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_ACTION_NONE}.</td></tr>
     * <tr><td>actionPrevious</td><td>7</td><td>The action key performs a "previous"
     * operation, taking the user to the previous field that will accept text.
     * Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_ACTION_PREVIOUS}.</td></tr>
     * <tr><td>actionSearch</td><td>3</td><td>The action key performs a "search"
     * operation, taking the user to the results of searching for the text
     * the have typed (in whatever context is appropriate).
     * Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_ACTION_SEARCH}.</td></tr>
     * <tr><td>actionSend</td><td>4</td><td>The action key performs a "send"
     * operation, delivering the text to its target.  This is typically used
     * when composing a message.
     * Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_ACTION_SEND}.</td></tr>
     * <tr><td>actionUnspecified</td><td>0</td><td>There is no specific action associated with this editor, let the
     * editor come up with its own if it can.
     * Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_NULL}.</td></tr>
     * <tr><td>flagForceAscii</td><td>80000000</td><td>Used to request that the IME should be capable of inputting ASCII
     * characters.  The intention of this flag is to ensure that the user
     * can type Roman alphabet characters in a {@link android.widget.TextView}
     * used for, typically, account ID or password input.  It is expected that IMEs
     * normally are able to input ASCII even without being told so (such IMEs
     * already respect this flag in a sense), but there could be some cases they
     * aren't when, for instance, only non-ASCII input languages like Arabic,
     * Greek, Hebrew, Russian are enabled in the IME.  Applications need to be
     * aware that the flag is not a guarantee, and not all IMEs will respect it.
     * However, it is strongly recommended for IME authors to respect this flag
     * especially when their IME could end up with a state that has only non-ASCII
     * input languages enabled.
     * <p>Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_FLAG_FORCE_ASCII}.</td></tr>
     * <tr><td>flagNavigateNext</td><td>8000000</td><td>Used to specify that there is something
     * interesting that a forward navigation can focus on. This is like using
     * actionNext, except allows the IME to be multiline (with
     * an enter key) as well as provide forward navigation.  Note that some
     * IMEs may not be able to do this, especially when running on a small
     * screen where there is little space.  In that case it does not need to
     * present a UI for this option.  Like actionNext, if the
     * user selects the IME's facility to forward navigate, this will show up
     * in the application at
     * {@link android.view.inputmethod.InputConnection#performEditorAction(int)
     * InputConnection.performEditorAction(int)}.
     * <p>Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NAVIGATE_NEXT}.</td></tr>
     * <tr><td>flagNavigatePrevious</td><td>4000000</td><td>Like flagNavigateNext, but
     * specifies there is something interesting that a backward navigation
     * can focus on.  If the user selects the IME's facility to backward
     * navigate, this will show up in the application as an actionPrevious
     * at {@link android.view.inputmethod.InputConnection#performEditorAction(int)
     * InputConnection.performEditorAction(int)}.
     * <p>Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NAVIGATE_PREVIOUS}.</td></tr>
     * <tr><td>flagNoAccessoryAction</td><td>20000000</td><td>Used in conjunction with a custom action, this indicates that the
     * action should not be available as an accessory button when the
     * input method is full-screen.
     * Note that by setting this flag, there can be cases where the action
     * is simply never available to the user.  Setting this generally means
     * that you think showing text being edited is more important than the
     * action you have supplied.
     * <p>Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_ACCESSORY_ACTION}.</td></tr>
     * <tr><td>flagNoEnterAction</td><td>40000000</td><td>Used in conjunction with a custom action,
     * this indicates that the action should not be available in-line as
     * a replacement for the "enter" key.  Typically this is
     * because the action has such a significant impact or is not recoverable
     * enough that accidentally hitting it should be avoided, such as sending
     * a message.    Note that {@link android.widget.TextView} will
     * automatically set this flag for you on multi-line text views.
     * <p>Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_ENTER_ACTION}.</td></tr>
     * <tr><td>flagNoExtractUi</td><td>10000000</td><td>Used to specify that the IME does not need
     * to show its extracted text UI.  For input methods that may be fullscreen,
     * often when in landscape mode, this allows them to be smaller and let part
     * of the application be shown behind.  Though there will likely be limited
     * access to the application available from the user, it can make the
     * experience of a (mostly) fullscreen IME less jarring.  Note that when
     * this flag is specified the IME may <em>not</em> be set up to be able
     * to display text, so it should only be used in situations where this is
     * not needed.
     * <p>Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_EXTRACT_UI}.</td></tr>
     * <tr><td>flagNoFullscreen</td><td>2000000</td><td>Used to request that the IME never go
     * into fullscreen mode.  Applications need to be aware that the flag is not
     * a guarantee, and not all IMEs will respect it.
     * <p>Corresponds to
     * {@link android.view.inputmethod.EditorInfo#IME_FLAG_NO_FULLSCREEN}.</td></tr>
     * <tr><td>flagNoPersonalizedLearning</td><td>1000000</td><td>Used to request that the IME should not update any personalized data such as typing
     * history and personalized language model based on what the user typed on this text
     * editing object. Typical use cases are:
     * <ul>
     * <li>When the application is in a special mode, where user's activities are expected
     * to be not recorded in the application's history. Some web browsers and chat
     * applications may have this kind of modes.</li>
     * <li>When storing typing history does not make much sense.  Specifying this flag in
     * typing games may help to avoid typing history from being filled up with words that
     * the user is less likely to type in their daily life.  Another example is that when
     * the application already knows that the expected input is not a valid word (e.g. a
     * promotion code that is not a valid word in any natural language).</li>
     * </ul>
     * <p>Applications need to be aware that the flag is not a guarantee, and some IMEs may
     * not respect it.</p></td></tr>
     * <tr><td>normal</td><td>0</td><td>There are no special semantics associated with this editor.</td></tr>
     * </table>
     *
     * @attr name android:imeOptions
     */
    public static final int TextView_imeOptions=59;
    /**
     * <p>
     * @attr description
     * Supply a value for
     * {@link android.view.inputmethod.EditorInfo#actionLabel EditorInfo.actionLabel}
     * used when an input method is connected to the text view.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:imeActionLabel
     */
    public static final int TextView_imeActionLabel=60;
    /**
     * <p>
     * @attr description
     * Supply a value for
     * {@link android.view.inputmethod.EditorInfo#actionId EditorInfo.actionId}
     * used when an input method is connected to the text view.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:imeActionId
     */
    public static final int TextView_imeActionId=61;
    /**
     * <p>
     * @attr description
     * Reference to a drawable that will be used to display a text selection
     * anchor on the left side of a selection region.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textSelectHandleLeft
     */
    public static final int TextView_textSelectHandleLeft=62;
    /**
     * <p>
     * @attr description
     * Reference to a drawable that will be used to display a text selection
     * anchor on the right side of a selection region.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textSelectHandleRight
     */
    public static final int TextView_textSelectHandleRight=63;
    /**
     * <p>
     * @attr description
     * Reference to a drawable that will be used to display a text selection
     * anchor for positioning the cursor within text.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textSelectHandle
     */
    public static final int TextView_textSelectHandle=64;
    /**
     * <p>
     * @attr description
     * The layout of the view that is displayed on top of the cursor to paste inside a
     * TextEdit field.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textEditPasteWindowLayout
     */
    public static final int TextView_textEditPasteWindowLayout=65;
    /**
     * <p>
     * @attr description
     * Variation of textEditPasteWindowLayout displayed when the clipboard is empty.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textEditNoPasteWindowLayout
     */
    public static final int TextView_textEditNoPasteWindowLayout=66;
    /**
     * <p>
     * @attr description
     * Indicates that the content of a non-editable text can be selected.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:textIsSelectable
     */
    public static final int TextView_textIsSelectable=67;
    /**
     * <p>
     * @attr description
     * Used instead of textEditPasteWindowLayout when the window is moved on the side of the
     * insertion cursor because it would be clipped if it were positioned on top.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textEditSidePasteWindowLayout
     */
    public static final int TextView_textEditSidePasteWindowLayout=68;
    /**
     * <p>
     * @attr description
     * Variation of textEditSidePasteWindowLayout displayed when the clipboard is empty.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textEditSideNoPasteWindowLayout
     */
    public static final int TextView_textEditSideNoPasteWindowLayout=69;
    /**
     * <p>
     * @attr description
     * Reference to a drawable that will be drawn under the insertion cursor.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textCursorDrawable
     */
    public static final int TextView_textCursorDrawable=70;
    /**
     * <p>
     * @attr description
     * Layout of the TextView item that will populate the suggestion popup window.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textEditSuggestionItemLayout
     */
    public static final int TextView_textEditSuggestionItemLayout=71;
    /**
     * <p>
     * @attr description
     * Present the text in ALL CAPS. This may use a small-caps form when available.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:textAllCaps
     */
    public static final int TextView_textAllCaps=72;
    /**
     * <p>
     * @attr description
     * The drawable to be drawn to the start of the text.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:drawableStart
     */
    public static final int TextView_drawableStart=73;
    /**
     * <p>
     * @attr description
     * The drawable to be drawn to the end of the text.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:drawableEnd
     */
    public static final int TextView_drawableEnd=74;
    /**
     * <p>
     * @attr description
     * Font family (named by string or as a font resource reference) for the text.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:fontFamily
     */
    public static final int TextView_fontFamily=75;
    /**
     * <p>
     * @attr description
     * Elegant text height, especially for less compacted complex script text.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:elegantTextHeight
     */
    public static final int TextView_elegantTextHeight=76;
    /**
     * <p>
     * @attr description
     * Text letter-spacing.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:letterSpacing
     */
    public static final int TextView_letterSpacing=77;
    /**
     * <p>
     * @attr description
     * Font feature settings.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:fontFeatureSettings
     */
    public static final int TextView_fontFeatureSettings=78;
    /**
     * <p>
     * @attr description
     * Tint to apply to the compound (left, top, etc.) drawables.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:drawableTint
     */
    public static final int TextView_drawableTint=79;
    /**
     * <p>
     * @attr description
     * Blending mode used to apply the compound (left, top, etc.) drawables tint.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     *
     * @attr name android:drawableTintMode
     */
    public static final int TextView_drawableTintMode=80;
    /**
     * <p>
     * @attr description
     * Break strategy (control over paragraph layout).
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>balanced</td><td>2</td><td>Line breaking strategy balances line lengths.</td></tr>
     * <tr><td>high_quality</td><td>1</td><td>Line breaking uses high-quality strategy, including hyphenation.</td></tr>
     * <tr><td>simple</td><td>0</td><td>Line breaking uses simple strategy.</td></tr>
     * </table>
     *
     * @attr name android:breakStrategy
     */
    public static final int TextView_breakStrategy=81;
    /**
     * <p>
     * @attr description
     * Frequency of automatic hyphenation.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>full</td><td>2</td><td>Standard amount of hyphenation, useful for running text and for
     * screens with limited space for text.</td></tr>
     * <tr><td>none</td><td>0</td><td>No hyphenation.</td></tr>
     * <tr><td>normal</td><td>1</td><td>Less frequent hyphenation, useful for informal use cases, such
     * as chat messages.</td></tr>
     * </table>
     *
     * @attr name android:hyphenationFrequency
     */
    public static final int TextView_hyphenationFrequency=82;
    /**
     * <p>
     * @attr description
     * Whether undo should be allowed for editable text. Defaults to true.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:allowUndo
     */
    public static final int TextView_allowUndo=83;
    /**
     * <p>
     * @attr description
     * Specify the type of auto-size. Note that this feature is not supported by EditText,
     * works only for TextView.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>none</td><td>0</td><td>No auto-sizing (default).</td></tr>
     * <tr><td>uniform</td><td>1</td><td>Uniform horizontal and vertical text size scaling to fit within the
     * container.</td></tr>
     * </table>
     *
     * @attr name android:autoSizeTextType
     */
    public static final int TextView_autoSizeTextType=84;
    /**
     * <p>
     * @attr description
     * Specify the auto-size step size if <code>autoSizeTextType</code> is set to
     * <code>uniform</code>. The default is 1px. Overwrites
     * <code>autoSizePresetSizes</code> if set.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:autoSizeStepGranularity
     */
    public static final int TextView_autoSizeStepGranularity=85;
    /**
     * <p>
     * @attr description
     * Resource array of dimensions to be used in conjunction with
     * <code>autoSizeTextType</code> set to <code>uniform</code>. Overrides
     * <code>autoSizeStepGranularity</code> if set.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:autoSizePresetSizes
     */
    public static final int TextView_autoSizePresetSizes=86;
    /**
     * <p>
     * @attr description
     * The minimum text size constraint to be used when auto-sizing text.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:autoSizeMinTextSize
     */
    public static final int TextView_autoSizeMinTextSize=87;
    /**
     * <p>
     * @attr description
     * The maximum text size constraint to be used when auto-sizing text.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:autoSizeMaxTextSize
     */
    public static final int TextView_autoSizeMaxTextSize=88;
    /**
     * <p>
     * @attr description
     * Mode for justification.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>inter_word</td><td>1</td><td>Justification by stretching word spacing.</td></tr>
     * <tr><td>none</td><td>0</td><td>No justification.</td></tr>
     * </table>
     *
     * @attr name android:justificationMode
     */
    public static final int TextView_justificationMode=89;
    /**
     * <p>
     * @attr description
     * Font variation settings.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:fontVariationSettings
     */
    public static final int TextView_fontVariationSettings=90;
    /**
     * <p>
     * @attr description
     * Whether to respect the ascent and descent of the fallback fonts that are used in
     * displaying the text. When true, fallback fonts that end up getting used can increase
     * the ascent and descent of the lines that they are used on.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:fallbackLineSpacing
     */
    public static final int TextView_fallbackLineSpacing=91;
    /**
     * <p>
     * @attr description
     * Distance from the top of the TextView to the first text baseline. If set, this
     * overrides the value set for paddingTop.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:firstBaselineToTopHeight
     */
    public static final int TextView_firstBaselineToTopHeight=92;
    /**
     * <p>
     * @attr description
     * Distance from the bottom of the TextView to the last text baseline. If set, this
     * overrides the value set for paddingBottom.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:lastBaselineToBottomHeight
     */
    public static final int TextView_lastBaselineToBottomHeight=93;
    /**
     * <p>
     * @attr description
     * Explicit height between lines of text. If set, this will override the values set
     * for lineSpacingExtra and lineSpacingMultiplier.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:lineHeight
     */
    public static final int TextView_lineHeight=94;
    /**
     * <p>
     * @attr description
     * Weight for the font used in the TextView.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:textFontWeight
     */
    public static final int TextView_textFontWeight=95;
    /**
     * <p>
     * @attr description
     * Specifies the {@link android.os.LocaleList} for the text in this TextView.
     * If not given, the system default will be used.
     * May be a string value, which is a comma-separated language tag list, such as "ja-JP,zh-CN".
     * When not specified or an empty string is given, it will fallback to the default one.
     * {@see android.os.LocaleList#forLanguageTags(String)}
     * {@see android.widget.TextView#setTextLocales(android.os.LocaleList)}
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:textLocale
     */
    public static final int TextView_textLocale=96;
    /**
     * Attributes that can be used with a TextViewAppearance.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #TextViewAppearance_textAppearance android:textAppearance}</code></td><td>Default appearance of text: color, typeface, size, and style.</td></tr>
     * </table>
     * @see #TextViewAppearance_textAppearance
     */
    public static final int[] TextViewAppearance={
      0x01010034
    };
    /**
     * <p>
     * @attr description
     * Base text color, typeface, size, and style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textAppearance
     */
    public static final int TextViewAppearance_textAppearance=0;
    /**
     * Attributes that can be used with a TextViewMultiLineBackgroundState.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #TextViewMultiLineBackgroundState_state_multiline android:state_multiline}</code></td><td>State identifier indicating a TextView has a multi-line layout.</td></tr>
     * </table>
     * @see #TextViewMultiLineBackgroundState_state_multiline
     */
    public static final int[] TextViewMultiLineBackgroundState={
      0x0101034d
    };
    /**
     * <p>
     * @attr description
     * State identifier indicating a TextView has a multi-line layout.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_multiline
     */
    public static final int TextViewMultiLineBackgroundState_state_multiline=0;
    /**
     * These are the standard attributes that make up a complete theme.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Theme_colorForeground android:colorForeground}</code></td><td>Default color of foreground imagery.</td></tr>
     * <tr><td><code>{@link #Theme_colorBackground android:colorBackground}</code></td><td>Default color of background imagery, ex.</td></tr>
     * <tr><td><code>{@link #Theme_backgroundDimAmount android:backgroundDimAmount}</code></td><td>Default background dim amount when a menu, dialog, or something similar pops up.</td></tr>
     * <tr><td><code>{@link #Theme_disabledAlpha android:disabledAlpha}</code></td><td>Default disabled alpha for widgets that set enabled/disabled alpha programmatically.</td></tr>
     * <tr><td><code>{@link #Theme_textAppearance android:textAppearance}</code></td><td>Default appearance of text: color, typeface, size, and style.</td></tr>
     * <tr><td><code>{@link #Theme_textAppearanceInverse android:textAppearanceInverse}</code></td><td>Default appearance of text against an inverted background:
     * color, typeface, size, and style.</td></tr>
     * <tr><td><code>{@link #Theme_textColorPrimary android:textColorPrimary}</code></td><td>The most prominent text color.</td></tr>
     * <tr><td><code>{@link #Theme_textColorPrimaryDisableOnly android:textColorPrimaryDisableOnly}</code></td><td>Bright text color.</td></tr>
     * <tr><td><code>{@link #Theme_textColorSecondary android:textColorSecondary}</code></td><td>Secondary text color.</td></tr>
     * <tr><td><code>{@link #Theme_textColorPrimaryInverse android:textColorPrimaryInverse}</code></td><td>Primary inverse text color, useful for inverted backgrounds.</td></tr>
     * <tr><td><code>{@link #Theme_textColorSecondaryInverse android:textColorSecondaryInverse}</code></td><td>Secondary inverse text color, useful for inverted backgrounds.</td></tr>
     * <tr><td><code>{@link #Theme_textColorPrimaryNoDisable android:textColorPrimaryNoDisable}</code></td><td>Bright text color.</td></tr>
     * <tr><td><code>{@link #Theme_textColorSecondaryNoDisable android:textColorSecondaryNoDisable}</code></td><td>Dim text color.</td></tr>
     * <tr><td><code>{@link #Theme_textColorPrimaryInverseNoDisable android:textColorPrimaryInverseNoDisable}</code></td><td>Bright inverse text color.</td></tr>
     * <tr><td><code>{@link #Theme_textColorSecondaryInverseNoDisable android:textColorSecondaryInverseNoDisable}</code></td><td>Dim inverse text color.</td></tr>
     * <tr><td><code>{@link #Theme_textColorHintInverse android:textColorHintInverse}</code></td><td>Inverse hint text color.</td></tr>
     * <tr><td><code>{@link #Theme_textAppearanceLarge android:textAppearanceLarge}</code></td><td>Text color, typeface, size, and style for "large" text.</td></tr>
     * <tr><td><code>{@link #Theme_textAppearanceMedium android:textAppearanceMedium}</code></td><td>Text color, typeface, size, and style for "medium" text.</td></tr>
     * <tr><td><code>{@link #Theme_textAppearanceSmall android:textAppearanceSmall}</code></td><td>Text color, typeface, size, and style for "small" text.</td></tr>
     * <tr><td><code>{@link #Theme_textAppearanceLargeInverse android:textAppearanceLargeInverse}</code></td><td>Text color, typeface, size, and style for "large" inverse text.</td></tr>
     * <tr><td><code>{@link #Theme_textAppearanceMediumInverse android:textAppearanceMediumInverse}</code></td><td>Text color, typeface, size, and style for "medium" inverse text.</td></tr>
     * <tr><td><code>{@link #Theme_textAppearanceSmallInverse android:textAppearanceSmallInverse}</code></td><td>Text color, typeface, size, and style for "small" inverse text.</td></tr>
     * <tr><td><code>{@link #Theme_textCheckMark android:textCheckMark}</code></td><td>Drawable to use for check marks.</td></tr>
     * <tr><td><code>{@link #Theme_textCheckMarkInverse android:textCheckMarkInverse}</code></td><td></td></tr>
     * <tr><td><code>{@link #Theme_buttonStyle android:buttonStyle}</code></td><td>Normal Button style.</td></tr>
     * <tr><td><code>{@link #Theme_buttonStyleSmall android:buttonStyleSmall}</code></td><td>Small Button style.</td></tr>
     * <tr><td><code>{@link #Theme_buttonStyleInset android:buttonStyleInset}</code></td><td>Button style to inset into an EditText.</td></tr>
     * <tr><td><code>{@link #Theme_buttonStyleToggle android:buttonStyleToggle}</code></td><td>ToggleButton style.</td></tr>
     * <tr><td><code>{@link #Theme_galleryItemBackground android:galleryItemBackground}</code></td><td>The preferred background for gallery items.</td></tr>
     * <tr><td><code>{@link #Theme_listPreferredItemHeight android:listPreferredItemHeight}</code></td><td>The preferred list item height.</td></tr>
     * <tr><td><code>{@link #Theme_expandableListPreferredItemPaddingLeft android:expandableListPreferredItemPaddingLeft}</code></td><td>The preferred left padding for an expandable list item (for child-specific layouts,
     * use expandableListPreferredChildPaddingLeft).</td></tr>
     * <tr><td><code>{@link #Theme_expandableListPreferredChildPaddingLeft android:expandableListPreferredChildPaddingLeft}</code></td><td>The preferred left padding for an expandable list item that is a child.</td></tr>
     * <tr><td><code>{@link #Theme_expandableListPreferredItemIndicatorLeft android:expandableListPreferredItemIndicatorLeft}</code></td><td>The preferred left bound for an expandable list item's indicator.</td></tr>
     * <tr><td><code>{@link #Theme_expandableListPreferredItemIndicatorRight android:expandableListPreferredItemIndicatorRight}</code></td><td>The preferred right bound for an expandable list item's indicator.</td></tr>
     * <tr><td><code>{@link #Theme_expandableListPreferredChildIndicatorLeft android:expandableListPreferredChildIndicatorLeft}</code></td><td>The preferred left bound for an expandable list child's indicator.</td></tr>
     * <tr><td><code>{@link #Theme_expandableListPreferredChildIndicatorRight android:expandableListPreferredChildIndicatorRight}</code></td><td>The preferred right bound for an expandable list child's indicator.</td></tr>
     * <tr><td><code>{@link #Theme_windowBackground android:windowBackground}</code></td><td>Drawable to use as the overall window background.</td></tr>
     * <tr><td><code>{@link #Theme_windowFrame android:windowFrame}</code></td><td>Drawable to use as a frame around the window.</td></tr>
     * <tr><td><code>{@link #Theme_windowNoTitle android:windowNoTitle}</code></td><td>Flag indicating whether there should be no title on this window.</td></tr>
     * <tr><td><code>{@link #Theme_windowIsFloating android:windowIsFloating}</code></td><td>Flag indicating whether this is a floating window.</td></tr>
     * <tr><td><code>{@link #Theme_windowIsTranslucent android:windowIsTranslucent}</code></td><td>Flag indicating whether this is a translucent window.</td></tr>
     * <tr><td><code>{@link #Theme_windowContentOverlay android:windowContentOverlay}</code></td><td>This Drawable is overlaid over the foreground of the Window's content area, usually
     * to place a shadow below the title.</td></tr>
     * <tr><td><code>{@link #Theme_windowTitleSize android:windowTitleSize}</code></td><td>The style resource to use for a window's title bar height.</td></tr>
     * <tr><td><code>{@link #Theme_windowTitleStyle android:windowTitleStyle}</code></td><td>The style resource to use for a window's title text.</td></tr>
     * <tr><td><code>{@link #Theme_windowTitleBackgroundStyle android:windowTitleBackgroundStyle}</code></td><td>The style resource to use for a window's title area.</td></tr>
     * <tr><td><code>{@link #Theme_alertDialogStyle android:alertDialogStyle}</code></td><td></td></tr>
     * <tr><td><code>{@link #Theme_panelBackground android:panelBackground}</code></td><td>The background of a panel when it is inset from the left and right edges of the screen.</td></tr>
     * <tr><td><code>{@link #Theme_panelFullBackground android:panelFullBackground}</code></td><td>The background of a panel when it extends to the left and right edges of the screen.</td></tr>
     * <tr><td><code>{@link #Theme_panelColorForeground android:panelColorForeground}</code></td><td>Default color of foreground panel imagery.</td></tr>
     * <tr><td><code>{@link #Theme_panelColorBackground android:panelColorBackground}</code></td><td>Color that matches (as closely as possible) the panel background.</td></tr>
     * <tr><td><code>{@link #Theme_panelTextAppearance android:panelTextAppearance}</code></td><td>Default appearance of panel text.</td></tr>
     * <tr><td><code>{@link #Theme_absListViewStyle android:absListViewStyle}</code></td><td>Default AbsListView style.</td></tr>
     * <tr><td><code>{@link #Theme_autoCompleteTextViewStyle android:autoCompleteTextViewStyle}</code></td><td>Default AutoCompleteTextView style.</td></tr>
     * <tr><td><code>{@link #Theme_checkboxStyle android:checkboxStyle}</code></td><td>Default Checkbox style.</td></tr>
     * <tr><td><code>{@link #Theme_dropDownListViewStyle android:dropDownListViewStyle}</code></td><td>Default ListView style for drop downs.</td></tr>
     * <tr><td><code>{@link #Theme_editTextStyle android:editTextStyle}</code></td><td>Default EditText style.</td></tr>
     * <tr><td><code>{@link #Theme_expandableListViewStyle android:expandableListViewStyle}</code></td><td>Default ExpandableListView style.</td></tr>
     * <tr><td><code>{@link #Theme_galleryStyle android:galleryStyle}</code></td><td>Default Gallery style.</td></tr>
     * <tr><td><code>{@link #Theme_gridViewStyle android:gridViewStyle}</code></td><td>Default GridView style.</td></tr>
     * <tr><td><code>{@link #Theme_imageButtonStyle android:imageButtonStyle}</code></td><td>The style resource to use for an ImageButton.</td></tr>
     * <tr><td><code>{@link #Theme_imageWellStyle android:imageWellStyle}</code></td><td>The style resource to use for an ImageButton that is an image well.</td></tr>
     * <tr><td><code>{@link #Theme_listViewStyle android:listViewStyle}</code></td><td>Default ListView style.</td></tr>
     * <tr><td><code>{@link #Theme_listViewWhiteStyle android:listViewWhiteStyle}</code></td><td>ListView with white background.</td></tr>
     * <tr><td><code>{@link #Theme_popupWindowStyle android:popupWindowStyle}</code></td><td>Default PopupWindow style.</td></tr>
     * <tr><td><code>{@link #Theme_progressBarStyle android:progressBarStyle}</code></td><td>Default ProgressBar style.</td></tr>
     * <tr><td><code>{@link #Theme_progressBarStyleHorizontal android:progressBarStyleHorizontal}</code></td><td>Horizontal ProgressBar style.</td></tr>
     * <tr><td><code>{@link #Theme_progressBarStyleSmall android:progressBarStyleSmall}</code></td><td>Small ProgressBar style.</td></tr>
     * <tr><td><code>{@link #Theme_progressBarStyleLarge android:progressBarStyleLarge}</code></td><td>Large ProgressBar style.</td></tr>
     * <tr><td><code>{@link #Theme_seekBarStyle android:seekBarStyle}</code></td><td>Default SeekBar style.</td></tr>
     * <tr><td><code>{@link #Theme_ratingBarStyle android:ratingBarStyle}</code></td><td>Default RatingBar style.</td></tr>
     * <tr><td><code>{@link #Theme_ratingBarStyleSmall android:ratingBarStyleSmall}</code></td><td>Small indicator RatingBar style.</td></tr>
     * <tr><td><code>{@link #Theme_radioButtonStyle android:radioButtonStyle}</code></td><td>Default RadioButton style.</td></tr>
     * <tr><td><code>{@link #Theme_scrollViewStyle android:scrollViewStyle}</code></td><td>Default ScrollView style.</td></tr>
     * <tr><td><code>{@link #Theme_spinnerStyle android:spinnerStyle}</code></td><td>Default Spinner style.</td></tr>
     * <tr><td><code>{@link #Theme_starStyle android:starStyle}</code></td><td>Default Star style.</td></tr>
     * <tr><td><code>{@link #Theme_tabWidgetStyle android:tabWidgetStyle}</code></td><td>Default TabWidget style.</td></tr>
     * <tr><td><code>{@link #Theme_textViewStyle android:textViewStyle}</code></td><td>Default TextView style.</td></tr>
     * <tr><td><code>{@link #Theme_webViewStyle android:webViewStyle}</code></td><td>Default WebView style.</td></tr>
     * <tr><td><code>{@link #Theme_dropDownItemStyle android:dropDownItemStyle}</code></td><td>Default style for drop down items.</td></tr>
     * <tr><td><code>{@link #Theme_spinnerDropDownItemStyle android:spinnerDropDownItemStyle}</code></td><td>Default style for spinner drop down items.</td></tr>
     * <tr><td><code>{@link #Theme_dropDownHintAppearance android:dropDownHintAppearance}</code></td><td>Default style for drop down hints.</td></tr>
     * <tr><td><code>{@link #Theme_spinnerItemStyle android:spinnerItemStyle}</code></td><td>Default spinner item style.</td></tr>
     * <tr><td><code>{@link #Theme_mapViewStyle android:mapViewStyle}</code></td><td>Default MapView style.</td></tr>
     * <tr><td><code>{@link #Theme_preferenceScreenStyle android:preferenceScreenStyle}</code></td><td>Default style for PreferenceScreen.</td></tr>
     * <tr><td><code>{@link #Theme_preferenceCategoryStyle android:preferenceCategoryStyle}</code></td><td>Default style for PreferenceCategory.</td></tr>
     * <tr><td><code>{@link #Theme_preferenceInformationStyle android:preferenceInformationStyle}</code></td><td>Default style for informational Preference.</td></tr>
     * <tr><td><code>{@link #Theme_preferenceStyle android:preferenceStyle}</code></td><td>Default style for Preference.</td></tr>
     * <tr><td><code>{@link #Theme_checkBoxPreferenceStyle android:checkBoxPreferenceStyle}</code></td><td>Default style for CheckBoxPreference.</td></tr>
     * <tr><td><code>{@link #Theme_yesNoPreferenceStyle android:yesNoPreferenceStyle}</code></td><td>Default style for YesNoPreference.</td></tr>
     * <tr><td><code>{@link #Theme_dialogPreferenceStyle android:dialogPreferenceStyle}</code></td><td>Default style for DialogPreference.</td></tr>
     * <tr><td><code>{@link #Theme_editTextPreferenceStyle android:editTextPreferenceStyle}</code></td><td>Default style for EditTextPreference.</td></tr>
     * <tr><td><code>{@link #Theme_ringtonePreferenceStyle android:ringtonePreferenceStyle}</code></td><td>Default style for RingtonePreference.</td></tr>
     * <tr><td><code>{@link #Theme_preferenceLayoutChild android:preferenceLayoutChild}</code></td><td>The preference layout that has the child/tabbed effect.</td></tr>
     * <tr><td><code>{@link #Theme_windowAnimationStyle android:windowAnimationStyle}</code></td><td>Reference to a style resource holding
     * the set of window animations to use, which can be
     * any of the attributes defined by
     * {@link android.R.styleable#WindowAnimation}.</td></tr>
     * <tr><td><code>{@link #Theme_colorForegroundInverse android:colorForegroundInverse}</code></td><td>Default color of foreground imagery on an inverted background.</td></tr>
     * <tr><td><code>{@link #Theme_textAppearanceButton android:textAppearanceButton}</code></td><td>Text color, typeface, size, and style for the text inside of a button.</td></tr>
     * <tr><td><code>{@link #Theme_listSeparatorTextViewStyle android:listSeparatorTextViewStyle}</code></td><td>TextView style for list separators.</td></tr>
     * <tr><td><code>{@link #Theme_windowFullscreen android:windowFullscreen}</code></td><td>Flag indicating whether this window should fill the entire screen.</td></tr>
     * <tr><td><code>{@link #Theme_progressBarStyleSmallTitle android:progressBarStyleSmallTitle}</code></td><td>Small ProgressBar in title style.</td></tr>
     * <tr><td><code>{@link #Theme_ratingBarStyleIndicator android:ratingBarStyleIndicator}</code></td><td>Indicator RatingBar style.</td></tr>
     * <tr><td><code>{@link #Theme_textColorTertiary android:textColorTertiary}</code></td><td>Tertiary text color.</td></tr>
     * <tr><td><code>{@link #Theme_textColorTertiaryInverse android:textColorTertiaryInverse}</code></td><td>Tertiary inverse text color, useful for inverted backgrounds.</td></tr>
     * <tr><td><code>{@link #Theme_listDivider android:listDivider}</code></td><td>The drawable for the list divider.</td></tr>
     * <tr><td><code>{@link #Theme_listChoiceIndicatorSingle android:listChoiceIndicatorSingle}</code></td><td>Drawable to use for single choice indicators.</td></tr>
     * <tr><td><code>{@link #Theme_listChoiceIndicatorMultiple android:listChoiceIndicatorMultiple}</code></td><td>Drawable to use for multiple choice indicators.</td></tr>
     * <tr><td><code>{@link #Theme_windowNoDisplay android:windowNoDisplay}</code></td><td>Flag indicating that this window should not be displayed at all.</td></tr>
     * <tr><td><code>{@link #Theme_backgroundDimEnabled android:backgroundDimEnabled}</code></td><td>Control whether dimming behind the window is enabled.</td></tr>
     * <tr><td><code>{@link #Theme_windowDisablePreview android:windowDisablePreview}</code></td><td>Flag allowing you to disable the splash screen for a window.</td></tr>
     * <tr><td><code>{@link #Theme_windowSoftInputMode android:windowSoftInputMode}</code></td><td>Defines the default soft input state that this window would
     * like when it is displayed.</td></tr>
     * <tr><td><code>{@link #Theme_candidatesTextStyleSpans android:candidatesTextStyleSpans}</code></td><td>A styled string, specifying the style to be used for showing
     * inline candidate text when composing with an input method.</td></tr>
     * <tr><td><code>{@link #Theme_progressBarStyleInverse android:progressBarStyleInverse}</code></td><td>Inverse ProgressBar style.</td></tr>
     * <tr><td><code>{@link #Theme_progressBarStyleSmallInverse android:progressBarStyleSmallInverse}</code></td><td>Small inverse ProgressBar style.</td></tr>
     * <tr><td><code>{@link #Theme_progressBarStyleLargeInverse android:progressBarStyleLargeInverse}</code></td><td>Large inverse ProgressBar style.</td></tr>
     * <tr><td><code>{@link #Theme_textColorPrimaryInverseDisableOnly android:textColorPrimaryInverseDisableOnly}</code></td><td>Bright inverse text color.</td></tr>
     * <tr><td><code>{@link #Theme_windowShowWallpaper android:windowShowWallpaper}</code></td><td>Flag indicating that this window's background should be the
     * user's current wallpaper.</td></tr>
     * <tr><td><code>{@link #Theme_textAppearanceSearchResultSubtitle android:textAppearanceSearchResultSubtitle}</code></td><td>Text color, typeface, size, and style for system search result subtitle.</td></tr>
     * <tr><td><code>{@link #Theme_textAppearanceSearchResultTitle android:textAppearanceSearchResultTitle}</code></td><td>Text color, typeface, size, and style for system search result title.</td></tr>
     * <tr><td><code>{@link #Theme_colorBackgroundCacheHint android:colorBackgroundCacheHint}</code></td><td>This is a hint for a solid color that can be used for caching
     * rendered views.</td></tr>
     * <tr><td><code>{@link #Theme_quickContactBadgeStyleWindowSmall android:quickContactBadgeStyleWindowSmall}</code></td><td>Default quickcontact badge style with small quickcontact window.</td></tr>
     * <tr><td><code>{@link #Theme_quickContactBadgeStyleWindowMedium android:quickContactBadgeStyleWindowMedium}</code></td><td>Default quickcontact badge style with medium quickcontact window.</td></tr>
     * <tr><td><code>{@link #Theme_quickContactBadgeStyleWindowLarge android:quickContactBadgeStyleWindowLarge}</code></td><td>Default quickcontact badge style with large quickcontact window.</td></tr>
     * <tr><td><code>{@link #Theme_quickContactBadgeStyleSmallWindowSmall android:quickContactBadgeStyleSmallWindowSmall}</code></td><td>Default quickcontact badge style with small quickcontact window.</td></tr>
     * <tr><td><code>{@link #Theme_quickContactBadgeStyleSmallWindowMedium android:quickContactBadgeStyleSmallWindowMedium}</code></td><td>Default quickcontact badge style with medium quickcontact window.</td></tr>
     * <tr><td><code>{@link #Theme_quickContactBadgeStyleSmallWindowLarge android:quickContactBadgeStyleSmallWindowLarge}</code></td><td>Default quickcontact badge style with large quickcontact window.</td></tr>
     * <tr><td><code>{@link #Theme_expandableListViewWhiteStyle android:expandableListViewWhiteStyle}</code></td><td>ExpandableListView with white background.</td></tr>
     * <tr><td><code>{@link #Theme_webTextViewStyle android:webTextViewStyle}</code></td><td>Default WebTextView style.</td></tr>
     * <tr><td><code>{@link #Theme_textSelectHandleLeft android:textSelectHandleLeft}</code></td><td>Reference to a drawable that will be used to display a text selection
     * anchor on the left side of a selection region.</td></tr>
     * <tr><td><code>{@link #Theme_textSelectHandleRight android:textSelectHandleRight}</code></td><td>Reference to a drawable that will be used to display a text selection
     * anchor on the right side of a selection region.</td></tr>
     * <tr><td><code>{@link #Theme_textSelectHandle android:textSelectHandle}</code></td><td>Reference to a drawable that will be used to display a text selection
     * anchor for positioning the cursor within text.</td></tr>
     * <tr><td><code>{@link #Theme_textSelectHandleWindowStyle android:textSelectHandleWindowStyle}</code></td><td>Reference to a style that will be used for the window containing a text
     * selection anchor.</td></tr>
     * <tr><td><code>{@link #Theme_windowActionBar android:windowActionBar}</code></td><td>Flag indicating whether this window should have an Action Bar
     * in place of the usual title bar.</td></tr>
     * <tr><td><code>{@link #Theme_actionBarStyle android:actionBarStyle}</code></td><td>Reference to a style for the Action Bar.</td></tr>
     * <tr><td><code>{@link #Theme_dropDownSpinnerStyle android:dropDownSpinnerStyle}</code></td><td>Default dropdown Spinner style.</td></tr>
     * <tr><td><code>{@link #Theme_actionDropDownStyle android:actionDropDownStyle}</code></td><td>Default ActionBar dropdown style.</td></tr>
     * <tr><td><code>{@link #Theme_actionButtonStyle android:actionButtonStyle}</code></td><td>Default action button style.</td></tr>
     * <tr><td><code>{@link #Theme_actionModeBackground android:actionModeBackground}</code></td><td>Background drawable to use for action mode UI.</td></tr>
     * <tr><td><code>{@link #Theme_actionModeCloseDrawable android:actionModeCloseDrawable}</code></td><td>Drawable to use for the close action mode button.</td></tr>
     * <tr><td><code>{@link #Theme_windowActionModeOverlay android:windowActionModeOverlay}</code></td><td>Flag indicating whether action modes should overlay window content
     * when there is not reserved space for their UI (such as an Action Bar).</td></tr>
     * <tr><td><code>{@link #Theme_windowActionBarOverlay android:windowActionBarOverlay}</code></td><td>Flag indicating whether this window's Action Bar should overlay
     * application content.</td></tr>
     * <tr><td><code>{@link #Theme_actionBarSize android:actionBarSize}</code></td><td>Size of the Action Bar, including the contextual
     * bar used to present Action Modes.</td></tr>
     * <tr><td><code>{@link #Theme_listChoiceBackgroundIndicator android:listChoiceBackgroundIndicator}</code></td><td>Drawable used as a background for selected list items.</td></tr>
     * <tr><td><code>{@link #Theme_actionBarTabStyle android:actionBarTabStyle}</code></td><td>Default style for tabs within an action bar.</td></tr>
     * <tr><td><code>{@link #Theme_actionBarTabBarStyle android:actionBarTabBarStyle}</code></td><td>Reference to a style for the Action Bar Tab Bar.</td></tr>
     * <tr><td><code>{@link #Theme_actionBarTabTextStyle android:actionBarTabTextStyle}</code></td><td>Reference to a style for the Action Bar Tab text.</td></tr>
     * <tr><td><code>{@link #Theme_actionOverflowButtonStyle android:actionOverflowButtonStyle}</code></td><td>Reference to a style for Action Bar overflow buttons.</td></tr>
     * <tr><td><code>{@link #Theme_actionModeCloseButtonStyle android:actionModeCloseButtonStyle}</code></td><td>Reference to a style for the Action Mode close button.</td></tr>
     * <tr><td><code>{@link #Theme_activatedBackgroundIndicator android:activatedBackgroundIndicator}</code></td><td>Drawable used as a background for activated items.</td></tr>
     * <tr><td><code>{@link #Theme_listPopupWindowStyle android:listPopupWindowStyle}</code></td><td>Default ListPopupWindow style.</td></tr>
     * <tr><td><code>{@link #Theme_popupMenuStyle android:popupMenuStyle}</code></td><td>Default PopupMenu style.</td></tr>
     * <tr><td><code>{@link #Theme_textAppearanceLargePopupMenu android:textAppearanceLargePopupMenu}</code></td><td>Text color, typeface, size, and style for the text inside of a popup menu.</td></tr>
     * <tr><td><code>{@link #Theme_textAppearanceSmallPopupMenu android:textAppearanceSmallPopupMenu}</code></td><td>Text color, typeface, size, and style for small text inside of a popup menu.</td></tr>
     * <tr><td><code>{@link #Theme_listDividerAlertDialog android:listDividerAlertDialog}</code></td><td>The list divider used in alert dialogs.</td></tr>
     * <tr><td><code>{@link #Theme_textColorAlertDialogListItem android:textColorAlertDialogListItem}</code></td><td>Color of list item text in alert dialogs.</td></tr>
     * <tr><td><code>{@link #Theme_dialogTheme android:dialogTheme}</code></td><td>Theme to use for dialogs spawned from this theme.</td></tr>
     * <tr><td><code>{@link #Theme_alertDialogTheme android:alertDialogTheme}</code></td><td>Theme to use for alert dialogs spawned from this theme.</td></tr>
     * <tr><td><code>{@link #Theme_dividerVertical android:dividerVertical}</code></td><td>Drawable to use for generic vertical dividers.</td></tr>
     * <tr><td><code>{@link #Theme_homeAsUpIndicator android:homeAsUpIndicator}</code></td><td>Specifies a drawable to use for the 'home as up' indicator.</td></tr>
     * <tr><td><code>{@link #Theme_selectableItemBackground android:selectableItemBackground}</code></td><td>Background drawable for bordered standalone items that need focus/pressed states.</td></tr>
     * <tr><td><code>{@link #Theme_actionModeCutDrawable android:actionModeCutDrawable}</code></td><td>Drawable to use for the Cut action button in Contextual Action Bar.</td></tr>
     * <tr><td><code>{@link #Theme_actionModeCopyDrawable android:actionModeCopyDrawable}</code></td><td>Drawable to use for the Copy action button in Contextual Action Bar.</td></tr>
     * <tr><td><code>{@link #Theme_actionModePasteDrawable android:actionModePasteDrawable}</code></td><td>Drawable to use for the Paste action button in Contextual Action Bar.</td></tr>
     * <tr><td><code>{@link #Theme_textEditPasteWindowLayout android:textEditPasteWindowLayout}</code></td><td>The layout of the view that is displayed on top of the cursor to paste inside a
     * TextEdit field.</td></tr>
     * <tr><td><code>{@link #Theme_textEditNoPasteWindowLayout android:textEditNoPasteWindowLayout}</code></td><td>Variation of textEditPasteWindowLayout displayed when the clipboard is empty.</td></tr>
     * <tr><td><code>{@link #Theme_windowEnableSplitTouch android:windowEnableSplitTouch}</code></td><td>Flag indicating that this window should allow touches to be split
     * across other windows that also support split touch.</td></tr>
     * <tr><td><code>{@link #Theme_borderlessButtonStyle android:borderlessButtonStyle}</code></td><td>Style for buttons without an explicit border, often used in groups.</td></tr>
     * <tr><td><code>{@link #Theme_dividerHorizontal android:dividerHorizontal}</code></td><td>Drawable to use for generic horizontal dividers.</td></tr>
     * <tr><td><code>{@link #Theme_buttonBarStyle android:buttonBarStyle}</code></td><td>Style for button bars.</td></tr>
     * <tr><td><code>{@link #Theme_buttonBarButtonStyle android:buttonBarButtonStyle}</code></td><td>Style for buttons within button bars.</td></tr>
     * <tr><td><code>{@link #Theme_segmentedButtonStyle android:segmentedButtonStyle}</code></td><td>Style for segmented buttons - a container that houses several buttons
     * with the appearance of a singel button broken into segments.</td></tr>
     * <tr><td><code>{@link #Theme_fastScrollThumbDrawable android:fastScrollThumbDrawable}</code></td><td>Drawable to use as the fast scroll thumb.</td></tr>
     * <tr><td><code>{@link #Theme_fastScrollPreviewBackgroundLeft android:fastScrollPreviewBackgroundLeft}</code></td><td>Drawable to use as the fast scroll index preview window background
     * when shown on the left.</td></tr>
     * <tr><td><code>{@link #Theme_fastScrollPreviewBackgroundRight android:fastScrollPreviewBackgroundRight}</code></td><td>Drawable to use as the fast scroll index preview window background
     * when shown on the right.</td></tr>
     * <tr><td><code>{@link #Theme_fastScrollTrackDrawable android:fastScrollTrackDrawable}</code></td><td>Drawable to use as the track for the fast scroll thumb.</td></tr>
     * <tr><td><code>{@link #Theme_fastScrollOverlayPosition android:fastScrollOverlayPosition}</code></td><td>Position of the fast scroll index overlay window.</td></tr>
     * <tr><td><code>{@link #Theme_detailsElementBackground android:detailsElementBackground}</code></td><td>Background that can be used behind parts of a UI that provide
     * details on data the user is selecting.</td></tr>
     * <tr><td><code>{@link #Theme_textColorHighlightInverse android:textColorHighlightInverse}</code></td><td>Color of highlighted text, when used in a light theme.</td></tr>
     * <tr><td><code>{@link #Theme_textColorLinkInverse android:textColorLinkInverse}</code></td><td>Color of link text (URLs), when used in a light theme.</td></tr>
     * <tr><td><code>{@link #Theme_editTextColor android:editTextColor}</code></td><td>EditText text foreground color.</td></tr>
     * <tr><td><code>{@link #Theme_editTextBackground android:editTextBackground}</code></td><td>EditText background drawable.</td></tr>
     * <tr><td><code>{@link #Theme_horizontalScrollViewStyle android:horizontalScrollViewStyle}</code></td><td>Default HorizontalScrollView style.</td></tr>
     * <tr><td><code>{@link #Theme_alertDialogIcon android:alertDialogIcon}</code></td><td>Icon drawable to use for alerts.</td></tr>
     * <tr><td><code>{@link #Theme_fastScrollTextColor android:fastScrollTextColor}</code></td><td>Text color for the fast scroll index overlay.</td></tr>
     * <tr><td><code>{@link #Theme_windowCloseOnTouchOutside android:windowCloseOnTouchOutside}</code></td><td>Control whether a container should automatically close itself if
     * the user touches outside of it.</td></tr>
     * <tr><td><code>{@link #Theme_datePickerStyle android:datePickerStyle}</code></td><td>The DatePicker style.</td></tr>
     * <tr><td><code>{@link #Theme_calendarViewStyle android:calendarViewStyle}</code></td><td>The CalendarView style.</td></tr>
     * <tr><td><code>{@link #Theme_textEditSidePasteWindowLayout android:textEditSidePasteWindowLayout}</code></td><td>Used instead of textEditPasteWindowLayout when the window is moved on the side of the
     * insertion cursor because it would be clipped if it were positioned on top.</td></tr>
     * <tr><td><code>{@link #Theme_textEditSideNoPasteWindowLayout android:textEditSideNoPasteWindowLayout}</code></td><td>Variation of textEditSidePasteWindowLayout displayed when the clipboard is empty.</td></tr>
     * <tr><td><code>{@link #Theme_actionMenuTextAppearance android:actionMenuTextAppearance}</code></td><td>TextAppearance style that will be applied to text that
     * appears within action menu items.</td></tr>
     * <tr><td><code>{@link #Theme_actionMenuTextColor android:actionMenuTextColor}</code></td><td>Color for text that appears within action menu items.</td></tr>
     * <tr><td><code>{@link #Theme_switchPreferenceStyle android:switchPreferenceStyle}</code></td><td>Default style for switch preferences.</td></tr>
     * <tr><td><code>{@link #Theme_textSuggestionsWindowStyle android:textSuggestionsWindowStyle}</code></td><td>Reference to a style that will be used for the window containing a list of possible
     * text suggestions in an EditText.</td></tr>
     * <tr><td><code>{@link #Theme_textEditSuggestionItemLayout android:textEditSuggestionItemLayout}</code></td><td>Layout of the TextView item that will populate the suggestion popup window.</td></tr>
     * <tr><td><code>{@link #Theme_actionModeSelectAllDrawable android:actionModeSelectAllDrawable}</code></td><td>Drawable to use for the Select all action button in Contextual Action Bar.</td></tr>
     * <tr><td><code>{@link #Theme_listPreferredItemHeightLarge android:listPreferredItemHeightLarge}</code></td><td>A larger, more robust list item height.</td></tr>
     * <tr><td><code>{@link #Theme_listPreferredItemHeightSmall android:listPreferredItemHeightSmall}</code></td><td>A smaller, sleeker list item height.</td></tr>
     * <tr><td><code>{@link #Theme_actionBarSplitStyle android:actionBarSplitStyle}</code></td><td>Reference to a style for the split Action Bar.</td></tr>
     * <tr><td><code>{@link #Theme_colorPressedHighlight android:colorPressedHighlight}</code></td><td>Default highlight color for items that are pressed.</td></tr>
     * <tr><td><code>{@link #Theme_colorLongPressedHighlight android:colorLongPressedHighlight}</code></td><td>Default highlight color for items that are long-pressed.</td></tr>
     * <tr><td><code>{@link #Theme_colorFocusedHighlight android:colorFocusedHighlight}</code></td><td>Default highlight color for items that are
     * focused.</td></tr>
     * <tr><td><code>{@link #Theme_colorActivatedHighlight android:colorActivatedHighlight}</code></td><td>Default highlight color for items that are
     * activated.</td></tr>
     * <tr><td><code>{@link #Theme_colorMultiSelectHighlight android:colorMultiSelectHighlight}</code></td><td>Default highlight color for items in multiple selection
     * mode.</td></tr>
     * <tr><td><code>{@link #Theme_actionModeStyle android:actionModeStyle}</code></td><td>Reference to a style for the Action Mode.</td></tr>
     * <tr><td><code>{@link #Theme_actionBarWidgetTheme android:actionBarWidgetTheme}</code></td><td>Reference to a theme that should be used to inflate widgets
     * and layouts destined for the action bar.</td></tr>
     * <tr><td><code>{@link #Theme_actionBarDivider android:actionBarDivider}</code></td><td>Custom divider drawable to use for elements in the action bar.</td></tr>
     * <tr><td><code>{@link #Theme_actionBarItemBackground android:actionBarItemBackground}</code></td><td>Custom item state list drawable background for action bar items.</td></tr>
     * <tr><td><code>{@link #Theme_actionModeSplitBackground android:actionModeSplitBackground}</code></td><td>Background drawable to use for action mode UI in the lower split bar.</td></tr>
     * <tr><td><code>{@link #Theme_textAppearanceListItem android:textAppearanceListItem}</code></td><td>The preferred TextAppearance for the primary text of list items.</td></tr>
     * <tr><td><code>{@link #Theme_textAppearanceListItemSmall android:textAppearanceListItemSmall}</code></td><td>The preferred TextAppearance for the primary text of small list items.</td></tr>
     * <tr><td><code>{@link #Theme_listPreferredItemPaddingLeft android:listPreferredItemPaddingLeft}</code></td><td>The preferred padding along the left edge of list items.</td></tr>
     * <tr><td><code>{@link #Theme_listPreferredItemPaddingRight android:listPreferredItemPaddingRight}</code></td><td>The preferred padding along the right edge of list items.</td></tr>
     * <tr><td><code>{@link #Theme_mediaRouteButtonStyle android:mediaRouteButtonStyle}</code></td><td>Default style for the MediaRouteButton widget.</td></tr>
     * <tr><td><code>{@link #Theme_listPreferredItemPaddingStart android:listPreferredItemPaddingStart}</code></td><td>The preferred padding along the start edge of list items.</td></tr>
     * <tr><td><code>{@link #Theme_listPreferredItemPaddingEnd android:listPreferredItemPaddingEnd}</code></td><td>The preferred padding along the end edge of list items.</td></tr>
     * <tr><td><code>{@link #Theme_presentationTheme android:presentationTheme}</code></td><td>Theme to use for presentations spawned from this theme.</td></tr>
     * <tr><td><code>{@link #Theme_checkedTextViewStyle android:checkedTextViewStyle}</code></td><td>Default CheckedTextView style.</td></tr>
     * <tr><td><code>{@link #Theme_windowOverscan android:windowOverscan}</code></td><td>Flag indicating whether this window should extend into overscan region.</td></tr>
     * <tr><td><code>{@link #Theme_windowTranslucentStatus android:windowTranslucentStatus}</code></td><td>Flag indicating whether this window requests a translucent status bar.</td></tr>
     * <tr><td><code>{@link #Theme_windowTranslucentNavigation android:windowTranslucentNavigation}</code></td><td>Flag indicating whether this window requests a translucent navigation bar.</td></tr>
     * <tr><td><code>{@link #Theme_windowSwipeToDismiss android:windowSwipeToDismiss}</code></td><td>Flag to indicate that a window can be swiped away to be dismissed.</td></tr>
     * <tr><td><code>{@link #Theme_windowContentTransitions android:windowContentTransitions}</code></td><td>Flag indicating whether this window requests that content changes be performed
     * as scene changes with transitions.</td></tr>
     * <tr><td><code>{@link #Theme_windowContentTransitionManager android:windowContentTransitionManager}</code></td><td>Reference to a TransitionManager XML resource defining the desired
     * transitions between different window content.</td></tr>
     * <tr><td><code>{@link #Theme_colorControlNormal android:colorControlNormal}</code></td><td>The color applied to framework controls in their normal state.</td></tr>
     * <tr><td><code>{@link #Theme_colorControlActivated android:colorControlActivated}</code></td><td>The color applied to framework controls in their activated (ex.</td></tr>
     * <tr><td><code>{@link #Theme_colorButtonNormal android:colorButtonNormal}</code></td><td>The color applied to framework buttons in their normal state.</td></tr>
     * <tr><td><code>{@link #Theme_colorControlHighlight android:colorControlHighlight}</code></td><td>The color applied to framework control highlights (ex.</td></tr>
     * <tr><td><code>{@link #Theme_actionBarTheme android:actionBarTheme}</code></td><td>Reference to a theme that should be used to inflate the
     * action bar.</td></tr>
     * <tr><td><code>{@link #Theme_textAppearanceListItemSecondary android:textAppearanceListItemSecondary}</code></td><td>The preferred TextAppearance for the secondary text of list items.</td></tr>
     * <tr><td><code>{@link #Theme_colorPrimary android:colorPrimary}</code></td><td>The primary branding color for the app.</td></tr>
     * <tr><td><code>{@link #Theme_colorPrimaryDark android:colorPrimaryDark}</code></td><td>Dark variant of the primary branding color.</td></tr>
     * <tr><td><code>{@link #Theme_colorAccent android:colorAccent}</code></td><td>Bright complement to the primary branding color.</td></tr>
     * <tr><td><code>{@link #Theme_windowEnterTransition android:windowEnterTransition}</code></td><td>Reference to a Transition XML resource defining the desired Transition
     * used to move Views into the initial Window's content Scene.</td></tr>
     * <tr><td><code>{@link #Theme_windowExitTransition android:windowExitTransition}</code></td><td>Reference to a Transition XML resource defining the desired Transition
     * used to move Views out of the Window's content Scene when launching a new Activity.</td></tr>
     * <tr><td><code>{@link #Theme_windowSharedElementEnterTransition android:windowSharedElementEnterTransition}</code></td><td>Reference to a Transition XML resource defining the desired Transition
     * used to move shared elements transferred into the Window's initial content Scene.</td></tr>
     * <tr><td><code>{@link #Theme_windowSharedElementExitTransition android:windowSharedElementExitTransition}</code></td><td>Reference to a Transition XML resource defining the desired Transition
     * used when starting a new Activity to move shared elements prior to transferring
     * to the called Activity.</td></tr>
     * <tr><td><code>{@link #Theme_windowAllowReturnTransitionOverlap android:windowAllowReturnTransitionOverlap}</code></td><td>Flag indicating whether this Window's transition should overlap with
     * the exiting transition of the called Activity when the called Activity
     * finishes.</td></tr>
     * <tr><td><code>{@link #Theme_windowAllowEnterTransitionOverlap android:windowAllowEnterTransitionOverlap}</code></td><td>Flag indicating whether this Window's transition should overlap with
     * the exiting transition of the calling Activity.</td></tr>
     * <tr><td><code>{@link #Theme_stackViewStyle android:stackViewStyle}</code></td><td>Default StackView style.</td></tr>
     * <tr><td><code>{@link #Theme_switchStyle android:switchStyle}</code></td><td>Default style for the Switch widget.</td></tr>
     * <tr><td><code>{@link #Theme_actionOverflowMenuStyle android:actionOverflowMenuStyle}</code></td><td>Reference to a style for the Action Bar menu.</td></tr>
     * <tr><td><code>{@link #Theme_selectableItemBackgroundBorderless android:selectableItemBackgroundBorderless}</code></td><td>Background drawable for borderless standalone items that need focus/pressed states.</td></tr>
     * <tr><td><code>{@link #Theme_windowTransitionBackgroundFadeDuration android:windowTransitionBackgroundFadeDuration}</code></td><td>The duration, in milliseconds, of the window background fade duration
     * when transitioning into or away from an Activity when called with an
     * Activity Transition.</td></tr>
     * <tr><td><code>{@link #Theme_actionModeShareDrawable android:actionModeShareDrawable}</code></td><td>Drawable to use for the Share action button in WebView selection action modes.</td></tr>
     * <tr><td><code>{@link #Theme_actionModeFindDrawable android:actionModeFindDrawable}</code></td><td>Drawable to use for the Find action button in WebView selection action modes.</td></tr>
     * <tr><td><code>{@link #Theme_actionModeWebSearchDrawable android:actionModeWebSearchDrawable}</code></td><td>Drawable to use for the Web Search action button in WebView selection action modes.</td></tr>
     * <tr><td><code>{@link #Theme_searchViewStyle android:searchViewStyle}</code></td><td>Style for the search query widget.</td></tr>
     * <tr><td><code>{@link #Theme_buttonBarPositiveButtonStyle android:buttonBarPositiveButtonStyle}</code></td><td>Style for the "positive" buttons within button bars.</td></tr>
     * <tr><td><code>{@link #Theme_buttonBarNeutralButtonStyle android:buttonBarNeutralButtonStyle}</code></td><td>Style for the "neutral" buttons within button bars.</td></tr>
     * <tr><td><code>{@link #Theme_buttonBarNegativeButtonStyle android:buttonBarNegativeButtonStyle}</code></td><td>Style for the "negative" buttons within button bars.</td></tr>
     * <tr><td><code>{@link #Theme_actionBarPopupTheme android:actionBarPopupTheme}</code></td><td>Reference to a theme that should be used to inflate popups
     * shown by widgets in the action bar.</td></tr>
     * <tr><td><code>{@link #Theme_timePickerStyle android:timePickerStyle}</code></td><td>The TimePicker style.</td></tr>
     * <tr><td><code>{@link #Theme_timePickerDialogTheme android:timePickerDialogTheme}</code></td><td>The TimePicker dialog theme.</td></tr>
     * <tr><td><code>{@link #Theme_toolbarStyle android:toolbarStyle}</code></td><td>Default Toolbar style.</td></tr>
     * <tr><td><code>{@link #Theme_datePickerDialogTheme android:datePickerDialogTheme}</code></td><td>The DatePicker dialog theme.</td></tr>
     * <tr><td><code>{@link #Theme_windowReturnTransition android:windowReturnTransition}</code></td><td>Reference to a Transition XML resource defining the desired Transition
     * used to move Views out of the scene when the Window is
     * preparing to close.</td></tr>
     * <tr><td><code>{@link #Theme_windowReenterTransition android:windowReenterTransition}</code></td><td>Reference to a Transition XML resource defining the desired Transition
     * used to move Views in to the scene when returning from a previously-started Activity.</td></tr>
     * <tr><td><code>{@link #Theme_windowSharedElementReturnTransition android:windowSharedElementReturnTransition}</code></td><td>Reference to a Transition XML resource defining the desired Transition
     * used to move shared elements transferred back to a calling Activity.</td></tr>
     * <tr><td><code>{@link #Theme_windowSharedElementReenterTransition android:windowSharedElementReenterTransition}</code></td><td>Reference to a Transition XML resource defining the desired Transition
     * used for shared elements transferred back to a calling Activity.</td></tr>
     * <tr><td><code>{@link #Theme_windowSharedElementsUseOverlay android:windowSharedElementsUseOverlay}</code></td><td>Indicates whether or not shared elements should use an overlay
     * during transitions.</td></tr>
     * <tr><td><code>{@link #Theme_ambientShadowAlpha android:ambientShadowAlpha}</code></td><td>Alpha value of the ambient shadow projected by elevated views, between 0 and 1.</td></tr>
     * <tr><td><code>{@link #Theme_spotShadowAlpha android:spotShadowAlpha}</code></td><td>Alpha value of the spot shadow projected by elevated views, between 0 and 1.</td></tr>
     * <tr><td><code>{@link #Theme_windowActivityTransitions android:windowActivityTransitions}</code></td><td>Flag indicating whether this window allows Activity Transitions.</td></tr>
     * <tr><td><code>{@link #Theme_colorEdgeEffect android:colorEdgeEffect}</code></td><td>The color applied to the edge effect on scrolling containers.</td></tr>
     * <tr><td><code>{@link #Theme_dialogPreferredPadding android:dialogPreferredPadding}</code></td><td>Preferred padding for dialog content.</td></tr>
     * <tr><td><code>{@link #Theme_colorBackgroundFloating android:colorBackgroundFloating}</code></td><td>Default color of background imagery for floating components, ex.</td></tr>
     * <tr><td><code>{@link #Theme_fingerprintAuthDrawable android:fingerprintAuthDrawable}</code></td><td>Icon that should be used to indicate that an app is waiting for a fingerprint scan.</td></tr>
     * <tr><td><code>{@link #Theme_listMenuViewStyle android:listMenuViewStyle}</code></td><td>Default menu-style ListView style.</td></tr>
     * <tr><td><code>{@link #Theme_contextPopupMenuStyle android:contextPopupMenuStyle}</code></td><td>Default context menu PopupMenu style.</td></tr>
     * <tr><td><code>{@link #Theme_textAppearancePopupMenuHeader android:textAppearancePopupMenuHeader}</code></td><td>Text color, typeface, size, and style for header text inside of a popup menu.</td></tr>
     * <tr><td><code>{@link #Theme_windowBackgroundFallback android:windowBackgroundFallback}</code></td><td>Drawable to draw selectively within the inset areas when the windowBackground
     * has been set to null.</td></tr>
     * <tr><td><code>{@link #Theme_preferenceFragmentStyle android:preferenceFragmentStyle}</code></td><td>Default style for Headers pane in PreferenceActivity.</td></tr>
     * <tr><td><code>{@link #Theme_numberPickerStyle android:numberPickerStyle}</code></td><td>NumberPicker style.</td></tr>
     * <tr><td><code>{@link #Theme_colorSecondary android:colorSecondary}</code></td><td>The secondary branding color for the app.</td></tr>
     * <tr><td><code>{@link #Theme_colorError android:colorError}</code></td><td>Color used for error states and things that need to be drawn to
     * the users attention..</td></tr>
     * <tr><td><code>{@link #Theme_primaryContentAlpha android:primaryContentAlpha}</code></td><td>The alpha applied to the foreground color to create the primary text color.</td></tr>
     * <tr><td><code>{@link #Theme_secondaryContentAlpha android:secondaryContentAlpha}</code></td><td>The alpha applied to the foreground color to create the secondary text color.</td></tr>
     * <tr><td><code>{@link #Theme_autofilledHighlight android:autofilledHighlight}</code></td><td>Drawable to be drawn over the view to mark it as autofilled</td></tr>
     * <tr><td><code>{@link #Theme_dialogCornerRadius android:dialogCornerRadius}</code></td><td>Corner radius of dialogs.</td></tr>
     * <tr><td><code>{@link #Theme_buttonCornerRadius android:buttonCornerRadius}</code></td><td>Corner radius of buttons.</td></tr>
     * <tr><td><code>{@link #Theme_forceDarkAllowed android:forceDarkAllowed}</code></td><td><p>Whether or not the force dark feature is allowed to be applied to this View.</td></tr>
     * <tr><td><code>{@link #Theme_isLightTheme android:isLightTheme}</code></td><td>Specifies that a theme has a light background with dark text on top.</td></tr>
     * <tr><td><code>{@link #Theme_windowBlurBehindRadius android:windowBlurBehindRadius}</code></td><td>When windowBlurBehindEnabled is set, this is the amount of blur to apply
     * behind the window.</td></tr>
     * <tr><td><code>{@link #Theme_windowBlurBehindEnabled android:windowBlurBehindEnabled}</code></td><td>If set, everything behind the window will be blurred with radius
     * windowBackgroundBlurRadius.</td></tr>
     * <tr><td><code>{@link #Theme_windowBackgroundBlurRadius android:windowBackgroundBlurRadius}</code></td><td>Blur the screen behind the window with the bounds of the window.</td></tr>
     * <tr><td><code>{@link #Theme_effectColor android:effectColor}</code></td><td>Color applied to effects.</td></tr>
     * </table>
     * @see #Theme_colorForeground
     * @see #Theme_colorBackground
     * @see #Theme_backgroundDimAmount
     * @see #Theme_disabledAlpha
     * @see #Theme_textAppearance
     * @see #Theme_textAppearanceInverse
     * @see #Theme_textColorPrimary
     * @see #Theme_textColorPrimaryDisableOnly
     * @see #Theme_textColorSecondary
     * @see #Theme_textColorPrimaryInverse
     * @see #Theme_textColorSecondaryInverse
     * @see #Theme_textColorPrimaryNoDisable
     * @see #Theme_textColorSecondaryNoDisable
     * @see #Theme_textColorPrimaryInverseNoDisable
     * @see #Theme_textColorSecondaryInverseNoDisable
     * @see #Theme_textColorHintInverse
     * @see #Theme_textAppearanceLarge
     * @see #Theme_textAppearanceMedium
     * @see #Theme_textAppearanceSmall
     * @see #Theme_textAppearanceLargeInverse
     * @see #Theme_textAppearanceMediumInverse
     * @see #Theme_textAppearanceSmallInverse
     * @see #Theme_textCheckMark
     * @see #Theme_textCheckMarkInverse
     * @see #Theme_buttonStyle
     * @see #Theme_buttonStyleSmall
     * @see #Theme_buttonStyleInset
     * @see #Theme_buttonStyleToggle
     * @see #Theme_galleryItemBackground
     * @see #Theme_listPreferredItemHeight
     * @see #Theme_expandableListPreferredItemPaddingLeft
     * @see #Theme_expandableListPreferredChildPaddingLeft
     * @see #Theme_expandableListPreferredItemIndicatorLeft
     * @see #Theme_expandableListPreferredItemIndicatorRight
     * @see #Theme_expandableListPreferredChildIndicatorLeft
     * @see #Theme_expandableListPreferredChildIndicatorRight
     * @see #Theme_windowBackground
     * @see #Theme_windowFrame
     * @see #Theme_windowNoTitle
     * @see #Theme_windowIsFloating
     * @see #Theme_windowIsTranslucent
     * @see #Theme_windowContentOverlay
     * @see #Theme_windowTitleSize
     * @see #Theme_windowTitleStyle
     * @see #Theme_windowTitleBackgroundStyle
     * @see #Theme_alertDialogStyle
     * @see #Theme_panelBackground
     * @see #Theme_panelFullBackground
     * @see #Theme_panelColorForeground
     * @see #Theme_panelColorBackground
     * @see #Theme_panelTextAppearance
     * @see #Theme_absListViewStyle
     * @see #Theme_autoCompleteTextViewStyle
     * @see #Theme_checkboxStyle
     * @see #Theme_dropDownListViewStyle
     * @see #Theme_editTextStyle
     * @see #Theme_expandableListViewStyle
     * @see #Theme_galleryStyle
     * @see #Theme_gridViewStyle
     * @see #Theme_imageButtonStyle
     * @see #Theme_imageWellStyle
     * @see #Theme_listViewStyle
     * @see #Theme_listViewWhiteStyle
     * @see #Theme_popupWindowStyle
     * @see #Theme_progressBarStyle
     * @see #Theme_progressBarStyleHorizontal
     * @see #Theme_progressBarStyleSmall
     * @see #Theme_progressBarStyleLarge
     * @see #Theme_seekBarStyle
     * @see #Theme_ratingBarStyle
     * @see #Theme_ratingBarStyleSmall
     * @see #Theme_radioButtonStyle
     * @see #Theme_scrollViewStyle
     * @see #Theme_spinnerStyle
     * @see #Theme_starStyle
     * @see #Theme_tabWidgetStyle
     * @see #Theme_textViewStyle
     * @see #Theme_webViewStyle
     * @see #Theme_dropDownItemStyle
     * @see #Theme_spinnerDropDownItemStyle
     * @see #Theme_dropDownHintAppearance
     * @see #Theme_spinnerItemStyle
     * @see #Theme_mapViewStyle
     * @see #Theme_preferenceScreenStyle
     * @see #Theme_preferenceCategoryStyle
     * @see #Theme_preferenceInformationStyle
     * @see #Theme_preferenceStyle
     * @see #Theme_checkBoxPreferenceStyle
     * @see #Theme_yesNoPreferenceStyle
     * @see #Theme_dialogPreferenceStyle
     * @see #Theme_editTextPreferenceStyle
     * @see #Theme_ringtonePreferenceStyle
     * @see #Theme_preferenceLayoutChild
     * @see #Theme_windowAnimationStyle
     * @see #Theme_colorForegroundInverse
     * @see #Theme_textAppearanceButton
     * @see #Theme_listSeparatorTextViewStyle
     * @see #Theme_windowFullscreen
     * @see #Theme_progressBarStyleSmallTitle
     * @see #Theme_ratingBarStyleIndicator
     * @see #Theme_textColorTertiary
     * @see #Theme_textColorTertiaryInverse
     * @see #Theme_listDivider
     * @see #Theme_listChoiceIndicatorSingle
     * @see #Theme_listChoiceIndicatorMultiple
     * @see #Theme_windowNoDisplay
     * @see #Theme_backgroundDimEnabled
     * @see #Theme_windowDisablePreview
     * @see #Theme_windowSoftInputMode
     * @see #Theme_candidatesTextStyleSpans
     * @see #Theme_progressBarStyleInverse
     * @see #Theme_progressBarStyleSmallInverse
     * @see #Theme_progressBarStyleLargeInverse
     * @see #Theme_textColorPrimaryInverseDisableOnly
     * @see #Theme_windowShowWallpaper
     * @see #Theme_textAppearanceSearchResultSubtitle
     * @see #Theme_textAppearanceSearchResultTitle
     * @see #Theme_colorBackgroundCacheHint
     * @see #Theme_quickContactBadgeStyleWindowSmall
     * @see #Theme_quickContactBadgeStyleWindowMedium
     * @see #Theme_quickContactBadgeStyleWindowLarge
     * @see #Theme_quickContactBadgeStyleSmallWindowSmall
     * @see #Theme_quickContactBadgeStyleSmallWindowMedium
     * @see #Theme_quickContactBadgeStyleSmallWindowLarge
     * @see #Theme_expandableListViewWhiteStyle
     * @see #Theme_webTextViewStyle
     * @see #Theme_textSelectHandleLeft
     * @see #Theme_textSelectHandleRight
     * @see #Theme_textSelectHandle
     * @see #Theme_textSelectHandleWindowStyle
     * @see #Theme_windowActionBar
     * @see #Theme_actionBarStyle
     * @see #Theme_dropDownSpinnerStyle
     * @see #Theme_actionDropDownStyle
     * @see #Theme_actionButtonStyle
     * @see #Theme_actionModeBackground
     * @see #Theme_actionModeCloseDrawable
     * @see #Theme_windowActionModeOverlay
     * @see #Theme_windowActionBarOverlay
     * @see #Theme_actionBarSize
     * @see #Theme_listChoiceBackgroundIndicator
     * @see #Theme_actionBarTabStyle
     * @see #Theme_actionBarTabBarStyle
     * @see #Theme_actionBarTabTextStyle
     * @see #Theme_actionOverflowButtonStyle
     * @see #Theme_actionModeCloseButtonStyle
     * @see #Theme_activatedBackgroundIndicator
     * @see #Theme_listPopupWindowStyle
     * @see #Theme_popupMenuStyle
     * @see #Theme_textAppearanceLargePopupMenu
     * @see #Theme_textAppearanceSmallPopupMenu
     * @see #Theme_listDividerAlertDialog
     * @see #Theme_textColorAlertDialogListItem
     * @see #Theme_dialogTheme
     * @see #Theme_alertDialogTheme
     * @see #Theme_dividerVertical
     * @see #Theme_homeAsUpIndicator
     * @see #Theme_selectableItemBackground
     * @see #Theme_actionModeCutDrawable
     * @see #Theme_actionModeCopyDrawable
     * @see #Theme_actionModePasteDrawable
     * @see #Theme_textEditPasteWindowLayout
     * @see #Theme_textEditNoPasteWindowLayout
     * @see #Theme_windowEnableSplitTouch
     * @see #Theme_borderlessButtonStyle
     * @see #Theme_dividerHorizontal
     * @see #Theme_buttonBarStyle
     * @see #Theme_buttonBarButtonStyle
     * @see #Theme_segmentedButtonStyle
     * @see #Theme_fastScrollThumbDrawable
     * @see #Theme_fastScrollPreviewBackgroundLeft
     * @see #Theme_fastScrollPreviewBackgroundRight
     * @see #Theme_fastScrollTrackDrawable
     * @see #Theme_fastScrollOverlayPosition
     * @see #Theme_detailsElementBackground
     * @see #Theme_textColorHighlightInverse
     * @see #Theme_textColorLinkInverse
     * @see #Theme_editTextColor
     * @see #Theme_editTextBackground
     * @see #Theme_horizontalScrollViewStyle
     * @see #Theme_alertDialogIcon
     * @see #Theme_fastScrollTextColor
     * @see #Theme_windowCloseOnTouchOutside
     * @see #Theme_datePickerStyle
     * @see #Theme_calendarViewStyle
     * @see #Theme_textEditSidePasteWindowLayout
     * @see #Theme_textEditSideNoPasteWindowLayout
     * @see #Theme_actionMenuTextAppearance
     * @see #Theme_actionMenuTextColor
     * @see #Theme_switchPreferenceStyle
     * @see #Theme_textSuggestionsWindowStyle
     * @see #Theme_textEditSuggestionItemLayout
     * @see #Theme_actionModeSelectAllDrawable
     * @see #Theme_listPreferredItemHeightLarge
     * @see #Theme_listPreferredItemHeightSmall
     * @see #Theme_actionBarSplitStyle
     * @see #Theme_colorPressedHighlight
     * @see #Theme_colorLongPressedHighlight
     * @see #Theme_colorFocusedHighlight
     * @see #Theme_colorActivatedHighlight
     * @see #Theme_colorMultiSelectHighlight
     * @see #Theme_actionModeStyle
     * @see #Theme_actionBarWidgetTheme
     * @see #Theme_actionBarDivider
     * @see #Theme_actionBarItemBackground
     * @see #Theme_actionModeSplitBackground
     * @see #Theme_textAppearanceListItem
     * @see #Theme_textAppearanceListItemSmall
     * @see #Theme_listPreferredItemPaddingLeft
     * @see #Theme_listPreferredItemPaddingRight
     * @see #Theme_mediaRouteButtonStyle
     * @see #Theme_listPreferredItemPaddingStart
     * @see #Theme_listPreferredItemPaddingEnd
     * @see #Theme_presentationTheme
     * @see #Theme_checkedTextViewStyle
     * @see #Theme_windowOverscan
     * @see #Theme_windowTranslucentStatus
     * @see #Theme_windowTranslucentNavigation
     * @see #Theme_windowSwipeToDismiss
     * @see #Theme_windowContentTransitions
     * @see #Theme_windowContentTransitionManager
     * @see #Theme_colorControlNormal
     * @see #Theme_colorControlActivated
     * @see #Theme_colorButtonNormal
     * @see #Theme_colorControlHighlight
     * @see #Theme_actionBarTheme
     * @see #Theme_textAppearanceListItemSecondary
     * @see #Theme_colorPrimary
     * @see #Theme_colorPrimaryDark
     * @see #Theme_colorAccent
     * @see #Theme_windowEnterTransition
     * @see #Theme_windowExitTransition
     * @see #Theme_windowSharedElementEnterTransition
     * @see #Theme_windowSharedElementExitTransition
     * @see #Theme_windowAllowReturnTransitionOverlap
     * @see #Theme_windowAllowEnterTransitionOverlap
     * @see #Theme_stackViewStyle
     * @see #Theme_switchStyle
     * @see #Theme_actionOverflowMenuStyle
     * @see #Theme_selectableItemBackgroundBorderless
     * @see #Theme_windowTransitionBackgroundFadeDuration
     * @see #Theme_actionModeShareDrawable
     * @see #Theme_actionModeFindDrawable
     * @see #Theme_actionModeWebSearchDrawable
     * @see #Theme_searchViewStyle
     * @see #Theme_buttonBarPositiveButtonStyle
     * @see #Theme_buttonBarNeutralButtonStyle
     * @see #Theme_buttonBarNegativeButtonStyle
     * @see #Theme_actionBarPopupTheme
     * @see #Theme_timePickerStyle
     * @see #Theme_timePickerDialogTheme
     * @see #Theme_toolbarStyle
     * @see #Theme_datePickerDialogTheme
     * @see #Theme_windowReturnTransition
     * @see #Theme_windowReenterTransition
     * @see #Theme_windowSharedElementReturnTransition
     * @see #Theme_windowSharedElementReenterTransition
     * @see #Theme_windowSharedElementsUseOverlay
     * @see #Theme_ambientShadowAlpha
     * @see #Theme_spotShadowAlpha
     * @see #Theme_windowActivityTransitions
     * @see #Theme_colorEdgeEffect
     * @see #Theme_dialogPreferredPadding
     * @see #Theme_colorBackgroundFloating
     * @see #Theme_fingerprintAuthDrawable
     * @see #Theme_listMenuViewStyle
     * @see #Theme_contextPopupMenuStyle
     * @see #Theme_textAppearancePopupMenuHeader
     * @see #Theme_windowBackgroundFallback
     * @see #Theme_preferenceFragmentStyle
     * @see #Theme_numberPickerStyle
     * @see #Theme_colorSecondary
     * @see #Theme_colorError
     * @see #Theme_primaryContentAlpha
     * @see #Theme_secondaryContentAlpha
     * @see #Theme_autofilledHighlight
     * @see #Theme_dialogCornerRadius
     * @see #Theme_buttonCornerRadius
     * @see #Theme_forceDarkAllowed
     * @see #Theme_isLightTheme
     * @see #Theme_windowBlurBehindRadius
     * @see #Theme_windowBlurBehindEnabled
     * @see #Theme_windowBackgroundBlurRadius
     * @see #Theme_effectColor
     */
    public static final int[] Theme={
      0x01010030, 0x01010031, 0x01010032, 0x01010033, 
      0x01010034, 0x01010035, 0x01010036, 0x01010037, 
      0x01010038, 0x01010039, 0x0101003a, 0x0101003b, 
      0x0101003c, 0x0101003d, 0x0101003e, 0x0101003f, 
      0x01010040, 0x01010041, 0x01010042, 0x01010043, 
      0x01010044, 0x01010045, 0x01010046, 0x01010047, 
      0x01010048, 0x01010049, 0x0101004a, 0x0101004b, 
      0x0101004c, 0x0101004d, 0x0101004e, 0x0101004f, 
      0x01010050, 0x01010051, 0x01010052, 0x01010053, 
      0x01010054, 0x01010055, 0x01010056, 0x01010057, 
      0x01010058, 0x01010059, 0x0101005a, 0x0101005b, 
      0x0101005c, 0x0101005d, 0x0101005e, 0x0101005f, 
      0x01010060, 0x01010061, 0x01010062, 0x0101006a, 
      0x0101006b, 0x0101006c, 0x0101006d, 0x0101006e, 
      0x0101006f, 0x01010070, 0x01010071, 0x01010072, 
      0x01010073, 0x01010074, 0x01010075, 0x01010076, 
      0x01010077, 0x01010078, 0x01010079, 0x0101007a, 
      0x0101007b, 0x0101007c, 0x0101007d, 0x0101007e, 
      0x01010080, 0x01010081, 0x01010082, 0x01010083, 
      0x01010084, 0x01010085, 0x01010086, 0x01010087, 
      0x01010088, 0x01010089, 0x0101008a, 0x0101008b, 
      0x0101008c, 0x0101008d, 0x0101008e, 0x0101008f, 
      0x01010090, 0x01010091, 0x01010092, 0x01010093, 
      0x01010094, 0x010100ae, 0x01010206, 0x01010207, 
      0x01010208, 0x0101020d, 0x0101020f, 0x01010210, 
      0x01010212, 0x01010213, 0x01010214, 0x01010219, 
      0x0101021a, 0x0101021e, 0x0101021f, 0x01010222, 
      0x0101022b, 0x01010230, 0x01010287, 0x01010288, 
      0x01010289, 0x0101028b, 0x01010292, 0x010102a0, 
      0x010102a1, 0x010102ab, 0x010102ae, 0x010102af, 
      0x010102b0, 0x010102b1, 0x010102b2, 0x010102b3, 
      0x010102b6, 0x010102b9, 0x010102c5, 0x010102c6, 
      0x010102c7, 0x010102c8, 0x010102cd, 0x010102ce, 
      0x010102d6, 0x010102d7, 0x010102d8, 0x010102db, 
      0x010102dc, 0x010102dd, 0x010102e4, 0x010102eb, 
      0x010102f0, 0x010102f3, 0x010102f4, 0x010102f5, 
      0x010102f6, 0x010102f7, 0x010102fd, 0x010102ff, 
      0x01010300, 0x01010301, 0x01010302, 0x01010305, 
      0x01010306, 0x01010308, 0x01010309, 0x0101030a, 
      0x0101030b, 0x0101030e, 0x01010311, 0x01010312, 
      0x01010313, 0x01010314, 0x01010315, 0x01010317, 
      0x0101032b, 0x0101032c, 0x0101032e, 0x0101032f, 
      0x01010330, 0x01010336, 0x01010337, 0x01010338, 
      0x01010339, 0x0101033a, 0x0101034e, 0x0101034f, 
      0x01010350, 0x01010351, 0x01010352, 0x01010353, 
      0x01010355, 0x01010359, 0x0101035b, 0x0101035c, 
      0x0101035d, 0x0101035e, 0x0101035f, 0x01010360, 
      0x01010361, 0x0101036d, 0x01010373, 0x01010374, 
      0x0101037e, 0x01010386, 0x01010387, 0x01010388, 
      0x0101038d, 0x0101038e, 0x0101038f, 0x01010390, 
      0x01010391, 0x01010394, 0x01010397, 0x0101039b, 
      0x0101039c, 0x0101039d, 0x0101039e, 0x0101039f, 
      0x010103a3, 0x010103a4, 0x010103ad, 0x010103bd, 
      0x010103be, 0x010103c0, 0x010103c8, 0x010103cf, 
      0x010103ef, 0x010103f0, 0x010103f3, 0x010103f8, 
      0x010103f9, 0x01010429, 0x0101042a, 0x0101042b, 
      0x0101042c, 0x01010431, 0x01010432, 0x01010433, 
      0x01010434, 0x01010435, 0x01010437, 0x01010438, 
      0x01010439, 0x0101043a, 0x0101043b, 0x0101043c, 
      0x0101043e, 0x0101043f, 0x01010444, 0x0101045c, 
      0x01010461, 0x01010479, 0x0101047a, 0x0101047b, 
      0x01010480, 0x01010489, 0x0101048a, 0x0101048b, 
      0x0101048d, 0x0101049d, 0x0101049e, 0x010104aa, 
      0x010104ac, 0x010104ae, 0x010104af, 0x010104b0, 
      0x010104b1, 0x010104bb, 0x010104be, 0x010104bf, 
      0x010104cd, 0x010104ce, 0x010104d3, 0x010104e2, 
      0x010104e8, 0x010104f2, 0x01010501, 0x01010502, 
      0x01010503, 0x01010506, 0x01010524, 0x01010530, 
      0x01010543, 0x01010552, 0x01010553, 0x01010568, 
      0x01010571, 0x01010575, 0x0101058c, 0x01010590, 
      0x0101061b, 0x0101061c, 0x0101062b, 0x01010649, 
      0x01120007, 0x01120008, 0x01120009, 0x0112000c, 
      0x0112000d, 0x01120013, 0x01120014, 0x01120015, 
      0x01120024, 0x01120025, 0x01120026, 0x01120027, 
      0x01120028, 0x01120029, 0x0112002a, 0x0112002b, 
      0x0112002c, 0x0112002d, 0x0112002e, 0x0112002f, 
      0x01120030, 0x01120031, 0x01120036, 0x01120038, 
      0x01120039, 0x0112003e, 0x01120043, 0x01120044, 
      0x01120047, 0x01120048, 0x01120049, 0x0112004a, 
      0x0112004b, 0x0112004c, 0x0112004d, 0x0112004e, 
      0x0112004f, 0x01120051, 0x01120058, 0x01120077, 
      0x01120078, 0x01120079, 0x01120082, 0x01120099, 
      0x0112009d, 0x0112009e, 0x0112009f, 0x011200bb, 
      0x011200bc, 0x011200bd, 0x011200be, 0x011200bf, 
      0x011200c0, 0x011200c1, 0x011200c5, 0x011200c7, 
      0x011200d4, 0x011200d5, 0x011200d6, 0x011200d7, 
      0x011200d8, 0x011200ea, 0x011200eb, 0x011200ec, 
      0x011200ed, 0x011200ee, 0x011200ef, 0x011200f0, 
      0x011200f1, 0x011200f2, 0x011200f3, 0x011200f4, 
      0x011200f5, 0x011200fd, 0x011200fe, 0x011200ff, 
      0x01120100, 0x01120107
    };
    /**
     * <p>
     * @attr description
     * Default color of foreground imagery.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:colorForeground
     */
    public static final int Theme_colorForeground=0;
    /**
     * <p>
     * @attr description
     * Default color of background imagery, ex. full-screen windows.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:colorBackground
     */
    public static final int Theme_colorBackground=1;
    /**
     * <p>
     * @attr description
     * Default background dim amount when a menu, dialog, or something similar pops up.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:backgroundDimAmount
     */
    public static final int Theme_backgroundDimAmount=2;
    /**
     * <p>
     * @attr description
     * Default disabled alpha for widgets that set enabled/disabled alpha programmatically.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:disabledAlpha
     */
    public static final int Theme_disabledAlpha=3;
    /**
     * <p>
     * @attr description
     * Default appearance of text: color, typeface, size, and style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textAppearance
     */
    public static final int Theme_textAppearance=4;
    /**
     * <p>
     * @attr description
     * Default appearance of text against an inverted background:
     * color, typeface, size, and style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textAppearanceInverse
     */
    public static final int Theme_textAppearanceInverse=5;
    /**
     * <p>
     * @attr description
     * The most prominent text color.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:textColorPrimary
     */
    public static final int Theme_textColorPrimary=6;
    /**
     * <p>
     * @attr description
     * Bright text color. Only differentiates based on the disabled state.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:textColorPrimaryDisableOnly
     */
    public static final int Theme_textColorPrimaryDisableOnly=7;
    /**
     * <p>
     * @attr description
     * Secondary text color.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:textColorSecondary
     */
    public static final int Theme_textColorSecondary=8;
    /**
     * <p>
     * @attr description
     * Primary inverse text color, useful for inverted backgrounds.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:textColorPrimaryInverse
     */
    public static final int Theme_textColorPrimaryInverse=9;
    /**
     * <p>
     * @attr description
     * Secondary inverse text color, useful for inverted backgrounds.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:textColorSecondaryInverse
     */
    public static final int Theme_textColorSecondaryInverse=10;
    /**
     * <p>
     * @attr description
     * Bright text color. This does not differentiate the disabled state. As an example,
     * buttons use this since they display the disabled state via the background and not the
     * foreground text color.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:textColorPrimaryNoDisable
     */
    public static final int Theme_textColorPrimaryNoDisable=11;
    /**
     * <p>
     * @attr description
     * Dim text color. This does not differentiate the disabled state.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:textColorSecondaryNoDisable
     */
    public static final int Theme_textColorSecondaryNoDisable=12;
    /**
     * <p>
     * @attr description
     * Bright inverse text color. This does not differentiate the disabled state.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:textColorPrimaryInverseNoDisable
     */
    public static final int Theme_textColorPrimaryInverseNoDisable=13;
    /**
     * <p>
     * @attr description
     * Dim inverse text color. This does not differentiate the disabled state.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:textColorSecondaryInverseNoDisable
     */
    public static final int Theme_textColorSecondaryInverseNoDisable=14;
    /**
     * <p>
     * @attr description
     * Inverse hint text color.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:textColorHintInverse
     */
    public static final int Theme_textColorHintInverse=15;
    /**
     * <p>
     * @attr description
     * Text color, typeface, size, and style for "large" text. Defaults to primary text color.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textAppearanceLarge
     */
    public static final int Theme_textAppearanceLarge=16;
    /**
     * <p>
     * @attr description
     * Text color, typeface, size, and style for "medium" text. Defaults to primary text color.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textAppearanceMedium
     */
    public static final int Theme_textAppearanceMedium=17;
    /**
     * <p>
     * @attr description
     * Text color, typeface, size, and style for "small" text. Defaults to secondary text color.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textAppearanceSmall
     */
    public static final int Theme_textAppearanceSmall=18;
    /**
     * <p>
     * @attr description
     * Text color, typeface, size, and style for "large" inverse text. Defaults to primary inverse text color.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textAppearanceLargeInverse
     */
    public static final int Theme_textAppearanceLargeInverse=19;
    /**
     * <p>
     * @attr description
     * Text color, typeface, size, and style for "medium" inverse text. Defaults to primary inverse text color.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textAppearanceMediumInverse
     */
    public static final int Theme_textAppearanceMediumInverse=20;
    /**
     * <p>
     * @attr description
     * Text color, typeface, size, and style for "small" inverse text. Defaults to secondary inverse text color.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textAppearanceSmallInverse
     */
    public static final int Theme_textAppearanceSmallInverse=21;
    /**
     * <p>
     * @attr description
     * Drawable to use for check marks.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textCheckMark
     */
    public static final int Theme_textCheckMark=22;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#textCheckMarkInverse}
     * attribute's value can be found in the {@link #Theme} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textCheckMarkInverse
     */
    public static final int Theme_textCheckMarkInverse=23;
    /**
     * <p>
     * @attr description
     * Normal Button style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:buttonStyle
     */
    public static final int Theme_buttonStyle=24;
    /**
     * <p>
     * @attr description
     * Small Button style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:buttonStyleSmall
     */
    public static final int Theme_buttonStyleSmall=25;
    /**
     * <p>
     * @attr description
     * Button style to inset into an EditText.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:buttonStyleInset
     */
    public static final int Theme_buttonStyleInset=26;
    /**
     * <p>
     * @attr description
     * ToggleButton style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:buttonStyleToggle
     */
    public static final int Theme_buttonStyleToggle=27;
    /**
     * <p>
     * @attr description
     * The preferred background for gallery items. This should be set
     * as the background of any Views you provide from the Adapter.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:galleryItemBackground
     */
    public static final int Theme_galleryItemBackground=28;
    /**
     * <p>
     * @attr description
     * The preferred list item height.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:listPreferredItemHeight
     */
    public static final int Theme_listPreferredItemHeight=29;
    /**
     * <p>
     * @attr description
     * The preferred left padding for an expandable list item (for child-specific layouts,
     * use expandableListPreferredChildPaddingLeft). This takes into account
     * the indicator that will be shown to next to the item.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:expandableListPreferredItemPaddingLeft
     */
    public static final int Theme_expandableListPreferredItemPaddingLeft=30;
    /**
     * <p>
     * @attr description
     * The preferred left padding for an expandable list item that is a child.
     * If this is not provided, it defaults to the expandableListPreferredItemPaddingLeft.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:expandableListPreferredChildPaddingLeft
     */
    public static final int Theme_expandableListPreferredChildPaddingLeft=31;
    /**
     * <p>
     * @attr description
     * The preferred left bound for an expandable list item's indicator. For a child-specific
     * indicator, use expandableListPreferredChildIndicatorLeft.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:expandableListPreferredItemIndicatorLeft
     */
    public static final int Theme_expandableListPreferredItemIndicatorLeft=32;
    /**
     * <p>
     * @attr description
     * The preferred right bound for an expandable list item's indicator. For a child-specific
     * indicator, use expandableListPreferredChildIndicatorRight.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:expandableListPreferredItemIndicatorRight
     */
    public static final int Theme_expandableListPreferredItemIndicatorRight=33;
    /**
     * <p>
     * @attr description
     * The preferred left bound for an expandable list child's indicator.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:expandableListPreferredChildIndicatorLeft
     */
    public static final int Theme_expandableListPreferredChildIndicatorLeft=34;
    /**
     * <p>
     * @attr description
     * The preferred right bound for an expandable list child's indicator.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:expandableListPreferredChildIndicatorRight
     */
    public static final int Theme_expandableListPreferredChildIndicatorRight=35;
    /**
     * <p>
     * @attr description
     * Drawable to use as the overall window background.  As of
     * {@link android.os.Build.VERSION_CODES#HONEYCOMB}, this may
     * be a selector that uses state_accelerated to pick a non-solid
     * color when running on devices that can draw such a bitmap
     * with complex compositing on top at 60fps.
     * <p>There are a few special considerations to use when setting this
     * drawable:
     * <ul>
     * <li> This information will be used to infer the pixel format
     * for your window's surface.  If the drawable has any
     * non-opaque pixels, your window will be translucent
     * (32 bpp).
     * <li> If you want to draw the entire background
     * yourself, you should set this drawable to some solid
     * color that closely matches that background (so the
     * system's preview of your window will match), and
     * then in code manually set your window's background to
     * null so it will not be drawn.
     * </ul>
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:windowBackground
     */
    public static final int Theme_windowBackground=36;
    /**
     * <p>
     * @attr description
     * Drawable to use as a frame around the window.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:windowFrame
     */
    public static final int Theme_windowFrame=37;
    /**
     * <p>
     * @attr description
     * Flag indicating whether there should be no title on this window.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowNoTitle
     */
    public static final int Theme_windowNoTitle=38;
    /**
     * <p>
     * @attr description
     * Flag indicating whether this is a floating window.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowIsFloating
     */
    public static final int Theme_windowIsFloating=39;
    /**
     * <p>
     * @attr description
     * Flag indicating whether this is a translucent window.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowIsTranslucent
     */
    public static final int Theme_windowIsTranslucent=40;
    /**
     * <p>
     * @attr description
     * This Drawable is overlaid over the foreground of the Window's content area, usually
     * to place a shadow below the title.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:windowContentOverlay
     */
    public static final int Theme_windowContentOverlay=41;
    /**
     * <p>
     * @attr description
     * The style resource to use for a window's title bar height.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:windowTitleSize
     */
    public static final int Theme_windowTitleSize=42;
    /**
     * <p>
     * @attr description
     * The style resource to use for a window's title text.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:windowTitleStyle
     */
    public static final int Theme_windowTitleStyle=43;
    /**
     * <p>
     * @attr description
     * The style resource to use for a window's title area.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:windowTitleBackgroundStyle
     */
    public static final int Theme_windowTitleBackgroundStyle=44;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#alertDialogStyle}
     * attribute's value can be found in the {@link #Theme} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:alertDialogStyle
     */
    public static final int Theme_alertDialogStyle=45;
    /**
     * <p>
     * @attr description
     * The background of a panel when it is inset from the left and right edges of the screen.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:panelBackground
     */
    public static final int Theme_panelBackground=46;
    /**
     * <p>
     * @attr description
     * The background of a panel when it extends to the left and right edges of the screen.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:panelFullBackground
     */
    public static final int Theme_panelFullBackground=47;
    /**
     * <p>
     * @attr description
     * Default color of foreground panel imagery.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:panelColorForeground
     */
    public static final int Theme_panelColorForeground=48;
    /**
     * <p>
     * @attr description
     * Color that matches (as closely as possible) the panel background.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:panelColorBackground
     */
    public static final int Theme_panelColorBackground=49;
    /**
     * <p>
     * @attr description
     * Default appearance of panel text.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:panelTextAppearance
     */
    public static final int Theme_panelTextAppearance=50;
    /**
     * <p>
     * @attr description
     * Default AbsListView style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:absListViewStyle
     */
    public static final int Theme_absListViewStyle=51;
    /**
     * <p>
     * @attr description
     * Default AutoCompleteTextView style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:autoCompleteTextViewStyle
     */
    public static final int Theme_autoCompleteTextViewStyle=52;
    /**
     * <p>
     * @attr description
     * Default Checkbox style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:checkboxStyle
     */
    public static final int Theme_checkboxStyle=53;
    /**
     * <p>
     * @attr description
     * Default ListView style for drop downs.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:dropDownListViewStyle
     */
    public static final int Theme_dropDownListViewStyle=54;
    /**
     * <p>
     * @attr description
     * Default EditText style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:editTextStyle
     */
    public static final int Theme_editTextStyle=55;
    /**
     * <p>
     * @attr description
     * Default ExpandableListView style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:expandableListViewStyle
     */
    public static final int Theme_expandableListViewStyle=56;
    /**
     * <p>
     * @attr description
     * Default Gallery style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:galleryStyle
     */
    public static final int Theme_galleryStyle=57;
    /**
     * <p>
     * @attr description
     * Default GridView style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:gridViewStyle
     */
    public static final int Theme_gridViewStyle=58;
    /**
     * <p>
     * @attr description
     * The style resource to use for an ImageButton.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:imageButtonStyle
     */
    public static final int Theme_imageButtonStyle=59;
    /**
     * <p>
     * @attr description
     * The style resource to use for an ImageButton that is an image well.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:imageWellStyle
     */
    public static final int Theme_imageWellStyle=60;
    /**
     * <p>
     * @attr description
     * Default ListView style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:listViewStyle
     */
    public static final int Theme_listViewStyle=61;
    /**
     * <p>
     * @attr description
     * ListView with white background.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:listViewWhiteStyle
     */
    public static final int Theme_listViewWhiteStyle=62;
    /**
     * <p>
     * @attr description
     * Default PopupWindow style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:popupWindowStyle
     */
    public static final int Theme_popupWindowStyle=63;
    /**
     * <p>
     * @attr description
     * Default ProgressBar style. This is a medium circular progress bar.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:progressBarStyle
     */
    public static final int Theme_progressBarStyle=64;
    /**
     * <p>
     * @attr description
     * Horizontal ProgressBar style. This is a horizontal progress bar.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:progressBarStyleHorizontal
     */
    public static final int Theme_progressBarStyleHorizontal=65;
    /**
     * <p>
     * @attr description
     * Small ProgressBar style. This is a small circular progress bar.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:progressBarStyleSmall
     */
    public static final int Theme_progressBarStyleSmall=66;
    /**
     * <p>
     * @attr description
     * Large ProgressBar style. This is a large circular progress bar.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:progressBarStyleLarge
     */
    public static final int Theme_progressBarStyleLarge=67;
    /**
     * <p>
     * @attr description
     * Default SeekBar style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:seekBarStyle
     */
    public static final int Theme_seekBarStyle=68;
    /**
     * <p>
     * @attr description
     * Default RatingBar style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:ratingBarStyle
     */
    public static final int Theme_ratingBarStyle=69;
    /**
     * <p>
     * @attr description
     * Small indicator RatingBar style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:ratingBarStyleSmall
     */
    public static final int Theme_ratingBarStyleSmall=70;
    /**
     * <p>
     * @attr description
     * Default RadioButton style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:radioButtonStyle
     */
    public static final int Theme_radioButtonStyle=71;
    /**
     * <p>
     * @attr description
     * Default ScrollView style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:scrollViewStyle
     */
    public static final int Theme_scrollViewStyle=72;
    /**
     * <p>
     * @attr description
     * Default Spinner style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:spinnerStyle
     */
    public static final int Theme_spinnerStyle=73;
    /**
     * <p>
     * @attr description
     * Default Star style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:starStyle
     */
    public static final int Theme_starStyle=74;
    /**
     * <p>
     * @attr description
     * Default TabWidget style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:tabWidgetStyle
     */
    public static final int Theme_tabWidgetStyle=75;
    /**
     * <p>
     * @attr description
     * Default TextView style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textViewStyle
     */
    public static final int Theme_textViewStyle=76;
    /**
     * <p>
     * @attr description
     * Default WebView style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:webViewStyle
     */
    public static final int Theme_webViewStyle=77;
    /**
     * <p>
     * @attr description
     * Default style for drop down items.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:dropDownItemStyle
     */
    public static final int Theme_dropDownItemStyle=78;
    /**
     * <p>
     * @attr description
     * Default style for spinner drop down items.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:spinnerDropDownItemStyle
     */
    public static final int Theme_spinnerDropDownItemStyle=79;
    /**
     * <p>
     * @attr description
     * Default style for drop down hints.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:dropDownHintAppearance
     */
    public static final int Theme_dropDownHintAppearance=80;
    /**
     * <p>
     * @attr description
     * Default spinner item style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:spinnerItemStyle
     */
    public static final int Theme_spinnerItemStyle=81;
    /**
     * <p>
     * @attr description
     * Default MapView style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:mapViewStyle
     */
    public static final int Theme_mapViewStyle=82;
    /**
     * <p>
     * @attr description
     * Default style for PreferenceScreen.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:preferenceScreenStyle
     */
    public static final int Theme_preferenceScreenStyle=83;
    /**
     * <p>
     * @attr description
     * Default style for PreferenceCategory.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:preferenceCategoryStyle
     */
    public static final int Theme_preferenceCategoryStyle=84;
    /**
     * <p>
     * @attr description
     * Default style for informational Preference.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:preferenceInformationStyle
     */
    public static final int Theme_preferenceInformationStyle=85;
    /**
     * <p>
     * @attr description
     * Default style for Preference.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:preferenceStyle
     */
    public static final int Theme_preferenceStyle=86;
    /**
     * <p>
     * @attr description
     * Default style for CheckBoxPreference.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:checkBoxPreferenceStyle
     */
    public static final int Theme_checkBoxPreferenceStyle=87;
    /**
     * <p>
     * @attr description
     * Default style for YesNoPreference.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:yesNoPreferenceStyle
     */
    public static final int Theme_yesNoPreferenceStyle=88;
    /**
     * <p>
     * @attr description
     * Default style for DialogPreference.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:dialogPreferenceStyle
     */
    public static final int Theme_dialogPreferenceStyle=89;
    /**
     * <p>
     * @attr description
     * Default style for EditTextPreference.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:editTextPreferenceStyle
     */
    public static final int Theme_editTextPreferenceStyle=90;
    /**
     * <p>
     * @attr description
     * Default style for RingtonePreference.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:ringtonePreferenceStyle
     */
    public static final int Theme_ringtonePreferenceStyle=91;
    /**
     * <p>
     * @attr description
     * The preference layout that has the child/tabbed effect.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:preferenceLayoutChild
     */
    public static final int Theme_preferenceLayoutChild=92;
    /**
     * <p>
     * @attr description
     * Reference to a style resource holding
     * the set of window animations to use, which can be
     * any of the attributes defined by
     * {@link android.R.styleable#WindowAnimation}.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:windowAnimationStyle
     */
    public static final int Theme_windowAnimationStyle=93;
    /**
     * <p>
     * @attr description
     * Default color of foreground imagery on an inverted background.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:colorForegroundInverse
     */
    public static final int Theme_colorForegroundInverse=94;
    /**
     * <p>
     * @attr description
     * Text color, typeface, size, and style for the text inside of a button.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textAppearanceButton
     */
    public static final int Theme_textAppearanceButton=95;
    /**
     * <p>
     * @attr description
     * TextView style for list separators.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:listSeparatorTextViewStyle
     */
    public static final int Theme_listSeparatorTextViewStyle=96;
    /**
     * <p>
     * @attr description
     * Flag indicating whether this window should fill the entire screen.  Corresponds
     * to {@link android.view.WindowManager.LayoutParams#FLAG_FULLSCREEN}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowFullscreen
     */
    public static final int Theme_windowFullscreen=97;
    /**
     * <p>
     * @attr description
     * Small ProgressBar in title style. This is a small circular progress bar that will be placed in title bars.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:progressBarStyleSmallTitle
     */
    public static final int Theme_progressBarStyleSmallTitle=98;
    /**
     * <p>
     * @attr description
     * Indicator RatingBar style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:ratingBarStyleIndicator
     */
    public static final int Theme_ratingBarStyleIndicator=99;
    /**
     * <p>
     * @attr description
     * Tertiary text color.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:textColorTertiary
     */
    public static final int Theme_textColorTertiary=100;
    /**
     * <p>
     * @attr description
     * Tertiary inverse text color, useful for inverted backgrounds.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:textColorTertiaryInverse
     */
    public static final int Theme_textColorTertiaryInverse=101;
    /**
     * <p>
     * @attr description
     * The drawable for the list divider.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:listDivider
     */
    public static final int Theme_listDivider=102;
    /**
     * <p>
     * @attr description
     * Drawable to use for single choice indicators.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:listChoiceIndicatorSingle
     */
    public static final int Theme_listChoiceIndicatorSingle=103;
    /**
     * <p>
     * @attr description
     * Drawable to use for multiple choice indicators.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:listChoiceIndicatorMultiple
     */
    public static final int Theme_listChoiceIndicatorMultiple=104;
    /**
     * <p>
     * @attr description
     * Flag indicating that this window should not be displayed at all.
     * The default value is false; if set to true, and this window is
     * the main window of an Activity, then it will never actually
     * be added to the window manager.  This means that your activity
     * must immediately quit without waiting for user interaction,
     * because there will be no such interaction coming.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowNoDisplay
     */
    public static final int Theme_windowNoDisplay=105;
    /**
     * <p>
     * @attr description
     * Control whether dimming behind the window is enabled.  The default
     * theme does not set this value, meaning it is based on whether the
     * window is floating.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:backgroundDimEnabled
     */
    public static final int Theme_backgroundDimEnabled=106;
    /**
     * <p>
     * @attr description
     * Flag allowing you to disable the splash screen for a window. The default value is
     * false; if set to true, the system can never use the window's theme to show a splash
     * screen before your actual instance is shown to the user.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowDisablePreview
     */
    public static final int Theme_windowDisablePreview=107;
    /**
     * <p>
     * @attr description
     * Defines the default soft input state that this window would
     * like when it is displayed.  Corresponds
     * to {@link android.view.WindowManager.LayoutParams#softInputMode}.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>adjustNothing</td><td>30</td><td>Don't resize <em>or</em> pan the window to make room for the
     * soft input area; the window is never adjusted for it.</td></tr>
     * <tr><td>adjustPan</td><td>20</td><td>Don't resize the window to make room for the soft input area;
     * instead pan the contents of the window as focus moves inside
     * of it so that the user can see what they are typing.  This is
     * generally less desireable than panning because the user may
     * need to close the input area to get at and interact with
     * parts of the window.</td></tr>
     * <tr><td>adjustResize</td><td>10</td><td>Always resize the window: the content area of the window is
     * reduced to make room for the soft input area.</td></tr>
     * <tr><td>adjustUnspecified</td><td>0</td><td>The window resize/pan adjustment has not been specified,
     * the system will automatically select between resize and pan
     * modes, depending
     * on whether the content of the window has any layout views
     * that can scroll their contents.  If there is such a view,
     * then the window will be resized, with the assumption being
     * that the resizeable area can be reduced to make room for
     * the input UI.</td></tr>
     * <tr><td>stateAlwaysHidden</td><td>3</td><td>Always make the soft input area hidden when this window
     * has input focus.</td></tr>
     * <tr><td>stateAlwaysVisible</td><td>5</td><td>Always make the soft input area visible when this window
     * has input focus.</td></tr>
     * <tr><td>stateHidden</td><td>2</td><td>Make the soft input area hidden when normally appropriate
     * (when the user is navigating forward to your window).</td></tr>
     * <tr><td>stateUnchanged</td><td>1</td><td>Leave the soft input window as-is, in whatever state it
     * last was.</td></tr>
     * <tr><td>stateUnspecified</td><td>0</td><td>Not specified, use what the system thinks is best.  This
     * is the default.</td></tr>
     * <tr><td>stateVisible</td><td>4</td><td>Make the soft input area visible when normally appropriate
     * (when the user is navigating forward to your window).</td></tr>
     * </table>
     *
     * @attr name android:windowSoftInputMode
     */
    public static final int Theme_windowSoftInputMode=108;
    /**
     * <p>
     * @attr description
     * A styled string, specifying the style to be used for showing
     * inline candidate text when composing with an input method.  The
     * text itself will be ignored, but the style spans will be applied
     * to the candidate text as it is edited.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:candidatesTextStyleSpans
     */
    public static final int Theme_candidatesTextStyleSpans=109;
    /**
     * <p>
     * @attr description
     * Inverse ProgressBar style. This is a medium circular progress bar.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:progressBarStyleInverse
     */
    public static final int Theme_progressBarStyleInverse=110;
    /**
     * <p>
     * @attr description
     * Small inverse ProgressBar style. This is a small circular progress bar.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:progressBarStyleSmallInverse
     */
    public static final int Theme_progressBarStyleSmallInverse=111;
    /**
     * <p>
     * @attr description
     * Large inverse ProgressBar style. This is a large circular progress bar.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:progressBarStyleLargeInverse
     */
    public static final int Theme_progressBarStyleLargeInverse=112;
    /**
     * <p>
     * @attr description
     * Bright inverse text color. Only differentiates based on the disabled state.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:textColorPrimaryInverseDisableOnly
     */
    public static final int Theme_textColorPrimaryInverseDisableOnly=113;
    /**
     * <p>
     * @attr description
     * Flag indicating that this window's background should be the
     * user's current wallpaper.  Corresponds
     * to {@link android.view.WindowManager.LayoutParams#FLAG_SHOW_WALLPAPER}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowShowWallpaper
     */
    public static final int Theme_windowShowWallpaper=114;
    /**
     * <p>
     * @attr description
     * Text color, typeface, size, and style for system search result subtitle. Defaults to primary inverse text color.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textAppearanceSearchResultSubtitle
     */
    public static final int Theme_textAppearanceSearchResultSubtitle=115;
    /**
     * <p>
     * @attr description
     * Text color, typeface, size, and style for system search result title. Defaults to primary inverse text color.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textAppearanceSearchResultTitle
     */
    public static final int Theme_textAppearanceSearchResultTitle=116;
    /**
     * <p>
     * @attr description
     * This is a hint for a solid color that can be used for caching
     * rendered views.  This should be the color of the background when
     * there is a solid background color; it should be null when the
     * background is a texture or translucent.  When a device is able
     * to use accelerated drawing (thus setting state_accelerated), the
     * cache hint is ignored and always assumed to be transparent.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:colorBackgroundCacheHint
     */
    public static final int Theme_colorBackgroundCacheHint=117;
    /**
     * <p>
     * @attr description
     * Default quickcontact badge style with small quickcontact window.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:quickContactBadgeStyleWindowSmall
     */
    public static final int Theme_quickContactBadgeStyleWindowSmall=118;
    /**
     * <p>
     * @attr description
     * Default quickcontact badge style with medium quickcontact window.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:quickContactBadgeStyleWindowMedium
     */
    public static final int Theme_quickContactBadgeStyleWindowMedium=119;
    /**
     * <p>
     * @attr description
     * Default quickcontact badge style with large quickcontact window.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:quickContactBadgeStyleWindowLarge
     */
    public static final int Theme_quickContactBadgeStyleWindowLarge=120;
    /**
     * <p>
     * @attr description
     * Default quickcontact badge style with small quickcontact window.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:quickContactBadgeStyleSmallWindowSmall
     */
    public static final int Theme_quickContactBadgeStyleSmallWindowSmall=121;
    /**
     * <p>
     * @attr description
     * Default quickcontact badge style with medium quickcontact window.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:quickContactBadgeStyleSmallWindowMedium
     */
    public static final int Theme_quickContactBadgeStyleSmallWindowMedium=122;
    /**
     * <p>
     * @attr description
     * Default quickcontact badge style with large quickcontact window.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:quickContactBadgeStyleSmallWindowLarge
     */
    public static final int Theme_quickContactBadgeStyleSmallWindowLarge=123;
    /**
     * <p>
     * @attr description
     * ExpandableListView with white background.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:expandableListViewWhiteStyle
     */
    public static final int Theme_expandableListViewWhiteStyle=124;
    /**
     * <p>
     * @attr description
     * Default WebTextView style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:webTextViewStyle
     */
    public static final int Theme_webTextViewStyle=125;
    /**
     * <p>
     * @attr description
     * Reference to a drawable that will be used to display a text selection
     * anchor on the left side of a selection region.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textSelectHandleLeft
     */
    public static final int Theme_textSelectHandleLeft=126;
    /**
     * <p>
     * @attr description
     * Reference to a drawable that will be used to display a text selection
     * anchor on the right side of a selection region.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textSelectHandleRight
     */
    public static final int Theme_textSelectHandleRight=127;
    /**
     * <p>
     * @attr description
     * Reference to a drawable that will be used to display a text selection
     * anchor for positioning the cursor within text.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textSelectHandle
     */
    public static final int Theme_textSelectHandle=128;
    /**
     * <p>
     * @attr description
     * Reference to a style that will be used for the window containing a text
     * selection anchor.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textSelectHandleWindowStyle
     */
    public static final int Theme_textSelectHandleWindowStyle=129;
    /**
     * <p>
     * @attr description
     * Flag indicating whether this window should have an Action Bar
     * in place of the usual title bar.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowActionBar
     */
    public static final int Theme_windowActionBar=130;
    /**
     * <p>
     * @attr description
     * Reference to a style for the Action Bar.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:actionBarStyle
     */
    public static final int Theme_actionBarStyle=131;
    /**
     * <p>
     * @attr description
     * Default dropdown Spinner style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:dropDownSpinnerStyle
     */
    public static final int Theme_dropDownSpinnerStyle=132;
    /**
     * <p>
     * @attr description
     * Default ActionBar dropdown style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:actionDropDownStyle
     */
    public static final int Theme_actionDropDownStyle=133;
    /**
     * <p>
     * @attr description
     * Default action button style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:actionButtonStyle
     */
    public static final int Theme_actionButtonStyle=134;
    /**
     * <p>
     * @attr description
     * Background drawable to use for action mode UI.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:actionModeBackground
     */
    public static final int Theme_actionModeBackground=135;
    /**
     * <p>
     * @attr description
     * Drawable to use for the close action mode button.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:actionModeCloseDrawable
     */
    public static final int Theme_actionModeCloseDrawable=136;
    /**
     * <p>
     * @attr description
     * Flag indicating whether action modes should overlay window content
     * when there is not reserved space for their UI (such as an Action Bar).
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowActionModeOverlay
     */
    public static final int Theme_windowActionModeOverlay=137;
    /**
     * <p>
     * @attr description
     * Flag indicating whether this window's Action Bar should overlay
     * application content. Does nothing if the window would not
     * have an Action Bar.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowActionBarOverlay
     */
    public static final int Theme_windowActionBarOverlay=138;
    /**
     * <p>
     * @attr description
     * Size of the Action Bar, including the contextual
     * bar used to present Action Modes.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>wrap_content</td><td>0</td><td></td></tr>
     * </table>
     *
     * @attr name android:actionBarSize
     */
    public static final int Theme_actionBarSize=139;
    /**
     * <p>
     * @attr description
     * Drawable used as a background for selected list items.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:listChoiceBackgroundIndicator
     */
    public static final int Theme_listChoiceBackgroundIndicator=140;
    /**
     * <p>
     * @attr description
     * Default style for tabs within an action bar.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:actionBarTabStyle
     */
    public static final int Theme_actionBarTabStyle=141;
    /**
     * <p>
     * @attr description
     * Reference to a style for the Action Bar Tab Bar.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:actionBarTabBarStyle
     */
    public static final int Theme_actionBarTabBarStyle=142;
    /**
     * <p>
     * @attr description
     * Reference to a style for the Action Bar Tab text.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:actionBarTabTextStyle
     */
    public static final int Theme_actionBarTabTextStyle=143;
    /**
     * <p>
     * @attr description
     * Reference to a style for Action Bar overflow buttons.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:actionOverflowButtonStyle
     */
    public static final int Theme_actionOverflowButtonStyle=144;
    /**
     * <p>
     * @attr description
     * Reference to a style for the Action Mode close button.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:actionModeCloseButtonStyle
     */
    public static final int Theme_actionModeCloseButtonStyle=145;
    /**
     * <p>
     * @attr description
     * Drawable used as a background for activated items.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:activatedBackgroundIndicator
     */
    public static final int Theme_activatedBackgroundIndicator=146;
    /**
     * <p>
     * @attr description
     * Default ListPopupWindow style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:listPopupWindowStyle
     */
    public static final int Theme_listPopupWindowStyle=147;
    /**
     * <p>
     * @attr description
     * Default PopupMenu style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:popupMenuStyle
     */
    public static final int Theme_popupMenuStyle=148;
    /**
     * <p>
     * @attr description
     * Text color, typeface, size, and style for the text inside of a popup menu.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textAppearanceLargePopupMenu
     */
    public static final int Theme_textAppearanceLargePopupMenu=149;
    /**
     * <p>
     * @attr description
     * Text color, typeface, size, and style for small text inside of a popup menu.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textAppearanceSmallPopupMenu
     */
    public static final int Theme_textAppearanceSmallPopupMenu=150;
    /**
     * <p>
     * @attr description
     * The list divider used in alert dialogs.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:listDividerAlertDialog
     */
    public static final int Theme_listDividerAlertDialog=151;
    /**
     * <p>
     * @attr description
     * Color of list item text in alert dialogs.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:textColorAlertDialogListItem
     */
    public static final int Theme_textColorAlertDialogListItem=152;
    /**
     * <p>
     * @attr description
     * Theme to use for dialogs spawned from this theme.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:dialogTheme
     */
    public static final int Theme_dialogTheme=153;
    /**
     * <p>
     * @attr description
     * Theme to use for alert dialogs spawned from this theme.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:alertDialogTheme
     */
    public static final int Theme_alertDialogTheme=154;
    /**
     * <p>
     * @attr description
     * Drawable to use for generic vertical dividers.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:dividerVertical
     */
    public static final int Theme_dividerVertical=155;
    /**
     * <p>
     * @attr description
     * Specifies a drawable to use for the 'home as up' indicator.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:homeAsUpIndicator
     */
    public static final int Theme_homeAsUpIndicator=156;
    /**
     * <p>
     * @attr description
     * Background drawable for bordered standalone items that need focus/pressed states.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:selectableItemBackground
     */
    public static final int Theme_selectableItemBackground=157;
    /**
     * <p>
     * @attr description
     * Drawable to use for the Cut action button in Contextual Action Bar.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:actionModeCutDrawable
     */
    public static final int Theme_actionModeCutDrawable=158;
    /**
     * <p>
     * @attr description
     * Drawable to use for the Copy action button in Contextual Action Bar.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:actionModeCopyDrawable
     */
    public static final int Theme_actionModeCopyDrawable=159;
    /**
     * <p>
     * @attr description
     * Drawable to use for the Paste action button in Contextual Action Bar.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:actionModePasteDrawable
     */
    public static final int Theme_actionModePasteDrawable=160;
    /**
     * <p>
     * @attr description
     * The layout of the view that is displayed on top of the cursor to paste inside a
     * TextEdit field.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textEditPasteWindowLayout
     */
    public static final int Theme_textEditPasteWindowLayout=161;
    /**
     * <p>
     * @attr description
     * Variation of textEditPasteWindowLayout displayed when the clipboard is empty.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textEditNoPasteWindowLayout
     */
    public static final int Theme_textEditNoPasteWindowLayout=162;
    /**
     * <p>
     * @attr description
     * Flag indicating that this window should allow touches to be split
     * across other windows that also support split touch.
     * The default value is true for applications with a targetSdkVersion
     * of Honeycomb or newer; false otherwise.
     * When this flag is false, the first pointer that goes down determines
     * the window to which all subsequent touches go until all pointers go up.
     * When this flag is true, each pointer (not necessarily the first) that
     * goes down determines the window to which all subsequent touches of that
     * pointer will go until that pointers go up thereby enabling touches
     * with multiple pointers to be split across multiple windows.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowEnableSplitTouch
     */
    public static final int Theme_windowEnableSplitTouch=163;
    /**
     * <p>
     * @attr description
     * Style for buttons without an explicit border, often used in groups.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:borderlessButtonStyle
     */
    public static final int Theme_borderlessButtonStyle=164;
    /**
     * <p>
     * @attr description
     * Drawable to use for generic horizontal dividers.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:dividerHorizontal
     */
    public static final int Theme_dividerHorizontal=165;
    /**
     * <p>
     * @attr description
     * Style for button bars.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:buttonBarStyle
     */
    public static final int Theme_buttonBarStyle=166;
    /**
     * <p>
     * @attr description
     * Style for buttons within button bars.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:buttonBarButtonStyle
     */
    public static final int Theme_buttonBarButtonStyle=167;
    /**
     * <p>
     * @attr description
     * Style for segmented buttons - a container that houses several buttons
     * with the appearance of a singel button broken into segments.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:segmentedButtonStyle
     */
    public static final int Theme_segmentedButtonStyle=168;
    /**
     * <p>
     * @attr description
     * Drawable to use as the fast scroll thumb.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:fastScrollThumbDrawable
     */
    public static final int Theme_fastScrollThumbDrawable=169;
    /**
     * <p>
     * @attr description
     * Drawable to use as the fast scroll index preview window background
     * when shown on the left.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:fastScrollPreviewBackgroundLeft
     */
    public static final int Theme_fastScrollPreviewBackgroundLeft=170;
    /**
     * <p>
     * @attr description
     * Drawable to use as the fast scroll index preview window background
     * when shown on the right.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:fastScrollPreviewBackgroundRight
     */
    public static final int Theme_fastScrollPreviewBackgroundRight=171;
    /**
     * <p>
     * @attr description
     * Drawable to use as the track for the fast scroll thumb.
     * This may be null.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:fastScrollTrackDrawable
     */
    public static final int Theme_fastScrollTrackDrawable=172;
    /**
     * <p>
     * @attr description
     * Position of the fast scroll index overlay window.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>aboveThumb</td><td>2</td><td></td></tr>
     * <tr><td>atThumb</td><td>1</td><td></td></tr>
     * <tr><td>floating</td><td>0</td><td></td></tr>
     * </table>
     *
     * @attr name android:fastScrollOverlayPosition
     */
    public static final int Theme_fastScrollOverlayPosition=173;
    /**
     * <p>
     * @attr description
     * Background that can be used behind parts of a UI that provide
     * details on data the user is selecting.  For example, this is
     * the background element of PreferenceActivity's embedded
     * preference fragment.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:detailsElementBackground
     */
    public static final int Theme_detailsElementBackground=174;
    /**
     * <p>
     * @attr description
     * Color of highlighted text, when used in a light theme.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:textColorHighlightInverse
     */
    public static final int Theme_textColorHighlightInverse=175;
    /**
     * <p>
     * @attr description
     * Color of link text (URLs), when used in a light theme.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:textColorLinkInverse
     */
    public static final int Theme_textColorLinkInverse=176;
    /**
     * <p>
     * @attr description
     * EditText text foreground color.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:editTextColor
     */
    public static final int Theme_editTextColor=177;
    /**
     * <p>
     * @attr description
     * EditText background drawable.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:editTextBackground
     */
    public static final int Theme_editTextBackground=178;
    /**
     * <p>
     * @attr description
     * Default HorizontalScrollView style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:horizontalScrollViewStyle
     */
    public static final int Theme_horizontalScrollViewStyle=179;
    /**
     * <p>
     * @attr description
     * Icon drawable to use for alerts.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:alertDialogIcon
     */
    public static final int Theme_alertDialogIcon=180;
    /**
     * <p>
     * @attr description
     * Text color for the fast scroll index overlay. Make sure it
     * plays nicely with fastScrollPreviewBackground[Left|Right].
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:fastScrollTextColor
     */
    public static final int Theme_fastScrollTextColor=181;
    /**
     * <p>
     * @attr description
     * Control whether a container should automatically close itself if
     * the user touches outside of it.  This only applies to activities
     * and dialogs.
     * <p>Note: this attribute will only be respected for applications
     * that are targeting {@link android.os.Build.VERSION_CODES#HONEYCOMB}
     * or later.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowCloseOnTouchOutside
     */
    public static final int Theme_windowCloseOnTouchOutside=182;
    /**
     * <p>
     * @attr description
     * The DatePicker style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:datePickerStyle
     */
    public static final int Theme_datePickerStyle=183;
    /**
     * <p>
     * @attr description
     * The CalendarView style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:calendarViewStyle
     */
    public static final int Theme_calendarViewStyle=184;
    /**
     * <p>
     * @attr description
     * Used instead of textEditPasteWindowLayout when the window is moved on the side of the
     * insertion cursor because it would be clipped if it were positioned on top.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textEditSidePasteWindowLayout
     */
    public static final int Theme_textEditSidePasteWindowLayout=185;
    /**
     * <p>
     * @attr description
     * Variation of textEditSidePasteWindowLayout displayed when the clipboard is empty.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textEditSideNoPasteWindowLayout
     */
    public static final int Theme_textEditSideNoPasteWindowLayout=186;
    /**
     * <p>
     * @attr description
     * TextAppearance style that will be applied to text that
     * appears within action menu items.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:actionMenuTextAppearance
     */
    public static final int Theme_actionMenuTextAppearance=187;
    /**
     * <p>
     * @attr description
     * Color for text that appears within action menu items.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:actionMenuTextColor
     */
    public static final int Theme_actionMenuTextColor=188;
    /**
     * <p>
     * @attr description
     * Default style for switch preferences.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:switchPreferenceStyle
     */
    public static final int Theme_switchPreferenceStyle=189;
    /**
     * <p>
     * @attr description
     * Reference to a style that will be used for the window containing a list of possible
     * text suggestions in an EditText.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textSuggestionsWindowStyle
     */
    public static final int Theme_textSuggestionsWindowStyle=190;
    /**
     * <p>
     * @attr description
     * Layout of the TextView item that will populate the suggestion popup window.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textEditSuggestionItemLayout
     */
    public static final int Theme_textEditSuggestionItemLayout=191;
    /**
     * <p>
     * @attr description
     * Drawable to use for the Select all action button in Contextual Action Bar.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:actionModeSelectAllDrawable
     */
    public static final int Theme_actionModeSelectAllDrawable=192;
    /**
     * <p>
     * @attr description
     * A larger, more robust list item height.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:listPreferredItemHeightLarge
     */
    public static final int Theme_listPreferredItemHeightLarge=193;
    /**
     * <p>
     * @attr description
     * A smaller, sleeker list item height.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:listPreferredItemHeightSmall
     */
    public static final int Theme_listPreferredItemHeightSmall=194;
    /**
     * <p>
     * @attr description
     * Reference to a style for the split Action Bar. This style
     * controls the split component that holds the menu/action
     * buttons. actionBarStyle is still used for the primary
     * bar.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:actionBarSplitStyle
     */
    public static final int Theme_actionBarSplitStyle=195;
    /**
     * <p>
     * @attr description
     * Default highlight color for items that are pressed.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:colorPressedHighlight
     */
    public static final int Theme_colorPressedHighlight=196;
    /**
     * <p>
     * @attr description
     * Default highlight color for items that are long-pressed.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:colorLongPressedHighlight
     */
    public static final int Theme_colorLongPressedHighlight=197;
    /**
     * <p>
     * @attr description
     * Default highlight color for items that are
     * focused. (Focused meaning cursor-based selection.)
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:colorFocusedHighlight
     */
    public static final int Theme_colorFocusedHighlight=198;
    /**
     * <p>
     * @attr description
     * Default highlight color for items that are
     * activated. (Activated meaning persistent selection.)
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:colorActivatedHighlight
     */
    public static final int Theme_colorActivatedHighlight=199;
    /**
     * <p>
     * @attr description
     * Default highlight color for items in multiple selection
     * mode.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:colorMultiSelectHighlight
     */
    public static final int Theme_colorMultiSelectHighlight=200;
    /**
     * <p>
     * @attr description
     * Reference to a style for the Action Mode.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:actionModeStyle
     */
    public static final int Theme_actionModeStyle=201;
    /**
     * <p>
     * @attr description
     * Reference to a theme that should be used to inflate widgets
     * and layouts destined for the action bar. Most of the time
     * this will be a reference to the current theme, but when
     * the action bar has a significantly different contrast
     * profile than the rest of the activity the difference
     * can become important. If this is set to @null the current
     * theme will be used.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:actionBarWidgetTheme
     */
    public static final int Theme_actionBarWidgetTheme=202;
    /**
     * <p>
     * @attr description
     * Custom divider drawable to use for elements in the action bar.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:actionBarDivider
     */
    public static final int Theme_actionBarDivider=203;
    /**
     * <p>
     * @attr description
     * Custom item state list drawable background for action bar items.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:actionBarItemBackground
     */
    public static final int Theme_actionBarItemBackground=204;
    /**
     * <p>
     * @attr description
     * Background drawable to use for action mode UI in the lower split bar.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:actionModeSplitBackground
     */
    public static final int Theme_actionModeSplitBackground=205;
    /**
     * <p>
     * @attr description
     * The preferred TextAppearance for the primary text of list items.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textAppearanceListItem
     */
    public static final int Theme_textAppearanceListItem=206;
    /**
     * <p>
     * @attr description
     * The preferred TextAppearance for the primary text of small list items.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textAppearanceListItemSmall
     */
    public static final int Theme_textAppearanceListItemSmall=207;
    /**
     * <p>
     * @attr description
     * The preferred padding along the left edge of list items.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:listPreferredItemPaddingLeft
     */
    public static final int Theme_listPreferredItemPaddingLeft=208;
    /**
     * <p>
     * @attr description
     * The preferred padding along the right edge of list items.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:listPreferredItemPaddingRight
     */
    public static final int Theme_listPreferredItemPaddingRight=209;
    /**
     * <p>
     * @attr description
     * Default style for the MediaRouteButton widget.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:mediaRouteButtonStyle
     */
    public static final int Theme_mediaRouteButtonStyle=210;
    /**
     * <p>
     * @attr description
     * The preferred padding along the start edge of list items.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:listPreferredItemPaddingStart
     */
    public static final int Theme_listPreferredItemPaddingStart=211;
    /**
     * <p>
     * @attr description
     * The preferred padding along the end edge of list items.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:listPreferredItemPaddingEnd
     */
    public static final int Theme_listPreferredItemPaddingEnd=212;
    /**
     * <p>
     * @attr description
     * Theme to use for presentations spawned from this theme.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:presentationTheme
     */
    public static final int Theme_presentationTheme=213;
    /**
     * <p>
     * @attr description
     * Default CheckedTextView style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:checkedTextViewStyle
     */
    public static final int Theme_checkedTextViewStyle=214;
    /**
     * <p>
     * @attr description
     * Flag indicating whether this window should extend into overscan region.  Corresponds
     * to {@link android.view.WindowManager.LayoutParams#FLAG_LAYOUT_IN_OVERSCAN}.
     * @deprecated Overscan areas aren't set by any Android product anymore as of Android 11.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowOverscan
     */
    @Deprecated
    public static final int Theme_windowOverscan=215;
    /**
     * <p>
     * @attr description
     * Flag indicating whether this window requests a translucent status bar.  Corresponds
     * to {@link android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_STATUS}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowTranslucentStatus
     */
    public static final int Theme_windowTranslucentStatus=216;
    /**
     * <p>
     * @attr description
     * Flag indicating whether this window requests a translucent navigation bar.  Corresponds
     * to {@link android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_NAVIGATION}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowTranslucentNavigation
     */
    public static final int Theme_windowTranslucentNavigation=217;
    /**
     * <p>
     * @attr description
     * Flag to indicate that a window can be swiped away to be dismissed.
     * Corresponds to {@link android.view.Window#FEATURE_SWIPE_TO_DISMISS}. It will also
     * dynamically change translucency of the window, if the windowIsTranslucent is not set.
     * If windowIsTranslucent is set (to either true or false) it will obey that setting.
     * @deprecated Swipe-to-dismiss isn't functional anymore.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowSwipeToDismiss
     */
    @Deprecated
    public static final int Theme_windowSwipeToDismiss=218;
    /**
     * <p>
     * @attr description
     * Flag indicating whether this window requests that content changes be performed
     * as scene changes with transitions. Corresponds to
     * {@link android.view.Window#FEATURE_CONTENT_TRANSITIONS}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowContentTransitions
     */
    public static final int Theme_windowContentTransitions=219;
    /**
     * <p>
     * @attr description
     * Reference to a TransitionManager XML resource defining the desired
     * transitions between different window content.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:windowContentTransitionManager
     */
    public static final int Theme_windowContentTransitionManager=220;
    /**
     * <p>
     * @attr description
     * The color applied to framework controls in their normal state.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:colorControlNormal
     */
    public static final int Theme_colorControlNormal=221;
    /**
     * <p>
     * @attr description
     * The color applied to framework controls in their activated (ex. checked) state.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:colorControlActivated
     */
    public static final int Theme_colorControlActivated=222;
    /**
     * <p>
     * @attr description
     * The color applied to framework buttons in their normal state.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:colorButtonNormal
     */
    public static final int Theme_colorButtonNormal=223;
    /**
     * <p>
     * @attr description
     * The color applied to framework control highlights (ex. ripples, list selectors).
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:colorControlHighlight
     */
    public static final int Theme_colorControlHighlight=224;
    /**
     * <p>
     * @attr description
     * Reference to a theme that should be used to inflate the
     * action bar. This will be inherited by any widget inflated
     * into the action bar.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:actionBarTheme
     */
    public static final int Theme_actionBarTheme=225;
    /**
     * <p>
     * @attr description
     * The preferred TextAppearance for the secondary text of list items.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textAppearanceListItemSecondary
     */
    public static final int Theme_textAppearanceListItemSecondary=226;
    /**
     * <p>
     * @attr description
     * The primary branding color for the app. By default, this is the color applied to the
     * action bar background.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:colorPrimary
     */
    public static final int Theme_colorPrimary=227;
    /**
     * <p>
     * @attr description
     * Dark variant of the primary branding color. By default, this is the color applied to
     * the status bar (via statusBarColor) and navigation bar (via navigationBarColor).
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:colorPrimaryDark
     */
    public static final int Theme_colorPrimaryDark=228;
    /**
     * <p>
     * @attr description
     * Bright complement to the primary branding color. By default, this is the color applied
     * to framework controls (via colorControlActivated).
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:colorAccent
     */
    public static final int Theme_colorAccent=229;
    /**
     * <p>
     * @attr description
     * Reference to a Transition XML resource defining the desired Transition
     * used to move Views into the initial Window's content Scene. Corresponds to
     * {@link android.view.Window#setEnterTransition(android.transition.Transition)}.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:windowEnterTransition
     */
    public static final int Theme_windowEnterTransition=230;
    /**
     * <p>
     * @attr description
     * Reference to a Transition XML resource defining the desired Transition
     * used to move Views out of the Window's content Scene when launching a new Activity.
     * Corresponds to
     * {@link android.view.Window#setExitTransition(android.transition.Transition)}.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:windowExitTransition
     */
    public static final int Theme_windowExitTransition=231;
    /**
     * <p>
     * @attr description
     * Reference to a Transition XML resource defining the desired Transition
     * used to move shared elements transferred into the Window's initial content Scene.
     * Corresponds to {@link android.view.Window#setSharedElementEnterTransition(
     * android.transition.Transition)}.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:windowSharedElementEnterTransition
     */
    public static final int Theme_windowSharedElementEnterTransition=232;
    /**
     * <p>
     * @attr description
     * Reference to a Transition XML resource defining the desired Transition
     * used when starting a new Activity to move shared elements prior to transferring
     * to the called Activity.
     * Corresponds to {@link android.view.Window#setSharedElementExitTransition(
     * android.transition.Transition)}.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:windowSharedElementExitTransition
     */
    public static final int Theme_windowSharedElementExitTransition=233;
    /**
     * <p>
     * @attr description
     * Flag indicating whether this Window's transition should overlap with
     * the exiting transition of the called Activity when the called Activity
     * finishes. Corresponds to
     * {@link android.view.Window#setAllowReturnTransitionOverlap(boolean)}.
     * The default value is true.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowAllowReturnTransitionOverlap
     */
    public static final int Theme_windowAllowReturnTransitionOverlap=234;
    /**
     * <p>
     * @attr description
     * Flag indicating whether this Window's transition should overlap with
     * the exiting transition of the calling Activity. Corresponds to
     * {@link android.view.Window#setAllowEnterTransitionOverlap(boolean)}.
     * The default value is true.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowAllowEnterTransitionOverlap
     */
    public static final int Theme_windowAllowEnterTransitionOverlap=235;
    /**
     * <p>
     * @attr description
     * Default StackView style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:stackViewStyle
     */
    public static final int Theme_stackViewStyle=236;
    /**
     * <p>
     * @attr description
     * Default style for the Switch widget.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:switchStyle
     */
    public static final int Theme_switchStyle=237;
    /**
     * <p>
     * @attr description
     * Reference to a style for the Action Bar menu.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:actionOverflowMenuStyle
     */
    public static final int Theme_actionOverflowMenuStyle=238;
    /**
     * <p>
     * @attr description
     * Background drawable for borderless standalone items that need focus/pressed states.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:selectableItemBackgroundBorderless
     */
    public static final int Theme_selectableItemBackgroundBorderless=239;
    /**
     * <p>
     * @attr description
     * The duration, in milliseconds, of the window background fade duration
     * when transitioning into or away from an Activity when called with an
     * Activity Transition. Corresponds to
     * {@link android.view.Window#setTransitionBackgroundFadeDuration(long)}.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:windowTransitionBackgroundFadeDuration
     */
    public static final int Theme_windowTransitionBackgroundFadeDuration=240;
    /**
     * <p>
     * @attr description
     * Drawable to use for the Share action button in WebView selection action modes.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:actionModeShareDrawable
     */
    public static final int Theme_actionModeShareDrawable=241;
    /**
     * <p>
     * @attr description
     * Drawable to use for the Find action button in WebView selection action modes.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:actionModeFindDrawable
     */
    public static final int Theme_actionModeFindDrawable=242;
    /**
     * <p>
     * @attr description
     * Drawable to use for the Web Search action button in WebView selection action modes.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:actionModeWebSearchDrawable
     */
    public static final int Theme_actionModeWebSearchDrawable=243;
    /**
     * <p>
     * @attr description
     * Style for the search query widget.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:searchViewStyle
     */
    public static final int Theme_searchViewStyle=244;
    /**
     * <p>
     * @attr description
     * Style for the "positive" buttons within button bars.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:buttonBarPositiveButtonStyle
     */
    public static final int Theme_buttonBarPositiveButtonStyle=245;
    /**
     * <p>
     * @attr description
     * Style for the "neutral" buttons within button bars.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:buttonBarNeutralButtonStyle
     */
    public static final int Theme_buttonBarNeutralButtonStyle=246;
    /**
     * <p>
     * @attr description
     * Style for the "negative" buttons within button bars.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:buttonBarNegativeButtonStyle
     */
    public static final int Theme_buttonBarNegativeButtonStyle=247;
    /**
     * <p>
     * @attr description
     * Reference to a theme that should be used to inflate popups
     * shown by widgets in the action bar.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:actionBarPopupTheme
     */
    public static final int Theme_actionBarPopupTheme=248;
    /**
     * <p>
     * @attr description
     * The TimePicker style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:timePickerStyle
     */
    public static final int Theme_timePickerStyle=249;
    /**
     * <p>
     * @attr description
     * The TimePicker dialog theme.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:timePickerDialogTheme
     */
    public static final int Theme_timePickerDialogTheme=250;
    /**
     * <p>
     * @attr description
     * Default Toolbar style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:toolbarStyle
     */
    public static final int Theme_toolbarStyle=251;
    /**
     * <p>
     * @attr description
     * The DatePicker dialog theme.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:datePickerDialogTheme
     */
    public static final int Theme_datePickerDialogTheme=252;
    /**
     * <p>
     * @attr description
     * Reference to a Transition XML resource defining the desired Transition
     * used to move Views out of the scene when the Window is
     * preparing to close. Corresponds to
     * {@link android.view.Window#setReturnTransition(android.transition.Transition)}.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:windowReturnTransition
     */
    public static final int Theme_windowReturnTransition=253;
    /**
     * <p>
     * @attr description
     * Reference to a Transition XML resource defining the desired Transition
     * used to move Views in to the scene when returning from a previously-started Activity.
     * Corresponds to
     * {@link android.view.Window#setReenterTransition(android.transition.Transition)}.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:windowReenterTransition
     */
    public static final int Theme_windowReenterTransition=254;
    /**
     * <p>
     * @attr description
     * Reference to a Transition XML resource defining the desired Transition
     * used to move shared elements transferred back to a calling Activity.
     * Corresponds to {@link android.view.Window#setSharedElementReturnTransition(
     * android.transition.Transition)}.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:windowSharedElementReturnTransition
     */
    public static final int Theme_windowSharedElementReturnTransition=255;
    /**
     * <p>
     * @attr description
     * Reference to a Transition XML resource defining the desired Transition
     * used for shared elements transferred back to a calling Activity.
     * Corresponds to {@link android.view.Window#setSharedElementReenterTransition(
     * android.transition.Transition)}.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:windowSharedElementReenterTransition
     */
    public static final int Theme_windowSharedElementReenterTransition=256;
    /**
     * <p>
     * @attr description
     * Indicates whether or not shared elements should use an overlay
     * during transitions. The default value is true.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowSharedElementsUseOverlay
     */
    public static final int Theme_windowSharedElementsUseOverlay=257;
    /**
     * <p>
     * @attr description
     * Alpha value of the ambient shadow projected by elevated views, between 0 and 1.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:ambientShadowAlpha
     */
    public static final int Theme_ambientShadowAlpha=258;
    /**
     * <p>
     * @attr description
     * Alpha value of the spot shadow projected by elevated views, between 0 and 1.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:spotShadowAlpha
     */
    public static final int Theme_spotShadowAlpha=259;
    /**
     * <p>
     * @attr description
     * Flag indicating whether this window allows Activity Transitions.
     * Corresponds to {@link android.view.Window#FEATURE_ACTIVITY_TRANSITIONS}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowActivityTransitions
     */
    public static final int Theme_windowActivityTransitions=260;
    /**
     * <p>
     * @attr description
     * The color applied to the edge effect on scrolling containers.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:colorEdgeEffect
     */
    public static final int Theme_colorEdgeEffect=261;
    /**
     * <p>
     * @attr description
     * Preferred padding for dialog content.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:dialogPreferredPadding
     */
    public static final int Theme_dialogPreferredPadding=262;
    /**
     * <p>
     * @attr description
     * Default color of background imagery for floating components, ex. dialogs, popups, and cards.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:colorBackgroundFloating
     */
    public static final int Theme_colorBackgroundFloating=263;
    /**
     * <p>
     * @attr description
     * Icon that should be used to indicate that an app is waiting for a fingerprint scan.
     * This should be used whenever an app is requesting the user to place a finger on the
     * fingerprint sensor. It can be combined with other drawables such as colored circles, so
     * the appearance matches the branding of the app requesting the fingerprint scan.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:fingerprintAuthDrawable
     */
    public static final int Theme_fingerprintAuthDrawable=264;
    /**
     * <p>
     * @attr description
     * Default menu-style ListView style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:listMenuViewStyle
     */
    public static final int Theme_listMenuViewStyle=265;
    /**
     * <p>
     * @attr description
     * Default context menu PopupMenu style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:contextPopupMenuStyle
     */
    public static final int Theme_contextPopupMenuStyle=266;
    /**
     * <p>
     * @attr description
     * Text color, typeface, size, and style for header text inside of a popup menu.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:textAppearancePopupMenuHeader
     */
    public static final int Theme_textAppearancePopupMenuHeader=267;
    /**
     * <p>
     * @attr description
     * Drawable to draw selectively within the inset areas when the windowBackground
     * has been set to null. This protects against seeing visual garbage in the
     * surface when the app has not drawn any content into this area. One example is
     * when the user is resizing a window of an activity in multi-window mode.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:windowBackgroundFallback
     */
    public static final int Theme_windowBackgroundFallback=268;
    /**
     * <p>
     * @attr description
     * Default style for Headers pane in PreferenceActivity.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:preferenceFragmentStyle
     */
    public static final int Theme_preferenceFragmentStyle=269;
    /**
     * <p>
     * @attr description
     * NumberPicker style.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:numberPickerStyle
     */
    public static final int Theme_numberPickerStyle=270;
    /**
     * <p>
     * @attr description
     * The secondary branding color for the app.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:colorSecondary
     */
    public static final int Theme_colorSecondary=271;
    /**
     * <p>
     * @attr description
     * Color used for error states and things that need to be drawn to
     * the users attention..
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:colorError
     */
    public static final int Theme_colorError=272;
    /**
     * <p>
     * @attr description
     * The alpha applied to the foreground color to create the primary text color.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:primaryContentAlpha
     */
    public static final int Theme_primaryContentAlpha=273;
    /**
     * <p>
     * @attr description
     * The alpha applied to the foreground color to create the secondary text color.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:secondaryContentAlpha
     */
    public static final int Theme_secondaryContentAlpha=274;
    /**
     * <p>
     * @attr description
     * Drawable to be drawn over the view to mark it as autofilled
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:autofilledHighlight
     */
    public static final int Theme_autofilledHighlight=275;
    /**
     * <p>
     * @attr description
     * Corner radius of dialogs.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:dialogCornerRadius
     */
    public static final int Theme_dialogCornerRadius=276;
    /**
     * <p>
     * @attr description
     * Corner radius of buttons.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:buttonCornerRadius
     */
    public static final int Theme_buttonCornerRadius=277;
    /**
     * <p>
     * @attr description
     * <p>Whether or not the force dark feature is allowed to be applied to this theme.
     * <p>Setting this to false will disable the auto-dark feature on everything this
     * theme is applied to along with anything drawn by any children of views using
     * this theme.
     * <p>Setting this to true will allow this view to be automatically made dark, however
     * a value of 'true' will not override any 'false' value in its parent chain nor will
     * it prevent any 'false' in any of its children.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:forceDarkAllowed
     */
    public static final int Theme_forceDarkAllowed=278;
    /**
     * <p>
     * @attr description
     * Specifies that a theme has a light background with dark text on top.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:isLightTheme
     */
    public static final int Theme_isLightTheme=279;
    /**
     * <p>
     * @attr description
     * When windowBlurBehindEnabled is set, this is the amount of blur to apply
     * behind the window. The range is from 0, which means no blur, to 150.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:windowBlurBehindRadius
     */
    public static final int Theme_windowBlurBehindRadius=280;
    /**
     * <p>
     * @attr description
     * If set, everything behind the window will be blurred with radius
     * windowBackgroundBlurRadius.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowBlurBehindEnabled
     */
    public static final int Theme_windowBlurBehindEnabled=281;
    /**
     * <p>
     * @attr description
     * Blur the screen behind the window with the bounds of the window.
     * The radius defines the size of the neighbouring area, from which pixels will be
     * averaged to form the final color for each pixel in the region.
     * A radius of 0 means no blur. The higher the radius, the denser the blur.
     * Corresponds to {@link android.view.Window#setBackgroundBlurRadius}.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:windowBackgroundBlurRadius
     */
    public static final int Theme_windowBackgroundBlurRadius=282;
    /**
     * <p>
     * @attr description
     * Color applied to effects.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:effectColor
     */
    public static final int Theme_effectColor=283;
    /**
     * Attributes that can be used with a TimePicker.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #TimePicker_headerBackground android:headerBackground}</code></td><td>Default background for the menu header.</td></tr>
     * <tr><td><code>{@link #TimePicker_headerTimeTextAppearance android:headerTimeTextAppearance}</code></td><td>The text appearance for the time header.</td></tr>
     * <tr><td><code>{@link #TimePicker_headerAmPmTextAppearance android:headerAmPmTextAppearance}</code></td><td>The text appearance for the AM/PM header.</td></tr>
     * <tr><td><code>{@link #TimePicker_numbersTextColor android:numbersTextColor}</code></td><td>The color for the hours/minutes numbers.</td></tr>
     * <tr><td><code>{@link #TimePicker_numbersBackgroundColor android:numbersBackgroundColor}</code></td><td>The background color for the hours/minutes numbers.</td></tr>
     * <tr><td><code>{@link #TimePicker_numbersSelectorColor android:numbersSelectorColor}</code></td><td>The color for the hours/minutes selector.</td></tr>
     * <tr><td><code>{@link #TimePicker_amPmTextColor android:amPmTextColor}</code></td><td>The color for the AM/PM selectors.</td></tr>
     * <tr><td><code>{@link #TimePicker_amPmBackgroundColor android:amPmBackgroundColor}</code></td><td>The background color state list for the AM/PM selectors.</td></tr>
     * <tr><td><code>{@link #TimePicker_timePickerMode android:timePickerMode}</code></td><td>Defines the look of the widget.</td></tr>
     * <tr><td><code>{@link #TimePicker_numbersInnerTextColor android:numbersInnerTextColor}</code></td><td>The color for the inner hours numbers used in 24-hour mode.</td></tr>
     * </table>
     * @see #TimePicker_headerBackground
     * @see #TimePicker_headerTimeTextAppearance
     * @see #TimePicker_headerAmPmTextAppearance
     * @see #TimePicker_numbersTextColor
     * @see #TimePicker_numbersBackgroundColor
     * @see #TimePicker_numbersSelectorColor
     * @see #TimePicker_amPmTextColor
     * @see #TimePicker_amPmBackgroundColor
     * @see #TimePicker_timePickerMode
     * @see #TimePicker_numbersInnerTextColor
     */
    public static final int[] TimePicker={
      0x0101012f, 0x0101049f, 0x010104a0, 0x010104a1, 
      0x010104a2, 0x010104a3, 0x010104a4, 0x010104a5, 
      0x010104b4, 0x010104e1, 0x01120037, 0x0112005d, 
      0x01120063, 0x01120076
    };
    /**
     * <p>
     * @attr description
     * The background for the header containing the currently selected time.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:headerBackground
     */
    public static final int TimePicker_headerBackground=0;
    /**
     * <p>
     * @attr description
     * The text appearance for the time header.
     * @deprecated Use headerTextColor instead.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:headerTimeTextAppearance
     */
    @Deprecated
    public static final int TimePicker_headerTimeTextAppearance=1;
    /**
     * <p>
     * @attr description
     * The text appearance for the AM/PM header.
     * @deprecated Use headerTextColor instead.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:headerAmPmTextAppearance
     */
    @Deprecated
    public static final int TimePicker_headerAmPmTextAppearance=2;
    /**
     * <p>
     * @attr description
     * The color for the hours/minutes numbers. This should be a color
     * state list where the activated state will be used when the number
     * is active.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:numbersTextColor
     */
    public static final int TimePicker_numbersTextColor=3;
    /**
     * <p>
     * @attr description
     * The background color for the hours/minutes numbers.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:numbersBackgroundColor
     */
    public static final int TimePicker_numbersBackgroundColor=4;
    /**
     * <p>
     * @attr description
     * The color for the hours/minutes selector.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:numbersSelectorColor
     */
    public static final int TimePicker_numbersSelectorColor=5;
    /**
     * <p>
     * @attr description
     * The color for the AM/PM selectors.
     * {@deprecated Use headerTextColor instead.}
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:amPmTextColor
     */
    @Deprecated
    public static final int TimePicker_amPmTextColor=6;
    /**
     * <p>
     * @attr description
     * The background color state list for the AM/PM selectors.
     * {@deprecated Use headerBackground instead.}
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:amPmBackgroundColor
     */
    @Deprecated
    public static final int TimePicker_amPmBackgroundColor=7;
    /**
     * <p>
     * @attr description
     * Defines the look of the widget. Prior to the L release, the only choice was
     * spinner. As of L, with the Material theme selected, the default layout is clock,
     * but this attribute can be used to force spinner to be used instead.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>clock</td><td>2</td><td>Time picker with clock face to select the time.</td></tr>
     * <tr><td>spinner</td><td>1</td><td>Time picker with spinner controls to select the time.</td></tr>
     * </table>
     *
     * @attr name android:timePickerMode
     */
    public static final int TimePicker_timePickerMode=8;
    /**
     * <p>
     * @attr description
     * The color for the inner hours numbers used in 24-hour mode. This
     * should be a color state list where the activated state will be
     * used when the number is active.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:numbersInnerTextColor
     */
    public static final int TimePicker_numbersInnerTextColor=9;
    /**
     * Attributes that can be used with a ToggleButton.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ToggleButton_disabledAlpha android:disabledAlpha}</code></td><td>Default disabled alpha for widgets that set enabled/disabled alpha programmatically.</td></tr>
     * <tr><td><code>{@link #ToggleButton_textOn android:textOn}</code></td><td>The text for the button when it is checked.</td></tr>
     * <tr><td><code>{@link #ToggleButton_textOff android:textOff}</code></td><td>The text for the button when it is not checked.</td></tr>
     * </table>
     * @see #ToggleButton_disabledAlpha
     * @see #ToggleButton_textOn
     * @see #ToggleButton_textOff
     */
    public static final int[] ToggleButton={
      0x01010033, 0x01010124, 0x01010125
    };
    /**
     * <p>
     * @attr description
     * The alpha to apply to the indicator when disabled.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:disabledAlpha
     */
    public static final int ToggleButton_disabledAlpha=0;
    /**
     * <p>
     * @attr description
     * The text for the button when it is checked.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:textOn
     */
    public static final int ToggleButton_textOn=1;
    /**
     * <p>
     * @attr description
     * The text for the button when it is not checked.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:textOff
     */
    public static final int ToggleButton_textOff=2;
    /**
     * Attributes that can be used with a Toolbar.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Toolbar_gravity android:gravity}</code></td><td>Specifies how an object should position its content, on both the X and Y axes,
     * within its own bounds.</td></tr>
     * <tr><td><code>{@link #Toolbar_title android:title}</code></td><td>The title associated with the item.</td></tr>
     * <tr><td><code>{@link #Toolbar_logo android:logo}</code></td><td>A Drawable resource providing an extended graphical logo for its
     * associated item.</td></tr>
     * <tr><td><code>{@link #Toolbar_subtitle android:subtitle}</code></td><td>Specifies subtitle text used for navigationMode="normal".</td></tr>
     * <tr><td><code>{@link #Toolbar_titleTextAppearance android:titleTextAppearance}</code></td><td></td></tr>
     * <tr><td><code>{@link #Toolbar_subtitleTextAppearance android:subtitleTextAppearance}</code></td><td></td></tr>
     * <tr><td><code>{@link #Toolbar_contentInsetStart android:contentInsetStart}</code></td><td>Minimum inset for content views within a bar.</td></tr>
     * <tr><td><code>{@link #Toolbar_contentInsetEnd android:contentInsetEnd}</code></td><td>Minimum inset for content views within a bar.</td></tr>
     * <tr><td><code>{@link #Toolbar_contentInsetLeft android:contentInsetLeft}</code></td><td>Minimum inset for content views within a bar.</td></tr>
     * <tr><td><code>{@link #Toolbar_contentInsetRight android:contentInsetRight}</code></td><td>Minimum inset for content views within a bar.</td></tr>
     * <tr><td><code>{@link #Toolbar_popupTheme android:popupTheme}</code></td><td>Reference to a theme that should be used to inflate popups
     * shown by widgets in the toolbar.</td></tr>
     * <tr><td><code>{@link #Toolbar_navigationIcon android:navigationIcon}</code></td><td>Icon drawable to use for the navigation button located at
     * the start of the toolbar.</td></tr>
     * <tr><td><code>{@link #Toolbar_navigationContentDescription android:navigationContentDescription}</code></td><td>Text to set as the content description for the navigation button
     * located at the start of the toolbar.</td></tr>
     * <tr><td><code>{@link #Toolbar_collapseContentDescription android:collapseContentDescription}</code></td><td>Text to set as the content description for the collapse button.</td></tr>
     * <tr><td><code>{@link #Toolbar_titleTextColor android:titleTextColor}</code></td><td>A color to apply to the title string.</td></tr>
     * <tr><td><code>{@link #Toolbar_subtitleTextColor android:subtitleTextColor}</code></td><td>A color to apply to the subtitle string.</td></tr>
     * <tr><td><code>{@link #Toolbar_logoDescription android:logoDescription}</code></td><td>A content description string to describe the appearance of the
     * associated logo image.</td></tr>
     * <tr><td><code>{@link #Toolbar_titleMargin android:titleMargin}</code></td><td>Specifies extra space on the left, start, right and end sides
     * of the toolbar's title.</td></tr>
     * <tr><td><code>{@link #Toolbar_titleMarginStart android:titleMarginStart}</code></td><td>Specifies extra space on the start side of the toolbar's title.</td></tr>
     * <tr><td><code>{@link #Toolbar_titleMarginEnd android:titleMarginEnd}</code></td><td>Specifies extra space on the end side of the toolbar's title.</td></tr>
     * <tr><td><code>{@link #Toolbar_titleMarginTop android:titleMarginTop}</code></td><td>Specifies extra space on the top side of the toolbar's title.</td></tr>
     * <tr><td><code>{@link #Toolbar_titleMarginBottom android:titleMarginBottom}</code></td><td>Specifies extra space on the bottom side of the toolbar's title.</td></tr>
     * <tr><td><code>{@link #Toolbar_maxButtonHeight android:maxButtonHeight}</code></td><td></td></tr>
     * <tr><td><code>{@link #Toolbar_buttonGravity android:buttonGravity}</code></td><td></td></tr>
     * <tr><td><code>{@link #Toolbar_collapseIcon android:collapseIcon}</code></td><td>Icon drawable to use for the collapse button.</td></tr>
     * <tr><td><code>{@link #Toolbar_contentInsetStartWithNavigation android:contentInsetStartWithNavigation}</code></td><td>Minimum inset for content views within a bar when a navigation button
     * is present, such as the Up button.</td></tr>
     * <tr><td><code>{@link #Toolbar_contentInsetEndWithActions android:contentInsetEndWithActions}</code></td><td>Minimum inset for content views within a bar when actions from a menu
     * are present.</td></tr>
     * </table>
     * @see #Toolbar_gravity
     * @see #Toolbar_title
     * @see #Toolbar_logo
     * @see #Toolbar_subtitle
     * @see #Toolbar_titleTextAppearance
     * @see #Toolbar_subtitleTextAppearance
     * @see #Toolbar_contentInsetStart
     * @see #Toolbar_contentInsetEnd
     * @see #Toolbar_contentInsetLeft
     * @see #Toolbar_contentInsetRight
     * @see #Toolbar_popupTheme
     * @see #Toolbar_navigationIcon
     * @see #Toolbar_navigationContentDescription
     * @see #Toolbar_collapseContentDescription
     * @see #Toolbar_titleTextColor
     * @see #Toolbar_subtitleTextColor
     * @see #Toolbar_logoDescription
     * @see #Toolbar_titleMargin
     * @see #Toolbar_titleMarginStart
     * @see #Toolbar_titleMarginEnd
     * @see #Toolbar_titleMarginTop
     * @see #Toolbar_titleMarginBottom
     * @see #Toolbar_maxButtonHeight
     * @see #Toolbar_buttonGravity
     * @see #Toolbar_collapseIcon
     * @see #Toolbar_contentInsetStartWithNavigation
     * @see #Toolbar_contentInsetEndWithActions
     */
    public static final int[] Toolbar={
      0x010100af, 0x010101e1, 0x010102be, 0x010102d1, 
      0x0101042e, 0x0101042f, 0x01010453, 0x01010454, 
      0x01010455, 0x01010456, 0x010104a9, 0x010104c0, 
      0x010104c1, 0x010104d0, 0x010104e3, 0x010104e4, 
      0x010104e9, 0x010104f8, 0x010104f9, 0x010104fa, 
      0x010104fb, 0x010104fc, 0x010104fd, 0x010104fe, 
      0x010104ff, 0x01010522, 0x01010523, 0x01120092
    };
    /**
     * <p>
     * @attr description
     * Specifies how an object should position its content, on both the X and Y axes,
     * within its own bounds.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
     * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
     * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
     * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
     * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the horizontal gravity: a left gravity will clip the right
     * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
     * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the vertical gravity: a top gravity will clip the bottom
     * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
     * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
     * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
     * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
     * </table>
     *
     * @attr name android:gravity
     */
    public static final int Toolbar_gravity=0;
    /**
     * <p>
     * @attr description
     * The title associated with the item.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:title
     */
    public static final int Toolbar_title=1;
    /**
     * <p>
     * @attr description
     * Drawable to set as the logo that appears at the starting side of
     * the Toolbar, just after the navigation button.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:logo
     */
    public static final int Toolbar_logo=2;
    /**
     * <p>
     * @attr description
     * Specifies subtitle text used for navigationMode="normal".
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:subtitle
     */
    public static final int Toolbar_subtitle=3;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#titleTextAppearance}
     * attribute's value can be found in the {@link #Toolbar} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:titleTextAppearance
     */
    public static final int Toolbar_titleTextAppearance=4;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#subtitleTextAppearance}
     * attribute's value can be found in the {@link #Toolbar} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:subtitleTextAppearance
     */
    public static final int Toolbar_subtitleTextAppearance=5;
    /**
     * <p>
     * @attr description
     * Minimum inset for content views within a bar. Navigation buttons and
     * menu views are excepted. Only valid for some themes and configurations.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:contentInsetStart
     */
    public static final int Toolbar_contentInsetStart=6;
    /**
     * <p>
     * @attr description
     * Minimum inset for content views within a bar. Navigation buttons and
     * menu views are excepted. Only valid for some themes and configurations.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:contentInsetEnd
     */
    public static final int Toolbar_contentInsetEnd=7;
    /**
     * <p>
     * @attr description
     * Minimum inset for content views within a bar. Navigation buttons and
     * menu views are excepted. Only valid for some themes and configurations.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:contentInsetLeft
     */
    public static final int Toolbar_contentInsetLeft=8;
    /**
     * <p>
     * @attr description
     * Minimum inset for content views within a bar. Navigation buttons and
     * menu views are excepted. Only valid for some themes and configurations.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:contentInsetRight
     */
    public static final int Toolbar_contentInsetRight=9;
    /**
     * <p>
     * @attr description
     * Reference to a theme that should be used to inflate popups
     * shown by widgets in the toolbar.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:popupTheme
     */
    public static final int Toolbar_popupTheme=10;
    /**
     * <p>
     * @attr description
     * Icon drawable to use for the navigation button located at
     * the start of the toolbar.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:navigationIcon
     */
    public static final int Toolbar_navigationIcon=11;
    /**
     * <p>
     * @attr description
     * Text to set as the content description for the navigation button
     * located at the start of the toolbar.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:navigationContentDescription
     */
    public static final int Toolbar_navigationContentDescription=12;
    /**
     * <p>
     * @attr description
     * Text to set as the content description for the collapse button.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:collapseContentDescription
     */
    public static final int Toolbar_collapseContentDescription=13;
    /**
     * <p>
     * @attr description
     * A color to apply to the title string.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:titleTextColor
     */
    public static final int Toolbar_titleTextColor=14;
    /**
     * <p>
     * @attr description
     * A color to apply to the subtitle string.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:subtitleTextColor
     */
    public static final int Toolbar_subtitleTextColor=15;
    /**
     * <p>
     * @attr description
     * A content description string to describe the appearance of the
     * associated logo image.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:logoDescription
     */
    public static final int Toolbar_logoDescription=16;
    /**
     * <p>
     * @attr description
     * Specifies extra space on the left, start, right and end sides
     * of the toolbar's title. Margin values should be positive.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:titleMargin
     */
    public static final int Toolbar_titleMargin=17;
    /**
     * <p>
     * @attr description
     * Specifies extra space on the start side of the toolbar's title.
     * If both this attribute and titleMargin are specified, then this
     * attribute takes precedence. Margin values should be positive.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:titleMarginStart
     */
    public static final int Toolbar_titleMarginStart=18;
    /**
     * <p>
     * @attr description
     * Specifies extra space on the end side of the toolbar's title.
     * If both this attribute and titleMargin are specified, then this
     * attribute takes precedence. Margin values should be positive.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:titleMarginEnd
     */
    public static final int Toolbar_titleMarginEnd=19;
    /**
     * <p>
     * @attr description
     * Specifies extra space on the top side of the toolbar's title.
     * If both this attribute and titleMargin are specified, then this
     * attribute takes precedence. Margin values should be positive.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:titleMarginTop
     */
    public static final int Toolbar_titleMarginTop=20;
    /**
     * <p>
     * @attr description
     * Specifies extra space on the bottom side of the toolbar's title.
     * If both this attribute and titleMargin are specified, then this
     * attribute takes precedence. Margin values should be positive.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:titleMarginBottom
     */
    public static final int Toolbar_titleMarginBottom=21;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#maxButtonHeight}
     * attribute's value can be found in the {@link #Toolbar} array.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:maxButtonHeight
     */
    public static final int Toolbar_maxButtonHeight=22;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#buttonGravity}
     * attribute's value can be found in the {@link #Toolbar} array.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
     * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
     * </table>
     *
     * @attr name android:buttonGravity
     */
    public static final int Toolbar_buttonGravity=23;
    /**
     * <p>
     * @attr description
     * Icon drawable to use for the collapse button.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:collapseIcon
     */
    public static final int Toolbar_collapseIcon=24;
    /**
     * <p>
     * @attr description
     * Minimum inset for content views within a bar when a navigation button
     * is present, such as the Up button. Only valid for some themes and configurations.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:contentInsetStartWithNavigation
     */
    public static final int Toolbar_contentInsetStartWithNavigation=25;
    /**
     * <p>
     * @attr description
     * Minimum inset for content views within a bar when actions from a menu
     * are present. Only valid for some themes and configurations.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:contentInsetEndWithActions
     */
    public static final int Toolbar_contentInsetEndWithActions=26;
    /**
     * Attributes that can be used with a Toolbar_LayoutParams.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Toolbar_LayoutParams_layout_gravity android:layout_gravity}</code></td><td>Standard gravity constant that a child supplies to its parent.</td></tr>
     * </table>
     * @see #Toolbar_LayoutParams_layout_gravity
     */
    public static final int[] Toolbar_LayoutParams={
      0x010100b3
    };
    /**
     * <p>
     * @attr description
     * Standard gravity constant that a child supplies to its parent.
     * Defines how the child view should be positioned, on both the X and Y axes, within its enclosing layout.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
     * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
     * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
     * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
     * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the horizontal gravity: a left gravity will clip the right
     * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
     * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the vertical gravity: a top gravity will clip the bottom
     * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
     * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
     * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
     * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
     * </table>
     *
     * @attr name android:layout_gravity
     */
    public static final int Toolbar_LayoutParams_layout_gravity=0;
    /**
     * Use specific transition subclass names as the root tag of the XML resource that
     * describes a {@link android.transition.Transition Transition},
     * such as <code>changeBounds</code>, <code>fade</code>, and <code>transitionSet</code>.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Transition_interpolator android:interpolator}</code></td><td>Sets the acceleration curve for the indeterminate animation.</td></tr>
     * <tr><td><code>{@link #Transition_duration android:duration}</code></td><td>Amount of time (in milliseconds) to display this frame.</td></tr>
     * <tr><td><code>{@link #Transition_startDelay android:startDelay}</code></td><td>Delay in milliseconds before the transition starts.</td></tr>
     * <tr><td><code>{@link #Transition_matchOrder android:matchOrder}</code></td><td>The match order to use for the transition.</td></tr>
     * </table>
     * @see #Transition_interpolator
     * @see #Transition_duration
     * @see #Transition_startDelay
     * @see #Transition_matchOrder
     */
    public static final int[] Transition={
      0x01010141, 0x01010198, 0x010103e2, 0x0101044f
    };
    /**
     * <p>
     * @attr description
     * Interpolator to be used in the animations spawned by this transition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:interpolator
     */
    public static final int Transition_interpolator=0;
    /**
     * <p>
     * @attr description
     * Amount of time (in milliseconds) that the transition should run.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:duration
     */
    public static final int Transition_duration=1;
    /**
     * <p>
     * @attr description
     * Delay in milliseconds before the transition starts.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:startDelay
     */
    public static final int Transition_startDelay=2;
    /**
     * <p>
     * @attr description
     * The match order to use for the transition. This is a comma-separated
     * list of values, containing one or more of the following:
     * id, itemId, name, instance. These correspond to
     * {@link android.transition.Transition#MATCH_ID},
     * {@link android.transition.Transition#MATCH_ITEM_ID},
     * {@link android.transition.Transition#MATCH_NAME}, and
     * {@link android.transition.Transition#MATCH_INSTANCE}, respectively.
     * This corresponds to {@link android.transition.Transition#setMatchOrder(int...)}.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:matchOrder
     */
    public static final int Transition_matchOrder=3;
    /**
     * Use <code>transitionManager</code> as the root tag of the XML resource that
     * describes a {@link android.transition.TransitionManager
     * TransitionManager}.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #TransitionManager_fromScene android:fromScene}</code></td><td>The originating scene in this scene change.</td></tr>
     * <tr><td><code>{@link #TransitionManager_toScene android:toScene}</code></td><td>The destination scene in this scene change.</td></tr>
     * <tr><td><code>{@link #TransitionManager_transition android:transition}</code></td><td>The id of a transition to be used in a particular scene change.</td></tr>
     * </table>
     * @see #TransitionManager_fromScene
     * @see #TransitionManager_toScene
     * @see #TransitionManager_transition
     */
    public static final int[] TransitionManager={
      0x010103dd, 0x010103de, 0x010103df
    };
    /**
     * <p>
     * @attr description
     * The originating scene in this scene change.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:fromScene
     */
    public static final int TransitionManager_fromScene=0;
    /**
     * <p>
     * @attr description
     * The destination scene in this scene change.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:toScene
     */
    public static final int TransitionManager_toScene=1;
    /**
     * <p>
     * @attr description
     * The id of a transition to be used in a particular scene change.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:transition
     */
    public static final int TransitionManager_transition=2;
    /**
     * Use <code>set</code> as the root tag of the XML resource that
     * describes a {@link android.transition.TransitionSet
     * TransitionSet} transition.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #TransitionSet_transitionOrdering android:transitionOrdering}</code></td><td></td></tr>
     * </table>
     * @see #TransitionSet_transitionOrdering
     */
    public static final int[] TransitionSet={
      0x010103e0
    };
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#transitionOrdering}
     * attribute's value can be found in the {@link #TransitionSet} array.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>sequential</td><td>1</td><td>child transitions should be played sequentially, in the same order
     * as the xml.</td></tr>
     * <tr><td>together</td><td>0</td><td>child transitions should be played together.</td></tr>
     * </table>
     *
     * @attr name android:transitionOrdering
     */
    public static final int TransitionSet_transitionOrdering=0;
    /**
     * Use <code>target</code> as the root tag of the XML resource that
     * describes a {@link android.transition.Transition#addTarget(int)
     * targetId} of a transition. There can be one or more targets inside
     * a <code>targets</code> tag, which is itself inside an appropriate
     * {@link android.R.styleable#Transition Transition} tag.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #TransitionTarget_targetClass android:targetClass}</code></td><td>The class part of the ComponentName to assign to the Intent, as per
     * {@link android.content.Intent#setComponent Intent.setComponent()}.</td></tr>
     * <tr><td><code>{@link #TransitionTarget_targetId android:targetId}</code></td><td>The id of a target on which this transition will animate changes.</td></tr>
     * <tr><td><code>{@link #TransitionTarget_excludeId android:excludeId}</code></td><td>The id of a target to exclude from this transition.</td></tr>
     * <tr><td><code>{@link #TransitionTarget_excludeClass android:excludeClass}</code></td><td>The fully-qualified name of the Class to exclude from this transition.</td></tr>
     * <tr><td><code>{@link #TransitionTarget_targetName android:targetName}</code></td><td>The transitionName of the target on which this transition will animation changes.</td></tr>
     * <tr><td><code>{@link #TransitionTarget_excludeName android:excludeName}</code></td><td>The transitionName of the target to exclude from this transition.</td></tr>
     * </table>
     * @see #TransitionTarget_targetClass
     * @see #TransitionTarget_targetId
     * @see #TransitionTarget_excludeId
     * @see #TransitionTarget_excludeClass
     * @see #TransitionTarget_targetName
     * @see #TransitionTarget_excludeName
     */
    public static final int[] TransitionTarget={
      0x0101002f, 0x010103dc, 0x01010441, 0x01010442, 
      0x0101044d, 0x0101044e
    };
    /**
     * <p>
     * @attr description
     * The fully-qualified name of the Class to include in this transition.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:targetClass
     */
    public static final int TransitionTarget_targetClass=0;
    /**
     * <p>
     * @attr description
     * The id of a target on which this transition will animate changes.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:targetId
     */
    public static final int TransitionTarget_targetId=1;
    /**
     * <p>
     * @attr description
     * The id of a target to exclude from this transition.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:excludeId
     */
    public static final int TransitionTarget_excludeId=2;
    /**
     * <p>
     * @attr description
     * The fully-qualified name of the Class to exclude from this transition.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:excludeClass
     */
    public static final int TransitionTarget_excludeClass=3;
    /**
     * <p>
     * @attr description
     * The transitionName of the target on which this transition will animation changes.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:targetName
     */
    public static final int TransitionTarget_targetName=4;
    /**
     * <p>
     * @attr description
     * The transitionName of the target to exclude from this transition.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:excludeName
     */
    public static final int TransitionTarget_excludeName=5;
    /**
     * Attributes that can be used with a TranslateAnimation.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #TranslateAnimation_fromXDelta android:fromXDelta}</code></td><td></td></tr>
     * <tr><td><code>{@link #TranslateAnimation_toXDelta android:toXDelta}</code></td><td></td></tr>
     * <tr><td><code>{@link #TranslateAnimation_fromYDelta android:fromYDelta}</code></td><td></td></tr>
     * <tr><td><code>{@link #TranslateAnimation_toYDelta android:toYDelta}</code></td><td></td></tr>
     * </table>
     * @see #TranslateAnimation_fromXDelta
     * @see #TranslateAnimation_toXDelta
     * @see #TranslateAnimation_fromYDelta
     * @see #TranslateAnimation_toYDelta
     */
    public static final int[] TranslateAnimation={
      0x010101c6, 0x010101c7, 0x010101c8, 0x010101c9
    };
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#fromXDelta}
     * attribute's value can be found in the {@link #TranslateAnimation} array.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:fromXDelta
     */
    public static final int TranslateAnimation_fromXDelta=0;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#toXDelta}
     * attribute's value can be found in the {@link #TranslateAnimation} array.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:toXDelta
     */
    public static final int TranslateAnimation_toXDelta=1;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#fromYDelta}
     * attribute's value can be found in the {@link #TranslateAnimation} array.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:fromYDelta
     */
    public static final int TranslateAnimation_fromYDelta=2;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#toYDelta}
     * attribute's value can be found in the {@link #TranslateAnimation} array.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:toYDelta
     */
    public static final int TranslateAnimation_toYDelta=3;
    /**
     * Use <code>translation-service</code> as the root tag of the XML resource that describes
     * a {@link android.service.translation.TranslationService}, which is referenced from
     * its {@link android.service.translation.TranslationService#SERVICE_META_DATA} meta-data
     * entry.
     * @hide
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #TranslationService_settingsActivity android:settingsActivity}</code></td><td>Fully qualified class name of an activity that allows the user to modify
     * the settings for this service.</td></tr>
     * </table>
     * @see #TranslationService_settingsActivity
     */
    @android.annotation.SystemApi
    public static final int[] TranslationService={
      0x01010225
    };
    /**
     * <p>
     * @attr description
     * Fully qualified class name of an activity that allows the user to modify
     * the settings for this service.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:settingsActivity
     */
    public static final int TranslationService_settingsActivity=0;
    /**
     * Use <code>trust-agent</code> as the root tag of the XML resource that
     * describes an {@link android.service.trust.TrustAgentService}, which is
     * referenced from its {@link android.service.trust.TrustAgentService#TRUST_AGENT_META_DATA}
     * meta-data entry.  Described here are the attributes that can be included in that tag.
     * @hide
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #TrustAgent_title android:title}</code></td><td>The title associated with the item.</td></tr>
     * <tr><td><code>{@link #TrustAgent_summary android:summary}</code></td><td>The summary for the item.</td></tr>
     * <tr><td><code>{@link #TrustAgent_settingsActivity android:settingsActivity}</code></td><td>Fully qualified class name of an activity that allows the user to modify
     * the settings for this service.</td></tr>
     * </table>
     * @see #TrustAgent_title
     * @see #TrustAgent_summary
     * @see #TrustAgent_settingsActivity
     */
    public static final int[] TrustAgent={
      0x010101e1, 0x010101e9, 0x01010225, 0x01120102
    };
    /**
     * <p>
     * @attr description
     * Title for a preference that allows that user to launch the
     * activity to modify trust agent settings. @hide
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:title
     */
    public static final int TrustAgent_title=0;
    /**
     * <p>
     * @attr description
     * Summary for the same preference as the title. @hide
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:summary
     */
    public static final int TrustAgent_summary=1;
    /**
     * <p>
     * @attr description
     * Component name of an activity that allows the user to modify
     * the settings for this trust agent. @hide
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:settingsActivity
     */
    public static final int TrustAgent_settingsActivity=2;
    /**
     * Use <code>tv-input</code> as the root tag of the XML resource that describes a
     * {@link android.media.tv.TvInputService}, which is referenced from its
     * {@link android.media.tv.TvInputService#SERVICE_META_DATA} meta-data entry.
     * Described here are the attributes that can be included in that tag.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #TvInputService_settingsActivity android:settingsActivity}</code></td><td>Fully qualified class name of an activity that allows the user to modify
     * the settings for this service.</td></tr>
     * <tr><td><code>{@link #TvInputService_setupActivity android:setupActivity}</code></td><td>Component name of an activity that allows the user to set up this service.</td></tr>
     * <tr><td><code>{@link #TvInputService_canRecord android:canRecord}</code></td><td>Attribute whether the TV input service can record programs.</td></tr>
     * <tr><td><code>{@link #TvInputService_tunerCount android:tunerCount}</code></td><td>The number of tuners that the TV input service is associated with.</td></tr>
     * <tr><td><code>{@link #TvInputService_canPauseRecording android:canPauseRecording}</code></td><td>Attribute whether the TV input service can pause recording programs.</td></tr>
     * </table>
     * @see #TvInputService_settingsActivity
     * @see #TvInputService_setupActivity
     * @see #TvInputService_canRecord
     * @see #TvInputService_tunerCount
     * @see #TvInputService_canPauseRecording
     */
    public static final int[] TvInputService={
      0x01010225, 0x010103f6, 0x0101051c, 0x0101051d, 
      0x0101061a
    };
    /**
     * <p>
     * @attr description
     * Component name of an activity that allows the user to modify the settings for this
     * service.
     * {@deprecated This value is deprecated and not used by the framework starting from API
     * level 26. Use setupActivity instead.}
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:settingsActivity
     */
    @Deprecated
    public static final int TvInputService_settingsActivity=0;
    /**
     * <p>
     * @attr description
     * Component name of an activity that allows the user to set up this service.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:setupActivity
     */
    public static final int TvInputService_setupActivity=1;
    /**
     * <p>
     * @attr description
     * Attribute whether the TV input service can record programs. This value can be changed
     * at runtime by calling
     * {@link android.media.tv.TvInputManager#updateTvInputInfo(android.media.tv.TvInputInfo)}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:canRecord
     */
    public static final int TvInputService_canRecord=2;
    /**
     * <p>
     * @attr description
     * The number of tuners that the TV input service is associated with. This value can be
     * changed at runtime by calling
     * {@link android.media.tv.TvInputManager#updateTvInputInfo(android.media.tv.TvInputInfo)}.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:tunerCount
     */
    public static final int TvInputService_tunerCount=3;
    /**
     * <p>
     * @attr description
     * Attribute whether the TV input service can pause recording programs.
     * This value can be changed at runtime by calling
     * {@link android.media.tv.TvInputManager#updateTvInputInfo(android.media.tv.TvInputInfo)}
     * .
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:canPauseRecording
     */
    public static final int TvInputService_canPauseRecording=4;
    /**
     * Attributes that can be used with a TwoLineListItem.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #TwoLineListItem_mode android:mode}</code></td><td></td></tr>
     * </table>
     * @see #TwoLineListItem_mode
     */
    public static final int[] TwoLineListItem={
      0x0101017e
    };
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#mode}
     * attribute's value can be found in the {@link #TwoLineListItem} array.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>collapsing</td><td>2</td><td>When selected show both lines, otherwise show only the first line.
     * This is the default mode.</td></tr>
     * <tr><td>oneLine</td><td>1</td><td>Always show only the first line.</td></tr>
     * <tr><td>twoLine</td><td>3</td><td>Always show both lines.</td></tr>
     * </table>
     *
     * @attr name android:mode
     */
    public static final int TwoLineListItem_mode=0;
    /**
     * Drawable used to draw vector paths.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #VectorDrawable_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * <tr><td><code>{@link #VectorDrawable_tint android:tint}</code></td><td>The tinting color for the image.</td></tr>
     * <tr><td><code>{@link #VectorDrawable_height android:height}</code></td><td>Makes the TextView be exactly this tall.</td></tr>
     * <tr><td><code>{@link #VectorDrawable_width android:width}</code></td><td>Makes the TextView be exactly this wide.</td></tr>
     * <tr><td><code>{@link #VectorDrawable_alpha android:alpha}</code></td><td>alpha property of the view, as a value between 0 (completely transparent) and 1
     * (completely opaque).</td></tr>
     * <tr><td><code>{@link #VectorDrawable_autoMirrored android:autoMirrored}</code></td><td>Indicates if the drawable needs to be mirrored when its layout direction is
     * RTL (right-to-left).</td></tr>
     * <tr><td><code>{@link #VectorDrawable_tintMode android:tintMode}</code></td><td>When a tint color is set, specifies its Porter-Duff blending mode.</td></tr>
     * <tr><td><code>{@link #VectorDrawable_viewportWidth android:viewportWidth}</code></td><td>The width of the canvas the drawing is on.</td></tr>
     * <tr><td><code>{@link #VectorDrawable_viewportHeight android:viewportHeight}</code></td><td>The height of the canvas the drawing is on.</td></tr>
     * <tr><td><code>{@link #VectorDrawable_opticalInsetLeft android:opticalInsetLeft}</code></td><td>Left optical inset.</td></tr>
     * <tr><td><code>{@link #VectorDrawable_opticalInsetTop android:opticalInsetTop}</code></td><td>Top optical inset.</td></tr>
     * <tr><td><code>{@link #VectorDrawable_opticalInsetRight android:opticalInsetRight}</code></td><td>Right optical inset.</td></tr>
     * <tr><td><code>{@link #VectorDrawable_opticalInsetBottom android:opticalInsetBottom}</code></td><td>Bottom optical inset.</td></tr>
     * </table>
     * @see #VectorDrawable_name
     * @see #VectorDrawable_tint
     * @see #VectorDrawable_height
     * @see #VectorDrawable_width
     * @see #VectorDrawable_alpha
     * @see #VectorDrawable_autoMirrored
     * @see #VectorDrawable_tintMode
     * @see #VectorDrawable_viewportWidth
     * @see #VectorDrawable_viewportHeight
     * @see #VectorDrawable_opticalInsetLeft
     * @see #VectorDrawable_opticalInsetTop
     * @see #VectorDrawable_opticalInsetRight
     * @see #VectorDrawable_opticalInsetBottom
     */
    public static final int[] VectorDrawable={
      0x01010003, 0x01010121, 0x01010155, 0x01010159, 
      0x0101031f, 0x010103ea, 0x010103fb, 0x01010402, 
      0x01010403, 0x01010588, 0x01010589, 0x0101058a, 
      0x0101058b
    };
    /**
     * <p>
     * @attr description
     * The name of this vector drawable.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int VectorDrawable_name=0;
    /**
     * <p>
     * @attr description
     * If set, specifies the color to apply to the drawable as a tint. By default,
     * no tint is applied. May be a color state list.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:tint
     */
    public static final int VectorDrawable_tint=1;
    /**
     * <p>
     * @attr description
     * The intrinsic height of the Vector Drawable.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:height
     */
    public static final int VectorDrawable_height=2;
    /**
     * <p>
     * @attr description
     * The intrinsic width of the Vector Drawable.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:width
     */
    public static final int VectorDrawable_width=3;
    /**
     * <p>
     * @attr description
     * The opacity of the whole vector drawable, as a value between 0
     * (completely transparent) and 1 (completely opaque).
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:alpha
     */
    public static final int VectorDrawable_alpha=4;
    /**
     * <p>
     * @attr description
     * Indicates if the drawable needs to be mirrored when its layout direction is
     * RTL (right-to-left).
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:autoMirrored
     */
    public static final int VectorDrawable_autoMirrored=5;
    /**
     * <p>
     * @attr description
     * When a tint color is set, specifies its Porter-Duff blending mode. The
     * default value is src_in, which treats the drawable as an alpha mask.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     *
     * @attr name android:tintMode
     */
    public static final int VectorDrawable_tintMode=6;
    /**
     * <p>
     * @attr description
     * The width of the canvas the drawing is on.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:viewportWidth
     */
    public static final int VectorDrawable_viewportWidth=7;
    /**
     * <p>
     * @attr description
     * The height of the canvas the drawing is on.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:viewportHeight
     */
    public static final int VectorDrawable_viewportHeight=8;
    /**
     * <p>
     * @attr description
     * Left optical inset.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:opticalInsetLeft
     */
    public static final int VectorDrawable_opticalInsetLeft=9;
    /**
     * <p>
     * @attr description
     * Top optical inset.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:opticalInsetTop
     */
    public static final int VectorDrawable_opticalInsetTop=10;
    /**
     * <p>
     * @attr description
     * Right optical inset.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:opticalInsetRight
     */
    public static final int VectorDrawable_opticalInsetRight=11;
    /**
     * <p>
     * @attr description
     * Bottom optical inset.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:opticalInsetBottom
     */
    public static final int VectorDrawable_opticalInsetBottom=12;
    /**
     * Defines the clip path used in VectorDrawables.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #VectorDrawableClipPath_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * <tr><td><code>{@link #VectorDrawableClipPath_pathData android:pathData}</code></td><td>The specification of the operations that define the path.</td></tr>
     * </table>
     * @see #VectorDrawableClipPath_name
     * @see #VectorDrawableClipPath_pathData
     */
    public static final int[] VectorDrawableClipPath={
      0x01010003, 0x01010405
    };
    /**
     * <p>
     * @attr description
     * The Name of this path.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int VectorDrawableClipPath_name=0;
    /**
     * <p>
     * @attr description
     * The specification of the operations that define the path.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:pathData
     */
    public static final int VectorDrawableClipPath_pathData=1;
    /**
     * Defines the group used in VectorDrawables.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #VectorDrawableGroup_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * <tr><td><code>{@link #VectorDrawableGroup_pivotX android:pivotX}</code></td><td></td></tr>
     * <tr><td><code>{@link #VectorDrawableGroup_pivotY android:pivotY}</code></td><td></td></tr>
     * <tr><td><code>{@link #VectorDrawableGroup_scaleX android:scaleX}</code></td><td>scale of the view in the x direction.</td></tr>
     * <tr><td><code>{@link #VectorDrawableGroup_scaleY android:scaleY}</code></td><td>scale of the view in the y direction.</td></tr>
     * <tr><td><code>{@link #VectorDrawableGroup_rotation android:rotation}</code></td><td>rotation of the view, in degrees.</td></tr>
     * <tr><td><code>{@link #VectorDrawableGroup_translateX android:translateX}</code></td><td>The amount to translate the group on X coordinate.</td></tr>
     * <tr><td><code>{@link #VectorDrawableGroup_translateY android:translateY}</code></td><td>The amount to translate the group on Y coordinate.</td></tr>
     * </table>
     * @see #VectorDrawableGroup_name
     * @see #VectorDrawableGroup_pivotX
     * @see #VectorDrawableGroup_pivotY
     * @see #VectorDrawableGroup_scaleX
     * @see #VectorDrawableGroup_scaleY
     * @see #VectorDrawableGroup_rotation
     * @see #VectorDrawableGroup_translateX
     * @see #VectorDrawableGroup_translateY
     */
    public static final int[] VectorDrawableGroup={
      0x01010003, 0x010101b5, 0x010101b6, 0x01010324, 
      0x01010325, 0x01010326, 0x0101045a, 0x0101045b
    };
    /**
     * <p>
     * @attr description
     * The name of this group.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int VectorDrawableGroup_name=0;
    /**
     * <p>
     * @attr description
     * The X coordinate of the center of rotation of a group.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:pivotX
     */
    public static final int VectorDrawableGroup_pivotX=1;
    /**
     * <p>
     * @attr description
     * The Y coordinate of the center of rotation of a group.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:pivotY
     */
    public static final int VectorDrawableGroup_pivotY=2;
    /**
     * <p>
     * @attr description
     * The amount to scale the group on X coordinate.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:scaleX
     */
    public static final int VectorDrawableGroup_scaleX=3;
    /**
     * <p>
     * @attr description
     * The amount to scale the group on X coordinate.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:scaleY
     */
    public static final int VectorDrawableGroup_scaleY=4;
    /**
     * <p>
     * @attr description
     * The amount to rotate the group.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:rotation
     */
    public static final int VectorDrawableGroup_rotation=5;
    /**
     * <p>
     * @attr description
     * The amount to translate the group on X coordinate.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:translateX
     */
    public static final int VectorDrawableGroup_translateX=6;
    /**
     * <p>
     * @attr description
     * The amount to translate the group on Y coordinate.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:translateY
     */
    public static final int VectorDrawableGroup_translateY=7;
    /**
     * Defines the path used in VectorDrawables.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #VectorDrawablePath_name android:name}</code></td><td>A unique name for the given item.</td></tr>
     * <tr><td><code>{@link #VectorDrawablePath_fillColor android:fillColor}</code></td><td>The color to fill the path if not defined implies no fill.</td></tr>
     * <tr><td><code>{@link #VectorDrawablePath_pathData android:pathData}</code></td><td>The specification of the operations that define the path.</td></tr>
     * <tr><td><code>{@link #VectorDrawablePath_strokeColor android:strokeColor}</code></td><td>The color to stroke the path if not defined implies no stroke.</td></tr>
     * <tr><td><code>{@link #VectorDrawablePath_strokeWidth android:strokeWidth}</code></td><td>The width a path stroke.</td></tr>
     * <tr><td><code>{@link #VectorDrawablePath_trimPathStart android:trimPathStart}</code></td><td>The fraction of the path to trim from the start from 0 to 1.</td></tr>
     * <tr><td><code>{@link #VectorDrawablePath_trimPathEnd android:trimPathEnd}</code></td><td>The fraction of the path to trim from the end from 0 to 1 .</td></tr>
     * <tr><td><code>{@link #VectorDrawablePath_trimPathOffset android:trimPathOffset}</code></td><td>Shift trim region (allows visible region to include the start and end) from 0 to 1.</td></tr>
     * <tr><td><code>{@link #VectorDrawablePath_strokeLineCap android:strokeLineCap}</code></td><td>sets the linecap for a stroked path.</td></tr>
     * <tr><td><code>{@link #VectorDrawablePath_strokeLineJoin android:strokeLineJoin}</code></td><td>sets the lineJoin for a stroked path.</td></tr>
     * <tr><td><code>{@link #VectorDrawablePath_strokeMiterLimit android:strokeMiterLimit}</code></td><td>sets the Miter limit for a stroked path.</td></tr>
     * <tr><td><code>{@link #VectorDrawablePath_strokeAlpha android:strokeAlpha}</code></td><td>The opacity of a path stroke, as a value between 0 (completely transparent)
     * and 1 (completely opaque).</td></tr>
     * <tr><td><code>{@link #VectorDrawablePath_fillAlpha android:fillAlpha}</code></td><td>The alpha of the path fill, as a value between 0 (completely transparent)
     * and 1 (completely opaque).</td></tr>
     * <tr><td><code>{@link #VectorDrawablePath_fillType android:fillType}</code></td><td>sets the fillType for a path.</td></tr>
     * </table>
     * @see #VectorDrawablePath_name
     * @see #VectorDrawablePath_fillColor
     * @see #VectorDrawablePath_pathData
     * @see #VectorDrawablePath_strokeColor
     * @see #VectorDrawablePath_strokeWidth
     * @see #VectorDrawablePath_trimPathStart
     * @see #VectorDrawablePath_trimPathEnd
     * @see #VectorDrawablePath_trimPathOffset
     * @see #VectorDrawablePath_strokeLineCap
     * @see #VectorDrawablePath_strokeLineJoin
     * @see #VectorDrawablePath_strokeMiterLimit
     * @see #VectorDrawablePath_strokeAlpha
     * @see #VectorDrawablePath_fillAlpha
     * @see #VectorDrawablePath_fillType
     */
    public static final int[] VectorDrawablePath={
      0x01010003, 0x01010404, 0x01010405, 0x01010406, 
      0x01010407, 0x01010408, 0x01010409, 0x0101040a, 
      0x0101040b, 0x0101040c, 0x0101040d, 0x010104cb, 
      0x010104cc, 0x0101051e
    };
    /**
     * <p>
     * @attr description
     * The name of this path.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int VectorDrawablePath_name=0;
    /**
     * <p>
     * @attr description
     * The color to fill the path if not defined implies no fill.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:fillColor
     */
    public static final int VectorDrawablePath_fillColor=1;
    /**
     * <p>
     * @attr description
     * The specification of the operations that define the path.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:pathData
     */
    public static final int VectorDrawablePath_pathData=2;
    /**
     * <p>
     * @attr description
     * The color to stroke the path if not defined implies no stroke.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:strokeColor
     */
    public static final int VectorDrawablePath_strokeColor=3;
    /**
     * <p>
     * @attr description
     * The width a path stroke.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:strokeWidth
     */
    public static final int VectorDrawablePath_strokeWidth=4;
    /**
     * <p>
     * @attr description
     * The fraction of the path to trim from the start from 0 to 1.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:trimPathStart
     */
    public static final int VectorDrawablePath_trimPathStart=5;
    /**
     * <p>
     * @attr description
     * The fraction of the path to trim from the end from 0 to 1 .
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:trimPathEnd
     */
    public static final int VectorDrawablePath_trimPathEnd=6;
    /**
     * <p>
     * @attr description
     * Shift trim region (allows visible region to include the start and end) from 0 to 1.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:trimPathOffset
     */
    public static final int VectorDrawablePath_trimPathOffset=7;
    /**
     * <p>
     * @attr description
     * sets the linecap for a stroked path.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>butt</td><td>0</td><td></td></tr>
     * <tr><td>round</td><td>1</td><td></td></tr>
     * <tr><td>square</td><td>2</td><td></td></tr>
     * </table>
     *
     * @attr name android:strokeLineCap
     */
    public static final int VectorDrawablePath_strokeLineCap=8;
    /**
     * <p>
     * @attr description
     * sets the lineJoin for a stroked path.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bevel</td><td>2</td><td></td></tr>
     * <tr><td>miter</td><td>0</td><td></td></tr>
     * <tr><td>round</td><td>1</td><td></td></tr>
     * </table>
     *
     * @attr name android:strokeLineJoin
     */
    public static final int VectorDrawablePath_strokeLineJoin=9;
    /**
     * <p>
     * @attr description
     * sets the Miter limit for a stroked path.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:strokeMiterLimit
     */
    public static final int VectorDrawablePath_strokeMiterLimit=10;
    /**
     * <p>
     * @attr description
     * The opacity of a path stroke, as a value between 0 (completely transparent)
     * and 1 (completely opaque).
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:strokeAlpha
     */
    public static final int VectorDrawablePath_strokeAlpha=11;
    /**
     * <p>
     * @attr description
     * The alpha of the path fill, as a value between 0 (completely transparent)
     * and 1 (completely opaque).
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:fillAlpha
     */
    public static final int VectorDrawablePath_fillAlpha=12;
    /**
     * <p>
     * @attr description
     * sets the fillType for a path. It is the same as SVG's "fill-rule" properties.
     * For more details, see https://www.w3.org/TR/SVG/painting.html#FillRuleProperty.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>evenOdd</td><td>1</td><td></td></tr>
     * <tr><td>nonZero</td><td>0</td><td></td></tr>
     * </table>
     *
     * @attr name android:fillType
     */
    public static final int VectorDrawablePath_fillType=13;
    /**
     * Attributes that can be used with a VerticalSlider_Layout.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #VerticalSlider_Layout_layout_scale android:layout_scale}</code></td><td></td></tr>
     * </table>
     * @see #VerticalSlider_Layout_layout_scale
     */
    public static final int[] VerticalSlider_Layout={
      0x01010193
    };
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#layout_scale}
     * attribute's value can be found in the {@link #VerticalSlider_Layout} array.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:layout_scale
     */
    public static final int VerticalSlider_Layout_layout_scale=0;
    /**
     * Attributes that are read when parsing a  tag.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * </table>
     */
    public static final int[] VideoView2={
      0x01120040, 0x01120041, 0x01120105
    };
    /**
     * Attributes that can be used with {@link android.view.View} or
     * any of its subclasses.  Also see {@link #ViewGroup_Layout} for
     * attributes that are processed by the view's parent.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #View_theme android:theme}</code></td><td>The overall theme to use for an activity.</td></tr>
     * <tr><td><code>{@link #View_scrollbarSize android:scrollbarSize}</code></td><td>Sets the width of vertical scrollbars and height of horizontal scrollbars.</td></tr>
     * <tr><td><code>{@link #View_scrollbarThumbHorizontal android:scrollbarThumbHorizontal}</code></td><td>Defines the horizontal scrollbar thumb drawable.</td></tr>
     * <tr><td><code>{@link #View_scrollbarThumbVertical android:scrollbarThumbVertical}</code></td><td>Defines the vertical scrollbar thumb drawable.</td></tr>
     * <tr><td><code>{@link #View_scrollbarTrackHorizontal android:scrollbarTrackHorizontal}</code></td><td>Defines the horizontal scrollbar track drawable.</td></tr>
     * <tr><td><code>{@link #View_scrollbarTrackVertical android:scrollbarTrackVertical}</code></td><td>Defines the vertical scrollbar track drawable.</td></tr>
     * <tr><td><code>{@link #View_scrollbarAlwaysDrawHorizontalTrack android:scrollbarAlwaysDrawHorizontalTrack}</code></td><td>Defines whether the horizontal scrollbar track should always be drawn.</td></tr>
     * <tr><td><code>{@link #View_scrollbarAlwaysDrawVerticalTrack android:scrollbarAlwaysDrawVerticalTrack}</code></td><td>Defines whether the vertical scrollbar track should always be drawn.</td></tr>
     * <tr><td><code>{@link #View_scrollbarStyle android:scrollbarStyle}</code></td><td>Controls the scrollbar style and position.</td></tr>
     * <tr><td><code>{@link #View_id android:id}</code></td><td>Supply an identifier name for this view, to later retrieve it
     * with {@link android.view.View#findViewById View.findViewById()} or
     * {@link android.app.Activity#findViewById Activity.findViewById()}.</td></tr>
     * <tr><td><code>{@link #View_tag android:tag}</code></td><td>Supply a tag for this view containing a String, to be retrieved
     * later with {@link android.view.View#getTag View.getTag()} or
     * searched for with {@link android.view.View#findViewWithTag
     * View.findViewWithTag()}.</td></tr>
     * <tr><td><code>{@link #View_scrollX android:scrollX}</code></td><td>The initial horizontal scroll offset, in pixels.</td></tr>
     * <tr><td><code>{@link #View_scrollY android:scrollY}</code></td><td>The initial vertical scroll offset, in pixels.</td></tr>
     * <tr><td><code>{@link #View_background android:background}</code></td><td>A drawable to use as the background.</td></tr>
     * <tr><td><code>{@link #View_padding android:padding}</code></td><td>Sets the padding, in pixels, of all four edges.</td></tr>
     * <tr><td><code>{@link #View_paddingLeft android:paddingLeft}</code></td><td>Sets the padding, in pixels, of the left edge; see {@link android.R.attr#padding}.</td></tr>
     * <tr><td><code>{@link #View_paddingTop android:paddingTop}</code></td><td>Sets the padding, in pixels, of the top edge; see {@link android.R.attr#padding}.</td></tr>
     * <tr><td><code>{@link #View_paddingRight android:paddingRight}</code></td><td>Sets the padding, in pixels, of the right edge; see {@link android.R.attr#padding}.</td></tr>
     * <tr><td><code>{@link #View_paddingBottom android:paddingBottom}</code></td><td>Sets the padding, in pixels, of the bottom edge; see {@link android.R.attr#padding}.</td></tr>
     * <tr><td><code>{@link #View_focusable android:focusable}</code></td><td>Controls whether a view can take focus.</td></tr>
     * <tr><td><code>{@link #View_focusableInTouchMode android:focusableInTouchMode}</code></td><td>Boolean that controls whether a view can take focus while in touch mode.</td></tr>
     * <tr><td><code>{@link #View_visibility android:visibility}</code></td><td>Controls the initial visibility of the view.</td></tr>
     * <tr><td><code>{@link #View_fitsSystemWindows android:fitsSystemWindows}</code></td><td>Boolean internal attribute to adjust view layout based on
     * system windows such as the status bar.</td></tr>
     * <tr><td><code>{@link #View_scrollbars android:scrollbars}</code></td><td>Defines which scrollbars should be displayed on scrolling or not.</td></tr>
     * <tr><td><code>{@link #View_fadingEdge android:fadingEdge}</code></td><td>This attribute is ignored in API level 14
     * ({@link android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH}) and higher.</td></tr>
     * <tr><td><code>{@link #View_fadingEdgeLength android:fadingEdgeLength}</code></td><td>Defines the length of the fading edges.</td></tr>
     * <tr><td><code>{@link #View_nextFocusLeft android:nextFocusLeft}</code></td><td>Defines the next view to give focus to when the next focus is
     * {@link android.view.View#FOCUS_LEFT}.</td></tr>
     * <tr><td><code>{@link #View_nextFocusRight android:nextFocusRight}</code></td><td>Defines the next view to give focus to when the next focus is
     * {@link android.view.View#FOCUS_RIGHT}
     * If the reference refers to a view that does not exist or is part
     * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
     * will result when the reference is accessed.</td></tr>
     * <tr><td><code>{@link #View_nextFocusUp android:nextFocusUp}</code></td><td>Defines the next view to give focus to when the next focus is
     * {@link android.view.View#FOCUS_UP}
     * If the reference refers to a view that does not exist or is part
     * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
     * will result when the reference is accessed.</td></tr>
     * <tr><td><code>{@link #View_nextFocusDown android:nextFocusDown}</code></td><td>Defines the next view to give focus to when the next focus is
     * {@link android.view.View#FOCUS_DOWN}
     * If the reference refers to a view that does not exist or is part
     * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
     * will result when the reference is accessed.</td></tr>
     * <tr><td><code>{@link #View_clickable android:clickable}</code></td><td>Defines whether this view reacts to click events.</td></tr>
     * <tr><td><code>{@link #View_longClickable android:longClickable}</code></td><td>Defines whether this view reacts to long click events.</td></tr>
     * <tr><td><code>{@link #View_saveEnabled android:saveEnabled}</code></td><td>If false, no state will be saved for this view when it is being
     * frozen.</td></tr>
     * <tr><td><code>{@link #View_drawingCacheQuality android:drawingCacheQuality}</code></td><td>Defines the quality of translucent drawing caches.</td></tr>
     * <tr><td><code>{@link #View_duplicateParentState android:duplicateParentState}</code></td><td>When this attribute is set to true, the view gets its drawable state
     * (focused, pressed, etc.) from its direct parent rather than from itself.</td></tr>
     * <tr><td><code>{@link #View_foreground android:foreground}</code></td><td>Defines the drawable to draw over the content.</td></tr>
     * <tr><td><code>{@link #View_minWidth android:minWidth}</code></td><td></td></tr>
     * <tr><td><code>{@link #View_minHeight android:minHeight}</code></td><td></td></tr>
     * <tr><td><code>{@link #View_foregroundGravity android:foregroundGravity}</code></td><td>Defines the gravity to apply to the foreground drawable.</td></tr>
     * <tr><td><code>{@link #View_soundEffectsEnabled android:soundEffectsEnabled}</code></td><td>Boolean that controls whether a view should have sound effects
     * enabled for events such as clicking and touching.</td></tr>
     * <tr><td><code>{@link #View_keepScreenOn android:keepScreenOn}</code></td><td>Controls whether the view's window should keep the screen on
     * while visible.</td></tr>
     * <tr><td><code>{@link #View_isScrollContainer android:isScrollContainer}</code></td><td>Set this if the view will serve as a scrolling container, meaning
     * that it can be resized to shrink its overall window so that there
     * will be space for an input method.</td></tr>
     * <tr><td><code>{@link #View_hapticFeedbackEnabled android:hapticFeedbackEnabled}</code></td><td>Boolean that controls whether a view should have haptic feedback
     * enabled for events such as long presses.</td></tr>
     * <tr><td><code>{@link #View_onClick android:onClick}</code></td><td>Name of the method in this View's context to invoke when the view is
     * clicked.</td></tr>
     * <tr><td><code>{@link #View_contentDescription android:contentDescription}</code></td><td>The content description associated with the item.</td></tr>
     * <tr><td><code>{@link #View_scrollbarFadeDuration android:scrollbarFadeDuration}</code></td><td>Defines the delay in milliseconds that a scrollbar takes to fade out.</td></tr>
     * <tr><td><code>{@link #View_scrollbarDefaultDelayBeforeFade android:scrollbarDefaultDelayBeforeFade}</code></td><td>Defines the delay in milliseconds that a scrollbar waits before fade out.</td></tr>
     * <tr><td><code>{@link #View_fadeScrollbars android:fadeScrollbars}</code></td><td>Defines whether to fade out scrollbars when they are not in use.</td></tr>
     * <tr><td><code>{@link #View_overScrollMode android:overScrollMode}</code></td><td>Defines over-scrolling behavior.</td></tr>
     * <tr><td><code>{@link #View_filterTouchesWhenObscured android:filterTouchesWhenObscured}</code></td><td>Specifies whether to filter touches when the view's window is obscured by
     * another visible window.</td></tr>
     * <tr><td><code>{@link #View_alpha android:alpha}</code></td><td>alpha property of the view, as a value between 0 (completely transparent) and 1
     * (completely opaque).</td></tr>
     * <tr><td><code>{@link #View_transformPivotX android:transformPivotX}</code></td><td>x location of the pivot point around which the view will rotate and scale.</td></tr>
     * <tr><td><code>{@link #View_transformPivotY android:transformPivotY}</code></td><td>y location of the pivot point around which the view will rotate and scale.</td></tr>
     * <tr><td><code>{@link #View_translationX android:translationX}</code></td><td>translation in x of the view.</td></tr>
     * <tr><td><code>{@link #View_translationY android:translationY}</code></td><td>translation in y of the view.</td></tr>
     * <tr><td><code>{@link #View_scaleX android:scaleX}</code></td><td>scale of the view in the x direction.</td></tr>
     * <tr><td><code>{@link #View_scaleY android:scaleY}</code></td><td>scale of the view in the y direction.</td></tr>
     * <tr><td><code>{@link #View_rotation android:rotation}</code></td><td>rotation of the view, in degrees.</td></tr>
     * <tr><td><code>{@link #View_rotationX android:rotationX}</code></td><td>rotation of the view around the x axis, in degrees.</td></tr>
     * <tr><td><code>{@link #View_rotationY android:rotationY}</code></td><td>rotation of the view around the y axis, in degrees.</td></tr>
     * <tr><td><code>{@link #View_verticalScrollbarPosition android:verticalScrollbarPosition}</code></td><td>Determines which side the vertical scroll bar should be placed on.</td></tr>
     * <tr><td><code>{@link #View_nextFocusForward android:nextFocusForward}</code></td><td>Defines the next view to give focus to when the next focus is
     * {@link android.view.View#FOCUS_FORWARD}
     * If the reference refers to a view that does not exist or is part
     * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
     * will result when the reference is accessed.</td></tr>
     * <tr><td><code>{@link #View_layerType android:layerType}</code></td><td>Specifies the type of layer backing this view.</td></tr>
     * <tr><td><code>{@link #View_requiresFadingEdge android:requiresFadingEdge}</code></td><td>Defines which edges should be faded on scrolling.</td></tr>
     * <tr><td><code>{@link #View_importantForAccessibility android:importantForAccessibility}</code></td><td>Describes whether or not this view is important for accessibility.</td></tr>
     * <tr><td><code>{@link #View_textDirection android:textDirection}</code></td><td>Defines the direction of the text.</td></tr>
     * <tr><td><code>{@link #View_textAlignment android:textAlignment}</code></td><td>Defines the alignment of the text.</td></tr>
     * <tr><td><code>{@link #View_layoutDirection android:layoutDirection}</code></td><td>Defines the direction of layout drawing.</td></tr>
     * <tr><td><code>{@link #View_paddingStart android:paddingStart}</code></td><td>Sets the padding, in pixels, of the start edge; see {@link android.R.attr#padding}.</td></tr>
     * <tr><td><code>{@link #View_paddingEnd android:paddingEnd}</code></td><td>Sets the padding, in pixels, of the end edge; see {@link android.R.attr#padding}.</td></tr>
     * <tr><td><code>{@link #View_labelFor android:labelFor}</code></td><td>Specifies the id of a view for which this view serves as a label for
     * accessibility purposes.</td></tr>
     * <tr><td><code>{@link #View_accessibilityLiveRegion android:accessibilityLiveRegion}</code></td><td>Indicates to accessibility services whether the user should be notified when
     * this view changes.</td></tr>
     * <tr><td><code>{@link #View_translationZ android:translationZ}</code></td><td>translation in z of the view.</td></tr>
     * <tr><td><code>{@link #View_transitionName android:transitionName}</code></td><td>Names a View such that it can be identified for Transitions.</td></tr>
     * <tr><td><code>{@link #View_nestedScrollingEnabled android:nestedScrollingEnabled}</code></td><td>Specifies that this view should permit nested scrolling within a compatible
     * ancestor view.</td></tr>
     * <tr><td><code>{@link #View_elevation android:elevation}</code></td><td>base z depth of the view.</td></tr>
     * <tr><td><code>{@link #View_stateListAnimator android:stateListAnimator}</code></td><td>Sets the state-based animator for the View.</td></tr>
     * <tr><td><code>{@link #View_backgroundTint android:backgroundTint}</code></td><td>Tint to apply to the background.</td></tr>
     * <tr><td><code>{@link #View_backgroundTintMode android:backgroundTintMode}</code></td><td>Blending mode used to apply the background tint.</td></tr>
     * <tr><td><code>{@link #View_foregroundTint android:foregroundTint}</code></td><td>Tint to apply to the foreground.</td></tr>
     * <tr><td><code>{@link #View_foregroundTintMode android:foregroundTintMode}</code></td><td>Blending mode used to apply the foreground tint.</td></tr>
     * <tr><td><code>{@link #View_outlineProvider android:outlineProvider}</code></td><td>ViewOutlineProvider used to determine the View's Outline.</td></tr>
     * <tr><td><code>{@link #View_accessibilityTraversalBefore android:accessibilityTraversalBefore}</code></td><td>Sets the id of a view before which this one is visited in accessibility traversal.</td></tr>
     * <tr><td><code>{@link #View_accessibilityTraversalAfter android:accessibilityTraversalAfter}</code></td><td>Sets the id of a view after which this one is visited in accessibility traversal.</td></tr>
     * <tr><td><code>{@link #View_scrollIndicators android:scrollIndicators}</code></td><td>Defines which scroll indicators should be displayed when the view
     * can be scrolled.</td></tr>
     * <tr><td><code>{@link #View_contextClickable android:contextClickable}</code></td><td>Defines whether this view reacts to context click events.</td></tr>
     * <tr><td><code>{@link #View_pointerIcon android:pointerIcon}</code></td><td></td></tr>
     * <tr><td><code>{@link #View_forceHasOverlappingRendering android:forceHasOverlappingRendering}</code></td><td>Whether this view has elements that may overlap when drawn.</td></tr>
     * <tr><td><code>{@link #View_tooltipText android:tooltipText}</code></td><td>The tooltip text associated with the item.</td></tr>
     * <tr><td><code>{@link #View_paddingHorizontal android:paddingHorizontal}</code></td><td>Sets the padding, in pixels, of the left and right edges; see
     * {@link android.R.attr#padding}.</td></tr>
     * <tr><td><code>{@link #View_paddingVertical android:paddingVertical}</code></td><td>Sets the padding, in pixels, of the top and bottom edges; see
     * {@link android.R.attr#padding}.</td></tr>
     * <tr><td><code>{@link #View_keyboardNavigationCluster android:keyboardNavigationCluster}</code></td><td>Whether this view is a root of a keyboard navigation cluster.</td></tr>
     * <tr><td><code>{@link #View_nextClusterForward android:nextClusterForward}</code></td><td>Defines the next keyboard navigation cluster.</td></tr>
     * <tr><td><code>{@link #View_focusedByDefault android:focusedByDefault}</code></td><td>Whether this view is a default-focus view.</td></tr>
     * <tr><td><code>{@link #View_autofillHints android:autofillHints}</code></td><td>Describes the content of a view so that a autofill service can fill in the appropriate
     * data.</td></tr>
     * <tr><td><code>{@link #View_importantForAutofill android:importantForAutofill}</code></td><td>Hints the Android System whether the view node associated with this View should be
     * included in a view structure used for autofill purposes.</td></tr>
     * <tr><td><code>{@link #View_defaultFocusHighlightEnabled android:defaultFocusHighlightEnabled}</code></td><td>Whether this View should use a default focus highlight when it gets focused but
     * doesn't have {@link android.R.attr#state_focused} defined in its background.</td></tr>
     * <tr><td><code>{@link #View_screenReaderFocusable android:screenReaderFocusable}</code></td><td>Whether this view should be treated as a focusable unit by screen reader accessibility
     * tools.</td></tr>
     * <tr><td><code>{@link #View_accessibilityPaneTitle android:accessibilityPaneTitle}</code></td><td>The title this view should present to accessibility as a pane title.</td></tr>
     * <tr><td><code>{@link #View_accessibilityHeading android:accessibilityHeading}</code></td><td>Whether or not this view is a heading for accessibility purposes.</td></tr>
     * <tr><td><code>{@link #View_outlineSpotShadowColor android:outlineSpotShadowColor}</code></td><td>Sets the color of the spot shadow that is drawn when the view has a positive Z or
     * elevation value.</td></tr>
     * <tr><td><code>{@link #View_outlineAmbientShadowColor android:outlineAmbientShadowColor}</code></td><td>Sets the color of the ambient shadow that is drawn when the view has a positive Z
     * or elevation value.</td></tr>
     * <tr><td><code>{@link #View_forceDarkAllowed android:forceDarkAllowed}</code></td><td><p>Whether or not the force dark feature is allowed to be applied to this View.</td></tr>
     * <tr><td><code>{@link #View_importantForContentCapture android:importantForContentCapture}</code></td><td>Hints the Android System whether the view node associated with this View should be
     * use for content capture purposes.</td></tr>
     * <tr><td><code>{@link #View_allowClickWhenDisabled android:allowClickWhenDisabled}</code></td><td>Whether or not allow clicks on disabled view.</td></tr>
     * <tr><td><code>{@link #View_clipToOutline android:clipToOutline}</code></td><td><p>Whether the View's Outline should be used to clip the contents of the View.</td></tr>
     * </table>
     * @see #View_theme
     * @see #View_scrollbarSize
     * @see #View_scrollbarThumbHorizontal
     * @see #View_scrollbarThumbVertical
     * @see #View_scrollbarTrackHorizontal
     * @see #View_scrollbarTrackVertical
     * @see #View_scrollbarAlwaysDrawHorizontalTrack
     * @see #View_scrollbarAlwaysDrawVerticalTrack
     * @see #View_scrollbarStyle
     * @see #View_id
     * @see #View_tag
     * @see #View_scrollX
     * @see #View_scrollY
     * @see #View_background
     * @see #View_padding
     * @see #View_paddingLeft
     * @see #View_paddingTop
     * @see #View_paddingRight
     * @see #View_paddingBottom
     * @see #View_focusable
     * @see #View_focusableInTouchMode
     * @see #View_visibility
     * @see #View_fitsSystemWindows
     * @see #View_scrollbars
     * @see #View_fadingEdge
     * @see #View_fadingEdgeLength
     * @see #View_nextFocusLeft
     * @see #View_nextFocusRight
     * @see #View_nextFocusUp
     * @see #View_nextFocusDown
     * @see #View_clickable
     * @see #View_longClickable
     * @see #View_saveEnabled
     * @see #View_drawingCacheQuality
     * @see #View_duplicateParentState
     * @see #View_foreground
     * @see #View_minWidth
     * @see #View_minHeight
     * @see #View_foregroundGravity
     * @see #View_soundEffectsEnabled
     * @see #View_keepScreenOn
     * @see #View_isScrollContainer
     * @see #View_hapticFeedbackEnabled
     * @see #View_onClick
     * @see #View_contentDescription
     * @see #View_scrollbarFadeDuration
     * @see #View_scrollbarDefaultDelayBeforeFade
     * @see #View_fadeScrollbars
     * @see #View_overScrollMode
     * @see #View_filterTouchesWhenObscured
     * @see #View_alpha
     * @see #View_transformPivotX
     * @see #View_transformPivotY
     * @see #View_translationX
     * @see #View_translationY
     * @see #View_scaleX
     * @see #View_scaleY
     * @see #View_rotation
     * @see #View_rotationX
     * @see #View_rotationY
     * @see #View_verticalScrollbarPosition
     * @see #View_nextFocusForward
     * @see #View_layerType
     * @see #View_requiresFadingEdge
     * @see #View_importantForAccessibility
     * @see #View_textDirection
     * @see #View_textAlignment
     * @see #View_layoutDirection
     * @see #View_paddingStart
     * @see #View_paddingEnd
     * @see #View_labelFor
     * @see #View_accessibilityLiveRegion
     * @see #View_translationZ
     * @see #View_transitionName
     * @see #View_nestedScrollingEnabled
     * @see #View_elevation
     * @see #View_stateListAnimator
     * @see #View_backgroundTint
     * @see #View_backgroundTintMode
     * @see #View_foregroundTint
     * @see #View_foregroundTintMode
     * @see #View_outlineProvider
     * @see #View_accessibilityTraversalBefore
     * @see #View_accessibilityTraversalAfter
     * @see #View_scrollIndicators
     * @see #View_contextClickable
     * @see #View_pointerIcon
     * @see #View_forceHasOverlappingRendering
     * @see #View_tooltipText
     * @see #View_paddingHorizontal
     * @see #View_paddingVertical
     * @see #View_keyboardNavigationCluster
     * @see #View_nextClusterForward
     * @see #View_focusedByDefault
     * @see #View_autofillHints
     * @see #View_importantForAutofill
     * @see #View_defaultFocusHighlightEnabled
     * @see #View_screenReaderFocusable
     * @see #View_accessibilityPaneTitle
     * @see #View_accessibilityHeading
     * @see #View_outlineSpotShadowColor
     * @see #View_outlineAmbientShadowColor
     * @see #View_forceDarkAllowed
     * @see #View_importantForContentCapture
     * @see #View_allowClickWhenDisabled
     * @see #View_clipToOutline
     */
    public static final int[] View={
      0x01010000, 0x01010063, 0x01010064, 0x01010065, 
      0x01010066, 0x01010067, 0x01010068, 0x01010069, 
      0x0101007f, 0x010100d0, 0x010100d1, 0x010100d2, 
      0x010100d3, 0x010100d4, 0x010100d5, 0x010100d6, 
      0x010100d7, 0x010100d8, 0x010100d9, 0x010100da, 
      0x010100db, 0x010100dc, 0x010100dd, 0x010100de, 
      0x010100df, 0x010100e0, 0x010100e1, 0x010100e2, 
      0x010100e3, 0x010100e4, 0x010100e5, 0x010100e6, 
      0x010100e7, 0x010100e8, 0x010100e9, 0x01010109, 
      0x0101013f, 0x01010140, 0x01010200, 0x01010215, 
      0x01010216, 0x0101024e, 0x0101025e, 0x0101026f, 
      0x01010273, 0x010102a8, 0x010102a9, 0x010102aa, 
      0x010102c1, 0x010102c4, 0x0101031f, 0x01010320, 
      0x01010321, 0x01010322, 0x01010323, 0x01010324, 
      0x01010325, 0x01010326, 0x01010327, 0x01010328, 
      0x01010334, 0x0101033c, 0x01010354, 0x010103a5, 
      0x010103aa, 0x010103b0, 0x010103b1, 0x010103b2, 
      0x010103b3, 0x010103b4, 0x010103c6, 0x010103ee, 
      0x010103fa, 0x01010400, 0x01010436, 0x01010440, 
      0x01010448, 0x0101046b, 0x0101046c, 0x0101046d, 
      0x0101046e, 0x010104b8, 0x010104d1, 0x010104d2, 
      0x010104e6, 0x010104e7, 0x01010509, 0x01010521, 
      0x01010534, 0x0101053d, 0x0101053e, 0x01010540, 
      0x01010542, 0x01010544, 0x01010556, 0x01010558, 
      0x01010562, 0x01010574, 0x0101057c, 0x01010580, 
      0x01010581, 0x01010582, 0x0101058c, 0x01010607, 
      0x01010618, 0x01010628, 0x01120000, 0x01120001, 
      0x01120003, 0x01120004, 0x01120005, 0x01120050, 
      0x011200d1
    };
    /**
     * <p>
     * @attr description
     * Specifies a theme override for a view. When a theme override is set, the
     * view will be inflated using a {@link android.content.Context} themed with
     * the specified resource. During XML inflation, any child views under the
     * view with a theme override will inherit the themed context.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:theme
     */
    public static final int View_theme=0;
    /**
     * <p>
     * @attr description
     * Sets the width of vertical scrollbars and height of horizontal scrollbars.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:scrollbarSize
     */
    public static final int View_scrollbarSize=1;
    /**
     * <p>
     * @attr description
     * Defines the horizontal scrollbar thumb drawable.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:scrollbarThumbHorizontal
     */
    public static final int View_scrollbarThumbHorizontal=2;
    /**
     * <p>
     * @attr description
     * Defines the vertical scrollbar thumb drawable.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:scrollbarThumbVertical
     */
    public static final int View_scrollbarThumbVertical=3;
    /**
     * <p>
     * @attr description
     * Defines the horizontal scrollbar track drawable.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:scrollbarTrackHorizontal
     */
    public static final int View_scrollbarTrackHorizontal=4;
    /**
     * <p>
     * @attr description
     * Defines the vertical scrollbar track drawable.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:scrollbarTrackVertical
     */
    public static final int View_scrollbarTrackVertical=5;
    /**
     * <p>
     * @attr description
     * Defines whether the horizontal scrollbar track should always be drawn.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:scrollbarAlwaysDrawHorizontalTrack
     */
    public static final int View_scrollbarAlwaysDrawHorizontalTrack=6;
    /**
     * <p>
     * @attr description
     * Defines whether the vertical scrollbar track should always be drawn.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:scrollbarAlwaysDrawVerticalTrack
     */
    public static final int View_scrollbarAlwaysDrawVerticalTrack=7;
    /**
     * <p>
     * @attr description
     * Controls the scrollbar style and position. The scrollbars can be overlaid or
     * inset. When inset, they add to the padding of the view. And the
     * scrollbars can be drawn inside the padding area or on the edge of
     * the view. For example, if a view has a background drawable and you
     * want to draw the scrollbars inside the padding specified by the
     * drawable, you can use insideOverlay or insideInset. If you want them
     * to appear at the edge of the view, ignoring the padding, then you can
     * use outsideOverlay or outsideInset.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>insideInset</td><td>1000000</td><td>Inside the padding and inset.</td></tr>
     * <tr><td>insideOverlay</td><td>0</td><td>Inside the padding and overlaid.</td></tr>
     * <tr><td>outsideInset</td><td>3000000</td><td>Edge of the view and inset.</td></tr>
     * <tr><td>outsideOverlay</td><td>2000000</td><td>Edge of the view and overlaid.</td></tr>
     * </table>
     *
     * @attr name android:scrollbarStyle
     */
    public static final int View_scrollbarStyle=8;
    /**
     * <p>
     * @attr description
     * Supply an identifier name for this view, to later retrieve it
     * with {@link android.view.View#findViewById View.findViewById()} or
     * {@link android.app.Activity#findViewById Activity.findViewById()}.
     * This must be a
     * resource reference; typically you set this using the
     * <code>@+</code> syntax to create a new ID resources.
     * For example: <code>android:id="@+id/my_id"</code> which
     * allows you to later retrieve the view
     * with <code>findViewById(R.id.my_id)</code>.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:id
     */
    public static final int View_id=9;
    /**
     * <p>
     * @attr description
     * Supply a tag for this view containing a String, to be retrieved
     * later with {@link android.view.View#getTag View.getTag()} or
     * searched for with {@link android.view.View#findViewWithTag
     * View.findViewWithTag()}.  It is generally preferable to use
     * IDs (through the android:id attribute) instead of tags because
     * they are faster and allow for compile-time type checking.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:tag
     */
    public static final int View_tag=10;
    /**
     * <p>
     * @attr description
     * The initial horizontal scroll offset, in pixels.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:scrollX
     */
    public static final int View_scrollX=11;
    /**
     * <p>
     * @attr description
     * The initial vertical scroll offset, in pixels.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:scrollY
     */
    public static final int View_scrollY=12;
    /**
     * <p>
     * @attr description
     * A drawable to use as the background.  This can be either a reference
     * to a full drawable resource (such as a PNG image, 9-patch,
     * XML state list description, etc), or a solid color such as "#ff000000"
     * (black).
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:background
     */
    public static final int View_background=13;
    /**
     * <p>
     * @attr description
     * Sets the padding, in pixels, of all four edges. Padding is defined as
     * space between the edges of the view and the view's content. This value will take
     * precedence over any of the edge-specific values (paddingLeft, paddingTop,
     * paddingRight, paddingBottom, paddingHorizontal and paddingVertical), but will
     * not override paddingStart or paddingEnd, if set. A view's size
     * will include its padding. If a {@link android.R.attr#background}
     * is provided, the padding will initially be set to that (0 if the
     * drawable does not have padding). Explicitly setting a padding value
     * will override the corresponding padding found in the background.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:padding
     */
    public static final int View_padding=14;
    /**
     * <p>
     * @attr description
     * Sets the padding, in pixels, of the left edge; see {@link android.R.attr#padding}.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:paddingLeft
     */
    public static final int View_paddingLeft=15;
    /**
     * <p>
     * @attr description
     * Sets the padding, in pixels, of the top edge; see {@link android.R.attr#padding}.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:paddingTop
     */
    public static final int View_paddingTop=16;
    /**
     * <p>
     * @attr description
     * Sets the padding, in pixels, of the right edge; see {@link android.R.attr#padding}.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:paddingRight
     */
    public static final int View_paddingRight=17;
    /**
     * <p>
     * @attr description
     * Sets the padding, in pixels, of the bottom edge; see {@link android.R.attr#padding}.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:paddingBottom
     */
    public static final int View_paddingBottom=18;
    /**
     * <p>
     * @attr description
     * Controls whether a view can take focus.  By default, this is "auto" which lets the
     * framework determine whether a user can move focus to a view.  By setting this attribute
     * to true the view is allowed to take focus. By setting it to "false" the view will not
     * take focus. This value does not impact the behavior of
     * directly calling {@link android.view.View#requestFocus}, which will
     * always request focus regardless of this view.  It only impacts where
     * focus navigation will try to move focus.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>auto</td><td>10</td><td></td></tr>
     * </table>
     *
     * @attr name android:focusable
     */
    public static final int View_focusable=19;
    /**
     * <p>
     * @attr description
     * Boolean that controls whether a view can take focus while in touch mode.
     * If this is true for a view, that view can gain focus when clicked on, and can keep
     * focus if another view is clicked on that doesn't have this attribute set to true.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:focusableInTouchMode
     */
    public static final int View_focusableInTouchMode=20;
    /**
     * <p>
     * @attr description
     * Controls the initial visibility of the view.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>gone</td><td>2</td><td>Completely hidden, as if the view had not been added.</td></tr>
     * <tr><td>invisible</td><td>1</td><td>Not displayed, but taken into account during layout (space is left for it).</td></tr>
     * <tr><td>visible</td><td>0</td><td>Visible on screen; the default value.</td></tr>
     * </table>
     *
     * @attr name android:visibility
     */
    public static final int View_visibility=21;
    /**
     * <p>
     * @attr description
     * Boolean internal attribute to adjust view layout based on
     * system windows such as the status bar.
     * If true, adjusts the padding of this view to leave space for the system windows.
     * Will only take effect if this view is in a non-embedded activity.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:fitsSystemWindows
     */
    public static final int View_fitsSystemWindows=22;
    /**
     * <p>
     * @attr description
     * Defines which scrollbars should be displayed on scrolling or not.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>horizontal</td><td>100</td><td>Displays horizontal scrollbar only.</td></tr>
     * <tr><td>none</td><td>0</td><td>No scrollbar is displayed.</td></tr>
     * <tr><td>vertical</td><td>200</td><td>Displays vertical scrollbar only.</td></tr>
     * </table>
     *
     * @attr name android:scrollbars
     */
    public static final int View_scrollbars=23;
    /**
     * <p>
     * @attr description
     * This attribute is ignored in API level 14
     * ({@link android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH}) and higher.
     * Using fading edges may introduce noticeable performance
     * degradations and should be used only when required by the application's
     * visual design. To request fading edges with API level 14 and above,
     * use the <code>android:requiresFadingEdge</code> attribute instead.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>horizontal</td><td>1000</td><td>Fades horizontal edges only.</td></tr>
     * <tr><td>none</td><td>0</td><td>No edge is faded.</td></tr>
     * <tr><td>vertical</td><td>2000</td><td>Fades vertical edges only.</td></tr>
     * </table>
     *
     * @attr name android:fadingEdge
     */
    public static final int View_fadingEdge=24;
    /**
     * <p>
     * @attr description
     * Defines the length of the fading edges.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:fadingEdgeLength
     */
    public static final int View_fadingEdgeLength=25;
    /**
     * <p>
     * @attr description
     * Defines the next view to give focus to when the next focus is
     * {@link android.view.View#FOCUS_LEFT}.
     * If the reference refers to a view that does not exist or is part
     * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
     * will result when the reference is accessed.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:nextFocusLeft
     */
    public static final int View_nextFocusLeft=26;
    /**
     * <p>
     * @attr description
     * Defines the next view to give focus to when the next focus is
     * {@link android.view.View#FOCUS_RIGHT}
     * If the reference refers to a view that does not exist or is part
     * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
     * will result when the reference is accessed.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:nextFocusRight
     */
    public static final int View_nextFocusRight=27;
    /**
     * <p>
     * @attr description
     * Defines the next view to give focus to when the next focus is
     * {@link android.view.View#FOCUS_UP}
     * If the reference refers to a view that does not exist or is part
     * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
     * will result when the reference is accessed.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:nextFocusUp
     */
    public static final int View_nextFocusUp=28;
    /**
     * <p>
     * @attr description
     * Defines the next view to give focus to when the next focus is
     * {@link android.view.View#FOCUS_DOWN}
     * If the reference refers to a view that does not exist or is part
     * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
     * will result when the reference is accessed.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:nextFocusDown
     */
    public static final int View_nextFocusDown=29;
    /**
     * <p>
     * @attr description
     * Defines whether this view reacts to click events.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:clickable
     */
    public static final int View_clickable=30;
    /**
     * <p>
     * @attr description
     * Defines whether this view reacts to long click events.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:longClickable
     */
    public static final int View_longClickable=31;
    /**
     * <p>
     * @attr description
     * If false, no state will be saved for this view when it is being
     * frozen. The default is true, allowing the view to be saved
     * (however it also must have an ID assigned to it for its
     * state to be saved).  Setting this to false only disables the
     * state for this view, not for its children which may still
     * be saved.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:saveEnabled
     */
    public static final int View_saveEnabled=32;
    /**
     * <p>
     * @attr description
     * Defines the quality of translucent drawing caches. This property is used
     * only when the drawing cache is enabled and translucent. The default value is auto.
     * Deprecated: The view drawing cache was largely made obsolete with the introduction of
     * hardware-accelerated rendering in API 11.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>auto</td><td>0</td><td>Lets the framework decide what quality level should be used
     * for the drawing cache.
     * Deprecated: The view drawing cache was largely made obsolete with the introduction
     * of hardware-accelerated rendering in API 11.</td></tr>
     * <tr><td>high</td><td>2</td><td>High quality. When set to high quality, the drawing cache uses a higher
     * color depth but uses more memory.
     * Deprecated: The view drawing cache was largely made obsolete with the introduction
     * of hardware-accelerated rendering in API 11.</td></tr>
     * <tr><td>low</td><td>1</td><td>Low quality. When set to low quality, the drawing cache uses a lower color
     * depth, thus losing precision in rendering gradients, but uses less memory.
     * Deprecated: The view drawing cache was largely made obsolete with the introduction
     * of hardware-accelerated rendering in API 11.</td></tr>
     * </table>
     *
     * @attr name android:drawingCacheQuality
     */
    public static final int View_drawingCacheQuality=33;
    /**
     * <p>
     * @attr description
     * When this attribute is set to true, the view gets its drawable state
     * (focused, pressed, etc.) from its direct parent rather than from itself.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:duplicateParentState
     */
    public static final int View_duplicateParentState=34;
    /**
     * <p>
     * @attr description
     * Defines the drawable to draw over the content. This can be used as an overlay.
     * The foreground drawable participates in the padding of the content if the gravity
     * is set to fill.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:foreground
     */
    public static final int View_foreground=35;
    /**
     * <p>
     * @attr description
     * Defines the minimum width of the view. It is not guaranteed
     * the view will be able to achieve this minimum width (for example,
     * if its parent layout constrains it with less available width).
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:minWidth
     */
    public static final int View_minWidth=36;
    /**
     * <p>
     * @attr description
     * Defines the minimum height of the view. It is not guaranteed
     * the view will be able to achieve this minimum height (for example,
     * if its parent layout constrains it with less available height).
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:minHeight
     */
    public static final int View_minHeight=37;
    /**
     * <p>
     * @attr description
     * Defines the gravity to apply to the foreground drawable. The gravity defaults
     * to fill.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
     * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
     * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
     * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
     * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the horizontal gravity: a left gravity will clip the right
     * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
     * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the vertical gravity: a top gravity will clip the bottom
     * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
     * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
     * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
     * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
     * </table>
     *
     * @attr name android:foregroundGravity
     */
    public static final int View_foregroundGravity=38;
    /**
     * <p>
     * @attr description
     * Boolean that controls whether a view should have sound effects
     * enabled for events such as clicking and touching.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:soundEffectsEnabled
     */
    public static final int View_soundEffectsEnabled=39;
    /**
     * <p>
     * @attr description
     * Controls whether the view's window should keep the screen on
     * while visible.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:keepScreenOn
     */
    public static final int View_keepScreenOn=40;
    /**
     * <p>
     * @attr description
     * Set this if the view will serve as a scrolling container, meaning
     * that it can be resized to shrink its overall window so that there
     * will be space for an input method.  If not set, the default
     * value will be true if "scrollbars" has the vertical scrollbar
     * set, else it will be false.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:isScrollContainer
     */
    public static final int View_isScrollContainer=41;
    /**
     * <p>
     * @attr description
     * Boolean that controls whether a view should have haptic feedback
     * enabled for events such as long presses.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:hapticFeedbackEnabled
     */
    public static final int View_hapticFeedbackEnabled=42;
    /**
     * <p>
     * @attr description
     * Name of the method in this View's context to invoke when the view is
     * clicked. This name must correspond to a public method that takes
     * exactly one parameter of type View. For instance, if you specify
     * <code>android:onClick="sayHello"</code>, you must declare a
     * <code>public void sayHello(View v)</code> method of your context
     * (typically, your Activity).
     * {@deprecated View actually traverses the Context
     * hierarchy looking for the relevant method, which is fragile (an intermediate
     * ContextWrapper adding a same-named method would change behavior) and restricts
     * bytecode optimizers such as R8. Instead, use View.setOnClickListener.}
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:onClick
     */
    @Deprecated
    public static final int View_onClick=43;
    /**
     * <p>
     * @attr description
     * Defines text that briefly describes content of the view. This property is used
     * primarily for accessibility. Since some views do not have textual
     * representation this attribute can be used for providing such.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:contentDescription
     */
    public static final int View_contentDescription=44;
    /**
     * <p>
     * @attr description
     * Defines the delay in milliseconds that a scrollbar takes to fade out.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:scrollbarFadeDuration
     */
    public static final int View_scrollbarFadeDuration=45;
    /**
     * <p>
     * @attr description
     * Defines the delay in milliseconds that a scrollbar waits before fade out.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:scrollbarDefaultDelayBeforeFade
     */
    public static final int View_scrollbarDefaultDelayBeforeFade=46;
    /**
     * <p>
     * @attr description
     * Defines whether to fade out scrollbars when they are not in use.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:fadeScrollbars
     */
    public static final int View_fadeScrollbars=47;
    /**
     * <p>
     * @attr description
     * Defines over-scrolling behavior. This property is used only if the
     * View is scrollable. Over-scrolling is the ability for the user to
     * receive feedback when attempting to scroll beyond meaningful content.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>always</td><td>0</td><td>Always show over-scroll effects, even if the content fits entirely
     * within the available space.</td></tr>
     * <tr><td>ifContentScrolls</td><td>1</td><td>Only show over-scroll effects if the content is large
     * enough to meaningfully scroll.</td></tr>
     * <tr><td>never</td><td>2</td><td>Never show over-scroll effects.</td></tr>
     * </table>
     *
     * @attr name android:overScrollMode
     */
    public static final int View_overScrollMode=48;
    /**
     * <p>
     * @attr description
     * Specifies whether to filter touches when the view's window is obscured by
     * another visible window.  When set to true, the view will not receive touches
     * whenever a toast, dialog or other window appears above the view's window.
     * Refer to the {@link android.view.View} security documentation for more details.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:filterTouchesWhenObscured
     */
    public static final int View_filterTouchesWhenObscured=49;
    /**
     * <p>
     * @attr description
     * alpha property of the view, as a value between 0 (completely transparent) and 1
     * (completely opaque).
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:alpha
     */
    public static final int View_alpha=50;
    /**
     * <p>
     * @attr description
     * x location of the pivot point around which the view will rotate and scale.
     * This xml attribute sets the pivotX property of the View.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:transformPivotX
     */
    public static final int View_transformPivotX=51;
    /**
     * <p>
     * @attr description
     * y location of the pivot point around which the view will rotate and scale.
     * This xml attribute sets the pivotY property of the View.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:transformPivotY
     */
    public static final int View_transformPivotY=52;
    /**
     * <p>
     * @attr description
     * translation in x of the view. This value is added post-layout to the left
     * property of the view, which is set by its layout.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:translationX
     */
    public static final int View_translationX=53;
    /**
     * <p>
     * @attr description
     * translation in y of the view. This value is added post-layout to the top
     * property of the view, which is set by its layout.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:translationY
     */
    public static final int View_translationY=54;
    /**
     * <p>
     * @attr description
     * scale of the view in the x direction.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:scaleX
     */
    public static final int View_scaleX=55;
    /**
     * <p>
     * @attr description
     * scale of the view in the y direction.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:scaleY
     */
    public static final int View_scaleY=56;
    /**
     * <p>
     * @attr description
     * rotation of the view, in degrees.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:rotation
     */
    public static final int View_rotation=57;
    /**
     * <p>
     * @attr description
     * rotation of the view around the x axis, in degrees.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:rotationX
     */
    public static final int View_rotationX=58;
    /**
     * <p>
     * @attr description
     * rotation of the view around the y axis, in degrees.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:rotationY
     */
    public static final int View_rotationY=59;
    /**
     * <p>
     * @attr description
     * Determines which side the vertical scroll bar should be placed on.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>defaultPosition</td><td>0</td><td>Place the scroll bar wherever the system default determines.</td></tr>
     * <tr><td>left</td><td>1</td><td>Place the scroll bar on the left.</td></tr>
     * <tr><td>right</td><td>2</td><td>Place the scroll bar on the right.</td></tr>
     * </table>
     *
     * @attr name android:verticalScrollbarPosition
     */
    public static final int View_verticalScrollbarPosition=60;
    /**
     * <p>
     * @attr description
     * Defines the next view to give focus to when the next focus is
     * {@link android.view.View#FOCUS_FORWARD}
     * If the reference refers to a view that does not exist or is part
     * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
     * will result when the reference is accessed.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:nextFocusForward
     */
    public static final int View_nextFocusForward=61;
    /**
     * <p>
     * @attr description
     * Specifies the type of layer backing this view. The default value is none.
     * Refer to {@link android.view.View#setLayerType(int, android.graphics.Paint)}
     * for more information.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>hardware</td><td>2</td><td>Use a hardware layer. Refer to
     * {@link android.view.View#setLayerType(int, android.graphics.Paint)} for
     * more information.</td></tr>
     * <tr><td>none</td><td>0</td><td>Don't use a layer.</td></tr>
     * <tr><td>software</td><td>1</td><td>Use a software layer. Refer to
     * {@link android.view.View#setLayerType(int, android.graphics.Paint)} for
     * more information.</td></tr>
     * </table>
     *
     * @attr name android:layerType
     */
    public static final int View_layerType=62;
    /**
     * <p>
     * @attr description
     * Defines which edges should be faded on scrolling.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>horizontal</td><td>1000</td><td>Fades horizontal edges only.</td></tr>
     * <tr><td>none</td><td>0</td><td>No edge is faded.</td></tr>
     * <tr><td>vertical</td><td>2000</td><td>Fades vertical edges only.</td></tr>
     * </table>
     *
     * @attr name android:requiresFadingEdge
     */
    public static final int View_requiresFadingEdge=63;
    /**
     * <p>
     * @attr description
     * Describes whether or not this view is important for accessibility.
     * If it is important, the view fires accessibility events and is
     * reported to accessibility services that query the screen. Note:
     * While not recommended, an accessibility service may decide to
     * ignore this attribute and operate on all views in the view tree.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>auto</td><td>0</td><td>The system determines whether the view is important for accessibility - default
     * (recommended).</td></tr>
     * <tr><td>no</td><td>2</td><td>The view is not important for accessibility.</td></tr>
     * <tr><td>noHideDescendants</td><td>4</td><td>The view is not important for accessibility, nor are any of its descendant
     * views.</td></tr>
     * <tr><td>yes</td><td>1</td><td>The view is important for accessibility.</td></tr>
     * </table>
     *
     * @attr name android:importantForAccessibility
     */
    public static final int View_importantForAccessibility=64;
    /**
     * <p>
     * @attr description
     * Defines the direction of the text.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>anyRtl</td><td>2</td><td>The paragraph direction is RTL if it contains any strong RTL character, otherwise
     * it is LTR if it contains any strong LTR characters.  If there are neither, the
     * paragraph direction is the view’s resolved layout direction.</td></tr>
     * <tr><td>firstStrong</td><td>1</td><td>Default for the root view. The first strong directional character determines the
     * paragraph direction.  If there is no strong directional character, the paragraph
     * direction is the view’s resolved layout direction.</td></tr>
     * <tr><td>firstStrongLtr</td><td>6</td><td>The first strong directional character determines the paragraph direction. If
     * there is no strong directional character, the paragraph direction is LTR.</td></tr>
     * <tr><td>firstStrongRtl</td><td>7</td><td>The first strong directional character determines the paragraph direction. If
     * there is no strong directional character, the paragraph direction is RTL.</td></tr>
     * <tr><td>inherit</td><td>0</td><td>Default.</td></tr>
     * <tr><td>locale</td><td>5</td><td>The paragraph direction is coming from the system Locale.</td></tr>
     * <tr><td>ltr</td><td>3</td><td>The paragraph direction is left to right.</td></tr>
     * <tr><td>rtl</td><td>4</td><td>The paragraph direction is right to left.</td></tr>
     * </table>
     *
     * @attr name android:textDirection
     */
    public static final int View_textDirection=65;
    /**
     * <p>
     * @attr description
     * Defines the alignment of the text.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>center</td><td>4</td><td>Center the paragraph, for example: ALIGN_CENTER.</td></tr>
     * <tr><td>gravity</td><td>1</td><td>Default for the root view. The gravity determines the alignment, ALIGN_NORMAL,
     * ALIGN_CENTER, or ALIGN_OPPOSITE, which are relative to each paragraph’s
     * text direction.</td></tr>
     * <tr><td>inherit</td><td>0</td><td>Default.</td></tr>
     * <tr><td>textEnd</td><td>3</td><td>Align to the end of the paragraph, for example: ALIGN_OPPOSITE.</td></tr>
     * <tr><td>textStart</td><td>2</td><td>Align to the start of the paragraph, for example: ALIGN_NORMAL.</td></tr>
     * <tr><td>viewEnd</td><td>6</td><td>Align to the end of the view, which is ALIGN_RIGHT if the view’s resolved
     * layoutDirection is LTR, and ALIGN_LEFT otherwise.</td></tr>
     * <tr><td>viewStart</td><td>5</td><td>Align to the start of the view, which is ALIGN_LEFT if the view’s resolved
     * layoutDirection is LTR, and ALIGN_RIGHT otherwise.</td></tr>
     * </table>
     *
     * @attr name android:textAlignment
     */
    public static final int View_textAlignment=66;
    /**
     * <p>
     * @attr description
     * Defines the direction of layout drawing. This typically is associated with writing
     * direction of the language script used. The possible values are "ltr" for Left-to-Right,
     * "rtl" for Right-to-Left, "locale", and "inherit" from parent view. If there is nothing
     * to inherit, "locale" is used. "locale" falls back to "en-US". "ltr" is the direction
     * used in "en-US". The default for this attribute is "inherit".
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>inherit</td><td>2</td><td>Inherit from parent.</td></tr>
     * <tr><td>locale</td><td>3</td><td>Locale.</td></tr>
     * <tr><td>ltr</td><td>0</td><td>Left-to-Right.</td></tr>
     * <tr><td>rtl</td><td>1</td><td>Right-to-Left.</td></tr>
     * </table>
     *
     * @attr name android:layoutDirection
     */
    public static final int View_layoutDirection=67;
    /**
     * <p>
     * @attr description
     * Sets the padding, in pixels, of the start edge; see {@link android.R.attr#padding}.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:paddingStart
     */
    public static final int View_paddingStart=68;
    /**
     * <p>
     * @attr description
     * Sets the padding, in pixels, of the end edge; see {@link android.R.attr#padding}.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:paddingEnd
     */
    public static final int View_paddingEnd=69;
    /**
     * <p>
     * @attr description
     * Specifies the id of a view for which this view serves as a label for
     * accessibility purposes. For example, a TextView before an EditText in
     * the UI usually specifies what infomation is contained in the EditText.
     * Hence, the TextView is a label for the EditText.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:labelFor
     */
    public static final int View_labelFor=70;
    /**
     * <p>
     * @attr description
     * Indicates to accessibility services whether the user should be notified when
     * this view changes.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>assertive</td><td>2</td><td>Accessibility services should interrupt ongoing speech to immediately
     * announce changes to this view.</td></tr>
     * <tr><td>none</td><td>0</td><td>Accessibility services should not announce changes to this view.</td></tr>
     * <tr><td>polite</td><td>1</td><td>Accessibility services should announce changes to this view.</td></tr>
     * </table>
     *
     * @attr name android:accessibilityLiveRegion
     */
    public static final int View_accessibilityLiveRegion=71;
    /**
     * <p>
     * @attr description
     * translation in z of the view. This value is added to its elevation.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:translationZ
     */
    public static final int View_translationZ=72;
    /**
     * <p>
     * @attr description
     * Names a View such that it can be identified for Transitions. Names should be
     * unique in the View hierarchy.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:transitionName
     */
    public static final int View_transitionName=73;
    /**
     * <p>
     * @attr description
     * Specifies that this view should permit nested scrolling within a compatible
     * ancestor view.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:nestedScrollingEnabled
     */
    public static final int View_nestedScrollingEnabled=74;
    /**
     * <p>
     * @attr description
     * base z depth of the view.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:elevation
     */
    public static final int View_elevation=75;
    /**
     * <p>
     * @attr description
     * Sets the state-based animator for the View.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:stateListAnimator
     */
    public static final int View_stateListAnimator=76;
    /**
     * <p>
     * @attr description
     * Tint to apply to the background.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:backgroundTint
     */
    public static final int View_backgroundTint=77;
    /**
     * <p>
     * @attr description
     * Blending mode used to apply the background tint.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     *
     * @attr name android:backgroundTintMode
     */
    public static final int View_backgroundTintMode=78;
    /**
     * <p>
     * @attr description
     * Tint to apply to the foreground.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:foregroundTint
     */
    public static final int View_foregroundTint=79;
    /**
     * <p>
     * @attr description
     * Blending mode used to apply the foreground tint.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>add</td><td>10</td><td>Combines the tint and drawable color and alpha channels, clamping the
     * result to valid color values. Saturate(S + D)</td></tr>
     * <tr><td>multiply</td><td>e</td><td>Multiplies the color and alpha channels of the drawable with those of
     * the tint. [Sa * Da, Sc * Dc]</td></tr>
     * <tr><td>screen</td><td>f</td><td>[Sa + Da - Sa * Da, Sc + Dc - Sc * Dc]</td></tr>
     * <tr><td>src_atop</td><td>9</td><td>The tint is drawn above the drawable, but with the drawable’s alpha
     * channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc]</td></tr>
     * <tr><td>src_in</td><td>5</td><td>The tint is masked by the alpha channel of the drawable. The drawable’s
     * color channels are thrown out. [Sa * Da, Sc * Da]</td></tr>
     * <tr><td>src_over</td><td>3</td><td>The tint is drawn on top of the drawable.
     * [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc]</td></tr>
     * </table>
     *
     * @attr name android:foregroundTintMode
     */
    public static final int View_foregroundTintMode=80;
    /**
     * <p>
     * @attr description
     * ViewOutlineProvider used to determine the View's Outline.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>background</td><td>0</td><td>Default, background drawable-driven outline.</td></tr>
     * <tr><td>bounds</td><td>2</td><td>Generates an opaque outline for the bounds of the view.</td></tr>
     * <tr><td>none</td><td>1</td><td>No outline provider.</td></tr>
     * <tr><td>paddedBounds</td><td>3</td><td>Generates an opaque outline for the padded bounds of the view.</td></tr>
     * </table>
     *
     * @attr name android:outlineProvider
     */
    public static final int View_outlineProvider=81;
    /**
     * <p>
     * @attr description
     * Sets the id of a view before which this one is visited in accessibility traversal.
     * A screen-reader must visit the content of this view before the content of the one
     * it precedes.
     * {@see android.view.View#setAccessibilityTraversalBefore(int)}
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:accessibilityTraversalBefore
     */
    public static final int View_accessibilityTraversalBefore=82;
    /**
     * <p>
     * @attr description
     * Sets the id of a view after which this one is visited in accessibility traversal.
     * A screen-reader must visit the content of the other view before the content of
     * this one.
     * {@see android.view.View#setAccessibilityTraversalAfter(int)}
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:accessibilityTraversalAfter
     */
    public static final int View_accessibilityTraversalAfter=83;
    /**
     * <p>
     * @attr description
     * Defines which scroll indicators should be displayed when the view
     * can be scrolled. Multiple values may be combined using logical OR,
     * for example "top|bottom".
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>2</td><td>Displays bottom scroll indicator when vew can be scrolled down.</td></tr>
     * <tr><td>end</td><td>20</td><td>Displays right scroll indicator when vew can be scrolled in the
     * end direction.</td></tr>
     * <tr><td>left</td><td>4</td><td>Displays left scroll indicator when vew can be scrolled left.</td></tr>
     * <tr><td>none</td><td>0</td><td>No scroll indicators are displayed.</td></tr>
     * <tr><td>right</td><td>8</td><td>Displays right scroll indicator when vew can be scrolled right.</td></tr>
     * <tr><td>start</td><td>10</td><td>Displays right scroll indicator when vew can be scrolled in the
     * start direction.</td></tr>
     * <tr><td>top</td><td>1</td><td>Displays top scroll indicator when view can be scrolled up.</td></tr>
     * </table>
     *
     * @attr name android:scrollIndicators
     */
    public static final int View_scrollIndicators=84;
    /**
     * <p>
     * @attr description
     * Defines whether this view reacts to context click events.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:contextClickable
     */
    public static final int View_contextClickable=85;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#pointerIcon}
     * attribute's value can be found in the {@link #View} array.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>alias</td><td>3f2</td><td>Pointer icon of 'alias', indicating an alias of/shortcut to something is to be
     * created.</td></tr>
     * <tr><td>all_scroll</td><td>3f5</td><td>Pointer icon of four-way arrows, indicating scrolling all direction.</td></tr>
     * <tr><td>arrow</td><td>3e8</td><td>The default icon of arrow pointer.</td></tr>
     * <tr><td>cell</td><td>3ee</td><td>Pointer icon for cell and grid.</td></tr>
     * <tr><td>context_menu</td><td>3e9</td><td>Pointer icon indicating context-menu will appear.</td></tr>
     * <tr><td>copy</td><td>3f3</td><td>Pointer icon of 'copy', used for drag/drop.</td></tr>
     * <tr><td>crosshair</td><td>3ef</td><td>Pointer icon of crosshair, indicating to spot a location.</td></tr>
     * <tr><td>grab</td><td>3fc</td><td>Pointer icon of a hand sign to grab something.</td></tr>
     * <tr><td>grabbing</td><td>3fd</td><td>Pointer icon of a hand sign while grabbing something.</td></tr>
     * <tr><td>hand</td><td>3ea</td><td>Pointer icon of a hand with the index finger.</td></tr>
     * <tr><td>help</td><td>3eb</td><td>Pointer icon indicating help.</td></tr>
     * <tr><td>horizontal_double_arrow</td><td>3f6</td><td>Pointer icon of horizontal double arrow, indicating horizontal resize.</td></tr>
     * <tr><td>no_drop</td><td>3f4</td><td>Pointer icon of 'no-drop', indicating the drop will not be accepted at the
     * current location.</td></tr>
     * <tr><td>none</td><td>0</td><td>Null icon, pointer becomes invisible.</td></tr>
     * <tr><td>text</td><td>3f0</td><td>Pointer icon of I-beam, usually for text.</td></tr>
     * <tr><td>top_left_diagonal_double_arrow</td><td>3f9</td><td>Pointer icon of diagonal double arrow, starting from top-left to bottom-right.
     * Indicating freeform resize.</td></tr>
     * <tr><td>top_right_diagonal_double_arrow</td><td>3f8</td><td>Pointer icon of diagonal double arrow, starting from top-right to bottom-left.
     * Indicating freeform resize.</td></tr>
     * <tr><td>vertical_double_arrow</td><td>3f7</td><td>Pointer icon of vertical double arrow, indicating vertical resize.</td></tr>
     * <tr><td>vertical_text</td><td>3f1</td><td>Pointer icon of I-beam with 90-degree rotated, for vertical text.</td></tr>
     * <tr><td>wait</td><td>3ec</td><td>Pointer icon indicating something is going on and waiting.</td></tr>
     * <tr><td>zoom_in</td><td>3fa</td><td>Pointer icon indicating zoom-in.</td></tr>
     * <tr><td>zoom_out</td><td>3fb</td><td>Pointer icon indicating zoom-out.</td></tr>
     * </table>
     *
     * @attr name android:pointerIcon
     */
    public static final int View_pointerIcon=86;
    /**
     * <p>
     * @attr description
     * Whether this view has elements that may overlap when drawn. See
     * {@link android.view.View#forceHasOverlappingRendering(boolean)}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:forceHasOverlappingRendering
     */
    public static final int View_forceHasOverlappingRendering=87;
    /**
     * <p>
     * @attr description
     * Defines text displayed in a small popup window on hover or long press.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:tooltipText
     */
    public static final int View_tooltipText=88;
    /**
     * <p>
     * @attr description
     * Sets the padding, in pixels, of the left and right edges; see
     * {@link android.R.attr#padding}. This value will take precedence over
     * paddingLeft and paddingRight, but not paddingStart or paddingEnd (if set).
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:paddingHorizontal
     */
    public static final int View_paddingHorizontal=89;
    /**
     * <p>
     * @attr description
     * Sets the padding, in pixels, of the top and bottom edges; see
     * {@link android.R.attr#padding}. This value will take precedence over
     * paddingTop and paddingBottom, if set.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:paddingVertical
     */
    public static final int View_paddingVertical=90;
    /**
     * <p>
     * @attr description
     * Whether this view is a root of a keyboard navigation cluster.
     * See {@link android.view.View#setKeyboardNavigationCluster(boolean)}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:keyboardNavigationCluster
     */
    public static final int View_keyboardNavigationCluster=91;
    /**
     * <p>
     * @attr description
     * Defines the next keyboard navigation cluster.
     * If the reference refers to a view that does not exist or is part
     * of a hierarchy that is invisible, a {@link java.lang.RuntimeException}
     * will result when the reference is accessed.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:nextClusterForward
     */
    public static final int View_nextClusterForward=92;
    /**
     * <p>
     * @attr description
     * Whether this view is a default-focus view.
     * Only one view per keyboard navigation cluster can have this attribute set to true.
     * See {@link android.view.View#setFocusedByDefault(boolean)}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:focusedByDefault
     */
    public static final int View_focusedByDefault=93;
    /**
     * <p>
     * @attr description
     * Describes the content of a view so that a autofill service can fill in the appropriate
     * data. Multiple hints can be combined in a comma separated list or an array of strings
     * to mean e.g. emailAddress or postalAddress.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:autofillHints
     */
    public static final int View_autofillHints=94;
    /**
     * <p>
     * @attr description
     * Hints the Android System whether the view node associated with this View should be
     * included in a view structure used for autofill purposes.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>auto</td><td>0</td><td>Let the Android System use its heuristics to determine if the view is important for autofill.</td></tr>
     * <tr><td>no</td><td>2</td><td>Hint the Android System that this view is *not* important for autofill,
     * but its children (if any) will be traversed..</td></tr>
     * <tr><td>noExcludeDescendants</td><td>8</td><td>Hint the Android System that this view is *not* important for autofill,
     * and its children (if any) will not be traversed.</td></tr>
     * <tr><td>yes</td><td>1</td><td>Hint the Android System that this view is important for autofill,
     * and its children (if any) will be traversed..</td></tr>
     * <tr><td>yesExcludeDescendants</td><td>4</td><td>Hint the Android System that this view is important for autofill,
     * but its children (if any) will not be traversed.</td></tr>
     * </table>
     *
     * @attr name android:importantForAutofill
     */
    public static final int View_importantForAutofill=95;
    /**
     * <p>
     * @attr description
     * Whether this View should use a default focus highlight when it gets focused but
     * doesn't have {@link android.R.attr#state_focused} defined in its background.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:defaultFocusHighlightEnabled
     */
    public static final int View_defaultFocusHighlightEnabled=96;
    /**
     * <p>
     * @attr description
     * Whether this view should be treated as a focusable unit by screen reader accessibility
     * tools. See {@link android.view.View#setScreenReaderFocusable(boolean)}. The default
     * value, {@code false}, leaves the screen reader to consider other signals, such as
     * focusability or the presence of text, to decide what it focus.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:screenReaderFocusable
     */
    public static final int View_screenReaderFocusable=97;
    /**
     * <p>
     * @attr description
     * The title this view should present to accessibility as a pane title.
     * See {@link android.view.View#setAccessibilityPaneTitle(CharSequence)}
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:accessibilityPaneTitle
     */
    public static final int View_accessibilityPaneTitle=98;
    /**
     * <p>
     * @attr description
     * Whether or not this view is a heading for accessibility purposes.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:accessibilityHeading
     */
    public static final int View_accessibilityHeading=99;
    /**
     * <p>
     * @attr description
     * Sets the color of the spot shadow that is drawn when the view has a positive Z or
     * elevation value.
     * <p>
     * By default the shadow color is black. Generally, this color will be opaque so the
     * intensity of the shadow is consistent between different views with different colors.
     * <p>
     * The opacity of the final spot shadow is a function of the shadow caster height, the
     * alpha channel of the outlineSpotShadowColor (typically opaque), and the
     * {@link android.R.attr#spotShadowAlpha} theme attribute.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:outlineSpotShadowColor
     */
    public static final int View_outlineSpotShadowColor=100;
    /**
     * <p>
     * @attr description
     * Sets the color of the ambient shadow that is drawn when the view has a positive Z
     * or elevation value.
     * <p>
     * By default the shadow color is black. Generally, this color will be opaque so the
     * intensity of the shadow is consistent between different views with different colors.
     * <p>
     * The opacity of the final ambient shadow is a function of the shadow caster height,
     * the alpha channel of the outlineAmbientShadowColor (typically opaque), and the
     * {@link android.R.attr#ambientShadowAlpha} theme attribute.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:outlineAmbientShadowColor
     */
    public static final int View_outlineAmbientShadowColor=101;
    /**
     * <p>
     * @attr description
     * <p>Whether or not the force dark feature is allowed to be applied to this View.
     * <p>Setting this to false will disable the auto-dark feature on this View draws
     * including any descendants.
     * <p>Setting this to true will allow this view to be automatically made dark, however
     * a value of 'true' will not override any 'false' value in its parent chain nor will
     * it prevent any 'false' in any of its children.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:forceDarkAllowed
     */
    public static final int View_forceDarkAllowed=102;
    /**
     * <p>
     * @attr description
     * Hints the Android System whether the view node associated with this View should be
     * use for content capture purposes.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>auto</td><td>0</td><td>Let the Android System use its heuristics to determine if the view is important for content capture.</td></tr>
     * <tr><td>no</td><td>2</td><td>Hint the Android System that this view is *not* important for content capture,
     * but its children (if any) will be traversed..</td></tr>
     * <tr><td>noExcludeDescendants</td><td>8</td><td>Hint the Android System that this view is *not* important for content capture,
     * and its children (if any) will not be traversed.</td></tr>
     * <tr><td>yes</td><td>1</td><td>Hint the Android System that this view is important for content capture,
     * and its children (if any) will be traversed..</td></tr>
     * <tr><td>yesExcludeDescendants</td><td>4</td><td>Hint the Android System that this view is important for content capture,
     * but its children (if any) will not be traversed.</td></tr>
     * </table>
     *
     * @attr name android:importantForContentCapture
     */
    public static final int View_importantForContentCapture=103;
    /**
     * <p>
     * @attr description
     * Whether or not allow clicks on disabled view.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:allowClickWhenDisabled
     */
    public static final int View_allowClickWhenDisabled=104;
    /**
     * <p>
     * @attr description
     * <p>Whether the View's Outline should be used to clip the contents of the View.
     * <p>Only a single non-rectangular clip can be applied on a View at any time. Circular
     * clips from a
     * {@link android.view.ViewAnimationUtils#createCircularReveal(View, int, int, float,
     * float)} circular reveal animation take priority over Outline clipping, and child
     * Outline clipping takes priority over Outline clipping done by a parent.
     * <p>Note that this flag will only be respected if the View's Outline returns true from
     * {@link android.graphics.Outline#canClip()}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:clipToOutline
     */
    public static final int View_clipToOutline=105;
    /**
     * Attributes that can be used with a ViewAnimator.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ViewAnimator_inAnimation android:inAnimation}</code></td><td>Identifier for the animation to use when a view is shown.</td></tr>
     * <tr><td><code>{@link #ViewAnimator_outAnimation android:outAnimation}</code></td><td>Identifier for the animation to use when a view is hidden.</td></tr>
     * <tr><td><code>{@link #ViewAnimator_animateFirstView android:animateFirstView}</code></td><td>Defines whether to animate the current View when the ViewAnimation
     * is first displayed.</td></tr>
     * </table>
     * @see #ViewAnimator_inAnimation
     * @see #ViewAnimator_outAnimation
     * @see #ViewAnimator_animateFirstView
     */
    public static final int[] ViewAnimator={
      0x01010177, 0x01010178, 0x010102d5
    };
    /**
     * <p>
     * @attr description
     * Identifier for the animation to use when a view is shown.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:inAnimation
     */
    public static final int ViewAnimator_inAnimation=0;
    /**
     * <p>
     * @attr description
     * Identifier for the animation to use when a view is hidden.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:outAnimation
     */
    public static final int ViewAnimator_outAnimation=1;
    /**
     * <p>
     * @attr description
     * Defines whether to animate the current View when the ViewAnimation
     * is first displayed.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:animateFirstView
     */
    public static final int ViewAnimator_animateFirstView=2;
    /**
     * Attributes that can be used with a ViewDrawableStates.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ViewDrawableStates_state_focused android:state_focused}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view has input focus.</td></tr>
     * <tr><td><code>{@link #ViewDrawableStates_state_window_focused android:state_window_focused}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view's window has input focus.</td></tr>
     * <tr><td><code>{@link #ViewDrawableStates_state_enabled android:state_enabled}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view is enabled.</td></tr>
     * <tr><td><code>{@link #ViewDrawableStates_state_selected android:state_selected}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view (or one of its parents) is currently selected.</td></tr>
     * <tr><td><code>{@link #ViewDrawableStates_state_pressed android:state_pressed}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when the user is pressing down in a view.</td></tr>
     * <tr><td><code>{@link #ViewDrawableStates_state_activated android:state_activated}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view or its parent has been "activated" meaning the user has currently
     * marked it as being of interest.</td></tr>
     * <tr><td><code>{@link #ViewDrawableStates_state_accelerated android:state_accelerated}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * indicating that the Drawable is in a view that is hardware accelerated.</td></tr>
     * <tr><td><code>{@link #ViewDrawableStates_state_hovered android:state_hovered}</code></td><td>State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a pointer is hovering over the view.</td></tr>
     * <tr><td><code>{@link #ViewDrawableStates_state_drag_can_accept android:state_drag_can_accept}</code></td><td>State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
     * indicating that the Drawable is in a view that is capable of accepting a drop of
     * the content currently being manipulated in a drag-and-drop operation.</td></tr>
     * <tr><td><code>{@link #ViewDrawableStates_state_drag_hovered android:state_drag_hovered}</code></td><td>State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
     * indicating that a drag operation (for which the Drawable's view is a valid recipient)
     * is currently positioned over the Drawable.</td></tr>
     * </table>
     * @see #ViewDrawableStates_state_focused
     * @see #ViewDrawableStates_state_window_focused
     * @see #ViewDrawableStates_state_enabled
     * @see #ViewDrawableStates_state_selected
     * @see #ViewDrawableStates_state_pressed
     * @see #ViewDrawableStates_state_activated
     * @see #ViewDrawableStates_state_accelerated
     * @see #ViewDrawableStates_state_hovered
     * @see #ViewDrawableStates_state_drag_can_accept
     * @see #ViewDrawableStates_state_drag_hovered
     */
    public static final int[] ViewDrawableStates={
      0x0101009c, 0x0101009d, 0x0101009e, 0x010100a1, 
      0x010100a7, 0x010102fe, 0x0101031b, 0x01010367, 
      0x01010368, 0x01010369
    };
    /**
     * <p>
     * @attr description
     * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view has input focus.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_focused
     */
    public static final int ViewDrawableStates_state_focused=0;
    /**
     * <p>
     * @attr description
     * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view's window has input focus.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_window_focused
     */
    public static final int ViewDrawableStates_state_window_focused=1;
    /**
     * <p>
     * @attr description
     * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view is enabled.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_enabled
     */
    public static final int ViewDrawableStates_state_enabled=2;
    /**
     * <p>
     * @attr description
     * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view (or one of its parents) is currently selected.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_selected
     */
    public static final int ViewDrawableStates_state_selected=3;
    /**
     * <p>
     * @attr description
     * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when the user is pressing down in a view.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_pressed
     */
    public static final int ViewDrawableStates_state_pressed=4;
    /**
     * <p>
     * @attr description
     * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a view or its parent has been "activated" meaning the user has currently
     * marked it as being of interest.  This is an alternative representation of
     * state_checked for when the state should be propagated down the view hierarchy.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_activated
     */
    public static final int ViewDrawableStates_state_activated=5;
    /**
     * <p>
     * @attr description
     * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * indicating that the Drawable is in a view that is hardware accelerated.
     * This means that the device can at least render a full-screen scaled
     * bitmap with one layer of text and bitmaps composited on top of it
     * at 60fps.  When this is set, the colorBackgroundCacheHint will be
     * ignored even if it specifies a solid color, since that optimization
     * is not needed.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_accelerated
     */
    public static final int ViewDrawableStates_state_accelerated=6;
    /**
     * <p>
     * @attr description
     * State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable},
     * set when a pointer is hovering over the view.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_hovered
     */
    public static final int ViewDrawableStates_state_hovered=7;
    /**
     * <p>
     * @attr description
     * State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
     * indicating that the Drawable is in a view that is capable of accepting a drop of
     * the content currently being manipulated in a drag-and-drop operation.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_drag_can_accept
     */
    public static final int ViewDrawableStates_state_drag_can_accept=8;
    /**
     * <p>
     * @attr description
     * State for {@link android.graphics.drawable.StateListDrawable StateListDrawable}
     * indicating that a drag operation (for which the Drawable's view is a valid recipient)
     * is currently positioned over the Drawable.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:state_drag_hovered
     */
    public static final int ViewDrawableStates_state_drag_hovered=9;
    /**
     * Attributes that can be used with a ViewFlipper.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ViewFlipper_flipInterval android:flipInterval}</code></td><td></td></tr>
     * <tr><td><code>{@link #ViewFlipper_autoStart android:autoStart}</code></td><td>When true, automatically start animating.</td></tr>
     * </table>
     * @see #ViewFlipper_flipInterval
     * @see #ViewFlipper_autoStart
     */
    public static final int[] ViewFlipper={
      0x01010179, 0x010102b5
    };
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#flipInterval}
     * attribute's value can be found in the {@link #ViewFlipper} array.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:flipInterval
     */
    public static final int ViewFlipper_flipInterval=0;
    /**
     * <p>
     * @attr description
     * When true, automatically start animating.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:autoStart
     */
    public static final int ViewFlipper_autoStart=1;
    /**
     * Attributes that can be used with a {@link android.view.ViewGroup} or any
     * of its subclasses.  Also see {@link #ViewGroup_Layout} for
     * attributes that this class processes in its children.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ViewGroup_clipChildren android:clipChildren}</code></td><td>Defines whether a child is limited to draw inside of its bounds or not.</td></tr>
     * <tr><td><code>{@link #ViewGroup_clipToPadding android:clipToPadding}</code></td><td>Defines whether the ViewGroup will clip its children and resize (but not clip) any
     * EdgeEffect to its padding, if padding is not zero.</td></tr>
     * <tr><td><code>{@link #ViewGroup_layoutAnimation android:layoutAnimation}</code></td><td>Defines the layout animation to use the first time the ViewGroup is laid out.</td></tr>
     * <tr><td><code>{@link #ViewGroup_animationCache android:animationCache}</code></td><td>Defines whether layout animations should create a drawing cache for their
     * children.</td></tr>
     * <tr><td><code>{@link #ViewGroup_persistentDrawingCache android:persistentDrawingCache}</code></td><td>Defines the persistence of the drawing cache.</td></tr>
     * <tr><td><code>{@link #ViewGroup_alwaysDrawnWithCache android:alwaysDrawnWithCache}</code></td><td>Defines whether the ViewGroup should always draw its children using their
     * drawing cache or not.</td></tr>
     * <tr><td><code>{@link #ViewGroup_addStatesFromChildren android:addStatesFromChildren}</code></td><td>Sets whether this ViewGroup's drawable states also include
     * its children's drawable states.</td></tr>
     * <tr><td><code>{@link #ViewGroup_descendantFocusability android:descendantFocusability}</code></td><td>Defines the relationship between the ViewGroup and its descendants
     * when looking for a View to take focus.</td></tr>
     * <tr><td><code>{@link #ViewGroup_splitMotionEvents android:splitMotionEvents}</code></td><td>Sets whether this ViewGroup should split MotionEvents
     * to separate child views during touch event dispatch.</td></tr>
     * <tr><td><code>{@link #ViewGroup_animateLayoutChanges android:animateLayoutChanges}</code></td><td>Defines whether changes in layout (caused by adding and removing items) should
     * cause a LayoutTransition to run.</td></tr>
     * <tr><td><code>{@link #ViewGroup_layoutMode android:layoutMode}</code></td><td>Defines the layout mode of this ViewGroup.</td></tr>
     * <tr><td><code>{@link #ViewGroup_transitionGroup android:transitionGroup}</code></td><td>Sets whether or not this ViewGroup should be treated as a single entity
     * when doing an Activity transition.</td></tr>
     * <tr><td><code>{@link #ViewGroup_touchscreenBlocksFocus android:touchscreenBlocksFocus}</code></td><td>Set to true if this ViewGroup blocks focus in the presence of a touchscreen.</td></tr>
     * </table>
     * @see #ViewGroup_clipChildren
     * @see #ViewGroup_clipToPadding
     * @see #ViewGroup_layoutAnimation
     * @see #ViewGroup_animationCache
     * @see #ViewGroup_persistentDrawingCache
     * @see #ViewGroup_alwaysDrawnWithCache
     * @see #ViewGroup_addStatesFromChildren
     * @see #ViewGroup_descendantFocusability
     * @see #ViewGroup_splitMotionEvents
     * @see #ViewGroup_animateLayoutChanges
     * @see #ViewGroup_layoutMode
     * @see #ViewGroup_transitionGroup
     * @see #ViewGroup_touchscreenBlocksFocus
     */
    public static final int[] ViewGroup={
      0x010100ea, 0x010100eb, 0x010100ec, 0x010100ed, 
      0x010100ee, 0x010100ef, 0x010100f0, 0x010100f1, 
      0x010102ef, 0x010102f2, 0x010103da, 0x01010401, 
      0x0101048f
    };
    /**
     * <p>
     * @attr description
     * Defines whether a child is limited to draw inside of its bounds or not.
     * This is useful with animations that scale the size of the children to more
     * than 100% for instance. In such a case, this property should be set to false
     * to allow the children to draw outside of their bounds. The default value of
     * this property is true.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:clipChildren
     */
    public static final int ViewGroup_clipChildren=0;
    /**
     * <p>
     * @attr description
     * Defines whether the ViewGroup will clip its children and resize (but not clip) any
     * EdgeEffect to its padding, if padding is not zero. This property is set to true by
     * default.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:clipToPadding
     */
    public static final int ViewGroup_clipToPadding=1;
    /**
     * <p>
     * @attr description
     * Defines the layout animation to use the first time the ViewGroup is laid out.
     * Layout animations can also be started manually after the first layout.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:layoutAnimation
     */
    public static final int ViewGroup_layoutAnimation=2;
    /**
     * <p>
     * @attr description
     * Defines whether layout animations should create a drawing cache for their
     * children. Enabling the animation cache consumes more memory and requires
     * a longer initialization but provides better performance. The animation
     * cache is enabled by default.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:animationCache
     */
    public static final int ViewGroup_animationCache=3;
    /**
     * <p>
     * @attr description
     * Defines the persistence of the drawing cache. The drawing cache might be
     * enabled by a ViewGroup for all its children in specific situations (for
     * instance during a scrolling.) This property lets you persist the cache
     * in memory after its initial usage. Persisting the cache consumes more
     * memory but may prevent frequent garbage collection if the cache is created
     * over and over again. By default the persistence is set to scrolling.
     * Deprecated: The view drawing cache was largely made obsolete with the introduction of
     * hardware-accelerated rendering in API 11.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>all</td><td>3</td><td>The drawing cache is always persisted.</td></tr>
     * <tr><td>animation</td><td>1</td><td>The drawing cache is persisted after a layout animation.</td></tr>
     * <tr><td>none</td><td>0</td><td>The drawing cache is not persisted after use.</td></tr>
     * <tr><td>scrolling</td><td>2</td><td>The drawing cache is persisted after a scroll.</td></tr>
     * </table>
     *
     * @attr name android:persistentDrawingCache
     */
    public static final int ViewGroup_persistentDrawingCache=4;
    /**
     * <p>
     * @attr description
     * Defines whether the ViewGroup should always draw its children using their
     * drawing cache or not. The default value is true.
     * Deprecated: The view drawing cache was largely made obsolete with the introduction of
     * hardware-accelerated rendering in API 11.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:alwaysDrawnWithCache
     */
    public static final int ViewGroup_alwaysDrawnWithCache=5;
    /**
     * <p>
     * @attr description
     * Sets whether this ViewGroup's drawable states also include
     * its children's drawable states.  This is used, for example, to
     * make a group appear to be focused when its child EditText or button
     * is focused.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:addStatesFromChildren
     */
    public static final int ViewGroup_addStatesFromChildren=6;
    /**
     * <p>
     * @attr description
     * Defines the relationship between the ViewGroup and its descendants
     * when looking for a View to take focus.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>afterDescendants</td><td>1</td><td>The ViewGroup will get focus only if none of its descendants want it.</td></tr>
     * <tr><td>beforeDescendants</td><td>0</td><td>The ViewGroup will get focus before any of its descendants.</td></tr>
     * <tr><td>blocksDescendants</td><td>2</td><td>The ViewGroup will block its descendants from receiving focus.</td></tr>
     * </table>
     *
     * @attr name android:descendantFocusability
     */
    public static final int ViewGroup_descendantFocusability=7;
    /**
     * <p>
     * @attr description
     * Sets whether this ViewGroup should split MotionEvents
     * to separate child views during touch event dispatch.
     * If false (default prior to HONEYCOMB), touch events will be dispatched to
     * the child view where the first pointer went down until
     * the last pointer goes up.
     * If true (default for HONEYCOMB and later), touch events may be dispatched to
     * multiple children. MotionEvents for each pointer will be dispatched to the child
     * view where the initial ACTION_DOWN event happened.
     * See {@link android.view.ViewGroup#setMotionEventSplittingEnabled(boolean)}
     * for more information.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:splitMotionEvents
     */
    public static final int ViewGroup_splitMotionEvents=8;
    /**
     * <p>
     * @attr description
     * Defines whether changes in layout (caused by adding and removing items) should
     * cause a LayoutTransition to run. When this flag is set to true, a default
     * LayoutTransition object will be set on the ViewGroup container and default
     * animations will run when these layout changes occur.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:animateLayoutChanges
     */
    public static final int ViewGroup_animateLayoutChanges=9;
    /**
     * <p>
     * @attr description
     * Defines the layout mode of this ViewGroup.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>clipBounds</td><td>0</td><td>Use the children's clip bounds when laying out this container.</td></tr>
     * <tr><td>opticalBounds</td><td>1</td><td>Use the children's optical bounds when laying out this container.</td></tr>
     * </table>
     *
     * @attr name android:layoutMode
     */
    public static final int ViewGroup_layoutMode=10;
    /**
     * <p>
     * @attr description
     * Sets whether or not this ViewGroup should be treated as a single entity
     * when doing an Activity transition. Typically, the elements inside a
     * ViewGroup are each transitioned from the scene individually. The default
     * for a ViewGroup is false unless it has a background. See
     * {@link android.app.ActivityOptions#makeSceneTransitionAnimation(android.app.Activity,
     * android.view.View, String)} for more information. Corresponds to
     * {@link android.view.ViewGroup#setTransitionGroup(boolean)}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:transitionGroup
     */
    public static final int ViewGroup_transitionGroup=11;
    /**
     * <p>
     * @attr description
     * Set to true if this ViewGroup blocks focus in the presence of a touchscreen.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:touchscreenBlocksFocus
     */
    public static final int ViewGroup_touchscreenBlocksFocus=12;
    /**
     * This is the basic set of layout attributes that are common to all
     * layout managers.  These attributes are specified with the rest of
     * a view's normal attributes (such as {@link android.R.attr#background},
     * but will be parsed by the view's parent and ignored by the child.
     * <p>The values defined here correspond to the base layout attribute
     * class {@link android.view.ViewGroup.LayoutParams}.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ViewGroup_Layout_layout_width android:layout_width}</code></td><td>Specifies the basic width of the view.</td></tr>
     * <tr><td><code>{@link #ViewGroup_Layout_layout_height android:layout_height}</code></td><td>Specifies the basic height of the view.</td></tr>
     * </table>
     * @see #ViewGroup_Layout_layout_width
     * @see #ViewGroup_Layout_layout_height
     */
    public static final int[] ViewGroup_Layout={
      0x010100f4, 0x010100f5
    };
    /**
     * <p>
     * @attr description
     * Specifies the basic width of the view.  This is a required attribute
     * for any view inside of a containing layout manager.  Its value may
     * be a dimension (such as "12dip") for a constant width or one of
     * the special constants.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>fill_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
     * This constant is deprecated starting from API Level 8 and
     * is replaced by {@code match_parent}.</td></tr>
     * <tr><td>match_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
     * Introduced in API Level 8.</td></tr>
     * <tr><td>wrap_content</td><td>fffffffe</td><td>The view should be only big enough to enclose its content (plus padding).</td></tr>
     * </table>
     *
     * @attr name android:layout_width
     */
    public static final int ViewGroup_Layout_layout_width=0;
    /**
     * <p>
     * @attr description
     * Specifies the basic height of the view.  This is a required attribute
     * for any view inside of a containing layout manager.  Its value may
     * be a dimension (such as "12dip") for a constant height or one of
     * the special constants.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>fill_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
     * This constant is deprecated starting from API Level 8 and
     * is replaced by {@code match_parent}.</td></tr>
     * <tr><td>match_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
     * Introduced in API Level 8.</td></tr>
     * <tr><td>wrap_content</td><td>fffffffe</td><td>The view should be only big enough to enclose its content (plus padding).</td></tr>
     * </table>
     *
     * @attr name android:layout_height
     */
    public static final int ViewGroup_Layout_layout_height=1;
    /**
     * This is the basic set of layout attributes for layout managers that
     * wish to place margins around their child views.
     * These attributes are specified with the rest of
     * a view's normal attributes (such as {@link android.R.attr#background},
     * but will be parsed by the view's parent and ignored by the child.
     * <p>The values defined here correspond to the base layout attribute
     * class {@link android.view.ViewGroup.MarginLayoutParams}.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ViewGroup_MarginLayout_layout_width android:layout_width}</code></td><td>Specifies the basic width of the view.</td></tr>
     * <tr><td><code>{@link #ViewGroup_MarginLayout_layout_height android:layout_height}</code></td><td>Specifies the basic height of the view.</td></tr>
     * <tr><td><code>{@link #ViewGroup_MarginLayout_layout_margin android:layout_margin}</code></td><td>Specifies extra space on the left, top, right and bottom
     * sides of this view.</td></tr>
     * <tr><td><code>{@link #ViewGroup_MarginLayout_layout_marginLeft android:layout_marginLeft}</code></td><td>Specifies extra space on the left side of this view.</td></tr>
     * <tr><td><code>{@link #ViewGroup_MarginLayout_layout_marginTop android:layout_marginTop}</code></td><td>Specifies extra space on the top side of this view.</td></tr>
     * <tr><td><code>{@link #ViewGroup_MarginLayout_layout_marginRight android:layout_marginRight}</code></td><td>Specifies extra space on the right side of this view.</td></tr>
     * <tr><td><code>{@link #ViewGroup_MarginLayout_layout_marginBottom android:layout_marginBottom}</code></td><td>Specifies extra space on the bottom side of this view.</td></tr>
     * <tr><td><code>{@link #ViewGroup_MarginLayout_layout_marginStart android:layout_marginStart}</code></td><td>Specifies extra space on the start side of this view.</td></tr>
     * <tr><td><code>{@link #ViewGroup_MarginLayout_layout_marginEnd android:layout_marginEnd}</code></td><td>Specifies extra space on the end side of this view.</td></tr>
     * <tr><td><code>{@link #ViewGroup_MarginLayout_layout_marginHorizontal android:layout_marginHorizontal}</code></td><td>Specifies extra space on the left and right sides of this view.</td></tr>
     * <tr><td><code>{@link #ViewGroup_MarginLayout_layout_marginVertical android:layout_marginVertical}</code></td><td>Specifies extra space on the top and bottom sides of this view.</td></tr>
     * </table>
     * @see #ViewGroup_MarginLayout_layout_width
     * @see #ViewGroup_MarginLayout_layout_height
     * @see #ViewGroup_MarginLayout_layout_margin
     * @see #ViewGroup_MarginLayout_layout_marginLeft
     * @see #ViewGroup_MarginLayout_layout_marginTop
     * @see #ViewGroup_MarginLayout_layout_marginRight
     * @see #ViewGroup_MarginLayout_layout_marginBottom
     * @see #ViewGroup_MarginLayout_layout_marginStart
     * @see #ViewGroup_MarginLayout_layout_marginEnd
     * @see #ViewGroup_MarginLayout_layout_marginHorizontal
     * @see #ViewGroup_MarginLayout_layout_marginVertical
     */
    public static final int[] ViewGroup_MarginLayout={
      0x010100f4, 0x010100f5, 0x010100f6, 0x010100f7, 
      0x010100f8, 0x010100f9, 0x010100fa, 0x010103b5, 
      0x010103b6, 0x0101053b, 0x0101053c
    };
    /**
     * <p>
     * @attr description
     * Specifies the basic width of the view.  This is a required attribute
     * for any view inside of a containing layout manager.  Its value may
     * be a dimension (such as "12dip") for a constant width or one of
     * the special constants.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>fill_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
     * This constant is deprecated starting from API Level 8 and
     * is replaced by {@code match_parent}.</td></tr>
     * <tr><td>match_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
     * Introduced in API Level 8.</td></tr>
     * <tr><td>wrap_content</td><td>fffffffe</td><td>The view should be only big enough to enclose its content (plus padding).</td></tr>
     * </table>
     *
     * @attr name android:layout_width
     */
    public static final int ViewGroup_MarginLayout_layout_width=0;
    /**
     * <p>
     * @attr description
     * Specifies the basic height of the view.  This is a required attribute
     * for any view inside of a containing layout manager.  Its value may
     * be a dimension (such as "12dip") for a constant height or one of
     * the special constants.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>fill_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
     * This constant is deprecated starting from API Level 8 and
     * is replaced by {@code match_parent}.</td></tr>
     * <tr><td>match_parent</td><td>ffffffff</td><td>The view should be as big as its parent (minus padding).
     * Introduced in API Level 8.</td></tr>
     * <tr><td>wrap_content</td><td>fffffffe</td><td>The view should be only big enough to enclose its content (plus padding).</td></tr>
     * </table>
     *
     * @attr name android:layout_height
     */
    public static final int ViewGroup_MarginLayout_layout_height=1;
    /**
     * <p>
     * @attr description
     * Specifies extra space on the left, top, right and bottom
     * sides of this view.  If both layout_margin and any of layout_marginLeft,
     * layout_marginRight, layout_marginStart, layout_marginEnd,
     * layout_marginTop, and layout_marginBottom are
     * also specified, the layout_margin value will take precedence over the
     * edge-specific values. This space is outside this view's bounds.
     * Margin values should be positive.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:layout_margin
     */
    public static final int ViewGroup_MarginLayout_layout_margin=2;
    /**
     * <p>
     * @attr description
     * Specifies extra space on the left side of this view.
     * This space is outside this view's bounds.
     * Margin values should be positive.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:layout_marginLeft
     */
    public static final int ViewGroup_MarginLayout_layout_marginLeft=3;
    /**
     * <p>
     * @attr description
     * Specifies extra space on the top side of this view.
     * This space is outside this view's bounds.
     * Margin values should be positive.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:layout_marginTop
     */
    public static final int ViewGroup_MarginLayout_layout_marginTop=4;
    /**
     * <p>
     * @attr description
     * Specifies extra space on the right side of this view.
     * This space is outside this view's bounds.
     * Margin values should be positive.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:layout_marginRight
     */
    public static final int ViewGroup_MarginLayout_layout_marginRight=5;
    /**
     * <p>
     * @attr description
     * Specifies extra space on the bottom side of this view.
     * This space is outside this view's bounds.
     * Margin values should be positive.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:layout_marginBottom
     */
    public static final int ViewGroup_MarginLayout_layout_marginBottom=6;
    /**
     * <p>
     * @attr description
     * Specifies extra space on the start side of this view.
     * This space is outside this view's bounds.
     * Margin values should be positive.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:layout_marginStart
     */
    public static final int ViewGroup_MarginLayout_layout_marginStart=7;
    /**
     * <p>
     * @attr description
     * Specifies extra space on the end side of this view.
     * This space is outside this view's bounds.
     * Margin values should be positive.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:layout_marginEnd
     */
    public static final int ViewGroup_MarginLayout_layout_marginEnd=8;
    /**
     * <p>
     * @attr description
     * Specifies extra space on the left and right sides of this view.
     * Specifying layout_marginHorizontal is equivalent to specifying
     * layout_marginLeft and layout_marginRight.
     * If both layout_marginHorizontal and either/both of layout_marginLeft
     * and layout_marginRight are also specified, the layout_marginHorizontal
     * value will take precedence over the
     * edge-specific values. Also, layout_margin will always take precedence over
     * any of these values, including layout_marginHorizontal.
     * This space is outside this view's bounds.
     * Margin values should be positive.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:layout_marginHorizontal
     */
    public static final int ViewGroup_MarginLayout_layout_marginHorizontal=9;
    /**
     * <p>
     * @attr description
     * Specifies extra space on the top and bottom sides of this view.
     * Specifying layout_marginVertical is equivalent to specifying
     * layout_marginTop and layout_marginBottom with that same value.
     * If both layout_marginVertical and either/both of layout_marginTop and
     * layout_marginBottom are also specified, the layout_marginVertical value
     * will take precedence over the edge-specific values.
     * Also, layout_margin will always take precedence over
     * any of these values, including layout_marginVertical.
     * This space is outside this view's bounds.
     * Margin values should be positive.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:layout_marginVertical
     */
    public static final int ViewGroup_MarginLayout_layout_marginVertical=10;
    /**
     * A {@link android.view.ViewStub} lets you lazily include other XML layouts
     * inside your application at runtime.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ViewStub_id android:id}</code></td><td>Supply an identifier name for this view, to later retrieve it
     * with {@link android.view.View#findViewById View.findViewById()} or
     * {@link android.app.Activity#findViewById Activity.findViewById()}.</td></tr>
     * <tr><td><code>{@link #ViewStub_layout android:layout}</code></td><td>Supply an identifier for the layout resource to inflate when the ViewStub
     * becomes visible or when forced to do so.</td></tr>
     * <tr><td><code>{@link #ViewStub_inflatedId android:inflatedId}</code></td><td>Overrides the id of the inflated View with this value.</td></tr>
     * </table>
     * @see #ViewStub_id
     * @see #ViewStub_layout
     * @see #ViewStub_inflatedId
     */
    public static final int[] ViewStub={
      0x010100d0, 0x010100f2, 0x010100f3
    };
    /**
     * <p>
     * @attr description
     * Supply an identifier name for this view.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:id
     */
    public static final int ViewStub_id=0;
    /**
     * <p>
     * @attr description
     * Supply an identifier for the layout resource to inflate when the ViewStub
     * becomes visible or when forced to do so. The layout resource must be a
     * valid reference to a layout.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:layout
     */
    public static final int ViewStub_layout=1;
    /**
     * <p>
     * @attr description
     * Overrides the id of the inflated View with this value.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:inflatedId
     */
    public static final int ViewStub_inflatedId=2;
    public static final int[] ViewSwitcher={
    };
    /**
     * Attributes that can be assigned to a tag for a particular View.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ViewTag_value android:value}</code></td><td>Concrete value to assign to this piece of named meta-data.</td></tr>
     * <tr><td><code>{@link #ViewTag_id android:id}</code></td><td>Supply an identifier name for this view, to later retrieve it
     * with {@link android.view.View#findViewById View.findViewById()} or
     * {@link android.app.Activity#findViewById Activity.findViewById()}.</td></tr>
     * </table>
     * @see #ViewTag_value
     * @see #ViewTag_id
     */
    public static final int[] ViewTag={
      0x01010024, 0x010100d0
    };
    /**
     * <p>
     * @attr description
     * Specifies the value with which to tag the view.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:value
     */
    public static final int ViewTag_value=0;
    /**
     * <p>
     * @attr description
     * Specifies the key identifying a tag. This must be a resource reference.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:id
     */
    public static final int ViewTag_id=1;
    /**
     * Use with {@link android.transition.Visibility} transitions, such as
     * <code>slide</code>, <code>explode</code>, and <code>fade</code> to mark which
     * views are supported.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #VisibilityTransition_transitionVisibilityMode android:transitionVisibilityMode}</code></td><td>Changes whether the transition supports appearing and/or disappearing Views.</td></tr>
     * </table>
     * @see #VisibilityTransition_transitionVisibilityMode
     */
    public static final int[] VisibilityTransition={
      0x0101047c
    };
    /**
     * <p>
     * @attr description
     * Changes whether the transition supports appearing and/or disappearing Views.
     * Corresponds to {@link android.transition.Visibility#setMode(int)}.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>mode_in</td><td>1</td><td>Only appearing Views will be supported.</td></tr>
     * <tr><td>mode_out</td><td>2</td><td>Only disappearing Views will be supported.</td></tr>
     * </table>
     *
     * @attr name android:transitionVisibilityMode
     */
    public static final int VisibilityTransition_transitionVisibilityMode=0;
    /**
     * Use <code>voice-enrollment-application</code>
     * as the root tag of the XML resource that escribes the supported keyphrases (hotwords)
     * by the enrollment application.
     * Described here are the attributes that can be included in that tag.
     * @hide
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * </table>
     */
    public static final int[] VoiceEnrollmentApplication={
      0x0101045e, 0x0101045f, 0x01010460, 0x010104a6
    };
    /**
     * <p>
     * @attr description
     * A globally unique ID for the keyphrase. @hide
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:searchKeyphraseId
     */
    public static final int VoiceEnrollmentApplication_searchKeyphraseId=0;
    /**
     * <p>
     * @attr description
     * The actual keyphrase/hint text, or empty if not keyphrase dependent. @hide
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:searchKeyphrase
     */
    public static final int VoiceEnrollmentApplication_searchKeyphrase=1;
    /**
     * <p>
     * @attr description
     * A comma separated list of BCP-47 language tag for locales that are supported
     * for this keyphrase, or empty if not locale dependent. @hide
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:searchKeyphraseSupportedLocales
     */
    public static final int VoiceEnrollmentApplication_searchKeyphraseSupportedLocales=2;
    /**
     * <p>
     * @attr description
     * Flags for supported recognition modes. @hide
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>none</td><td>0</td><td></td></tr>
     * <tr><td>userIdentification</td><td>2</td><td></td></tr>
     * <tr><td>voiceTrigger</td><td>1</td><td></td></tr>
     * </table>
     *
     * @attr name android:searchKeyphraseRecognitionFlags
     */
    public static final int VoiceEnrollmentApplication_searchKeyphraseRecognitionFlags=3;
    /**
     * Use <code>voice-interaction-service</code> as the root tag of the XML resource that
     * describes a {@link android.service.voice.VoiceInteractionService}, which is referenced from
     * its {@link android.service.voice.VoiceInteractionService#SERVICE_META_DATA} meta-data entry.
     * Described here are the attributes that can be included in that tag.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #VoiceInteractionService_settingsActivity android:settingsActivity}</code></td><td>Fully qualified class name of an activity that allows the user to modify
     * the settings for this service.</td></tr>
     * <tr><td><code>{@link #VoiceInteractionService_sessionService android:sessionService}</code></td><td>The service that hosts active voice interaction sessions.</td></tr>
     * <tr><td><code>{@link #VoiceInteractionService_recognitionService android:recognitionService}</code></td><td>The service that provides voice recognition.</td></tr>
     * <tr><td><code>{@link #VoiceInteractionService_supportsAssist android:supportsAssist}</code></td><td>Flag indicating whether this voice interaction service is capable of handling the
     * assist action.</td></tr>
     * <tr><td><code>{@link #VoiceInteractionService_supportsLaunchVoiceAssistFromKeyguard android:supportsLaunchVoiceAssistFromKeyguard}</code></td><td>Flag indicating whether this voice interaction service is capable of being launched
     * from the keyguard.</td></tr>
     * <tr><td><code>{@link #VoiceInteractionService_supportsLocalInteraction android:supportsLocalInteraction}</code></td><td>Flag indicating whether this voice interaction service can handle local voice
     * interaction requests from an Activity.</td></tr>
     * </table>
     * @see #VoiceInteractionService_settingsActivity
     * @see #VoiceInteractionService_sessionService
     * @see #VoiceInteractionService_recognitionService
     * @see #VoiceInteractionService_supportsAssist
     * @see #VoiceInteractionService_supportsLaunchVoiceAssistFromKeyguard
     * @see #VoiceInteractionService_supportsLocalInteraction
     */
    public static final int[] VoiceInteractionService={
      0x01010225, 0x0101043d, 0x0101049c, 0x010104f0, 
      0x010104f1, 0x0101050f, 0x01010626
    };
    /**
     * <p>
     * @attr description
     * Fully qualified class name of an activity that allows the user to modify
     * the settings for this service.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:settingsActivity
     */
    public static final int VoiceInteractionService_settingsActivity=0;
    /**
     * <p>
     * @attr description
     * The service that hosts active voice interaction sessions.  This is required.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:sessionService
     */
    public static final int VoiceInteractionService_sessionService=1;
    /**
     * <p>
     * @attr description
     * The service that provides voice recognition. This is required. On Android 11 and
     * earlier, this must be a valid RecognitionService.
     * <p>
     * From Android 12 onward, this attribute does nothing. However, we still require it to
     * be set to something to reduce the risk that an app with an unspecified value gets
     * pushed to older platform versions, where it will cause a boot loop. To make sure
     * developers don't miss it, the system will reset the current assistant if this isn't
     * specified.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:recognitionService
     */
    public static final int VoiceInteractionService_recognitionService=2;
    /**
     * <p>
     * @attr description
     * Flag indicating whether this voice interaction service is capable of handling the
     * assist action.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:supportsAssist
     */
    public static final int VoiceInteractionService_supportsAssist=3;
    /**
     * <p>
     * @attr description
     * Flag indicating whether this voice interaction service is capable of being launched
     * from the keyguard.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:supportsLaunchVoiceAssistFromKeyguard
     */
    public static final int VoiceInteractionService_supportsLaunchVoiceAssistFromKeyguard=4;
    /**
     * <p>
     * @attr description
     * Flag indicating whether this voice interaction service can handle local voice
     * interaction requests from an Activity. This flag is new in
     * {@link android.os.Build.VERSION_CODES#N} and not used in previous versions.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:supportsLocalInteraction
     */
    public static final int VoiceInteractionService_supportsLocalInteraction=5;
    /**
     * <p>
     * @attr description
     * The service that provides {@link android.service.voice.HotwordDetectionService}.
     * @hide
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:hotwordDetectionService
     */
    @android.annotation.SystemApi
    public static final int VoiceInteractionService_hotwordDetectionService=6;
    public static final int[] VoiceInteractionSession={
    };
    /**
     * Base attributes available to VolumePreference.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #VolumePreference_streamType android:streamType}</code></td><td>Different audio stream types.</td></tr>
     * </table>
     * @see #VolumePreference_streamType
     */
    public static final int[] VolumePreference={
      0x01010209
    };
    /**
     * <p>
     * @attr description
     * Different audio stream types.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>alarm</td><td>4</td><td></td></tr>
     * <tr><td>music</td><td>3</td><td></td></tr>
     * <tr><td>ring</td><td>2</td><td></td></tr>
     * <tr><td>system</td><td>1</td><td></td></tr>
     * <tr><td>voice</td><td>0</td><td></td></tr>
     * </table>
     *
     * @attr name android:streamType
     */
    public static final int VolumePreference_streamType=0;
    /**
     * Use <code>wallpaper</code> as the root tag of the XML resource that
     * describes an
     * {@link android.service.wallpaper.WallpaperService}, which is
     * referenced from its
     * {@link android.service.wallpaper.WallpaperService#SERVICE_META_DATA}
     * meta-data entry.  Described here are the attributes that can be
     * included in that tag.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Wallpaper_description android:description}</code></td><td>Descriptive text for the associated data.</td></tr>
     * <tr><td><code>{@link #Wallpaper_settingsActivity android:settingsActivity}</code></td><td>Fully qualified class name of an activity that allows the user to modify
     * the settings for this service.</td></tr>
     * <tr><td><code>{@link #Wallpaper_thumbnail android:thumbnail}</code></td><td>Reference to the wallpaper's thumbnail bitmap.</td></tr>
     * <tr><td><code>{@link #Wallpaper_author android:author}</code></td><td>Name of the author and/or source/collection of this component, for example,
     * Art Collection, Picasso.</td></tr>
     * <tr><td><code>{@link #Wallpaper_contextUri android:contextUri}</code></td><td>Uri that specifies a link for further context of this wallpaper, for example,
     * http://www.picasso.org.</td></tr>
     * <tr><td><code>{@link #Wallpaper_contextDescription android:contextDescription}</code></td><td>Title of the uri that specifies a link for further context of this wallpaper,
     * for example, Explore collection.</td></tr>
     * <tr><td><code>{@link #Wallpaper_showMetadataInPreview android:showMetadataInPreview}</code></td><td>Whether to show any metadata when previewing the wallpaper.</td></tr>
     * <tr><td><code>{@link #Wallpaper_settingsSliceUri android:settingsSliceUri}</code></td><td>Uri that specifies a settings Slice for this wallpaper.</td></tr>
     * <tr><td><code>{@link #Wallpaper_supportsMultipleDisplays android:supportsMultipleDisplays}</code></td><td>Indicates that this wallpaper service can support multiple engines to render on each
     * surface independently.</td></tr>
     * <tr><td><code>{@link #Wallpaper_shouldUseDefaultUnfoldTransition android:shouldUseDefaultUnfoldTransition}</code></td><td>Indicates that this wallpaper service should receive zoom transition updates when
     * changing the structural state of the device (e.g.</td></tr>
     * </table>
     * @see #Wallpaper_description
     * @see #Wallpaper_settingsActivity
     * @see #Wallpaper_thumbnail
     * @see #Wallpaper_author
     * @see #Wallpaper_contextUri
     * @see #Wallpaper_contextDescription
     * @see #Wallpaper_showMetadataInPreview
     * @see #Wallpaper_settingsSliceUri
     * @see #Wallpaper_supportsMultipleDisplays
     * @see #Wallpaper_shouldUseDefaultUnfoldTransition
     */
    public static final int[] Wallpaper={
      0x01010020, 0x01010225, 0x010102a5, 0x010102b4, 
      0x0101052d, 0x0101052e, 0x0101052f, 0x0101058d, 
      0x01010593, 0x01010596, 0x0101064c
    };
    /**
     * <p>
     * @attr description
     * Short description of the component's purpose or behavior.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:description
     */
    public static final int Wallpaper_description=0;
    /**
     * <p>
     * @attr description
     * Fully qualified class name of an activity that allows the user to modify
     * the settings for this service.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:settingsActivity
     */
    public static final int Wallpaper_settingsActivity=1;
    /**
     * <p>
     * @attr description
     * Reference to the wallpaper's thumbnail bitmap.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:thumbnail
     */
    public static final int Wallpaper_thumbnail=2;
    /**
     * <p>
     * @attr description
     * Name of the author and/or source/collection of this component, for example,
     * Art Collection, Picasso.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:author
     */
    public static final int Wallpaper_author=3;
    /**
     * <p>
     * @attr description
     * Uri that specifies a link for further context of this wallpaper, for example,
     * http://www.picasso.org.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:contextUri
     */
    public static final int Wallpaper_contextUri=4;
    /**
     * <p>
     * @attr description
     * Title of the uri that specifies a link for further context of this wallpaper,
     * for example, Explore collection.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:contextDescription
     */
    public static final int Wallpaper_contextDescription=5;
    /**
     * <p>
     * @attr description
     * Whether to show any metadata when previewing the wallpaper. If this value is
     * set to true, any component that shows a preview of this live wallpaper should also show
     * accompanying information like the title, the description, the author and the context
     * description of this wallpaper so the user gets to know further information about this
     * wallpaper.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:showMetadataInPreview
     */
    public static final int Wallpaper_showMetadataInPreview=6;
    /**
     * <p>
     * @attr description
     * Wallpapers optimized and capable of drawing in ambient mode will return true.
     * This feature requires the android.permission.AMBIENT_WALLPAPER permission.
     * @hide
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:supportsAmbientMode
     */
    @android.annotation.SystemApi
    public static final int Wallpaper_supportsAmbientMode=7;
    /**
     * <p>
     * @attr description
     * Uri that specifies a settings Slice for this wallpaper.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:settingsSliceUri
     */
    public static final int Wallpaper_settingsSliceUri=8;
    /**
     * <p>
     * @attr description
     * Indicates that this wallpaper service can support multiple engines to render on each
     * surface independently. An example use case is a multi-display set-up where the
     * wallpaper service can render surfaces to each of the connected displays. Corresponds to
     * {@link android.app.WallpaperInfo#supportsMultipleDisplays()}
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:supportsMultipleDisplays
     */
    public static final int Wallpaper_supportsMultipleDisplays=9;
    /**
     * <p>
     * @attr description
     * Indicates that this wallpaper service should receive zoom transition updates when
     * changing the structural state of the device (e.g. when folding or unfolding
     * a foldable device). When this value is set to true
     * {@link android.service.wallpaper.WallpaperService.Engine} could receive zoom updates
     * before or after changing the device state. Wallpapers receive zoom updates using
     * {@link android.service.wallpaper.WallpaperService.Engine#onZoomChanged(float)} and
     * zoom rendering should be handled manually. Zoom updates are delivered only when
     * {@link android.service.wallpaper.WallpaperService.Engine} is created and not destroyed.
     * Default value is true.
     * Corresponds to
     * {@link android.app.WallpaperInfo#shouldUseDefaultUnfoldTransition()}
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:shouldUseDefaultUnfoldTransition
     */
    public static final int Wallpaper_shouldUseDefaultUnfoldTransition=10;
    /**
     * Use <code>wallpaper-preview</code> as the root tag of the XML resource that
     * describes a wallpaper preview.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #WallpaperPreviewInfo_staticWallpaperPreview android:staticWallpaperPreview}</code></td><td>A resource id of a static drawable.</td></tr>
     * </table>
     * @see #WallpaperPreviewInfo_staticWallpaperPreview
     */
    public static final int[] WallpaperPreviewInfo={
      0x01010331
    };
    /**
     * <p>
     * @attr description
     * A resource id of a static drawable.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:staticWallpaperPreview
     */
    public static final int WallpaperPreviewInfo_staticWallpaperPreview=0;
    /**
     * @hide
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * </table>
     */
    public static final int[] WeightedLinearLayout={
      0x01120086, 0x01120087, 0x0112008c, 0x0112008d
    };
    /**
     * The set of attributes that describe a Windows's theme.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Window_backgroundDimAmount android:backgroundDimAmount}</code></td><td>Default background dim amount when a menu, dialog, or something similar pops up.</td></tr>
     * <tr><td><code>{@link #Window_windowBackground android:windowBackground}</code></td><td>Drawable to use as the overall window background.</td></tr>
     * <tr><td><code>{@link #Window_windowFrame android:windowFrame}</code></td><td>Drawable to use as a frame around the window.</td></tr>
     * <tr><td><code>{@link #Window_windowNoTitle android:windowNoTitle}</code></td><td>Flag indicating whether there should be no title on this window.</td></tr>
     * <tr><td><code>{@link #Window_windowIsFloating android:windowIsFloating}</code></td><td>Flag indicating whether this is a floating window.</td></tr>
     * <tr><td><code>{@link #Window_windowIsTranslucent android:windowIsTranslucent}</code></td><td>Flag indicating whether this is a translucent window.</td></tr>
     * <tr><td><code>{@link #Window_windowContentOverlay android:windowContentOverlay}</code></td><td>This Drawable is overlaid over the foreground of the Window's content area, usually
     * to place a shadow below the title.</td></tr>
     * <tr><td><code>{@link #Window_textColor android:textColor}</code></td><td>Color of text (usually same as colorForeground).</td></tr>
     * <tr><td><code>{@link #Window_windowAnimationStyle android:windowAnimationStyle}</code></td><td>Reference to a style resource holding
     * the set of window animations to use, which can be
     * any of the attributes defined by
     * {@link android.R.styleable#WindowAnimation}.</td></tr>
     * <tr><td><code>{@link #Window_windowFullscreen android:windowFullscreen}</code></td><td>Flag indicating whether this window should fill the entire screen.</td></tr>
     * <tr><td><code>{@link #Window_windowNoDisplay android:windowNoDisplay}</code></td><td>Flag indicating that this window should not be displayed at all.</td></tr>
     * <tr><td><code>{@link #Window_backgroundDimEnabled android:backgroundDimEnabled}</code></td><td>Control whether dimming behind the window is enabled.</td></tr>
     * <tr><td><code>{@link #Window_windowDisablePreview android:windowDisablePreview}</code></td><td>Flag allowing you to disable the splash screen for a window.</td></tr>
     * <tr><td><code>{@link #Window_windowSoftInputMode android:windowSoftInputMode}</code></td><td>Defines the default soft input state that this window would
     * like when it is displayed.</td></tr>
     * <tr><td><code>{@link #Window_windowShowWallpaper android:windowShowWallpaper}</code></td><td>Flag indicating that this window's background should be the
     * user's current wallpaper.</td></tr>
     * <tr><td><code>{@link #Window_windowActionBar android:windowActionBar}</code></td><td>Flag indicating whether this window should have an Action Bar
     * in place of the usual title bar.</td></tr>
     * <tr><td><code>{@link #Window_windowActionModeOverlay android:windowActionModeOverlay}</code></td><td>Flag indicating whether action modes should overlay window content
     * when there is not reserved space for their UI (such as an Action Bar).</td></tr>
     * <tr><td><code>{@link #Window_windowActionBarOverlay android:windowActionBarOverlay}</code></td><td>Flag indicating whether this window's Action Bar should overlay
     * application content.</td></tr>
     * <tr><td><code>{@link #Window_windowEnableSplitTouch android:windowEnableSplitTouch}</code></td><td>Flag indicating that this window should allow touches to be split
     * across other windows that also support split touch.</td></tr>
     * <tr><td><code>{@link #Window_windowMinWidthMajor android:windowMinWidthMajor}</code></td><td>The minimum width the window is allowed to be, along the major
     * axis of the screen.</td></tr>
     * <tr><td><code>{@link #Window_windowMinWidthMinor android:windowMinWidthMinor}</code></td><td>The minimum width the window is allowed to be, along the minor
     * axis of the screen.</td></tr>
     * <tr><td><code>{@link #Window_windowCloseOnTouchOutside android:windowCloseOnTouchOutside}</code></td><td>Control whether a container should automatically close itself if
     * the user touches outside of it.</td></tr>
     * <tr><td><code>{@link #Window_windowOverscan android:windowOverscan}</code></td><td>Flag indicating whether this window should extend into overscan region.</td></tr>
     * <tr><td><code>{@link #Window_windowTranslucentStatus android:windowTranslucentStatus}</code></td><td>Flag indicating whether this window requests a translucent status bar.</td></tr>
     * <tr><td><code>{@link #Window_windowTranslucentNavigation android:windowTranslucentNavigation}</code></td><td>Flag indicating whether this window requests a translucent navigation bar.</td></tr>
     * <tr><td><code>{@link #Window_windowContentTransitions android:windowContentTransitions}</code></td><td>Flag indicating whether this window requests that content changes be performed
     * as scene changes with transitions.</td></tr>
     * <tr><td><code>{@link #Window_windowContentTransitionManager android:windowContentTransitionManager}</code></td><td>Reference to a TransitionManager XML resource defining the desired
     * transitions between different window content.</td></tr>
     * <tr><td><code>{@link #Window_windowEnterTransition android:windowEnterTransition}</code></td><td>Reference to a Transition XML resource defining the desired Transition
     * used to move Views into the initial Window's content Scene.</td></tr>
     * <tr><td><code>{@link #Window_windowExitTransition android:windowExitTransition}</code></td><td>Reference to a Transition XML resource defining the desired Transition
     * used to move Views out of the Window's content Scene when launching a new Activity.</td></tr>
     * <tr><td><code>{@link #Window_windowSharedElementEnterTransition android:windowSharedElementEnterTransition}</code></td><td>Reference to a Transition XML resource defining the desired Transition
     * used to move shared elements transferred into the Window's initial content Scene.</td></tr>
     * <tr><td><code>{@link #Window_windowSharedElementExitTransition android:windowSharedElementExitTransition}</code></td><td>Reference to a Transition XML resource defining the desired Transition
     * used when starting a new Activity to move shared elements prior to transferring
     * to the called Activity.</td></tr>
     * <tr><td><code>{@link #Window_windowAllowReturnTransitionOverlap android:windowAllowReturnTransitionOverlap}</code></td><td>Flag indicating whether this Window's transition should overlap with
     * the exiting transition of the called Activity when the called Activity
     * finishes.</td></tr>
     * <tr><td><code>{@link #Window_windowAllowEnterTransitionOverlap android:windowAllowEnterTransitionOverlap}</code></td><td>Flag indicating whether this Window's transition should overlap with
     * the exiting transition of the calling Activity.</td></tr>
     * <tr><td><code>{@link #Window_windowDrawsSystemBarBackgrounds android:windowDrawsSystemBarBackgrounds}</code></td><td>Flag indicating whether this Window is responsible for drawing the background for the
     * system bars.</td></tr>
     * <tr><td><code>{@link #Window_statusBarColor android:statusBarColor}</code></td><td>The color for the status bar.</td></tr>
     * <tr><td><code>{@link #Window_navigationBarColor android:navigationBarColor}</code></td><td>The color for the navigation bar.</td></tr>
     * <tr><td><code>{@link #Window_windowTransitionBackgroundFadeDuration android:windowTransitionBackgroundFadeDuration}</code></td><td>The duration, in milliseconds, of the window background fade duration
     * when transitioning into or away from an Activity when called with an
     * Activity Transition.</td></tr>
     * <tr><td><code>{@link #Window_windowElevation android:windowElevation}</code></td><td>Elevation to use for the window.</td></tr>
     * <tr><td><code>{@link #Window_windowClipToOutline android:windowClipToOutline}</code></td><td>Whether to clip window content to the outline of the window background.</td></tr>
     * <tr><td><code>{@link #Window_windowReturnTransition android:windowReturnTransition}</code></td><td>Reference to a Transition XML resource defining the desired Transition
     * used to move Views out of the scene when the Window is
     * preparing to close.</td></tr>
     * <tr><td><code>{@link #Window_windowReenterTransition android:windowReenterTransition}</code></td><td>Reference to a Transition XML resource defining the desired Transition
     * used to move Views in to the scene when returning from a previously-started Activity.</td></tr>
     * <tr><td><code>{@link #Window_windowSharedElementReturnTransition android:windowSharedElementReturnTransition}</code></td><td>Reference to a Transition XML resource defining the desired Transition
     * used to move shared elements transferred back to a calling Activity.</td></tr>
     * <tr><td><code>{@link #Window_windowSharedElementReenterTransition android:windowSharedElementReenterTransition}</code></td><td>Reference to a Transition XML resource defining the desired Transition
     * used for shared elements transferred back to a calling Activity.</td></tr>
     * <tr><td><code>{@link #Window_windowSharedElementsUseOverlay android:windowSharedElementsUseOverlay}</code></td><td>Indicates whether or not shared elements should use an overlay
     * during transitions.</td></tr>
     * <tr><td><code>{@link #Window_windowActivityTransitions android:windowActivityTransitions}</code></td><td>Flag indicating whether this window allows Activity Transitions.</td></tr>
     * <tr><td><code>{@link #Window_windowLightStatusBar android:windowLightStatusBar}</code></td><td>If set, the status bar will be drawn such that it is compatible with a light
     * status bar background.</td></tr>
     * <tr><td><code>{@link #Window_windowBackgroundFallback android:windowBackgroundFallback}</code></td><td>Drawable to draw selectively within the inset areas when the windowBackground
     * has been set to null.</td></tr>
     * <tr><td><code>{@link #Window_windowSplashscreenContent android:windowSplashscreenContent}</code></td><td>Reference to a drawable to be used as the splash screen content of the window.</td></tr>
     * <tr><td><code>{@link #Window_windowLightNavigationBar android:windowLightNavigationBar}</code></td><td>If set, the navigation bar will be drawn such that it is compatible with a light
     * navigation bar background.</td></tr>
     * <tr><td><code>{@link #Window_navigationBarDividerColor android:navigationBarDividerColor}</code></td><td>Shows a thin line of the specified color between the navigation bar and the app
     * content.</td></tr>
     * <tr><td><code>{@link #Window_windowLayoutInDisplayCutoutMode android:windowLayoutInDisplayCutoutMode}</code></td><td>Controls how the window is laid out if there is a {@code DisplayCutout}.</td></tr>
     * <tr><td><code>{@link #Window_enforceStatusBarContrast android:enforceStatusBarContrast}</code></td><td>Sets whether the system should ensure that the status bar has enough
     * contrast when a fully transparent background is requested.</td></tr>
     * <tr><td><code>{@link #Window_enforceNavigationBarContrast android:enforceNavigationBarContrast}</code></td><td>Sets whether the system should ensure that the navigation bar has enough
     * contrast when a fully transparent background is requested.</td></tr>
     * <tr><td><code>{@link #Window_windowBlurBehindRadius android:windowBlurBehindRadius}</code></td><td>When windowBlurBehindEnabled is set, this is the amount of blur to apply
     * behind the window.</td></tr>
     * <tr><td><code>{@link #Window_windowBlurBehindEnabled android:windowBlurBehindEnabled}</code></td><td>If set, everything behind the window will be blurred with radius
     * windowBackgroundBlurRadius.</td></tr>
     * <tr><td><code>{@link #Window_windowBackgroundBlurRadius android:windowBackgroundBlurRadius}</code></td><td>Blur the screen behind the window with the bounds of the window.</td></tr>
     * <tr><td><code>{@link #Window_windowSplashScreenBackground android:windowSplashScreenBackground}</code></td><td>The background color for the splash screen, if not specify then system will
     * calculate from windowBackground.</td></tr>
     * <tr><td><code>{@link #Window_windowSplashScreenAnimatedIcon android:windowSplashScreenAnimatedIcon}</code></td><td>Replace an icon in the center of the starting window, if the object is animated
     * and drawable(e.g.</td></tr>
     * <tr><td><code>{@link #Window_windowSplashScreenAnimationDuration android:windowSplashScreenAnimationDuration}</code></td><td>The duration, in milliseconds, of the window splash screen icon animation duration
     * when playing the splash screen starting window.</td></tr>
     * <tr><td><code>{@link #Window_windowSplashScreenBrandingImage android:windowSplashScreenBrandingImage}</code></td><td>Place an drawable image in the bottom of the starting window, it can be used to
     * represent the branding of the application.</td></tr>
     * <tr><td><code>{@link #Window_windowSplashScreenIconBackgroundColor android:windowSplashScreenIconBackgroundColor}</code></td><td>Set a background behind the splash screen icon.</td></tr>
     * </table>
     * @see #Window_backgroundDimAmount
     * @see #Window_windowBackground
     * @see #Window_windowFrame
     * @see #Window_windowNoTitle
     * @see #Window_windowIsFloating
     * @see #Window_windowIsTranslucent
     * @see #Window_windowContentOverlay
     * @see #Window_textColor
     * @see #Window_windowAnimationStyle
     * @see #Window_windowFullscreen
     * @see #Window_windowNoDisplay
     * @see #Window_backgroundDimEnabled
     * @see #Window_windowDisablePreview
     * @see #Window_windowSoftInputMode
     * @see #Window_windowShowWallpaper
     * @see #Window_windowActionBar
     * @see #Window_windowActionModeOverlay
     * @see #Window_windowActionBarOverlay
     * @see #Window_windowEnableSplitTouch
     * @see #Window_windowMinWidthMajor
     * @see #Window_windowMinWidthMinor
     * @see #Window_windowCloseOnTouchOutside
     * @see #Window_windowOverscan
     * @see #Window_windowTranslucentStatus
     * @see #Window_windowTranslucentNavigation
     * @see #Window_windowContentTransitions
     * @see #Window_windowContentTransitionManager
     * @see #Window_windowEnterTransition
     * @see #Window_windowExitTransition
     * @see #Window_windowSharedElementEnterTransition
     * @see #Window_windowSharedElementExitTransition
     * @see #Window_windowAllowReturnTransitionOverlap
     * @see #Window_windowAllowEnterTransitionOverlap
     * @see #Window_windowDrawsSystemBarBackgrounds
     * @see #Window_statusBarColor
     * @see #Window_navigationBarColor
     * @see #Window_windowTransitionBackgroundFadeDuration
     * @see #Window_windowElevation
     * @see #Window_windowClipToOutline
     * @see #Window_windowReturnTransition
     * @see #Window_windowReenterTransition
     * @see #Window_windowSharedElementReturnTransition
     * @see #Window_windowSharedElementReenterTransition
     * @see #Window_windowSharedElementsUseOverlay
     * @see #Window_windowActivityTransitions
     * @see #Window_windowLightStatusBar
     * @see #Window_windowBackgroundFallback
     * @see #Window_windowSplashscreenContent
     * @see #Window_windowLightNavigationBar
     * @see #Window_navigationBarDividerColor
     * @see #Window_windowLayoutInDisplayCutoutMode
     * @see #Window_enforceStatusBarContrast
     * @see #Window_enforceNavigationBarContrast
     * @see #Window_windowBlurBehindRadius
     * @see #Window_windowBlurBehindEnabled
     * @see #Window_windowBackgroundBlurRadius
     * @see #Window_windowSplashScreenBackground
     * @see #Window_windowSplashScreenAnimatedIcon
     * @see #Window_windowSplashScreenAnimationDuration
     * @see #Window_windowSplashScreenBrandingImage
     * @see #Window_windowSplashScreenIconBackgroundColor
     */
    public static final int[] Window={
      0x01010032, 0x01010054, 0x01010055, 0x01010056, 
      0x01010057, 0x01010058, 0x01010059, 0x01010098, 
      0x010100ae, 0x0101020d, 0x0101021e, 0x0101021f, 
      0x01010222, 0x0101022b, 0x01010292, 0x010102cd, 
      0x010102dd, 0x010102e4, 0x01010317, 0x01010356, 
      0x01010357, 0x0101035b, 0x010103cf, 0x010103ef, 
      0x010103f0, 0x010103f8, 0x010103f9, 0x01010437, 
      0x01010438, 0x01010439, 0x0101043a, 0x0101043b, 
      0x0101043c, 0x01010450, 0x01010451, 0x01010452, 
      0x01010461, 0x01010490, 0x010104ab, 0x010104ae, 
      0x010104af, 0x010104b0, 0x010104b1, 0x010104bb, 
      0x010104cd, 0x010104e0, 0x01010503, 0x01010564, 
      0x0101056c, 0x0101056d, 0x01010586, 0x01010604, 
      0x01010605, 0x0101061b, 0x0101061c, 0x0101062b, 
      0x0101062c, 0x0101062d, 0x0101062e, 0x0101062f, 
      0x01010630, 0x01120107, 0x01120108, 0x01120109, 
      0x0112010a, 0x0112010b, 0x0112010c
    };
    /**
     * <p>
     * @attr description
     * Default background dim amount when a menu, dialog, or something similar pops up.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:backgroundDimAmount
     */
    public static final int Window_backgroundDimAmount=0;
    /**
     * <p>
     * @attr description
     * Drawable to use as the overall window background.  As of
     * {@link android.os.Build.VERSION_CODES#HONEYCOMB}, this may
     * be a selector that uses state_accelerated to pick a non-solid
     * color when running on devices that can draw such a bitmap
     * with complex compositing on top at 60fps.
     * <p>There are a few special considerations to use when setting this
     * drawable:
     * <ul>
     * <li> This information will be used to infer the pixel format
     * for your window's surface.  If the drawable has any
     * non-opaque pixels, your window will be translucent
     * (32 bpp).
     * <li> If you want to draw the entire background
     * yourself, you should set this drawable to some solid
     * color that closely matches that background (so the
     * system's preview of your window will match), and
     * then in code manually set your window's background to
     * null so it will not be drawn.
     * </ul>
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:windowBackground
     */
    public static final int Window_windowBackground=1;
    /**
     * <p>
     * @attr description
     * Drawable to use as a frame around the window.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:windowFrame
     */
    public static final int Window_windowFrame=2;
    /**
     * <p>
     * @attr description
     * Flag indicating whether there should be no title on this window.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowNoTitle
     */
    public static final int Window_windowNoTitle=3;
    /**
     * <p>
     * @attr description
     * Flag indicating whether this is a floating window.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowIsFloating
     */
    public static final int Window_windowIsFloating=4;
    /**
     * <p>
     * @attr description
     * Flag indicating whether this is a translucent window.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowIsTranslucent
     */
    public static final int Window_windowIsTranslucent=5;
    /**
     * <p>
     * @attr description
     * This Drawable is overlaid over the foreground of the Window's content area, usually
     * to place a shadow below the title.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:windowContentOverlay
     */
    public static final int Window_windowContentOverlay=6;
    /**
     * <p>
     * @attr description
     * Color of text (usually same as colorForeground).
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:textColor
     */
    public static final int Window_textColor=7;
    /**
     * <p>
     * @attr description
     * Reference to a style resource holding
     * the set of window animations to use, which can be
     * any of the attributes defined by
     * {@link android.R.styleable#WindowAnimation}.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:windowAnimationStyle
     */
    public static final int Window_windowAnimationStyle=8;
    /**
     * <p>
     * @attr description
     * Flag indicating whether this window should fill the entire screen.  Corresponds
     * to {@link android.view.WindowManager.LayoutParams#FLAG_FULLSCREEN}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowFullscreen
     */
    public static final int Window_windowFullscreen=9;
    /**
     * <p>
     * @attr description
     * Flag indicating that this window should not be displayed at all.
     * The default value is false; if set to true, and this window is
     * the main window of an Activity, then it will never actually
     * be added to the window manager.  This means that your activity
     * must immediately quit without waiting for user interaction,
     * because there will be no such interaction coming.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowNoDisplay
     */
    public static final int Window_windowNoDisplay=10;
    /**
     * <p>
     * @attr description
     * Control whether dimming behind the window is enabled.  The default
     * theme does not set this value, meaning it is based on whether the
     * window is floating.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:backgroundDimEnabled
     */
    public static final int Window_backgroundDimEnabled=11;
    /**
     * <p>
     * @attr description
     * Flag allowing you to disable the splash screen for a window. The default value is
     * false; if set to true, the system can never use the window's theme to show a splash
     * screen before your actual instance is shown to the user.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowDisablePreview
     */
    public static final int Window_windowDisablePreview=12;
    /**
     * <p>
     * @attr description
     * Defines the default soft input state that this window would
     * like when it is displayed.  Corresponds
     * to {@link android.view.WindowManager.LayoutParams#softInputMode}.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>adjustNothing</td><td>30</td><td>Don't resize <em>or</em> pan the window to make room for the
     * soft input area; the window is never adjusted for it.</td></tr>
     * <tr><td>adjustPan</td><td>20</td><td>Don't resize the window to make room for the soft input area;
     * instead pan the contents of the window as focus moves inside
     * of it so that the user can see what they are typing.  This is
     * generally less desireable than panning because the user may
     * need to close the input area to get at and interact with
     * parts of the window.</td></tr>
     * <tr><td>adjustResize</td><td>10</td><td>Always resize the window: the content area of the window is
     * reduced to make room for the soft input area.</td></tr>
     * <tr><td>adjustUnspecified</td><td>0</td><td>The window resize/pan adjustment has not been specified,
     * the system will automatically select between resize and pan
     * modes, depending
     * on whether the content of the window has any layout views
     * that can scroll their contents.  If there is such a view,
     * then the window will be resized, with the assumption being
     * that the resizeable area can be reduced to make room for
     * the input UI.</td></tr>
     * <tr><td>stateAlwaysHidden</td><td>3</td><td>Always make the soft input area hidden when this window
     * has input focus.</td></tr>
     * <tr><td>stateAlwaysVisible</td><td>5</td><td>Always make the soft input area visible when this window
     * has input focus.</td></tr>
     * <tr><td>stateHidden</td><td>2</td><td>Make the soft input area hidden when normally appropriate
     * (when the user is navigating forward to your window).</td></tr>
     * <tr><td>stateUnchanged</td><td>1</td><td>Leave the soft input window as-is, in whatever state it
     * last was.</td></tr>
     * <tr><td>stateUnspecified</td><td>0</td><td>Not specified, use what the system thinks is best.  This
     * is the default.</td></tr>
     * <tr><td>stateVisible</td><td>4</td><td>Make the soft input area visible when normally appropriate
     * (when the user is navigating forward to your window).</td></tr>
     * </table>
     *
     * @attr name android:windowSoftInputMode
     */
    public static final int Window_windowSoftInputMode=13;
    /**
     * <p>
     * @attr description
     * Flag indicating that this window's background should be the
     * user's current wallpaper.  Corresponds
     * to {@link android.view.WindowManager.LayoutParams#FLAG_SHOW_WALLPAPER}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowShowWallpaper
     */
    public static final int Window_windowShowWallpaper=14;
    /**
     * <p>
     * @attr description
     * Flag indicating whether this window should have an Action Bar
     * in place of the usual title bar.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowActionBar
     */
    public static final int Window_windowActionBar=15;
    /**
     * <p>
     * @attr description
     * Flag indicating whether action modes should overlay window content
     * when there is not reserved space for their UI (such as an Action Bar).
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowActionModeOverlay
     */
    public static final int Window_windowActionModeOverlay=16;
    /**
     * <p>
     * @attr description
     * Flag indicating whether this window's Action Bar should overlay
     * application content. Does nothing if the window would not
     * have an Action Bar.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowActionBarOverlay
     */
    public static final int Window_windowActionBarOverlay=17;
    /**
     * <p>
     * @attr description
     * Flag indicating that this window should allow touches to be split
     * across other windows that also support split touch.
     * The default value is true for applications with a targetSdkVersion
     * of Honeycomb or newer; false otherwise.
     * When this flag is false, the first pointer that goes down determines
     * the window to which all subsequent touches go until all pointers go up.
     * When this flag is true, each pointer (not necessarily the first) that
     * goes down determines the window to which all subsequent touches of that
     * pointer will go until that pointers go up thereby enabling touches
     * with multiple pointers to be split across multiple windows.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowEnableSplitTouch
     */
    public static final int Window_windowEnableSplitTouch=18;
    /**
     * <p>
     * @attr description
     * The minimum width the window is allowed to be, along the major
     * axis of the screen.  That is, when in landscape.  Can be either
     * an absolute dimension or a fraction of the screen size in that
     * dimension.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:windowMinWidthMajor
     */
    public static final int Window_windowMinWidthMajor=19;
    /**
     * <p>
     * @attr description
     * The minimum width the window is allowed to be, along the minor
     * axis of the screen.  That is, when in portrait.  Can be either
     * an absolute dimension or a fraction of the screen size in that
     * dimension.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:windowMinWidthMinor
     */
    public static final int Window_windowMinWidthMinor=20;
    /**
     * <p>
     * @attr description
     * Control whether a container should automatically close itself if
     * the user touches outside of it.  This only applies to activities
     * and dialogs.
     * <p>Note: this attribute will only be respected for applications
     * that are targeting {@link android.os.Build.VERSION_CODES#HONEYCOMB}
     * or later.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowCloseOnTouchOutside
     */
    public static final int Window_windowCloseOnTouchOutside=21;
    /**
     * <p>
     * @attr description
     * Flag indicating whether this window should extend into overscan region.  Corresponds
     * to {@link android.view.WindowManager.LayoutParams#FLAG_LAYOUT_IN_OVERSCAN}.
     * @deprecated Overscan areas aren't set by any Android product anymore as of Android 11.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowOverscan
     */
    @Deprecated
    public static final int Window_windowOverscan=22;
    /**
     * <p>
     * @attr description
     * Flag indicating whether this window requests a translucent status bar.  Corresponds
     * to {@link android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_STATUS}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowTranslucentStatus
     */
    public static final int Window_windowTranslucentStatus=23;
    /**
     * <p>
     * @attr description
     * Flag indicating whether this window requests a translucent navigation bar.  Corresponds
     * to {@link android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_NAVIGATION}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowTranslucentNavigation
     */
    public static final int Window_windowTranslucentNavigation=24;
    /**
     * <p>
     * @attr description
     * Flag indicating whether this window requests that content changes be performed
     * as scene changes with transitions. Corresponds to
     * {@link android.view.Window#FEATURE_CONTENT_TRANSITIONS}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowContentTransitions
     */
    public static final int Window_windowContentTransitions=25;
    /**
     * <p>
     * @attr description
     * Reference to a TransitionManager XML resource defining the desired
     * transitions between different window content.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:windowContentTransitionManager
     */
    public static final int Window_windowContentTransitionManager=26;
    /**
     * <p>
     * @attr description
     * Reference to a Transition XML resource defining the desired Transition
     * used to move Views into the initial Window's content Scene. Corresponds to
     * {@link android.view.Window#setEnterTransition(android.transition.Transition)}.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:windowEnterTransition
     */
    public static final int Window_windowEnterTransition=27;
    /**
     * <p>
     * @attr description
     * Reference to a Transition XML resource defining the desired Transition
     * used to move Views out of the Window's content Scene when launching a new Activity.
     * Corresponds to
     * {@link android.view.Window#setExitTransition(android.transition.Transition)}.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:windowExitTransition
     */
    public static final int Window_windowExitTransition=28;
    /**
     * <p>
     * @attr description
     * Reference to a Transition XML resource defining the desired Transition
     * used to move shared elements transferred into the Window's initial content Scene.
     * Corresponds to {@link android.view.Window#setSharedElementEnterTransition(
     * android.transition.Transition)}.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:windowSharedElementEnterTransition
     */
    public static final int Window_windowSharedElementEnterTransition=29;
    /**
     * <p>
     * @attr description
     * Reference to a Transition XML resource defining the desired Transition
     * used when starting a new Activity to move shared elements prior to transferring
     * to the called Activity.
     * Corresponds to {@link android.view.Window#setSharedElementExitTransition(
     * android.transition.Transition)}.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:windowSharedElementExitTransition
     */
    public static final int Window_windowSharedElementExitTransition=30;
    /**
     * <p>
     * @attr description
     * Flag indicating whether this Window's transition should overlap with
     * the exiting transition of the called Activity when the called Activity
     * finishes. Corresponds to
     * {@link android.view.Window#setAllowReturnTransitionOverlap(boolean)}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowAllowReturnTransitionOverlap
     */
    public static final int Window_windowAllowReturnTransitionOverlap=31;
    /**
     * <p>
     * @attr description
     * Flag indicating whether this Window's transition should overlap with
     * the exiting transition of the calling Activity. Corresponds to
     * {@link android.view.Window#setAllowEnterTransitionOverlap(boolean)}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowAllowEnterTransitionOverlap
     */
    public static final int Window_windowAllowEnterTransitionOverlap=32;
    /**
     * <p>
     * @attr description
     * Flag indicating whether this Window is responsible for drawing the background for the
     * system bars. If true and the window is not floating, the system bars are drawn with a
     * transparent background and the corresponding areas in this window are filled with the
     * colors specified in {@link android.R.attr#statusBarColor} and
     * {@link android.R.attr#navigationBarColor}. Corresponds to
     * {@link android.view.WindowManager.LayoutParams#FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowDrawsSystemBarBackgrounds
     */
    public static final int Window_windowDrawsSystemBarBackgrounds=33;
    /**
     * <p>
     * @attr description
     * The color for the status bar. If the color is not opaque, consider setting
     * {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_STABLE} and
     * {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN}.
     * For this to take effect, the window must be drawing the system bar backgrounds with
     * {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the status bar must not
     * have been requested to be translucent with
     * {@link android.R.attr#windowTranslucentStatus}.
     * Corresponds to {@link android.view.Window#setStatusBarColor(int)}.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:statusBarColor
     */
    public static final int Window_statusBarColor=34;
    /**
     * <p>
     * @attr description
     * The color for the navigation bar. If the color is not opaque, consider setting
     * {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_STABLE} and
     * {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION}.
     * For this to take effect, the window must be drawing the system bar backgrounds with
     * {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the navigation bar must not
     * have been requested to be translucent with
     * {@link android.R.attr#windowTranslucentNavigation}.
     * Corresponds to {@link android.view.Window#setNavigationBarColor(int)}.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:navigationBarColor
     */
    public static final int Window_navigationBarColor=35;
    /**
     * <p>
     * @attr description
     * The duration, in milliseconds, of the window background fade duration
     * when transitioning into or away from an Activity when called with an
     * Activity Transition. Corresponds to
     * {@link android.view.Window#setTransitionBackgroundFadeDuration(long)}.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:windowTransitionBackgroundFadeDuration
     */
    public static final int Window_windowTransitionBackgroundFadeDuration=36;
    /**
     * <p>
     * @attr description
     * Elevation to use for the window.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:windowElevation
     */
    public static final int Window_windowElevation=37;
    /**
     * <p>
     * @attr description
     * Whether to clip window content to the outline of the window background.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowClipToOutline
     */
    public static final int Window_windowClipToOutline=38;
    /**
     * <p>
     * @attr description
     * Reference to a Transition XML resource defining the desired Transition
     * used to move Views out of the scene when the Window is
     * preparing to close. Corresponds to
     * {@link android.view.Window#setReturnTransition(android.transition.Transition)}.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:windowReturnTransition
     */
    public static final int Window_windowReturnTransition=39;
    /**
     * <p>
     * @attr description
     * Reference to a Transition XML resource defining the desired Transition
     * used to move Views in to the scene when returning from a previously-started Activity.
     * Corresponds to
     * {@link android.view.Window#setReenterTransition(android.transition.Transition)}.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:windowReenterTransition
     */
    public static final int Window_windowReenterTransition=40;
    /**
     * <p>
     * @attr description
     * Reference to a Transition XML resource defining the desired Transition
     * used to move shared elements transferred back to a calling Activity.
     * Corresponds to {@link android.view.Window#setSharedElementReturnTransition(
     * android.transition.Transition)}.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:windowSharedElementReturnTransition
     */
    public static final int Window_windowSharedElementReturnTransition=41;
    /**
     * <p>
     * @attr description
     * Reference to a Transition XML resource defining the desired Transition
     * used for shared elements transferred back to a calling Activity.
     * Corresponds to {@link android.view.Window#setSharedElementReenterTransition(
     * android.transition.Transition)}.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:windowSharedElementReenterTransition
     */
    public static final int Window_windowSharedElementReenterTransition=42;
    /**
     * <p>
     * @attr description
     * Indicates whether or not shared elements should use an overlay
     * during transitions. The default value is true.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowSharedElementsUseOverlay
     */
    public static final int Window_windowSharedElementsUseOverlay=43;
    /**
     * <p>
     * @attr description
     * Flag indicating whether this window allows Activity Transitions.
     * Corresponds to {@link android.view.Window#FEATURE_ACTIVITY_TRANSITIONS}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowActivityTransitions
     */
    public static final int Window_windowActivityTransitions=44;
    /**
     * <p>
     * @attr description
     * If set, the status bar will be drawn such that it is compatible with a light
     * status bar background.
     * <p>For this to take effect, the window must be drawing the system bar backgrounds with
     * {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the status bar must not
     * have been requested to be translucent with
     * {@link android.R.attr#windowTranslucentStatus}.
     * Corresponds to setting {@link android.view.View#SYSTEM_UI_FLAG_LIGHT_STATUS_BAR} on
     * the decor view.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowLightStatusBar
     */
    public static final int Window_windowLightStatusBar=45;
    /**
     * <p>
     * @attr description
     * Drawable to draw selectively within the inset areas when the windowBackground
     * has been set to null. This protects against seeing visual garbage in the
     * surface when the app has not drawn any content into this area. One example is
     * when the user is resizing a window of an activity in multi-window mode.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:windowBackgroundFallback
     */
    public static final int Window_windowBackgroundFallback=46;
    /**
     * <p>
     * @attr description
     * Reference to a drawable to be used as the splash screen content of the window. This
     * drawable will be placed on top of the {@link android.R.attr#windowBackground} with its
     * bounds inset by the system bars. If the drawable should not be inset by the system
     * bars, use a fullscreen theme.
     * <p>
     * Note that even if no splashscreen content is set on the theme, the system may still
     * show a splash screen using the other attributes on the theme, like the
     * {@link android.R.attr#windowBackground}.
     * {@deprecated Use windowSplashscreenAnimatedIcon instead.}
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:windowSplashscreenContent
     */
    @Deprecated
    public static final int Window_windowSplashscreenContent=47;
    /**
     * <p>
     * @attr description
     * If set, the navigation bar will be drawn such that it is compatible with a light
     * navigation bar background.
     * <p>For this to take effect, the window must be drawing the system bar backgrounds with
     * {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the navigation bar must not
     * have been requested to be translucent with
     * {@link android.R.attr#windowTranslucentNavigation}.
     * Corresponds to setting {@link android.view.View#SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR} on
     * the decor view.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowLightNavigationBar
     */
    public static final int Window_windowLightNavigationBar=48;
    /**
     * <p>
     * @attr description
     * Shows a thin line of the specified color between the navigation bar and the app
     * content.
     * <p>For this to take effect, the window must be drawing the system bar backgrounds with
     * {@link android.R.attr#windowDrawsSystemBarBackgrounds} and the navigation bar must not
     * have been requested to be translucent with
     * {@link android.R.attr#windowTranslucentNavigation}.
     * Corresponds to {@link android.view.Window#setNavigationBarDividerColor(int)}.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:navigationBarDividerColor
     */
    public static final int Window_navigationBarDividerColor=49;
    /**
     * <p>
     * @attr description
     * Controls how the window is laid out if there is a {@code DisplayCutout}.
     * <p>
     * Defaults to {@code default}.
     * <p>
     * See also
     * {@link android.view.WindowManager.LayoutParams#layoutInDisplayCutoutMode
     * WindowManager.LayoutParams.layoutInDisplayCutoutMode},
     * {@link android.view.WindowManager.LayoutParams#LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT},
     * {@link android.view.WindowManager.LayoutParams#LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES},
     * {@link android.view.WindowManager.LayoutParams#LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER},
     * and {@link android.view.DisplayCutout DisplayCutout}
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>always</td><td>3</td><td><p>
     * The window is always allowed to extend into the <code>DisplayCutout</code> areas on the
     * all edges of the screen.
     * <p>
     * The window must make sure that no important content overlaps with the
     * <code>DisplayCutout</code>.
     * <p>
     * Corresponds to <code>LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYS</code>.</td></tr>
     * <tr><td>default</td><td>0</td><td><p>
     * The window is allowed to extend into the <code>DisplayCutout</code> area, only if
     * the <code>DisplayCutout</code> is fully contained within a system bar. Otherwise, the
     * window is laid out such that it does not overlap with the <code>DisplayCutout</code>
     * area.
     * <p>
     * Corresponds to <code>LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT</code>.</td></tr>
     * <tr><td>never</td><td>2</td><td><p>
     * The window is never allowed to overlap with the <code>DisplayCutout</code> area.
     * <p>
     * This should be used with windows that transiently set
     * <code>SYSTEM_UI_FLAG_FULLSCREEN</code> to avoid a relayout of the window when the
     * flag is set or cleared.
     * <p>
     * Corresponds to <code>LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER</code>.</td></tr>
     * <tr><td>shortEdges</td><td>1</td><td><p>
     * The window is always allowed to extend into the <code>DisplayCutout</code> areas on the
     * short edges of the screen even if fullscreen or in landscape.
     * The window will never extend into a <code>DisplayCutout</code> area on the long edges of
     * the screen.
     * <p>
     * The window must make sure that no important content overlaps with the
     * <code>DisplayCutout</code>.
     * <p>
     * Corresponds to <code>LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES</code>.</td></tr>
     * </table>
     *
     * @attr name android:windowLayoutInDisplayCutoutMode
     */
    public static final int Window_windowLayoutInDisplayCutoutMode=50;
    /**
     * <p>
     * @attr description
     * Sets whether the system should ensure that the status bar has enough
     * contrast when a fully transparent background is requested.
     * <p>If set to this value, the system will determine whether a scrim is necessary
     * to ensure that the status bar has enough contrast with the contents of
     * this app, and set an appropriate effective bar background color accordingly.
     * <p>When the status bar color has a non-zero alpha value, the value of this
     * attribute has no effect.
     * <p>If the app does not target at least {@link android.os.Build.VERSION_CODES#Q Q},
     * this attribute is ignored.
     * @see android.view.Window#setStatusBarContrastEnforced
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:enforceStatusBarContrast
     */
    public static final int Window_enforceStatusBarContrast=51;
    /**
     * <p>
     * @attr description
     * Sets whether the system should ensure that the navigation bar has enough
     * contrast when a fully transparent background is requested.
     * <p>If set to this value, the system will determine whether a scrim is necessary
     * to ensure that the navigation bar has enough contrast with the contents of
     * this app, and set an appropriate effective bar background color accordingly.
     * <p>When the navigation bar color has a non-zero alpha value, the value of this
     * attribute has no effect.
     * <p>If the app does not target at least {@link android.os.Build.VERSION_CODES#Q Q},
     * this attribute is ignored.
     * @see android.view.Window#setNavigationBarContrastEnforced
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:enforceNavigationBarContrast
     */
    public static final int Window_enforceNavigationBarContrast=52;
    /**
     * <p>
     * @attr description
     * When windowBlurBehindEnabled is set, this is the amount of blur to apply
     * behind the window. The range is from 0, which means no blur, to 150.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:windowBlurBehindRadius
     */
    public static final int Window_windowBlurBehindRadius=53;
    /**
     * <p>
     * @attr description
     * If set, everything behind the window will be blurred with radius
     * windowBackgroundBlurRadius.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:windowBlurBehindEnabled
     */
    public static final int Window_windowBlurBehindEnabled=54;
    /**
     * <p>
     * @attr description
     * Blur the screen behind the window with the bounds of the window.
     * The radius defines the size of the neighbouring area, from which pixels will be
     * averaged to form the final color for each pixel in the region.
     * A radius of 0 means no blur. The higher the radius, the denser the blur.
     * Corresponds to {@link android.view.Window#setBackgroundBlurRadius}.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:windowBackgroundBlurRadius
     */
    public static final int Window_windowBackgroundBlurRadius=55;
    /**
     * <p>
     * @attr description
     * The background color for the splash screen, if not specify then system will
     * calculate from windowBackground.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:windowSplashScreenBackground
     */
    public static final int Window_windowSplashScreenBackground=56;
    /**
     * <p>
     * @attr description
     * Replace an icon in the center of the starting window, if the object is animated
     * and drawable(e.g. AnimationDrawable, AnimatedVectorDrawable), then it will also
     * play the animation while showing the starting window.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:windowSplashScreenAnimatedIcon
     */
    public static final int Window_windowSplashScreenAnimatedIcon=57;
    /**
     * <p>
     * @attr description
     * The duration, in milliseconds, of the window splash screen icon animation duration
     * when playing the splash screen starting window. The maximum animation duration should
     * be limited below 1000ms.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:windowSplashScreenAnimationDuration
     */
    public static final int Window_windowSplashScreenAnimationDuration=58;
    /**
     * <p>
     * @attr description
     * Place an drawable image in the bottom of the starting window, it can be used to
     * represent the branding of the application.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:windowSplashScreenBrandingImage
     */
    public static final int Window_windowSplashScreenBrandingImage=59;
    /**
     * <p>
     * @attr description
     * Set a background behind the splash screen icon. This is useful if there is not enough
     * contrast between the window background and the icon. Note the shape would also be
     * masking like an icon.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:windowSplashScreenIconBackgroundColor
     */
    public static final int Window_windowSplashScreenIconBackgroundColor=60;
    /**
     * Window animation class attributes.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #WindowAnimation_windowEnterAnimation android:windowEnterAnimation}</code></td><td>The animation used when a window is being added.</td></tr>
     * <tr><td><code>{@link #WindowAnimation_windowExitAnimation android:windowExitAnimation}</code></td><td>The animation used when a window is being removed.</td></tr>
     * <tr><td><code>{@link #WindowAnimation_windowShowAnimation android:windowShowAnimation}</code></td><td>The animation used when a window is going from INVISIBLE to VISIBLE.</td></tr>
     * <tr><td><code>{@link #WindowAnimation_windowHideAnimation android:windowHideAnimation}</code></td><td>The animation used when a window is going from VISIBLE to INVISIBLE.</td></tr>
     * <tr><td><code>{@link #WindowAnimation_activityOpenEnterAnimation android:activityOpenEnterAnimation}</code></td><td>When opening a new activity, this is the animation that is
     * run on the next activity (which is entering the screen).</td></tr>
     * <tr><td><code>{@link #WindowAnimation_activityOpenExitAnimation android:activityOpenExitAnimation}</code></td><td>When opening a new activity, this is the animation that is
     * run on the previous activity (which is exiting the screen).</td></tr>
     * <tr><td><code>{@link #WindowAnimation_activityCloseEnterAnimation android:activityCloseEnterAnimation}</code></td><td>When closing the current activity, this is the animation that is
     * run on the next activity (which is entering the screen).</td></tr>
     * <tr><td><code>{@link #WindowAnimation_activityCloseExitAnimation android:activityCloseExitAnimation}</code></td><td>When closing the current activity, this is the animation that is
     * run on the current activity (which is exiting the screen).</td></tr>
     * <tr><td><code>{@link #WindowAnimation_taskOpenEnterAnimation android:taskOpenEnterAnimation}</code></td><td>When opening an activity in a new task, this is the animation that is
     * run on the activity of the new task (which is entering the screen).</td></tr>
     * <tr><td><code>{@link #WindowAnimation_taskOpenExitAnimation android:taskOpenExitAnimation}</code></td><td>When opening an activity in a new task, this is the animation that is
     * run on the activity of the old task (which is exiting the screen).</td></tr>
     * <tr><td><code>{@link #WindowAnimation_taskCloseEnterAnimation android:taskCloseEnterAnimation}</code></td><td>When closing the last activity of a task, this is the animation that is
     * run on the activity of the next task (which is entering the screen).</td></tr>
     * <tr><td><code>{@link #WindowAnimation_taskCloseExitAnimation android:taskCloseExitAnimation}</code></td><td>When opening an activity in a new task, this is the animation that is
     * run on the activity of the old task (which is exiting the screen).</td></tr>
     * <tr><td><code>{@link #WindowAnimation_taskToFrontEnterAnimation android:taskToFrontEnterAnimation}</code></td><td>When bringing an existing task to the foreground, this is the
     * animation that is run on the top activity of the task being brought
     * to the foreground (which is entering the screen).</td></tr>
     * <tr><td><code>{@link #WindowAnimation_taskToFrontExitAnimation android:taskToFrontExitAnimation}</code></td><td>When bringing an existing task to the foreground, this is the
     * animation that is run on the current foreground activity
     * (which is exiting the screen).</td></tr>
     * <tr><td><code>{@link #WindowAnimation_taskToBackEnterAnimation android:taskToBackEnterAnimation}</code></td><td>When sending the current task to the background, this is the
     * animation that is run on the top activity of the task behind
     * it (which is entering the screen).</td></tr>
     * <tr><td><code>{@link #WindowAnimation_taskToBackExitAnimation android:taskToBackExitAnimation}</code></td><td>When sending the current task to the background, this is the
     * animation that is run on the top activity of the current task
     * (which is exiting the screen).</td></tr>
     * <tr><td><code>{@link #WindowAnimation_wallpaperOpenEnterAnimation android:wallpaperOpenEnterAnimation}</code></td><td>When opening a new activity that shows the wallpaper, while
     * currently not showing the wallpaper, this is the animation that
     * is run on the new wallpaper activity (which is entering the screen).</td></tr>
     * <tr><td><code>{@link #WindowAnimation_wallpaperOpenExitAnimation android:wallpaperOpenExitAnimation}</code></td><td>When opening a new activity that shows the wallpaper, while
     * currently not showing the wallpaper, this is the animation that
     * is run on the current activity (which is exiting the screen).</td></tr>
     * <tr><td><code>{@link #WindowAnimation_wallpaperCloseEnterAnimation android:wallpaperCloseEnterAnimation}</code></td><td>When opening a new activity that hides the wallpaper, while
     * currently showing the wallpaper, this is the animation that
     * is run on the new activity (which is entering the screen).</td></tr>
     * <tr><td><code>{@link #WindowAnimation_wallpaperCloseExitAnimation android:wallpaperCloseExitAnimation}</code></td><td>When opening a new activity that hides the wallpaper, while
     * currently showing the wallpaper, this is the animation that
     * is run on the old wallpaper activity (which is exiting the screen).</td></tr>
     * <tr><td><code>{@link #WindowAnimation_wallpaperIntraOpenEnterAnimation android:wallpaperIntraOpenEnterAnimation}</code></td><td>When opening a new activity that is on top of the wallpaper
     * when the current activity is also on top of the wallpaper,
     * this is the animation that is run on the new activity
     * (which is entering the screen).</td></tr>
     * <tr><td><code>{@link #WindowAnimation_wallpaperIntraOpenExitAnimation android:wallpaperIntraOpenExitAnimation}</code></td><td>When opening a new activity that is on top of the wallpaper
     * when the current activity is also on top of the wallpaper,
     * this is the animation that is run on the current activity
     * (which is exiting the screen).</td></tr>
     * <tr><td><code>{@link #WindowAnimation_wallpaperIntraCloseEnterAnimation android:wallpaperIntraCloseEnterAnimation}</code></td><td>When closing a foreround activity that is on top of the wallpaper
     * when the previous activity is also on top of the wallpaper,
     * this is the animation that is run on the previous activity
     * (which is entering the screen).</td></tr>
     * <tr><td><code>{@link #WindowAnimation_wallpaperIntraCloseExitAnimation android:wallpaperIntraCloseExitAnimation}</code></td><td>When closing a foreround activity that is on top of the wallpaper
     * when the previous activity is also on top of the wallpaper,
     * this is the animation that is run on the current activity
     * (which is exiting the screen).</td></tr>
     * <tr><td><code>{@link #WindowAnimation_launchTaskBehindTargetAnimation android:launchTaskBehindTargetAnimation}</code></td><td>When opening an activity in a new task using Intent/FLAG_ACTIVITY_LAUNCH_BEHIND,
     * this is the animation that is run on the activity of the new task (which is
     * entering the screen and then leaving).</td></tr>
     * <tr><td><code>{@link #WindowAnimation_launchTaskBehindSourceAnimation android:launchTaskBehindSourceAnimation}</code></td><td>When opening an activity in a new task using Intent.FLAG_ACTIVITY_LAUNCH_BEHIND,
     * this is the animation that is run on the activity of the old task (which is
     * already on the screen and then stays on).</td></tr>
     * </table>
     * @see #WindowAnimation_windowEnterAnimation
     * @see #WindowAnimation_windowExitAnimation
     * @see #WindowAnimation_windowShowAnimation
     * @see #WindowAnimation_windowHideAnimation
     * @see #WindowAnimation_activityOpenEnterAnimation
     * @see #WindowAnimation_activityOpenExitAnimation
     * @see #WindowAnimation_activityCloseEnterAnimation
     * @see #WindowAnimation_activityCloseExitAnimation
     * @see #WindowAnimation_taskOpenEnterAnimation
     * @see #WindowAnimation_taskOpenExitAnimation
     * @see #WindowAnimation_taskCloseEnterAnimation
     * @see #WindowAnimation_taskCloseExitAnimation
     * @see #WindowAnimation_taskToFrontEnterAnimation
     * @see #WindowAnimation_taskToFrontExitAnimation
     * @see #WindowAnimation_taskToBackEnterAnimation
     * @see #WindowAnimation_taskToBackExitAnimation
     * @see #WindowAnimation_wallpaperOpenEnterAnimation
     * @see #WindowAnimation_wallpaperOpenExitAnimation
     * @see #WindowAnimation_wallpaperCloseEnterAnimation
     * @see #WindowAnimation_wallpaperCloseExitAnimation
     * @see #WindowAnimation_wallpaperIntraOpenEnterAnimation
     * @see #WindowAnimation_wallpaperIntraOpenExitAnimation
     * @see #WindowAnimation_wallpaperIntraCloseEnterAnimation
     * @see #WindowAnimation_wallpaperIntraCloseExitAnimation
     * @see #WindowAnimation_launchTaskBehindTargetAnimation
     * @see #WindowAnimation_launchTaskBehindSourceAnimation
     */
    public static final int[] WindowAnimation={
      0x010100b4, 0x010100b5, 0x010100b6, 0x010100b7, 
      0x010100b8, 0x010100b9, 0x010100ba, 0x010100bb, 
      0x010100bc, 0x010100bd, 0x010100be, 0x010100bf, 
      0x010100c0, 0x010100c1, 0x010100c2, 0x010100c3, 
      0x01010293, 0x01010294, 0x01010295, 0x01010296, 
      0x01010297, 0x01010298, 0x01010299, 0x0101029a, 
      0x01010491, 0x01010492, 0x0112000a
    };
    /**
     * <p>
     * @attr description
     * The animation used when a window is being added.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:windowEnterAnimation
     */
    public static final int WindowAnimation_windowEnterAnimation=0;
    /**
     * <p>
     * @attr description
     * The animation used when a window is being removed.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:windowExitAnimation
     */
    public static final int WindowAnimation_windowExitAnimation=1;
    /**
     * <p>
     * @attr description
     * The animation used when a window is going from INVISIBLE to VISIBLE.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:windowShowAnimation
     */
    public static final int WindowAnimation_windowShowAnimation=2;
    /**
     * <p>
     * @attr description
     * The animation used when a window is going from VISIBLE to INVISIBLE.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:windowHideAnimation
     */
    public static final int WindowAnimation_windowHideAnimation=3;
    /**
     * <p>
     * @attr description
     * When opening a new activity, this is the animation that is
     * run on the next activity (which is entering the screen).
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:activityOpenEnterAnimation
     */
    public static final int WindowAnimation_activityOpenEnterAnimation=4;
    /**
     * <p>
     * @attr description
     * When opening a new activity, this is the animation that is
     * run on the previous activity (which is exiting the screen).
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:activityOpenExitAnimation
     */
    public static final int WindowAnimation_activityOpenExitAnimation=5;
    /**
     * <p>
     * @attr description
     * When closing the current activity, this is the animation that is
     * run on the next activity (which is entering the screen).
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:activityCloseEnterAnimation
     */
    public static final int WindowAnimation_activityCloseEnterAnimation=6;
    /**
     * <p>
     * @attr description
     * When closing the current activity, this is the animation that is
     * run on the current activity (which is exiting the screen).
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:activityCloseExitAnimation
     */
    public static final int WindowAnimation_activityCloseExitAnimation=7;
    /**
     * <p>
     * @attr description
     * When opening an activity in a new task, this is the animation that is
     * run on the activity of the new task (which is entering the screen).
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:taskOpenEnterAnimation
     */
    public static final int WindowAnimation_taskOpenEnterAnimation=8;
    /**
     * <p>
     * @attr description
     * When opening an activity in a new task, this is the animation that is
     * run on the activity of the old task (which is exiting the screen).
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:taskOpenExitAnimation
     */
    public static final int WindowAnimation_taskOpenExitAnimation=9;
    /**
     * <p>
     * @attr description
     * When closing the last activity of a task, this is the animation that is
     * run on the activity of the next task (which is entering the screen).
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:taskCloseEnterAnimation
     */
    public static final int WindowAnimation_taskCloseEnterAnimation=10;
    /**
     * <p>
     * @attr description
     * When opening an activity in a new task, this is the animation that is
     * run on the activity of the old task (which is exiting the screen).
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:taskCloseExitAnimation
     */
    public static final int WindowAnimation_taskCloseExitAnimation=11;
    /**
     * <p>
     * @attr description
     * When bringing an existing task to the foreground, this is the
     * animation that is run on the top activity of the task being brought
     * to the foreground (which is entering the screen).
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:taskToFrontEnterAnimation
     */
    public static final int WindowAnimation_taskToFrontEnterAnimation=12;
    /**
     * <p>
     * @attr description
     * When bringing an existing task to the foreground, this is the
     * animation that is run on the current foreground activity
     * (which is exiting the screen).
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:taskToFrontExitAnimation
     */
    public static final int WindowAnimation_taskToFrontExitAnimation=13;
    /**
     * <p>
     * @attr description
     * When sending the current task to the background, this is the
     * animation that is run on the top activity of the task behind
     * it (which is entering the screen).
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:taskToBackEnterAnimation
     */
    public static final int WindowAnimation_taskToBackEnterAnimation=14;
    /**
     * <p>
     * @attr description
     * When sending the current task to the background, this is the
     * animation that is run on the top activity of the current task
     * (which is exiting the screen).
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:taskToBackExitAnimation
     */
    public static final int WindowAnimation_taskToBackExitAnimation=15;
    /**
     * <p>
     * @attr description
     * When opening a new activity that shows the wallpaper, while
     * currently not showing the wallpaper, this is the animation that
     * is run on the new wallpaper activity (which is entering the screen).
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:wallpaperOpenEnterAnimation
     */
    public static final int WindowAnimation_wallpaperOpenEnterAnimation=16;
    /**
     * <p>
     * @attr description
     * When opening a new activity that shows the wallpaper, while
     * currently not showing the wallpaper, this is the animation that
     * is run on the current activity (which is exiting the screen).
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:wallpaperOpenExitAnimation
     */
    public static final int WindowAnimation_wallpaperOpenExitAnimation=17;
    /**
     * <p>
     * @attr description
     * When opening a new activity that hides the wallpaper, while
     * currently showing the wallpaper, this is the animation that
     * is run on the new activity (which is entering the screen).
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:wallpaperCloseEnterAnimation
     */
    public static final int WindowAnimation_wallpaperCloseEnterAnimation=18;
    /**
     * <p>
     * @attr description
     * When opening a new activity that hides the wallpaper, while
     * currently showing the wallpaper, this is the animation that
     * is run on the old wallpaper activity (which is exiting the screen).
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:wallpaperCloseExitAnimation
     */
    public static final int WindowAnimation_wallpaperCloseExitAnimation=19;
    /**
     * <p>
     * @attr description
     * When opening a new activity that is on top of the wallpaper
     * when the current activity is also on top of the wallpaper,
     * this is the animation that is run on the new activity
     * (which is entering the screen).  The wallpaper remains
     * static behind the animation.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:wallpaperIntraOpenEnterAnimation
     */
    public static final int WindowAnimation_wallpaperIntraOpenEnterAnimation=20;
    /**
     * <p>
     * @attr description
     * When opening a new activity that is on top of the wallpaper
     * when the current activity is also on top of the wallpaper,
     * this is the animation that is run on the current activity
     * (which is exiting the screen).  The wallpaper remains
     * static behind the animation.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:wallpaperIntraOpenExitAnimation
     */
    public static final int WindowAnimation_wallpaperIntraOpenExitAnimation=21;
    /**
     * <p>
     * @attr description
     * When closing a foreround activity that is on top of the wallpaper
     * when the previous activity is also on top of the wallpaper,
     * this is the animation that is run on the previous activity
     * (which is entering the screen).  The wallpaper remains
     * static behind the animation.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:wallpaperIntraCloseEnterAnimation
     */
    public static final int WindowAnimation_wallpaperIntraCloseEnterAnimation=22;
    /**
     * <p>
     * @attr description
     * When closing a foreround activity that is on top of the wallpaper
     * when the previous activity is also on top of the wallpaper,
     * this is the animation that is run on the current activity
     * (which is exiting the screen).  The wallpaper remains
     * static behind the animation.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:wallpaperIntraCloseExitAnimation
     */
    public static final int WindowAnimation_wallpaperIntraCloseExitAnimation=23;
    /**
     * <p>
     * @attr description
     * When opening an activity in a new task using Intent/FLAG_ACTIVITY_LAUNCH_BEHIND,
     * this is the animation that is run on the activity of the new task (which is
     * entering the screen and then leaving).
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:launchTaskBehindTargetAnimation
     */
    public static final int WindowAnimation_launchTaskBehindTargetAnimation=24;
    /**
     * <p>
     * @attr description
     * When opening an activity in a new task using Intent.FLAG_ACTIVITY_LAUNCH_BEHIND,
     * this is the animation that is run on the activity of the old task (which is
     * already on the screen and then stays on).
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:launchTaskBehindSourceAnimation
     */
    public static final int WindowAnimation_launchTaskBehindSourceAnimation=25;
  }
  public static final class transition {
    /**
     * A transition that moves views in or out of the scene to or from the edges when
     * a view visibility changes.
     */
    public static final int explode=0x010f0003;
    /**
     * A transition that fades views in and out.
     */
    public static final int fade=0x010f0002;
    /**
     * A transition that moves and resizes a view
     */
    public static final int move=0x010f0001;
    /**
     * Used for Activity Transitions, this transition indicates that no Transition
     * should be used.
     */
    public static final int no_transition=0x010f0000;
    /**
     * A transition that moves views in or out of the scene to or from the bottom edge when
     * a view visibility changes.
     */
    public static final int slide_bottom=0x010f0004;
    /**
     * A transition that moves views in or out of the scene to or from the left edge when
     * a view visibility changes.
     */
    public static final int slide_left=0x010f0007;
    /**
     * A transition that moves views in or out of the scene to or from the right edge when
     * a view visibility changes.
     */
    public static final int slide_right=0x010f0006;
    /**
     * A transition that moves views in or out of the scene to or from the top edge when
     * a view visibility changes.
     */
    public static final int slide_top=0x010f0005;
  }
  public static final class xml {
  }
}