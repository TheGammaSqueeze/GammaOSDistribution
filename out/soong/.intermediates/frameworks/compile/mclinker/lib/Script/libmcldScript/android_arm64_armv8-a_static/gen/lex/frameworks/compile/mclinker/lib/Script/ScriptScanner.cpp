#line 1 "out/soong/.intermediates/frameworks/compile/mclinker/lib/Script/libmcldScript/android_arm64_armv8-a_static/gen/lex/frameworks/compile/mclinker/lib/Script/ScriptScanner.cpp"

#line 3 "out/soong/.intermediates/frameworks/compile/mclinker/lib/Script/libmcldScript/android_arm64_armv8-a_static/gen/lex/frameworks/compile/mclinker/lib/Script/ScriptScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 117
#define YY_END_OF_BUFFER 118
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[609] =
    {   0,
        0,    0,  113,  113,    0,    0,  118,  117,  115,  116,
      101,  117,  110,  100,   93,  104,  105,   98,   96,   87,
       97,  110,   99,  108,  108,   90,  103,   94,   88,   95,
       89,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  113,
       92,  106,   91,  107,  102,  101,  109,   98,   96,   87,
       97,  109,   99,  108,  108,   89,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,   92,  102,
      115,  113,   74,    0,  111,    0,  110,  108,   77,   83,
       81,   79,   80,  113,  113,   82,  108,  108,  113,   71,

       75,   73,   76,   72,  110,  110,   67,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,   84,   78,  109,
      108,  114,  108,  108,    0,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  108,  112,  108,   85,
       86,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,

      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  108,  108,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,   36,   37,
      109,  109,  109,  109,  109,  109,  109,  112,  110,  110,
      110,   53,  110,   64,  110,  110,  110,  110,  110,  110,
       58,  110,  110,  110,  110,   65,  110,  110,  110,   47,
      110,   55,  110,  110,  110,  110,  110,  110,  110,  110,
       56,  110,  110,  110,   48,  110,  110,  110,  110,  109,
       26,  109,  109,  109,  109,   64,  109,  109,  109,  109,
       65,  109,  109,  109,   38,  109,  109,  109,  109,  109,

      109,   27,  110,  110,  110,  110,  110,   63,    1,  110,
      110,  110,    4,  110,  110,  110,    3,  110,  110,  110,
      110,  110,  110,  110,  110,   24,  110,  110,  110,   54,
      110,   57,  110,  110,  110,  109,   27,   29,  109,  109,
      109,  109,   63,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,   11,  110,  110,  110,  110,  110,   12,
      110,   19,  110,  110,   15,  110,   23,  110,   62,  110,
        6,  110,  110,  110,  110,  110,  110,  110,  110,   10,
      109,  109,  109,  109,  109,  109,   19,   34,  109,  109,
       62,   39,  109,  109,  109,   41,  110,  110,  110,   59,

      110,  110,    2,  110,  110,  110,  110,  110,   66,   20,
      110,  110,  110,  110,    8,  110,  109,   28,  109,  109,
      109,   33,  109,  109,   66,   20,  109,  109,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,   22,  110,  110,   68,   25,  109,   43,  109,   35,
      109,  109,  109,  109,    5,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
       51,  109,  109,  109,  109,  109,  109,  110,  110,  110,
      110,  110,   18,  110,   69,   70,  110,  110,  110,    7,
      110,  110,  110,  109,  109,  109,  109,  109,  109,  110,

      110,  110,  110,  110,   16,   17,  110,  110,  110,  110,
      110,  109,  109,   44,  109,  109,  109,   61,  110,   46,
      110,  110,  110,  110,  110,  110,   49,  109,  109,  109,
      109,  109,  110,  110,  110,    9,  110,  110,  110,  109,
      109,  109,   40,  109,  110,  110,  110,   21,  110,  110,
       45,  109,  109,  109,   21,   42,  110,  110,  110,  110,
      110,  109,  109,  109,  110,  110,  110,  110,  110,  109,
       31,  109,  110,  110,  110,   50,  110,  109,  109,  110,
      110,  110,  110,   30,  109,  110,  110,  110,  110,  109,
      110,  110,  110,  110,  109,   60,  110,  110,   52,  109,

      110,  110,   32,   13,  110,  110,   14,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    6,    7,    8,    1,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,   20,   21,
       22,   23,   24,    1,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   51,   53,   54,    1,   55,   55,   55,   55,

       55,   55,   15,   15,   15,   15,   56,   57,   58,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   59,
       15,   15,   60,   61,   62,   63,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[64] =
    {   0,
        1,    1,    1,    2,    1,    3,    1,    1,    1,    1,
        2,    2,    2,    2,    3,    3,    4,    4,    1,    1,
        1,    5,    1,    2,    4,    4,    4,    4,    4,    4,
        3,    3,    3,    3,    4,    3,    4,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        2,    3,    2,    3,    4,    4,    3,    4,    3,    1,
        1,    1,    3
    } ;

static const flex_int16_t yy_base[617] =
    {   0,
        0,    0,    0,    0,   63,    0,  737, 3272,  734, 3272,
      703,  122,  171, 3272,  120, 3272, 3272,  699,  684,  683,
      107,  126,  127,  135,  185, 3272, 3272,  111,  681,  112,
      680,  201,  132,  223,  205,  204,  242,  256,  259,  273,
      278,  290,  295,  312,  309,  317,  333,  383,  356,  679,
      677, 3272,  125, 3272,  360,  675,  374,  670,  668, 3272,
      667,    0,  133,  358,  321, 3272,  132,  652,  645,  134,
      648,  640,  132,  121,  137,  123,  635,  177, 3272,    0,
      674,  653, 3272,  187, 3272,  671,  407,  457, 3272, 3272,
     3272, 3272, 3272,  512,  651, 3272,  408,  640,  549,  639,

     3272, 3272, 3272,  634,  438,  435,  443,  493,  494,  498,
      529,  544,  545,  579,  583,  589,  601,  605,  655,  597,
      611,  633,  656,  664,  683,  684,  702,  690,  708,  714,
      728,  734,  740,  749,  761,  770,  776, 3272, 3272,    0,
      803, 3272,  806, 3272,  819,  612,  625,  619,  612,  193,
      605,  618,  618,  617,  613,  603,  614,  590,  596,  582,
      592,  594,  591,  578,  580,  549,  782,  659,  305, 3272,
     3272,  823,  838,  845,  857,  863,  864,  884,  878,  885,
      899,  908,  920,  926,  927,  941,  947,  953,  965,  979,
      983, 1000, 1004, 1018, 1022, 1036, 1040, 1054, 1058, 1072,

     1076, 1090, 1094, 1111, 1115, 1129, 1135, 1136, 1156, 1155,
     1175, 1179,    0,  397,  556,  549,  557,  559,  548,  541,
      532,  555,  537,  537,  534,  522,  529,  531,  514,    0,
      508,  511,  514,  502,  497,  504,  510,  774, 1193, 1197,
     1214, 1215, 1221, 1236, 1240, 1260, 1261, 1267, 1279, 1285,
     1291, 1303, 1309, 1315, 1321, 1327, 1342, 1333, 1348, 1354,
     1366, 1372, 1378, 1384, 1401, 1402, 1408, 1422, 1434, 1440,
     1449, 1455, 1461, 1470, 1476, 1493, 1497, 1512, 1524,  502,
        0,  497,  496,  489,  477,    0,  466,  481,  470,  479,
        0,  459,  476,  475,    0,  474,  462,  457,  457,  451,

      440, 1530, 1531, 1549, 1553, 1570, 1574, 1588, 1592, 1606,
     1610, 1624, 1625, 1631, 1645, 1649, 1663, 1664, 1684, 1670,
     1685, 1702, 1706, 1720, 1726, 1727, 1744, 1748, 1762, 1763,
     1781, 1782, 1788, 1802, 1809,  432,  437,    0,  435,  447,
      426,  436,    0,  425,  426,  429,  421,  422,  406,  416,
      412,  400,  407, 1816, 1830, 1834, 1848, 1854, 1860, 1866,
     1878, 1884, 1890, 1896, 1902, 1911, 1917, 1926, 1932, 1938,
     1944, 1950, 1962, 1974, 1980, 1981, 1995, 1999, 2013, 2019,
      391,  403,  383,  383,  390,  382,    0,    0,  380,  376,
        0,    0,  349,  368,  346,  335, 2025, 2031, 2037, 2043,

     2052, 2058, 2064, 2073, 2085, 2091, 2092, 2111, 2110, 2117,
     2134, 2138, 2152, 2153, 2167, 2171,  359,    0,  360,  339,
      351,    0,  332,  329,    0,  314,  312,  321, 2185, 2189,
     2204, 2208, 2222, 2223, 2237, 2241, 2255, 2259, 2273, 2277,
     2291, 2295, 2312, 2319, 2326,    0,  321,    0,  313,    0,
      312,  303,  291,  303, 2333, 2340, 2354, 2360, 2369, 2375,
     2381, 2390, 2396, 2402, 2414, 2420, 2432, 2441, 2453, 2462,
     2468,  298,  286,  260,  272,  252,  268, 2474, 2480, 2492,
     2499, 2513, 2514, 2528, 2532, 2546, 2547, 2561, 2567, 2573,
     2579, 2588, 2597,  247,  250,  258,  257,  254,  250, 2603,

     2609, 2615, 2621, 2630, 2636, 2642, 2656, 2662, 2676, 2682,
     2688,  241,  229,    0,  243,  226,  235, 2697, 2703, 2709,
     2718, 2724, 2730, 2739, 2748, 2757, 2763,  211,  205,  227,
      207,  208, 2769, 2788, 2787, 2794, 2806, 2813, 2825,  220,
      275,  202,    0,  192, 2831, 2837, 2849, 2855, 2861, 2867,
        0,  196,  185,  192,    0,    0, 2881, 2893, 2907, 2908,
     2922,  186,  185,  175, 2926, 2940, 2941, 2955, 2961,  173,
        0,  148, 2976, 2980, 2994, 2995, 3001,  149,  139, 3015,
     3021, 3030, 3044,    0,  119, 3053, 3065, 3071, 3072,  138,
     3090, 3091, 3110, 3109,  124, 3116, 3130, 3134, 3149,  120,

     3153, 3167,    0, 3171, 3185, 3189, 3203, 3272, 3246, 3250,
     3255, 3259, 3261, 3264, 3267,  137
    } ;

static const flex_int16_t yy_def[617] =
    {   0,
      609,  609,  608,    3,  608,    5,  608,  608,  608,  608,
      610,  611,  612,  608,  608,  608,  608,  610,  610,  610,
      610,  612,  612,  610,  610,  608,  608,  608,  608,  608,
      610,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  610,
      610,  608,  608,  608,  612,  608,  613,  608,  608,  608,
      608,  613,  613,  608,  608,  608,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  608,  613,
      608,  610,  608,  611,  608,  611,  612,  612,  608,  608,
      608,  608,  608,  614,  610,  608,  610,  610,  610,  608,

      608,  608,  608,  608,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
      612,  612,  612,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  608,  608,  613,
      613,  608,  608,  608,  608,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  119,  615,   99,  608,
      608,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,

      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  613,  616,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  615,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,

      613,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      613,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  119,  119,  119,  119,

      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  613,  613,  613,  613,
      613,  613,  613,  613,  613,  613,  613,  613,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  613,  613,  613,  613,  613,  613,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  613,  613,  613,  613,  613,  613,  119,

      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  613,  613,  613,  613,  613,  613,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  613,  613,  613,
      613,  613,  119,  119,  119,  119,  119,  119,  119,  613,
      613,  613,  613,  613,  119,  119,  119,  119,  119,  119,
      613,  613,  613,  613,  613,  613,  119,  119,  119,  119,
      119,  613,  613,  613,  119,  119,  119,  119,  119,  613,
      613,  613,  119,  119,  119,  119,  119,  613,  613,  119,
      119,  119,  119,  613,  613,  119,  119,  119,  119,  613,
      119,  119,  119,  119,  613,  119,  119,  119,  119,  613,

      119,  119,  613,  119,  119,  119,  119,    0,  608,  608,
      608,  608,  608,  608,  608,  608
    } ;

static const flex_int16_t yy_nxt[3336] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   22,   41,   42,   43,   44,   45,   46,
       47,   22,   48,   49,   22,   22,   22,   22,   22,   22,
       50,   22,   51,   22,   22,   22,   22,   22,   22,   52,
       53,   54,   55,    8,    9,   10,   56,   12,   57,   14,
       15,   16,   17,   58,   59,   60,   61,   62,   63,   64,
       65,   26,   27,   28,   29,   30,   66,   67,   68,   69,
       70,   62,   62,   62,   71,   72,   62,   62,   73,   74,

       75,   76,   77,   62,   62,   78,   62,   62,   62,   62,
       62,   62,   62,    8,   62,   79,   62,   62,   62,   62,
       62,   62,   52,   53,   54,   80,   85,   89,   93,   82,
       82,  100,  101,  103,  104,   82,   82,   95,   82,   82,
      214,   90,   82,  142,   82,  158,  138,  603,   96,   82,
       82,   97,   97,  159,   96,   82,  608,  146,  151,  147,
      156,  600,  152,   94,  162,  160,  595,  148,  163,   98,
      157,   98,  590,   86,   82,  161,  153,  585,   82,   82,
      108,   82,   99,   82,   82,  139,  584,   88,   88,  579,
       98,   85,   98,   99,   82,   88,   88,   88,   88,   88,

       88,   97,   97,  578,   82,  165,  608,   82,   82,  166,
      572,   82,  571,   82,   82,   82,   82,   82,  570,   98,
      564,   98,  563,   82,   82,   88,   82,   82,   82,  219,
      220,  562,  221,   82,  556,   82,  105,  111,   86,  555,
       98,  113,   98,  106,  107,   82,   82,  112,  551,  544,
      543,  114,   82,   82,   82,  542,   82,   82,  541,   82,
      540,  109,   82,  532,  110,   82,   82,  531,   82,   82,
      530,   82,  529,  528,  115,   82,   82,  517,  516,   82,
      116,   82,   82,   82,  515,   82,  514,  513,   82,  512,
       82,  118,  499,   82,   82,  498,   82,  117,   82,  552,

       82,   82,   82,  553,  497,   82,  120,   82,   82,  496,
      119,   82,   82,   82,  495,   82,  554,  121,   82,   82,
       82,   82,   82,  123,   82,   82,  494,   82,  122,   82,
       82,  477,   82,  476,  475,   82,   82,  143,  143,   98,
       82,   98,   82,   82,  474,   82,  125,   82,  128,  473,
      124,  472,  454,  126,  127,  144,   82,  144,  129,   82,
       98,   82,   98,   82,   82,  453,   82,  452,   82,   82,
       82,  451,   82,  450,  143,  143,  144,  130,  144,   82,
      137,  449,  448,   82,  447,   82,   82,  446,  428,  427,
      141,  141,  144,   82,  144,   82,  426,  425,  141,  141,

      141,  141,  141,  141,  424,  145,   82,  423,   82,  422,
       82,  131,   82,  144,  132,  144,  145,   82,  421,   82,
      420,  133,  419,  134,   97,   97,  135,  136,  141,  608,
       82,  144,  418,  144,  417,   82,  396,  395,   82,  394,
      393,   82,   98,  392,   98,   82,   82,   82,   82,  391,
       82,  390,  144,   82,  144,   82,  389,  388,   82,   82,
       82,   82,  387,   98,  386,   98,   82,   82,  385,   82,
      172,  384,  383,   88,   88,  382,  381,  173,  353,  352,
       82,   88,   88,   88,   88,   88,   88,   82,  174,  351,
       82,  167,  350,  167,  349,   82,   82,   82,  348,  347,

      346,   82,  345,   82,   82,   82,   82,  344,   82,   82,
       82,   88,  167,  343,  167,   82,   82,   82,  342,  341,
      340,   82,   82,   82,   82,   82,  178,  339,   82,   82,
      338,  176,   82,  177,  337,   82,  175,  336,  301,   82,
      300,   82,  299,  298,  297,   82,   82,   82,   82,  296,
       82,  295,   82,  294,   82,   82,   82,   82,  293,  292,
      291,  290,   82,  289,   82,  169,  169,   82,   82,  288,
      608,  179,  180,  169,  169,  169,  169,  169,  169,  287,
      286,   82,   82,  285,  284,  283,   82,  282,  181,   82,
      281,   82,   82,   82,  280,   82,   82,   82,  237,   82,

       82,   82,   82,  169,   82,  182,   82,   82,   82,   82,
      236,   82,   82,   82,   82,   82,  235,   82,  184,  234,
       82,   82,  183,   82,   82,  193,  233,  232,   82,  231,
      185,   82,  187,  230,   82,   82,   82,  229,  228,  186,
      227,   82,  226,   82,  225,   82,  224,  223,  222,   82,
      218,  217,  216,   82,  215,  171,   82,   82,   82,   82,
      170,  608,   82,   82,  194,   82,   82,   82,   82,   82,
      195,   82,  608,  608,  608,   81,  164,  155,   82,   82,
      154,  188,   82,  150,  189,   82,  190,  149,   93,   92,
      197,   91,  196,   87,  191,   87,   83,  192,  608,  198,

      608,  608,  102,   87,  608,   92,   87,   82,   82,   87,
       87,   82,   87,   87,   87,   87,   87,  202,  199,   87,
       91,   87,   87,   87,   83,   87,   87,  200,   87,   87,
      201,   87,   87,   87,   87,   81,  608,   87,  204,   87,
       87,   87,  608,   87,   87,   87,  203,   87,  608,  608,
       87,  608,  205,   87,  206,  608,   87,   87,  608,   87,
       87,  608,  608,   87,  608,   87,   87,   87,  608,   87,
       87,   87,  207,   87,  608,   87,   87,   82,   87,   87,
       87,  208,   87,  608,   82,  210,   82,   87,   87,  608,
       87,   87,   87,  209,  608,  211,   87,   82,  608,   87,

       87,   87,   87,   87,  608,   87,  608,   87,   87,   87,
      608,   87,   87,   87,  608,   87,  608,  212,   87,  141,
      141,   87,  143,  143,   87,  608,   82,  141,  141,  141,
      141,  141,  141,  608,  608,  214,  214,  213,  608,  213,
      144,  608,  144,  214,  214,  214,  214,  214,  214,   87,
      608,  608,   87,  239,   87,  608,  608,  141,  213,  608,
      213,  144,   87,  144,   87,   87,  240,   87,  608,   87,
      608,   87,  608,  214,   87,  608,   87,   87,  608,  608,
       87,  608,  241,   87,   87,  242,   87,   87,   87,   87,
       87,  608,   87,   87,   87,   87,   87,  608,  608,   87,

      608,  608,   87,   87,  246,  243,   87,   87,  245,   87,
       87,  247,  244,   87,   87,   87,   87,   87,  608,  608,
       87,  608,  608,   87,   87,   87,   87,   87,   87,  608,
       87,  608,  608,  608,   87,  608,  608,   87,   87,   87,
      248,   87,  608,  249,  608,  608,   87,   87,  250,   87,
       87,   87,   87,  252,  608,   87,   87,   87,   87,   87,
      608,  251,   87,  608,  608,   87,   87,   87,   87,   87,
       87,  608,   87,   87,  254,  608,   87,  608,   87,   87,
       87,  608,   87,   87,   87,  253,   87,  608,  255,   87,
      608,   87,   87,  608,   87,   87,   87,  608,  608,  608,

      608,  608,  608,  256,   87,   87,  608,   87,   87,   87,
       87,  257,   87,  608,   87,  608,  608,  608,   87,  608,
      608,   87,   87,  608,  608,   87,   87,  258,  259,   87,
       87,   87,  608,   87,  608,   87,  608,  608,  608,   87,
      608,  608,   87,  260,   87,  608,   87,  261,   87,   87,
      608,   87,  262,   87,  608,  608,  608,   87,  608,  608,
       87,   87,   87,  608,   87,   87,   87,   87,  608,   87,
      608,   87,  608,  608,  263,   87,  608,  608,   87,   87,
       87,  264,   87,   87,   87,   87,  608,   87,  608,   87,
      608,  608,  265,   87,  608,  608,   87,   87,   87,  608,

       87,   87,   87,   87,  608,   87,  266,   87,  608,  608,
      608,  267,  608,  608,   87,   87,   87,  268,   87,   87,
       87,   87,  608,   87,  608,   87,  608,  608,  608,   87,
      608,  269,   87,   87,  608,  608,   87,   87,  271,  270,
       87,   87,   87,  608,   87,  608,   87,  608,  608,  608,
       87,  608,  608,   87,   87,   87,  272,   87,   87,  608,
       87,   87,   87,  608,   87,   87,   87,   87,   87,  608,
      608,   87,  273,  608,   87,   87,  274,   87,   87,  275,
      276,   87,   87,  608,   87,   87,   87,   87,  608,  608,
      608,  608,  608,  608,   87,   87,  277,   87,   87,  278,

      608,   87,  608,  608,   87,   87,   87,  608,   87,  279,
       87,  608,  608,  608,   87,  608,  608,   87,   87,   87,
      608,   87,   87,   87,   87,  608,   87,  608,   87,  608,
      302,  608,   87,  608,  608,   87,   87,  608,  303,   87,
       87,   87,  304,   87,   87,   87,   87,   87,  608,  608,
       87,  608,   87,   87,   87,  608,   87,   87,  608,  608,
       87,  608,   87,   87,  305,   87,   87,   87,  608,   87,
      608,   87,  608,  608,  608,   87,  608,  608,   87,   87,
      608,  608,   87,  306,  307,  608,   87,   87,  608,   87,
       87,   87,   87,   87,  608,  608,   87,  608,   87,   87,

       87,  608,   87,   87,  308,   87,   87,  608,   87,   87,
       87,   87,  608,  608,   87,  309,   87,   87,   87,  608,
       87,   87,   87,  310,   87,  608,  311,   87,  608,   87,
       87,  312,   87,   87,   87,   87,  608,  608,   87,  608,
       87,   87,   87,  314,   87,   87,   87,   87,  313,  608,
       87,   87,   87,   87,   87,  608,   87,   87,   87,   87,
       87,  608,   87,   87,   87,  315,   87,  316,   87,   87,
      608,   87,   87,   87,   87,   87,  317,   87,  608,   87,
       87,   87,  608,   87,   87,   87,  608,   87,  608,  318,
       87,  608,   87,   87,  319,   87,   87,   87,   87,  608,

      608,   87,  608,   87,   87,   87,  608,   87,   87,   87,
       87,   87,  608,   87,   87,   87,  608,   87,  608,  320,
       87,  608,  321,   87,  608,  322,   87,   87,   87,  608,
       87,   87,   87,   87,   87,  608,  608,   87,  608,   87,
       87,   87,  608,   87,   87,  608,  608,   87,   87,  608,
       87,   87,  324,   87,  608,  323,  608,  325,  608,  608,
       87,   87,  608,   87,   87,   87,   87,  608,  608,   87,
      608,   87,  327,   87,  608,   87,  326,  608,   87,   87,
       87,  328,   87,  608,   87,  608,   87,   87,   87,  608,
       87,   87,   87,  329,   87,  608,   87,   87,  608,   87,

       87,   87,   87,   87,  608,   87,  608,   87,  608,   87,
      608,  608,   87,  330,  608,   87,  608,  608,   87,   87,
      332,  608,   87,   87,   87,  608,   87,  608,   87,  331,
      608,  608,   87,  608,  608,   87,   87,  608,   87,   87,
      333,   87,  608,   87,  608,  608,  608,  334,  608,  608,
       87,   87,  335,   87,   87,   87,   87,   87,  608,   87,
       87,   87,   87,   87,  608,  608,   87,  608,  608,   87,
       87,  608,   87,   87,  354,   87,  608,  355,   87,   87,
       87,  608,   87,  608,   87,  608,  608,  608,   87,  608,
      608,   87,   87,  608,  356,   87,   87,  608,  357,   87,

       87,   87,  608,   87,  608,   87,  608,  608,  608,   87,
      608,  608,   87,   87,   87,  358,   87,   87,   87,   87,
      608,   87,  608,   87,  608,  608,  608,   87,  608,  608,
       87,   87,   87,  359,   87,   87,   87,   87,  608,   87,
      608,   87,  608,  608,  608,   87,  608,  360,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,  608,  608,
       87,  608,   87,   87,   87,  608,   87,   87,  362,  608,
       87,   87,  363,   87,   87,   87,   87,  361,   87,  608,
       87,  364,  608,  608,   87,  608,  608,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,  608,  608,   87,

      608,   87,   87,   87,  608,   87,   87,  365,  366,   87,
       87,   87,   87,   87,   87,   87,   87,  608,  367,  608,
      608,  608,  608,   87,   87,  608,   87,  368,   87,  369,
      608,   87,   87,   87,  608,   87,  608,   87,  370,  608,
      608,   87,  608,  608,   87,   87,   87,  608,   87,   87,
      372,   87,   87,   87,  608,   87,   87,   87,   87,   87,
      608,  608,   87,  371,  608,   87,   87,  608,   87,   87,
       87,  373,  608,   87,   87,   87,  608,   87,  608,  374,
      608,  608,  608,   87,  608,  608,   87,   87,   87,   87,
       87,   87,   87,   87,   87,  608,  608,  608,  608,  608,

      375,   87,   87,  608,   87,   87,  376,   87,   87,  608,
       87,   87,   87,   87,   87,  608,  608,   87,  377,   87,
       87,   87,  608,   87,   87,  608,  608,   87,   87,  608,
       87,   87,  378,   87,  379,   87,  608,  608,   87,  608,
       87,   87,   87,  608,   87,   87,  608,   87,   87,  608,
      608,   87,  380,  608,  608,   87,   87,  397,   87,   87,
       87,   87,  608,   87,  608,   87,  608,  608,  608,   87,
      608,  608,   87,   87,   87,  608,   87,   87,  398,   87,
       87,  400,  608,   87,  608,   87,   87,   87,  401,   87,
       87,   87,   87,   87,  608,   87,   87,   87,  608,   87,

      608,  399,   87,  608,  402,   87,  608,   87,   87,   87,
       87,  608,  608,   87,  608,   87,   87,   87,  403,   87,
       87,   87,   87,   87,  608,   87,   87,   87,   87,   87,
      608,   87,   87,   87,  608,   87,  608,   87,   87,  404,
       87,   87,   87,   87,   87,  608,   87,  608,   87,  608,
       87,  608,   87,   87,  405,   87,   87,   87,   87,   87,
      608,   87,  608,   87,   87,   87,  608,  407,  406,   87,
       87,   87,  608,   87,   87,   87,   87,   87,  608,   87,
       87,   87,  608,   87,  608,  608,   87,  608,   87,   87,
      410,   87,   87,   87,  608,  608,  608,  408,  409,  608,

       87,   87,  608,   87,   87,   87,   87,   87,  608,   87,
       87,   87,   87,   87,  608,  608,   87,  412,  608,   87,
       87,   87,   87,   87,   87,   87,   87,  411,   87,  413,
       87,  608,  608,  414,   87,  608,  608,   87,  415,   87,
      608,   87,   87,  416,   87,   87,  608,  608,   87,  608,
       87,   87,   87,  429,   87,   87,   87,  430,   87,  608,
       87,   87,   87,   87,   87,  608,   87,   87,   87,   87,
       87,  608,   87,   87,   87,  431,   87,  608,   87,   87,
      608,   87,   87,   87,   87,   87,  608,   87,  608,   87,
       87,   87,  608,   87,   87,   87,  433,   87,  608,   87,

       87,  608,   87,   87,   87,  432,   87,  608,  608,  608,
      608,   87,   87,  608,   87,   87,   87,   87,   87,  608,
       87,   87,   87,   87,   87,  608,  434,   87,  608,  435,
       87,   87,  436,   87,   87,  438,   87,   87,  608,   87,
      439,   87,   87,   87,  608,  437,   87,  608,   87,   87,
       87,  608,   87,   87,  608,  608,   87,  608,  608,   87,
       87,  441,  608,   87,   87,   87,  608,   87,  608,   87,
      440,  608,  608,   87,  608,  608,   87,   87,   87,   87,
      442,   87,   87,   87,   87,  608,  608,  608,  608,  608,
      444,   87,   87,   87,   87,   87,   87,   87,   87,  608,

       87,  608,   87,  608,  608,  443,   87,  608,  445,   87,
       87,   87,  455,   87,   87,   87,   87,  608,   87,  608,
       87,  608,  608,  608,   87,  608,  608,   87,   87,  457,
       87,   87,  456,   87,   87,   87,  608,  458,  608,   87,
      608,  608,  608,   87,  608,  608,   87,   87,   87,  460,
       87,   87,   87,   87,   87,  608,  608,  608,  459,  608,
      608,   87,   87,   87,   87,   87,   87,   87,   87,  462,
       87,  608,   87,  608,  608,  608,   87,  608,  461,   87,
       87,   87,  608,   87,   87,   87,   87,  608,   87,  608,
       87,  608,  608,  608,   87,  608,  463,   87,   87,   87,

      464,   87,   87,   87,   87,  608,   87,  608,  466,  608,
      608,  465,   87,  608,  608,   87,   87,   87,  608,   87,
       87,   87,   87,  467,   87,  608,   87,  608,  608,  608,
       87,  608,  608,   87,   87,  608,  468,   87,   87,  608,
      608,   87,  608,   87,  469,   87,  608,  471,   87,  470,
       87,   87,   87,  608,   87,   87,  608,   87,   87,   87,
      608,   87,   87,  608,   87,   87,   87,  608,   87,   87,
      608,   87,   87,  608,  608,   87,  608,  608,  478,   87,
       87,  608,   87,   87,  608,   87,   87,  479,  608,   87,
      608,   87,  480,   87,  608,   87,   87,  608,   87,   87,

       87,   87,   87,  608,   87,  481,   87,   87,   87,  483,
       87,   87,   87,  482,   87,  608,   87,   87,  608,  484,
       87,   87,   87,   87,  608,   87,  608,   87,  487,   87,
      608,   87,   87,   87,  485,   87,  608,  608,   87,  608,
       87,   87,  486,   87,   87,   87,   87,  608,  608,   87,
      608,   87,  489,   87,  608,  488,   87,  608,   87,   87,
      608,   87,   87,   87,  608,  608,  608,   87,  608,  608,
       87,   87,   87,  490,   87,  608,  491,  608,  608,   87,
       87,  608,   87,   87,   87,  608,  493,  608,   87,  608,
      492,   87,   87,   87,   87,   87,  608,   87,  608,   87,

       87,   87,  608,   87,   87,   87,   87,   87,  501,   87,
       87,   87,  608,   87,  608,  500,   87,  608,   87,   87,
      608,   87,   87,   87,  608,   87,  608,  502,   87,  608,
       87,   87,  608,  608,   87,  608,  608,  503,   87,   87,
       87,   87,   87,   87,   87,   87,  608,  608,  608,  504,
      608,  608,   87,   87,   87,   87,   87,   87,   87,   87,
      608,   87,  608,   87,  608,  608,  608,   87,  608,  608,
      505,   87,   87,   87,   87,   87,   87,   87,  506,  608,
      608,  608,  608,  608,  608,   87,   87,   87,   87,   87,
       87,  608,   87,   87,  508,  608,   87,  507,   87,   87,

       87,  608,   87,   87,   87,   87,   87,  608,   87,   87,
       87,  509,   87,  608,   87,   87,  608,   87,   87,   87,
      510,   87,  608,   87,  608,  608,   87,   87,   87,   87,
       87,  608,   87,  511,   87,  519,   87,  608,   87,   87,
       87,   87,   87,  520,   87,  518,   87,   87,   87,  608,
       87,   87,   87,  608,   87,  608,   87,   87,  521,   87,
       87,   87,   87,   87,  608,   87,  522,   87,   87,   87,
      608,   87,   87,   87,  608,   87,  608,  608,   87,  608,
      523,   87,   87,  608,   87,   87,  608,   87,   87,  524,
      608,   87,  608,   87,  608,   87,  608,  608,   87,  608,

      608,   87,   87,  608,   87,   87,  525,   87,   87,  608,
      608,   87,  608,   87,   87,   87,  527,   87,   87,   87,
      608,   87,  608,   87,   87,  526,   87,   87,   87,   87,
       87,  608,   87,  608,   87,   87,   87,  608,   87,   87,
       87,  608,   87,  608,   87,   87,  533,   87,   87,   87,
       87,   87,  608,   87,  608,   87,   87,   87,  608,   87,
       87,   87,  535,   87,  608,   87,   87,  537,   87,   87,
       87,  534,   87,  536,   87,  608,  608,   87,   87,   87,
      608,   87,  608,   87,  608,  538,   87,   87,   87,   87,
       87,  608,   87,  608,   87,   87,   87,  608,   87,   87,

       87,  608,   87,  608,  608,   87,  608,  608,   87,  608,
      539,   87,  546,   87,   87,  608,   87,   87,   87,   87,
       87,  608,  545,   87,  547,   87,   87,   87,  608,   87,
       87,  608,   87,   87,  608,   87,   87,   87,  608,   87,
      608,  608,   87,  548,   87,   87,  608,  608,   87,  549,
      608,   87,   87,  608,   87,   87,   87,   87,  608,  608,
       87,  608,   87,   87,  550,  608,   87,   87,   87,  608,
       87,  608,  558,  557,  608,   87,   87,  608,   87,   87,
       87,   87,  608,  608,   87,  608,   87,   87,   87,  560,
       87,   87,   87,   87,   87,  608,   87,   87,   87,  608,

       87,  608,  559,   87,  608,  608,   87,   87,  561,   87,
       87,  608,   87,  608,  608,  608,  608,  608,  608,   87,
       87,  608,   87,   87,   87,  608,  608,  608,  566,  565,
      608,  567,   87,   87,   87,   87,   87,   87,   87,   87,
      608,  608,  608,  608,  608,  568,   87,   87,   87,   87,
       87,   87,   87,   87,  569,   87,  608,   87,  608,  608,
      608,   87,  573,  608,   87,   87,   87,   87,   87,   87,
       87,   87,   87,  608,  608,  608,  575,  608,  574,   87,
       87,   87,   87,   87,   87,  608,   87,   87,  608,  608,
       87,  608,   87,  608,   87,  608,  608,   87,  576,  577,

       87,  580,   87,   87,  608,   87,  581,   87,  608,   87,
      608,   87,  608,  608,  608,   87,  608,  608,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,  608,  582,
       87,  608,   87,   87,   87,  608,   87,   87,  608,  608,
       87,   87,  583,   87,   87,  587,   87,   87,  608,  608,
       87,  608,   87,  586,   87,  608,   87,   87,  608,   87,
       87,   87,  608,   87,  608,  608,  608,  608,  588,   87,
       87,  608,   87,   87,  608,   87,  589,  608,  608,   87,
      608,  608,   87,   87,   87,  608,   87,  608,  591,  608,
      608,   87,   87,  608,   87,   87,   87,  593,   87,  608,

       87,   87,   87,   87,   87,  608,  608,   87,  592,  608,
       87,   87,  608,   87,   87,  594,   87,   87,  608,   87,
       87,   87,   87,  597,  608,  608,  608,  608,  608,   87,
       87,  608,  596,   87,  598,   87,   87,  608,   87,   87,
       87,   87,   87,  608,  608,   87,  608,   87,   87,   87,
      608,   87,   87,  608,  608,   87,   87,  599,   87,   87,
       87,   87,  608,   87,  608,   87,  608,  608,  601,   87,
      608,  608,   87,   87,  608,   87,   87,  602,   87,   87,
       87,  608,   87,  608,   87,  608,  608,  608,   87,  608,
      604,   87,   87,   87,  608,   87,   87,   87,   87,  605,

       87,  608,   87,  608,  608,  608,   87,  608,  608,   87,
       87,   87,  608,   87,   87,   87,   87,  608,   87,  608,
       87,  608,  608,  606,   87,  608,  607,   87,   87,   87,
      608,   87,   87,  608,   87,  608,  608,  608,  608,  608,
      608,  608,   87,  608,  608,   87,    8,    8,    8,    8,
        8,   82,   82,   82,   82,   84,   84,   84,   84,   84,
       87,   87,   87,  140,  140,  168,  168,  168,  238,  238,
      238,    7,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,

      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608
    } ;

static const flex_int16_t yy_chk[3336] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,   12,   15,   21,   22,
       23,   28,   28,   30,   30,   33,   22,   23,   22,   23,
      616,   15,   33,   63,   33,   74,   53,  600,   23,   22,
       23,   24,   24,   74,   63,   33,   24,   67,   70,   67,
       73,  595,   70,   21,   76,   75,  590,   67,   76,   24,
       73,   24,  585,   12,   13,   75,   70,  579,   22,   23,
       33,   13,   24,   13,   33,   53,  578,   13,   13,  572,
       24,   84,   24,   24,   13,   13,   13,   13,   13,   13,

       13,   25,   25,  570,   32,   78,   25,   36,   35,   78,
      564,   32,  563,   32,   36,   35,   36,   35,  562,   25,
      554,   25,  553,   13,   32,   13,   34,   36,   35,  150,
      150,  552,  150,   34,  544,   34,   32,   35,   84,  542,
       25,   36,   25,   32,   32,   37,   34,   35,  540,  532,
      531,   36,   37,   32,   37,  530,   36,   35,  529,   38,
      528,   34,   39,  517,   34,   37,   38,  516,   38,   39,
      515,   39,  513,  512,   37,   34,   40,  499,  498,   38,
       37,   41,   39,   40,  497,   40,  496,  495,   41,  494,
       41,   39,  477,   42,   37,  476,   40,   38,   43,  541,

       42,   41,   42,  541,  475,   43,   41,   43,   38,  474,
       40,   39,   45,   42,  473,   44,  541,   42,   43,   45,
       46,   45,   44,   43,   44,   40,  472,   46,   42,   46,
       41,  454,   45,  453,  452,   44,   47,   65,   65,  169,
       46,  169,   42,   47,  451,   47,   45,   43,   46,  449,
       44,  447,  428,   45,   45,   65,   47,   65,   46,   49,
      169,   45,  169,   55,   44,  427,   49,  426,   49,   46,
       55,  424,   55,  423,   64,   64,   65,   47,   65,   49,
       49,  421,  420,   55,  419,   47,   48,  417,  396,  395,
       57,   57,   64,   48,   64,   48,  394,  393,   57,   57,

       57,   57,   57,   57,  390,   64,   48,  389,   49,  386,
       87,   48,   55,   64,   48,   64,   64,   87,  385,   87,
      384,   48,  383,   48,   97,   97,   48,   48,   57,   97,
       87,  214,  382,  214,  381,   48,  353,  352,  106,  351,
      350,  105,   97,  349,   97,  106,  107,  106,  105,  348,
      105,  347,  214,  107,  214,  107,  346,  345,  106,   87,
       88,  105,  344,   97,  342,   97,  107,   88,  341,   88,
      105,  340,  339,   88,   88,  337,  336,  106,  301,  300,
       88,   88,   88,   88,   88,   88,   88,  106,  106,  299,
      105,   88,  298,   88,  297,  107,  108,  109,  296,  294,

      293,  110,  292,  108,  109,  108,  109,  290,  110,   88,
      110,   88,   88,  289,   88,   94,  108,  109,  288,  287,
      285,  110,   94,   94,   94,   94,  110,  284,   94,   94,
      283,  109,  111,  109,  282,   94,  108,  280,  237,  111,
      236,  111,  235,  234,  233,  108,  109,  112,  113,  232,
      110,  231,  111,  229,  112,  113,  112,  113,  228,  227,
      226,  225,   94,  224,   94,   99,   99,  112,  113,  223,
       99,  111,  112,   99,   99,   99,   99,   99,   99,  222,
      221,  111,  114,  220,  219,  218,  115,  217,  113,  114,
      216,  114,  116,  115,  215,  115,  112,  113,  166,  116,

      120,  116,  114,   99,  117,  114,  115,  120,  118,  120,
      165,  117,  116,  117,  121,  118,  164,  118,  115,  163,
      120,  121,  114,  121,  117,  120,  162,  161,  118,  160,
      116,  114,  118,  159,  121,  115,  122,  158,  157,  117,
      156,  116,  155,  122,  154,  122,  153,  152,  151,  120,
      149,  148,  147,  117,  146,  104,  122,  118,  119,  123,
      100,   98,  168,  121,  121,  119,  123,  119,  123,  168,
      122,  168,   95,   86,   82,   81,   77,   72,  119,  123,
       71,  119,  168,   69,  119,  122,  119,   68,   61,   59,
      124,   58,  123,  124,  119,  124,   56,  119,   51,  124,

       50,   31,   29,  124,   20,   19,  124,  119,  123,  125,
      126,  168,  125,  126,  125,  126,  128,  128,  125,  128,
       18,  128,  125,  126,   11,  125,  126,  126,  127,  128,
      127,  127,  128,  127,  129,    9,    7,  129,  130,  129,
      130,  127,    0,  130,  127,  130,  129,  129,    0,    0,
      129,    0,  131,  130,  131,    0,  130,  131,    0,  131,
      132,    0,    0,  132,    0,  132,  133,  131,    0,  133,
      131,  133,  132,  132,    0,  134,  132,  238,  134,  133,
      134,  133,  133,    0,  238,  135,  238,  135,  134,    0,
      135,  134,  135,  134,    0,  136,  136,  238,    0,  136,

      135,  136,  137,  135,    0,  137,    0,  137,  167,  136,
        0,  167,  136,  167,    0,  137,    0,  137,  137,  141,
      141,  167,  143,  143,  167,    0,  238,  141,  141,  141,
      141,  141,  141,    0,    0,  145,  145,  141,    0,  141,
      143,    0,  143,  145,  145,  145,  145,  145,  145,  172,
        0,    0,  172,  172,  172,    0,    0,  141,  141,    0,
      141,  143,  172,  143,  173,  172,  173,  173,    0,  173,
        0,  174,    0,  145,  174,    0,  174,  173,    0,    0,
      173,    0,  174,  175,  174,  175,  175,  174,  175,  176,
      177,    0,  176,  177,  176,  177,  175,    0,    0,  175,

        0,    0,  176,  177,  179,  176,  177,  179,  178,  179,
      178,  180,  177,  178,  180,  178,  180,  179,    0,    0,
      179,    0,    0,  178,  180,  181,  178,  180,  181,    0,
      181,    0,    0,    0,  182,    0,    0,  182,  181,  182,
      181,  181,    0,  182,    0,    0,  183,  182,  183,  183,
      182,  183,  184,  185,    0,  184,  185,  184,  185,  183,
        0,  184,  183,    0,    0,  184,  185,  186,  184,  185,
      186,    0,  186,  187,  187,    0,  187,    0,  187,  188,
      186,    0,  188,  186,  188,  186,  187,    0,  188,  187,
        0,  189,  188,    0,  189,  188,  189,    0,    0,    0,

        0,    0,    0,  189,  189,  190,    0,  189,  190,  191,
      190,  190,  191,    0,  191,    0,    0,    0,  190,    0,
        0,  190,  191,    0,    0,  191,  192,  191,  192,  192,
      193,  192,    0,  193,    0,  193,    0,    0,    0,  192,
        0,    0,  192,  193,  194,    0,  193,  194,  195,  194,
        0,  195,  195,  195,    0,    0,    0,  194,    0,    0,
      194,  195,  196,    0,  195,  196,  197,  196,    0,  197,
        0,  197,    0,    0,  196,  196,    0,    0,  196,  197,
      198,  197,  197,  198,  199,  198,    0,  199,    0,  199,
        0,    0,  198,  198,    0,    0,  198,  199,  200,    0,

      199,  200,  201,  200,    0,  201,  199,  201,    0,    0,
        0,  200,    0,    0,  200,  201,  202,  201,  201,  202,
      203,  202,    0,  203,    0,  203,    0,    0,    0,  202,
        0,  202,  202,  203,    0,    0,  203,  204,  204,  203,
      204,  205,  204,    0,  205,    0,  205,    0,    0,    0,
      204,    0,    0,  204,  205,  206,  205,  205,  206,    0,
      206,  207,  208,    0,  207,  208,  207,  208,  206,    0,
        0,  206,  206,    0,  207,  208,  207,  207,  208,  208,
      209,  210,  209,    0,  210,  209,  210,  209,    0,    0,
        0,    0,    0,    0,  210,  209,  210,  210,  209,  211,

        0,  211,    0,    0,  211,  212,  211,    0,  212,  212,
      212,    0,    0,    0,  211,    0,    0,  211,  212,  239,
        0,  212,  239,  240,  239,    0,  240,    0,  240,    0,
      239,    0,  239,    0,    0,  239,  240,    0,  240,  240,
      241,  242,  241,  241,  242,  241,  242,  243,    0,    0,
      243,    0,  243,  241,  242,    0,  241,  242,    0,    0,
      243,    0,  244,  243,  243,  244,  245,  244,    0,  245,
        0,  245,    0,    0,    0,  244,    0,    0,  244,  245,
        0,    0,  245,  245,  246,    0,  246,  247,    0,  246,
      247,  246,  247,  248,    0,    0,  248,    0,  248,  246,

      247,    0,  246,  247,  247,  249,  248,    0,  249,  248,
      249,  250,    0,    0,  250,  248,  250,  251,  249,    0,
      251,  249,  251,  249,  250,    0,  250,  250,    0,  252,
      251,  252,  252,  251,  252,  253,    0,    0,  253,    0,
      253,  254,  252,  254,  254,  252,  254,  255,  253,    0,
      255,  253,  255,  256,  254,    0,  256,  254,  256,  258,
      255,    0,  258,  255,  258,  255,  256,  257,  257,  256,
        0,  257,  258,  257,  259,  258,  258,  259,    0,  259,
      260,  257,    0,  260,  257,  260,    0,  259,    0,  259,
      259,    0,  261,  260,  261,  261,  260,  261,  262,    0,

        0,  262,    0,  262,  263,  261,    0,  263,  261,  263,
      264,  262,    0,  264,  262,  264,    0,  263,    0,  263,
      263,    0,  264,  264,    0,  265,  264,  265,  266,    0,
      265,  266,  265,  266,  267,    0,    0,  267,    0,  267,
      265,  266,    0,  265,  266,    0,    0,  267,  268,    0,
      267,  268,  267,  268,    0,  266,    0,  268,    0,    0,
      269,  268,    0,  269,  268,  269,  270,    0,    0,  270,
        0,  270,  270,  269,    0,  271,  269,    0,  271,  270,
      271,  272,  270,    0,  272,    0,  272,  273,  271,    0,
      273,  271,  273,  273,  272,    0,  274,  272,    0,  274,

      273,  274,  275,  273,    0,  275,    0,  275,    0,  274,
        0,    0,  274,  274,    0,  275,    0,    0,  275,  276,
      276,    0,  276,  277,  276,    0,  277,    0,  277,  275,
        0,    0,  276,    0,    0,  276,  277,    0,  278,  277,
      277,  278,    0,  278,    0,    0,    0,  278,    0,    0,
      279,  278,  279,  279,  278,  279,  302,  303,    0,  302,
      303,  302,  303,  279,    0,    0,  279,    0,    0,  302,
      303,    0,  302,  303,  303,  304,    0,  304,  304,  305,
      304,    0,  305,    0,  305,    0,    0,    0,  304,    0,
        0,  304,  305,    0,  305,  305,  306,    0,  306,  306,

      307,  306,    0,  307,    0,  307,    0,    0,    0,  306,
        0,    0,  306,  307,  308,  307,  307,  308,  309,  308,
        0,  309,    0,  309,    0,    0,    0,  308,    0,    0,
      308,  309,  310,  310,  309,  310,  311,  310,    0,  311,
        0,  311,    0,    0,    0,  310,    0,  311,  310,  311,
      312,  313,  311,  312,  313,  312,  313,  314,    0,    0,
      314,    0,  314,  312,  313,    0,  312,  313,  314,    0,
      314,  315,  315,  314,  315,  316,  315,  312,  316,    0,
      316,  316,    0,    0,  315,    0,    0,  315,  316,  317,
      318,  316,  317,  318,  317,  318,  320,    0,    0,  320,

        0,  320,  317,  318,    0,  317,  318,  318,  319,  320,
      319,  321,  320,  319,  321,  319,  321,    0,  320,    0,
        0,    0,    0,  319,  321,    0,  319,  321,  322,  322,
        0,  322,  323,  322,    0,  323,    0,  323,  323,    0,
        0,  322,    0,    0,  322,  323,  324,    0,  323,  324,
      325,  324,  325,  326,    0,  325,  326,  325,  326,  324,
        0,    0,  324,  324,    0,  325,  326,    0,  325,  326,
      327,  327,    0,  327,  328,  327,    0,  328,    0,  328,
        0,    0,    0,  327,    0,    0,  327,  328,  329,  330,
      328,  329,  330,  329,  330,    0,    0,    0,    0,    0,

      329,  329,  330,    0,  329,  330,  331,  331,  332,    0,
      331,  332,  331,  332,  333,    0,    0,  333,  331,  333,
      331,  332,    0,  331,  332,    0,    0,  333,  334,    0,
      333,  334,  333,  334,  334,  335,    0,    0,  335,    0,
      335,  334,  354,    0,  334,  354,    0,  354,  335,    0,
        0,  335,  335,    0,    0,  354,  355,  355,  354,  355,
      356,  355,    0,  356,    0,  356,    0,    0,    0,  355,
        0,    0,  355,  356,  357,    0,  356,  357,  356,  357,
      358,  358,    0,  358,    0,  358,  359,  357,  359,  359,
      357,  359,  360,  358,    0,  360,  358,  360,    0,  359,

        0,  357,  359,    0,  361,  360,    0,  361,  360,  361,
      362,    0,    0,  362,    0,  362,  363,  361,  363,  363,
      361,  363,  364,  362,    0,  364,  362,  364,  365,  363,
        0,  365,  363,  365,    0,  364,    0,  366,  364,  364,
      366,  365,  366,  367,  365,    0,  367,    0,  367,    0,
      366,    0,  368,  366,  366,  368,  367,  368,  369,  367,
        0,  369,    0,  369,  370,  368,    0,  370,  368,  370,
      371,  369,    0,  371,  369,  371,  372,  370,    0,  372,
      370,  372,    0,  371,    0,    0,  371,    0,  373,  372,
      373,  373,  372,  373,    0,    0,    0,  371,  372,    0,

      374,  373,    0,  374,  373,  374,  375,  376,    0,  375,
      376,  375,  376,  374,    0,    0,  374,  375,    0,  375,
      376,  377,  375,  376,  377,  378,  377,  374,  378,  376,
      378,    0,    0,  377,  377,    0,    0,  377,  378,  379,
        0,  378,  379,  379,  379,  380,    0,    0,  380,    0,
      380,  397,  379,  397,  397,  379,  397,  398,  380,    0,
      398,  380,  398,  399,  397,    0,  399,  397,  399,  400,
      398,    0,  400,  398,  400,  399,  399,    0,  401,  399,
        0,  401,  400,  401,  402,  400,    0,  402,    0,  402,
      403,  401,    0,  403,  401,  403,  402,  402,    0,  404,

      402,    0,  404,  403,  404,  401,  403,    0,    0,    0,
        0,  405,  404,    0,  405,  404,  405,  406,  407,    0,
      406,  407,  406,  407,  405,    0,  404,  405,    0,  405,
      406,  407,  406,  406,  407,  408,  409,  408,    0,  409,
      408,  409,  408,  410,    0,  407,  410,    0,  410,  409,
      408,    0,  409,  408,    0,    0,  410,    0,    0,  410,
      411,  411,    0,  411,  412,  411,    0,  412,    0,  412,
      410,    0,    0,  411,    0,    0,  411,  412,  413,  414,
      412,  413,  414,  413,  414,    0,    0,    0,    0,    0,
      414,  413,  414,  415,  413,  414,  415,  416,  415,    0,

      416,    0,  416,    0,    0,  413,  415,    0,  416,  415,
      416,  429,  429,  416,  429,  430,  429,    0,  430,    0,
      430,    0,    0,    0,  429,    0,    0,  429,  430,  431,
      431,  430,  430,  431,  432,  431,    0,  432,    0,  432,
        0,    0,    0,  431,    0,    0,  431,  432,  433,  434,
      432,  433,  434,  433,  434,    0,    0,    0,  433,    0,
        0,  433,  434,  435,  433,  434,  435,  436,  435,  436,
      436,    0,  436,    0,    0,    0,  435,    0,  435,  435,
      436,  437,    0,  436,  437,  438,  437,    0,  438,    0,
      438,    0,    0,    0,  437,    0,  437,  437,  438,  439,

      438,  438,  439,  440,  439,    0,  440,    0,  440,    0,
        0,  439,  439,    0,    0,  439,  440,  441,    0,  440,
      441,  442,  441,  441,  442,    0,  442,    0,    0,    0,
      441,    0,    0,  441,  442,    0,  443,  442,  443,    0,
        0,  443,    0,  443,  443,  444,    0,  444,  444,  443,
      444,  443,  445,    0,  443,  445,    0,  445,  444,  455,
        0,  444,  455,    0,  455,  445,  456,    0,  445,  456,
        0,  456,  455,    0,    0,  455,    0,    0,  456,  456,
      457,    0,  456,  457,    0,  457,  458,  457,    0,  458,
        0,  458,  458,  457,    0,  459,  457,    0,  459,  458,

      459,  460,  458,    0,  460,  459,  460,  461,  459,  461,
      461,  459,  461,  460,  460,    0,  462,  460,    0,  462,
      461,  462,  463,  461,    0,  463,    0,  463,  464,  462,
        0,  464,  462,  464,  463,  463,    0,    0,  463,    0,
      465,  464,  463,  465,  464,  465,  466,    0,    0,  466,
        0,  466,  466,  465,    0,  465,  465,    0,  467,  466,
        0,  467,  466,  467,    0,    0,    0,  468,    0,    0,
      468,  467,  468,  467,  467,    0,  468,    0,    0,  469,
      468,    0,  469,  468,  469,    0,  470,    0,  470,    0,
      469,  470,  469,  470,  471,  469,    0,  471,    0,  471,

      478,  470,    0,  478,  470,  478,  479,  471,  479,  479,
      471,  479,    0,  478,    0,  478,  478,    0,  480,  479,
        0,  480,  479,  480,    0,  481,    0,  480,  481,    0,
      481,  480,    0,    0,  480,    0,    0,  481,  481,  482,
      483,  481,  482,  483,  482,  483,    0,    0,    0,  482,
        0,    0,  482,  483,  484,  482,  483,  484,  485,  484,
        0,  485,    0,  485,    0,    0,    0,  484,    0,    0,
      484,  485,  486,  487,  485,  486,  487,  486,  487,    0,
        0,    0,    0,    0,    0,  486,  487,  488,  486,  487,
      488,    0,  488,  489,  489,    0,  489,  488,  489,  490,

      488,    0,  490,  488,  490,  491,  489,    0,  491,  489,
      491,  491,  490,    0,  492,  490,    0,  492,  491,  492,
      492,  491,    0,  493,    0,    0,  493,  492,  493,  500,
      492,    0,  500,  493,  500,  501,  493,    0,  501,  493,
      501,  502,  500,  502,  502,  500,  502,  503,  501,    0,
      503,  501,  503,    0,  502,    0,  504,  502,  503,  504,
      503,  504,  505,  503,    0,  505,  504,  505,  506,  504,
        0,  506,  504,  506,    0,  505,    0,    0,  505,    0,
      507,  506,  507,    0,  506,  507,    0,  507,  508,  508,
        0,  508,    0,  508,    0,  507,    0,    0,  507,    0,

        0,  508,  509,    0,  508,  509,  509,  509,  510,    0,
        0,  510,    0,  510,  511,  509,  511,  511,  509,  511,
        0,  510,    0,  518,  510,  510,  518,  511,  518,  519,
      511,    0,  519,    0,  519,  520,  518,    0,  520,  518,
      520,    0,  519,    0,  521,  519,  519,  521,  520,  521,
      522,  520,    0,  522,    0,  522,  523,  521,    0,  523,
      521,  523,  522,  522,    0,  524,  522,  524,  524,  523,
      524,  521,  523,  523,  525,    0,    0,  525,  524,  525,
        0,  524,    0,  526,    0,  525,  526,  525,  526,  527,
      525,    0,  527,    0,  527,  533,  526,    0,  533,  526,

      533,    0,  527,    0,    0,  527,    0,    0,  533,    0,
      526,  533,  534,  535,  534,    0,  535,  534,  535,  534,
      536,    0,  533,  536,  535,  536,  535,  534,    0,  535,
      534,    0,  537,  536,    0,  537,  536,  537,    0,  538,
        0,    0,  538,  537,  538,  537,    0,    0,  537,  538,
        0,  539,  538,    0,  539,  538,  539,  545,    0,    0,
      545,    0,  545,  546,  539,    0,  546,  539,  546,    0,
      545,    0,  546,  545,    0,  547,  546,    0,  547,  546,
      547,  548,    0,    0,  548,    0,  548,  549,  547,  549,
      549,  547,  549,  550,  548,    0,  550,  548,  550,    0,

      549,    0,  547,  549,    0,    0,  550,  557,  550,  550,
      557,    0,  557,    0,    0,    0,    0,    0,    0,  558,
      557,    0,  558,  557,  558,    0,    0,    0,  558,  557,
        0,  559,  558,  559,  560,  558,  559,  560,  559,  560,
        0,    0,    0,    0,    0,  560,  559,  560,  561,  559,
      560,  561,  565,  561,  561,  565,    0,  565,    0,    0,
        0,  561,  565,    0,  561,  565,  566,  567,  565,  566,
      567,  566,  567,    0,    0,    0,  567,    0,  566,  566,
      567,  568,  566,  567,  568,    0,  568,  569,    0,    0,
      569,    0,  569,    0,  568,    0,    0,  568,  568,  569,

      569,  573,  573,  569,    0,  573,  574,  573,    0,  574,
        0,  574,    0,    0,    0,  573,    0,    0,  573,  574,
      575,  576,  574,  575,  576,  575,  576,  577,    0,  575,
      577,    0,  577,  575,  576,    0,  575,  576,    0,    0,
      577,  580,  577,  577,  580,  581,  580,  581,    0,    0,
      581,    0,  581,  580,  580,    0,  582,  580,    0,  582,
      581,  582,    0,  581,    0,    0,    0,    0,  582,  582,
      583,    0,  582,  583,    0,  583,  583,    0,    0,  586,
        0,    0,  586,  583,  586,    0,  583,    0,  586,    0,
        0,  587,  586,    0,  587,  586,  587,  588,  589,    0,

      588,  589,  588,  589,  587,    0,    0,  587,  587,    0,
      588,  589,    0,  588,  589,  589,  591,  592,    0,  591,
      592,  591,  592,  592,    0,    0,    0,    0,    0,  591,
      592,    0,  591,  592,  593,  594,  593,    0,  594,  593,
      594,  593,  596,    0,    0,  596,    0,  596,  594,  593,
        0,  594,  593,    0,    0,  596,  597,  594,  596,  597,
      598,  597,    0,  598,    0,  598,    0,    0,  597,  597,
        0,    0,  597,  598,    0,  599,  598,  598,  599,  601,
      599,    0,  601,    0,  601,    0,    0,    0,  599,    0,
      601,  599,  601,  602,    0,  601,  602,  604,  602,  602,

      604,    0,  604,    0,    0,    0,  602,    0,    0,  602,
      604,  605,    0,  604,  605,  606,  605,    0,  606,    0,
      606,    0,    0,  605,  605,    0,  606,  605,  606,  607,
        0,  606,  607,    0,  607,    0,    0,    0,    0,    0,
        0,    0,  607,    0,    0,  607,  609,  609,  609,  609,
      609,  610,  610,  610,  610,  611,  611,  611,  611,  611,
      612,  612,  612,  613,  613,  614,  614,  614,  615,  615,
      615,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,

      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  608,  608
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
/*===- ScriptScanner.ll ---------------------------------------------------===//
//
//                     The MCLinker Project
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===*/
#line 11 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
/* C/C++ Declarations */

#include "mcld/Script/ScriptScanner.h"
#include "mcld/Script/ScriptFile.h"
#include "mcld/Support/MsgHandling.h"
#include <llvm/ADT/StringRef.h>
#include <string>

typedef mcld::ScriptParser::token token;
typedef mcld::ScriptParser::token_type token_type;

#define yyterminate() return token::END
#define YY_NO_UNISTD_H
#line 1355 "out/soong/.intermediates/frameworks/compile/mclinker/lib/Script/libmcldScript/android_arm64_armv8-a_static/gen/lex/frameworks/compile/mclinker/lib/Script/ScriptScanner.cpp"
#line 27 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-register"
#endif
#line 1361 "out/soong/.intermediates/frameworks/compile/mclinker/lib/Script/libmcldScript/android_arm64_armv8-a_static/gen/lex/frameworks/compile/mclinker/lib/Script/ScriptScanner.cpp"
/* Flex Declarations and Options */
#line 41 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
#define YY_USER_ACTION  yylloc->columns(yyleng);
#line 1365 "out/soong/.intermediates/frameworks/compile/mclinker/lib/Script/libmcldScript/android_arm64_armv8-a_static/gen/lex/frameworks/compile/mclinker/lib/Script/ScriptScanner.cpp"
/* abbrev. of RE @ref binutils ld/ldlex.l */
/* Start conditions */

#line 1369 "out/soong/.intermediates/frameworks/compile/mclinker/lib/Script/libmcldScript/android_arm64_armv8-a_static/gen/lex/frameworks/compile/mclinker/lib/Script/ScriptScanner.cpp"

#define INITIAL 0
#define LDSCRIPT 1
#define EXPRESSION 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 55 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"


#line 58 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
 /* code to place at the beginning of yylex() */

  /* reset location */
  yylloc->step();

  /* determine the initial parser state */
  if (m_Kind == ScriptFile::Unknown) {
    m_Kind = pScriptFile.getKind();
    switch (pScriptFile.getKind()) {
    case ScriptFile::LDScript:
    case ScriptFile::Expression:
      return token::LINKER_SCRIPT;
    case ScriptFile::VersionScript:
    case ScriptFile::DynamicList:
    default:
      assert(0 && "Unsupported script type!");
      break;
    }
  }


 /* Entry Point */
#line 1529 "out/soong/.intermediates/frameworks/compile/mclinker/lib/Script/libmcldScript/android_arm64_armv8-a_static/gen/lex/frameworks/compile/mclinker/lib/Script/ScriptScanner.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 609 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 608 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 80 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::ENTRY; }
	YY_BREAK
/* File Commands */
case 2:
YY_RULE_SETUP
#line 82 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::INCLUDE; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 83 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::INPUT; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 84 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::GROUP; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 85 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::AS_NEEDED; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 86 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::OUTPUT; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 87 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::SEARCH_DIR; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 88 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::STARTUP; }
	YY_BREAK
/* Format Commands */
case 9:
YY_RULE_SETUP
#line 90 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::OUTPUT_FORMAT; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 91 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::TARGET; }
	YY_BREAK
/* Misc Commands */
case 11:
YY_RULE_SETUP
#line 93 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::ASSERT; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 94 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::EXTERN; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 95 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::FORCE_COMMON_ALLOCATION; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 96 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::INHIBIT_COMMON_ALLOCATION; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 97 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::INSERT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 98 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::NOCROSSREFS; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 99 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::OUTPUT_ARCH; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 100 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::LD_FEATURE; }
	YY_BREAK
/* Assignemnts */
case 19:
YY_RULE_SETUP
#line 102 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::HIDDEN; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 103 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::PROVIDE; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 104 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::PROVIDE_HIDDEN; }
	YY_BREAK
/* SECTIONS Command */
case 22:
YY_RULE_SETUP
#line 106 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::SECTIONS; }
	YY_BREAK
/* MEMORY Command */
case 23:
YY_RULE_SETUP
#line 108 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::MEMORY; }
	YY_BREAK
/* PHDRS Command */
case 24:
YY_RULE_SETUP
#line 110 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::PHDRS; }
	YY_BREAK
/* Builtin Functions */
case 25:
YY_RULE_SETUP
#line 112 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::ABSOLUTE; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 113 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::ADDR; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 114 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::ALIGN; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 115 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::ALIGNOF; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 116 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::BLOCK; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 117 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::DATA_SEGMENT_ALIGN; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 118 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::DATA_SEGMENT_END; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 119 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::DATA_SEGMENT_RELRO_END; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 120 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::DEFINED; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 121 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::LENGTH; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 122 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::LOADADDR; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 123 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::MAX; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 124 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::MIN; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 125 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::NEXT; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 126 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::ORIGIN; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 127 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::SEGMENT_START; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 128 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::SIZEOF; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 129 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::SIZEOF_HEADERS; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 130 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::CONSTANT; }
	YY_BREAK
/* Symbolic Constants */
case 44:
YY_RULE_SETUP
#line 132 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::MAXPAGESIZE; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 133 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::COMMONPAGESIZE; }
	YY_BREAK
/* Input Section Description */
case 46:
YY_RULE_SETUP
#line 135 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::EXCLUDE_FILE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 136 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::KEEP; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 137 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::SORT_BY_NAME; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 138 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::SORT_BY_NAME; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 139 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::SORT_BY_ALIGNMENT; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 140 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::SORT_NONE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 141 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::SORT_BY_INIT_PRIORITY; }
	YY_BREAK
/* Output Section Data */
case 53:
YY_RULE_SETUP
#line 143 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::BYTE; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 144 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::SHORT; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 145 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::LONG; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 146 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::QUAD; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 147 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::SQUAD; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 148 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::FILL; }
	YY_BREAK
/* Output Section Discarding */
case 59:
YY_RULE_SETUP
#line 150 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::DISCARD; }
	YY_BREAK
/* Output Section Keywords */
case 60:
YY_RULE_SETUP
#line 152 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::CREATE_OBJECT_SYMBOLS; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 153 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::CONSTRUCTORS; }
	YY_BREAK
/* Output Section Attributes */
/* Output Section Type */
case 62:
YY_RULE_SETUP
#line 156 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::NOLOAD; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 157 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::DSECT; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 158 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::COPY; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 159 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::INFO; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 160 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::OVERLAY; }
	YY_BREAK
/* Output Section LMA */
case 67:
YY_RULE_SETUP
#line 162 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::AT; }
	YY_BREAK
/* Forced Input Alignment */
case 68:
YY_RULE_SETUP
#line 164 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::SUBALIGN; }
	YY_BREAK
/* Output Section Constraint */
case 69:
YY_RULE_SETUP
#line 166 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::ONLY_IF_RO; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 167 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::ONLY_IF_RW; }
	YY_BREAK
/* Operators */
case 71:
YY_RULE_SETUP
#line 169 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::LSHIFT; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 170 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::RSHIFT; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 171 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::EQ; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 172 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::NE; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 173 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::LE; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 174 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::GE; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 175 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::LOGICAL_AND; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 176 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::LOGICAL_OR; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 177 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::ADD_ASSIGN; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 178 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::SUB_ASSIGN; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 179 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::MUL_ASSIGN; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 180 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::DIV_ASSIGN; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 181 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::AND_ASSIGN; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 182 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::OR_ASSIGN; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 183 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::LS_ASSIGN; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 184 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return token::RS_ASSIGN; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 185 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 186 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 187 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 188 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 189 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 190 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 191 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 192 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 193 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 194 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 195 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 196 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 197 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 198 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 199 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 200 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 201 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 202 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 203 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 204 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 205 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{ return static_cast<token_type>(*yytext); }
	YY_BREAK
/* Numbers */
case 108:
YY_RULE_SETUP
#line 208 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{
  llvm::StringRef str(yytext, yyleng);
  switch (str.back()) {
  case 'k':
  case 'K':
    str.substr(0, yyleng - 1).getAsInteger(0, yylval->integer);
    yylval->integer *= 1024;
    break;
  case 'm':
  case 'M':
    str.substr(0, yyleng - 1).getAsInteger(0, yylval->integer);
    yylval->integer *= 1024 * 1024;
    break;
  default:
    str.getAsInteger(0, yylval->integer);
    break;
  }
  return token::INTEGER;
}
	YY_BREAK
/* Expression string */
case 109:
YY_RULE_SETUP
#line 229 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{
  const std::string& str = pScriptFile.createParserStr(yytext, yyleng);
  yylval->string = &str;
  return token::STRING;
}
	YY_BREAK
/* String */
case 110:
YY_RULE_SETUP
#line 236 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{
  const std::string& str = pScriptFile.createParserStr(yytext, yyleng);
  yylval->string = &str;
  return token::STRING;
}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 242 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{
  /*" c string literal */
  const std::string& str = pScriptFile.createParserStr(yytext, yyleng);
  yylval->string = &str;
  return token::STRING;
}
	YY_BREAK
/* -l namespec */
case 112:
YY_RULE_SETUP
#line 250 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{
  const std::string& str = pScriptFile.createParserStr(yytext + 2, yyleng - 2);
  yylval->string = &str;
  return token::LNAMESPEC;
}
	YY_BREAK
/* WILDCHAR String */
case 113:
YY_RULE_SETUP
#line 257 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{
  if (yytext[0] == '/' && yytext[1] == '*') {
    yyless (2);
    enterComments(*yylloc);
  } else {
    const std::string& str = pScriptFile.createParserStr(yytext, yyleng);
    yylval->string = &str;
    return token::STRING;
  }
}
	YY_BREAK
/* gobble up C comments */
case 114:
YY_RULE_SETUP
#line 269 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{
  enterComments(*yylloc);
  yylloc->step();
}
	YY_BREAK
/* gobble up white-spaces */
case 115:
YY_RULE_SETUP
#line 275 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{
  yylloc->step();
}
	YY_BREAK
/* gobble up end-of-lines */
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 280 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
{
  yylloc->lines(1);
  yylloc->step();
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 285 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"
ECHO;
	YY_BREAK
#line 2248 "out/soong/.intermediates/frameworks/compile/mclinker/lib/Script/libmcldScript/android_arm64_armv8-a_static/gen/lex/frameworks/compile/mclinker/lib/Script/ScriptScanner.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(LDSCRIPT):
case YY_STATE_EOF(EXPRESSION):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 609 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 609 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 608);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 285 "frameworks/compile/mclinker/lib/Script/ScriptScanner.ll"


namespace mcld {

ScriptScanner::ScriptScanner(std::istream* yyin, std::ostream* yyout)
  : yyFlexLexer(yyin, yyout), m_Kind(ScriptFile::Unknown)
{
}

ScriptScanner::~ScriptScanner()
{
}

void ScriptScanner::enterComments(ScriptParser::location_type& pLocation)
{
  const int start_line = pLocation.begin.line;
  const int start_col  = pLocation.begin.column;

  int ch = 0;

  while (true) {
    ch = yyinput();
    pLocation.columns(1);

    while (ch != '*' && ch != EOF) {
      if (ch == '\n') {
        pLocation.lines(1);
      }

      ch = yyinput();
      pLocation.columns(1);
    }

    if (ch == '*') {
      ch = yyinput();
      pLocation.columns(1);

      while (ch == '*') {
        ch = yyinput();
        pLocation.columns(1);
      }

      if (ch == '/')
        break;
    }

    if (ch == '\n')
      pLocation.lines(1);

    if (ch == EOF) {
      error(diag::err_unterminated_comment) << pLocation.begin.filename
                                            << start_line
                                            << start_col;
      break;
    }
  }
}

void ScriptScanner::setLexState(ScriptFile::Kind pKind)
{
  /* push the state into the top of stach */
  m_StateStack.push(pKind);

  switch (pKind) {
  case ScriptFile::LDScript:
    BEGIN(LDSCRIPT);
    break;
  case ScriptFile::Expression:
    BEGIN(EXPRESSION);
    break;
  case ScriptFile::VersionScript:
  case ScriptFile::DynamicList:
  default:
    assert(0 && "Unsupported script type!");
    break;
  }
}

void ScriptScanner::popLexState()
{
  /* pop the last state */
  m_StateStack.pop();

  /* resume the appropriate state */
  if (!m_StateStack.empty()) {
    switch (m_StateStack.top()) {
    case ScriptFile::LDScript:
      BEGIN(LDSCRIPT);
      break;
    case ScriptFile::Expression:
      BEGIN(EXPRESSION);
      break;
    case ScriptFile::VersionScript:
    case ScriptFile::DynamicList:
    default:
      assert(0 && "Unsupported script type!");
      break;
    }
  }
}

} /* namespace mcld */

#ifdef __clang__
#pragma clang diagnostic pop
#endif

#ifdef yylex
#undef yylex
#endif

int yyFlexLexer::yylex()
{
  return 0;
}


