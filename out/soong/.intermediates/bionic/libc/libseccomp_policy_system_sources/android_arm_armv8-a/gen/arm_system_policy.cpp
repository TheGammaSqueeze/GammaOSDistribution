// File autogenerated by genseccomp.py - edit at your peril!!

#include <linux/filter.h>
#include <errno.h>

#include "seccomp/seccomp_bpfs.h"
const sock_filter arm_system_filter[] = {
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 0, 0, 140),
BPF_JUMP(BPF_JMP|BPF_JEQ|BPF_K, 240, 138, 0), //futex
BPF_JUMP(BPF_JMP|BPF_JEQ|BPF_K, 54, 137, 0), //ioctl
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 197, 69, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 91, 35, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 51, 17, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 36, 9, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 19, 5, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 11, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 3, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 2, 130, 129), //restart_syscall|exit
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 7, 129, 128), //read|write|open|close
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 13, 128, 127), //execve|chdir
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 26, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 22, 126, 125), //lseek|getpid|mount
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 27, 125, 124), //ptrace
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 43, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 41, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 38, 122, 121), //sync|kill
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 42, 121, 120), //dup
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 45, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 44, 119, 118), //times
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 46, 118, 117), //brk
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 74, 9, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 64, 5, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 60, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 57, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 53, 113, 112), //acct|umount2
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 58, 112, 111), //setpgid
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 62, 111, 110), //umask|chroot
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 66, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 65, 109, 108), //getppid
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 68, 108, 107), //setsid|sigaction
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 85, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 77, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 76, 105, 104), //sethostname|setrlimit
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 80, 104, 103), //getrusage|gettimeofday|settimeofday
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 88, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 86, 102, 101), //readlink
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 89, 101, 100), //reboot
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 131, 17, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 116, 9, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 103, 5, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 96, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 94, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 93, 95, 94), //munmap|truncate
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 95, 94, 93), //fchmod
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 98, 93, 92), //getpriority|setpriority
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 114, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 106, 91, 90), //syslog|setitimer|getitimer
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 115, 90, 89), //wait4
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 124, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 118, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 117, 87, 86), //sysinfo
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 123, 86, 85), //fsync|sigreturn|clone|setdomainname|uname
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 128, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 126, 84, 83), //adjtimex|mprotect
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 130, 83, 82), //init_module|delete_module
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 150, 7, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 138, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 136, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 134, 79, 78), //quotactl|getpgid|fchdir
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 137, 78, 77), //personality
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 143, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 141, 76, 75), //setfsuid|setfsgid|_llseek
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 149, 75, 74), //flock|msync|readv|writev|getsid|fdatasync
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 183, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 172, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 164, 72, 71), //mlock|munlock|mlockall|munlockall|sched_setparam|sched_getparam|sched_setscheduler|sched_getscheduler|sched_yield|sched_get_priority_max|sched_get_priority_min|sched_rr_get_interval|nanosleep|mremap
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 182, 71, 70), //prctl|rt_sigreturn|rt_sigaction|rt_sigprocmask|rt_sigpending|rt_sigtimedwait|rt_sigqueueinfo|rt_sigsuspend|pread64|pwrite64
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 190, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 188, 69, 68), //getcwd|capget|capset|sigaltstack|sendfile
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 196, 68, 67), //vfork|ugetrlimit|mmap2|truncate64|ftruncate64|stat64
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 340, 33, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 270, 17, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 224, 9, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 217, 5, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 213, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 199, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 198, 61, 60), //fstat64
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 212, 60, 59), //getuid32|getgid32|geteuid32|getegid32|setreuid32|setregid32|getgroups32|setgroups32|fchown32|setresuid32|getresuid32|setresgid32|getresgid32
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 215, 59, 58), //setuid32|setgid32
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 219, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 218, 57, 56), //getdents64
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 222, 56, 55), //mincore|madvise|fcntl64
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 251, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 241, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 240, 53, 52), //gettid|readahead|setxattr|lsetxattr|fsetxattr|getxattr|lgetxattr|fgetxattr|listxattr|llistxattr|flistxattr|removexattr|lremovexattr|fremovexattr|tkill|sendfile64
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 249, 52, 51), //sched_setaffinity|sched_getaffinity|io_setup|io_destroy|io_getevents|io_submit|io_cancel|exit_group
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 256, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 252, 50, 49), //epoll_ctl
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 269, 49, 48), //set_tid_address|timer_create|timer_settime|timer_gettime|timer_getoverrun|timer_delete|clock_settime|clock_gettime|clock_getres|clock_nanosleep|statfs64|fstatfs64|tgkill
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 292, 7, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 286, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 280, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 271, 45, 44), //arm_fadvise64_64
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 285, 44, 43), //waitid|socket|bind|connect|listen
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 290, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 289, 42, 41), //getsockname|getpeername|socketpair
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 291, 41, 40), //sendto
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 322, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 317, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 298, 38, 37), //recvfrom|shutdown|setsockopt|getsockopt|sendmsg|recvmsg
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 319, 37, 36), //inotify_add_watch|inotify_rm_watch
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 327, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 326, 35, 34), //openat|mkdirat|mknodat|fchownat
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 338, 34, 33), //fstatat64|unlinkat|renameat|linkat|symlinkat|readlinkat|fchmodat|faccessat|pselect6|ppoll|unshare
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 403, 17, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 369, 9, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 350, 5, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 348, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 345, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 344, 28, 27), //splice|sync_file_range2|tee|vmsplice
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 347, 27, 26), //getcpu|epoll_pwait
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 349, 26, 25), //utimensat
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 352, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 351, 24, 23), //timerfd_create
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 367, 23, 22), //fallocate|timerfd_settime|timerfd_gettime|signalfd4|eventfd2|epoll_create1|dup3|pipe2|inotify_init1|preadv|pwritev|rt_tgsigqueueinfo|perf_event_open|recvmmsg|accept4
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 380, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 372, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 370, 20, 19), //prlimit64
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 378, 19, 18), //clock_adjtime|syncfs|sendmmsg|setns|process_vm_readv|process_vm_writev
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 397, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 394, 17, 16), //sched_setattr|sched_getattr|renameat2|seccomp|getrandom|memfd_create|bpf|execveat|userfaultfd|membarrier|mlock2|copy_file_range|preadv2|pwritev2
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 398, 16, 15), //statx
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 438, 7, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 420, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 417, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 415, 12, 11), //clock_gettime64|clock_settime64|clock_adjtime64|clock_getres_time64|clock_nanosleep_time64|timer_gettime64|timer_settime64|timerfd_gettime64|timerfd_settime64|utimensat_time64|pselect6_time64|ppoll_time64
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 418, 11, 10), //recvmmsg_time64
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 434, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 425, 9, 8), //semtimedop_time64|rt_sigtimedwait_time64|futex_time64|sched_rr_get_interval_time64|pidfd_send_signal
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 435, 8, 7), //pidfd_open
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 983042, 3, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 440, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 439, 5, 4), //pidfd_getfd
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 441, 4, 3), //process_madvise
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 983045, 1, 0),
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 983043, 2, 1), //__ARM_NR_cacheflush
BPF_JUMP(BPF_JMP|BPF_JGE|BPF_K, 983046, 1, 0), //__ARM_NR_set_tls
BPF_STMT(BPF_RET|BPF_K, SECCOMP_RET_ALLOW),
};

const size_t arm_system_filter_size = sizeof(arm_system_filter) / sizeof(struct sock_filter);
