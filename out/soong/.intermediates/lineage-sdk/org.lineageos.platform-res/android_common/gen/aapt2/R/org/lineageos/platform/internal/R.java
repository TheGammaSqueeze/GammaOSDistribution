/* AUTO-GENERATED FILE. DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found. It
 * should not be modified by hand.
 */

package org.lineageos.platform.internal;

public final class R {
  public static final class anim {
    /**
     * Last app switch animations
     */
    public static final int last_app_in=0x3f020000;
    public static final int last_app_out=0x3f020001;
  }
  public static final class array {
    /**
     * Package Manager
     * The list of components which should be automatically disabled for a specific device.
     * Note: this MUST not be used to randomly disable components, ask for approval first!
     */
    public static final int config_deviceDisabledComponents=0x3f030000;
    /**
     * Names of the key handler classes
     */
    public static final int config_deviceKeyHandlerClasses=0x3f030001;
    /**
     * Device keyhandlers
     * Paths to the libraries that contain device specific key handlers
     */
    public static final int config_deviceKeyHandlerLibs=0x3f030002;
    /**
     * Display mode remapping table.
     * If the mode names returned by the backend do not match
     * the predefined and translated strings in the Settings
     * app, they can be remapped here. The format is
     * "oldname:newname", one per entry.
     */
    public static final int config_displayModeMappings=0x3f030003;
    /**
     * External Lineage specific core services
     * Defines external services to be started by the LineageSystemServer at boot. The service itself
     * should publish as a binder services in its onStart
     */
    public static final int config_externalLineageServices=0x3f030004;
    /**
     * The list of components which should be forced to be enabled.
     */
    public static final int config_forceEnabledComponents=0x3f030005;
    /**
     * The list of components which should be automatically disabled for all devices.
     */
    public static final int config_globallyDisabledComponents=0x3f030006;
    /**
     * Power menu
     * Defines the actions shown in advanced reboot submenu
     */
    public static final int config_restartActionsList=0x3f030007;
    /**
     * The list of vendor package signatures that should also be considered
     * platform signatures, specifically for use on devices with a vendor partition.
     */
    public static final int config_vendorPlatformSignatures=0x3f030008;
    /**
     * ATV remote custom keys handling
     * Array of keycodes for special keys on device.
     * Order & size must match with keyhandler_packages
     */
    public static final int keyhandler_keycodes=0x3f030009;
    /**
     * Array of packages for special keys on device.
     * Order & size must match with keyhandler_keycodes
     */
    public static final int keyhandler_packages=0x3f03000a;
    /**
     * LiveDisplay announcement
     */
    public static final int live_display_announcement=0x3f03000b;
    /**
     * LiveDisplay description
     */
    public static final int live_display_description=0x3f03000c;
    /**
     * LiveDisplay drawables
     */
    public static final int live_display_drawables=0x3f03000d;
    /**
     * LiveDisplay
     */
    public static final int live_display_entries=0x3f03000e;
    public static final int live_display_summaries=0x3f03000f;
    public static final int live_display_values=0x3f030010;
    /**
     * Notification light mappings
     * Do not translate. Defines the mapping of notification package names
     * from the actual triggering package to the user selectable package.
     * E.g. GTalk notifications come via Google Services Framework
     * Format: [triggering package]|[user package]
     */
    public static final int notification_light_package_mapping=0x3f030011;
  }
  public static final class attr {
    /**
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int minSummaryLines=0x3f01000a;
    /**
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int replacesKey=0x3f010009;
    /**
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int requiresAction=0x3f010008;
    /**
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int requiresConfig=0x3f010004;
    /**
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int requiresConfigMask=0x3f01000b;
    /**
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int requiresFeature=0x3f010003;
    /**
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int requiresOwner=0x3f010006;
    /**
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int requiresPackage=0x3f010002;
    /**
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int requiresProperty=0x3f010005;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int xmlRes=0x3f010007;
  }
  public static final class bool {
    /**
     * Whether to cleanup fingerprints upon connection to the daemon and when
     * user switches
     * Whether to cleanup fingerprints upon connection to the daemon and when
     * user switches
     */
    public static final int config_cleanupUnusedFingerprints=0x3f040000;
    public static final int config_defaultAntiFlicker=0x3f040001;
    public static final int config_defaultAutoContrast=0x3f040002;
    public static final int config_defaultAutoOutdoorMode=0x3f040003;
    public static final int config_defaultCABC=0x3f040004;
    public static final int config_defaultColorEnhancement=0x3f040005;
    /**
     * Whether the device supports wireless charging or not
     * Whether the device supports wireless charging or not
     */
    public static final int config_deviceSupportsWirelessCharging=0x3f040006;
    /**
     * LiveDisplay
     * Default values for LiveDisplay
     */
    public static final int config_enableLiveDisplay=0x3f040007;
    /**
     * Should we filter any display modes which are unmapped?
     */
    public static final int config_filterDisplayModes=0x3f040008;
    /**
     * Whether to notify fingerprint client of successful cancelled authentication
     * (needed for some older vendor fingerprint HAL implementations)
     * Whether to notify fingerprint client of successful cancelled authentication
     * (needed for some older vendor fingerprint HAL implementations)
     */
    public static final int config_fingerprintPostResetRunnableForAllClients=0x3f040009;
    /**
     * Full screen aspect ratio
     * Whether device has a screen with a higher aspect ratio
     */
    public static final int config_haveHigherAspectRatioScreen=0x3f04000a;
    /**
     * Proximity check on screen on
     * Default value for proximity check on screen wake
     * NOTE ! - Enable for devices that have a fast response proximity sensor (ideally < 300ms)
     */
    public static final int config_proximityCheckOnWake=0x3f04000b;
    /**
     * Proximity check on screen on default
     */
    public static final int config_proximityCheckOnWakeEnabledByDefault=0x3f04000c;
    /**
     * Camera key type
     * Indicates that the device has Single-stage Camera key
     * (without "Focus" state) instead of Dual-stage.
     */
    public static final int config_singleStageCameraKey=0x3f04000d;
    /**
     * Trust interface
     * Indicate whether encryption causes significant performances loss.
     * This MUST NOT be set to true on devices produced in 2016 or later
     */
    public static final int config_trustLegacyEncryption=0x3f04000e;
  }
  public static final class color {
    /**
     * Colors
     */
    public static final int color_error=0x3f050000;
  }
  public static final class dimen {
    public static final int config_buttonBrightnessSettingDefaultFloat=0x3f060000;
    public static final int config_keyboardBrightnessSettingDefaultFloat=0x3f060001;
    public static final int net_traffic_multi_text_size=0x3f060002;
    public static final int net_traffic_single_text_size=0x3f060003;
  }
  public static final class drawable {
    public static final int ic_launcher_lineageos=0x3f070003;
    public static final int ic_livedisplay_notif=0x3f070007;
    public static final int ic_trust=0x3f07000d;
    public static final int ic_trust_notification_manage=0x3f07000e;
    public static final int ic_warning=0x3f07000f;
    /**
     * Status bar network traffic monitor
     */
    public static final int stat_sys_network_traffic_down=0x3f070010;
    public static final int stat_sys_network_traffic_up=0x3f070011;
    public static final int stat_sys_network_traffic_updown=0x3f070012;
  }
  public static final class integer {
    /**
     * Timeout in MS for how long you have to long-press the back key to
     * kill the foreground app.
     */
    public static final int config_backKillTimeout=0x3f080000;
    public static final int config_dayColorTemperature=0x3f080001;
    public static final int config_defaultLiveDisplayMode=0x3f080002;
    /**
     * Device hardware keys
     * Hardware keys present on the device, stored as a bit field.
     * This integer should equal the sum of the corresponding value for each
     * of the following keys present:
     * 1 - Home
     * 2 - Back
     * 4 - Menu
     * 8 - Assistant (search)
     * 16 - App switch
     * 32 - Camera
     * 64 - Volume rocker
     * For example, a device with Home, Back and Menu keys would set this
     * config to 7.
     */
    public static final int config_deviceHardwareKeys=0x3f080003;
    /**
     * Hardware keys present on the device with the ability to wake, stored as a bit field.
     * This integer should equal the sum of the corresponding value for each
     * of the following keys present:
     * 1 - Home
     * 2 - Back
     * 4 - Menu
     * 8 - Assistant (search)
     * 16 - App switch
     * 32 - Camera
     * 64 - Volume rocker
     * For example, a device with Home, Back and Menu keys would set this
     * config to 7.
     */
    public static final int config_deviceHardwareWakeKeys=0x3f080004;
    /**
     * On-device lights (LED) capabilities
     * All the capabilities of the LEDs on this device, stored as a bit field.
     * This integer should equal the sum of the corresponding value for each
     * of the following capabilities present:
     * // Device has a color adjustable notification light.
     * LIGHTS_RGB_NOTIFICATION_LED = 1
     * // Device has a color adjustable battery light.
     * LIGHTS_RGB_BATTERY_LED = 2
     * LIGHTS_MULTIPLE_NOTIFICATION_LED = 4 (deprecated)
     * // The notification light has adjustable pulsing capability.
     * LIGHTS_PULSATING_LED = 8
     * // Device has a multi-segment battery light that is able to
     * // use the light brightness value to determine how many
     * // segments to show (in order to represent battery level).
     * LIGHTS_SEGMENTED_BATTERY_LED = 16
     * // The notification light supports HAL adjustable brightness
     * // via the alpha channel.
     * // Note: if a device notification light supports LIGHTS_RGB_NOTIFICATION_LED
     * // then HAL support is not necessary for brightness control.  In this case,
     * // brightness support will be provided by lineage-sdk through the scaling of
     * // RGB color values.
     * LIGHTS_ADJUSTABLE_NOTIFICATION_LED_BRIGHTNESS = 32
     * // Device has a battery light.
     * LIGHTS_BATTERY_LED = 64
     * // The battery light supports HAL adjustable brightness via
     * // the alpha channel.
     * // Note: if a device battery light supports LIGHTS_RGB_BATTERY_LED then HAL
     * // support is not necessary for brightness control.  In this case,
     * // brightness support will be provided by lineage-sdk through the scaling of
     * // RGB color values.
     * LIGHTS_ADJUSTABLE_BATTERY_LED_BRIGHTNESS = 128
     * For example, a device with notification and battery lights that supports
     * pulsating and RGB control would set this config to 75.
     */
    public static final int config_deviceLightCapabilities=0x3f080005;
    /**
     * Button and keyboard backlight
     * Button backlight control. Possible values are:
     * 0 - Not supported
     * 1 - Supported, but only on/off mode
     * 2 - Supported with variable brightness control
     */
    public static final int config_deviceSupportsButtonBrightnessControl=0x3f080006;
    /**
     * Keyboard backlight control. Possible values are:
     * 0 - Not supported
     * 1 - Supported, but only on/off mode
     * 2 - Supported with variable brightness control
     */
    public static final int config_deviceSupportsKeyboardBrightnessControl=0x3f080007;
    /**
     * Control the behavior when the user double-taps the home button.
     * 0 - Nothing
     * 1 - Menu key
     * 2 - Recent apps view in SystemUI
     * 3 - Launch assist intent
     * 4 - Voice Search
     * 5 - In-app Search
     * 6 - Launch camera
     * 7 - Sleep
     * 8 - Last app
     * 9 - Toggle split screen
     * 10 - Kill foreground app
     * This needs to match the enums in
     * sdk/src/java/org/lineageos/internal/util/DeviceKeysConstants.java.
     */
    public static final int config_doubleTapOnHomeBehavior=0x3f080008;
    /**
     * Control the behavior when the user long presses the app switch button.
     * 0 - Nothing
     * 1 - Menu key
     * 2 - Recent apps view in SystemUI
     * 3 - Launch assist intent
     * 4 - Voice Search
     * 5 - In-app Search
     * 6 - Launch camera
     * 7 - Sleep
     * 8 - Last app
     * 9 - Toggle split screen
     * 10 - Kill foreground app
     * This needs to match the enums in
     * sdk/src/java/org/lineageos/internal/util/DeviceKeysConstants.java.
     */
    public static final int config_longPressOnAppSwitchBehavior=0x3f080009;
    /**
     * Device keys user-customisable behavior
     * Control the behavior when the user long presses the back button.
     * 0 - Nothing
     * 1 - Menu key
     * 2 - Recent apps view in SystemUI
     * 3 - Launch assist intent
     * 4 - Voice Search
     * 5 - In-app Search
     * 6 - Launch camera
     * 7 - Sleep
     * 8 - Last app
     * 9 - Toggle split screen
     * 10 - Kill foreground app
     * This needs to match the enums in
     * sdk/src/java/org/lineageos/internal/util/DeviceKeysConstants.java.
     */
    public static final int config_longPressOnBackBehavior=0x3f08000a;
    /**
     * Control the behavior when the user long presses the home button.
     * 0 - Nothing
     * 1 - Menu key
     * 2 - Recent apps view in SystemUI
     * 3 - Launch assist intent
     * 4 - Voice Search
     * 5 - In-app Search
     * 6 - Launch camera
     * 7 - Sleep
     * 8 - Last app
     * 9 - Toggle split screen
     * 10 - Kill foreground app
     * This needs to match the enums in
     * sdk/src/java/org/lineageos/internal/util/DeviceKeysConstants.java.
     */
    public static final int config_longPressOnHomeBehavior=0x3f08000b;
    /**
     * Control the behavior when the user long presses the menu button.
     * 0 - Nothing
     * 1 - Menu key
     * 2 - Recent apps view in SystemUI
     * 3 - Launch assist intent
     * 4 - Voice Search
     * 5 - In-app Search
     * 6 - Launch camera
     * 7 - Sleep
     * 8 - Last app
     * 9 - Toggle split screen
     * 10 - Kill foreground app
     * This needs to match the enums in
     * sdk/src/java/org/lineageos/internal/util/DeviceKeysConstants.java.
     */
    public static final int config_longPressOnMenuBehavior=0x3f08000c;
    public static final int config_maxColorTemperature=0x3f08000d;
    /**
     * These values should map to the true min and max
     * that the backend is capable of adjusting to. This
     * is more important when using the ColorBalance mode,
     * as the discrete adjustment is interpolated between
     * this range (with config_dayColorTemperature at zero)
     */
    public static final int config_minColorTemperature=0x3f08000e;
    public static final int config_nightColorTemperature=0x3f08000f;
    public static final int config_outdoorAmbientLux=0x3f080010;
    public static final int config_outdoorAmbientLuxHysteresis=0x3f080011;
    /**
     * Proximity check timeout
     */
    public static final int config_proximityCheckTimeout=0x3f080012;
  }

  public static final class string {
    /**
     * Back kill
     * Long-press back kill application
     */
    public static final int app_killed_message=0x3f0a000a;
    /**
     * About device info screen
     * About device screen, build date
     */
    public static final int build_date=0x3f0a000b;
    /**
     * Lineage system server
     * The LineageSystemServer class that is invoked from Android's SystemServer
     */
    public static final int config_externalSystemServer=0x3f0a000c;
    /**
     * Status bar network traffic monitor strings
     */
    public static final int kilobitspersecond_short=0x3f0a000d;
    public static final int kilobytespersecond_short=0x3f0a000e;
    /**
     * About device screen, LineageOS API Level
     */
    public static final int lineage_api_level=0x3f0a000f;
    /**
     * About device screen, LineageOS updates
     */
    public static final int lineage_updates=0x3f0a0010;
    /**
     * About device screen, vendor security patch
     */
    public static final int lineage_vendor_security_patch=0x3f0a0011;
    /**
     * About device screen, LineageOS version
     */
    public static final int lineage_version=0x3f0a0012;
    public static final int live_display_auto=0x3f0a0014;
    public static final int live_display_auto_summary=0x3f0a0015;
    public static final int live_display_day=0x3f0a0016;
    public static final int live_display_day_summary=0x3f0a0017;
    public static final int live_display_hint=0x3f0a0018;
    public static final int live_display_night=0x3f0a0019;
    public static final int live_display_night_summary=0x3f0a001a;
    public static final int live_display_outdoor=0x3f0a001d;
    public static final int live_display_outdoor_summary=0x3f0a001e;
    /**
     * LiveDisplay strings
     */
    public static final int live_display_title=0x3f0a001f;
    public static final int megabitspersecond_short=0x3f0a0020;
    public static final int megabytespersecond_short=0x3f0a0021;
    /**
     * This string will be referenced from other apps when they're referring to the Trust interface.
     * Trust is a feature name, it's not suggested to translate this unless there are conflicts due
     * to a different meaning of the word "trust" in your language
     */
    public static final int trust_feature_name=0x3f0a003b;
    public static final int trust_notification_action_manage=0x3f0a003c;
    public static final int trust_notification_channel=0x3f0a003d;
    public static final int trust_notification_content_keys=0x3f0a003e;
    public static final int trust_notification_content_onboarding=0x3f0a003f;
    public static final int trust_notification_content_selinux=0x3f0a0040;
    public static final int trust_notification_title_onboarding=0x3f0a0041;
    public static final int trust_notification_title_security=0x3f0a0042;
    /**
     * General purpose use "unknown" string
     * General purpose use "unknown" string
     */
    public static final int unknown=0x3f0a0043;
    /**
     * Name of wildcard profile.
     */
    public static final int wildcardProfile=0x3f0a0044;
  }
  public static final class styleable {
    /**
     * Settings search providers
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #lineage_Searchable_xmlRes lineageos.platform:xmlRes}</code></td><td></td></tr>
     * </table>
     * @see #lineage_Searchable_xmlRes
     */
    public static final int[] lineage_Searchable={
      0x3f010007
    };
    /**
     * <p>This symbol is the offset where the {@link lineageos.platform.R.attr#xmlRes}
     * attribute's value can be found in the {@link #lineage_Searchable} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name lineageos.platform:xmlRes
     */
    public static final int lineage_Searchable_xmlRes=0;
    /**
     * Attributes that can be used with a lineage_SelfRemovingPreference.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #lineage_SelfRemovingPreference_requiresPackage lineageos.platform:requiresPackage}</code></td><td></td></tr>
     * <tr><td><code>{@link #lineage_SelfRemovingPreference_requiresFeature lineageos.platform:requiresFeature}</code></td><td></td></tr>
     * <tr><td><code>{@link #lineage_SelfRemovingPreference_requiresConfig lineageos.platform:requiresConfig}</code></td><td></td></tr>
     * <tr><td><code>{@link #lineage_SelfRemovingPreference_requiresProperty lineageos.platform:requiresProperty}</code></td><td></td></tr>
     * <tr><td><code>{@link #lineage_SelfRemovingPreference_requiresOwner lineageos.platform:requiresOwner}</code></td><td></td></tr>
     * <tr><td><code>{@link #lineage_SelfRemovingPreference_requiresAction lineageos.platform:requiresAction}</code></td><td></td></tr>
     * <tr><td><code>{@link #lineage_SelfRemovingPreference_replacesKey lineageos.platform:replacesKey}</code></td><td></td></tr>
     * <tr><td><code>{@link #lineage_SelfRemovingPreference_minSummaryLines lineageos.platform:minSummaryLines}</code></td><td></td></tr>
     * <tr><td><code>{@link #lineage_SelfRemovingPreference_requiresConfigMask lineageos.platform:requiresConfigMask}</code></td><td></td></tr>
     * </table>
     * @see #lineage_SelfRemovingPreference_requiresPackage
     * @see #lineage_SelfRemovingPreference_requiresFeature
     * @see #lineage_SelfRemovingPreference_requiresConfig
     * @see #lineage_SelfRemovingPreference_requiresProperty
     * @see #lineage_SelfRemovingPreference_requiresOwner
     * @see #lineage_SelfRemovingPreference_requiresAction
     * @see #lineage_SelfRemovingPreference_replacesKey
     * @see #lineage_SelfRemovingPreference_minSummaryLines
     * @see #lineage_SelfRemovingPreference_requiresConfigMask
     */
    public static final int[] lineage_SelfRemovingPreference={
      0x3f010002, 0x3f010003, 0x3f010004, 0x3f010005, 
      0x3f010006, 0x3f010008, 0x3f010009, 0x3f01000a, 
      0x3f01000b
    };
    /**
     * <p>This symbol is the offset where the {@link lineageos.platform.R.attr#requiresPackage}
     * attribute's value can be found in the {@link #lineage_SelfRemovingPreference} array.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name lineageos.platform:requiresPackage
     */
    public static final int lineage_SelfRemovingPreference_requiresPackage=0;
    /**
     * <p>This symbol is the offset where the {@link lineageos.platform.R.attr#requiresFeature}
     * attribute's value can be found in the {@link #lineage_SelfRemovingPreference} array.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name lineageos.platform:requiresFeature
     */
    public static final int lineage_SelfRemovingPreference_requiresFeature=1;
    /**
     * <p>This symbol is the offset where the {@link lineageos.platform.R.attr#requiresConfig}
     * attribute's value can be found in the {@link #lineage_SelfRemovingPreference} array.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name lineageos.platform:requiresConfig
     */
    public static final int lineage_SelfRemovingPreference_requiresConfig=2;
    /**
     * <p>This symbol is the offset where the {@link lineageos.platform.R.attr#requiresProperty}
     * attribute's value can be found in the {@link #lineage_SelfRemovingPreference} array.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name lineageos.platform:requiresProperty
     */
    public static final int lineage_SelfRemovingPreference_requiresProperty=3;
    /**
     * <p>This symbol is the offset where the {@link lineageos.platform.R.attr#requiresOwner}
     * attribute's value can be found in the {@link #lineage_SelfRemovingPreference} array.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name lineageos.platform:requiresOwner
     */
    public static final int lineage_SelfRemovingPreference_requiresOwner=4;
    /**
     * <p>This symbol is the offset where the {@link lineageos.platform.R.attr#requiresAction}
     * attribute's value can be found in the {@link #lineage_SelfRemovingPreference} array.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name lineageos.platform:requiresAction
     */
    public static final int lineage_SelfRemovingPreference_requiresAction=5;
    /**
     * <p>This symbol is the offset where the {@link lineageos.platform.R.attr#replacesKey}
     * attribute's value can be found in the {@link #lineage_SelfRemovingPreference} array.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name lineageos.platform:replacesKey
     */
    public static final int lineage_SelfRemovingPreference_replacesKey=6;
    /**
     * <p>This symbol is the offset where the {@link lineageos.platform.R.attr#minSummaryLines}
     * attribute's value can be found in the {@link #lineage_SelfRemovingPreference} array.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name lineageos.platform:minSummaryLines
     */
    public static final int lineage_SelfRemovingPreference_minSummaryLines=7;
    /**
     * <p>This symbol is the offset where the {@link lineageos.platform.R.attr#requiresConfigMask}
     * attribute's value can be found in the {@link #lineage_SelfRemovingPreference} array.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name lineageos.platform:requiresConfigMask
     */
    public static final int lineage_SelfRemovingPreference_requiresConfigMask=8;
  }
  public static final class xml {
    /**
     * Profiles
     */
    public static final int profile_default=0x3f0c0000;
  }
}