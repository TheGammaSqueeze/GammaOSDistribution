// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bootable/recovery/update_verifier/care_map.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bootable_2frecovery_2fupdate_5fverifier_2fcare_5fmap_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bootable_2frecovery_2fupdate_5fverifier_2fcare_5fmap_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bootable_2frecovery_2fupdate_5fverifier_2fcare_5fmap_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bootable_2frecovery_2fupdate_5fverifier_2fcare_5fmap_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace recovery_update_verifier {
class CareMap;
class CareMapDefaultTypeInternal;
extern CareMapDefaultTypeInternal _CareMap_default_instance_;
class CareMap_PartitionInfo;
class CareMap_PartitionInfoDefaultTypeInternal;
extern CareMap_PartitionInfoDefaultTypeInternal _CareMap_PartitionInfo_default_instance_;
}  // namespace recovery_update_verifier
PROTOBUF_NAMESPACE_OPEN
template<> ::recovery_update_verifier::CareMap* Arena::CreateMaybeMessage<::recovery_update_verifier::CareMap>(Arena*);
template<> ::recovery_update_verifier::CareMap_PartitionInfo* Arena::CreateMaybeMessage<::recovery_update_verifier::CareMap_PartitionInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace recovery_update_verifier {

// ===================================================================

class CareMap_PartitionInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:recovery_update_verifier.CareMap.PartitionInfo) */ {
 public:
  CareMap_PartitionInfo();
  virtual ~CareMap_PartitionInfo();

  CareMap_PartitionInfo(const CareMap_PartitionInfo& from);
  CareMap_PartitionInfo(CareMap_PartitionInfo&& from) noexcept
    : CareMap_PartitionInfo() {
    *this = ::std::move(from);
  }

  inline CareMap_PartitionInfo& operator=(const CareMap_PartitionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CareMap_PartitionInfo& operator=(CareMap_PartitionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CareMap_PartitionInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CareMap_PartitionInfo* internal_default_instance() {
    return reinterpret_cast<const CareMap_PartitionInfo*>(
               &_CareMap_PartitionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CareMap_PartitionInfo& a, CareMap_PartitionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CareMap_PartitionInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CareMap_PartitionInfo* New() const final {
    return CreateMaybeMessage<CareMap_PartitionInfo>(nullptr);
  }

  CareMap_PartitionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CareMap_PartitionInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CareMap_PartitionInfo& from);
  void MergeFrom(const CareMap_PartitionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CareMap_PartitionInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "recovery_update_verifier.CareMap.PartitionInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kRangesFieldNumber = 2,
    kIdFieldNumber = 3,
    kFingerprintFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string ranges = 2;
  void clear_ranges();
  const std::string& ranges() const;
  void set_ranges(const std::string& value);
  void set_ranges(std::string&& value);
  void set_ranges(const char* value);
  void set_ranges(const char* value, size_t size);
  std::string* mutable_ranges();
  std::string* release_ranges();
  void set_allocated_ranges(std::string* ranges);

  // string id = 3;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // string fingerprint = 4;
  void clear_fingerprint();
  const std::string& fingerprint() const;
  void set_fingerprint(const std::string& value);
  void set_fingerprint(std::string&& value);
  void set_fingerprint(const char* value);
  void set_fingerprint(const char* value, size_t size);
  std::string* mutable_fingerprint();
  std::string* release_fingerprint();
  void set_allocated_fingerprint(std::string* fingerprint);

  // @@protoc_insertion_point(class_scope:recovery_update_verifier.CareMap.PartitionInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ranges_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fingerprint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bootable_2frecovery_2fupdate_5fverifier_2fcare_5fmap_2eproto;
};
// -------------------------------------------------------------------

class CareMap :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:recovery_update_verifier.CareMap) */ {
 public:
  CareMap();
  virtual ~CareMap();

  CareMap(const CareMap& from);
  CareMap(CareMap&& from) noexcept
    : CareMap() {
    *this = ::std::move(from);
  }

  inline CareMap& operator=(const CareMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline CareMap& operator=(CareMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CareMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CareMap* internal_default_instance() {
    return reinterpret_cast<const CareMap*>(
               &_CareMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CareMap& a, CareMap& b) {
    a.Swap(&b);
  }
  inline void Swap(CareMap* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CareMap* New() const final {
    return CreateMaybeMessage<CareMap>(nullptr);
  }

  CareMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CareMap>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CareMap& from);
  void MergeFrom(const CareMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CareMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "recovery_update_verifier.CareMap";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef CareMap_PartitionInfo PartitionInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionsFieldNumber = 1,
  };
  // repeated .recovery_update_verifier.CareMap.PartitionInfo partitions = 1;
  int partitions_size() const;
  void clear_partitions();
  ::recovery_update_verifier::CareMap_PartitionInfo* mutable_partitions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::recovery_update_verifier::CareMap_PartitionInfo >*
      mutable_partitions();
  const ::recovery_update_verifier::CareMap_PartitionInfo& partitions(int index) const;
  ::recovery_update_verifier::CareMap_PartitionInfo* add_partitions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::recovery_update_verifier::CareMap_PartitionInfo >&
      partitions() const;

  // @@protoc_insertion_point(class_scope:recovery_update_verifier.CareMap)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::recovery_update_verifier::CareMap_PartitionInfo > partitions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bootable_2frecovery_2fupdate_5fverifier_2fcare_5fmap_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CareMap_PartitionInfo

// string name = 1;
inline void CareMap_PartitionInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CareMap_PartitionInfo::name() const {
  // @@protoc_insertion_point(field_get:recovery_update_verifier.CareMap.PartitionInfo.name)
  return name_.GetNoArena();
}
inline void CareMap_PartitionInfo::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recovery_update_verifier.CareMap.PartitionInfo.name)
}
inline void CareMap_PartitionInfo::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recovery_update_verifier.CareMap.PartitionInfo.name)
}
inline void CareMap_PartitionInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recovery_update_verifier.CareMap.PartitionInfo.name)
}
inline void CareMap_PartitionInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recovery_update_verifier.CareMap.PartitionInfo.name)
}
inline std::string* CareMap_PartitionInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:recovery_update_verifier.CareMap.PartitionInfo.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CareMap_PartitionInfo::release_name() {
  // @@protoc_insertion_point(field_release:recovery_update_verifier.CareMap.PartitionInfo.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CareMap_PartitionInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:recovery_update_verifier.CareMap.PartitionInfo.name)
}

// string ranges = 2;
inline void CareMap_PartitionInfo::clear_ranges() {
  ranges_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CareMap_PartitionInfo::ranges() const {
  // @@protoc_insertion_point(field_get:recovery_update_verifier.CareMap.PartitionInfo.ranges)
  return ranges_.GetNoArena();
}
inline void CareMap_PartitionInfo::set_ranges(const std::string& value) {
  
  ranges_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recovery_update_verifier.CareMap.PartitionInfo.ranges)
}
inline void CareMap_PartitionInfo::set_ranges(std::string&& value) {
  
  ranges_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recovery_update_verifier.CareMap.PartitionInfo.ranges)
}
inline void CareMap_PartitionInfo::set_ranges(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ranges_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recovery_update_verifier.CareMap.PartitionInfo.ranges)
}
inline void CareMap_PartitionInfo::set_ranges(const char* value, size_t size) {
  
  ranges_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recovery_update_verifier.CareMap.PartitionInfo.ranges)
}
inline std::string* CareMap_PartitionInfo::mutable_ranges() {
  
  // @@protoc_insertion_point(field_mutable:recovery_update_verifier.CareMap.PartitionInfo.ranges)
  return ranges_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CareMap_PartitionInfo::release_ranges() {
  // @@protoc_insertion_point(field_release:recovery_update_verifier.CareMap.PartitionInfo.ranges)
  
  return ranges_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CareMap_PartitionInfo::set_allocated_ranges(std::string* ranges) {
  if (ranges != nullptr) {
    
  } else {
    
  }
  ranges_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ranges);
  // @@protoc_insertion_point(field_set_allocated:recovery_update_verifier.CareMap.PartitionInfo.ranges)
}

// string id = 3;
inline void CareMap_PartitionInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CareMap_PartitionInfo::id() const {
  // @@protoc_insertion_point(field_get:recovery_update_verifier.CareMap.PartitionInfo.id)
  return id_.GetNoArena();
}
inline void CareMap_PartitionInfo::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recovery_update_verifier.CareMap.PartitionInfo.id)
}
inline void CareMap_PartitionInfo::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recovery_update_verifier.CareMap.PartitionInfo.id)
}
inline void CareMap_PartitionInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recovery_update_verifier.CareMap.PartitionInfo.id)
}
inline void CareMap_PartitionInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recovery_update_verifier.CareMap.PartitionInfo.id)
}
inline std::string* CareMap_PartitionInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:recovery_update_verifier.CareMap.PartitionInfo.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CareMap_PartitionInfo::release_id() {
  // @@protoc_insertion_point(field_release:recovery_update_verifier.CareMap.PartitionInfo.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CareMap_PartitionInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:recovery_update_verifier.CareMap.PartitionInfo.id)
}

// string fingerprint = 4;
inline void CareMap_PartitionInfo::clear_fingerprint() {
  fingerprint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CareMap_PartitionInfo::fingerprint() const {
  // @@protoc_insertion_point(field_get:recovery_update_verifier.CareMap.PartitionInfo.fingerprint)
  return fingerprint_.GetNoArena();
}
inline void CareMap_PartitionInfo::set_fingerprint(const std::string& value) {
  
  fingerprint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:recovery_update_verifier.CareMap.PartitionInfo.fingerprint)
}
inline void CareMap_PartitionInfo::set_fingerprint(std::string&& value) {
  
  fingerprint_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:recovery_update_verifier.CareMap.PartitionInfo.fingerprint)
}
inline void CareMap_PartitionInfo::set_fingerprint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fingerprint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:recovery_update_verifier.CareMap.PartitionInfo.fingerprint)
}
inline void CareMap_PartitionInfo::set_fingerprint(const char* value, size_t size) {
  
  fingerprint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:recovery_update_verifier.CareMap.PartitionInfo.fingerprint)
}
inline std::string* CareMap_PartitionInfo::mutable_fingerprint() {
  
  // @@protoc_insertion_point(field_mutable:recovery_update_verifier.CareMap.PartitionInfo.fingerprint)
  return fingerprint_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CareMap_PartitionInfo::release_fingerprint() {
  // @@protoc_insertion_point(field_release:recovery_update_verifier.CareMap.PartitionInfo.fingerprint)
  
  return fingerprint_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CareMap_PartitionInfo::set_allocated_fingerprint(std::string* fingerprint) {
  if (fingerprint != nullptr) {
    
  } else {
    
  }
  fingerprint_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fingerprint);
  // @@protoc_insertion_point(field_set_allocated:recovery_update_verifier.CareMap.PartitionInfo.fingerprint)
}

// -------------------------------------------------------------------

// CareMap

// repeated .recovery_update_verifier.CareMap.PartitionInfo partitions = 1;
inline int CareMap::partitions_size() const {
  return partitions_.size();
}
inline void CareMap::clear_partitions() {
  partitions_.Clear();
}
inline ::recovery_update_verifier::CareMap_PartitionInfo* CareMap::mutable_partitions(int index) {
  // @@protoc_insertion_point(field_mutable:recovery_update_verifier.CareMap.partitions)
  return partitions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::recovery_update_verifier::CareMap_PartitionInfo >*
CareMap::mutable_partitions() {
  // @@protoc_insertion_point(field_mutable_list:recovery_update_verifier.CareMap.partitions)
  return &partitions_;
}
inline const ::recovery_update_verifier::CareMap_PartitionInfo& CareMap::partitions(int index) const {
  // @@protoc_insertion_point(field_get:recovery_update_verifier.CareMap.partitions)
  return partitions_.Get(index);
}
inline ::recovery_update_verifier::CareMap_PartitionInfo* CareMap::add_partitions() {
  // @@protoc_insertion_point(field_add:recovery_update_verifier.CareMap.partitions)
  return partitions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::recovery_update_verifier::CareMap_PartitionInfo >&
CareMap::partitions() const {
  // @@protoc_insertion_point(field_list:recovery_update_verifier.CareMap.partitions)
  return partitions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace recovery_update_verifier

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bootable_2frecovery_2fupdate_5fverifier_2fcare_5fmap_2eproto
