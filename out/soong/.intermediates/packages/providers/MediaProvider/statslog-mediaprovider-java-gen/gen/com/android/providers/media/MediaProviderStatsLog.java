// This file is autogenerated

package com.android.providers.media;


import android.os.Build;
import android.util.StatsEvent;
import android.util.StatsLog;


/**
 * Utility class for logging statistics events.
 */
public class MediaProviderStatsLog {
    // Constants for atom codes.

    /**
     * MediaProviderScanOccurred media_provider_scan_occurred<br>
     * Usage: StatsLog.write(StatsLog.MEDIA_PROVIDER_SCAN_OCCURRED, int volume_type, int reason, long item_count, float normalized_duration_millis, float normalized_insert_count, float normalized_update_count, float normalized_delete_count);<br>
     */
    public static final int MEDIA_PROVIDER_SCAN_OCCURRED = 233;

    /**
     * MediaContentDeleted media_content_deleted<br>
     * Usage: StatsLog.write(StatsLog.MEDIA_CONTENT_DELETED, int volume_type, int uid, int item_count);<br>
     */
    public static final int MEDIA_CONTENT_DELETED = 234;

    /**
     * MediaProviderPermissionRequested media_provider_permission_requested<br>
     * Usage: StatsLog.write(StatsLog.MEDIA_PROVIDER_PERMISSION_REQUESTED, int volume_type, int uid, int item_count, int result);<br>
     */
    public static final int MEDIA_PROVIDER_PERMISSION_REQUESTED = 235;

    /**
     * MediaProviderSchemaChanged media_provider_schema_changed<br>
     * Usage: StatsLog.write(StatsLog.MEDIA_PROVIDER_SCHEMA_CHANGED, int volume_type, int version_from, int version_to, long item_count, float normalized_duration_millis);<br>
     */
    public static final int MEDIA_PROVIDER_SCHEMA_CHANGED = 236;

    /**
     * MediaProviderIdleMaintenanceFinished media_provider_idle_maintenance_finished<br>
     * Usage: StatsLog.write(StatsLog.MEDIA_PROVIDER_IDLE_MAINTENANCE_FINISHED, int volume_type, long item_count, float normalized_duration_millis, float normalized_stale_thumbnails, float normalized_expired_media);<br>
     */
    public static final int MEDIA_PROVIDER_IDLE_MAINTENANCE_FINISHED = 237;

    /**
     * TranscodingData transcoding_data<br>
     * Usage: StatsLog.write(StatsLog.TRANSCODING_DATA, java.lang.String requestor_package, int access_type, long file_size_bytes, int transcode_result, long transcode_duration_millis, long file_duration_millis, long file_framerate_fps, int access_reason, long width, long height, boolean hit_anr, int failure_cause, long transcoding_service_error_code);<br>
     */
    public static final int TRANSCODING_DATA = 330;

    /**
     * GeneralExternalStorageAccessStats general_external_storage_access_stats<br>
     * Usage: StatsLog.write(StatsLog.GENERAL_EXTERNAL_STORAGE_ACCESS_STATS, int uid, int total_accesses, int file_path_accesses, int secondary_storage_accesses, byte[] mime_types_accessed);<br>
     */
    public static final int GENERAL_EXTERNAL_STORAGE_ACCESS_STATS = 10085;

    // Constants for enum values.

    // Values for MediaProviderScanOccurred.volume_type
    public static final int MEDIA_PROVIDER_SCAN_OCCURRED__VOLUME_TYPE__UNKNOWN = 0;
    public static final int MEDIA_PROVIDER_SCAN_OCCURRED__VOLUME_TYPE__INTERNAL = 1;
    public static final int MEDIA_PROVIDER_SCAN_OCCURRED__VOLUME_TYPE__EXTERNAL_PRIMARY = 2;
    public static final int MEDIA_PROVIDER_SCAN_OCCURRED__VOLUME_TYPE__EXTERNAL_OTHER = 3;

    // Values for MediaProviderScanOccurred.reason
    public static final int MEDIA_PROVIDER_SCAN_OCCURRED__REASON__UNKNOWN = 0;
    public static final int MEDIA_PROVIDER_SCAN_OCCURRED__REASON__MOUNTED = 1;
    public static final int MEDIA_PROVIDER_SCAN_OCCURRED__REASON__DEMAND = 2;
    public static final int MEDIA_PROVIDER_SCAN_OCCURRED__REASON__IDLE = 3;

    // Values for MediaContentDeleted.volume_type
    public static final int MEDIA_CONTENT_DELETED__VOLUME_TYPE__UNKNOWN = 0;
    public static final int MEDIA_CONTENT_DELETED__VOLUME_TYPE__INTERNAL = 1;
    public static final int MEDIA_CONTENT_DELETED__VOLUME_TYPE__EXTERNAL_PRIMARY = 2;
    public static final int MEDIA_CONTENT_DELETED__VOLUME_TYPE__EXTERNAL_OTHER = 3;

    // Values for MediaProviderPermissionRequested.volume_type
    public static final int MEDIA_PROVIDER_PERMISSION_REQUESTED__VOLUME_TYPE__UNKNOWN = 0;
    public static final int MEDIA_PROVIDER_PERMISSION_REQUESTED__VOLUME_TYPE__INTERNAL = 1;
    public static final int MEDIA_PROVIDER_PERMISSION_REQUESTED__VOLUME_TYPE__EXTERNAL_PRIMARY = 2;
    public static final int MEDIA_PROVIDER_PERMISSION_REQUESTED__VOLUME_TYPE__EXTERNAL_OTHER = 3;

    // Values for MediaProviderPermissionRequested.result
    public static final int MEDIA_PROVIDER_PERMISSION_REQUESTED__RESULT__UNKNOWN = 0;
    public static final int MEDIA_PROVIDER_PERMISSION_REQUESTED__RESULT__USER_GRANTED = 1;
    public static final int MEDIA_PROVIDER_PERMISSION_REQUESTED__RESULT__AUTO_GRANTED = 2;
    public static final int MEDIA_PROVIDER_PERMISSION_REQUESTED__RESULT__USER_DENIED = 3;
    public static final int MEDIA_PROVIDER_PERMISSION_REQUESTED__RESULT__USER_DENIED_WITH_PREJUDICE = 4;
    public static final int MEDIA_PROVIDER_PERMISSION_REQUESTED__RESULT__AUTO_DENIED = 5;

    // Values for MediaProviderSchemaChanged.volume_type
    public static final int MEDIA_PROVIDER_SCHEMA_CHANGED__VOLUME_TYPE__UNKNOWN = 0;
    public static final int MEDIA_PROVIDER_SCHEMA_CHANGED__VOLUME_TYPE__INTERNAL = 1;
    public static final int MEDIA_PROVIDER_SCHEMA_CHANGED__VOLUME_TYPE__EXTERNAL_PRIMARY = 2;
    public static final int MEDIA_PROVIDER_SCHEMA_CHANGED__VOLUME_TYPE__EXTERNAL_OTHER = 3;

    // Values for MediaProviderIdleMaintenanceFinished.volume_type
    public static final int MEDIA_PROVIDER_IDLE_MAINTENANCE_FINISHED__VOLUME_TYPE__UNKNOWN = 0;
    public static final int MEDIA_PROVIDER_IDLE_MAINTENANCE_FINISHED__VOLUME_TYPE__INTERNAL = 1;
    public static final int MEDIA_PROVIDER_IDLE_MAINTENANCE_FINISHED__VOLUME_TYPE__EXTERNAL_PRIMARY = 2;
    public static final int MEDIA_PROVIDER_IDLE_MAINTENANCE_FINISHED__VOLUME_TYPE__EXTERNAL_OTHER = 3;

    // Values for TranscodingData.access_type
    public static final int TRANSCODING_DATA__ACCESS_TYPE__HEVC_WRITE = 1;
    public static final int TRANSCODING_DATA__ACCESS_TYPE__READ_DIRECT = 2;
    public static final int TRANSCODING_DATA__ACCESS_TYPE__READ_CACHE = 3;
    public static final int TRANSCODING_DATA__ACCESS_TYPE__READ_TRANSCODE = 4;
    public static final int TRANSCODING_DATA__ACCESS_TYPE__WRITE_CACHE = 5;
    public static final int TRANSCODING_DATA__ACCESS_TYPE__AVC_WRITE = 6;

    // Values for TranscodingData.transcode_result
    public static final int TRANSCODING_DATA__TRANSCODE_RESULT__SUCCESS = 0;
    public static final int TRANSCODING_DATA__TRANSCODE_RESULT__FAIL = 1;
    public static final int TRANSCODING_DATA__TRANSCODE_RESULT__UNDEFINED = 2;

    // Values for TranscodingData.access_reason
    public static final int TRANSCODING_DATA__ACCESS_REASON__UNKNOWN = 0;
    public static final int TRANSCODING_DATA__ACCESS_REASON__SYSTEM_DEFAULT = 1;
    public static final int TRANSCODING_DATA__ACCESS_REASON__SYSTEM_CONFIG = 2;
    public static final int TRANSCODING_DATA__ACCESS_REASON__APP_MANIFEST = 3;
    public static final int TRANSCODING_DATA__ACCESS_REASON__APP_COMPAT = 4;
    public static final int TRANSCODING_DATA__ACCESS_REASON__APP_EXTRA = 5;

    // Values for TranscodingData.failure_cause
    public static final int TRANSCODING_DATA__FAILURE_CAUSE__CAUSE_UNKNOWN = 0;
    public static final int TRANSCODING_DATA__FAILURE_CAUSE__TRANSCODING_SERVICE_ERROR = 1;
    public static final int TRANSCODING_DATA__FAILURE_CAUSE__TRANSCODING_CLIENT_TIMEOUT = 2;
    public static final int TRANSCODING_DATA__FAILURE_CAUSE__TRANSCODING_SESSION_CANCELED = 3;

    // Annotation constants.
    public static final byte ANNOTATION_ID_IS_UID =
            Build.VERSION.SDK_INT <= Build.VERSION_CODES.R ?
            1 : StatsLog.ANNOTATION_ID_IS_UID;

    public static final byte ANNOTATION_ID_TRUNCATE_TIMESTAMP =
            Build.VERSION.SDK_INT <= Build.VERSION_CODES.R ?
            2 : StatsLog.ANNOTATION_ID_TRUNCATE_TIMESTAMP;

    public static final byte ANNOTATION_ID_PRIMARY_FIELD =
            Build.VERSION.SDK_INT <= Build.VERSION_CODES.R ?
            3 : StatsLog.ANNOTATION_ID_PRIMARY_FIELD;

    public static final byte ANNOTATION_ID_EXCLUSIVE_STATE =
            Build.VERSION.SDK_INT <= Build.VERSION_CODES.R ?
            4 : StatsLog.ANNOTATION_ID_EXCLUSIVE_STATE;

    public static final byte ANNOTATION_ID_PRIMARY_FIELD_FIRST_UID =
            Build.VERSION.SDK_INT <= Build.VERSION_CODES.R ?
            5 : StatsLog.ANNOTATION_ID_PRIMARY_FIELD_FIRST_UID;

    public static final byte ANNOTATION_ID_TRIGGER_STATE_RESET =
            Build.VERSION.SDK_INT <= Build.VERSION_CODES.R ?
            7 : StatsLog.ANNOTATION_ID_TRIGGER_STATE_RESET;

    public static final byte ANNOTATION_ID_STATE_NESTED =
            Build.VERSION.SDK_INT <= Build.VERSION_CODES.R ?
            8 : StatsLog.ANNOTATION_ID_STATE_NESTED;


    // Write methods
    public static void write(int code, int arg1, int arg2, int arg3) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        if (MEDIA_CONTENT_DELETED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeInt(arg3);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, int arg2, int arg3, int arg4) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        if (MEDIA_PROVIDER_PERMISSION_REQUESTED == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeInt(arg3);
        builder.writeInt(arg4);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, int arg2, int arg3, long arg4, float arg5) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        builder.writeInt(arg3);
        builder.writeLong(arg4);
        builder.writeFloat(arg5);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, int arg2, long arg3, float arg4, float arg5, float arg6, float arg7) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeInt(arg2);
        builder.writeLong(arg3);
        builder.writeFloat(arg4);
        builder.writeFloat(arg5);
        builder.writeFloat(arg6);
        builder.writeFloat(arg7);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, int arg1, long arg2, float arg3, float arg4, float arg5) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        builder.writeLong(arg2);
        builder.writeFloat(arg3);
        builder.writeFloat(arg4);
        builder.writeFloat(arg5);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static void write(int code, java.lang.String arg1, int arg2, long arg3, int arg4, long arg5, long arg6, long arg7, int arg8, long arg9, long arg10, boolean arg11, int arg12, long arg13) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeString(arg1);
        builder.writeInt(arg2);
        builder.writeLong(arg3);
        builder.writeInt(arg4);
        builder.writeLong(arg5);
        builder.writeLong(arg6);
        builder.writeLong(arg7);
        builder.writeInt(arg8);
        builder.writeLong(arg9);
        builder.writeLong(arg10);
        builder.writeBoolean(arg11);
        builder.writeInt(arg12);
        builder.writeLong(arg13);

        builder.usePooledBuffer();
        StatsLog.write(builder.build());
    }

    public static StatsEvent buildStatsEvent(int code, int arg1, int arg2, int arg3, int arg4, byte[] arg5) {
        final StatsEvent.Builder builder = StatsEvent.newBuilder();
        builder.setAtomId(code);
        builder.writeInt(arg1);
        if (GENERAL_EXTERNAL_STORAGE_ACCESS_STATS == code) {
            builder.addBooleanAnnotation(ANNOTATION_ID_IS_UID, true);
        }
        builder.writeInt(arg2);
        builder.writeInt(arg3);
        builder.writeInt(arg4);
        builder.writeByteArray(null == arg5 ? new byte[0] : arg5);

        return builder.build();
    }

}
