// This file is autogenerated

package com.android.documentsui;


import android.os.Build;
import android.os.SystemClock;
import android.util.StatsEvent;
import android.util.StatsLog;


/**
 * Utility class for logging statistics events.
 */
public class DocumentsStatsLog {
    // Constants for atom codes.

    /**
     * DocsUIFileOperationCanceledReported docs_ui_file_op_canceled<br>
     * Usage: StatsLog.write(StatsLog.DOCS_UI_FILE_OP_CANCELED, int file_op);<br>
     */
    public static final int DOCS_UI_FILE_OP_CANCELED = 104;

    /**
     * DocsUIFileOperationCopyMoveModeReported docs_ui_file_op_copy_move_mode_reported<br>
     * Usage: StatsLog.write(StatsLog.DOCS_UI_FILE_OP_COPY_MOVE_MODE_REPORTED, int file_op, int mode);<br>
     */
    public static final int DOCS_UI_FILE_OP_COPY_MOVE_MODE_REPORTED = 105;

    /**
     * DocsUIFileOperationFailureReported docs_ui_file_op_failure<br>
     * Usage: StatsLog.write(StatsLog.DOCS_UI_FILE_OP_FAILURE, int authority, int sub_op);<br>
     */
    public static final int DOCS_UI_FILE_OP_FAILURE = 106;

    /**
     * DocsUIFileOperationReported docs_ui_provider_file_op<br>
     * Usage: StatsLog.write(StatsLog.DOCS_UI_PROVIDER_FILE_OP, int provider, int file_op);<br>
     */
    public static final int DOCS_UI_PROVIDER_FILE_OP = 107;

    /**
     * DocsUIInvalidScopedAccessRequestReported docs_ui_invalid_scoped_access_request<br>
     * Usage: StatsLog.write(StatsLog.DOCS_UI_INVALID_SCOPED_ACCESS_REQUEST, int type);<br>
     */
    public static final int DOCS_UI_INVALID_SCOPED_ACCESS_REQUEST = 108;

    /**
     * DocsUILaunchReported docs_ui_launch_reported<br>
     * Usage: StatsLog.write(StatsLog.DOCS_UI_LAUNCH_REPORTED, int launch_action, boolean has_initial_uri, int mime_type, int initial_root);<br>
     */
    public static final int DOCS_UI_LAUNCH_REPORTED = 109;

    /**
     * DocsUIRootVisitedReported docs_ui_root_visited<br>
     * Usage: StatsLog.write(StatsLog.DOCS_UI_ROOT_VISITED, int scope, int root);<br>
     */
    public static final int DOCS_UI_ROOT_VISITED = 110;

    /**
     * DocsUIStartupMsReported docs_ui_startup_ms<br>
     * Usage: StatsLog.write(StatsLog.DOCS_UI_STARTUP_MS, int startup_millis);<br>
     */
    public static final int DOCS_UI_STARTUP_MS = 111;

    /**
     * DocsUIUserActionReported docs_ui_user_action_reported<br>
     * Usage: StatsLog.write(StatsLog.DOCS_UI_USER_ACTION_REPORTED, int action);<br>
     */
    public static final int DOCS_UI_USER_ACTION_REPORTED = 112;

    /**
     * DocsUIPickerLaunchedFromReported docs_ui_picker_launched_from_reported<br>
     * Usage: StatsLog.write(StatsLog.DOCS_UI_PICKER_LAUNCHED_FROM_REPORTED, java.lang.String package_name);<br>
     */
    public static final int DOCS_UI_PICKER_LAUNCHED_FROM_REPORTED = 117;

    /**
     * DocsUIPickResultReported docs_ui_pick_result_reported<br>
     * Usage: StatsLog.write(StatsLog.DOCS_UI_PICK_RESULT_REPORTED, int total_action_count, long duration_millis, int file_count, boolean is_searching, int picked_from, int mime_type, int repeatedly_pick_times);<br>
     */
    public static final int DOCS_UI_PICK_RESULT_REPORTED = 118;

    /**
     * DocsUISearchModeReported docs_ui_search_mode_reported<br>
     * Usage: StatsLog.write(StatsLog.DOCS_UI_SEARCH_MODE_REPORTED, int search_mode);<br>
     */
    public static final int DOCS_UI_SEARCH_MODE_REPORTED = 119;

    /**
     * DocsUISearchTypeReported docs_ui_search_type_reported<br>
     * Usage: StatsLog.write(StatsLog.DOCS_UI_SEARCH_TYPE_REPORTED, int search_type);<br>
     */
    public static final int DOCS_UI_SEARCH_TYPE_REPORTED = 120;

    /**
     * DocsUIDragAndDropReported docs_ui_drag_and_drop_reported<br>
     * Usage: StatsLog.write(StatsLog.DOCS_UI_DRAG_AND_DROP_REPORTED, boolean drag_initiated_from_docsui);<br>
     */
    public static final int DOCS_UI_DRAG_AND_DROP_REPORTED = 268;

    // Constants for enum values.

    // Values for DocsUIFileOperationCanceledReported.file_op
    public static final int DOCS_UIFILE_OPERATION_CANCELED_REPORTED__FILE_OP__OP_UNKNOWN = 0;
    public static final int DOCS_UIFILE_OPERATION_CANCELED_REPORTED__FILE_OP__OP_OTHER = 1;
    public static final int DOCS_UIFILE_OPERATION_CANCELED_REPORTED__FILE_OP__OP_COPY = 2;
    public static final int DOCS_UIFILE_OPERATION_CANCELED_REPORTED__FILE_OP__OP_COPY_INTRA_PROVIDER = 3;
    public static final int DOCS_UIFILE_OPERATION_CANCELED_REPORTED__FILE_OP__OP_COPY_SYSTEM_PROVIDER = 4;
    public static final int DOCS_UIFILE_OPERATION_CANCELED_REPORTED__FILE_OP__OP_COPY_EXTERNAL_PROVIDER = 5;
    public static final int DOCS_UIFILE_OPERATION_CANCELED_REPORTED__FILE_OP__OP_MOVE = 6;
    public static final int DOCS_UIFILE_OPERATION_CANCELED_REPORTED__FILE_OP__OP_MOVE_INTRA_PROVIDER = 7;
    public static final int DOCS_UIFILE_OPERATION_CANCELED_REPORTED__FILE_OP__OP_MOVE_SYSTEM_PROVIDER = 8;
    public static final int DOCS_UIFILE_OPERATION_CANCELED_REPORTED__FILE_OP__OP_MOVE_EXTERNAL_PROVIDER = 9;
    public static final int DOCS_UIFILE_OPERATION_CANCELED_REPORTED__FILE_OP__OP_DELETE = 10;
    public static final int DOCS_UIFILE_OPERATION_CANCELED_REPORTED__FILE_OP__OP_RENAME = 11;
    public static final int DOCS_UIFILE_OPERATION_CANCELED_REPORTED__FILE_OP__OP_CREATE_DIR = 12;
    public static final int DOCS_UIFILE_OPERATION_CANCELED_REPORTED__FILE_OP__OP_OTHER_ERROR = 13;
    public static final int DOCS_UIFILE_OPERATION_CANCELED_REPORTED__FILE_OP__OP_DELETE_ERROR = 14;
    public static final int DOCS_UIFILE_OPERATION_CANCELED_REPORTED__FILE_OP__OP_MOVE_ERROR = 15;
    public static final int DOCS_UIFILE_OPERATION_CANCELED_REPORTED__FILE_OP__OP_COPY_ERROR = 16;
    public static final int DOCS_UIFILE_OPERATION_CANCELED_REPORTED__FILE_OP__OP_RENAME_ERROR = 17;
    public static final int DOCS_UIFILE_OPERATION_CANCELED_REPORTED__FILE_OP__OP_CREATE_DIR_ERROR = 18;
    public static final int DOCS_UIFILE_OPERATION_CANCELED_REPORTED__FILE_OP__OP_COMPRESS_INTRA_PROVIDER = 19;
    public static final int DOCS_UIFILE_OPERATION_CANCELED_REPORTED__FILE_OP__OP_COMPRESS_SYSTEM_PROVIDER = 20;
    public static final int DOCS_UIFILE_OPERATION_CANCELED_REPORTED__FILE_OP__OP_COMPRESS_EXTERNAL_PROVIDER = 21;
    public static final int DOCS_UIFILE_OPERATION_CANCELED_REPORTED__FILE_OP__OP_EXTRACT_INTRA_PROVIDER = 22;
    public static final int DOCS_UIFILE_OPERATION_CANCELED_REPORTED__FILE_OP__OP_EXTRACT_SYSTEM_PROVIDER = 23;
    public static final int DOCS_UIFILE_OPERATION_CANCELED_REPORTED__FILE_OP__OP_EXTRACT_EXTERNAL_PROVIDER = 24;
    public static final int DOCS_UIFILE_OPERATION_CANCELED_REPORTED__FILE_OP__OP_COMPRESS_ERROR = 25;
    public static final int DOCS_UIFILE_OPERATION_CANCELED_REPORTED__FILE_OP__OP_EXTRACT_ERROR = 26;

    // Values for DocsUIFileOperationCopyMoveModeReported.file_op
    public static final int DOCS_UIFILE_OPERATION_COPY_MOVE_MODE_REPORTED__FILE_OP__OP_UNKNOWN = 0;
    public static final int DOCS_UIFILE_OPERATION_COPY_MOVE_MODE_REPORTED__FILE_OP__OP_OTHER = 1;
    public static final int DOCS_UIFILE_OPERATION_COPY_MOVE_MODE_REPORTED__FILE_OP__OP_COPY = 2;
    public static final int DOCS_UIFILE_OPERATION_COPY_MOVE_MODE_REPORTED__FILE_OP__OP_COPY_INTRA_PROVIDER = 3;
    public static final int DOCS_UIFILE_OPERATION_COPY_MOVE_MODE_REPORTED__FILE_OP__OP_COPY_SYSTEM_PROVIDER = 4;
    public static final int DOCS_UIFILE_OPERATION_COPY_MOVE_MODE_REPORTED__FILE_OP__OP_COPY_EXTERNAL_PROVIDER = 5;
    public static final int DOCS_UIFILE_OPERATION_COPY_MOVE_MODE_REPORTED__FILE_OP__OP_MOVE = 6;
    public static final int DOCS_UIFILE_OPERATION_COPY_MOVE_MODE_REPORTED__FILE_OP__OP_MOVE_INTRA_PROVIDER = 7;
    public static final int DOCS_UIFILE_OPERATION_COPY_MOVE_MODE_REPORTED__FILE_OP__OP_MOVE_SYSTEM_PROVIDER = 8;
    public static final int DOCS_UIFILE_OPERATION_COPY_MOVE_MODE_REPORTED__FILE_OP__OP_MOVE_EXTERNAL_PROVIDER = 9;
    public static final int DOCS_UIFILE_OPERATION_COPY_MOVE_MODE_REPORTED__FILE_OP__OP_DELETE = 10;
    public static final int DOCS_UIFILE_OPERATION_COPY_MOVE_MODE_REPORTED__FILE_OP__OP_RENAME = 11;
    public static final int DOCS_UIFILE_OPERATION_COPY_MOVE_MODE_REPORTED__FILE_OP__OP_CREATE_DIR = 12;
    public static final int DOCS_UIFILE_OPERATION_COPY_MOVE_MODE_REPORTED__FILE_OP__OP_OTHER_ERROR = 13;
    public static final int DOCS_UIFILE_OPERATION_COPY_MOVE_MODE_REPORTED__FILE_OP__OP_DELETE_ERROR = 14;
    public static final int DOCS_UIFILE_OPERATION_COPY_MOVE_MODE_REPORTED__FILE_OP__OP_MOVE_ERROR = 15;
    public static final int DOCS_UIFILE_OPERATION_COPY_MOVE_MODE_REPORTED__FILE_OP__OP_COPY_ERROR = 16;
    public static final int DOCS_UIFILE_OPERATION_COPY_MOVE_MODE_REPORTED__FILE_OP__OP_RENAME_ERROR = 17;
    public static final int DOCS_UIFILE_OPERATION_COPY_MOVE_MODE_REPORTED__FILE_OP__OP_CREATE_DIR_ERROR = 18;
    public static final int DOCS_UIFILE_OPERATION_COPY_MOVE_MODE_REPORTED__FILE_OP__OP_COMPRESS_INTRA_PROVIDER = 19;
    public static final int DOCS_UIFILE_OPERATION_COPY_MOVE_MODE_REPORTED__FILE_OP__OP_COMPRESS_SYSTEM_PROVIDER = 20;
    public static final int DOCS_UIFILE_OPERATION_COPY_MOVE_MODE_REPORTED__FILE_OP__OP_COMPRESS_EXTERNAL_PROVIDER = 21;
    public static final int DOCS_UIFILE_OPERATION_COPY_MOVE_MODE_REPORTED__FILE_OP__OP_EXTRACT_INTRA_PROVIDER = 22;
    public static final int DOCS_UIFILE_OPERATION_COPY_MOVE_MODE_REPORTED__FILE_OP__OP_EXTRACT_SYSTEM_PROVIDER = 23;
    public static final int DOCS_UIFILE_OPERATION_COPY_MOVE_MODE_REPORTED__FILE_OP__OP_EXTRACT_EXTERNAL_PROVIDER = 24;
    public static final int DOCS_UIFILE_OPERATION_COPY_MOVE_MODE_REPORTED__FILE_OP__OP_COMPRESS_ERROR = 25;
    public static final int DOCS_UIFILE_OPERATION_COPY_MOVE_MODE_REPORTED__FILE_OP__OP_EXTRACT_ERROR = 26;

    // Values for DocsUIFileOperationCopyMoveModeReported.mode
    public static final int DOCS_UIFILE_OPERATION_COPY_MOVE_MODE_REPORTED__MODE__MODE_UNKNOWN = 0;
    public static final int DOCS_UIFILE_OPERATION_COPY_MOVE_MODE_REPORTED__MODE__MODE_PROVIDER = 1;
    public static final int DOCS_UIFILE_OPERATION_COPY_MOVE_MODE_REPORTED__MODE__MODE_CONVERTED = 2;
    public static final int DOCS_UIFILE_OPERATION_COPY_MOVE_MODE_REPORTED__MODE__MODE_CONVENTIONAL = 3;

    // Values for DocsUIFileOperationFailureReported.authority
    public static final int DOCS_UIFILE_OPERATION_FAILURE_REPORTED__AUTHORITY__AUTH_UNKNOWN = 0;
    public static final int DOCS_UIFILE_OPERATION_FAILURE_REPORTED__AUTHORITY__AUTH_OTHER = 1;
    public static final int DOCS_UIFILE_OPERATION_FAILURE_REPORTED__AUTHORITY__AUTH_MEDIA = 2;
    public static final int DOCS_UIFILE_OPERATION_FAILURE_REPORTED__AUTHORITY__AUTH_STORAGE_INTERNAL = 3;
    public static final int DOCS_UIFILE_OPERATION_FAILURE_REPORTED__AUTHORITY__AUTH_STORAGE_EXTERNAL = 4;
    public static final int DOCS_UIFILE_OPERATION_FAILURE_REPORTED__AUTHORITY__AUTH_DOWNLOADS = 5;
    public static final int DOCS_UIFILE_OPERATION_FAILURE_REPORTED__AUTHORITY__AUTH_MTP = 6;

    // Values for DocsUIFileOperationFailureReported.sub_op
    public static final int DOCS_UIFILE_OPERATION_FAILURE_REPORTED__SUB_OP__SUB_OP_UNKNOWN = 0;
    public static final int DOCS_UIFILE_OPERATION_FAILURE_REPORTED__SUB_OP__SUB_OP_QUERY_DOC = 1;
    public static final int DOCS_UIFILE_OPERATION_FAILURE_REPORTED__SUB_OP__SUB_OP_QUERY_CHILD = 2;
    public static final int DOCS_UIFILE_OPERATION_FAILURE_REPORTED__SUB_OP__SUB_OP_OPEN_FILE = 3;
    public static final int DOCS_UIFILE_OPERATION_FAILURE_REPORTED__SUB_OP__SUB_OP_READ_FILE = 4;
    public static final int DOCS_UIFILE_OPERATION_FAILURE_REPORTED__SUB_OP__SUB_OP_CREATE_DOC = 5;
    public static final int DOCS_UIFILE_OPERATION_FAILURE_REPORTED__SUB_OP__SUB_OP_WRITE_FILE = 6;
    public static final int DOCS_UIFILE_OPERATION_FAILURE_REPORTED__SUB_OP__SUB_OP_DELETE_DOC = 7;
    public static final int DOCS_UIFILE_OPERATION_FAILURE_REPORTED__SUB_OP__SUB_OP_OBTAIN_STREAM_TYPE = 8;
    public static final int DOCS_UIFILE_OPERATION_FAILURE_REPORTED__SUB_OP__SUB_OP_QUICK_MOVE = 9;
    public static final int DOCS_UIFILE_OPERATION_FAILURE_REPORTED__SUB_OP__SUB_OP_QUICK_COPY = 10;

    // Values for DocsUIFileOperationReported.provider
    public static final int DOCS_UIFILE_OPERATION_REPORTED__PROVIDER__PROVIDER_UNKNOWN = 0;
    public static final int DOCS_UIFILE_OPERATION_REPORTED__PROVIDER__PROVIDER_SYSTEM = 1;
    public static final int DOCS_UIFILE_OPERATION_REPORTED__PROVIDER__PROVIDER_EXTERNAL = 2;

    // Values for DocsUIFileOperationReported.file_op
    public static final int DOCS_UIFILE_OPERATION_REPORTED__FILE_OP__OP_UNKNOWN = 0;
    public static final int DOCS_UIFILE_OPERATION_REPORTED__FILE_OP__OP_OTHER = 1;
    public static final int DOCS_UIFILE_OPERATION_REPORTED__FILE_OP__OP_COPY = 2;
    public static final int DOCS_UIFILE_OPERATION_REPORTED__FILE_OP__OP_COPY_INTRA_PROVIDER = 3;
    public static final int DOCS_UIFILE_OPERATION_REPORTED__FILE_OP__OP_COPY_SYSTEM_PROVIDER = 4;
    public static final int DOCS_UIFILE_OPERATION_REPORTED__FILE_OP__OP_COPY_EXTERNAL_PROVIDER = 5;
    public static final int DOCS_UIFILE_OPERATION_REPORTED__FILE_OP__OP_MOVE = 6;
    public static final int DOCS_UIFILE_OPERATION_REPORTED__FILE_OP__OP_MOVE_INTRA_PROVIDER = 7;
    public static final int DOCS_UIFILE_OPERATION_REPORTED__FILE_OP__OP_MOVE_SYSTEM_PROVIDER = 8;
    public static final int DOCS_UIFILE_OPERATION_REPORTED__FILE_OP__OP_MOVE_EXTERNAL_PROVIDER = 9;
    public static final int DOCS_UIFILE_OPERATION_REPORTED__FILE_OP__OP_DELETE = 10;
    public static final int DOCS_UIFILE_OPERATION_REPORTED__FILE_OP__OP_RENAME = 11;
    public static final int DOCS_UIFILE_OPERATION_REPORTED__FILE_OP__OP_CREATE_DIR = 12;
    public static final int DOCS_UIFILE_OPERATION_REPORTED__FILE_OP__OP_OTHER_ERROR = 13;
    public static final int DOCS_UIFILE_OPERATION_REPORTED__FILE_OP__OP_DELETE_ERROR = 14;
    public static final int DOCS_UIFILE_OPERATION_REPORTED__FILE_OP__OP_MOVE_ERROR = 15;
    public static final int DOCS_UIFILE_OPERATION_REPORTED__FILE_OP__OP_COPY_ERROR = 16;
    public static final int DOCS_UIFILE_OPERATION_REPORTED__FILE_OP__OP_RENAME_ERROR = 17;
    public static final int DOCS_UIFILE_OPERATION_REPORTED__FILE_OP__OP_CREATE_DIR_ERROR = 18;
    public static final int DOCS_UIFILE_OPERATION_REPORTED__FILE_OP__OP_COMPRESS_INTRA_PROVIDER = 19;
    public static final int DOCS_UIFILE_OPERATION_REPORTED__FILE_OP__OP_COMPRESS_SYSTEM_PROVIDER = 20;
    public static final int DOCS_UIFILE_OPERATION_REPORTED__FILE_OP__OP_COMPRESS_EXTERNAL_PROVIDER = 21;
    public static final int DOCS_UIFILE_OPERATION_REPORTED__FILE_OP__OP_EXTRACT_INTRA_PROVIDER = 22;
    public static final int DOCS_UIFILE_OPERATION_REPORTED__FILE_OP__OP_EXTRACT_SYSTEM_PROVIDER = 23;
    public static final int DOCS_UIFILE_OPERATION_REPORTED__FILE_OP__OP_EXTRACT_EXTERNAL_PROVIDER = 24;
    public static final int DOCS_UIFILE_OPERATION_REPORTED__FILE_OP__OP_COMPRESS_ERROR = 25;
    public static final int DOCS_UIFILE_OPERATION_REPORTED__FILE_OP__OP_EXTRACT_ERROR = 26;

    // Values for DocsUIInvalidScopedAccessRequestReported.type
    public static final int DOCS_UIINVALID_SCOPED_ACCESS_REQUEST_REPORTED__TYPE__SCOPED_DIR_ACCESS_UNKNOWN = 0;
    public static final int DOCS_UIINVALID_SCOPED_ACCESS_REQUEST_REPORTED__TYPE__SCOPED_DIR_ACCESS_INVALID_ARGUMENTS = 1;
    public static final int DOCS_UIINVALID_SCOPED_ACCESS_REQUEST_REPORTED__TYPE__SCOPED_DIR_ACCESS_INVALID_DIRECTORY = 2;
    public static final int DOCS_UIINVALID_SCOPED_ACCESS_REQUEST_REPORTED__TYPE__SCOPED_DIR_ACCESS_ERROR = 3;
    public static final int DOCS_UIINVALID_SCOPED_ACCESS_REQUEST_REPORTED__TYPE__SCOPED_DIR_ACCESS_DEPRECATED = 4;

    // Values for DocsUILaunchReported.launch_action
    public static final int DOCS_UILAUNCH_REPORTED__LAUNCH_ACTION__UNKNOWN = 0;
    public static final int DOCS_UILAUNCH_REPORTED__LAUNCH_ACTION__OPEN = 1;
    public static final int DOCS_UILAUNCH_REPORTED__LAUNCH_ACTION__CREATE = 2;
    public static final int DOCS_UILAUNCH_REPORTED__LAUNCH_ACTION__GET_CONTENT = 3;
    public static final int DOCS_UILAUNCH_REPORTED__LAUNCH_ACTION__OPEN_TREE = 4;
    public static final int DOCS_UILAUNCH_REPORTED__LAUNCH_ACTION__PICK_COPY_DEST = 5;
    public static final int DOCS_UILAUNCH_REPORTED__LAUNCH_ACTION__BROWSE = 6;
    public static final int DOCS_UILAUNCH_REPORTED__LAUNCH_ACTION__OTHER = 7;

    // Values for DocsUILaunchReported.mime_type
    public static final int DOCS_UILAUNCH_REPORTED__MIME_TYPE__MIME_UNKNOWN = 0;
    public static final int DOCS_UILAUNCH_REPORTED__MIME_TYPE__MIME_NONE = 1;
    public static final int DOCS_UILAUNCH_REPORTED__MIME_TYPE__MIME_ANY = 2;
    public static final int DOCS_UILAUNCH_REPORTED__MIME_TYPE__MIME_APPLICATION = 3;
    public static final int DOCS_UILAUNCH_REPORTED__MIME_TYPE__MIME_AUDIO = 4;
    public static final int DOCS_UILAUNCH_REPORTED__MIME_TYPE__MIME_IMAGE = 5;
    public static final int DOCS_UILAUNCH_REPORTED__MIME_TYPE__MIME_MESSAGE = 6;
    public static final int DOCS_UILAUNCH_REPORTED__MIME_TYPE__MIME_MULTIPART = 7;
    public static final int DOCS_UILAUNCH_REPORTED__MIME_TYPE__MIME_TEXT = 8;
    public static final int DOCS_UILAUNCH_REPORTED__MIME_TYPE__MIME_VIDEO = 9;
    public static final int DOCS_UILAUNCH_REPORTED__MIME_TYPE__MIME_OTHER = 10;

    // Values for DocsUILaunchReported.initial_root
    public static final int DOCS_UILAUNCH_REPORTED__INITIAL_ROOT__ROOT_UNKNOWN = 0;
    public static final int DOCS_UILAUNCH_REPORTED__INITIAL_ROOT__ROOT_NONE = 1;
    public static final int DOCS_UILAUNCH_REPORTED__INITIAL_ROOT__ROOT_OTHER_DOCS_PROVIDER = 2;
    public static final int DOCS_UILAUNCH_REPORTED__INITIAL_ROOT__ROOT_AUDIO = 3;
    public static final int DOCS_UILAUNCH_REPORTED__INITIAL_ROOT__ROOT_DEVICE_STORAGE = 4;
    public static final int DOCS_UILAUNCH_REPORTED__INITIAL_ROOT__ROOT_DOWNLOADS = 5;
    public static final int DOCS_UILAUNCH_REPORTED__INITIAL_ROOT__ROOT_HOME = 6;
    public static final int DOCS_UILAUNCH_REPORTED__INITIAL_ROOT__ROOT_IMAGES = 7;
    public static final int DOCS_UILAUNCH_REPORTED__INITIAL_ROOT__ROOT_RECENTS = 8;
    public static final int DOCS_UILAUNCH_REPORTED__INITIAL_ROOT__ROOT_VIDEOS = 9;
    public static final int DOCS_UILAUNCH_REPORTED__INITIAL_ROOT__ROOT_MTP = 10;
    public static final int DOCS_UILAUNCH_REPORTED__INITIAL_ROOT__ROOT_THIRD_PARTY_APP = 11;
    public static final int DOCS_UILAUNCH_REPORTED__INITIAL_ROOT__ROOT_DOCUMENTS = 12;

    // Values for DocsUIRootVisitedReported.scope
    public static final int DOCS_UIROOT_VISITED_REPORTED__SCOPE__SCOPE_UNKNOWN = 0;
    public static final int DOCS_UIROOT_VISITED_REPORTED__SCOPE__SCOPE_FILES = 1;
    public static final int DOCS_UIROOT_VISITED_REPORTED__SCOPE__SCOPE_PICKER = 2;

    // Values for DocsUIRootVisitedReported.root
    public static final int DOCS_UIROOT_VISITED_REPORTED__ROOT__ROOT_UNKNOWN = 0;
    public static final int DOCS_UIROOT_VISITED_REPORTED__ROOT__ROOT_NONE = 1;
    public static final int DOCS_UIROOT_VISITED_REPORTED__ROOT__ROOT_OTHER_DOCS_PROVIDER = 2;
    public static final int DOCS_UIROOT_VISITED_REPORTED__ROOT__ROOT_AUDIO = 3;
    public static final int DOCS_UIROOT_VISITED_REPORTED__ROOT__ROOT_DEVICE_STORAGE = 4;
    public static final int DOCS_UIROOT_VISITED_REPORTED__ROOT__ROOT_DOWNLOADS = 5;
    public static final int DOCS_UIROOT_VISITED_REPORTED__ROOT__ROOT_HOME = 6;
    public static final int DOCS_UIROOT_VISITED_REPORTED__ROOT__ROOT_IMAGES = 7;
    public static final int DOCS_UIROOT_VISITED_REPORTED__ROOT__ROOT_RECENTS = 8;
    public static final int DOCS_UIROOT_VISITED_REPORTED__ROOT__ROOT_VIDEOS = 9;
    public static final int DOCS_UIROOT_VISITED_REPORTED__ROOT__ROOT_MTP = 10;
    public static final int DOCS_UIROOT_VISITED_REPORTED__ROOT__ROOT_THIRD_PARTY_APP = 11;
    public static final int DOCS_UIROOT_VISITED_REPORTED__ROOT__ROOT_DOCUMENTS = 12;

    // Values for DocsUIUserActionReported.action
    public static final int DOCS_UIUSER_ACTION_REPORTED__ACTION__ACTION_UNKNOWN = 0;
    public static final int DOCS_UIUSER_ACTION_REPORTED__ACTION__ACTION_OTHER = 1;
    public static final int DOCS_UIUSER_ACTION_REPORTED__ACTION__ACTION_GRID = 2;
    public static final int DOCS_UIUSER_ACTION_REPORTED__ACTION__ACTION_LIST = 3;
    public static final int DOCS_UIUSER_ACTION_REPORTED__ACTION__ACTION_SORT_NAME = 4;
    public static final int DOCS_UIUSER_ACTION_REPORTED__ACTION__ACTION_SORT_DATE = 5;
    public static final int DOCS_UIUSER_ACTION_REPORTED__ACTION__ACTION_SORT_SIZE = 6;
    public static final int DOCS_UIUSER_ACTION_REPORTED__ACTION__ACTION_SORT_TYPE = 7;
    public static final int DOCS_UIUSER_ACTION_REPORTED__ACTION__ACTION_SEARCH = 8;
    public static final int DOCS_UIUSER_ACTION_REPORTED__ACTION__ACTION_SHOW_SIZE = 9;
    public static final int DOCS_UIUSER_ACTION_REPORTED__ACTION__ACTION_HIDE_SIZE = 10;
    public static final int DOCS_UIUSER_ACTION_REPORTED__ACTION__ACTION_SETTINGS = 11;
    public static final int DOCS_UIUSER_ACTION_REPORTED__ACTION__ACTION_COPY_TO = 12;
    public static final int DOCS_UIUSER_ACTION_REPORTED__ACTION__ACTION_MOVE_TO = 13;
    public static final int DOCS_UIUSER_ACTION_REPORTED__ACTION__ACTION_DELETE = 14;
    public static final int DOCS_UIUSER_ACTION_REPORTED__ACTION__ACTION_RENAME = 15;
    public static final int DOCS_UIUSER_ACTION_REPORTED__ACTION__ACTION_CREATE_DIR = 16;
    public static final int DOCS_UIUSER_ACTION_REPORTED__ACTION__ACTION_SELECT_ALL = 17;
    public static final int DOCS_UIUSER_ACTION_REPORTED__ACTION__ACTION_SHARE = 18;
    public static final int DOCS_UIUSER_ACTION_REPORTED__ACTION__ACTION_OPEN = 19;
    public static final int DOCS_UIUSER_ACTION_REPORTED__ACTION__ACTION_SHOW_ADVANCED = 20;
    public static final int DOCS_UIUSER_ACTION_REPORTED__ACTION__ACTION_HIDE_ADVANCED = 21;
    public static final int DOCS_UIUSER_ACTION_REPORTED__ACTION__ACTION_NEW_WINDOW = 22;
    public static final int DOCS_UIUSER_ACTION_REPORTED__ACTION__ACTION_PASTE_CLIPBOARD = 23;
    public static final int DOCS_UIUSER_ACTION_REPORTED__ACTION__ACTION_COPY_CLIPBOARD = 24;
    public static final int DOCS_UIUSER_ACTION_REPORTED__ACTION__ACTION_DRAG_N_DROP = 25;
    public static final int DOCS_UIUSER_ACTION_REPORTED__ACTION__ACTION_DRAG_N_DROP_MULTI_WINDOW = 26;
    public static final int DOCS_UIUSER_ACTION_REPORTED__ACTION__ACTION_CUT_CLIPBOARD = 27;
    public static final int DOCS_UIUSER_ACTION_REPORTED__ACTION__ACTION_COMPRESS = 28;
    public static final int DOCS_UIUSER_ACTION_REPORTED__ACTION__ACTION_EXTRACT_TO = 29;
    public static final int DOCS_UIUSER_ACTION_REPORTED__ACTION__ACTION_VIEW_IN_APPLICATION = 30;
    public static final int DOCS_UIUSER_ACTION_REPORTED__ACTION__ACTION_INSPECTOR = 31;
    public static final int DOCS_UIUSER_ACTION_REPORTED__ACTION__ACTION_SEARCH_CHIP = 32;
    public static final int DOCS_UIUSER_ACTION_REPORTED__ACTION__ACTION_SEARCH_HISTORY = 33;

    // Values for DocsUIPickResultReported.picked_from
    public static final int DOCS_UIPICK_RESULT_REPORTED__PICKED_FROM__ROOT_UNKNOWN = 0;
    public static final int DOCS_UIPICK_RESULT_REPORTED__PICKED_FROM__ROOT_NONE = 1;
    public static final int DOCS_UIPICK_RESULT_REPORTED__PICKED_FROM__ROOT_OTHER_DOCS_PROVIDER = 2;
    public static final int DOCS_UIPICK_RESULT_REPORTED__PICKED_FROM__ROOT_AUDIO = 3;
    public static final int DOCS_UIPICK_RESULT_REPORTED__PICKED_FROM__ROOT_DEVICE_STORAGE = 4;
    public static final int DOCS_UIPICK_RESULT_REPORTED__PICKED_FROM__ROOT_DOWNLOADS = 5;
    public static final int DOCS_UIPICK_RESULT_REPORTED__PICKED_FROM__ROOT_HOME = 6;
    public static final int DOCS_UIPICK_RESULT_REPORTED__PICKED_FROM__ROOT_IMAGES = 7;
    public static final int DOCS_UIPICK_RESULT_REPORTED__PICKED_FROM__ROOT_RECENTS = 8;
    public static final int DOCS_UIPICK_RESULT_REPORTED__PICKED_FROM__ROOT_VIDEOS = 9;
    public static final int DOCS_UIPICK_RESULT_REPORTED__PICKED_FROM__ROOT_MTP = 10;
    public static final int DOCS_UIPICK_RESULT_REPORTED__PICKED_FROM__ROOT_THIRD_PARTY_APP = 11;
    public static final int DOCS_UIPICK_RESULT_REPORTED__PICKED_FROM__ROOT_DOCUMENTS = 12;

    // Values for DocsUIPickResultReported.mime_type
    public static final int DOCS_UIPICK_RESULT_REPORTED__MIME_TYPE__MIME_UNKNOWN = 0;
    public static final int DOCS_UIPICK_RESULT_REPORTED__MIME_TYPE__MIME_NONE = 1;
    public static final int DOCS_UIPICK_RESULT_REPORTED__MIME_TYPE__MIME_ANY = 2;
    public static final int DOCS_UIPICK_RESULT_REPORTED__MIME_TYPE__MIME_APPLICATION = 3;
    public static final int DOCS_UIPICK_RESULT_REPORTED__MIME_TYPE__MIME_AUDIO = 4;
    public static final int DOCS_UIPICK_RESULT_REPORTED__MIME_TYPE__MIME_IMAGE = 5;
    public static final int DOCS_UIPICK_RESULT_REPORTED__MIME_TYPE__MIME_MESSAGE = 6;
    public static final int DOCS_UIPICK_RESULT_REPORTED__MIME_TYPE__MIME_MULTIPART = 7;
    public static final int DOCS_UIPICK_RESULT_REPORTED__MIME_TYPE__MIME_TEXT = 8;
    public static final int DOCS_UIPICK_RESULT_REPORTED__MIME_TYPE__MIME_VIDEO = 9;
    public static final int DOCS_UIPICK_RESULT_REPORTED__MIME_TYPE__MIME_OTHER = 10;

    // Values for DocsUISearchModeReported.search_mode
    public static final int DOCS_UISEARCH_MODE_REPORTED__SEARCH_MODE__SEARCH_UNKNOWN = 0;
    public static final int DOCS_UISEARCH_MODE_REPORTED__SEARCH_MODE__SEARCH_KEYWORD = 1;
    public static final int DOCS_UISEARCH_MODE_REPORTED__SEARCH_MODE__SEARCH_CHIPS = 2;
    public static final int DOCS_UISEARCH_MODE_REPORTED__SEARCH_MODE__SEARCH_KEYWORD_N_CHIPS = 3;

    // Values for DocsUISearchTypeReported.search_type
    public static final int DOCS_UISEARCH_TYPE_REPORTED__SEARCH_TYPE__TYPE_UNKNOWN = 0;
    public static final int DOCS_UISEARCH_TYPE_REPORTED__SEARCH_TYPE__TYPE_CHIP_IMAGES = 1;
    public static final int DOCS_UISEARCH_TYPE_REPORTED__SEARCH_TYPE__TYPE_CHIP_AUDIOS = 2;
    public static final int DOCS_UISEARCH_TYPE_REPORTED__SEARCH_TYPE__TYPE_CHIP_VIDEOS = 3;
    public static final int DOCS_UISEARCH_TYPE_REPORTED__SEARCH_TYPE__TYPE_CHIP_DOCS = 4;
    public static final int DOCS_UISEARCH_TYPE_REPORTED__SEARCH_TYPE__TYPE_SEARCH_HISTORY = 5;
    public static final int DOCS_UISEARCH_TYPE_REPORTED__SEARCH_TYPE__TYPE_SEARCH_STRING = 6;
    public static final int DOCS_UISEARCH_TYPE_REPORTED__SEARCH_TYPE__TYPE_CHIP_LARGE_FILES = 7;
    public static final int DOCS_UISEARCH_TYPE_REPORTED__SEARCH_TYPE__TYPE_CHIP_FROM_THIS_WEEK = 8;

    // Annotation constants.
    public static final byte ANNOTATION_ID_IS_UID =
            Build.VERSION.SDK_INT <= Build.VERSION_CODES.R ?
            1 : StatsLog.ANNOTATION_ID_IS_UID;

    public static final byte ANNOTATION_ID_TRUNCATE_TIMESTAMP =
            Build.VERSION.SDK_INT <= Build.VERSION_CODES.R ?
            2 : StatsLog.ANNOTATION_ID_TRUNCATE_TIMESTAMP;

    public static final byte ANNOTATION_ID_PRIMARY_FIELD =
            Build.VERSION.SDK_INT <= Build.VERSION_CODES.R ?
            3 : StatsLog.ANNOTATION_ID_PRIMARY_FIELD;

    public static final byte ANNOTATION_ID_EXCLUSIVE_STATE =
            Build.VERSION.SDK_INT <= Build.VERSION_CODES.R ?
            4 : StatsLog.ANNOTATION_ID_EXCLUSIVE_STATE;

    public static final byte ANNOTATION_ID_PRIMARY_FIELD_FIRST_UID =
            Build.VERSION.SDK_INT <= Build.VERSION_CODES.R ?
            5 : StatsLog.ANNOTATION_ID_PRIMARY_FIELD_FIRST_UID;

    public static final byte ANNOTATION_ID_TRIGGER_STATE_RESET =
            Build.VERSION.SDK_INT <= Build.VERSION_CODES.R ?
            7 : StatsLog.ANNOTATION_ID_TRIGGER_STATE_RESET;

    public static final byte ANNOTATION_ID_STATE_NESTED =
            Build.VERSION.SDK_INT <= Build.VERSION_CODES.R ?
            8 : StatsLog.ANNOTATION_ID_STATE_NESTED;


    // Write methods
    public static void write(int code, boolean arg1) {
        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.Q) {
            final StatsEvent.Builder builder = StatsEvent.newBuilder();
            builder.setAtomId(code);
            builder.writeBoolean(arg1);

            builder.usePooledBuffer();
            StatsLog.write(builder.build());
        } else {
            QLogger.write(code, arg1);
        }
    }

    public static void write(int code, int arg1) {
        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.Q) {
            final StatsEvent.Builder builder = StatsEvent.newBuilder();
            builder.setAtomId(code);
            builder.writeInt(arg1);

            builder.usePooledBuffer();
            StatsLog.write(builder.build());
        } else {
            QLogger.write(code, arg1);
        }
    }

    public static void write(int code, int arg1, boolean arg2, int arg3, int arg4) {
        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.Q) {
            final StatsEvent.Builder builder = StatsEvent.newBuilder();
            builder.setAtomId(code);
            builder.writeInt(arg1);
            builder.writeBoolean(arg2);
            builder.writeInt(arg3);
            builder.writeInt(arg4);

            builder.usePooledBuffer();
            StatsLog.write(builder.build());
        } else {
            QLogger.write(code, arg1, arg2, arg3, arg4);
        }
    }

    public static void write(int code, int arg1, int arg2) {
        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.Q) {
            final StatsEvent.Builder builder = StatsEvent.newBuilder();
            builder.setAtomId(code);
            builder.writeInt(arg1);
            builder.writeInt(arg2);

            builder.usePooledBuffer();
            StatsLog.write(builder.build());
        } else {
            QLogger.write(code, arg1, arg2);
        }
    }

    public static void write(int code, int arg1, long arg2, int arg3, boolean arg4, int arg5, int arg6, int arg7) {
        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.Q) {
            final StatsEvent.Builder builder = StatsEvent.newBuilder();
            builder.setAtomId(code);
            builder.writeInt(arg1);
            builder.writeLong(arg2);
            builder.writeInt(arg3);
            builder.writeBoolean(arg4);
            builder.writeInt(arg5);
            builder.writeInt(arg6);
            builder.writeInt(arg7);

            builder.usePooledBuffer();
            StatsLog.write(builder.build());
        } else {
            QLogger.write(code, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        }
    }

    public static void write(int code, java.lang.String arg1) {
        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.Q) {
            final StatsEvent.Builder builder = StatsEvent.newBuilder();
            builder.setAtomId(code);
            builder.writeString(arg1);

            builder.usePooledBuffer();
            StatsLog.write(builder.build());
        } else {
            QLogger.write(code, arg1);
        }
    }


    // Write logging helper methods for statsd in Q and earlier.
    private static class QLogger {
        // Payload limits.
        private static final int LOGGER_ENTRY_MAX_PAYLOAD = 4068;
        private static final int MAX_EVENT_PAYLOAD = LOGGER_ENTRY_MAX_PAYLOAD - 4;

        // Value types.
        private static final byte INT_TYPE = 0;
        private static final byte LONG_TYPE = 1;
        private static final byte STRING_TYPE = 2;
        private static final byte LIST_TYPE = 3;
        private static final byte FLOAT_TYPE = 4;

        // Size of each value type.
        private static final int INT_TYPE_SIZE = 5;
        private static final int FLOAT_TYPE_SIZE = 5;
        private static final int LONG_TYPE_SIZE = 9;
        private static final int STRING_TYPE_OVERHEAD = 5;
        private static final int LIST_TYPE_OVERHEAD = 2;

        // Write methods.
        public static void write(int code, boolean arg1) {
            // Initial overhead of the list, timestamp, and atom tag.
            int needed = LIST_TYPE_OVERHEAD + LONG_TYPE_SIZE + INT_TYPE_SIZE;
            needed += INT_TYPE_SIZE;
            if (needed > MAX_EVENT_PAYLOAD) {
                return;
            }
            byte[] buff = new byte[needed];
            int pos = 0;
            buff[pos] = LIST_TYPE;
            buff[pos + 1] = 3;
            pos += LIST_TYPE_OVERHEAD;
            long elapsedRealtime = SystemClock.elapsedRealtimeNanos();
            buff[pos] = LONG_TYPE;
            copyLong(buff, pos + 1, elapsedRealtime);
            pos += LONG_TYPE_SIZE;
            buff[pos] = INT_TYPE;
            copyInt(buff, pos + 1, code);
            pos += INT_TYPE_SIZE;
            buff[pos] = INT_TYPE;
            copyInt(buff, pos + 1, arg1? 1 : 0);
            pos += INT_TYPE_SIZE;
            StatsLog.writeRaw(buff, pos);
        }

        public static void write(int code, int arg1) {
            // Initial overhead of the list, timestamp, and atom tag.
            int needed = LIST_TYPE_OVERHEAD + LONG_TYPE_SIZE + INT_TYPE_SIZE;
            needed += INT_TYPE_SIZE;
            if (needed > MAX_EVENT_PAYLOAD) {
                return;
            }
            byte[] buff = new byte[needed];
            int pos = 0;
            buff[pos] = LIST_TYPE;
            buff[pos + 1] = 3;
            pos += LIST_TYPE_OVERHEAD;
            long elapsedRealtime = SystemClock.elapsedRealtimeNanos();
            buff[pos] = LONG_TYPE;
            copyLong(buff, pos + 1, elapsedRealtime);
            pos += LONG_TYPE_SIZE;
            buff[pos] = INT_TYPE;
            copyInt(buff, pos + 1, code);
            pos += INT_TYPE_SIZE;
            buff[pos] = INT_TYPE;
            copyInt(buff, pos + 1, arg1);
            pos += INT_TYPE_SIZE;
            StatsLog.writeRaw(buff, pos);
        }

        public static void write(int code, int arg1, boolean arg2, int arg3, int arg4) {
            // Initial overhead of the list, timestamp, and atom tag.
            int needed = LIST_TYPE_OVERHEAD + LONG_TYPE_SIZE + INT_TYPE_SIZE;
            needed += INT_TYPE_SIZE;
            needed += INT_TYPE_SIZE;
            needed += INT_TYPE_SIZE;
            needed += INT_TYPE_SIZE;
            if (needed > MAX_EVENT_PAYLOAD) {
                return;
            }
            byte[] buff = new byte[needed];
            int pos = 0;
            buff[pos] = LIST_TYPE;
            buff[pos + 1] = 6;
            pos += LIST_TYPE_OVERHEAD;
            long elapsedRealtime = SystemClock.elapsedRealtimeNanos();
            buff[pos] = LONG_TYPE;
            copyLong(buff, pos + 1, elapsedRealtime);
            pos += LONG_TYPE_SIZE;
            buff[pos] = INT_TYPE;
            copyInt(buff, pos + 1, code);
            pos += INT_TYPE_SIZE;
            buff[pos] = INT_TYPE;
            copyInt(buff, pos + 1, arg1);
            pos += INT_TYPE_SIZE;
            buff[pos] = INT_TYPE;
            copyInt(buff, pos + 1, arg2? 1 : 0);
            pos += INT_TYPE_SIZE;
            buff[pos] = INT_TYPE;
            copyInt(buff, pos + 1, arg3);
            pos += INT_TYPE_SIZE;
            buff[pos] = INT_TYPE;
            copyInt(buff, pos + 1, arg4);
            pos += INT_TYPE_SIZE;
            StatsLog.writeRaw(buff, pos);
        }

        public static void write(int code, int arg1, int arg2) {
            // Initial overhead of the list, timestamp, and atom tag.
            int needed = LIST_TYPE_OVERHEAD + LONG_TYPE_SIZE + INT_TYPE_SIZE;
            needed += INT_TYPE_SIZE;
            needed += INT_TYPE_SIZE;
            if (needed > MAX_EVENT_PAYLOAD) {
                return;
            }
            byte[] buff = new byte[needed];
            int pos = 0;
            buff[pos] = LIST_TYPE;
            buff[pos + 1] = 4;
            pos += LIST_TYPE_OVERHEAD;
            long elapsedRealtime = SystemClock.elapsedRealtimeNanos();
            buff[pos] = LONG_TYPE;
            copyLong(buff, pos + 1, elapsedRealtime);
            pos += LONG_TYPE_SIZE;
            buff[pos] = INT_TYPE;
            copyInt(buff, pos + 1, code);
            pos += INT_TYPE_SIZE;
            buff[pos] = INT_TYPE;
            copyInt(buff, pos + 1, arg1);
            pos += INT_TYPE_SIZE;
            buff[pos] = INT_TYPE;
            copyInt(buff, pos + 1, arg2);
            pos += INT_TYPE_SIZE;
            StatsLog.writeRaw(buff, pos);
        }

        public static void write(int code, int arg1, long arg2, int arg3, boolean arg4, int arg5, int arg6, int arg7) {
            // Initial overhead of the list, timestamp, and atom tag.
            int needed = LIST_TYPE_OVERHEAD + LONG_TYPE_SIZE + INT_TYPE_SIZE;
            needed += INT_TYPE_SIZE;
            needed += LONG_TYPE_SIZE;
            needed += INT_TYPE_SIZE;
            needed += INT_TYPE_SIZE;
            needed += INT_TYPE_SIZE;
            needed += INT_TYPE_SIZE;
            needed += INT_TYPE_SIZE;
            if (needed > MAX_EVENT_PAYLOAD) {
                return;
            }
            byte[] buff = new byte[needed];
            int pos = 0;
            buff[pos] = LIST_TYPE;
            buff[pos + 1] = 9;
            pos += LIST_TYPE_OVERHEAD;
            long elapsedRealtime = SystemClock.elapsedRealtimeNanos();
            buff[pos] = LONG_TYPE;
            copyLong(buff, pos + 1, elapsedRealtime);
            pos += LONG_TYPE_SIZE;
            buff[pos] = INT_TYPE;
            copyInt(buff, pos + 1, code);
            pos += INT_TYPE_SIZE;
            buff[pos] = INT_TYPE;
            copyInt(buff, pos + 1, arg1);
            pos += INT_TYPE_SIZE;
            buff[pos] = LONG_TYPE;
            copyLong(buff, pos + 1, arg2);
            pos += LONG_TYPE_SIZE;
            buff[pos] = INT_TYPE;
            copyInt(buff, pos + 1, arg3);
            pos += INT_TYPE_SIZE;
            buff[pos] = INT_TYPE;
            copyInt(buff, pos + 1, arg4? 1 : 0);
            pos += INT_TYPE_SIZE;
            buff[pos] = INT_TYPE;
            copyInt(buff, pos + 1, arg5);
            pos += INT_TYPE_SIZE;
            buff[pos] = INT_TYPE;
            copyInt(buff, pos + 1, arg6);
            pos += INT_TYPE_SIZE;
            buff[pos] = INT_TYPE;
            copyInt(buff, pos + 1, arg7);
            pos += INT_TYPE_SIZE;
            StatsLog.writeRaw(buff, pos);
        }

        public static void write(int code, java.lang.String arg1) {
            // Initial overhead of the list, timestamp, and atom tag.
            int needed = LIST_TYPE_OVERHEAD + LONG_TYPE_SIZE + INT_TYPE_SIZE;
            if (arg1 == null) {
                arg1 = "";
            }
            byte[] arg1Bytes = arg1.getBytes(java.nio.charset.StandardCharsets.UTF_8);
            needed += STRING_TYPE_OVERHEAD + arg1Bytes.length;
            if (needed > MAX_EVENT_PAYLOAD) {
                return;
            }
            byte[] buff = new byte[needed];
            int pos = 0;
            buff[pos] = LIST_TYPE;
            buff[pos + 1] = 3;
            pos += LIST_TYPE_OVERHEAD;
            long elapsedRealtime = SystemClock.elapsedRealtimeNanos();
            buff[pos] = LONG_TYPE;
            copyLong(buff, pos + 1, elapsedRealtime);
            pos += LONG_TYPE_SIZE;
            buff[pos] = INT_TYPE;
            copyInt(buff, pos + 1, code);
            pos += INT_TYPE_SIZE;
            buff[pos] = STRING_TYPE;
            copyInt(buff, pos + 1, arg1Bytes.length);
            System.arraycopy(arg1Bytes, 0, buff, pos + STRING_TYPE_OVERHEAD, arg1Bytes.length);
            pos += STRING_TYPE_OVERHEAD + arg1Bytes.length;
            StatsLog.writeRaw(buff, pos);
        }


        // Helper methods for copying primitives
        private static void copyInt(byte[] buff, int pos, int val) {
            buff[pos] = (byte) (val);
            buff[pos + 1] = (byte) (val >> 8);
            buff[pos + 2] = (byte) (val >> 16);
            buff[pos + 3] = (byte) (val >> 24);
            return;
        }

        private static void copyLong(byte[] buff, int pos, long val) {
            buff[pos] = (byte) (val);
            buff[pos + 1] = (byte) (val >> 8);
            buff[pos + 2] = (byte) (val >> 16);
            buff[pos + 3] = (byte) (val >> 24);
            buff[pos + 4] = (byte) (val >> 32);
            buff[pos + 5] = (byte) (val >> 40);
            buff[pos + 6] = (byte) (val >> 48);
            buff[pos + 7] = (byte) (val >> 56);
            return;
        }

    }
}
