/* AUTO-GENERATED FILE. DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found. It
 * should not be modified by hand.
 */

package androidx.customview;

public final class R {
  public static final class anim {
    public static final int fragment_fast_out_extra_slow_in=0x7f010000;
  }
  public static final class animator {
    public static final int fragment_close_enter=0x7f020000;
    public static final int fragment_close_exit=0x7f020001;
    public static final int fragment_fade_enter=0x7f020002;
    public static final int fragment_fade_exit=0x7f020003;
    public static final int fragment_open_enter=0x7f020004;
    public static final int fragment_open_exit=0x7f020005;
  }
  public static final class array {
    /**
     * Content description for the pad pages when slide-able.
     */
    public static final int desc_pad_pages=0x7f030000;
  }
  public static final class attr {
    /**
     * When set to alignMargins, causes alignment to take place between the outer
     * boundary of a view, as defined by its margins. When set to alignBounds,
     * causes alignment to take place between the edges of the view.
     * The default is alignMargins.
     * See {@link android.widget.GridLayout#setAlignmentMode(int)}.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>alignBounds</td><td>0</td><td>Align the bounds of the children.
     * See {@link android.widget.GridLayout#ALIGN_BOUNDS}.</td></tr>
     * <tr><td>alignMargins</td><td>1</td><td>Align the margins of the children.
     * See {@link android.widget.GridLayout#ALIGN_MARGINS}.</td></tr>
     * </table>
     */
    public static final int alignmentMode=0x7f040000;
    /**
     * Alpha multiplier applied to the base color.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int alpha=0x7f040001;
    /**
     * The maximum number of columns to create when automatically positioning children.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int columnCount=0x7f040002;
    /**
     * When set to true, forces column boundaries to appear in the same order
     * as column indices.
     * The default is true.
     * See {@link android.widget.GridLayout#setColumnOrderPreserved(boolean)}.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int columnOrderPreserved=0x7f040003;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int coordinatorLayoutStyle=0x7f040004;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int drawerLayoutStyle=0x7f040005;
    /**
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int elevation=0x7f040006;
    /**
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int fastScrollEnabled=0x7f040007;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int fastScrollHorizontalThumbDrawable=0x7f040008;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int fastScrollHorizontalTrackDrawable=0x7f040009;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int fastScrollVerticalThumbDrawable=0x7f04000a;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int fastScrollVerticalTrackDrawable=0x7f04000b;
    /**
     * The reference to the font file to be used. This should be a file in the res/font folder
     * and should therefore have an R reference value. E.g. @font/myfont
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int font=0x7f04000c;
    /**
     * The authority of the Font Provider to be used for the request.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int fontProviderAuthority=0x7f04000d;
    /**
     * The sets of hashes for the certificates the provider should be signed with. This is
     * used to verify the identity of the provider, and is only required if the provider is not
     * part of the system image. This value may point to one list or a list of lists, where each
     * individual list represents one collection of signature hashes. Refer to your font provider's
     * documentation for these values.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int fontProviderCerts=0x7f04000e;
    /**
     * The strategy to be used when fetching font data from a font provider in XML layouts.
     * This attribute is ignored when the resource is loaded from code, as it is equivalent to the
     * choice of API between {@link
     * androidx.core.content.res.ResourcesCompat#getFont(Context, int)} (blocking) and
     * {@link
     * androidx.core.content.res.ResourcesCompat#getFont(Context, int, FontCallback, Handler)}
     * (async).
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>async</td><td>1</td><td>The async font fetch works as follows.
     * First, check the local cache, then if the requeted font is not cached, trigger a
     * request the font and continue with layout inflation. Once the font fetch succeeds, the
     * target text view will be refreshed with the downloaded font data. The
     * fontProviderFetchTimeout will be ignored if async loading is specified.</td></tr>
     * <tr><td>blocking</td><td>0</td><td>The blocking font fetch works as follows.
     * First, check the local cache, then if the requested font is not cached, request the
     * font from the provider and wait until it is finished.  You can change the length of
     * the timeout by modifying fontProviderFetchTimeout.  If the timeout happens, the
     * default typeface will be used instead.</td></tr>
     * </table>
     */
    public static final int fontProviderFetchStrategy=0x7f04000f;
    /**
     * The length of the timeout during fetching.
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>forever</td><td>ffffffff</td><td>A special value for the timeout. In this case, the blocking font fetching will not
     * timeout and wait until a reply is received from the font provider.</td></tr>
     * </table>
     */
    public static final int fontProviderFetchTimeout=0x7f040010;
    /**
     * The package for the Font Provider to be used for the request. This is used to verify
     * the identity of the provider.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int fontProviderPackage=0x7f040011;
    /**
     * The query to be sent over to the provider. Refer to your font provider's documentation
     * on the format of this string.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int fontProviderQuery=0x7f040012;
    /**
     * Provides the system font family name to check before downloading the font. For
     * example if the fontProviderQuery asked for "Sans Serif", it is possible to define
     * fontProviderSystemFontFamily as "sans-serif" to tell the system to use "sans-serif" font
     * family if it exists on the system.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int fontProviderSystemFontFamily=0x7f040013;
    /**
     * The style of the given font file. This will be used when the font is being loaded into
     * the font stack and will override any style information in the font's header tables. If
     * unspecified, the value in the font's header tables will be used.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>italic</td><td>1</td><td></td></tr>
     * <tr><td>normal</td><td>0</td><td></td></tr>
     * </table>
     */
    public static final int fontStyle=0x7f040014;
    /**
     * The variation settings to be applied to the font. The string should be in the following
     * format: "'tag1' value1, 'tag2' value2, ...". If the default variation settings should be
     * used, or the font used does not support variation settings, this attribute needs not be
     * specified.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int fontVariationSettings=0x7f040015;
    /**
     * The weight of the given font file. This will be used when the font is being loaded into
     * the font stack and will override any weight information in the font's header tables. Must
     * be a positive number, a multiple of 100, and between 100 and 900, inclusive. The most
     * common values are 400 for regular weight and 700 for bold weight. If unspecified, the value
     * in the font's header tables will be used.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int fontWeight=0x7f040016;
    /**
     * A reference to an array of integers representing the
     * locations of horizontal keylines in dp from the starting edge.
     * Child views can refer to these keylines for alignment using
     * layout_keyline="index" where index is a 0-based index into
     * this array.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int keylines=0x7f040017;
    /**
     * Class name of the Layout Manager to be used.
     * <p/>
     * The class must ext androidx.recyclerview.widget.RecyclerViewView$LayoutManager
     * and have either a default constructor or constructor with the signature
     * (android.content.Context, android.util.AttributeSet, int, int).
     * <p/>
     * If the name starts with a '.', application package is prefixed.
     * Else, if the name contains a '.', the classname is assumed to be a full class name.
     * Else, the recycler view package naandroidx.appcompat.widgetdget) is prefixed.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int layoutManager=0x7f040018;
    /**
     * The id of an anchor view that this view should position relative to.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int layout_anchor=0x7f040019;
    /**
     * Specifies how an object should position relative to an anchor, on both the X and Y axes,
     * within its parent's bounds.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
     * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
     * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
     * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
     * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the horizontal gravity: a left gravity will clip the right
     * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
     * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the vertical gravity: a top gravity will clip the bottom
     * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
     * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
     * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
     * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
     * </table>
     */
    public static final int layout_anchorGravity=0x7f04001a;
    /**
     * The class name of a Behavior class defining special runtime behavior
     * for this child view.
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     */
    public static final int layout_behavior=0x7f04001b;
    /**
     * The column boundary delimiting the left of the group of cells
     * occupied by this view.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int layout_column=0x7f04001c;
    /**
     * The column span: the difference between the right and left
     * boundaries delimiting the group of cells occupied by this view.
     * The default is one.
     * See {@link android.widget.GridLayout.Spec}.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int layout_columnSpan=0x7f04001d;
    /**
     * The relative proportion of horizontal space that should be allocated to this view
     * during excess space distribution.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int layout_columnWeight=0x7f04001e;
    /**
     * Specifies how this view dodges the inset edges of the CoordinatorLayout.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>all</td><td>77</td><td>Dodge all the inset edges.</td></tr>
     * <tr><td>bottom</td><td>50</td><td>Dodge the bottom inset edge.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Dodge the end inset edge.</td></tr>
     * <tr><td>left</td><td>3</td><td>Dodge the left inset edge.</td></tr>
     * <tr><td>none</td><td>0</td><td>Don't dodge any edges</td></tr>
     * <tr><td>right</td><td>5</td><td>Dodge the right inset edge.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Dodge the start inset edge.</td></tr>
     * <tr><td>top</td><td>30</td><td>Dodge the top inset edge.</td></tr>
     * </table>
     */
    public static final int layout_dodgeInsetEdges=0x7f04001f;
    /**
     * Gravity specifies how a component should be placed in its group of cells.
     * The default is LEFT | BASELINE.
     * See {@link android.widget.GridLayout.LayoutParams#setGravity(int)}.
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
     * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
     * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
     * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
     * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the horizontal gravity: a left gravity will clip the right
     * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
     * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the vertical gravity: a top gravity will clip the bottom
     * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
     * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
     * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
     * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
     * </table>
     */
    public static final int layout_gravity=0x7f040020;
    /**
     * Specifies how this view insets the CoordinatorLayout and make some other views
     * dodge it.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Inset the bottom edge.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Inset the end edge.</td></tr>
     * <tr><td>left</td><td>3</td><td>Inset the left edge.</td></tr>
     * <tr><td>none</td><td>0</td><td>Don't inset.</td></tr>
     * <tr><td>right</td><td>5</td><td>Inset the right edge.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Inset the start edge.</td></tr>
     * <tr><td>top</td><td>30</td><td>Inset the top edge.</td></tr>
     * </table>
     */
    public static final int layout_insetEdge=0x7f040021;
    /**
     * The index of a keyline this view should position relative to.
     * android:layout_gravity will affect how the view aligns to the
     * specified keyline.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int layout_keyline=0x7f040022;
    /**
     * The row boundary delimiting the top of the group of cells
     * occupied by this view.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int layout_row=0x7f040023;
    /**
     * The row span: the difference between the top and bottom
     * boundaries delimiting the group of cells occupied by this view.
     * The default is one.
     * See {@link android.widget.GridLayout.Spec}.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int layout_rowSpan=0x7f040024;
    /**
     * The relative proportion of vertical space that should be allocated to this view
     * during excess space distribution.
     * <p>May be a floating point value, such as "<code>1.2</code>".
     */
    public static final int layout_rowWeight=0x7f040025;
    /**
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int maxTextSize=0x7f040026;
    /**
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int minTextSize=0x7f040027;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int nestedScrollViewStyle=0x7f040028;
    /**
     * The orientation property is not used during layout. It is only used to
     * allocate row and column parameters when they are not specified by its children's
     * layout parameters. GridLayout works like LinearLayout in this case;
     * putting all the components either in a single row or in a single column -
     * depending on the value of this flag. In the horizontal case, a columnCount
     * property may be additionally supplied to force new rows to be created when a
     * row is full. The rowCount attribute may be used similarly in the vertical case.
     * The default is horizontal.
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>horizontal</td><td>0</td><td>Defines an horizontal widget.</td></tr>
     * <tr><td>vertical</td><td>1</td><td>Defines a vertical widget.</td></tr>
     * </table>
     */
    public static final int orientation=0x7f040029;
    /**
     * Resource reference to the string array of query patterns for a custom capability.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int queryPatterns=0x7f04002a;
    /**
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     */
    public static final int recyclerViewStyle=0x7f04002b;
    /**
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int reverseLayout=0x7f04002c;
    /**
     * The maximum number of rows to create when automatically positioning children.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int rowCount=0x7f04002d;
    /**
     * When set to true, forces row boundaries to appear in the same order
     * as row indices.
     * The default is true.
     * See {@link android.widget.GridLayout#setRowOrderPreserved(boolean)}.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int rowOrderPreserved=0x7f04002e;
    /**
     * Indicates whether a parameter in a capability template can only contain a matched
     * shortcut id and not an arbitrary string.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int shortcutMatchRequired=0x7f04002f;
    /**
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int spanCount=0x7f040030;
    /**
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int stackFromEnd=0x7f040031;
    /**
     * Drawable to display behind the status bar when the view is set to draw behind it.
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int statusBarBackground=0x7f040032;
    /**
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     */
    public static final int stepTextSize=0x7f040033;
    /**
     * Background color for SwipeRefreshLayout progress spinner.
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     */
    public static final int swipeRefreshLayoutProgressSpinnerBackgroundColor=0x7f040034;
    /**
     * The index of the font in the tcc font file. If the font file referenced is not in the
     * tcc format, this attribute needs not be specified.
     * <p>May be an integer value, such as "<code>100</code>".
     */
    public static final int ttcIndex=0x7f040035;
    /**
     * When set to true, tells GridLayout to use default margins when none are specified
     * in a view's layout parameters.
     * The default value is false.
     * See {@link android.widget.GridLayout#setUseDefaultMargins(boolean)}.
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     */
    public static final int useDefaultMargins=0x7f040036;
  }
  public static final class color {
    public static final int androidx_core_ripple_material_light=0x7f050000;
    public static final int androidx_core_secondary_text_default_material_light=0x7f050001;
    /**
     * Default accent color.
     */
    public static final int calculator_accent_color=0x7f050002;
    /**
     * Color to indicate an error has occured.
     */
    public static final int calculator_error_color=0x7f050003;
    /**
     * Primary color (Color for the toolbars).
     * Primary color (Color for the toolbars).
     */
    public static final int calculator_primary_color=0x7f050004;
    /**
     * Status bar color.
     * Status bar color.
     */
    public static final int calculator_statusbar_color=0x7f050005;
    /**
     * Background color of the calculator display.
     */
    public static final int display_background_color=0x7f050006;
    /**
     * Text color for the formula in the calculator display.
     * Text color for the formula in the calculator display.
     */
    public static final int display_formula_text_color=0x7f050007;
    /**
     * Lighter color for exponent while scrolling.
     * Lighter color for exponent while scrolling.
     */
    public static final int display_result_exponent_text_color=0x7f050008;
    /**
     * Text color for the result in the calculator display.
     * Text color for the result in the calculator display.
     */
    public static final int display_result_text_color=0x7f050009;
    /**
     * Background color for empty history view.
     */
    public static final int empty_history_color=0x7f05000a;
    public static final int navigationBar_color=0x7f05000b;
    public static final int navigationBar_divider=0x7f05000c;
    public static final int notification_action_color_filter=0x7f05000d;
    public static final int notification_icon_bg_color=0x7f05000e;
    public static final int notification_material_background_media_default_color=0x7f05000f;
    /**
     * Background color for the advanced pad.
     */
    public static final int pad_advanced_background_color=0x7f050010;
    /**
     * Ripple color when a button is pressed in a pad.
     */
    public static final int pad_button_advanced_ripple_color=0x7f050011;
    /**
     * Text color for a button in the advanced pad.
     */
    public static final int pad_button_advanced_text_color=0x7f050012;
    /**
     * Ripple color when a button is pressed in a pad.
     * Ripple color when a button is pressed in a pad.
     */
    public static final int pad_button_ripple_color=0x7f050013;
    /**
     * Text color for a button in a pad.
     * Text color for a button in a pad.
     */
    public static final int pad_button_text_color=0x7f050014;
    /**
     * Background color for the numeric pad.
     */
    public static final int pad_numeric_background_color=0x7f050015;
    /**
     * Background color for the operator pad.
     * Background color for the operator pad.
     */
    public static final int pad_operator_background_color=0x7f050016;
    public static final int primary_text_default_material_dark=0x7f050017;
    public static final int secondary_text_default_material_dark=0x7f050018;
  }
  public static final class dimen {
    public static final int compat_button_inset_horizontal_material=0x7f060000;
    public static final int compat_button_inset_vertical_material=0x7f060001;
    public static final int compat_button_padding_horizontal_material=0x7f060002;
    public static final int compat_button_padding_vertical_material=0x7f060003;
    public static final int compat_control_corner_material=0x7f060004;
    public static final int compat_notification_large_icon_max_height=0x7f060005;
    public static final int compat_notification_large_icon_max_width=0x7f060006;
    public static final int def_drawer_elevation=0x7f060007;
    public static final int default_gap=0x7f060008;
    public static final int fastscroll_default_thickness=0x7f060009;
    public static final int fastscroll_margin=0x7f06000a;
    public static final int fastscroll_minimum_range=0x7f06000b;
    public static final int formula_max_textsize=0x7f06000c;
    public static final int formula_min_textsize=0x7f06000d;
    public static final int formula_padding_bottom=0x7f06000e;
    public static final int formula_padding_end=0x7f06000f;
    public static final int formula_padding_start=0x7f060010;
    /**
     * Dimens for display formula.
     * Dimens for display formula.
     * Dimens for display formula.
     * Dimens for display formula.
     * Dimens for display formula.
     * Dimens for display formula.
     * Dimens for display formula.
     * Dimens for display formula.
     */
    public static final int formula_padding_top=0x7f060011;
    public static final int formula_step_textsize=0x7f060012;
    public static final int history_divider_padding=0x7f060013;
    public static final int history_item_text_padding_bottom=0x7f060014;
    public static final int history_item_text_padding_top=0x7f060015;
    public static final int item_touch_helper_max_drag_scroll_per_frame=0x7f060016;
    public static final int item_touch_helper_swipe_escape_max_velocity=0x7f060017;
    public static final int item_touch_helper_swipe_escape_velocity=0x7f060018;
    public static final int notification_action_icon_size=0x7f060019;
    public static final int notification_action_text_size=0x7f06001a;
    public static final int notification_big_circle_margin=0x7f06001b;
    public static final int notification_content_margin_start=0x7f06001c;
    public static final int notification_large_icon_height=0x7f06001d;
    public static final int notification_large_icon_width=0x7f06001e;
    public static final int notification_main_column_padding_top=0x7f06001f;
    public static final int notification_media_narrow_margin=0x7f060020;
    public static final int notification_right_icon_size=0x7f060021;
    public static final int notification_right_side_padding_top=0x7f060022;
    public static final int notification_small_icon_background_padding=0x7f060023;
    public static final int notification_small_icon_size_as_large=0x7f060024;
    public static final int notification_subtext_size=0x7f060025;
    public static final int notification_top_pad=0x7f060026;
    public static final int notification_top_pad_large_text=0x7f060027;
    /**
     * The margin between the pad pages when displayed using a view pager.
     */
    public static final int pad_page_margin=0x7f060028;
    public static final int result_padding_bottom=0x7f060029;
    public static final int result_padding_end=0x7f06002a;
    public static final int result_padding_start=0x7f06002b;
    /**
     * Dimens for display result.
     * Dimens for display result.
     * Dimens for display result.
     * Dimens for display result.
     * Dimens for display result.
     * Dimens for display result.
     * Dimens for display result.
     * Dimens for display result.
     * Dimens for display result.
     */
    public static final int result_padding_top=0x7f06002c;
    public static final int result_textsize=0x7f06002d;
  }
  public static final class drawable {
    public static final int ic_del=0x7f070001;
    public static final int ic_history_grey600_48dp=0x7f070002;
    public static final int ic_launcher_background=0x7f070003;
    public static final int ic_launcher_foreground=0x7f070004;
    public static final int notification_action_background=0x7f070005;
    public static final int notification_bg=0x7f070006;
    public static final int notification_bg_low=0x7f070007;
    public static final int notification_bg_low_normal=0x7f070008;
    public static final int notification_bg_low_pressed=0x7f070009;
    public static final int notification_bg_normal=0x7f07000a;
    public static final int notification_bg_normal_pressed=0x7f07000b;
    public static final int notification_icon_background=0x7f07000c;
    public static final int notification_template_icon_bg=0x7f07000d;
    public static final int notification_template_icon_low_bg=0x7f07000e;
    public static final int notification_tile_bg=0x7f07000f;
    public static final int notify_panel_notification_icon_bg=0x7f070010;
    public static final int pad_button_advanced_background=0x7f070011;
    public static final int pad_button_background=0x7f070012;
    public static final int pad_button_inverse_background=0x7f070013;
  }
  public static final class id {
    public static final int accessibility_action_clickable_span=0x7f080000;
    public static final int accessibility_custom_action_0=0x7f080001;
    public static final int accessibility_custom_action_1=0x7f080002;
    public static final int accessibility_custom_action_10=0x7f080003;
    public static final int accessibility_custom_action_11=0x7f080004;
    public static final int accessibility_custom_action_12=0x7f080005;
    public static final int accessibility_custom_action_13=0x7f080006;
    public static final int accessibility_custom_action_14=0x7f080007;
    public static final int accessibility_custom_action_15=0x7f080008;
    public static final int accessibility_custom_action_16=0x7f080009;
    public static final int accessibility_custom_action_17=0x7f08000a;
    public static final int accessibility_custom_action_18=0x7f08000b;
    public static final int accessibility_custom_action_19=0x7f08000c;
    public static final int accessibility_custom_action_2=0x7f08000d;
    public static final int accessibility_custom_action_20=0x7f08000e;
    public static final int accessibility_custom_action_21=0x7f08000f;
    public static final int accessibility_custom_action_22=0x7f080010;
    public static final int accessibility_custom_action_23=0x7f080011;
    public static final int accessibility_custom_action_24=0x7f080012;
    public static final int accessibility_custom_action_25=0x7f080013;
    public static final int accessibility_custom_action_26=0x7f080014;
    public static final int accessibility_custom_action_27=0x7f080015;
    public static final int accessibility_custom_action_28=0x7f080016;
    public static final int accessibility_custom_action_29=0x7f080017;
    public static final int accessibility_custom_action_3=0x7f080018;
    public static final int accessibility_custom_action_30=0x7f080019;
    public static final int accessibility_custom_action_31=0x7f08001a;
    public static final int accessibility_custom_action_4=0x7f08001b;
    public static final int accessibility_custom_action_5=0x7f08001c;
    public static final int accessibility_custom_action_6=0x7f08001d;
    public static final int accessibility_custom_action_7=0x7f08001e;
    public static final int accessibility_custom_action_8=0x7f08001f;
    public static final int accessibility_custom_action_9=0x7f080020;
    public static final int action0=0x7f080021;
    public static final int action_container=0x7f080022;
    public static final int action_divider=0x7f080023;
    public static final int action_image=0x7f080024;
    public static final int action_text=0x7f080025;
    public static final int actions=0x7f080026;
    public static final int alignBounds=0x7f080027;
    public static final int alignMargins=0x7f080028;
    public static final int all=0x7f080029;
    public static final int async=0x7f08002a;
    public static final int blocking=0x7f08002b;
    public static final int bottom=0x7f08002c;
    public static final int cancel_action=0x7f08002d;
    public static final int center=0x7f08002e;
    public static final int center_horizontal=0x7f08002f;
    public static final int center_vertical=0x7f080030;
    public static final int chronometer=0x7f080031;
    public static final int clip_horizontal=0x7f080032;
    public static final int clip_vertical=0x7f080033;
    public static final int clr=0x7f080034;
    public static final int const_e=0x7f080035;
    public static final int const_pi=0x7f080036;
    public static final int dec_point=0x7f080037;
    public static final int del=0x7f080038;
    public static final int dialog_button=0x7f080039;
    public static final int digit_0=0x7f08003a;
    public static final int digit_1=0x7f08003b;
    public static final int digit_2=0x7f08003c;
    public static final int digit_3=0x7f08003d;
    public static final int digit_4=0x7f08003e;
    public static final int digit_5=0x7f08003f;
    public static final int digit_6=0x7f080040;
    public static final int digit_7=0x7f080041;
    public static final int digit_8=0x7f080042;
    public static final int digit_9=0x7f080043;
    public static final int display=0x7f080044;
    public static final int drag_layout=0x7f080045;
    public static final int empty_history_view=0x7f080046;
    public static final int end=0x7f080047;
    public static final int end_padder=0x7f080048;
    public static final int eq=0x7f080049;
    public static final int fill=0x7f08004a;
    public static final int fill_horizontal=0x7f08004b;
    public static final int fill_vertical=0x7f08004c;
    public static final int forever=0x7f08004d;
    public static final int formula=0x7f08004e;
    public static final int formula_container=0x7f08004f;
    public static final int fragment_container_view_tag=0x7f080050;
    public static final int fun_10pow=0x7f080051;
    public static final int fun_arccos=0x7f080052;
    public static final int fun_arcsin=0x7f080053;
    public static final int fun_arctan=0x7f080054;
    public static final int fun_cos=0x7f080055;
    public static final int fun_exp=0x7f080056;
    public static final int fun_ln=0x7f080057;
    public static final int fun_log=0x7f080058;
    public static final int fun_sin=0x7f080059;
    public static final int fun_tan=0x7f08005a;
    public static final int history_date=0x7f08005b;
    public static final int history_divider=0x7f08005c;
    public static final int history_formula=0x7f08005d;
    public static final int history_formula_container=0x7f08005e;
    public static final int history_frame=0x7f08005f;
    public static final int history_recycler_view=0x7f080060;
    public static final int history_result=0x7f080061;
    public static final int history_toolbar=0x7f080062;
    public static final int horizontal=0x7f080063;
    public static final int icon=0x7f080064;
    public static final int icon_group=0x7f080065;
    public static final int info=0x7f080066;
    public static final int italic=0x7f080067;
    public static final int item_touch_helper_previous_elevation=0x7f080068;
    public static final int left=0x7f080069;
    public static final int line1=0x7f08006a;
    public static final int line3=0x7f08006b;
    public static final int lparen=0x7f08006c;
    public static final int main_calculator=0x7f08006d;
    public static final int media_actions=0x7f08006e;
    public static final int media_controller_compat_view_tag=0x7f08006f;
    public static final int memory_add=0x7f080070;
    public static final int memory_recall=0x7f080071;
    public static final int memory_store=0x7f080072;
    public static final int memory_subtract=0x7f080073;
    public static final int menu_clear_history=0x7f080074;
    public static final int menu_copy=0x7f080075;
    public static final int menu_fraction=0x7f080076;
    public static final int menu_history=0x7f080077;
    public static final int menu_leading=0x7f080078;
    public static final int menu_licenses=0x7f080079;
    public static final int menu_paste=0x7f08007a;
    public static final int message=0x7f08007b;
    public static final int mode=0x7f08007c;
    public static final int none=0x7f08007d;
    public static final int normal=0x7f08007e;
    public static final int notification_background=0x7f08007f;
    public static final int notification_main_column=0x7f080080;
    public static final int notification_main_column_container=0x7f080081;
    public static final int op_add=0x7f080082;
    public static final int op_div=0x7f080083;
    public static final int op_fact=0x7f080084;
    public static final int op_mul=0x7f080085;
    public static final int op_pct=0x7f080086;
    public static final int op_pow=0x7f080087;
    public static final int op_sqr=0x7f080088;
    public static final int op_sqrt=0x7f080089;
    public static final int op_sub=0x7f08008a;
    public static final int pad_advanced=0x7f08008b;
    public static final int pad_numeric=0x7f08008c;
    public static final int pad_operator=0x7f08008d;
    public static final int pad_pager=0x7f08008e;
    public static final int result=0x7f08008f;
    public static final int right=0x7f080090;
    public static final int right_icon=0x7f080091;
    public static final int right_side=0x7f080092;
    public static final int rparen=0x7f080093;
    public static final int special_effects_controller_view_tag=0x7f080094;
    public static final int start=0x7f080095;
    public static final int status_bar_latest_event_content=0x7f080096;
    public static final int tag_accessibility_actions=0x7f080097;
    public static final int tag_accessibility_clickable_spans=0x7f080098;
    public static final int tag_accessibility_heading=0x7f080099;
    public static final int tag_accessibility_pane_title=0x7f08009a;
    public static final int tag_on_apply_window_listener=0x7f08009b;
    public static final int tag_on_receive_content_listener=0x7f08009c;
    public static final int tag_on_receive_content_mime_types=0x7f08009d;
    public static final int tag_screen_reader_focusable=0x7f08009e;
    public static final int tag_state_description=0x7f08009f;
    public static final int tag_transition_group=0x7f0800a0;
    public static final int tag_unhandled_key_event_manager=0x7f0800a1;
    public static final int tag_unhandled_key_listeners=0x7f0800a2;
    public static final int tag_window_insets_animation_callback=0x7f0800a3;
    public static final int text=0x7f0800a4;
    public static final int text2=0x7f0800a5;
    public static final int time=0x7f0800a6;
    public static final int title=0x7f0800a7;
    public static final int toggle_inv=0x7f0800a8;
    public static final int toggle_mode=0x7f0800a9;
    public static final int toolbar=0x7f0800aa;
    public static final int top=0x7f0800ab;
    public static final int vertical=0x7f0800ac;
    public static final int view_tree_lifecycle_owner=0x7f0800ad;
    public static final int view_tree_saved_state_registry_owner=0x7f0800ae;
    public static final int view_tree_view_model_store_owner=0x7f0800af;
    public static final int visible_removing_fragment_view_tag=0x7f0800b0;
  }
  public static final class integer {
    public static final int cancel_button_image_alpha=0x7f090000;
    public static final int status_bar_notification_info_maxnum=0x7f090001;
  }
  public static final class layout {
    public static final int activity_calculator=0x7f0a0000;
    public static final int activity_calculator_land=0x7f0a0001;
    public static final int activity_calculator_main=0x7f0a0002;
    public static final int activity_calculator_port=0x7f0a0003;
    public static final int activity_calculator_tablet_port=0x7f0a0004;
    public static final int custom_dialog=0x7f0a0005;
    public static final int dialog_message=0x7f0a0006;
    public static final int display=0x7f0a0007;
    public static final int display_one_line=0x7f0a0008;
    public static final int display_two_line=0x7f0a0009;
    public static final int empty_history_view=0x7f0a000a;
    public static final int fragment_history=0x7f0a000b;
    public static final int history_item=0x7f0a000c;
    public static final int notification_action=0x7f0a000d;
    public static final int notification_action_tombstone=0x7f0a000e;
    public static final int notification_media_action=0x7f0a000f;
    public static final int notification_media_cancel_action=0x7f0a0010;
    public static final int notification_template_big_media=0x7f0a0011;
    public static final int notification_template_big_media_custom=0x7f0a0012;
    public static final int notification_template_big_media_narrow=0x7f0a0013;
    public static final int notification_template_big_media_narrow_custom=0x7f0a0014;
    public static final int notification_template_custom_big=0x7f0a0015;
    public static final int notification_template_icon_group=0x7f0a0016;
    public static final int notification_template_lines_media=0x7f0a0017;
    public static final int notification_template_media=0x7f0a0018;
    public static final int notification_template_media_custom=0x7f0a0019;
    public static final int notification_template_part_chronometer=0x7f0a001a;
    public static final int notification_template_part_time=0x7f0a001b;
    public static final int pad_advanced=0x7f0a001c;
    public static final int pad_advanced_3x5=0x7f0a001d;
    public static final int pad_advanced_4x4=0x7f0a001e;
    public static final int pad_advanced_5x3=0x7f0a001f;
    public static final int pad_numeric=0x7f0a0020;
    public static final int pad_operator=0x7f0a0021;
    public static final int pad_operator_one_col=0x7f0a0022;
    public static final int pad_operator_two_col=0x7f0a0023;
    public static final int toolbar=0x7f0a0024;
  }
  public static final class menu {
    public static final int activity_calculator=0x7f0b0000;
    public static final int fragment_history=0x7f0b0001;
    public static final int menu_formula=0x7f0b0002;
    public static final int menu_result=0x7f0b0003;
  }
  public static final class mipmap {
    public static final int ic_launcher=0x7f0c0000;
  }
  public static final class string {
    /**
     * Name of the application. [CHAR_LIMIT=NONE]
     */
    public static final int app_name=0x7f0d0000;
    /**
     * Indicator (for "leading" display) that result is inexact. [CHAR_LIMIT=NONE]
     */
    public static final int approximate=0x7f0d0001;
    /**
     * Dialog message when a computation is cancelled by the user. [CHAR_LIMIT=NONE]
     */
    public static final int cancelled=0x7f0d0002;
    /**
     * Announced when all characters are removed from Formula, e.g. after clear. [CHAR_LIMIT=NONE]
     */
    public static final int cleared=0x7f0d0003;
    /**
     * Clear button to clear the currently entered expression. [CHAR_LIMIT=1]
     */
    public static final int clr=0x7f0d0004;
    /**
     * Constant for Euler's number (i.e. "2.7182…"). [CHAR_LIMIT=1]
     */
    public static final int const_e=0x7f0d0005;
    /**
     * Constant for pi (i.e. "3.1415…"). [CHAR_LIMIT=1]
     */
    public static final int const_pi=0x7f0d0006;
    /**
     * Decimal separator (e.g. "1.23" or "1,23").
     * This should be whatever character is appropriate for use as a decimal sign for a given locale
     * when used with Arabic numerals (i.e. 0, 1, 2, 3, ...)
     * [CHAR_LIMIT=1]
     */
    public static final int dec_point=0x7f0d0007;
    /**
     * Delete button to remove last entered token. [CHAR_LIMIT=4]
     */
    public static final int del=0x7f0d0008;
    /**
     * Content description for the advanced pad when slide-able. [CHAR_LIMIT=NONE]
     */
    public static final int desc_adv_pad=0x7f0d0009;
    /**
     * Content description for "clr" button. Deletes entire formula. [CHAR_LIMIT=NONE]
     */
    public static final int desc_clr=0x7f0d000a;
    /**
     * Content description for 'e' button. [CHAR_LIMIT=NONE]
     */
    public static final int desc_const_e=0x7f0d000b;
    /**
     * Content description for 'π' button. [CHAR_LIMIT=NONE]
     */
    public static final int desc_const_pi=0x7f0d000c;
    /**
     * Content description for '.' button. [CHAR_LIMIT=NONE]
     */
    public static final int desc_dec_point=0x7f0d000d;
    /**
     * Content description for "del" button. Deletes single character. Should differ
     * from desc_clr. [CHAR_LIMIT=NONE]
     */
    public static final int desc_del=0x7f0d000e;
    /**
     * Content description for '=' button. [CHAR_LIMIT=NONE]
     */
    public static final int desc_eq=0x7f0d000f;
    /**
     * Content description for formula field when it is empty. [CHAR_LIMIT=NONE]
     */
    public static final int desc_formula=0x7f0d0010;
    /**
     * Content description for 10^ button. This button is used to raise 10 to the subsequently
     * entered power. E.g. <10^>3 would yield 1000.
     * [CHAR_LIMIT=NONE]
     */
    public static final int desc_fun_10pow=0x7f0d0011;
    /**
     * Content description for 'arccos' button. [CHAR_LIMIT=NONE]
     */
    public static final int desc_fun_arccos=0x7f0d0012;
    /**
     * Content description for 'arcsin' button. [CHAR_LIMIT=NONE]
     */
    public static final int desc_fun_arcsin=0x7f0d0013;
    /**
     * Content description for 'arctan' button. [CHAR_LIMIT=NONE]
     */
    public static final int desc_fun_arctan=0x7f0d0014;
    /**
     * Content description for 'cos' button. [CHAR_LIMIT=NONE]
     */
    public static final int desc_fun_cos=0x7f0d0015;
    /**
     * Content description for e^ (exponential function) button. [CHAR_LIMIT=NONE]
     */
    public static final int desc_fun_exp=0x7f0d0016;
    /**
     * Content description for 'ln' button. [CHAR_LIMIT=NONE]
     */
    public static final int desc_fun_ln=0x7f0d0017;
    /**
     * Content description for 'log' button. [CHAR_LIMIT=NONE]
     */
    public static final int desc_fun_log=0x7f0d0018;
    /**
     * Content description for 'sin' button. [CHAR_LIMIT=NONE]
     */
    public static final int desc_fun_sin=0x7f0d0019;
    /**
     * Content description for 'tan' button. [CHAR_LIMIT=NONE]
     */
    public static final int desc_fun_tan=0x7f0d001a;
    /**
     * Content description for "inv" button to show inverse functions. [CHAR_LIMIT=NONE]
     */
    public static final int desc_inv_off=0x7f0d001b;
    /**
     * Content description for "inv" button to hide inverse functions. [CHAR_LIMIT=NONE]
     */
    public static final int desc_inv_on=0x7f0d001c;
    /**
     * Content description for '(' button. [CHAR_LIMIT=NONE]
     */
    public static final int desc_lparen=0x7f0d001d;
    /**
     * Content description for degree mode. [CHAR_LIMIT=NONE]
     */
    public static final int desc_mode_deg=0x7f0d001e;
    /**
     * Content description for radian mode. [CHAR_LIMIT=NONE]
     */
    public static final int desc_mode_rad=0x7f0d001f;
    /**
     * Action bar navigate up description in history page. [CHAR_LIMIT=40]
     */
    public static final int desc_navigate_up=0x7f0d0020;
    /**
     * Content description for the numeric/operation pad when slide-able. [CHAR_LIMIT=NONE]
     */
    public static final int desc_num_pad=0x7f0d0021;
    /**
     * Content description for '+' button. [CHAR_LIMIT=NONE]
     */
    public static final int desc_op_add=0x7f0d0022;
    /**
     * Content description for '÷' button. [CHAR_LIMIT=NONE]
     */
    public static final int desc_op_div=0x7f0d0023;
    /**
     * Content description for '!' button. [CHAR_LIMIT=NONE]
     */
    public static final int desc_op_fact=0x7f0d0024;
    /**
     * Content description for '×' button. [CHAR_LIMIT=NONE]
     */
    public static final int desc_op_mul=0x7f0d0025;
    /**
     * Content description for '%' button. [CHAR_LIMIT=NONE]
     */
    public static final int desc_op_pct=0x7f0d0026;
    /**
     * Content description for '^' button. [CHAR_LIMIT=NONE]
     */
    public static final int desc_op_pow=0x7f0d0027;
    /**
     * Content description for ^2 button. This button is used to square the previously entered
     * number. E.g. 3<^2> would yield 9.
     * [CHAR_LIMIT=NONE]
     */
    public static final int desc_op_sqr=0x7f0d0028;
    /**
     * Content description for '√' button. [CHAR_LIMIT=NONE]
     */
    public static final int desc_op_sqrt=0x7f0d0029;
    /**
     * Content description for '-' button. [CHAR_LIMIT=NONE]
     */
    public static final int desc_op_sub=0x7f0d002a;
    /**
     * Content description for result field when it is empty. [CHAR_LIMIT=NONE]
     */
    public static final int desc_result=0x7f0d002b;
    /**
     * Content description for ')' button. [CHAR_LIMIT=NONE]
     */
    public static final int desc_rparen=0x7f0d002c;
    /**
     * Content description for switch to degree button. [CHAR_LIMIT=NONE]
     */
    public static final int desc_switch_deg=0x7f0d002d;
    /**
     * Content description for switch to radian button. [CHAR_LIMIT=NONE]
     */
    public static final int desc_switch_rad=0x7f0d002e;
    /**
     * Message for alert dialog when user is about to clear history and memory. [CHAR_LIMIT=NONE]
     */
    public static final int dialog_clear=0x7f0d002f;
    /**
     * Title for alert dialog when calculation takes too long (timeout). [CHAR_LIMIT=30]
     */
    public static final int dialog_timeout=0x7f0d0030;
    /**
     * Decimal representation of zero (e.g. "0", "10", "1.0", "1e0"). [CHAR_LIMIT=1]
     */
    public static final int digit_0=0x7f0d0031;
    /**
     * Decimal representation of one (e.g. "1", "11", "1.1", "1e1"). [CHAR_LIMIT=1]
     */
    public static final int digit_1=0x7f0d0032;
    /**
     * Decimal representation of two (e.g. "2", "22", "2.2", "2e2"). [CHAR_LIMIT=1]
     */
    public static final int digit_2=0x7f0d0033;
    /**
     * Decimal representation of three (e.g. "3", "33", "3.3", "3e3"). [CHAR_LIMIT=1]
     */
    public static final int digit_3=0x7f0d0034;
    /**
     * Decimal representation of four (e.g. "4", "44", "4.4", "4e4"). [CHAR_LIMIT=1]
     */
    public static final int digit_4=0x7f0d0035;
    /**
     * Decimal representation of five (e.g. "5", "55", "5.5", "5e5"). [CHAR_LIMIT=1]
     */
    public static final int digit_5=0x7f0d0036;
    /**
     * Decimal representation of six (e.g. "6", "66", "6.6", "6e6"). [CHAR_LIMIT=1]
     */
    public static final int digit_6=0x7f0d0037;
    /**
     * Decimal representation of seven (e.g. "7", "77", "7.7", "7e7"). [CHAR_LIMIT=1]
     */
    public static final int digit_7=0x7f0d0038;
    /**
     * Decimal representation of eight (e.g. "8", "88", "8.8", "8e8"). [CHAR_LIMIT=1]
     */
    public static final int digit_8=0x7f0d0039;
    /**
     * Decimal representation of eight (e.g. "9", "99", "9.9", "9e9"). [CHAR_LIMIT=1]
     */
    public static final int digit_9=0x7f0d003a;
    /**
     * Button label to dismiss informative text message. [CHAR_LIMIT=40]
     */
    public static final int dismiss=0x7f0d003b;
    /**
     * Equals button (e.g. "1 + 2 = ?"). [CHAR_LIMIT=1]
     */
    public static final int eq=0x7f0d003c;
    /**
     * Error displayed when evaluation is manually aborted. [CHAR_LIMIT=20]
     */
    public static final int error_aborted=0x7f0d003d;
    /**
     * Error displayed when expression evaluates to an undefined result. [CHAR_LIMIT=20]
     */
    public static final int error_nan=0x7f0d003e;
    /**
     * Error displayed when excessive precision is required. [CHAR_LIMIT=20]
     */
    public static final int error_overflow=0x7f0d003f;
    /**
     * Error displayed when expression contains a syntax error. [CHAR_LIMIT=20]
     */
    public static final int error_syntax=0x7f0d0040;
    /**
     * Error displayed when division by zero is detected.
     * If the translation does not fit within the given limit, then a shortened version must
     * be used, e.g. "Division by 0". Exceeding the limit will result in a truncated string.
     * [CHAR_LIMIT=20]
     */
    public static final int error_zero_divide=0x7f0d0041;
    /**
     * Appended indicator (for "leading" display) that result is exact. [CHAR_LIMIT=NONE]
     */
    public static final int exact=0x7f0d0042;
    /**
     * Abbrev. name of exponential function in formula.
     */
    public static final int exponential=0x7f0d0043;
    /**
     * Abbrev. name of base 10 exponential function (e.g. "10^6"). [CHAR_LIMIT=5]
     */
    public static final int fun_10pow=0x7f0d0044;
    /**
     * Abbrev. name of cosine function (e.g. "arccos(π)"). [CHAR_LIMIT=5]
     */
    public static final int fun_arccos=0x7f0d0045;
    /**
     * Abbrev. name of sine function (e.g. "arcsin(π)"). [CHAR_LIMIT=5]
     */
    public static final int fun_arcsin=0x7f0d0046;
    /**
     * Abbrev. name of tangent function (e.g. "arctan(π)"). [CHAR_LIMIT=5]
     */
    public static final int fun_arctan=0x7f0d0047;
    /**
     * Abbrev. name of cosine function (e.g. "cos(π)"). [CHAR_LIMIT=4]
     */
    public static final int fun_cos=0x7f0d0048;
    /**
     * Abbrev. name of exponential function (e.g. "e^6"). [CHAR_LIMIT=5]
     */
    public static final int fun_exp=0x7f0d0049;
    /**
     * Natural logarithm function (e.g. "ln(2)"). [CHAR_LIMIT=4]
     */
    public static final int fun_ln=0x7f0d004a;
    /**
     * Logarithm function (e.g. "log(10)"). [CHAR_LIMIT=4]
     */
    public static final int fun_log=0x7f0d004b;
    /**
     * Abbrev. name of sine function (e.g. "sin(π)"). [CHAR_LIMIT=4]
     */
    public static final int fun_sin=0x7f0d004c;
    /**
     * Abbrev. name of tangent function (e.g. "tan(π)"). [CHAR_LIMIT=4]
     */
    public static final int fun_tan=0x7f0d004d;
    /**
     * Toggle button to show/hide inverse functions. [CHAR_LIMIT=4]
     */
    public static final int inv=0x7f0d004e;
    /**
     * Left parenthesis (e.g. "log(", "2 × (3 - 1)". [CHAR_LIMIT=1]
     */
    public static final int lparen=0x7f0d004f;
    /**
     * Item on Result context menu, which adds the current result to the number in memory.
     * [CHAR_LIMIT=2]
     */
    public static final int memory_add=0x7f0d0050;
    /**
     * Item on Formula context menu used to paste from the Memory into the edit field. [CHAR_LIMIT=2]
     */
    public static final int memory_recall=0x7f0d0051;
    /**
     * Item on Result context menu used to store the result in memory. [CHAR_LIMIT=2]
     */
    public static final int memory_store=0x7f0d0052;
    /**
     * Item on Result context menu, which subtracts the current result from the number in memory.
     * [CHAR_LIMIT=2]
     */
    public static final int memory_subtract=0x7f0d0053;
    /**
     * Menu option to clear calculation history and memory. [CHAR_LIMIT=40]
     */
    public static final int menu_clear_history=0x7f0d0054;
    /**
     * Menu option to display result as fraction. [CHAR_LIMIT=40]
     */
    public static final int menu_fraction=0x7f0d0055;
    /**
     * Menu option to access calculation history. [CHAR_LIMIT=40]
     */
    public static final int menu_history=0x7f0d0056;
    /**
     * Menu option to display result including leading digits. [CHAR_LIMIT=40]
     */
    public static final int menu_leading=0x7f0d0057;
    /**
     * Menu option to view the app's open source licenses. [CHAR_LIMIT=40]
     */
    public static final int menu_licenses=0x7f0d0058;
    /**
     * Abbrev. name of degree mode [CHAR_LIMIT=4]
     */
    public static final int mode_deg=0x7f0d0059;
    /**
     * Abbrev. name of radian mode. [CHAR_LIMIT=4]
     */
    public static final int mode_rad=0x7f0d005a;
    /**
     * Placeholder string when there is no history to be shown. [CHAR_LIMIT=40]
     */
    public static final int no_history=0x7f0d005b;
    /**
     * Button label to allow future computations with a longer timeout.
     * When evaluating a result takes too long, we show a "timed out" dialog. This button allows
     * the user to increase the maximum amount of time we attempt to evaluate the expression before
     * "timing out".
     * [CHAR_LIMIT=40]
     */
    public static final int ok_remove_timeout=0x7f0d005c;
    /**
     * Addition operator (e.g. "1 + 2"). [CHAR_LIMIT=1]
     */
    public static final int op_add=0x7f0d005d;
    /**
     * Divide operator (e.g. "1 ÷ 2"). [CHAR_LIMIT=1]
     */
    public static final int op_div=0x7f0d005e;
    /**
     * Factorial operator (e.g. "2!"). [CHAR_LIMIT=1]
     */
    public static final int op_fact=0x7f0d005f;
    /**
     * Multiply operator (e.g. "1 × 2"). [CHAR_LIMIT=1]
     */
    public static final int op_mul=0x7f0d0060;
    /**
     * Percent operator (e.g. "25%"). [CHAR_LIMIT=1]
     */
    public static final int op_pct=0x7f0d0061;
    /**
     * Power operator (e.g. "1 ^ 2"). [CHAR_LIMIT=1]
     */
    public static final int op_pow=0x7f0d0062;
    /**
     * Abbrev. name of suffix square function on key (e.g. "17^2"). [CHAR_LIMIT=5]
     */
    public static final int op_sqr=0x7f0d0063;
    /**
     * Square root operator (e.g. "√1"). [CHAR_LIMIT=1]
     */
    public static final int op_sqrt=0x7f0d0064;
    /**
     * Subtraction operator (e.g. "1 - 2"). [CHAR_LIMIT=1]
     */
    public static final int op_sub=0x7f0d0065;
    /**
     * Right parenthesis (e.g. "log(2)", "(3 - 1) × 2". [CHAR_LIMIT=1]
     */
    public static final int rparen=0x7f0d0066;
    /**
     * Abbrev. name of suffix square function in formula.
     * "^2" does not work, since it blends into a later constant.
     */
    public static final int squared=0x7f0d0067;
    public static final int status_bar_notification_info_overflow=0x7f0d0068;
    /**
     * Toast shown when text is copied to the clipboard. [CHAR_LIMIT=40]
     */
    public static final int text_copied_toast=0x7f0d0069;
    /**
     * Dialog message when a computation times out. [CHAR_LIMIT=NONE]
     */
    public static final int timeout=0x7f0d006a;
    /**
     * Title for "current expression" in history page. [CHAR_LIMIT=40]
     */
    public static final int title_current_expression=0x7f0d006b;
    /**
     * Action bar title in history page. [CHAR_LIMIT=40]
     */
    public static final int title_history=0x7f0d006c;
  }
  public static final class style {
    public static final int DisplayTextStyle=0x7f0e0000;
    public static final int DisplayTextStyle_Formula=0x7f0e0001;
    public static final int DisplayTextStyle_Result=0x7f0e0002;
    public static final int HistoryItemTextStyle=0x7f0e0003;
    public static final int PadButtonStyle=0x7f0e0004;
    public static final int PadButtonStyle_Advanced=0x7f0e0005;
    public static final int PadButtonStyle_Advanced_Text=0x7f0e0006;
    public static final int PadButtonStyle_Numeric=0x7f0e0007;
    public static final int PadButtonStyle_Numeric_Equals=0x7f0e0008;
    public static final int PadButtonStyle_Operator=0x7f0e0009;
    public static final int PadButtonStyle_Operator_Text=0x7f0e000a;
    public static final int PadLayoutStyle=0x7f0e000b;
    public static final int PadLayoutStyle_Advanced=0x7f0e000c;
    public static final int PadLayoutStyle_Numeric=0x7f0e000d;
    public static final int PadLayoutStyle_Operator=0x7f0e000e;
    public static final int TextAppearance_Compat_Notification=0x7f0e000f;
    public static final int TextAppearance_Compat_Notification_Info=0x7f0e0010;
    public static final int TextAppearance_Compat_Notification_Info_Media=0x7f0e0011;
    public static final int TextAppearance_Compat_Notification_Line2=0x7f0e0012;
    public static final int TextAppearance_Compat_Notification_Line2_Media=0x7f0e0013;
    public static final int TextAppearance_Compat_Notification_Media=0x7f0e0014;
    public static final int TextAppearance_Compat_Notification_Time=0x7f0e0015;
    public static final int TextAppearance_Compat_Notification_Time_Media=0x7f0e0016;
    public static final int TextAppearance_Compat_Notification_Title=0x7f0e0017;
    public static final int TextAppearance_Compat_Notification_Title_Media=0x7f0e0018;
    public static final int Theme=0x7f0e0019;
    public static final int Theme_Calculator=0x7f0e001a;
    public static final int Theme_Licenses=0x7f0e001b;
    public static final int Theme_Toolbar=0x7f0e001c;
    public static final int Widget_Compat_NotificationActionContainer=0x7f0e001d;
    public static final int Widget_Compat_NotificationActionText=0x7f0e001e;
    public static final int Widget_Support_CoordinatorLayout=0x7f0e001f;
  }
  public static final class styleable {
    /**
     * Attributes that can be used with a CalculatorFormula.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #CalculatorFormula_maxTextSize com.android.calculator2:maxTextSize}</code></td><td></td></tr>
     * <tr><td><code>{@link #CalculatorFormula_minTextSize com.android.calculator2:minTextSize}</code></td><td></td></tr>
     * <tr><td><code>{@link #CalculatorFormula_stepTextSize com.android.calculator2:stepTextSize}</code></td><td></td></tr>
     * </table>
     * @see #CalculatorFormula_maxTextSize
     * @see #CalculatorFormula_minTextSize
     * @see #CalculatorFormula_stepTextSize
     */
    public static final int[] CalculatorFormula={
      0x7f040026, 0x7f040027, 0x7f040033
    };
    /**
     * <p>This symbol is the offset where the {@link com.android.calculator2.R.attr#maxTextSize}
     * attribute's value can be found in the {@link #CalculatorFormula} array.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name com.android.calculator2:maxTextSize
     */
    public static final int CalculatorFormula_maxTextSize=0;
    /**
     * <p>This symbol is the offset where the {@link com.android.calculator2.R.attr#minTextSize}
     * attribute's value can be found in the {@link #CalculatorFormula} array.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name com.android.calculator2:minTextSize
     */
    public static final int CalculatorFormula_minTextSize=1;
    /**
     * <p>This symbol is the offset where the {@link com.android.calculator2.R.attr#stepTextSize}
     * attribute's value can be found in the {@link #CalculatorFormula} array.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name com.android.calculator2:stepTextSize
     */
    public static final int CalculatorFormula_stepTextSize=2;
    /**
     * Attributes that can be used with a Capability.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Capability_queryPatterns com.android.calculator2:queryPatterns}</code></td><td>Resource reference to the string array of query patterns for a custom capability.</td></tr>
     * <tr><td><code>{@link #Capability_shortcutMatchRequired com.android.calculator2:shortcutMatchRequired}</code></td><td>Indicates whether a parameter in a capability template can only contain a matched
     * shortcut id and not an arbitrary string.</td></tr>
     * </table>
     * @see #Capability_queryPatterns
     * @see #Capability_shortcutMatchRequired
     */
    public static final int[] Capability={
      0x7f04002a, 0x7f04002f
    };
    /**
     * <p>
     * @attr description
     * Resource reference to the string array of query patterns for a custom capability.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.calculator2:queryPatterns
     */
    public static final int Capability_queryPatterns=0;
    /**
     * <p>
     * @attr description
     * Indicates whether a parameter in a capability template can only contain a matched
     * shortcut id and not an arbitrary string.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name com.android.calculator2:shortcutMatchRequired
     */
    public static final int Capability_shortcutMatchRequired=1;
    /**
     * Attributes that can be used with a ColorStateListItem.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #ColorStateListItem_android_color android:color}</code></td><td></td></tr>
     * <tr><td><code>{@link #ColorStateListItem_android_alpha android:alpha}</code></td><td></td></tr>
     * <tr><td><code>{@link #ColorStateListItem_alpha com.android.calculator2:alpha}</code></td><td>Alpha multiplier applied to the base color.</td></tr>
     * </table>
     * @see #ColorStateListItem_android_color
     * @see #ColorStateListItem_android_alpha
     * @see #ColorStateListItem_alpha
     */
    public static final int[] ColorStateListItem={
      0x010101a5, 0x0101031f, 0x7f040001
    };
    /**
     * <p>
     * @attr description
     * Base color for this state.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:color
     */
    public static final int ColorStateListItem_android_color=0;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#alpha}
     * attribute's value can be found in the {@link #ColorStateListItem} array.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:alpha
     */
    public static final int ColorStateListItem_android_alpha=1;
    /**
     * <p>
     * @attr description
     * Alpha multiplier applied to the base color.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name com.android.calculator2:alpha
     */
    public static final int ColorStateListItem_alpha=2;
    /**
     * Attributes that can be used with a CoordinatorLayout.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #CoordinatorLayout_keylines com.android.calculator2:keylines}</code></td><td>A reference to an array of integers representing the
     * locations of horizontal keylines in dp from the starting edge.</td></tr>
     * <tr><td><code>{@link #CoordinatorLayout_statusBarBackground com.android.calculator2:statusBarBackground}</code></td><td>Drawable to display behind the status bar when the view is set to draw behind it.</td></tr>
     * </table>
     * @see #CoordinatorLayout_keylines
     * @see #CoordinatorLayout_statusBarBackground
     */
    public static final int[] CoordinatorLayout={
      0x7f040017, 0x7f040032
    };
    /**
     * <p>
     * @attr description
     * A reference to an array of integers representing the
     * locations of horizontal keylines in dp from the starting edge.
     * Child views can refer to these keylines for alignment using
     * layout_keyline="index" where index is a 0-based index into
     * this array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.calculator2:keylines
     */
    public static final int CoordinatorLayout_keylines=0;
    /**
     * <p>
     * @attr description
     * Drawable to display behind the status bar when the view is set to draw behind it.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name com.android.calculator2:statusBarBackground
     */
    public static final int CoordinatorLayout_statusBarBackground=1;
    /**
     * Attributes that can be used with a CoordinatorLayout_Layout.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #CoordinatorLayout_Layout_android_layout_gravity android:layout_gravity}</code></td><td></td></tr>
     * <tr><td><code>{@link #CoordinatorLayout_Layout_layout_anchor com.android.calculator2:layout_anchor}</code></td><td>The id of an anchor view that this view should position relative to.</td></tr>
     * <tr><td><code>{@link #CoordinatorLayout_Layout_layout_anchorGravity com.android.calculator2:layout_anchorGravity}</code></td><td>Specifies how an object should position relative to an anchor, on both the X and Y axes,
     * within its parent's bounds.</td></tr>
     * <tr><td><code>{@link #CoordinatorLayout_Layout_layout_behavior com.android.calculator2:layout_behavior}</code></td><td>The class name of a Behavior class defining special runtime behavior
     * for this child view.</td></tr>
     * <tr><td><code>{@link #CoordinatorLayout_Layout_layout_dodgeInsetEdges com.android.calculator2:layout_dodgeInsetEdges}</code></td><td>Specifies how this view dodges the inset edges of the CoordinatorLayout.</td></tr>
     * <tr><td><code>{@link #CoordinatorLayout_Layout_layout_insetEdge com.android.calculator2:layout_insetEdge}</code></td><td>Specifies how this view insets the CoordinatorLayout and make some other views
     * dodge it.</td></tr>
     * <tr><td><code>{@link #CoordinatorLayout_Layout_layout_keyline com.android.calculator2:layout_keyline}</code></td><td>The index of a keyline this view should position relative to.</td></tr>
     * </table>
     * @see #CoordinatorLayout_Layout_android_layout_gravity
     * @see #CoordinatorLayout_Layout_layout_anchor
     * @see #CoordinatorLayout_Layout_layout_anchorGravity
     * @see #CoordinatorLayout_Layout_layout_behavior
     * @see #CoordinatorLayout_Layout_layout_dodgeInsetEdges
     * @see #CoordinatorLayout_Layout_layout_insetEdge
     * @see #CoordinatorLayout_Layout_layout_keyline
     */
    public static final int[] CoordinatorLayout_Layout={
      0x010100b3, 0x7f040019, 0x7f04001a, 0x7f04001b, 
      0x7f04001f, 0x7f040021, 0x7f040022
    };
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#layout_gravity}
     * attribute's value can be found in the {@link #CoordinatorLayout_Layout} array.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td></td></tr>
     * <tr><td>center</td><td>11</td><td></td></tr>
     * <tr><td>center_horizontal</td><td>1</td><td></td></tr>
     * <tr><td>center_vertical</td><td>10</td><td></td></tr>
     * <tr><td>clip_horizontal</td><td>8</td><td></td></tr>
     * <tr><td>clip_vertical</td><td>80</td><td></td></tr>
     * <tr><td>end</td><td>800005</td><td></td></tr>
     * <tr><td>fill</td><td>77</td><td></td></tr>
     * <tr><td>fill_horizontal</td><td>7</td><td></td></tr>
     * <tr><td>fill_vertical</td><td>70</td><td></td></tr>
     * <tr><td>left</td><td>3</td><td></td></tr>
     * <tr><td>right</td><td>5</td><td></td></tr>
     * <tr><td>start</td><td>800003</td><td></td></tr>
     * <tr><td>top</td><td>30</td><td></td></tr>
     * </table>
     *
     * @attr name android:layout_gravity
     */
    public static final int CoordinatorLayout_Layout_android_layout_gravity=0;
    /**
     * <p>
     * @attr description
     * The id of an anchor view that this view should position relative to.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.calculator2:layout_anchor
     */
    public static final int CoordinatorLayout_Layout_layout_anchor=1;
    /**
     * <p>
     * @attr description
     * Specifies how an object should position relative to an anchor, on both the X and Y axes,
     * within its parent's bounds.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
     * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
     * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
     * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
     * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the horizontal gravity: a left gravity will clip the right
     * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
     * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the vertical gravity: a top gravity will clip the bottom
     * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
     * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
     * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
     * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
     * </table>
     *
     * @attr name com.android.calculator2:layout_anchorGravity
     */
    public static final int CoordinatorLayout_Layout_layout_anchorGravity=2;
    /**
     * <p>
     * @attr description
     * The class name of a Behavior class defining special runtime behavior
     * for this child view.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name com.android.calculator2:layout_behavior
     */
    public static final int CoordinatorLayout_Layout_layout_behavior=3;
    /**
     * <p>
     * @attr description
     * Specifies how this view dodges the inset edges of the CoordinatorLayout.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>all</td><td>77</td><td>Dodge all the inset edges.</td></tr>
     * <tr><td>bottom</td><td>50</td><td>Dodge the bottom inset edge.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Dodge the end inset edge.</td></tr>
     * <tr><td>left</td><td>3</td><td>Dodge the left inset edge.</td></tr>
     * <tr><td>none</td><td>0</td><td>Don't dodge any edges</td></tr>
     * <tr><td>right</td><td>5</td><td>Dodge the right inset edge.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Dodge the start inset edge.</td></tr>
     * <tr><td>top</td><td>30</td><td>Dodge the top inset edge.</td></tr>
     * </table>
     *
     * @attr name com.android.calculator2:layout_dodgeInsetEdges
     */
    public static final int CoordinatorLayout_Layout_layout_dodgeInsetEdges=4;
    /**
     * <p>
     * @attr description
     * Specifies how this view insets the CoordinatorLayout and make some other views
     * dodge it.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Inset the bottom edge.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Inset the end edge.</td></tr>
     * <tr><td>left</td><td>3</td><td>Inset the left edge.</td></tr>
     * <tr><td>none</td><td>0</td><td>Don't inset.</td></tr>
     * <tr><td>right</td><td>5</td><td>Inset the right edge.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Inset the start edge.</td></tr>
     * <tr><td>top</td><td>30</td><td>Inset the top edge.</td></tr>
     * </table>
     *
     * @attr name com.android.calculator2:layout_insetEdge
     */
    public static final int CoordinatorLayout_Layout_layout_insetEdge=5;
    /**
     * <p>
     * @attr description
     * The index of a keyline this view should position relative to.
     * android:layout_gravity will affect how the view aligns to the
     * specified keyline.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.calculator2:layout_keyline
     */
    public static final int CoordinatorLayout_Layout_layout_keyline=6;
    /**
     * Attributes that can be used with a DrawerLayout.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #DrawerLayout_elevation com.android.calculator2:elevation}</code></td><td></td></tr>
     * </table>
     * @see #DrawerLayout_elevation
     */
    public static final int[] DrawerLayout={
      0x7f040006
    };
    /**
     * <p>
     * @attr description
     * The height difference between the drawer and the base surface. Only takes effect on API 21 and above
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name com.android.calculator2:elevation
     */
    public static final int DrawerLayout_elevation=0;
    /**
     * Attributes that can be used with a FontFamily.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #FontFamily_fontProviderAuthority com.android.calculator2:fontProviderAuthority}</code></td><td>The authority of the Font Provider to be used for the request.</td></tr>
     * <tr><td><code>{@link #FontFamily_fontProviderCerts com.android.calculator2:fontProviderCerts}</code></td><td>The sets of hashes for the certificates the provider should be signed with.</td></tr>
     * <tr><td><code>{@link #FontFamily_fontProviderFetchStrategy com.android.calculator2:fontProviderFetchStrategy}</code></td><td>The strategy to be used when fetching font data from a font provider in XML layouts.</td></tr>
     * <tr><td><code>{@link #FontFamily_fontProviderFetchTimeout com.android.calculator2:fontProviderFetchTimeout}</code></td><td>The length of the timeout during fetching.</td></tr>
     * <tr><td><code>{@link #FontFamily_fontProviderPackage com.android.calculator2:fontProviderPackage}</code></td><td>The package for the Font Provider to be used for the request.</td></tr>
     * <tr><td><code>{@link #FontFamily_fontProviderQuery com.android.calculator2:fontProviderQuery}</code></td><td>The query to be sent over to the provider.</td></tr>
     * <tr><td><code>{@link #FontFamily_fontProviderSystemFontFamily com.android.calculator2:fontProviderSystemFontFamily}</code></td><td>Provides the system font family name to check before downloading the font.</td></tr>
     * </table>
     * @see #FontFamily_fontProviderAuthority
     * @see #FontFamily_fontProviderCerts
     * @see #FontFamily_fontProviderFetchStrategy
     * @see #FontFamily_fontProviderFetchTimeout
     * @see #FontFamily_fontProviderPackage
     * @see #FontFamily_fontProviderQuery
     * @see #FontFamily_fontProviderSystemFontFamily
     */
    public static final int[] FontFamily={
      0x7f04000d, 0x7f04000e, 0x7f04000f, 0x7f040010, 
      0x7f040011, 0x7f040012, 0x7f040013
    };
    /**
     * <p>
     * @attr description
     * The authority of the Font Provider to be used for the request.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name com.android.calculator2:fontProviderAuthority
     */
    public static final int FontFamily_fontProviderAuthority=0;
    /**
     * <p>
     * @attr description
     * The sets of hashes for the certificates the provider should be signed with. This is
     * used to verify the identity of the provider, and is only required if the provider is not
     * part of the system image. This value may point to one list or a list of lists, where each
     * individual list represents one collection of signature hashes. Refer to your font provider's
     * documentation for these values.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.calculator2:fontProviderCerts
     */
    public static final int FontFamily_fontProviderCerts=1;
    /**
     * <p>
     * @attr description
     * The strategy to be used when fetching font data from a font provider in XML layouts.
     * This attribute is ignored when the resource is loaded from code, as it is equivalent to the
     * choice of API between {@link
     * androidx.core.content.res.ResourcesCompat#getFont(Context, int)} (blocking) and
     * {@link
     * androidx.core.content.res.ResourcesCompat#getFont(Context, int, FontCallback, Handler)}
     * (async).
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>async</td><td>1</td><td>The async font fetch works as follows.
     * First, check the local cache, then if the requeted font is not cached, trigger a
     * request the font and continue with layout inflation. Once the font fetch succeeds, the
     * target text view will be refreshed with the downloaded font data. The
     * fontProviderFetchTimeout will be ignored if async loading is specified.</td></tr>
     * <tr><td>blocking</td><td>0</td><td>The blocking font fetch works as follows.
     * First, check the local cache, then if the requested font is not cached, request the
     * font from the provider and wait until it is finished.  You can change the length of
     * the timeout by modifying fontProviderFetchTimeout.  If the timeout happens, the
     * default typeface will be used instead.</td></tr>
     * </table>
     *
     * @attr name com.android.calculator2:fontProviderFetchStrategy
     */
    public static final int FontFamily_fontProviderFetchStrategy=2;
    /**
     * <p>
     * @attr description
     * The length of the timeout during fetching.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>forever</td><td>ffffffff</td><td>A special value for the timeout. In this case, the blocking font fetching will not
     * timeout and wait until a reply is received from the font provider.</td></tr>
     * </table>
     *
     * @attr name com.android.calculator2:fontProviderFetchTimeout
     */
    public static final int FontFamily_fontProviderFetchTimeout=3;
    /**
     * <p>
     * @attr description
     * The package for the Font Provider to be used for the request. This is used to verify
     * the identity of the provider.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name com.android.calculator2:fontProviderPackage
     */
    public static final int FontFamily_fontProviderPackage=4;
    /**
     * <p>
     * @attr description
     * The query to be sent over to the provider. Refer to your font provider's documentation
     * on the format of this string.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name com.android.calculator2:fontProviderQuery
     */
    public static final int FontFamily_fontProviderQuery=5;
    /**
     * <p>
     * @attr description
     * Provides the system font family name to check before downloading the font. For
     * example if the fontProviderQuery asked for "Sans Serif", it is possible to define
     * fontProviderSystemFontFamily as "sans-serif" to tell the system to use "sans-serif" font
     * family if it exists on the system.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name com.android.calculator2:fontProviderSystemFontFamily
     */
    public static final int FontFamily_fontProviderSystemFontFamily=6;
    /**
     * Attributes that can be used with a FontFamilyFont.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #FontFamilyFont_android_font android:font}</code></td><td></td></tr>
     * <tr><td><code>{@link #FontFamilyFont_android_fontWeight android:fontWeight}</code></td><td></td></tr>
     * <tr><td><code>{@link #FontFamilyFont_android_fontStyle android:fontStyle}</code></td><td></td></tr>
     * <tr><td><code>{@link #FontFamilyFont_android_ttcIndex android:ttcIndex}</code></td><td></td></tr>
     * <tr><td><code>{@link #FontFamilyFont_android_fontVariationSettings android:fontVariationSettings}</code></td><td></td></tr>
     * <tr><td><code>{@link #FontFamilyFont_font com.android.calculator2:font}</code></td><td>The reference to the font file to be used.</td></tr>
     * <tr><td><code>{@link #FontFamilyFont_fontStyle com.android.calculator2:fontStyle}</code></td><td>The style of the given font file.</td></tr>
     * <tr><td><code>{@link #FontFamilyFont_fontVariationSettings com.android.calculator2:fontVariationSettings}</code></td><td>The variation settings to be applied to the font.</td></tr>
     * <tr><td><code>{@link #FontFamilyFont_fontWeight com.android.calculator2:fontWeight}</code></td><td>The weight of the given font file.</td></tr>
     * <tr><td><code>{@link #FontFamilyFont_ttcIndex com.android.calculator2:ttcIndex}</code></td><td>The index of the font in the tcc font file.</td></tr>
     * </table>
     * @see #FontFamilyFont_android_font
     * @see #FontFamilyFont_android_fontWeight
     * @see #FontFamilyFont_android_fontStyle
     * @see #FontFamilyFont_android_ttcIndex
     * @see #FontFamilyFont_android_fontVariationSettings
     * @see #FontFamilyFont_font
     * @see #FontFamilyFont_fontStyle
     * @see #FontFamilyFont_fontVariationSettings
     * @see #FontFamilyFont_fontWeight
     * @see #FontFamilyFont_ttcIndex
     */
    public static final int[] FontFamilyFont={
      0x01010532, 0x01010533, 0x0101053f, 0x0101056f, 
      0x01010570, 0x7f04000c, 0x7f040014, 0x7f040015, 
      0x7f040016, 0x7f040035
    };
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#font}
     * attribute's value can be found in the {@link #FontFamilyFont} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:font
     */
    public static final int FontFamilyFont_android_font=0;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#fontWeight}
     * attribute's value can be found in the {@link #FontFamilyFont} array.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:fontWeight
     */
    public static final int FontFamilyFont_android_fontWeight=1;
    /**
     * <p>
     * @attr description
     * References to the framework attrs
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>italic</td><td>1</td><td></td></tr>
     * <tr><td>normal</td><td>0</td><td></td></tr>
     * </table>
     *
     * @attr name android:fontStyle
     */
    public static final int FontFamilyFont_android_fontStyle=2;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#ttcIndex}
     * attribute's value can be found in the {@link #FontFamilyFont} array.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name android:ttcIndex
     */
    public static final int FontFamilyFont_android_ttcIndex=3;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#fontVariationSettings}
     * attribute's value can be found in the {@link #FontFamilyFont} array.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:fontVariationSettings
     */
    public static final int FontFamilyFont_android_fontVariationSettings=4;
    /**
     * <p>
     * @attr description
     * The reference to the font file to be used. This should be a file in the res/font folder
     * and should therefore have an R reference value. E.g. @font/myfont
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.calculator2:font
     */
    public static final int FontFamilyFont_font=5;
    /**
     * <p>
     * @attr description
     * The style of the given font file. This will be used when the font is being loaded into
     * the font stack and will override any style information in the font's header tables. If
     * unspecified, the value in the font's header tables will be used.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>italic</td><td>1</td><td></td></tr>
     * <tr><td>normal</td><td>0</td><td></td></tr>
     * </table>
     *
     * @attr name com.android.calculator2:fontStyle
     */
    public static final int FontFamilyFont_fontStyle=6;
    /**
     * <p>
     * @attr description
     * The variation settings to be applied to the font. The string should be in the following
     * format: "'tag1' value1, 'tag2' value2, ...". If the default variation settings should be
     * used, or the font used does not support variation settings, this attribute needs not be
     * specified.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name com.android.calculator2:fontVariationSettings
     */
    public static final int FontFamilyFont_fontVariationSettings=7;
    /**
     * <p>
     * @attr description
     * The weight of the given font file. This will be used when the font is being loaded into
     * the font stack and will override any weight information in the font's header tables. Must
     * be a positive number, a multiple of 100, and between 100 and 900, inclusive. The most
     * common values are 400 for regular weight and 700 for bold weight. If unspecified, the value
     * in the font's header tables will be used.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.calculator2:fontWeight
     */
    public static final int FontFamilyFont_fontWeight=8;
    /**
     * <p>
     * @attr description
     * The index of the font in the tcc font file. If the font file referenced is not in the
     * tcc format, this attribute needs not be specified.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.calculator2:ttcIndex
     */
    public static final int FontFamilyFont_ttcIndex=9;
    /**
     * Attributes that can be used with a Fragment.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #Fragment_android_name android:name}</code></td><td></td></tr>
     * <tr><td><code>{@link #Fragment_android_id android:id}</code></td><td></td></tr>
     * <tr><td><code>{@link #Fragment_android_tag android:tag}</code></td><td></td></tr>
     * </table>
     * @see #Fragment_android_name
     * @see #Fragment_android_id
     * @see #Fragment_android_tag
     */
    public static final int[] Fragment={
      0x01010003, 0x010100d0, 0x010100d1
    };
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#name}
     * attribute's value can be found in the {@link #Fragment} array.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int Fragment_android_name=0;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#id}
     * attribute's value can be found in the {@link #Fragment} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name android:id
     */
    public static final int Fragment_android_id=1;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#tag}
     * attribute's value can be found in the {@link #Fragment} array.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:tag
     */
    public static final int Fragment_android_tag=2;
    /**
     * Attributes that can be used with a FragmentContainerView.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #FragmentContainerView_android_name android:name}</code></td><td></td></tr>
     * <tr><td><code>{@link #FragmentContainerView_android_tag android:tag}</code></td><td></td></tr>
     * </table>
     * @see #FragmentContainerView_android_name
     * @see #FragmentContainerView_android_tag
     */
    public static final int[] FragmentContainerView={
      0x01010003, 0x010100d1
    };
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#name}
     * attribute's value can be found in the {@link #FragmentContainerView} array.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:name
     */
    public static final int FragmentContainerView_android_name=0;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#tag}
     * attribute's value can be found in the {@link #FragmentContainerView} array.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name android:tag
     */
    public static final int FragmentContainerView_android_tag=1;
    /**
     * Attributes that can be used with a GradientColor.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #GradientColor_android_startColor android:startColor}</code></td><td></td></tr>
     * <tr><td><code>{@link #GradientColor_android_endColor android:endColor}</code></td><td></td></tr>
     * <tr><td><code>{@link #GradientColor_android_type android:type}</code></td><td></td></tr>
     * <tr><td><code>{@link #GradientColor_android_centerX android:centerX}</code></td><td></td></tr>
     * <tr><td><code>{@link #GradientColor_android_centerY android:centerY}</code></td><td></td></tr>
     * <tr><td><code>{@link #GradientColor_android_gradientRadius android:gradientRadius}</code></td><td></td></tr>
     * <tr><td><code>{@link #GradientColor_android_tileMode android:tileMode}</code></td><td></td></tr>
     * <tr><td><code>{@link #GradientColor_android_centerColor android:centerColor}</code></td><td></td></tr>
     * <tr><td><code>{@link #GradientColor_android_startX android:startX}</code></td><td></td></tr>
     * <tr><td><code>{@link #GradientColor_android_startY android:startY}</code></td><td></td></tr>
     * <tr><td><code>{@link #GradientColor_android_endX android:endX}</code></td><td></td></tr>
     * <tr><td><code>{@link #GradientColor_android_endY android:endY}</code></td><td></td></tr>
     * </table>
     * @see #GradientColor_android_startColor
     * @see #GradientColor_android_endColor
     * @see #GradientColor_android_type
     * @see #GradientColor_android_centerX
     * @see #GradientColor_android_centerY
     * @see #GradientColor_android_gradientRadius
     * @see #GradientColor_android_tileMode
     * @see #GradientColor_android_centerColor
     * @see #GradientColor_android_startX
     * @see #GradientColor_android_startY
     * @see #GradientColor_android_endX
     * @see #GradientColor_android_endY
     */
    public static final int[] GradientColor={
      0x0101019d, 0x0101019e, 0x010101a1, 0x010101a2, 
      0x010101a3, 0x010101a4, 0x01010201, 0x0101020b, 
      0x01010510, 0x01010511, 0x01010512, 0x01010513
    };
    /**
     * <p>
     * @attr description
     * Start color of the gradient.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:startColor
     */
    public static final int GradientColor_android_startColor=0;
    /**
     * <p>
     * @attr description
     * End color of the gradient.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:endColor
     */
    public static final int GradientColor_android_endColor=1;
    /**
     * <p>
     * @attr description
     * Type of gradient. The default type is linear.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>linear</td><td>0</td><td></td></tr>
     * <tr><td>radial</td><td>1</td><td></td></tr>
     * <tr><td>sweep</td><td>2</td><td></td></tr>
     * </table>
     *
     * @attr name android:type
     */
    public static final int GradientColor_android_type=2;
    /**
     * <p>
     * @attr description
     * X coordinate of the center of the gradient within the path.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:centerX
     */
    public static final int GradientColor_android_centerX=3;
    /**
     * <p>
     * @attr description
     * Y coordinate of the center of the gradient within the path.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:centerY
     */
    public static final int GradientColor_android_centerY=4;
    /**
     * <p>
     * @attr description
     * Radius of the gradient, used only with radial gradient.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>May be a fractional value, which is a floating point number appended with
     * either % or %p, such as "<code>14.5%</code>".
     * The % suffix always means a percentage of the base size;
     * the optional %p suffix provides a size relative to some parent container.
     *
     * @attr name android:gradientRadius
     */
    public static final int GradientColor_android_gradientRadius=5;
    /**
     * <p>
     * @attr description
     * Defines the tile mode of the gradient. SweepGradient doesn't support tiling.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>clamp</td><td>0</td><td></td></tr>
     * <tr><td>disabled</td><td>ffffffff</td><td></td></tr>
     * <tr><td>mirror</td><td>2</td><td></td></tr>
     * <tr><td>repeat</td><td>1</td><td></td></tr>
     * </table>
     *
     * @attr name android:tileMode
     */
    public static final int GradientColor_android_tileMode=6;
    /**
     * <p>
     * @attr description
     * Optional center color.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:centerColor
     */
    public static final int GradientColor_android_centerColor=7;
    /**
     * <p>
     * @attr description
     * X coordinate of the start point origin of the gradient.
     * Defined in same coordinates as the path itself
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:startX
     */
    public static final int GradientColor_android_startX=8;
    /**
     * <p>
     * @attr description
     * Y coordinate of the start point of the gradient within the shape.
     * Defined in same coordinates as the path itself
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:startY
     */
    public static final int GradientColor_android_startY=9;
    /**
     * <p>
     * @attr description
     * X coordinate of the end point origin of the gradient.
     * Defined in same coordinates as the path itself
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:endX
     */
    public static final int GradientColor_android_endX=10;
    /**
     * <p>
     * @attr description
     * Y coordinate of the end point of the gradient within the shape.
     * Defined in same coordinates as the path itself
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:endY
     */
    public static final int GradientColor_android_endY=11;
    /**
     * Attributes that can be used with a GradientColorItem.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #GradientColorItem_android_color android:color}</code></td><td></td></tr>
     * <tr><td><code>{@link #GradientColorItem_android_offset android:offset}</code></td><td></td></tr>
     * </table>
     * @see #GradientColorItem_android_color
     * @see #GradientColorItem_android_offset
     */
    public static final int[] GradientColorItem={
      0x010101a5, 0x01010514
    };
    /**
     * <p>
     * @attr description
     * The current color for the offset inside the gradient.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name android:color
     */
    public static final int GradientColorItem_android_color=0;
    /**
     * <p>
     * @attr description
     * The offset (or ratio) of this current color item inside the gradient.
     * The value is only meaningful when it is between 0 and 1.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name android:offset
     */
    public static final int GradientColorItem_android_offset=1;
    /**
     * Attributes that can be used with a GridLayout.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #GridLayout_alignmentMode com.android.calculator2:alignmentMode}</code></td><td>When set to alignMargins, causes alignment to take place between the outer
     * boundary of a view, as defined by its margins.</td></tr>
     * <tr><td><code>{@link #GridLayout_columnCount com.android.calculator2:columnCount}</code></td><td>The maximum number of columns to create when automatically positioning children.</td></tr>
     * <tr><td><code>{@link #GridLayout_columnOrderPreserved com.android.calculator2:columnOrderPreserved}</code></td><td>When set to true, forces column boundaries to appear in the same order
     * as column indices.</td></tr>
     * <tr><td><code>{@link #GridLayout_orientation com.android.calculator2:orientation}</code></td><td>The orientation property is not used during layout.</td></tr>
     * <tr><td><code>{@link #GridLayout_rowCount com.android.calculator2:rowCount}</code></td><td>The maximum number of rows to create when automatically positioning children.</td></tr>
     * <tr><td><code>{@link #GridLayout_rowOrderPreserved com.android.calculator2:rowOrderPreserved}</code></td><td>When set to true, forces row boundaries to appear in the same order
     * as row indices.</td></tr>
     * <tr><td><code>{@link #GridLayout_useDefaultMargins com.android.calculator2:useDefaultMargins}</code></td><td>When set to true, tells GridLayout to use default margins when none are specified
     * in a view's layout parameters.</td></tr>
     * </table>
     * @see #GridLayout_alignmentMode
     * @see #GridLayout_columnCount
     * @see #GridLayout_columnOrderPreserved
     * @see #GridLayout_orientation
     * @see #GridLayout_rowCount
     * @see #GridLayout_rowOrderPreserved
     * @see #GridLayout_useDefaultMargins
     */
    public static final int[] GridLayout={
      0x7f040000, 0x7f040002, 0x7f040003, 0x7f040029, 
      0x7f04002d, 0x7f04002e, 0x7f040036
    };
    /**
     * <p>
     * @attr description
     * When set to alignMargins, causes alignment to take place between the outer
     * boundary of a view, as defined by its margins. When set to alignBounds,
     * causes alignment to take place between the edges of the view.
     * The default is alignMargins.
     * See {@link android.widget.GridLayout#setAlignmentMode(int)}.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>alignBounds</td><td>0</td><td>Align the bounds of the children.
     * See {@link android.widget.GridLayout#ALIGN_BOUNDS}.</td></tr>
     * <tr><td>alignMargins</td><td>1</td><td>Align the margins of the children.
     * See {@link android.widget.GridLayout#ALIGN_MARGINS}.</td></tr>
     * </table>
     *
     * @attr name com.android.calculator2:alignmentMode
     */
    public static final int GridLayout_alignmentMode=0;
    /**
     * <p>
     * @attr description
     * The maximum number of columns to create when automatically positioning children.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.calculator2:columnCount
     */
    public static final int GridLayout_columnCount=1;
    /**
     * <p>
     * @attr description
     * When set to true, forces column boundaries to appear in the same order
     * as column indices.
     * The default is true.
     * See {@link android.widget.GridLayout#setColumnOrderPreserved(boolean)}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name com.android.calculator2:columnOrderPreserved
     */
    public static final int GridLayout_columnOrderPreserved=2;
    /**
     * <p>
     * @attr description
     * The orientation property is not used during layout. It is only used to
     * allocate row and column parameters when they are not specified by its children's
     * layout parameters. GridLayout works like LinearLayout in this case;
     * putting all the components either in a single row or in a single column -
     * depending on the value of this flag. In the horizontal case, a columnCount
     * property may be additionally supplied to force new rows to be created when a
     * row is full. The rowCount attribute may be used similarly in the vertical case.
     * The default is horizontal.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>horizontal</td><td>0</td><td>Defines an horizontal widget.</td></tr>
     * <tr><td>vertical</td><td>1</td><td>Defines a vertical widget.</td></tr>
     * </table>
     *
     * @attr name com.android.calculator2:orientation
     */
    public static final int GridLayout_orientation=3;
    /**
     * <p>
     * @attr description
     * The maximum number of rows to create when automatically positioning children.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.calculator2:rowCount
     */
    public static final int GridLayout_rowCount=4;
    /**
     * <p>
     * @attr description
     * When set to true, forces row boundaries to appear in the same order
     * as row indices.
     * The default is true.
     * See {@link android.widget.GridLayout#setRowOrderPreserved(boolean)}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name com.android.calculator2:rowOrderPreserved
     */
    public static final int GridLayout_rowOrderPreserved=5;
    /**
     * <p>
     * @attr description
     * When set to true, tells GridLayout to use default margins when none are specified
     * in a view's layout parameters.
     * The default value is false.
     * See {@link android.widget.GridLayout#setUseDefaultMargins(boolean)}.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name com.android.calculator2:useDefaultMargins
     */
    public static final int GridLayout_useDefaultMargins=6;
    /**
     * Attributes that can be used with a GridLayout_Layout.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #GridLayout_Layout_android_layout_width android:layout_width}</code></td><td></td></tr>
     * <tr><td><code>{@link #GridLayout_Layout_android_layout_height android:layout_height}</code></td><td></td></tr>
     * <tr><td><code>{@link #GridLayout_Layout_android_layout_margin android:layout_margin}</code></td><td></td></tr>
     * <tr><td><code>{@link #GridLayout_Layout_android_layout_marginLeft android:layout_marginLeft}</code></td><td></td></tr>
     * <tr><td><code>{@link #GridLayout_Layout_android_layout_marginTop android:layout_marginTop}</code></td><td></td></tr>
     * <tr><td><code>{@link #GridLayout_Layout_android_layout_marginRight android:layout_marginRight}</code></td><td></td></tr>
     * <tr><td><code>{@link #GridLayout_Layout_android_layout_marginBottom android:layout_marginBottom}</code></td><td></td></tr>
     * <tr><td><code>{@link #GridLayout_Layout_layout_column com.android.calculator2:layout_column}</code></td><td>The column boundary delimiting the left of the group of cells
     * occupied by this view.</td></tr>
     * <tr><td><code>{@link #GridLayout_Layout_layout_columnSpan com.android.calculator2:layout_columnSpan}</code></td><td>The column span: the difference between the right and left
     * boundaries delimiting the group of cells occupied by this view.</td></tr>
     * <tr><td><code>{@link #GridLayout_Layout_layout_columnWeight com.android.calculator2:layout_columnWeight}</code></td><td>The relative proportion of horizontal space that should be allocated to this view
     * during excess space distribution.</td></tr>
     * <tr><td><code>{@link #GridLayout_Layout_layout_gravity com.android.calculator2:layout_gravity}</code></td><td>Gravity specifies how a component should be placed in its group of cells.</td></tr>
     * <tr><td><code>{@link #GridLayout_Layout_layout_row com.android.calculator2:layout_row}</code></td><td>The row boundary delimiting the top of the group of cells
     * occupied by this view.</td></tr>
     * <tr><td><code>{@link #GridLayout_Layout_layout_rowSpan com.android.calculator2:layout_rowSpan}</code></td><td>The row span: the difference between the top and bottom
     * boundaries delimiting the group of cells occupied by this view.</td></tr>
     * <tr><td><code>{@link #GridLayout_Layout_layout_rowWeight com.android.calculator2:layout_rowWeight}</code></td><td>The relative proportion of vertical space that should be allocated to this view
     * during excess space distribution.</td></tr>
     * </table>
     * @see #GridLayout_Layout_android_layout_width
     * @see #GridLayout_Layout_android_layout_height
     * @see #GridLayout_Layout_android_layout_margin
     * @see #GridLayout_Layout_android_layout_marginLeft
     * @see #GridLayout_Layout_android_layout_marginTop
     * @see #GridLayout_Layout_android_layout_marginRight
     * @see #GridLayout_Layout_android_layout_marginBottom
     * @see #GridLayout_Layout_layout_column
     * @see #GridLayout_Layout_layout_columnSpan
     * @see #GridLayout_Layout_layout_columnWeight
     * @see #GridLayout_Layout_layout_gravity
     * @see #GridLayout_Layout_layout_row
     * @see #GridLayout_Layout_layout_rowSpan
     * @see #GridLayout_Layout_layout_rowWeight
     */
    public static final int[] GridLayout_Layout={
      0x010100f4, 0x010100f5, 0x010100f6, 0x010100f7, 
      0x010100f8, 0x010100f9, 0x010100fa, 0x7f04001c, 
      0x7f04001d, 0x7f04001e, 0x7f040020, 0x7f040023, 
      0x7f040024, 0x7f040025
    };
    /**
     * <p>
     * @attr description
     * START MarginLayout layoutparams
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>fill_parent</td><td>ffffffff</td><td></td></tr>
     * <tr><td>match_parent</td><td>ffffffff</td><td></td></tr>
     * <tr><td>wrap_content</td><td>fffffffe</td><td></td></tr>
     * </table>
     *
     * @attr name android:layout_width
     */
    public static final int GridLayout_Layout_android_layout_width=0;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#layout_height}
     * attribute's value can be found in the {@link #GridLayout_Layout} array.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>fill_parent</td><td>ffffffff</td><td></td></tr>
     * <tr><td>match_parent</td><td>ffffffff</td><td></td></tr>
     * <tr><td>wrap_content</td><td>fffffffe</td><td></td></tr>
     * </table>
     *
     * @attr name android:layout_height
     */
    public static final int GridLayout_Layout_android_layout_height=1;
    /**
     * <p>
     * @attr description
     * Specifies extra space on the left, top, right and bottom
     * sides of this view. This space is outside this view's bounds.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:layout_margin
     */
    public static final int GridLayout_Layout_android_layout_margin=2;
    /**
     * <p>
     * @attr description
     * Specifies extra space on the left side of this view.
     * This space is outside this view's bounds.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:layout_marginLeft
     */
    public static final int GridLayout_Layout_android_layout_marginLeft=3;
    /**
     * <p>
     * @attr description
     * Specifies extra space on the top side of this view.
     * This space is outside this view's bounds.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:layout_marginTop
     */
    public static final int GridLayout_Layout_android_layout_marginTop=4;
    /**
     * <p>
     * @attr description
     * Specifies extra space on the right side of this view.
     * This space is outside this view's bounds.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:layout_marginRight
     */
    public static final int GridLayout_Layout_android_layout_marginRight=5;
    /**
     * <p>
     * @attr description
     * Specifies extra space on the bottom side of this view.
     * This space is outside this view's bounds.
     *
     * <p>May be a dimension value, which is a floating point number appended with a
     * unit such as "<code>14.5sp</code>".
     * Available units are: px (pixels), dp (density-independent pixels),
     * sp (scaled pixels based on preferred font size), in (inches), and
     * mm (millimeters).
     *
     * @attr name android:layout_marginBottom
     */
    public static final int GridLayout_Layout_android_layout_marginBottom=6;
    /**
     * <p>
     * @attr description
     * The column boundary delimiting the left of the group of cells
     * occupied by this view.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.calculator2:layout_column
     */
    public static final int GridLayout_Layout_layout_column=7;
    /**
     * <p>
     * @attr description
     * The column span: the difference between the right and left
     * boundaries delimiting the group of cells occupied by this view.
     * The default is one.
     * See {@link android.widget.GridLayout.Spec}.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.calculator2:layout_columnSpan
     */
    public static final int GridLayout_Layout_layout_columnSpan=8;
    /**
     * <p>
     * @attr description
     * The relative proportion of horizontal space that should be allocated to this view
     * during excess space distribution.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name com.android.calculator2:layout_columnWeight
     */
    public static final int GridLayout_Layout_layout_columnWeight=9;
    /**
     * <p>
     * @attr description
     * Gravity specifies how a component should be placed in its group of cells.
     * The default is LEFT | BASELINE.
     * See {@link android.widget.GridLayout.LayoutParams#setGravity(int)}.
     *
     * <p>Must be one or more (separated by '|') of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>bottom</td><td>50</td><td>Push object to the bottom of its container, not changing its size.</td></tr>
     * <tr><td>center</td><td>11</td><td>Place the object in the center of its container in both the vertical and horizontal axis, not changing its size.</td></tr>
     * <tr><td>center_horizontal</td><td>1</td><td>Place object in the horizontal center of its container, not changing its size.</td></tr>
     * <tr><td>center_vertical</td><td>10</td><td>Place object in the vertical center of its container, not changing its size.</td></tr>
     * <tr><td>clip_horizontal</td><td>8</td><td>Additional option that can be set to have the left and/or right edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the horizontal gravity: a left gravity will clip the right
     * edge, a right gravity will clip the left edge, and neither will clip both edges.</td></tr>
     * <tr><td>clip_vertical</td><td>80</td><td>Additional option that can be set to have the top and/or bottom edges of
     * the child clipped to its container's bounds.
     * The clip will be based on the vertical gravity: a top gravity will clip the bottom
     * edge, a bottom gravity will clip the top edge, and neither will clip both edges.</td></tr>
     * <tr><td>end</td><td>800005</td><td>Push object to the end of its container, not changing its size.</td></tr>
     * <tr><td>fill</td><td>77</td><td>Grow the horizontal and vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_horizontal</td><td>7</td><td>Grow the horizontal size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>fill_vertical</td><td>70</td><td>Grow the vertical size of the object if needed so it completely fills its container.</td></tr>
     * <tr><td>left</td><td>3</td><td>Push object to the left of its container, not changing its size.</td></tr>
     * <tr><td>right</td><td>5</td><td>Push object to the right of its container, not changing its size.</td></tr>
     * <tr><td>start</td><td>800003</td><td>Push object to the beginning of its container, not changing its size.</td></tr>
     * <tr><td>top</td><td>30</td><td>Push object to the top of its container, not changing its size.</td></tr>
     * </table>
     *
     * @attr name com.android.calculator2:layout_gravity
     */
    public static final int GridLayout_Layout_layout_gravity=10;
    /**
     * <p>
     * @attr description
     * The row boundary delimiting the top of the group of cells
     * occupied by this view.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.calculator2:layout_row
     */
    public static final int GridLayout_Layout_layout_row=11;
    /**
     * <p>
     * @attr description
     * The row span: the difference between the top and bottom
     * boundaries delimiting the group of cells occupied by this view.
     * The default is one.
     * See {@link android.widget.GridLayout.Spec}.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.calculator2:layout_rowSpan
     */
    public static final int GridLayout_Layout_layout_rowSpan=12;
    /**
     * <p>
     * @attr description
     * The relative proportion of vertical space that should be allocated to this view
     * during excess space distribution.
     *
     * <p>May be a floating point value, such as "<code>1.2</code>".
     *
     * @attr name com.android.calculator2:layout_rowWeight
     */
    public static final int GridLayout_Layout_layout_rowWeight=13;
    /**
     * Attributes that can be used with a RecyclerView.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #RecyclerView_android_orientation android:orientation}</code></td><td></td></tr>
     * <tr><td><code>{@link #RecyclerView_android_clipToPadding android:clipToPadding}</code></td><td></td></tr>
     * <tr><td><code>{@link #RecyclerView_android_descendantFocusability android:descendantFocusability}</code></td><td></td></tr>
     * <tr><td><code>{@link #RecyclerView_fastScrollEnabled com.android.calculator2:fastScrollEnabled}</code></td><td></td></tr>
     * <tr><td><code>{@link #RecyclerView_fastScrollHorizontalThumbDrawable com.android.calculator2:fastScrollHorizontalThumbDrawable}</code></td><td></td></tr>
     * <tr><td><code>{@link #RecyclerView_fastScrollHorizontalTrackDrawable com.android.calculator2:fastScrollHorizontalTrackDrawable}</code></td><td></td></tr>
     * <tr><td><code>{@link #RecyclerView_fastScrollVerticalThumbDrawable com.android.calculator2:fastScrollVerticalThumbDrawable}</code></td><td></td></tr>
     * <tr><td><code>{@link #RecyclerView_fastScrollVerticalTrackDrawable com.android.calculator2:fastScrollVerticalTrackDrawable}</code></td><td></td></tr>
     * <tr><td><code>{@link #RecyclerView_layoutManager com.android.calculator2:layoutManager}</code></td><td>Class name of the Layout Manager to be used.</td></tr>
     * <tr><td><code>{@link #RecyclerView_reverseLayout com.android.calculator2:reverseLayout}</code></td><td></td></tr>
     * <tr><td><code>{@link #RecyclerView_spanCount com.android.calculator2:spanCount}</code></td><td></td></tr>
     * <tr><td><code>{@link #RecyclerView_stackFromEnd com.android.calculator2:stackFromEnd}</code></td><td></td></tr>
     * </table>
     * @see #RecyclerView_android_orientation
     * @see #RecyclerView_android_clipToPadding
     * @see #RecyclerView_android_descendantFocusability
     * @see #RecyclerView_fastScrollEnabled
     * @see #RecyclerView_fastScrollHorizontalThumbDrawable
     * @see #RecyclerView_fastScrollHorizontalTrackDrawable
     * @see #RecyclerView_fastScrollVerticalThumbDrawable
     * @see #RecyclerView_fastScrollVerticalTrackDrawable
     * @see #RecyclerView_layoutManager
     * @see #RecyclerView_reverseLayout
     * @see #RecyclerView_spanCount
     * @see #RecyclerView_stackFromEnd
     */
    public static final int[] RecyclerView={
      0x010100c4, 0x010100eb, 0x010100f1, 0x7f040007, 
      0x7f040008, 0x7f040009, 0x7f04000a, 0x7f04000b, 
      0x7f040018, 0x7f04002c, 0x7f040030, 0x7f040031
    };
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#orientation}
     * attribute's value can be found in the {@link #RecyclerView} array.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>horizontal</td><td>0</td><td></td></tr>
     * <tr><td>vertical</td><td>1</td><td></td></tr>
     * </table>
     *
     * @attr name android:orientation
     */
    public static final int RecyclerView_android_orientation=0;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#clipToPadding}
     * attribute's value can be found in the {@link #RecyclerView} array.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name android:clipToPadding
     */
    public static final int RecyclerView_android_clipToPadding=1;
    /**
     * <p>This symbol is the offset where the {@link android.R.attr#descendantFocusability}
     * attribute's value can be found in the {@link #RecyclerView} array.
     *
     * <p>Must be one of the following constant values.</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Constant</th><th>Value</th><th>Description</th></tr>
     * <tr><td>afterDescendants</td><td>1</td><td></td></tr>
     * <tr><td>beforeDescendants</td><td>0</td><td></td></tr>
     * <tr><td>blocksDescendants</td><td>2</td><td></td></tr>
     * </table>
     *
     * @attr name android:descendantFocusability
     */
    public static final int RecyclerView_android_descendantFocusability=2;
    /**
     * <p>This symbol is the offset where the {@link com.android.calculator2.R.attr#fastScrollEnabled}
     * attribute's value can be found in the {@link #RecyclerView} array.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name com.android.calculator2:fastScrollEnabled
     */
    public static final int RecyclerView_fastScrollEnabled=3;
    /**
     * <p>This symbol is the offset where the {@link com.android.calculator2.R.attr#fastScrollHorizontalThumbDrawable}
     * attribute's value can be found in the {@link #RecyclerView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.calculator2:fastScrollHorizontalThumbDrawable
     */
    public static final int RecyclerView_fastScrollHorizontalThumbDrawable=4;
    /**
     * <p>This symbol is the offset where the {@link com.android.calculator2.R.attr#fastScrollHorizontalTrackDrawable}
     * attribute's value can be found in the {@link #RecyclerView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.calculator2:fastScrollHorizontalTrackDrawable
     */
    public static final int RecyclerView_fastScrollHorizontalTrackDrawable=5;
    /**
     * <p>This symbol is the offset where the {@link com.android.calculator2.R.attr#fastScrollVerticalThumbDrawable}
     * attribute's value can be found in the {@link #RecyclerView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.calculator2:fastScrollVerticalThumbDrawable
     */
    public static final int RecyclerView_fastScrollVerticalThumbDrawable=6;
    /**
     * <p>This symbol is the offset where the {@link com.android.calculator2.R.attr#fastScrollVerticalTrackDrawable}
     * attribute's value can be found in the {@link #RecyclerView} array.
     *
     * <p>May be a reference to another resource, in the form
     * "<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>" or a theme
     * attribute in the form
     * "<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>".
     *
     * @attr name com.android.calculator2:fastScrollVerticalTrackDrawable
     */
    public static final int RecyclerView_fastScrollVerticalTrackDrawable=7;
    /**
     * <p>
     * @attr description
     * Class name of the Layout Manager to be used.
     * <p/>
     * The class must ext androidx.recyclerview.widget.RecyclerViewView$LayoutManager
     * and have either a default constructor or constructor with the signature
     * (android.content.Context, android.util.AttributeSet, int, int).
     * <p/>
     * If the name starts with a '.', application package is prefixed.
     * Else, if the name contains a '.', the classname is assumed to be a full class name.
     * Else, the recycler view package naandroidx.appcompat.widgetdget) is prefixed.
     *
     * <p>May be a string value, using '\\;' to escape characters such as
     * '\\n' or '\\uxxxx' for a unicode character;
     *
     * @attr name com.android.calculator2:layoutManager
     */
    public static final int RecyclerView_layoutManager=8;
    /**
     * <p>This symbol is the offset where the {@link com.android.calculator2.R.attr#reverseLayout}
     * attribute's value can be found in the {@link #RecyclerView} array.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name com.android.calculator2:reverseLayout
     */
    public static final int RecyclerView_reverseLayout=9;
    /**
     * <p>This symbol is the offset where the {@link com.android.calculator2.R.attr#spanCount}
     * attribute's value can be found in the {@link #RecyclerView} array.
     *
     * <p>May be an integer value, such as "<code>100</code>".
     *
     * @attr name com.android.calculator2:spanCount
     */
    public static final int RecyclerView_spanCount=10;
    /**
     * <p>This symbol is the offset where the {@link com.android.calculator2.R.attr#stackFromEnd}
     * attribute's value can be found in the {@link #RecyclerView} array.
     *
     * <p>May be a boolean value, such as "<code>true</code>" or
     * "<code>false</code>".
     *
     * @attr name com.android.calculator2:stackFromEnd
     */
    public static final int RecyclerView_stackFromEnd=11;
    /**
     * Attributes that can be used with a SwipeRefreshLayout.
     * <p>Includes the following attributes:</p>
     * <table>
     * <colgroup align="left" />
     * <colgroup align="left" />
     * <tr><th>Attribute</th><th>Description</th></tr>
     * <tr><td><code>{@link #SwipeRefreshLayout_swipeRefreshLayoutProgressSpinnerBackgroundColor com.android.calculator2:swipeRefreshLayoutProgressSpinnerBackgroundColor}</code></td><td>Background color for SwipeRefreshLayout progress spinner.</td></tr>
     * </table>
     * @see #SwipeRefreshLayout_swipeRefreshLayoutProgressSpinnerBackgroundColor
     */
    public static final int[] SwipeRefreshLayout={
      0x7f040034
    };
    /**
     * <p>
     * @attr description
     * Background color for SwipeRefreshLayout progress spinner.
     *
     * <p>May be a color value, in the form of "<code>#<i>rgb</i></code>",
     * "<code>#<i>argb</i></code>", "<code>#<i>rrggbb</i></code>", or
     * "<code>#<i>aarrggbb</i></code>".
     *
     * @attr name com.android.calculator2:swipeRefreshLayoutProgressSpinnerBackgroundColor
     */
    public static final int SwipeRefreshLayout_swipeRefreshLayoutProgressSpinnerBackgroundColor=0;
  }
}