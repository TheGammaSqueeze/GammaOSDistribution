// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kll-quantiles.proto

#include "kll-quantiles.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_kll_2dquantiles_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_KllQuantilesStateProto_kll_2dquantiles_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kll_2dquantiles_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KllQuantilesStateProto_Compactor_kll_2dquantiles_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kll_2dquantiles_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KllQuantilesStateProto_Compactor_NonPackableValues_kll_2dquantiles_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kll_2dquantiles_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KllQuantilesStateProto_Sampler_kll_2dquantiles_2eproto;
namespace zetasketch {
namespace android {
class KllQuantilesStateProto_Compactor_NonPackableValuesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KllQuantilesStateProto_Compactor_NonPackableValues> _instance;
} _KllQuantilesStateProto_Compactor_NonPackableValues_default_instance_;
class KllQuantilesStateProto_CompactorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KllQuantilesStateProto_Compactor> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packed_values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr diff_encoded_packed_values_;
  const ::zetasketch::android::KllQuantilesStateProto_Compactor_NonPackableValues* other_values_;
} _KllQuantilesStateProto_Compactor_default_instance_;
class KllQuantilesStateProto_SamplerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KllQuantilesStateProto_Sampler> _instance;
} _KllQuantilesStateProto_Sampler_default_instance_;
class KllQuantilesStateProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KllQuantilesStateProto> _instance;
} _KllQuantilesStateProto_default_instance_;
}  // namespace android
}  // namespace zetasketch
static void InitDefaultsscc_info_KllQuantilesStateProto_kll_2dquantiles_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasketch::android::_KllQuantilesStateProto_default_instance_;
    new (ptr) ::zetasketch::android::KllQuantilesStateProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasketch::android::KllQuantilesStateProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_KllQuantilesStateProto_kll_2dquantiles_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_KllQuantilesStateProto_kll_2dquantiles_2eproto}, {
      &scc_info_KllQuantilesStateProto_Compactor_kll_2dquantiles_2eproto.base,
      &scc_info_KllQuantilesStateProto_Sampler_kll_2dquantiles_2eproto.base,}};

static void InitDefaultsscc_info_KllQuantilesStateProto_Compactor_kll_2dquantiles_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasketch::android::_KllQuantilesStateProto_Compactor_default_instance_;
    new (ptr) ::zetasketch::android::KllQuantilesStateProto_Compactor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasketch::android::KllQuantilesStateProto_Compactor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KllQuantilesStateProto_Compactor_kll_2dquantiles_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_KllQuantilesStateProto_Compactor_kll_2dquantiles_2eproto}, {
      &scc_info_KllQuantilesStateProto_Compactor_NonPackableValues_kll_2dquantiles_2eproto.base,}};

static void InitDefaultsscc_info_KllQuantilesStateProto_Compactor_NonPackableValues_kll_2dquantiles_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasketch::android::_KllQuantilesStateProto_Compactor_NonPackableValues_default_instance_;
    new (ptr) ::zetasketch::android::KllQuantilesStateProto_Compactor_NonPackableValues();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasketch::android::KllQuantilesStateProto_Compactor_NonPackableValues::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KllQuantilesStateProto_Compactor_NonPackableValues_kll_2dquantiles_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_KllQuantilesStateProto_Compactor_NonPackableValues_kll_2dquantiles_2eproto}, {}};

static void InitDefaultsscc_info_KllQuantilesStateProto_Sampler_kll_2dquantiles_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasketch::android::_KllQuantilesStateProto_Sampler_default_instance_;
    new (ptr) ::zetasketch::android::KllQuantilesStateProto_Sampler();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasketch::android::KllQuantilesStateProto_Sampler::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KllQuantilesStateProto_Sampler_kll_2dquantiles_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_KllQuantilesStateProto_Sampler_kll_2dquantiles_2eproto}, {}};

namespace zetasketch {
namespace android {

// ===================================================================

void KllQuantilesStateProto_Compactor_NonPackableValues::InitAsDefaultInstance() {
}
class KllQuantilesStateProto_Compactor_NonPackableValues::_Internal {
 public:
  using HasBits = decltype(std::declval<KllQuantilesStateProto_Compactor_NonPackableValues>()._has_bits_);
};

KllQuantilesStateProto_Compactor_NonPackableValues::KllQuantilesStateProto_Compactor_NonPackableValues()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasketch.android.KllQuantilesStateProto.Compactor.NonPackableValues)
}
KllQuantilesStateProto_Compactor_NonPackableValues::KllQuantilesStateProto_Compactor_NonPackableValues(const KllQuantilesStateProto_Compactor_NonPackableValues& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasketch.android.KllQuantilesStateProto.Compactor.NonPackableValues)
}

void KllQuantilesStateProto_Compactor_NonPackableValues::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KllQuantilesStateProto_Compactor_NonPackableValues_kll_2dquantiles_2eproto.base);
}

KllQuantilesStateProto_Compactor_NonPackableValues::~KllQuantilesStateProto_Compactor_NonPackableValues() {
  // @@protoc_insertion_point(destructor:zetasketch.android.KllQuantilesStateProto.Compactor.NonPackableValues)
  SharedDtor();
}

void KllQuantilesStateProto_Compactor_NonPackableValues::SharedDtor() {
}

void KllQuantilesStateProto_Compactor_NonPackableValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KllQuantilesStateProto_Compactor_NonPackableValues& KllQuantilesStateProto_Compactor_NonPackableValues::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KllQuantilesStateProto_Compactor_NonPackableValues_kll_2dquantiles_2eproto.base);
  return *internal_default_instance();
}


void KllQuantilesStateProto_Compactor_NonPackableValues::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasketch.android.KllQuantilesStateProto.Compactor.NonPackableValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* KllQuantilesStateProto_Compactor_NonPackableValues::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_values(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool KllQuantilesStateProto_Compactor_NonPackableValues::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:zetasketch.android.KllQuantilesStateProto.Compactor.NonPackableValues)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes values = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zetasketch.android.KllQuantilesStateProto.Compactor.NonPackableValues)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasketch.android.KllQuantilesStateProto.Compactor.NonPackableValues)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void KllQuantilesStateProto_Compactor_NonPackableValues::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasketch.android.KllQuantilesStateProto.Compactor.NonPackableValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes values = 1;
  for (int i = 0, n = this->values_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      1, this->values(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:zetasketch.android.KllQuantilesStateProto.Compactor.NonPackableValues)
}

size_t KllQuantilesStateProto_Compactor_NonPackableValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasketch.android.KllQuantilesStateProto.Compactor.NonPackableValues)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes values = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->values_size());
  for (int i = 0, n = this->values_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->values(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KllQuantilesStateProto_Compactor_NonPackableValues::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KllQuantilesStateProto_Compactor_NonPackableValues*>(
      &from));
}

void KllQuantilesStateProto_Compactor_NonPackableValues::MergeFrom(const KllQuantilesStateProto_Compactor_NonPackableValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasketch.android.KllQuantilesStateProto.Compactor.NonPackableValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void KllQuantilesStateProto_Compactor_NonPackableValues::CopyFrom(const KllQuantilesStateProto_Compactor_NonPackableValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasketch.android.KllQuantilesStateProto.Compactor.NonPackableValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KllQuantilesStateProto_Compactor_NonPackableValues::IsInitialized() const {
  return true;
}

void KllQuantilesStateProto_Compactor_NonPackableValues::InternalSwap(KllQuantilesStateProto_Compactor_NonPackableValues* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  values_.InternalSwap(CastToBase(&other->values_));
}

std::string KllQuantilesStateProto_Compactor_NonPackableValues::GetTypeName() const {
  return "zetasketch.android.KllQuantilesStateProto.Compactor.NonPackableValues";
}


// ===================================================================

void KllQuantilesStateProto_Compactor::InitAsDefaultInstance() {
}
class KllQuantilesStateProto_Compactor::_Internal {
 public:
  using HasBits = decltype(std::declval<KllQuantilesStateProto_Compactor>()._has_bits_);
  static const ::zetasketch::android::KllQuantilesStateProto_Compactor_NonPackableValues& other_values(const KllQuantilesStateProto_Compactor* msg);
};

const ::zetasketch::android::KllQuantilesStateProto_Compactor_NonPackableValues&
KllQuantilesStateProto_Compactor::_Internal::other_values(const KllQuantilesStateProto_Compactor* msg) {
  return *msg->compactor_values_.other_values_;
}
void KllQuantilesStateProto_Compactor::set_allocated_other_values(::zetasketch::android::KllQuantilesStateProto_Compactor_NonPackableValues* other_values) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_compactor_values();
  if (other_values) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      other_values = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, other_values, submessage_arena);
    }
    set_has_other_values();
    compactor_values_.other_values_ = other_values;
  }
  // @@protoc_insertion_point(field_set_allocated:zetasketch.android.KllQuantilesStateProto.Compactor.other_values)
}
KllQuantilesStateProto_Compactor::KllQuantilesStateProto_Compactor()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasketch.android.KllQuantilesStateProto.Compactor)
}
KllQuantilesStateProto_Compactor::KllQuantilesStateProto_Compactor(const KllQuantilesStateProto_Compactor& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_compactor_values();
  switch (from.compactor_values_case()) {
    case kPackedValues: {
      set_packed_values(from.packed_values());
      break;
    }
    case kDiffEncodedPackedValues: {
      set_diff_encoded_packed_values(from.diff_encoded_packed_values());
      break;
    }
    case kOtherValues: {
      mutable_other_values()->::zetasketch::android::KllQuantilesStateProto_Compactor_NonPackableValues::MergeFrom(from.other_values());
      break;
    }
    case COMPACTOR_VALUES_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zetasketch.android.KllQuantilesStateProto.Compactor)
}

void KllQuantilesStateProto_Compactor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KllQuantilesStateProto_Compactor_kll_2dquantiles_2eproto.base);
  clear_has_compactor_values();
}

KllQuantilesStateProto_Compactor::~KllQuantilesStateProto_Compactor() {
  // @@protoc_insertion_point(destructor:zetasketch.android.KllQuantilesStateProto.Compactor)
  SharedDtor();
}

void KllQuantilesStateProto_Compactor::SharedDtor() {
  if (has_compactor_values()) {
    clear_compactor_values();
  }
}

void KllQuantilesStateProto_Compactor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KllQuantilesStateProto_Compactor& KllQuantilesStateProto_Compactor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KllQuantilesStateProto_Compactor_kll_2dquantiles_2eproto.base);
  return *internal_default_instance();
}


void KllQuantilesStateProto_Compactor::clear_compactor_values() {
// @@protoc_insertion_point(one_of_clear_start:zetasketch.android.KllQuantilesStateProto.Compactor)
  switch (compactor_values_case()) {
    case kPackedValues: {
      compactor_values_.packed_values_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kDiffEncodedPackedValues: {
      compactor_values_.diff_encoded_packed_values_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kOtherValues: {
      delete compactor_values_.other_values_;
      break;
    }
    case COMPACTOR_VALUES_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMPACTOR_VALUES_NOT_SET;
}


void KllQuantilesStateProto_Compactor::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasketch.android.KllQuantilesStateProto.Compactor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_compactor_values();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* KllQuantilesStateProto_Compactor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes packed_values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_packed_values(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes diff_encoded_packed_values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_diff_encoded_packed_values(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .zetasketch.android.KllQuantilesStateProto.Compactor.NonPackableValues other_values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_other_values(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool KllQuantilesStateProto_Compactor::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:zetasketch.android.KllQuantilesStateProto.Compactor)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes packed_values = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_packed_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes diff_encoded_packed_values = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_diff_encoded_packed_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zetasketch.android.KllQuantilesStateProto.Compactor.NonPackableValues other_values = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_other_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zetasketch.android.KllQuantilesStateProto.Compactor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasketch.android.KllQuantilesStateProto.Compactor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void KllQuantilesStateProto_Compactor::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasketch.android.KllQuantilesStateProto.Compactor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (compactor_values_case()) {
    case kPackedValues:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
        1, this->packed_values(), output);
      break;
    case kDiffEncodedPackedValues:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
        2, this->diff_encoded_packed_values(), output);
      break;
    case kOtherValues:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        3, _Internal::other_values(this), output);
      break;
    default: ;
  }
  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:zetasketch.android.KllQuantilesStateProto.Compactor)
}

size_t KllQuantilesStateProto_Compactor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasketch.android.KllQuantilesStateProto.Compactor)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (compactor_values_case()) {
    // optional bytes packed_values = 1;
    case kPackedValues: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->packed_values());
      break;
    }
    // optional bytes diff_encoded_packed_values = 2;
    case kDiffEncodedPackedValues: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->diff_encoded_packed_values());
      break;
    }
    // optional .zetasketch.android.KllQuantilesStateProto.Compactor.NonPackableValues other_values = 3;
    case kOtherValues: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *compactor_values_.other_values_);
      break;
    }
    case COMPACTOR_VALUES_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KllQuantilesStateProto_Compactor::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KllQuantilesStateProto_Compactor*>(
      &from));
}

void KllQuantilesStateProto_Compactor::MergeFrom(const KllQuantilesStateProto_Compactor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasketch.android.KllQuantilesStateProto.Compactor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.compactor_values_case()) {
    case kPackedValues: {
      set_packed_values(from.packed_values());
      break;
    }
    case kDiffEncodedPackedValues: {
      set_diff_encoded_packed_values(from.diff_encoded_packed_values());
      break;
    }
    case kOtherValues: {
      mutable_other_values()->::zetasketch::android::KllQuantilesStateProto_Compactor_NonPackableValues::MergeFrom(from.other_values());
      break;
    }
    case COMPACTOR_VALUES_NOT_SET: {
      break;
    }
  }
}

void KllQuantilesStateProto_Compactor::CopyFrom(const KllQuantilesStateProto_Compactor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasketch.android.KllQuantilesStateProto.Compactor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KllQuantilesStateProto_Compactor::IsInitialized() const {
  return true;
}

void KllQuantilesStateProto_Compactor::InternalSwap(KllQuantilesStateProto_Compactor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(compactor_values_, other->compactor_values_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string KllQuantilesStateProto_Compactor::GetTypeName() const {
  return "zetasketch.android.KllQuantilesStateProto.Compactor";
}


// ===================================================================

void KllQuantilesStateProto_Sampler::InitAsDefaultInstance() {
}
class KllQuantilesStateProto_Sampler::_Internal {
 public:
  using HasBits = decltype(std::declval<KllQuantilesStateProto_Sampler>()._has_bits_);
  static void set_has_sampled_item(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sampled_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_log_capacity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

KllQuantilesStateProto_Sampler::KllQuantilesStateProto_Sampler()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasketch.android.KllQuantilesStateProto.Sampler)
}
KllQuantilesStateProto_Sampler::KllQuantilesStateProto_Sampler(const KllQuantilesStateProto_Sampler& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sampled_item_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_sampled_item()) {
    sampled_item_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sampled_item_);
  }
  ::memcpy(&sampled_weight_, &from.sampled_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&log_capacity_) -
    reinterpret_cast<char*>(&sampled_weight_)) + sizeof(log_capacity_));
  // @@protoc_insertion_point(copy_constructor:zetasketch.android.KllQuantilesStateProto.Sampler)
}

void KllQuantilesStateProto_Sampler::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KllQuantilesStateProto_Sampler_kll_2dquantiles_2eproto.base);
  sampled_item_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sampled_weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&log_capacity_) -
      reinterpret_cast<char*>(&sampled_weight_)) + sizeof(log_capacity_));
}

KllQuantilesStateProto_Sampler::~KllQuantilesStateProto_Sampler() {
  // @@protoc_insertion_point(destructor:zetasketch.android.KllQuantilesStateProto.Sampler)
  SharedDtor();
}

void KllQuantilesStateProto_Sampler::SharedDtor() {
  sampled_item_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KllQuantilesStateProto_Sampler::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KllQuantilesStateProto_Sampler& KllQuantilesStateProto_Sampler::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KllQuantilesStateProto_Sampler_kll_2dquantiles_2eproto.base);
  return *internal_default_instance();
}


void KllQuantilesStateProto_Sampler::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasketch.android.KllQuantilesStateProto.Sampler)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sampled_item_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&sampled_weight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&log_capacity_) -
        reinterpret_cast<char*>(&sampled_weight_)) + sizeof(log_capacity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* KllQuantilesStateProto_Sampler::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes sampled_item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_sampled_item(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 sampled_weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sampled_weight(&has_bits);
          sampled_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 log_capacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_log_capacity(&has_bits);
          log_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool KllQuantilesStateProto_Sampler::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:zetasketch.android.KllQuantilesStateProto.Sampler)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes sampled_item = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sampled_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sampled_weight = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_sampled_weight(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &sampled_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 log_capacity = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_log_capacity(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &log_capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zetasketch.android.KllQuantilesStateProto.Sampler)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasketch.android.KllQuantilesStateProto.Sampler)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void KllQuantilesStateProto_Sampler::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasketch.android.KllQuantilesStateProto.Sampler)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes sampled_item = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->sampled_item(), output);
  }

  // optional int64 sampled_weight = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->sampled_weight(), output);
  }

  // optional int32 log_capacity = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->log_capacity(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:zetasketch.android.KllQuantilesStateProto.Sampler)
}

size_t KllQuantilesStateProto_Sampler::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasketch.android.KllQuantilesStateProto.Sampler)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes sampled_item = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->sampled_item());
    }

    // optional int64 sampled_weight = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->sampled_weight());
    }

    // optional int32 log_capacity = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->log_capacity());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KllQuantilesStateProto_Sampler::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KllQuantilesStateProto_Sampler*>(
      &from));
}

void KllQuantilesStateProto_Sampler::MergeFrom(const KllQuantilesStateProto_Sampler& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasketch.android.KllQuantilesStateProto.Sampler)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      sampled_item_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sampled_item_);
    }
    if (cached_has_bits & 0x00000002u) {
      sampled_weight_ = from.sampled_weight_;
    }
    if (cached_has_bits & 0x00000004u) {
      log_capacity_ = from.log_capacity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KllQuantilesStateProto_Sampler::CopyFrom(const KllQuantilesStateProto_Sampler& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasketch.android.KllQuantilesStateProto.Sampler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KllQuantilesStateProto_Sampler::IsInitialized() const {
  return true;
}

void KllQuantilesStateProto_Sampler::InternalSwap(KllQuantilesStateProto_Sampler* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sampled_item_.Swap(&other->sampled_item_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sampled_weight_, other->sampled_weight_);
  swap(log_capacity_, other->log_capacity_);
}

std::string KllQuantilesStateProto_Sampler::GetTypeName() const {
  return "zetasketch.android.KllQuantilesStateProto.Sampler";
}


// ===================================================================

void KllQuantilesStateProto::InitAsDefaultInstance() {
  ::zetasketch::android::_KllQuantilesStateProto_default_instance_._instance.get_mutable()->sampler_ = const_cast< ::zetasketch::android::KllQuantilesStateProto_Sampler*>(
      ::zetasketch::android::KllQuantilesStateProto_Sampler::internal_default_instance());
}
class KllQuantilesStateProto::_Internal {
 public:
  using HasBits = decltype(std::declval<KllQuantilesStateProto>()._has_bits_);
  static void set_has_k(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_inv_eps(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_min(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::zetasketch::android::KllQuantilesStateProto_Sampler& sampler(const KllQuantilesStateProto* msg);
  static void set_has_sampler(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::zetasketch::android::KllQuantilesStateProto_Sampler&
KllQuantilesStateProto::_Internal::sampler(const KllQuantilesStateProto* msg) {
  return *msg->sampler_;
}
KllQuantilesStateProto::KllQuantilesStateProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasketch.android.KllQuantilesStateProto)
}
KllQuantilesStateProto::KllQuantilesStateProto(const KllQuantilesStateProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      compactors_(from.compactors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  min_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_min()) {
    min_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.min_);
  }
  max_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_max()) {
    max_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.max_);
  }
  if (from.has_sampler()) {
    sampler_ = new ::zetasketch::android::KllQuantilesStateProto_Sampler(*from.sampler_);
  } else {
    sampler_ = nullptr;
  }
  ::memcpy(&inv_eps_, &from.inv_eps_,
    static_cast<size_t>(reinterpret_cast<char*>(&k_) -
    reinterpret_cast<char*>(&inv_eps_)) + sizeof(k_));
  // @@protoc_insertion_point(copy_constructor:zetasketch.android.KllQuantilesStateProto)
}

void KllQuantilesStateProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KllQuantilesStateProto_kll_2dquantiles_2eproto.base);
  min_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sampler_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&k_) -
      reinterpret_cast<char*>(&sampler_)) + sizeof(k_));
}

KllQuantilesStateProto::~KllQuantilesStateProto() {
  // @@protoc_insertion_point(destructor:zetasketch.android.KllQuantilesStateProto)
  SharedDtor();
}

void KllQuantilesStateProto::SharedDtor() {
  min_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sampler_;
}

void KllQuantilesStateProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KllQuantilesStateProto& KllQuantilesStateProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KllQuantilesStateProto_kll_2dquantiles_2eproto.base);
  return *internal_default_instance();
}


void KllQuantilesStateProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasketch.android.KllQuantilesStateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  compactors_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      min_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      max_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(sampler_ != nullptr);
      sampler_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&inv_eps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&k_) -
        reinterpret_cast<char*>(&inv_eps_)) + sizeof(k_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* KllQuantilesStateProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 k = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_k(&has_bits);
          k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 inv_eps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_inv_eps(&has_bits);
          inv_eps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes min = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_min(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes max = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_max(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zetasketch.android.KllQuantilesStateProto.Compactor compactors = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_compactors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // optional .zetasketch.android.KllQuantilesStateProto.Sampler sampler = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_sampler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool KllQuantilesStateProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:zetasketch.android.KllQuantilesStateProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 k = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_k(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 inv_eps = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_inv_eps(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &inv_eps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes min = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_min()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes max = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_max()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .zetasketch.android.KllQuantilesStateProto.Compactor compactors = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_compactors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zetasketch.android.KllQuantilesStateProto.Sampler sampler = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sampler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zetasketch.android.KllQuantilesStateProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasketch.android.KllQuantilesStateProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void KllQuantilesStateProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasketch.android.KllQuantilesStateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 k = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->k(), output);
  }

  // optional int64 inv_eps = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->inv_eps(), output);
  }

  // optional bytes min = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->min(), output);
  }

  // optional bytes max = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->max(), output);
  }

  // repeated .zetasketch.android.KllQuantilesStateProto.Compactor compactors = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->compactors_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5,
      this->compactors(static_cast<int>(i)),
      output);
  }

  // optional .zetasketch.android.KllQuantilesStateProto.Sampler sampler = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::sampler(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:zetasketch.android.KllQuantilesStateProto)
}

size_t KllQuantilesStateProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasketch.android.KllQuantilesStateProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zetasketch.android.KllQuantilesStateProto.Compactor compactors = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->compactors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->compactors(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes min = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->min());
    }

    // optional bytes max = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->max());
    }

    // optional .zetasketch.android.KllQuantilesStateProto.Sampler sampler = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sampler_);
    }

    // optional int64 inv_eps = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->inv_eps());
    }

    // optional int32 k = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->k());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KllQuantilesStateProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const KllQuantilesStateProto*>(
      &from));
}

void KllQuantilesStateProto::MergeFrom(const KllQuantilesStateProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasketch.android.KllQuantilesStateProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  compactors_.MergeFrom(from.compactors_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      min_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.min_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      max_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.max_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_sampler()->::zetasketch::android::KllQuantilesStateProto_Sampler::MergeFrom(from.sampler());
    }
    if (cached_has_bits & 0x00000008u) {
      inv_eps_ = from.inv_eps_;
    }
    if (cached_has_bits & 0x00000010u) {
      k_ = from.k_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KllQuantilesStateProto::CopyFrom(const KllQuantilesStateProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasketch.android.KllQuantilesStateProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KllQuantilesStateProto::IsInitialized() const {
  return true;
}

void KllQuantilesStateProto::InternalSwap(KllQuantilesStateProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&compactors_)->InternalSwap(CastToBase(&other->compactors_));
  min_.Swap(&other->min_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  max_.Swap(&other->max_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sampler_, other->sampler_);
  swap(inv_eps_, other->inv_eps_);
  swap(k_, other->k_);
}

std::string KllQuantilesStateProto::GetTypeName() const {
  return "zetasketch.android.KllQuantilesStateProto";
}

::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::zetasketch::android::AggregatorStateProto,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::zetasketch::android::KllQuantilesStateProto >, 11, false >
  kll_quantiles_state(kKllQuantilesStateFieldNumber, *::zetasketch::android::KllQuantilesStateProto::internal_default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace android
}  // namespace zetasketch
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zetasketch::android::KllQuantilesStateProto_Compactor_NonPackableValues* Arena::CreateMaybeMessage< ::zetasketch::android::KllQuantilesStateProto_Compactor_NonPackableValues >(Arena* arena) {
  return Arena::CreateInternal< ::zetasketch::android::KllQuantilesStateProto_Compactor_NonPackableValues >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasketch::android::KllQuantilesStateProto_Compactor* Arena::CreateMaybeMessage< ::zetasketch::android::KllQuantilesStateProto_Compactor >(Arena* arena) {
  return Arena::CreateInternal< ::zetasketch::android::KllQuantilesStateProto_Compactor >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasketch::android::KllQuantilesStateProto_Sampler* Arena::CreateMaybeMessage< ::zetasketch::android::KllQuantilesStateProto_Sampler >(Arena* arena) {
  return Arena::CreateInternal< ::zetasketch::android::KllQuantilesStateProto_Sampler >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasketch::android::KllQuantilesStateProto* Arena::CreateMaybeMessage< ::zetasketch::android::KllQuantilesStateProto >(Arena* arena) {
  return Arena::CreateInternal< ::zetasketch::android::KllQuantilesStateProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
