// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aggregator.proto

#include "aggregator.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace zetasketch {
namespace android {
class DefaultOpsTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DefaultOpsType> _instance;
} _DefaultOpsType_default_instance_;
class AggregatorStateProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AggregatorStateProto> _instance;
} _AggregatorStateProto_default_instance_;
}  // namespace android
}  // namespace zetasketch
static void InitDefaultsscc_info_AggregatorStateProto_aggregator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasketch::android::_AggregatorStateProto_default_instance_;
    new (ptr) ::zetasketch::android::AggregatorStateProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasketch::android::AggregatorStateProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AggregatorStateProto_aggregator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AggregatorStateProto_aggregator_2eproto}, {}};

static void InitDefaultsscc_info_DefaultOpsType_aggregator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zetasketch::android::_DefaultOpsType_default_instance_;
    new (ptr) ::zetasketch::android::DefaultOpsType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zetasketch::android::DefaultOpsType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DefaultOpsType_aggregator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DefaultOpsType_aggregator_2eproto}, {}};

namespace zetasketch {
namespace android {
bool DefaultOpsType_Id_IsValid(int value) {
  switch (value) {
    case 0:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DefaultOpsType_Id_strings[2] = {};

static const char DefaultOpsType_Id_names[] =
  "INT64"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DefaultOpsType_Id_entries[] = {
  { {DefaultOpsType_Id_names + 0, 5}, 4 },
  { {DefaultOpsType_Id_names + 5, 7}, 0 },
};

static const int DefaultOpsType_Id_entries_by_number[] = {
  1, // 0 -> UNKNOWN
  0, // 4 -> INT64
};

const std::string& DefaultOpsType_Id_Name(
    DefaultOpsType_Id value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DefaultOpsType_Id_entries,
          DefaultOpsType_Id_entries_by_number,
          2, DefaultOpsType_Id_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DefaultOpsType_Id_entries,
      DefaultOpsType_Id_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DefaultOpsType_Id_strings[idx].get();
}
bool DefaultOpsType_Id_Parse(
    const std::string& name, DefaultOpsType_Id* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DefaultOpsType_Id_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<DefaultOpsType_Id>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DefaultOpsType_Id DefaultOpsType::UNKNOWN;
constexpr DefaultOpsType_Id DefaultOpsType::INT64;
constexpr DefaultOpsType_Id DefaultOpsType::Id_MIN;
constexpr DefaultOpsType_Id DefaultOpsType::Id_MAX;
constexpr int DefaultOpsType::Id_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool AggregatorType_IsValid(int value) {
  switch (value) {
    case 113:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AggregatorType_strings[1] = {};

static const char AggregatorType_names[] =
  "KLL_QUANTILES";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AggregatorType_entries[] = {
  { {AggregatorType_names + 0, 13}, 113 },
};

static const int AggregatorType_entries_by_number[] = {
  0, // 113 -> KLL_QUANTILES
};

const std::string& AggregatorType_Name(
    AggregatorType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AggregatorType_entries,
          AggregatorType_entries_by_number,
          1, AggregatorType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AggregatorType_entries,
      AggregatorType_entries_by_number,
      1, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AggregatorType_strings[idx].get();
}
bool AggregatorType_Parse(
    const std::string& name, AggregatorType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AggregatorType_entries, 1, name, &int_value);
  if (success) {
    *value = static_cast<AggregatorType>(int_value);
  }
  return success;
}

// ===================================================================

void DefaultOpsType::InitAsDefaultInstance() {
}
class DefaultOpsType::_Internal {
 public:
  using HasBits = decltype(std::declval<DefaultOpsType>()._has_bits_);
};

DefaultOpsType::DefaultOpsType()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasketch.android.DefaultOpsType)
}
DefaultOpsType::DefaultOpsType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zetasketch.android.DefaultOpsType)
}
DefaultOpsType::DefaultOpsType(const DefaultOpsType& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zetasketch.android.DefaultOpsType)
}

void DefaultOpsType::SharedCtor() {
}

DefaultOpsType::~DefaultOpsType() {
  // @@protoc_insertion_point(destructor:zetasketch.android.DefaultOpsType)
  SharedDtor();
}

void DefaultOpsType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void DefaultOpsType::ArenaDtor(void* object) {
  DefaultOpsType* _this = reinterpret_cast< DefaultOpsType* >(object);
  (void)_this;
}
void DefaultOpsType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DefaultOpsType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DefaultOpsType& DefaultOpsType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DefaultOpsType_aggregator_2eproto.base);
  return *internal_default_instance();
}


void DefaultOpsType::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasketch.android.DefaultOpsType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DefaultOpsType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DefaultOpsType::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:zetasketch.android.DefaultOpsType)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:zetasketch.android.DefaultOpsType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasketch.android.DefaultOpsType)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DefaultOpsType::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasketch.android.DefaultOpsType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:zetasketch.android.DefaultOpsType)
}

size_t DefaultOpsType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasketch.android.DefaultOpsType)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DefaultOpsType::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DefaultOpsType*>(
      &from));
}

void DefaultOpsType::MergeFrom(const DefaultOpsType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasketch.android.DefaultOpsType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DefaultOpsType::CopyFrom(const DefaultOpsType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasketch.android.DefaultOpsType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefaultOpsType::IsInitialized() const {
  return true;
}

void DefaultOpsType::InternalSwap(DefaultOpsType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string DefaultOpsType::GetTypeName() const {
  return "zetasketch.android.DefaultOpsType";
}


// ===================================================================

void AggregatorStateProto::InitAsDefaultInstance() {
}
class AggregatorStateProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AggregatorStateProto>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_values(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_encoding_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_value_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AggregatorStateProto::AggregatorStateProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zetasketch.android.AggregatorStateProto)
}
AggregatorStateProto::AggregatorStateProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
  _extensions_(arena),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zetasketch.android.AggregatorStateProto)
}
AggregatorStateProto::AggregatorStateProto(const AggregatorStateProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  ::memcpy(&num_values_, &from.num_values_,
    static_cast<size_t>(reinterpret_cast<char*>(&encoding_version_) -
    reinterpret_cast<char*>(&num_values_)) + sizeof(encoding_version_));
  // @@protoc_insertion_point(copy_constructor:zetasketch.android.AggregatorStateProto)
}

void AggregatorStateProto::SharedCtor() {
  ::memset(&num_values_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_type_) -
      reinterpret_cast<char*>(&num_values_)) + sizeof(value_type_));
  type_ = 113;
  encoding_version_ = 1;
}

AggregatorStateProto::~AggregatorStateProto() {
  // @@protoc_insertion_point(destructor:zetasketch.android.AggregatorStateProto)
  SharedDtor();
}

void AggregatorStateProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void AggregatorStateProto::ArenaDtor(void* object) {
  AggregatorStateProto* _this = reinterpret_cast< AggregatorStateProto* >(object);
  (void)_this;
}
void AggregatorStateProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AggregatorStateProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AggregatorStateProto& AggregatorStateProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregatorStateProto_aggregator_2eproto.base);
  return *internal_default_instance();
}


void AggregatorStateProto::Clear() {
// @@protoc_insertion_point(message_clear_start:zetasketch.android.AggregatorStateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&num_values_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_type_) -
        reinterpret_cast<char*>(&num_values_)) + sizeof(value_type_));
    type_ = 113;
    encoding_version_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AggregatorStateProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .zetasketch.android.AggregatorType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::zetasketch::android::AggregatorType_IsValid(val))) {
            set_type(static_cast<::zetasketch::android::AggregatorType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 num_values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_values(&has_bits);
          num_values_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 encoding_version = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_encoding_version(&has_bits);
          encoding_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 value_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_value_type(&has_bits);
          value_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((800u <= tag && tag < 904u) ||
          (912u <= tag && tag < 1128u) ||
          (904u <= tag && tag < 912u)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AggregatorStateProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:zetasketch.android.AggregatorStateProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .zetasketch.android.AggregatorType type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::zetasketch::android::AggregatorType_IsValid(value)) {
            set_type(static_cast< ::zetasketch::android::AggregatorType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 num_values = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_num_values(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_values_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 encoding_version = 3 [default = 1];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_encoding_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &encoding_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 value_type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_value_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((800u <= tag && tag < 904u) ||
            (912u <= tag && tag < 1128u) ||
            (904u <= tag && tag < 912u)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              &unknown_fields_stream));
          continue;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zetasketch.android.AggregatorStateProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zetasketch.android.AggregatorStateProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AggregatorStateProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zetasketch.android.AggregatorStateProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zetasketch.android.AggregatorType type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int64 num_values = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->num_values(), output);
  }

  // optional int32 encoding_version = 3 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->encoding_version(), output);
  }

  // optional int32 value_type = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->value_type(), output);
  }

  // Extension range [100, 113)
  _extensions_.SerializeWithCachedSizes(100, 113, output);

  // Extension range [113, 114)
  _extensions_.SerializeWithCachedSizes(113, 114, output);

  // Extension range [114, 141)
  _extensions_.SerializeWithCachedSizes(114, 141, output);

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:zetasketch.android.AggregatorStateProto)
}

size_t AggregatorStateProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zetasketch.android.AggregatorStateProto)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int64 num_values = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->num_values());
    }

    // optional int32 value_type = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->value_type());
    }

    // optional .zetasketch.android.AggregatorType type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 encoding_version = 3 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->encoding_version());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AggregatorStateProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AggregatorStateProto*>(
      &from));
}

void AggregatorStateProto::MergeFrom(const AggregatorStateProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zetasketch.android.AggregatorStateProto)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      num_values_ = from.num_values_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_type_ = from.value_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      encoding_version_ = from.encoding_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AggregatorStateProto::CopyFrom(const AggregatorStateProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zetasketch.android.AggregatorStateProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregatorStateProto::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void AggregatorStateProto::InternalSwap(AggregatorStateProto* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(num_values_, other->num_values_);
  swap(value_type_, other->value_type_);
  swap(type_, other->type_);
  swap(encoding_version_, other->encoding_version_);
}

std::string AggregatorStateProto::GetTypeName() const {
  return "zetasketch.android.AggregatorStateProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace android
}  // namespace zetasketch
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zetasketch::android::DefaultOpsType* Arena::CreateMaybeMessage< ::zetasketch::android::DefaultOpsType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasketch::android::DefaultOpsType >(arena);
}
template<> PROTOBUF_NOINLINE ::zetasketch::android::AggregatorStateProto* Arena::CreateMaybeMessage< ::zetasketch::android::AggregatorStateProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zetasketch::android::AggregatorStateProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
