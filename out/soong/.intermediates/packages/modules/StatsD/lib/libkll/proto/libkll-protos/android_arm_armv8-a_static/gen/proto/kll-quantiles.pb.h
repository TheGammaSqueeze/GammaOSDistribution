// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kll-quantiles.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kll_2dquantiles_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kll_2dquantiles_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "aggregator.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kll_2dquantiles_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kll_2dquantiles_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace zetasketch {
namespace android {
class KllQuantilesStateProto;
class KllQuantilesStateProtoDefaultTypeInternal;
extern KllQuantilesStateProtoDefaultTypeInternal _KllQuantilesStateProto_default_instance_;
class KllQuantilesStateProto_Compactor;
class KllQuantilesStateProto_CompactorDefaultTypeInternal;
extern KllQuantilesStateProto_CompactorDefaultTypeInternal _KllQuantilesStateProto_Compactor_default_instance_;
class KllQuantilesStateProto_Compactor_NonPackableValues;
class KllQuantilesStateProto_Compactor_NonPackableValuesDefaultTypeInternal;
extern KllQuantilesStateProto_Compactor_NonPackableValuesDefaultTypeInternal _KllQuantilesStateProto_Compactor_NonPackableValues_default_instance_;
class KllQuantilesStateProto_Sampler;
class KllQuantilesStateProto_SamplerDefaultTypeInternal;
extern KllQuantilesStateProto_SamplerDefaultTypeInternal _KllQuantilesStateProto_Sampler_default_instance_;
}  // namespace android
}  // namespace zetasketch
PROTOBUF_NAMESPACE_OPEN
template<> ::zetasketch::android::KllQuantilesStateProto* Arena::CreateMaybeMessage<::zetasketch::android::KllQuantilesStateProto>(Arena*);
template<> ::zetasketch::android::KllQuantilesStateProto_Compactor* Arena::CreateMaybeMessage<::zetasketch::android::KllQuantilesStateProto_Compactor>(Arena*);
template<> ::zetasketch::android::KllQuantilesStateProto_Compactor_NonPackableValues* Arena::CreateMaybeMessage<::zetasketch::android::KllQuantilesStateProto_Compactor_NonPackableValues>(Arena*);
template<> ::zetasketch::android::KllQuantilesStateProto_Sampler* Arena::CreateMaybeMessage<::zetasketch::android::KllQuantilesStateProto_Sampler>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zetasketch {
namespace android {

// ===================================================================

class KllQuantilesStateProto_Compactor_NonPackableValues :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:zetasketch.android.KllQuantilesStateProto.Compactor.NonPackableValues) */ {
 public:
  KllQuantilesStateProto_Compactor_NonPackableValues();
  virtual ~KllQuantilesStateProto_Compactor_NonPackableValues();

  KllQuantilesStateProto_Compactor_NonPackableValues(const KllQuantilesStateProto_Compactor_NonPackableValues& from);
  KllQuantilesStateProto_Compactor_NonPackableValues(KllQuantilesStateProto_Compactor_NonPackableValues&& from) noexcept
    : KllQuantilesStateProto_Compactor_NonPackableValues() {
    *this = ::std::move(from);
  }

  inline KllQuantilesStateProto_Compactor_NonPackableValues& operator=(const KllQuantilesStateProto_Compactor_NonPackableValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline KllQuantilesStateProto_Compactor_NonPackableValues& operator=(KllQuantilesStateProto_Compactor_NonPackableValues&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const KllQuantilesStateProto_Compactor_NonPackableValues& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KllQuantilesStateProto_Compactor_NonPackableValues* internal_default_instance() {
    return reinterpret_cast<const KllQuantilesStateProto_Compactor_NonPackableValues*>(
               &_KllQuantilesStateProto_Compactor_NonPackableValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KllQuantilesStateProto_Compactor_NonPackableValues& a, KllQuantilesStateProto_Compactor_NonPackableValues& b) {
    a.Swap(&b);
  }
  inline void Swap(KllQuantilesStateProto_Compactor_NonPackableValues* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KllQuantilesStateProto_Compactor_NonPackableValues* New() const final {
    return CreateMaybeMessage<KllQuantilesStateProto_Compactor_NonPackableValues>(nullptr);
  }

  KllQuantilesStateProto_Compactor_NonPackableValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KllQuantilesStateProto_Compactor_NonPackableValues>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KllQuantilesStateProto_Compactor_NonPackableValues& from);
  void MergeFrom(const KllQuantilesStateProto_Compactor_NonPackableValues& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KllQuantilesStateProto_Compactor_NonPackableValues* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasketch.android.KllQuantilesStateProto.Compactor.NonPackableValues";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated bytes values = 1;
  int values_size() const;
  void clear_values();
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const void* value, size_t size);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_values();

  // @@protoc_insertion_point(class_scope:zetasketch.android.KllQuantilesStateProto.Compactor.NonPackableValues)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> values_;
  friend struct ::TableStruct_kll_2dquantiles_2eproto;
};
// -------------------------------------------------------------------

class KllQuantilesStateProto_Compactor :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:zetasketch.android.KllQuantilesStateProto.Compactor) */ {
 public:
  KllQuantilesStateProto_Compactor();
  virtual ~KllQuantilesStateProto_Compactor();

  KllQuantilesStateProto_Compactor(const KllQuantilesStateProto_Compactor& from);
  KllQuantilesStateProto_Compactor(KllQuantilesStateProto_Compactor&& from) noexcept
    : KllQuantilesStateProto_Compactor() {
    *this = ::std::move(from);
  }

  inline KllQuantilesStateProto_Compactor& operator=(const KllQuantilesStateProto_Compactor& from) {
    CopyFrom(from);
    return *this;
  }
  inline KllQuantilesStateProto_Compactor& operator=(KllQuantilesStateProto_Compactor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const KllQuantilesStateProto_Compactor& default_instance();

  enum CompactorValuesCase {
    kPackedValues = 1,
    kDiffEncodedPackedValues = 2,
    kOtherValues = 3,
    COMPACTOR_VALUES_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KllQuantilesStateProto_Compactor* internal_default_instance() {
    return reinterpret_cast<const KllQuantilesStateProto_Compactor*>(
               &_KllQuantilesStateProto_Compactor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KllQuantilesStateProto_Compactor& a, KllQuantilesStateProto_Compactor& b) {
    a.Swap(&b);
  }
  inline void Swap(KllQuantilesStateProto_Compactor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KllQuantilesStateProto_Compactor* New() const final {
    return CreateMaybeMessage<KllQuantilesStateProto_Compactor>(nullptr);
  }

  KllQuantilesStateProto_Compactor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KllQuantilesStateProto_Compactor>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KllQuantilesStateProto_Compactor& from);
  void MergeFrom(const KllQuantilesStateProto_Compactor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KllQuantilesStateProto_Compactor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasketch.android.KllQuantilesStateProto.Compactor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef KllQuantilesStateProto_Compactor_NonPackableValues NonPackableValues;

  // accessors -------------------------------------------------------

  enum : int {
    kPackedValuesFieldNumber = 1,
    kDiffEncodedPackedValuesFieldNumber = 2,
    kOtherValuesFieldNumber = 3,
  };
  // optional bytes packed_values = 1;
  bool has_packed_values() const;
  void clear_packed_values();
  const std::string& packed_values() const;
  void set_packed_values(const std::string& value);
  void set_packed_values(std::string&& value);
  void set_packed_values(const char* value);
  void set_packed_values(const void* value, size_t size);
  std::string* mutable_packed_values();
  std::string* release_packed_values();
  void set_allocated_packed_values(std::string* packed_values);

  // optional bytes diff_encoded_packed_values = 2;
  bool has_diff_encoded_packed_values() const;
  void clear_diff_encoded_packed_values();
  const std::string& diff_encoded_packed_values() const;
  void set_diff_encoded_packed_values(const std::string& value);
  void set_diff_encoded_packed_values(std::string&& value);
  void set_diff_encoded_packed_values(const char* value);
  void set_diff_encoded_packed_values(const void* value, size_t size);
  std::string* mutable_diff_encoded_packed_values();
  std::string* release_diff_encoded_packed_values();
  void set_allocated_diff_encoded_packed_values(std::string* diff_encoded_packed_values);

  // optional .zetasketch.android.KllQuantilesStateProto.Compactor.NonPackableValues other_values = 3;
  bool has_other_values() const;
  void clear_other_values();
  const ::zetasketch::android::KllQuantilesStateProto_Compactor_NonPackableValues& other_values() const;
  ::zetasketch::android::KllQuantilesStateProto_Compactor_NonPackableValues* release_other_values();
  ::zetasketch::android::KllQuantilesStateProto_Compactor_NonPackableValues* mutable_other_values();
  void set_allocated_other_values(::zetasketch::android::KllQuantilesStateProto_Compactor_NonPackableValues* other_values);

  void clear_compactor_values();
  CompactorValuesCase compactor_values_case() const;
  // @@protoc_insertion_point(class_scope:zetasketch.android.KllQuantilesStateProto.Compactor)
 private:
  class _Internal;
  void set_has_packed_values();
  void set_has_diff_encoded_packed_values();
  void set_has_other_values();

  inline bool has_compactor_values() const;
  inline void clear_has_compactor_values();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union CompactorValuesUnion {
    CompactorValuesUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packed_values_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr diff_encoded_packed_values_;
    ::zetasketch::android::KllQuantilesStateProto_Compactor_NonPackableValues* other_values_;
  } compactor_values_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_kll_2dquantiles_2eproto;
};
// -------------------------------------------------------------------

class KllQuantilesStateProto_Sampler :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:zetasketch.android.KllQuantilesStateProto.Sampler) */ {
 public:
  KllQuantilesStateProto_Sampler();
  virtual ~KllQuantilesStateProto_Sampler();

  KllQuantilesStateProto_Sampler(const KllQuantilesStateProto_Sampler& from);
  KllQuantilesStateProto_Sampler(KllQuantilesStateProto_Sampler&& from) noexcept
    : KllQuantilesStateProto_Sampler() {
    *this = ::std::move(from);
  }

  inline KllQuantilesStateProto_Sampler& operator=(const KllQuantilesStateProto_Sampler& from) {
    CopyFrom(from);
    return *this;
  }
  inline KllQuantilesStateProto_Sampler& operator=(KllQuantilesStateProto_Sampler&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const KllQuantilesStateProto_Sampler& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KllQuantilesStateProto_Sampler* internal_default_instance() {
    return reinterpret_cast<const KllQuantilesStateProto_Sampler*>(
               &_KllQuantilesStateProto_Sampler_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(KllQuantilesStateProto_Sampler& a, KllQuantilesStateProto_Sampler& b) {
    a.Swap(&b);
  }
  inline void Swap(KllQuantilesStateProto_Sampler* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KllQuantilesStateProto_Sampler* New() const final {
    return CreateMaybeMessage<KllQuantilesStateProto_Sampler>(nullptr);
  }

  KllQuantilesStateProto_Sampler* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KllQuantilesStateProto_Sampler>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KllQuantilesStateProto_Sampler& from);
  void MergeFrom(const KllQuantilesStateProto_Sampler& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KllQuantilesStateProto_Sampler* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasketch.android.KllQuantilesStateProto.Sampler";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSampledItemFieldNumber = 1,
    kSampledWeightFieldNumber = 2,
    kLogCapacityFieldNumber = 3,
  };
  // optional bytes sampled_item = 1;
  bool has_sampled_item() const;
  void clear_sampled_item();
  const std::string& sampled_item() const;
  void set_sampled_item(const std::string& value);
  void set_sampled_item(std::string&& value);
  void set_sampled_item(const char* value);
  void set_sampled_item(const void* value, size_t size);
  std::string* mutable_sampled_item();
  std::string* release_sampled_item();
  void set_allocated_sampled_item(std::string* sampled_item);

  // optional int64 sampled_weight = 2;
  bool has_sampled_weight() const;
  void clear_sampled_weight();
  ::PROTOBUF_NAMESPACE_ID::int64 sampled_weight() const;
  void set_sampled_weight(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 log_capacity = 3;
  bool has_log_capacity() const;
  void clear_log_capacity();
  ::PROTOBUF_NAMESPACE_ID::int32 log_capacity() const;
  void set_log_capacity(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:zetasketch.android.KllQuantilesStateProto.Sampler)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sampled_item_;
  ::PROTOBUF_NAMESPACE_ID::int64 sampled_weight_;
  ::PROTOBUF_NAMESPACE_ID::int32 log_capacity_;
  friend struct ::TableStruct_kll_2dquantiles_2eproto;
};
// -------------------------------------------------------------------

class KllQuantilesStateProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:zetasketch.android.KllQuantilesStateProto) */ {
 public:
  KllQuantilesStateProto();
  virtual ~KllQuantilesStateProto();

  KllQuantilesStateProto(const KllQuantilesStateProto& from);
  KllQuantilesStateProto(KllQuantilesStateProto&& from) noexcept
    : KllQuantilesStateProto() {
    *this = ::std::move(from);
  }

  inline KllQuantilesStateProto& operator=(const KllQuantilesStateProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline KllQuantilesStateProto& operator=(KllQuantilesStateProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const KllQuantilesStateProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KllQuantilesStateProto* internal_default_instance() {
    return reinterpret_cast<const KllQuantilesStateProto*>(
               &_KllQuantilesStateProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(KllQuantilesStateProto& a, KllQuantilesStateProto& b) {
    a.Swap(&b);
  }
  inline void Swap(KllQuantilesStateProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KllQuantilesStateProto* New() const final {
    return CreateMaybeMessage<KllQuantilesStateProto>(nullptr);
  }

  KllQuantilesStateProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KllQuantilesStateProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KllQuantilesStateProto& from);
  void MergeFrom(const KllQuantilesStateProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KllQuantilesStateProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasketch.android.KllQuantilesStateProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef KllQuantilesStateProto_Compactor Compactor;
  typedef KllQuantilesStateProto_Sampler Sampler;

  // accessors -------------------------------------------------------

  enum : int {
    kCompactorsFieldNumber = 5,
    kMinFieldNumber = 3,
    kMaxFieldNumber = 4,
    kSamplerFieldNumber = 6,
    kInvEpsFieldNumber = 2,
    kKFieldNumber = 1,
  };
  // repeated .zetasketch.android.KllQuantilesStateProto.Compactor compactors = 5;
  int compactors_size() const;
  void clear_compactors();
  ::zetasketch::android::KllQuantilesStateProto_Compactor* mutable_compactors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasketch::android::KllQuantilesStateProto_Compactor >*
      mutable_compactors();
  const ::zetasketch::android::KllQuantilesStateProto_Compactor& compactors(int index) const;
  ::zetasketch::android::KllQuantilesStateProto_Compactor* add_compactors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasketch::android::KllQuantilesStateProto_Compactor >&
      compactors() const;

  // optional bytes min = 3;
  bool has_min() const;
  void clear_min();
  const std::string& min() const;
  void set_min(const std::string& value);
  void set_min(std::string&& value);
  void set_min(const char* value);
  void set_min(const void* value, size_t size);
  std::string* mutable_min();
  std::string* release_min();
  void set_allocated_min(std::string* min);

  // optional bytes max = 4;
  bool has_max() const;
  void clear_max();
  const std::string& max() const;
  void set_max(const std::string& value);
  void set_max(std::string&& value);
  void set_max(const char* value);
  void set_max(const void* value, size_t size);
  std::string* mutable_max();
  std::string* release_max();
  void set_allocated_max(std::string* max);

  // optional .zetasketch.android.KllQuantilesStateProto.Sampler sampler = 6;
  bool has_sampler() const;
  void clear_sampler();
  const ::zetasketch::android::KllQuantilesStateProto_Sampler& sampler() const;
  ::zetasketch::android::KllQuantilesStateProto_Sampler* release_sampler();
  ::zetasketch::android::KllQuantilesStateProto_Sampler* mutable_sampler();
  void set_allocated_sampler(::zetasketch::android::KllQuantilesStateProto_Sampler* sampler);

  // optional int64 inv_eps = 2;
  bool has_inv_eps() const;
  void clear_inv_eps();
  ::PROTOBUF_NAMESPACE_ID::int64 inv_eps() const;
  void set_inv_eps(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 k = 1;
  bool has_k() const;
  void clear_k();
  ::PROTOBUF_NAMESPACE_ID::int32 k() const;
  void set_k(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:zetasketch.android.KllQuantilesStateProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasketch::android::KllQuantilesStateProto_Compactor > compactors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr min_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr max_;
  ::zetasketch::android::KllQuantilesStateProto_Sampler* sampler_;
  ::PROTOBUF_NAMESPACE_ID::int64 inv_eps_;
  ::PROTOBUF_NAMESPACE_ID::int32 k_;
  friend struct ::TableStruct_kll_2dquantiles_2eproto;
};
// ===================================================================

static const int kKllQuantilesStateFieldNumber = 113;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::zetasketch::android::AggregatorStateProto,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::zetasketch::android::KllQuantilesStateProto >, 11, false >
  kll_quantiles_state;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KllQuantilesStateProto_Compactor_NonPackableValues

// repeated bytes values = 1;
inline int KllQuantilesStateProto_Compactor_NonPackableValues::values_size() const {
  return values_.size();
}
inline void KllQuantilesStateProto_Compactor_NonPackableValues::clear_values() {
  values_.Clear();
}
inline const std::string& KllQuantilesStateProto_Compactor_NonPackableValues::values(int index) const {
  // @@protoc_insertion_point(field_get:zetasketch.android.KllQuantilesStateProto.Compactor.NonPackableValues.values)
  return values_.Get(index);
}
inline std::string* KllQuantilesStateProto_Compactor_NonPackableValues::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:zetasketch.android.KllQuantilesStateProto.Compactor.NonPackableValues.values)
  return values_.Mutable(index);
}
inline void KllQuantilesStateProto_Compactor_NonPackableValues::set_values(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:zetasketch.android.KllQuantilesStateProto.Compactor.NonPackableValues.values)
  values_.Mutable(index)->assign(value);
}
inline void KllQuantilesStateProto_Compactor_NonPackableValues::set_values(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasketch.android.KllQuantilesStateProto.Compactor.NonPackableValues.values)
  values_.Mutable(index)->assign(std::move(value));
}
inline void KllQuantilesStateProto_Compactor_NonPackableValues::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zetasketch.android.KllQuantilesStateProto.Compactor.NonPackableValues.values)
}
inline void KllQuantilesStateProto_Compactor_NonPackableValues::set_values(int index, const void* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zetasketch.android.KllQuantilesStateProto.Compactor.NonPackableValues.values)
}
inline std::string* KllQuantilesStateProto_Compactor_NonPackableValues::add_values() {
  // @@protoc_insertion_point(field_add_mutable:zetasketch.android.KllQuantilesStateProto.Compactor.NonPackableValues.values)
  return values_.Add();
}
inline void KllQuantilesStateProto_Compactor_NonPackableValues::add_values(const std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zetasketch.android.KllQuantilesStateProto.Compactor.NonPackableValues.values)
}
inline void KllQuantilesStateProto_Compactor_NonPackableValues::add_values(std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:zetasketch.android.KllQuantilesStateProto.Compactor.NonPackableValues.values)
}
inline void KllQuantilesStateProto_Compactor_NonPackableValues::add_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zetasketch.android.KllQuantilesStateProto.Compactor.NonPackableValues.values)
}
inline void KllQuantilesStateProto_Compactor_NonPackableValues::add_values(const void* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zetasketch.android.KllQuantilesStateProto.Compactor.NonPackableValues.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
KllQuantilesStateProto_Compactor_NonPackableValues::values() const {
  // @@protoc_insertion_point(field_list:zetasketch.android.KllQuantilesStateProto.Compactor.NonPackableValues.values)
  return values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
KllQuantilesStateProto_Compactor_NonPackableValues::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:zetasketch.android.KllQuantilesStateProto.Compactor.NonPackableValues.values)
  return &values_;
}

// -------------------------------------------------------------------

// KllQuantilesStateProto_Compactor

// optional bytes packed_values = 1;
inline bool KllQuantilesStateProto_Compactor::has_packed_values() const {
  return compactor_values_case() == kPackedValues;
}
inline void KllQuantilesStateProto_Compactor::set_has_packed_values() {
  _oneof_case_[0] = kPackedValues;
}
inline void KllQuantilesStateProto_Compactor::clear_packed_values() {
  if (has_packed_values()) {
    compactor_values_.packed_values_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_compactor_values();
  }
}
inline const std::string& KllQuantilesStateProto_Compactor::packed_values() const {
  // @@protoc_insertion_point(field_get:zetasketch.android.KllQuantilesStateProto.Compactor.packed_values)
  if (has_packed_values()) {
    return compactor_values_.packed_values_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void KllQuantilesStateProto_Compactor::set_packed_values(const std::string& value) {
  // @@protoc_insertion_point(field_set:zetasketch.android.KllQuantilesStateProto.Compactor.packed_values)
  if (!has_packed_values()) {
    clear_compactor_values();
    set_has_packed_values();
    compactor_values_.packed_values_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  compactor_values_.packed_values_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasketch.android.KllQuantilesStateProto.Compactor.packed_values)
}
inline void KllQuantilesStateProto_Compactor::set_packed_values(std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasketch.android.KllQuantilesStateProto.Compactor.packed_values)
  if (!has_packed_values()) {
    clear_compactor_values();
    set_has_packed_values();
    compactor_values_.packed_values_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  compactor_values_.packed_values_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasketch.android.KllQuantilesStateProto.Compactor.packed_values)
}
inline void KllQuantilesStateProto_Compactor::set_packed_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_packed_values()) {
    clear_compactor_values();
    set_has_packed_values();
    compactor_values_.packed_values_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  compactor_values_.packed_values_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasketch.android.KllQuantilesStateProto.Compactor.packed_values)
}
inline void KllQuantilesStateProto_Compactor::set_packed_values(const void* value, size_t size) {
  if (!has_packed_values()) {
    clear_compactor_values();
    set_has_packed_values();
    compactor_values_.packed_values_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  compactor_values_.packed_values_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasketch.android.KllQuantilesStateProto.Compactor.packed_values)
}
inline std::string* KllQuantilesStateProto_Compactor::mutable_packed_values() {
  if (!has_packed_values()) {
    clear_compactor_values();
    set_has_packed_values();
    compactor_values_.packed_values_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:zetasketch.android.KllQuantilesStateProto.Compactor.packed_values)
  return compactor_values_.packed_values_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KllQuantilesStateProto_Compactor::release_packed_values() {
  // @@protoc_insertion_point(field_release:zetasketch.android.KllQuantilesStateProto.Compactor.packed_values)
  if (has_packed_values()) {
    clear_has_compactor_values();
    return compactor_values_.packed_values_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void KllQuantilesStateProto_Compactor::set_allocated_packed_values(std::string* packed_values) {
  if (has_compactor_values()) {
    clear_compactor_values();
  }
  if (packed_values != nullptr) {
    set_has_packed_values();
    compactor_values_.packed_values_.UnsafeSetDefault(packed_values);
  }
  // @@protoc_insertion_point(field_set_allocated:zetasketch.android.KllQuantilesStateProto.Compactor.packed_values)
}

// optional bytes diff_encoded_packed_values = 2;
inline bool KllQuantilesStateProto_Compactor::has_diff_encoded_packed_values() const {
  return compactor_values_case() == kDiffEncodedPackedValues;
}
inline void KllQuantilesStateProto_Compactor::set_has_diff_encoded_packed_values() {
  _oneof_case_[0] = kDiffEncodedPackedValues;
}
inline void KllQuantilesStateProto_Compactor::clear_diff_encoded_packed_values() {
  if (has_diff_encoded_packed_values()) {
    compactor_values_.diff_encoded_packed_values_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_compactor_values();
  }
}
inline const std::string& KllQuantilesStateProto_Compactor::diff_encoded_packed_values() const {
  // @@protoc_insertion_point(field_get:zetasketch.android.KllQuantilesStateProto.Compactor.diff_encoded_packed_values)
  if (has_diff_encoded_packed_values()) {
    return compactor_values_.diff_encoded_packed_values_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void KllQuantilesStateProto_Compactor::set_diff_encoded_packed_values(const std::string& value) {
  // @@protoc_insertion_point(field_set:zetasketch.android.KllQuantilesStateProto.Compactor.diff_encoded_packed_values)
  if (!has_diff_encoded_packed_values()) {
    clear_compactor_values();
    set_has_diff_encoded_packed_values();
    compactor_values_.diff_encoded_packed_values_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  compactor_values_.diff_encoded_packed_values_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasketch.android.KllQuantilesStateProto.Compactor.diff_encoded_packed_values)
}
inline void KllQuantilesStateProto_Compactor::set_diff_encoded_packed_values(std::string&& value) {
  // @@protoc_insertion_point(field_set:zetasketch.android.KllQuantilesStateProto.Compactor.diff_encoded_packed_values)
  if (!has_diff_encoded_packed_values()) {
    clear_compactor_values();
    set_has_diff_encoded_packed_values();
    compactor_values_.diff_encoded_packed_values_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  compactor_values_.diff_encoded_packed_values_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasketch.android.KllQuantilesStateProto.Compactor.diff_encoded_packed_values)
}
inline void KllQuantilesStateProto_Compactor::set_diff_encoded_packed_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_diff_encoded_packed_values()) {
    clear_compactor_values();
    set_has_diff_encoded_packed_values();
    compactor_values_.diff_encoded_packed_values_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  compactor_values_.diff_encoded_packed_values_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasketch.android.KllQuantilesStateProto.Compactor.diff_encoded_packed_values)
}
inline void KllQuantilesStateProto_Compactor::set_diff_encoded_packed_values(const void* value, size_t size) {
  if (!has_diff_encoded_packed_values()) {
    clear_compactor_values();
    set_has_diff_encoded_packed_values();
    compactor_values_.diff_encoded_packed_values_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  compactor_values_.diff_encoded_packed_values_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasketch.android.KllQuantilesStateProto.Compactor.diff_encoded_packed_values)
}
inline std::string* KllQuantilesStateProto_Compactor::mutable_diff_encoded_packed_values() {
  if (!has_diff_encoded_packed_values()) {
    clear_compactor_values();
    set_has_diff_encoded_packed_values();
    compactor_values_.diff_encoded_packed_values_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:zetasketch.android.KllQuantilesStateProto.Compactor.diff_encoded_packed_values)
  return compactor_values_.diff_encoded_packed_values_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KllQuantilesStateProto_Compactor::release_diff_encoded_packed_values() {
  // @@protoc_insertion_point(field_release:zetasketch.android.KllQuantilesStateProto.Compactor.diff_encoded_packed_values)
  if (has_diff_encoded_packed_values()) {
    clear_has_compactor_values();
    return compactor_values_.diff_encoded_packed_values_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void KllQuantilesStateProto_Compactor::set_allocated_diff_encoded_packed_values(std::string* diff_encoded_packed_values) {
  if (has_compactor_values()) {
    clear_compactor_values();
  }
  if (diff_encoded_packed_values != nullptr) {
    set_has_diff_encoded_packed_values();
    compactor_values_.diff_encoded_packed_values_.UnsafeSetDefault(diff_encoded_packed_values);
  }
  // @@protoc_insertion_point(field_set_allocated:zetasketch.android.KllQuantilesStateProto.Compactor.diff_encoded_packed_values)
}

// optional .zetasketch.android.KllQuantilesStateProto.Compactor.NonPackableValues other_values = 3;
inline bool KllQuantilesStateProto_Compactor::has_other_values() const {
  return compactor_values_case() == kOtherValues;
}
inline void KllQuantilesStateProto_Compactor::set_has_other_values() {
  _oneof_case_[0] = kOtherValues;
}
inline void KllQuantilesStateProto_Compactor::clear_other_values() {
  if (has_other_values()) {
    delete compactor_values_.other_values_;
    clear_has_compactor_values();
  }
}
inline ::zetasketch::android::KllQuantilesStateProto_Compactor_NonPackableValues* KllQuantilesStateProto_Compactor::release_other_values() {
  // @@protoc_insertion_point(field_release:zetasketch.android.KllQuantilesStateProto.Compactor.other_values)
  if (has_other_values()) {
    clear_has_compactor_values();
      ::zetasketch::android::KllQuantilesStateProto_Compactor_NonPackableValues* temp = compactor_values_.other_values_;
    compactor_values_.other_values_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::zetasketch::android::KllQuantilesStateProto_Compactor_NonPackableValues& KllQuantilesStateProto_Compactor::other_values() const {
  // @@protoc_insertion_point(field_get:zetasketch.android.KllQuantilesStateProto.Compactor.other_values)
  return has_other_values()
      ? *compactor_values_.other_values_
      : *reinterpret_cast< ::zetasketch::android::KllQuantilesStateProto_Compactor_NonPackableValues*>(&::zetasketch::android::_KllQuantilesStateProto_Compactor_NonPackableValues_default_instance_);
}
inline ::zetasketch::android::KllQuantilesStateProto_Compactor_NonPackableValues* KllQuantilesStateProto_Compactor::mutable_other_values() {
  if (!has_other_values()) {
    clear_compactor_values();
    set_has_other_values();
    compactor_values_.other_values_ = CreateMaybeMessage< ::zetasketch::android::KllQuantilesStateProto_Compactor_NonPackableValues >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:zetasketch.android.KllQuantilesStateProto.Compactor.other_values)
  return compactor_values_.other_values_;
}

inline bool KllQuantilesStateProto_Compactor::has_compactor_values() const {
  return compactor_values_case() != COMPACTOR_VALUES_NOT_SET;
}
inline void KllQuantilesStateProto_Compactor::clear_has_compactor_values() {
  _oneof_case_[0] = COMPACTOR_VALUES_NOT_SET;
}
inline KllQuantilesStateProto_Compactor::CompactorValuesCase KllQuantilesStateProto_Compactor::compactor_values_case() const {
  return KllQuantilesStateProto_Compactor::CompactorValuesCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// KllQuantilesStateProto_Sampler

// optional bytes sampled_item = 1;
inline bool KllQuantilesStateProto_Sampler::has_sampled_item() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KllQuantilesStateProto_Sampler::clear_sampled_item() {
  sampled_item_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KllQuantilesStateProto_Sampler::sampled_item() const {
  // @@protoc_insertion_point(field_get:zetasketch.android.KllQuantilesStateProto.Sampler.sampled_item)
  return sampled_item_.GetNoArena();
}
inline void KllQuantilesStateProto_Sampler::set_sampled_item(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sampled_item_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasketch.android.KllQuantilesStateProto.Sampler.sampled_item)
}
inline void KllQuantilesStateProto_Sampler::set_sampled_item(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sampled_item_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasketch.android.KllQuantilesStateProto.Sampler.sampled_item)
}
inline void KllQuantilesStateProto_Sampler::set_sampled_item(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sampled_item_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasketch.android.KllQuantilesStateProto.Sampler.sampled_item)
}
inline void KllQuantilesStateProto_Sampler::set_sampled_item(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sampled_item_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasketch.android.KllQuantilesStateProto.Sampler.sampled_item)
}
inline std::string* KllQuantilesStateProto_Sampler::mutable_sampled_item() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:zetasketch.android.KllQuantilesStateProto.Sampler.sampled_item)
  return sampled_item_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KllQuantilesStateProto_Sampler::release_sampled_item() {
  // @@protoc_insertion_point(field_release:zetasketch.android.KllQuantilesStateProto.Sampler.sampled_item)
  if (!has_sampled_item()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sampled_item_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KllQuantilesStateProto_Sampler::set_allocated_sampled_item(std::string* sampled_item) {
  if (sampled_item != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sampled_item_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sampled_item);
  // @@protoc_insertion_point(field_set_allocated:zetasketch.android.KllQuantilesStateProto.Sampler.sampled_item)
}

// optional int64 sampled_weight = 2;
inline bool KllQuantilesStateProto_Sampler::has_sampled_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KllQuantilesStateProto_Sampler::clear_sampled_weight() {
  sampled_weight_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KllQuantilesStateProto_Sampler::sampled_weight() const {
  // @@protoc_insertion_point(field_get:zetasketch.android.KllQuantilesStateProto.Sampler.sampled_weight)
  return sampled_weight_;
}
inline void KllQuantilesStateProto_Sampler::set_sampled_weight(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  sampled_weight_ = value;
  // @@protoc_insertion_point(field_set:zetasketch.android.KllQuantilesStateProto.Sampler.sampled_weight)
}

// optional int32 log_capacity = 3;
inline bool KllQuantilesStateProto_Sampler::has_log_capacity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KllQuantilesStateProto_Sampler::clear_log_capacity() {
  log_capacity_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KllQuantilesStateProto_Sampler::log_capacity() const {
  // @@protoc_insertion_point(field_get:zetasketch.android.KllQuantilesStateProto.Sampler.log_capacity)
  return log_capacity_;
}
inline void KllQuantilesStateProto_Sampler::set_log_capacity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  log_capacity_ = value;
  // @@protoc_insertion_point(field_set:zetasketch.android.KllQuantilesStateProto.Sampler.log_capacity)
}

// -------------------------------------------------------------------

// KllQuantilesStateProto

// optional int32 k = 1;
inline bool KllQuantilesStateProto::has_k() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void KllQuantilesStateProto::clear_k() {
  k_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KllQuantilesStateProto::k() const {
  // @@protoc_insertion_point(field_get:zetasketch.android.KllQuantilesStateProto.k)
  return k_;
}
inline void KllQuantilesStateProto::set_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  k_ = value;
  // @@protoc_insertion_point(field_set:zetasketch.android.KllQuantilesStateProto.k)
}

// optional int64 inv_eps = 2;
inline bool KllQuantilesStateProto::has_inv_eps() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KllQuantilesStateProto::clear_inv_eps() {
  inv_eps_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KllQuantilesStateProto::inv_eps() const {
  // @@protoc_insertion_point(field_get:zetasketch.android.KllQuantilesStateProto.inv_eps)
  return inv_eps_;
}
inline void KllQuantilesStateProto::set_inv_eps(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  inv_eps_ = value;
  // @@protoc_insertion_point(field_set:zetasketch.android.KllQuantilesStateProto.inv_eps)
}

// optional bytes min = 3;
inline bool KllQuantilesStateProto::has_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KllQuantilesStateProto::clear_min() {
  min_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KllQuantilesStateProto::min() const {
  // @@protoc_insertion_point(field_get:zetasketch.android.KllQuantilesStateProto.min)
  return min_.GetNoArena();
}
inline void KllQuantilesStateProto::set_min(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  min_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasketch.android.KllQuantilesStateProto.min)
}
inline void KllQuantilesStateProto::set_min(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  min_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasketch.android.KllQuantilesStateProto.min)
}
inline void KllQuantilesStateProto::set_min(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  min_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasketch.android.KllQuantilesStateProto.min)
}
inline void KllQuantilesStateProto::set_min(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  min_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasketch.android.KllQuantilesStateProto.min)
}
inline std::string* KllQuantilesStateProto::mutable_min() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:zetasketch.android.KllQuantilesStateProto.min)
  return min_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KllQuantilesStateProto::release_min() {
  // @@protoc_insertion_point(field_release:zetasketch.android.KllQuantilesStateProto.min)
  if (!has_min()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return min_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KllQuantilesStateProto::set_allocated_min(std::string* min) {
  if (min != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  min_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), min);
  // @@protoc_insertion_point(field_set_allocated:zetasketch.android.KllQuantilesStateProto.min)
}

// optional bytes max = 4;
inline bool KllQuantilesStateProto::has_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KllQuantilesStateProto::clear_max() {
  max_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KllQuantilesStateProto::max() const {
  // @@protoc_insertion_point(field_get:zetasketch.android.KllQuantilesStateProto.max)
  return max_.GetNoArena();
}
inline void KllQuantilesStateProto::set_max(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  max_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zetasketch.android.KllQuantilesStateProto.max)
}
inline void KllQuantilesStateProto::set_max(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  max_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zetasketch.android.KllQuantilesStateProto.max)
}
inline void KllQuantilesStateProto::set_max(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  max_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zetasketch.android.KllQuantilesStateProto.max)
}
inline void KllQuantilesStateProto::set_max(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  max_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zetasketch.android.KllQuantilesStateProto.max)
}
inline std::string* KllQuantilesStateProto::mutable_max() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:zetasketch.android.KllQuantilesStateProto.max)
  return max_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KllQuantilesStateProto::release_max() {
  // @@protoc_insertion_point(field_release:zetasketch.android.KllQuantilesStateProto.max)
  if (!has_max()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return max_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KllQuantilesStateProto::set_allocated_max(std::string* max) {
  if (max != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  max_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), max);
  // @@protoc_insertion_point(field_set_allocated:zetasketch.android.KllQuantilesStateProto.max)
}

// repeated .zetasketch.android.KllQuantilesStateProto.Compactor compactors = 5;
inline int KllQuantilesStateProto::compactors_size() const {
  return compactors_.size();
}
inline void KllQuantilesStateProto::clear_compactors() {
  compactors_.Clear();
}
inline ::zetasketch::android::KllQuantilesStateProto_Compactor* KllQuantilesStateProto::mutable_compactors(int index) {
  // @@protoc_insertion_point(field_mutable:zetasketch.android.KllQuantilesStateProto.compactors)
  return compactors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasketch::android::KllQuantilesStateProto_Compactor >*
KllQuantilesStateProto::mutable_compactors() {
  // @@protoc_insertion_point(field_mutable_list:zetasketch.android.KllQuantilesStateProto.compactors)
  return &compactors_;
}
inline const ::zetasketch::android::KllQuantilesStateProto_Compactor& KllQuantilesStateProto::compactors(int index) const {
  // @@protoc_insertion_point(field_get:zetasketch.android.KllQuantilesStateProto.compactors)
  return compactors_.Get(index);
}
inline ::zetasketch::android::KllQuantilesStateProto_Compactor* KllQuantilesStateProto::add_compactors() {
  // @@protoc_insertion_point(field_add:zetasketch.android.KllQuantilesStateProto.compactors)
  return compactors_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zetasketch::android::KllQuantilesStateProto_Compactor >&
KllQuantilesStateProto::compactors() const {
  // @@protoc_insertion_point(field_list:zetasketch.android.KllQuantilesStateProto.compactors)
  return compactors_;
}

// optional .zetasketch.android.KllQuantilesStateProto.Sampler sampler = 6;
inline bool KllQuantilesStateProto::has_sampler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KllQuantilesStateProto::clear_sampler() {
  if (sampler_ != nullptr) sampler_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::zetasketch::android::KllQuantilesStateProto_Sampler& KllQuantilesStateProto::sampler() const {
  const ::zetasketch::android::KllQuantilesStateProto_Sampler* p = sampler_;
  // @@protoc_insertion_point(field_get:zetasketch.android.KllQuantilesStateProto.sampler)
  return p != nullptr ? *p : *reinterpret_cast<const ::zetasketch::android::KllQuantilesStateProto_Sampler*>(
      &::zetasketch::android::_KllQuantilesStateProto_Sampler_default_instance_);
}
inline ::zetasketch::android::KllQuantilesStateProto_Sampler* KllQuantilesStateProto::release_sampler() {
  // @@protoc_insertion_point(field_release:zetasketch.android.KllQuantilesStateProto.sampler)
  _has_bits_[0] &= ~0x00000004u;
  ::zetasketch::android::KllQuantilesStateProto_Sampler* temp = sampler_;
  sampler_ = nullptr;
  return temp;
}
inline ::zetasketch::android::KllQuantilesStateProto_Sampler* KllQuantilesStateProto::mutable_sampler() {
  _has_bits_[0] |= 0x00000004u;
  if (sampler_ == nullptr) {
    auto* p = CreateMaybeMessage<::zetasketch::android::KllQuantilesStateProto_Sampler>(GetArenaNoVirtual());
    sampler_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zetasketch.android.KllQuantilesStateProto.sampler)
  return sampler_;
}
inline void KllQuantilesStateProto::set_allocated_sampler(::zetasketch::android::KllQuantilesStateProto_Sampler* sampler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sampler_;
  }
  if (sampler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sampler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sampler, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sampler_ = sampler;
  // @@protoc_insertion_point(field_set_allocated:zetasketch.android.KllQuantilesStateProto.sampler)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace android
}  // namespace zetasketch

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kll_2dquantiles_2eproto
