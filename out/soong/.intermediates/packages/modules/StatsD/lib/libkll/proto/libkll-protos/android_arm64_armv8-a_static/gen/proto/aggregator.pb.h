// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aggregator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_aggregator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_aggregator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_aggregator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_aggregator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace zetasketch {
namespace android {
class AggregatorStateProto;
class AggregatorStateProtoDefaultTypeInternal;
extern AggregatorStateProtoDefaultTypeInternal _AggregatorStateProto_default_instance_;
class DefaultOpsType;
class DefaultOpsTypeDefaultTypeInternal;
extern DefaultOpsTypeDefaultTypeInternal _DefaultOpsType_default_instance_;
}  // namespace android
}  // namespace zetasketch
PROTOBUF_NAMESPACE_OPEN
template<> ::zetasketch::android::AggregatorStateProto* Arena::CreateMaybeMessage<::zetasketch::android::AggregatorStateProto>(Arena*);
template<> ::zetasketch::android::DefaultOpsType* Arena::CreateMaybeMessage<::zetasketch::android::DefaultOpsType>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zetasketch {
namespace android {

enum DefaultOpsType_Id : int {
  DefaultOpsType_Id_UNKNOWN = 0,
  DefaultOpsType_Id_INT64 = 4
};
bool DefaultOpsType_Id_IsValid(int value);
constexpr DefaultOpsType_Id DefaultOpsType_Id_Id_MIN = DefaultOpsType_Id_UNKNOWN;
constexpr DefaultOpsType_Id DefaultOpsType_Id_Id_MAX = DefaultOpsType_Id_INT64;
constexpr int DefaultOpsType_Id_Id_ARRAYSIZE = DefaultOpsType_Id_Id_MAX + 1;

const std::string& DefaultOpsType_Id_Name(DefaultOpsType_Id value);
template<typename T>
inline const std::string& DefaultOpsType_Id_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DefaultOpsType_Id>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DefaultOpsType_Id_Name.");
  return DefaultOpsType_Id_Name(static_cast<DefaultOpsType_Id>(enum_t_value));
}
bool DefaultOpsType_Id_Parse(
    const std::string& name, DefaultOpsType_Id* value);
enum AggregatorType : int {
  KLL_QUANTILES = 113
};
bool AggregatorType_IsValid(int value);
constexpr AggregatorType AggregatorType_MIN = KLL_QUANTILES;
constexpr AggregatorType AggregatorType_MAX = KLL_QUANTILES;
constexpr int AggregatorType_ARRAYSIZE = AggregatorType_MAX + 1;

const std::string& AggregatorType_Name(AggregatorType value);
template<typename T>
inline const std::string& AggregatorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AggregatorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AggregatorType_Name.");
  return AggregatorType_Name(static_cast<AggregatorType>(enum_t_value));
}
bool AggregatorType_Parse(
    const std::string& name, AggregatorType* value);
// ===================================================================

class DefaultOpsType :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:zetasketch.android.DefaultOpsType) */ {
 public:
  DefaultOpsType();
  virtual ~DefaultOpsType();

  DefaultOpsType(const DefaultOpsType& from);
  DefaultOpsType(DefaultOpsType&& from) noexcept
    : DefaultOpsType() {
    *this = ::std::move(from);
  }

  inline DefaultOpsType& operator=(const DefaultOpsType& from) {
    CopyFrom(from);
    return *this;
  }
  inline DefaultOpsType& operator=(DefaultOpsType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const DefaultOpsType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DefaultOpsType* internal_default_instance() {
    return reinterpret_cast<const DefaultOpsType*>(
               &_DefaultOpsType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DefaultOpsType& a, DefaultOpsType& b) {
    a.Swap(&b);
  }
  inline void Swap(DefaultOpsType* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DefaultOpsType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DefaultOpsType* New() const final {
    return CreateMaybeMessage<DefaultOpsType>(nullptr);
  }

  DefaultOpsType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DefaultOpsType>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DefaultOpsType& from);
  void MergeFrom(const DefaultOpsType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DefaultOpsType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasketch.android.DefaultOpsType";
  }
  protected:
  explicit DefaultOpsType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DefaultOpsType_Id Id;
  static constexpr Id UNKNOWN =
    DefaultOpsType_Id_UNKNOWN;
  static constexpr Id INT64 =
    DefaultOpsType_Id_INT64;
  static inline bool Id_IsValid(int value) {
    return DefaultOpsType_Id_IsValid(value);
  }
  static constexpr Id Id_MIN =
    DefaultOpsType_Id_Id_MIN;
  static constexpr Id Id_MAX =
    DefaultOpsType_Id_Id_MAX;
  static constexpr int Id_ARRAYSIZE =
    DefaultOpsType_Id_Id_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Id_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Id>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Id_Name.");
    return DefaultOpsType_Id_Name(enum_t_value);
  }
  static inline bool Id_Parse(const std::string& name,
      Id* value) {
    return DefaultOpsType_Id_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:zetasketch.android.DefaultOpsType)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_aggregator_2eproto;
};
// -------------------------------------------------------------------

class AggregatorStateProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:zetasketch.android.AggregatorStateProto) */ {
 public:
  AggregatorStateProto();
  virtual ~AggregatorStateProto();

  AggregatorStateProto(const AggregatorStateProto& from);
  AggregatorStateProto(AggregatorStateProto&& from) noexcept
    : AggregatorStateProto() {
    *this = ::std::move(from);
  }

  inline AggregatorStateProto& operator=(const AggregatorStateProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggregatorStateProto& operator=(AggregatorStateProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const AggregatorStateProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AggregatorStateProto* internal_default_instance() {
    return reinterpret_cast<const AggregatorStateProto*>(
               &_AggregatorStateProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AggregatorStateProto& a, AggregatorStateProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AggregatorStateProto* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AggregatorStateProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AggregatorStateProto* New() const final {
    return CreateMaybeMessage<AggregatorStateProto>(nullptr);
  }

  AggregatorStateProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AggregatorStateProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AggregatorStateProto& from);
  void MergeFrom(const AggregatorStateProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AggregatorStateProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zetasketch.android.AggregatorStateProto";
  }
  protected:
  explicit AggregatorStateProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumValuesFieldNumber = 2,
    kValueTypeFieldNumber = 4,
    kTypeFieldNumber = 1,
    kEncodingVersionFieldNumber = 3,
  };
  // optional int64 num_values = 2;
  bool has_num_values() const;
  void clear_num_values();
  ::PROTOBUF_NAMESPACE_ID::int64 num_values() const;
  void set_num_values(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 value_type = 4;
  bool has_value_type() const;
  void clear_value_type();
  ::PROTOBUF_NAMESPACE_ID::int32 value_type() const;
  void set_value_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .zetasketch.android.AggregatorType type = 1;
  bool has_type() const;
  void clear_type();
  ::zetasketch::android::AggregatorType type() const;
  void set_type(::zetasketch::android::AggregatorType value);

  // optional int32 encoding_version = 3 [default = 1];
  bool has_encoding_version() const;
  void clear_encoding_version();
  ::PROTOBUF_NAMESPACE_ID::int32 encoding_version() const;
  void set_encoding_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(AggregatorStateProto)
  // @@protoc_insertion_point(class_scope:zetasketch.android.AggregatorStateProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_values_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_type_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 encoding_version_;
  friend struct ::TableStruct_aggregator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DefaultOpsType

// -------------------------------------------------------------------

// AggregatorStateProto

// optional .zetasketch.android.AggregatorType type = 1;
inline bool AggregatorStateProto::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AggregatorStateProto::clear_type() {
  type_ = 113;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::zetasketch::android::AggregatorType AggregatorStateProto::type() const {
  // @@protoc_insertion_point(field_get:zetasketch.android.AggregatorStateProto.type)
  return static_cast< ::zetasketch::android::AggregatorType >(type_);
}
inline void AggregatorStateProto::set_type(::zetasketch::android::AggregatorType value) {
  assert(::zetasketch::android::AggregatorType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
  // @@protoc_insertion_point(field_set:zetasketch.android.AggregatorStateProto.type)
}

// optional int64 num_values = 2;
inline bool AggregatorStateProto::has_num_values() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AggregatorStateProto::clear_num_values() {
  num_values_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AggregatorStateProto::num_values() const {
  // @@protoc_insertion_point(field_get:zetasketch.android.AggregatorStateProto.num_values)
  return num_values_;
}
inline void AggregatorStateProto::set_num_values(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  num_values_ = value;
  // @@protoc_insertion_point(field_set:zetasketch.android.AggregatorStateProto.num_values)
}

// optional int32 encoding_version = 3 [default = 1];
inline bool AggregatorStateProto::has_encoding_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AggregatorStateProto::clear_encoding_version() {
  encoding_version_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AggregatorStateProto::encoding_version() const {
  // @@protoc_insertion_point(field_get:zetasketch.android.AggregatorStateProto.encoding_version)
  return encoding_version_;
}
inline void AggregatorStateProto::set_encoding_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  encoding_version_ = value;
  // @@protoc_insertion_point(field_set:zetasketch.android.AggregatorStateProto.encoding_version)
}

// optional int32 value_type = 4;
inline bool AggregatorStateProto::has_value_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AggregatorStateProto::clear_value_type() {
  value_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AggregatorStateProto::value_type() const {
  // @@protoc_insertion_point(field_get:zetasketch.android.AggregatorStateProto.value_type)
  return value_type_;
}
inline void AggregatorStateProto::set_value_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  value_type_ = value;
  // @@protoc_insertion_point(field_set:zetasketch.android.AggregatorStateProto.value_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace android
}  // namespace zetasketch

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zetasketch::android::DefaultOpsType_Id> : ::std::true_type {};
template <> struct is_proto_enum< ::zetasketch::android::AggregatorType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_aggregator_2eproto
