// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packages/modules/StatsD/statsd/src/active_config_list.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace os {
namespace statsd {
class ActiveConfig;
class ActiveConfigDefaultTypeInternal;
extern ActiveConfigDefaultTypeInternal _ActiveConfig_default_instance_;
class ActiveConfigList;
class ActiveConfigListDefaultTypeInternal;
extern ActiveConfigListDefaultTypeInternal _ActiveConfigList_default_instance_;
class ActiveEventActivation;
class ActiveEventActivationDefaultTypeInternal;
extern ActiveEventActivationDefaultTypeInternal _ActiveEventActivation_default_instance_;
class ActiveMetric;
class ActiveMetricDefaultTypeInternal;
extern ActiveMetricDefaultTypeInternal _ActiveMetric_default_instance_;
}  // namespace statsd
}  // namespace os
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::os::statsd::ActiveConfig* Arena::CreateMaybeMessage<::android::os::statsd::ActiveConfig>(Arena*);
template<> ::android::os::statsd::ActiveConfigList* Arena::CreateMaybeMessage<::android::os::statsd::ActiveConfigList>(Arena*);
template<> ::android::os::statsd::ActiveEventActivation* Arena::CreateMaybeMessage<::android::os::statsd::ActiveEventActivation>(Arena*);
template<> ::android::os::statsd::ActiveMetric* Arena::CreateMaybeMessage<::android::os::statsd::ActiveMetric>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace os {
namespace statsd {

enum ActiveEventActivation_State : int {
  ActiveEventActivation_State_UNNKNOWN = 0,
  ActiveEventActivation_State_ACTIVE = 1,
  ActiveEventActivation_State_ACTIVATE_ON_BOOT = 2
};
bool ActiveEventActivation_State_IsValid(int value);
constexpr ActiveEventActivation_State ActiveEventActivation_State_State_MIN = ActiveEventActivation_State_UNNKNOWN;
constexpr ActiveEventActivation_State ActiveEventActivation_State_State_MAX = ActiveEventActivation_State_ACTIVATE_ON_BOOT;
constexpr int ActiveEventActivation_State_State_ARRAYSIZE = ActiveEventActivation_State_State_MAX + 1;

const std::string& ActiveEventActivation_State_Name(ActiveEventActivation_State value);
template<typename T>
inline const std::string& ActiveEventActivation_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ActiveEventActivation_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ActiveEventActivation_State_Name.");
  return ActiveEventActivation_State_Name(static_cast<ActiveEventActivation_State>(enum_t_value));
}
bool ActiveEventActivation_State_Parse(
    const std::string& name, ActiveEventActivation_State* value);
// ===================================================================

class ActiveEventActivation :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.ActiveEventActivation) */ {
 public:
  ActiveEventActivation();
  virtual ~ActiveEventActivation();

  ActiveEventActivation(const ActiveEventActivation& from);
  ActiveEventActivation(ActiveEventActivation&& from) noexcept
    : ActiveEventActivation() {
    *this = ::std::move(from);
  }

  inline ActiveEventActivation& operator=(const ActiveEventActivation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActiveEventActivation& operator=(ActiveEventActivation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ActiveEventActivation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActiveEventActivation* internal_default_instance() {
    return reinterpret_cast<const ActiveEventActivation*>(
               &_ActiveEventActivation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ActiveEventActivation& a, ActiveEventActivation& b) {
    a.Swap(&b);
  }
  inline void Swap(ActiveEventActivation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActiveEventActivation* New() const final {
    return CreateMaybeMessage<ActiveEventActivation>(nullptr);
  }

  ActiveEventActivation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActiveEventActivation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ActiveEventActivation& from);
  void MergeFrom(const ActiveEventActivation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActiveEventActivation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.ActiveEventActivation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ActiveEventActivation_State State;
  static constexpr State UNNKNOWN =
    ActiveEventActivation_State_UNNKNOWN;
  static constexpr State ACTIVE =
    ActiveEventActivation_State_ACTIVE;
  static constexpr State ACTIVATE_ON_BOOT =
    ActiveEventActivation_State_ACTIVATE_ON_BOOT;
  static inline bool State_IsValid(int value) {
    return ActiveEventActivation_State_IsValid(value);
  }
  static constexpr State State_MIN =
    ActiveEventActivation_State_State_MIN;
  static constexpr State State_MAX =
    ActiveEventActivation_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    ActiveEventActivation_State_State_ARRAYSIZE;
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return ActiveEventActivation_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return ActiveEventActivation_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRemainingTtlNanosFieldNumber = 2,
    kAtomMatcherIndexFieldNumber = 1,
    kStateFieldNumber = 3,
  };
  // optional int64 remaining_ttl_nanos = 2;
  bool has_remaining_ttl_nanos() const;
  void clear_remaining_ttl_nanos();
  ::PROTOBUF_NAMESPACE_ID::int64 remaining_ttl_nanos() const;
  void set_remaining_ttl_nanos(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 atom_matcher_index = 1;
  bool has_atom_matcher_index() const;
  void clear_atom_matcher_index();
  ::PROTOBUF_NAMESPACE_ID::int32 atom_matcher_index() const;
  void set_atom_matcher_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .android.os.statsd.ActiveEventActivation.State state = 3;
  bool has_state() const;
  void clear_state();
  ::android::os::statsd::ActiveEventActivation_State state() const;
  void set_state(::android::os::statsd::ActiveEventActivation_State value);

  // @@protoc_insertion_point(class_scope:android.os.statsd.ActiveEventActivation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 remaining_ttl_nanos_;
  ::PROTOBUF_NAMESPACE_ID::int32 atom_matcher_index_;
  int state_;
  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto;
};
// -------------------------------------------------------------------

class ActiveMetric :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.ActiveMetric) */ {
 public:
  ActiveMetric();
  virtual ~ActiveMetric();

  ActiveMetric(const ActiveMetric& from);
  ActiveMetric(ActiveMetric&& from) noexcept
    : ActiveMetric() {
    *this = ::std::move(from);
  }

  inline ActiveMetric& operator=(const ActiveMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActiveMetric& operator=(ActiveMetric&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ActiveMetric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActiveMetric* internal_default_instance() {
    return reinterpret_cast<const ActiveMetric*>(
               &_ActiveMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ActiveMetric& a, ActiveMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(ActiveMetric* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActiveMetric* New() const final {
    return CreateMaybeMessage<ActiveMetric>(nullptr);
  }

  ActiveMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActiveMetric>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ActiveMetric& from);
  void MergeFrom(const ActiveMetric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActiveMetric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.ActiveMetric";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivationFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .android.os.statsd.ActiveEventActivation activation = 2;
  int activation_size() const;
  void clear_activation();
  ::android::os::statsd::ActiveEventActivation* mutable_activation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::ActiveEventActivation >*
      mutable_activation();
  const ::android::os::statsd::ActiveEventActivation& activation(int index) const;
  ::android::os::statsd::ActiveEventActivation* add_activation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::ActiveEventActivation >&
      activation() const;

  // optional int64 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:android.os.statsd.ActiveMetric)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::ActiveEventActivation > activation_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto;
};
// -------------------------------------------------------------------

class ActiveConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.ActiveConfig) */ {
 public:
  ActiveConfig();
  virtual ~ActiveConfig();

  ActiveConfig(const ActiveConfig& from);
  ActiveConfig(ActiveConfig&& from) noexcept
    : ActiveConfig() {
    *this = ::std::move(from);
  }

  inline ActiveConfig& operator=(const ActiveConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActiveConfig& operator=(ActiveConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ActiveConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActiveConfig* internal_default_instance() {
    return reinterpret_cast<const ActiveConfig*>(
               &_ActiveConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ActiveConfig& a, ActiveConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ActiveConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActiveConfig* New() const final {
    return CreateMaybeMessage<ActiveConfig>(nullptr);
  }

  ActiveConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActiveConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ActiveConfig& from);
  void MergeFrom(const ActiveConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActiveConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.ActiveConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricFieldNumber = 3,
    kIdFieldNumber = 1,
    kUidFieldNumber = 2,
  };
  // repeated .android.os.statsd.ActiveMetric metric = 3;
  int metric_size() const;
  void clear_metric();
  ::android::os::statsd::ActiveMetric* mutable_metric(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::ActiveMetric >*
      mutable_metric();
  const ::android::os::statsd::ActiveMetric& metric(int index) const;
  ::android::os::statsd::ActiveMetric* add_metric();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::ActiveMetric >&
      metric() const;

  // optional int64 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 uid = 2;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.os.statsd.ActiveConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::ActiveMetric > metric_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto;
};
// -------------------------------------------------------------------

class ActiveConfigList :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.ActiveConfigList) */ {
 public:
  ActiveConfigList();
  virtual ~ActiveConfigList();

  ActiveConfigList(const ActiveConfigList& from);
  ActiveConfigList(ActiveConfigList&& from) noexcept
    : ActiveConfigList() {
    *this = ::std::move(from);
  }

  inline ActiveConfigList& operator=(const ActiveConfigList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActiveConfigList& operator=(ActiveConfigList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ActiveConfigList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActiveConfigList* internal_default_instance() {
    return reinterpret_cast<const ActiveConfigList*>(
               &_ActiveConfigList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ActiveConfigList& a, ActiveConfigList& b) {
    a.Swap(&b);
  }
  inline void Swap(ActiveConfigList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActiveConfigList* New() const final {
    return CreateMaybeMessage<ActiveConfigList>(nullptr);
  }

  ActiveConfigList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActiveConfigList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ActiveConfigList& from);
  void MergeFrom(const ActiveConfigList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActiveConfigList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.ActiveConfigList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
  };
  // repeated .android.os.statsd.ActiveConfig config = 1;
  int config_size() const;
  void clear_config();
  ::android::os::statsd::ActiveConfig* mutable_config(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::ActiveConfig >*
      mutable_config();
  const ::android::os::statsd::ActiveConfig& config(int index) const;
  ::android::os::statsd::ActiveConfig* add_config();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::ActiveConfig >&
      config() const;

  // @@protoc_insertion_point(class_scope:android.os.statsd.ActiveConfigList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::ActiveConfig > config_;
  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ActiveEventActivation

// optional int32 atom_matcher_index = 1;
inline bool ActiveEventActivation::has_atom_matcher_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActiveEventActivation::clear_atom_matcher_index() {
  atom_matcher_index_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActiveEventActivation::atom_matcher_index() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.ActiveEventActivation.atom_matcher_index)
  return atom_matcher_index_;
}
inline void ActiveEventActivation::set_atom_matcher_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  atom_matcher_index_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.ActiveEventActivation.atom_matcher_index)
}

// optional int64 remaining_ttl_nanos = 2;
inline bool ActiveEventActivation::has_remaining_ttl_nanos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActiveEventActivation::clear_remaining_ttl_nanos() {
  remaining_ttl_nanos_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ActiveEventActivation::remaining_ttl_nanos() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.ActiveEventActivation.remaining_ttl_nanos)
  return remaining_ttl_nanos_;
}
inline void ActiveEventActivation::set_remaining_ttl_nanos(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  remaining_ttl_nanos_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.ActiveEventActivation.remaining_ttl_nanos)
}

// optional .android.os.statsd.ActiveEventActivation.State state = 3;
inline bool ActiveEventActivation::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActiveEventActivation::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::android::os::statsd::ActiveEventActivation_State ActiveEventActivation::state() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.ActiveEventActivation.state)
  return static_cast< ::android::os::statsd::ActiveEventActivation_State >(state_);
}
inline void ActiveEventActivation::set_state(::android::os::statsd::ActiveEventActivation_State value) {
  assert(::android::os::statsd::ActiveEventActivation_State_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  state_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.ActiveEventActivation.state)
}

// -------------------------------------------------------------------

// ActiveMetric

// optional int64 id = 1;
inline bool ActiveMetric::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActiveMetric::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ActiveMetric::id() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.ActiveMetric.id)
  return id_;
}
inline void ActiveMetric::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.ActiveMetric.id)
}

// repeated .android.os.statsd.ActiveEventActivation activation = 2;
inline int ActiveMetric::activation_size() const {
  return activation_.size();
}
inline void ActiveMetric::clear_activation() {
  activation_.Clear();
}
inline ::android::os::statsd::ActiveEventActivation* ActiveMetric::mutable_activation(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.ActiveMetric.activation)
  return activation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::ActiveEventActivation >*
ActiveMetric::mutable_activation() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.ActiveMetric.activation)
  return &activation_;
}
inline const ::android::os::statsd::ActiveEventActivation& ActiveMetric::activation(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.ActiveMetric.activation)
  return activation_.Get(index);
}
inline ::android::os::statsd::ActiveEventActivation* ActiveMetric::add_activation() {
  // @@protoc_insertion_point(field_add:android.os.statsd.ActiveMetric.activation)
  return activation_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::ActiveEventActivation >&
ActiveMetric::activation() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.ActiveMetric.activation)
  return activation_;
}

// -------------------------------------------------------------------

// ActiveConfig

// optional int64 id = 1;
inline bool ActiveConfig::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActiveConfig::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ActiveConfig::id() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.ActiveConfig.id)
  return id_;
}
inline void ActiveConfig::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.ActiveConfig.id)
}

// optional int32 uid = 2;
inline bool ActiveConfig::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActiveConfig::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActiveConfig::uid() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.ActiveConfig.uid)
  return uid_;
}
inline void ActiveConfig::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.ActiveConfig.uid)
}

// repeated .android.os.statsd.ActiveMetric metric = 3;
inline int ActiveConfig::metric_size() const {
  return metric_.size();
}
inline void ActiveConfig::clear_metric() {
  metric_.Clear();
}
inline ::android::os::statsd::ActiveMetric* ActiveConfig::mutable_metric(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.ActiveConfig.metric)
  return metric_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::ActiveMetric >*
ActiveConfig::mutable_metric() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.ActiveConfig.metric)
  return &metric_;
}
inline const ::android::os::statsd::ActiveMetric& ActiveConfig::metric(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.ActiveConfig.metric)
  return metric_.Get(index);
}
inline ::android::os::statsd::ActiveMetric* ActiveConfig::add_metric() {
  // @@protoc_insertion_point(field_add:android.os.statsd.ActiveConfig.metric)
  return metric_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::ActiveMetric >&
ActiveConfig::metric() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.ActiveConfig.metric)
  return metric_;
}

// -------------------------------------------------------------------

// ActiveConfigList

// repeated .android.os.statsd.ActiveConfig config = 1;
inline int ActiveConfigList::config_size() const {
  return config_.size();
}
inline void ActiveConfigList::clear_config() {
  config_.Clear();
}
inline ::android::os::statsd::ActiveConfig* ActiveConfigList::mutable_config(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.ActiveConfigList.config)
  return config_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::ActiveConfig >*
ActiveConfigList::mutable_config() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.ActiveConfigList.config)
  return &config_;
}
inline const ::android::os::statsd::ActiveConfig& ActiveConfigList::config(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.ActiveConfigList.config)
  return config_.Get(index);
}
inline ::android::os::statsd::ActiveConfig* ActiveConfigList::add_config() {
  // @@protoc_insertion_point(field_add:android.os.statsd.ActiveConfigList.config)
  return config_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::ActiveConfig >&
ActiveConfigList::config() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.ActiveConfigList.config)
  return config_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace statsd
}  // namespace os
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::os::statsd::ActiveEventActivation_State> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto
