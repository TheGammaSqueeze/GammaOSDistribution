// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packages/modules/StatsD/statsd/src/shell/shell_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fshell_2fshell_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fshell_2fshell_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "packages/modules/StatsD/statsd/src/statsd_config.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fshell_2fshell_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fshell_2fshell_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace os {
namespace statsd {
class PulledAtomSubscription;
class PulledAtomSubscriptionDefaultTypeInternal;
extern PulledAtomSubscriptionDefaultTypeInternal _PulledAtomSubscription_default_instance_;
class ShellSubscription;
class ShellSubscriptionDefaultTypeInternal;
extern ShellSubscriptionDefaultTypeInternal _ShellSubscription_default_instance_;
}  // namespace statsd
}  // namespace os
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::os::statsd::PulledAtomSubscription* Arena::CreateMaybeMessage<::android::os::statsd::PulledAtomSubscription>(Arena*);
template<> ::android::os::statsd::ShellSubscription* Arena::CreateMaybeMessage<::android::os::statsd::ShellSubscription>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace os {
namespace statsd {

// ===================================================================

class PulledAtomSubscription :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.PulledAtomSubscription) */ {
 public:
  PulledAtomSubscription();
  virtual ~PulledAtomSubscription();

  PulledAtomSubscription(const PulledAtomSubscription& from);
  PulledAtomSubscription(PulledAtomSubscription&& from) noexcept
    : PulledAtomSubscription() {
    *this = ::std::move(from);
  }

  inline PulledAtomSubscription& operator=(const PulledAtomSubscription& from) {
    CopyFrom(from);
    return *this;
  }
  inline PulledAtomSubscription& operator=(PulledAtomSubscription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PulledAtomSubscription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PulledAtomSubscription* internal_default_instance() {
    return reinterpret_cast<const PulledAtomSubscription*>(
               &_PulledAtomSubscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PulledAtomSubscription& a, PulledAtomSubscription& b) {
    a.Swap(&b);
  }
  inline void Swap(PulledAtomSubscription* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PulledAtomSubscription* New() const final {
    return CreateMaybeMessage<PulledAtomSubscription>(nullptr);
  }

  PulledAtomSubscription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PulledAtomSubscription>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PulledAtomSubscription& from);
  void MergeFrom(const PulledAtomSubscription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PulledAtomSubscription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.PulledAtomSubscription";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackagesFieldNumber = 3,
    kMatcherFieldNumber = 1,
    kFreqMillisFieldNumber = 2,
  };
  // repeated string packages = 3;
  int packages_size() const;
  void clear_packages();
  const std::string& packages(int index) const;
  std::string* mutable_packages(int index);
  void set_packages(int index, const std::string& value);
  void set_packages(int index, std::string&& value);
  void set_packages(int index, const char* value);
  void set_packages(int index, const char* value, size_t size);
  std::string* add_packages();
  void add_packages(const std::string& value);
  void add_packages(std::string&& value);
  void add_packages(const char* value);
  void add_packages(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& packages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_packages();

  // optional .android.os.statsd.SimpleAtomMatcher matcher = 1;
  bool has_matcher() const;
  void clear_matcher();
  const ::android::os::statsd::SimpleAtomMatcher& matcher() const;
  ::android::os::statsd::SimpleAtomMatcher* release_matcher();
  ::android::os::statsd::SimpleAtomMatcher* mutable_matcher();
  void set_allocated_matcher(::android::os::statsd::SimpleAtomMatcher* matcher);

  // optional int32 freq_millis = 2;
  bool has_freq_millis() const;
  void clear_freq_millis();
  ::PROTOBUF_NAMESPACE_ID::int32 freq_millis() const;
  void set_freq_millis(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.os.statsd.PulledAtomSubscription)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> packages_;
  ::android::os::statsd::SimpleAtomMatcher* matcher_;
  ::PROTOBUF_NAMESPACE_ID::int32 freq_millis_;
  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fshell_2fshell_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ShellSubscription :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.ShellSubscription) */ {
 public:
  ShellSubscription();
  virtual ~ShellSubscription();

  ShellSubscription(const ShellSubscription& from);
  ShellSubscription(ShellSubscription&& from) noexcept
    : ShellSubscription() {
    *this = ::std::move(from);
  }

  inline ShellSubscription& operator=(const ShellSubscription& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShellSubscription& operator=(ShellSubscription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ShellSubscription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShellSubscription* internal_default_instance() {
    return reinterpret_cast<const ShellSubscription*>(
               &_ShellSubscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ShellSubscription& a, ShellSubscription& b) {
    a.Swap(&b);
  }
  inline void Swap(ShellSubscription* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShellSubscription* New() const final {
    return CreateMaybeMessage<ShellSubscription>(nullptr);
  }

  ShellSubscription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShellSubscription>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ShellSubscription& from);
  void MergeFrom(const ShellSubscription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ShellSubscription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.ShellSubscription";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPushedFieldNumber = 1,
    kPulledFieldNumber = 2,
  };
  // repeated .android.os.statsd.SimpleAtomMatcher pushed = 1;
  int pushed_size() const;
  void clear_pushed();
  ::android::os::statsd::SimpleAtomMatcher* mutable_pushed(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::SimpleAtomMatcher >*
      mutable_pushed();
  const ::android::os::statsd::SimpleAtomMatcher& pushed(int index) const;
  ::android::os::statsd::SimpleAtomMatcher* add_pushed();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::SimpleAtomMatcher >&
      pushed() const;

  // repeated .android.os.statsd.PulledAtomSubscription pulled = 2;
  int pulled_size() const;
  void clear_pulled();
  ::android::os::statsd::PulledAtomSubscription* mutable_pulled(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::PulledAtomSubscription >*
      mutable_pulled();
  const ::android::os::statsd::PulledAtomSubscription& pulled(int index) const;
  ::android::os::statsd::PulledAtomSubscription* add_pulled();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::PulledAtomSubscription >&
      pulled() const;

  // @@protoc_insertion_point(class_scope:android.os.statsd.ShellSubscription)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::SimpleAtomMatcher > pushed_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::PulledAtomSubscription > pulled_;
  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fshell_2fshell_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PulledAtomSubscription

// optional .android.os.statsd.SimpleAtomMatcher matcher = 1;
inline bool PulledAtomSubscription::has_matcher() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::os::statsd::SimpleAtomMatcher& PulledAtomSubscription::matcher() const {
  const ::android::os::statsd::SimpleAtomMatcher* p = matcher_;
  // @@protoc_insertion_point(field_get:android.os.statsd.PulledAtomSubscription.matcher)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::statsd::SimpleAtomMatcher*>(
      &::android::os::statsd::_SimpleAtomMatcher_default_instance_);
}
inline ::android::os::statsd::SimpleAtomMatcher* PulledAtomSubscription::release_matcher() {
  // @@protoc_insertion_point(field_release:android.os.statsd.PulledAtomSubscription.matcher)
  _has_bits_[0] &= ~0x00000001u;
  ::android::os::statsd::SimpleAtomMatcher* temp = matcher_;
  matcher_ = nullptr;
  return temp;
}
inline ::android::os::statsd::SimpleAtomMatcher* PulledAtomSubscription::mutable_matcher() {
  _has_bits_[0] |= 0x00000001u;
  if (matcher_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::statsd::SimpleAtomMatcher>(GetArenaNoVirtual());
    matcher_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.statsd.PulledAtomSubscription.matcher)
  return matcher_;
}
inline void PulledAtomSubscription::set_allocated_matcher(::android::os::statsd::SimpleAtomMatcher* matcher) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(matcher_);
  }
  if (matcher) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      matcher = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, matcher, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  matcher_ = matcher;
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.PulledAtomSubscription.matcher)
}

// optional int32 freq_millis = 2;
inline bool PulledAtomSubscription::has_freq_millis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PulledAtomSubscription::clear_freq_millis() {
  freq_millis_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PulledAtomSubscription::freq_millis() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.PulledAtomSubscription.freq_millis)
  return freq_millis_;
}
inline void PulledAtomSubscription::set_freq_millis(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  freq_millis_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.PulledAtomSubscription.freq_millis)
}

// repeated string packages = 3;
inline int PulledAtomSubscription::packages_size() const {
  return packages_.size();
}
inline void PulledAtomSubscription::clear_packages() {
  packages_.Clear();
}
inline const std::string& PulledAtomSubscription::packages(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.PulledAtomSubscription.packages)
  return packages_.Get(index);
}
inline std::string* PulledAtomSubscription::mutable_packages(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.PulledAtomSubscription.packages)
  return packages_.Mutable(index);
}
inline void PulledAtomSubscription::set_packages(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:android.os.statsd.PulledAtomSubscription.packages)
  packages_.Mutable(index)->assign(value);
}
inline void PulledAtomSubscription::set_packages(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:android.os.statsd.PulledAtomSubscription.packages)
  packages_.Mutable(index)->assign(std::move(value));
}
inline void PulledAtomSubscription::set_packages(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  packages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:android.os.statsd.PulledAtomSubscription.packages)
}
inline void PulledAtomSubscription::set_packages(int index, const char* value, size_t size) {
  packages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:android.os.statsd.PulledAtomSubscription.packages)
}
inline std::string* PulledAtomSubscription::add_packages() {
  // @@protoc_insertion_point(field_add_mutable:android.os.statsd.PulledAtomSubscription.packages)
  return packages_.Add();
}
inline void PulledAtomSubscription::add_packages(const std::string& value) {
  packages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:android.os.statsd.PulledAtomSubscription.packages)
}
inline void PulledAtomSubscription::add_packages(std::string&& value) {
  packages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:android.os.statsd.PulledAtomSubscription.packages)
}
inline void PulledAtomSubscription::add_packages(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  packages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:android.os.statsd.PulledAtomSubscription.packages)
}
inline void PulledAtomSubscription::add_packages(const char* value, size_t size) {
  packages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:android.os.statsd.PulledAtomSubscription.packages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PulledAtomSubscription::packages() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.PulledAtomSubscription.packages)
  return packages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PulledAtomSubscription::mutable_packages() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.PulledAtomSubscription.packages)
  return &packages_;
}

// -------------------------------------------------------------------

// ShellSubscription

// repeated .android.os.statsd.SimpleAtomMatcher pushed = 1;
inline int ShellSubscription::pushed_size() const {
  return pushed_.size();
}
inline ::android::os::statsd::SimpleAtomMatcher* ShellSubscription::mutable_pushed(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.ShellSubscription.pushed)
  return pushed_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::SimpleAtomMatcher >*
ShellSubscription::mutable_pushed() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.ShellSubscription.pushed)
  return &pushed_;
}
inline const ::android::os::statsd::SimpleAtomMatcher& ShellSubscription::pushed(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.ShellSubscription.pushed)
  return pushed_.Get(index);
}
inline ::android::os::statsd::SimpleAtomMatcher* ShellSubscription::add_pushed() {
  // @@protoc_insertion_point(field_add:android.os.statsd.ShellSubscription.pushed)
  return pushed_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::SimpleAtomMatcher >&
ShellSubscription::pushed() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.ShellSubscription.pushed)
  return pushed_;
}

// repeated .android.os.statsd.PulledAtomSubscription pulled = 2;
inline int ShellSubscription::pulled_size() const {
  return pulled_.size();
}
inline void ShellSubscription::clear_pulled() {
  pulled_.Clear();
}
inline ::android::os::statsd::PulledAtomSubscription* ShellSubscription::mutable_pulled(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.ShellSubscription.pulled)
  return pulled_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::PulledAtomSubscription >*
ShellSubscription::mutable_pulled() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.ShellSubscription.pulled)
  return &pulled_;
}
inline const ::android::os::statsd::PulledAtomSubscription& ShellSubscription::pulled(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.ShellSubscription.pulled)
  return pulled_.Get(index);
}
inline ::android::os::statsd::PulledAtomSubscription* ShellSubscription::add_pulled() {
  // @@protoc_insertion_point(field_add:android.os.statsd.ShellSubscription.pulled)
  return pulled_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::PulledAtomSubscription >&
ShellSubscription::pulled() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.ShellSubscription.pulled)
  return pulled_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace statsd
}  // namespace os
}  // namespace android

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fshell_2fshell_5fconfig_2eproto
