// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packages/modules/StatsD/statsd/src/statsd_config.proto

#include "packages/modules/StatsD/statsd/src/statsd_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Alarm_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Alert_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AtomMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AtomMatcher_Combination_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BroadcastSubscriberDetails_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CountMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_DurationMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EventActivation_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EventMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FieldFilter_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FieldMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FieldValueMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GaugeMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IncidentdDetails_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MetricActivation_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MetricConditionLink_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MetricStateLink_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PerfettoDetails_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Predicate_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Predicate_Combination_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PullAtomPackages_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimpleAtomMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimplePredicate_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_State_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateMap_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StateMap_StateGroup_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatsdConfig_Annotation_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringListMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Subscription_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UploadThreshold_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ValueMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
namespace android {
namespace os {
namespace statsd {
class FieldMatcherDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FieldMatcher> _instance;
} _FieldMatcher_default_instance_;
class FieldValueMatcherDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FieldValueMatcher> _instance;
  bool eq_bool_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eq_string_;
  ::PROTOBUF_NAMESPACE_ID::int64 eq_int_;
  ::PROTOBUF_NAMESPACE_ID::int64 lt_int_;
  ::PROTOBUF_NAMESPACE_ID::int64 gt_int_;
  float lt_float_;
  float gt_float_;
  ::PROTOBUF_NAMESPACE_ID::int64 lte_int_;
  ::PROTOBUF_NAMESPACE_ID::int64 gte_int_;
  const ::android::os::statsd::MessageMatcher* matches_tuple_;
  const ::android::os::statsd::StringListMatcher* eq_any_string_;
  const ::android::os::statsd::StringListMatcher* neq_any_string_;
} _FieldValueMatcher_default_instance_;
class MessageMatcherDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageMatcher> _instance;
} _MessageMatcher_default_instance_;
class StringListMatcherDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StringListMatcher> _instance;
} _StringListMatcher_default_instance_;
class SimpleAtomMatcherDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimpleAtomMatcher> _instance;
} _SimpleAtomMatcher_default_instance_;
class AtomMatcher_CombinationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AtomMatcher_Combination> _instance;
} _AtomMatcher_Combination_default_instance_;
class AtomMatcherDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AtomMatcher> _instance;
  const ::android::os::statsd::SimpleAtomMatcher* simple_atom_matcher_;
  const ::android::os::statsd::AtomMatcher_Combination* combination_;
} _AtomMatcher_default_instance_;
class SimplePredicateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimplePredicate> _instance;
} _SimplePredicate_default_instance_;
class Predicate_CombinationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Predicate_Combination> _instance;
} _Predicate_Combination_default_instance_;
class PredicateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Predicate> _instance;
  const ::android::os::statsd::SimplePredicate* simple_predicate_;
  const ::android::os::statsd::Predicate_Combination* combination_;
} _Predicate_default_instance_;
class StateMap_StateGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateMap_StateGroup> _instance;
} _StateMap_StateGroup_default_instance_;
class StateMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StateMap> _instance;
} _StateMap_default_instance_;
class StateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<State> _instance;
} _State_default_instance_;
class MetricConditionLinkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetricConditionLink> _instance;
} _MetricConditionLink_default_instance_;
class MetricStateLinkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetricStateLink> _instance;
} _MetricStateLink_default_instance_;
class FieldFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FieldFilter> _instance;
} _FieldFilter_default_instance_;
class UploadThresholdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UploadThreshold> _instance;
  ::PROTOBUF_NAMESPACE_ID::int64 lt_int_;
  ::PROTOBUF_NAMESPACE_ID::int64 gt_int_;
  float lt_float_;
  float gt_float_;
  ::PROTOBUF_NAMESPACE_ID::int64 lte_int_;
  ::PROTOBUF_NAMESPACE_ID::int64 gte_int_;
} _UploadThreshold_default_instance_;
class EventMetricDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventMetric> _instance;
} _EventMetric_default_instance_;
class CountMetricDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CountMetric> _instance;
} _CountMetric_default_instance_;
class DurationMetricDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DurationMetric> _instance;
} _DurationMetric_default_instance_;
class GaugeMetricDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GaugeMetric> _instance;
} _GaugeMetric_default_instance_;
class ValueMetricDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValueMetric> _instance;
} _ValueMetric_default_instance_;
class AlertDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Alert> _instance;
} _Alert_default_instance_;
class AlarmDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Alarm> _instance;
} _Alarm_default_instance_;
class IncidentdDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IncidentdDetails> _instance;
} _IncidentdDetails_default_instance_;
class PerfettoDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerfettoDetails> _instance;
} _PerfettoDetails_default_instance_;
class BroadcastSubscriberDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BroadcastSubscriberDetails> _instance;
} _BroadcastSubscriberDetails_default_instance_;
class SubscriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Subscription> _instance;
  const ::android::os::statsd::IncidentdDetails* incidentd_details_;
  const ::android::os::statsd::PerfettoDetails* perfetto_details_;
  const ::android::os::statsd::BroadcastSubscriberDetails* broadcast_subscriber_details_;
} _Subscription_default_instance_;
class EventActivationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventActivation> _instance;
} _EventActivation_default_instance_;
class MetricActivationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetricActivation> _instance;
} _MetricActivation_default_instance_;
class PullAtomPackagesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PullAtomPackages> _instance;
} _PullAtomPackages_default_instance_;
class StatsdConfig_AnnotationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatsdConfig_Annotation> _instance;
} _StatsdConfig_Annotation_default_instance_;
class StatsdConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatsdConfig> _instance;
} _StatsdConfig_default_instance_;
}  // namespace statsd
}  // namespace os
}  // namespace android
static void InitDefaultsscc_info_Alarm_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_Alarm_default_instance_;
    new (ptr) ::android::os::statsd::Alarm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::Alarm::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Alarm_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Alarm_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_Alert_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_Alert_default_instance_;
    new (ptr) ::android::os::statsd::Alert();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::Alert::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Alert_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Alert_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_AtomMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_AtomMatcher_default_instance_;
    new (ptr) ::android::os::statsd::AtomMatcher();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::AtomMatcher::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AtomMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_AtomMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto}, {
      &scc_info_SimpleAtomMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,
      &scc_info_AtomMatcher_Combination_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_AtomMatcher_Combination_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_AtomMatcher_Combination_default_instance_;
    new (ptr) ::android::os::statsd::AtomMatcher_Combination();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::AtomMatcher_Combination::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AtomMatcher_Combination_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AtomMatcher_Combination_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_BroadcastSubscriberDetails_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_BroadcastSubscriberDetails_default_instance_;
    new (ptr) ::android::os::statsd::BroadcastSubscriberDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::BroadcastSubscriberDetails::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BroadcastSubscriberDetails_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BroadcastSubscriberDetails_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_CountMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_CountMetric_default_instance_;
    new (ptr) ::android::os::statsd::CountMetric();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::CountMetric::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CountMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_CountMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto}, {
      &scc_info_FieldMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,
      &scc_info_MetricConditionLink_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,
      &scc_info_MetricStateLink_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,
      &scc_info_UploadThreshold_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_DurationMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_DurationMetric_default_instance_;
    new (ptr) ::android::os::statsd::DurationMetric();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::DurationMetric::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_DurationMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_DurationMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto}, {
      &scc_info_MetricConditionLink_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,
      &scc_info_MetricStateLink_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,
      &scc_info_FieldMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,
      &scc_info_UploadThreshold_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_EventActivation_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_EventActivation_default_instance_;
    new (ptr) ::android::os::statsd::EventActivation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::EventActivation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EventActivation_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EventActivation_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_EventMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_EventMetric_default_instance_;
    new (ptr) ::android::os::statsd::EventMetric();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::EventMetric::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EventMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_EventMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto}, {
      &scc_info_MetricConditionLink_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_FieldFilter_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_FieldFilter_default_instance_;
    new (ptr) ::android::os::statsd::FieldFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::FieldFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FieldFilter_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_FieldFilter_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto}, {
      &scc_info_FieldMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_FieldMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_FieldMatcher_default_instance_;
    new (ptr) ::android::os::statsd::FieldMatcher();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::FieldMatcher::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FieldMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FieldMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_FieldValueMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_FieldValueMatcher_default_instance_;
    new (ptr) ::android::os::statsd::FieldValueMatcher();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::android::os::statsd::_MessageMatcher_default_instance_;
    new (ptr) ::android::os::statsd::MessageMatcher();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::FieldValueMatcher::InitAsDefaultInstance();
  ::android::os::statsd::MessageMatcher::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FieldValueMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_FieldValueMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto}, {
      &scc_info_StringListMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_GaugeMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_GaugeMetric_default_instance_;
    new (ptr) ::android::os::statsd::GaugeMetric();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::GaugeMetric::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GaugeMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_GaugeMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto}, {
      &scc_info_FieldFilter_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,
      &scc_info_FieldMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,
      &scc_info_MetricConditionLink_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_IncidentdDetails_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_IncidentdDetails_default_instance_;
    new (ptr) ::android::os::statsd::IncidentdDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::IncidentdDetails::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IncidentdDetails_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_IncidentdDetails_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_MetricActivation_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_MetricActivation_default_instance_;
    new (ptr) ::android::os::statsd::MetricActivation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::MetricActivation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MetricActivation_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MetricActivation_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto}, {
      &scc_info_EventActivation_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_MetricConditionLink_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_MetricConditionLink_default_instance_;
    new (ptr) ::android::os::statsd::MetricConditionLink();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::MetricConditionLink::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MetricConditionLink_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MetricConditionLink_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto}, {
      &scc_info_FieldMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_MetricStateLink_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_MetricStateLink_default_instance_;
    new (ptr) ::android::os::statsd::MetricStateLink();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::MetricStateLink::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MetricStateLink_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MetricStateLink_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto}, {
      &scc_info_FieldMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_PerfettoDetails_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_PerfettoDetails_default_instance_;
    new (ptr) ::android::os::statsd::PerfettoDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::PerfettoDetails::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PerfettoDetails_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PerfettoDetails_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_Predicate_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_Predicate_default_instance_;
    new (ptr) ::android::os::statsd::Predicate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::Predicate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Predicate_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Predicate_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto}, {
      &scc_info_SimplePredicate_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,
      &scc_info_Predicate_Combination_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_Predicate_Combination_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_Predicate_Combination_default_instance_;
    new (ptr) ::android::os::statsd::Predicate_Combination();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::Predicate_Combination::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Predicate_Combination_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Predicate_Combination_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_PullAtomPackages_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_PullAtomPackages_default_instance_;
    new (ptr) ::android::os::statsd::PullAtomPackages();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::PullAtomPackages::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PullAtomPackages_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PullAtomPackages_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_SimpleAtomMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_SimpleAtomMatcher_default_instance_;
    new (ptr) ::android::os::statsd::SimpleAtomMatcher();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::SimpleAtomMatcher::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimpleAtomMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SimpleAtomMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto}, {
      &scc_info_FieldValueMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_SimplePredicate_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_SimplePredicate_default_instance_;
    new (ptr) ::android::os::statsd::SimplePredicate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::SimplePredicate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimplePredicate_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SimplePredicate_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto}, {
      &scc_info_FieldMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_State_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_State_default_instance_;
    new (ptr) ::android::os::statsd::State();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::State::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_State_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_State_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto}, {
      &scc_info_StateMap_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_StateMap_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_StateMap_default_instance_;
    new (ptr) ::android::os::statsd::StateMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::StateMap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StateMap_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_StateMap_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto}, {
      &scc_info_StateMap_StateGroup_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_StateMap_StateGroup_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_StateMap_StateGroup_default_instance_;
    new (ptr) ::android::os::statsd::StateMap_StateGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::StateMap_StateGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StateMap_StateGroup_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StateMap_StateGroup_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_StatsdConfig_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_StatsdConfig_default_instance_;
    new (ptr) ::android::os::statsd::StatsdConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::StatsdConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<14> scc_info_StatsdConfig_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 14, InitDefaultsscc_info_StatsdConfig_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto}, {
      &scc_info_EventMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,
      &scc_info_CountMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,
      &scc_info_ValueMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,
      &scc_info_GaugeMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,
      &scc_info_DurationMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,
      &scc_info_AtomMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,
      &scc_info_Predicate_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,
      &scc_info_Alert_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,
      &scc_info_Alarm_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,
      &scc_info_Subscription_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,
      &scc_info_StatsdConfig_Annotation_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,
      &scc_info_MetricActivation_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,
      &scc_info_State_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,
      &scc_info_PullAtomPackages_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_StatsdConfig_Annotation_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_StatsdConfig_Annotation_default_instance_;
    new (ptr) ::android::os::statsd::StatsdConfig_Annotation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::StatsdConfig_Annotation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatsdConfig_Annotation_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StatsdConfig_Annotation_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_StringListMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_StringListMatcher_default_instance_;
    new (ptr) ::android::os::statsd::StringListMatcher();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::StringListMatcher::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringListMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StringListMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_Subscription_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_Subscription_default_instance_;
    new (ptr) ::android::os::statsd::Subscription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::Subscription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Subscription_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_Subscription_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto}, {
      &scc_info_IncidentdDetails_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,
      &scc_info_PerfettoDetails_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,
      &scc_info_BroadcastSubscriberDetails_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_UploadThreshold_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_UploadThreshold_default_instance_;
    new (ptr) ::android::os::statsd::UploadThreshold();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::UploadThreshold::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UploadThreshold_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UploadThreshold_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ValueMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_ValueMetric_default_instance_;
    new (ptr) ::android::os::statsd::ValueMetric();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::ValueMetric::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ValueMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_ValueMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto}, {
      &scc_info_FieldMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,
      &scc_info_MetricConditionLink_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,
      &scc_info_MetricStateLink_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,
      &scc_info_UploadThreshold_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,}};

namespace android {
namespace os {
namespace statsd {
bool SimplePredicate_InitialValue_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SimplePredicate_InitialValue_strings[2] = {};

static const char SimplePredicate_InitialValue_names[] =
  "FALSE"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SimplePredicate_InitialValue_entries[] = {
  { {SimplePredicate_InitialValue_names + 0, 5}, 1 },
  { {SimplePredicate_InitialValue_names + 5, 7}, 0 },
};

static const int SimplePredicate_InitialValue_entries_by_number[] = {
  1, // 0 -> UNKNOWN
  0, // 1 -> FALSE
};

const std::string& SimplePredicate_InitialValue_Name(
    SimplePredicate_InitialValue value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SimplePredicate_InitialValue_entries,
          SimplePredicate_InitialValue_entries_by_number,
          2, SimplePredicate_InitialValue_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SimplePredicate_InitialValue_entries,
      SimplePredicate_InitialValue_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SimplePredicate_InitialValue_strings[idx].get();
}
bool SimplePredicate_InitialValue_Parse(
    const std::string& name, SimplePredicate_InitialValue* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SimplePredicate_InitialValue_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<SimplePredicate_InitialValue>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SimplePredicate_InitialValue SimplePredicate::UNKNOWN;
constexpr SimplePredicate_InitialValue SimplePredicate::FALSE;
constexpr SimplePredicate_InitialValue SimplePredicate::InitialValue_MIN;
constexpr SimplePredicate_InitialValue SimplePredicate::InitialValue_MAX;
constexpr int SimplePredicate::InitialValue_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DurationMetric_AggregationType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DurationMetric_AggregationType_strings[2] = {};

static const char DurationMetric_AggregationType_names[] =
  "MAX_SPARSE"
  "SUM";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DurationMetric_AggregationType_entries[] = {
  { {DurationMetric_AggregationType_names + 0, 10}, 2 },
  { {DurationMetric_AggregationType_names + 10, 3}, 1 },
};

static const int DurationMetric_AggregationType_entries_by_number[] = {
  1, // 1 -> SUM
  0, // 2 -> MAX_SPARSE
};

const std::string& DurationMetric_AggregationType_Name(
    DurationMetric_AggregationType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DurationMetric_AggregationType_entries,
          DurationMetric_AggregationType_entries_by_number,
          2, DurationMetric_AggregationType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DurationMetric_AggregationType_entries,
      DurationMetric_AggregationType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DurationMetric_AggregationType_strings[idx].get();
}
bool DurationMetric_AggregationType_Parse(
    const std::string& name, DurationMetric_AggregationType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DurationMetric_AggregationType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<DurationMetric_AggregationType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DurationMetric_AggregationType DurationMetric::SUM;
constexpr DurationMetric_AggregationType DurationMetric::MAX_SPARSE;
constexpr DurationMetric_AggregationType DurationMetric::AggregationType_MIN;
constexpr DurationMetric_AggregationType DurationMetric::AggregationType_MAX;
constexpr int DurationMetric::AggregationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool GaugeMetric_SamplingType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> GaugeMetric_SamplingType_strings[4] = {};

static const char GaugeMetric_SamplingType_names[] =
  "ALL_CONDITION_CHANGES"
  "CONDITION_CHANGE_TO_TRUE"
  "FIRST_N_SAMPLES"
  "RANDOM_ONE_SAMPLE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry GaugeMetric_SamplingType_entries[] = {
  { {GaugeMetric_SamplingType_names + 0, 21}, 2 },
  { {GaugeMetric_SamplingType_names + 21, 24}, 3 },
  { {GaugeMetric_SamplingType_names + 45, 15}, 4 },
  { {GaugeMetric_SamplingType_names + 60, 17}, 1 },
};

static const int GaugeMetric_SamplingType_entries_by_number[] = {
  3, // 1 -> RANDOM_ONE_SAMPLE
  0, // 2 -> ALL_CONDITION_CHANGES
  1, // 3 -> CONDITION_CHANGE_TO_TRUE
  2, // 4 -> FIRST_N_SAMPLES
};

const std::string& GaugeMetric_SamplingType_Name(
    GaugeMetric_SamplingType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          GaugeMetric_SamplingType_entries,
          GaugeMetric_SamplingType_entries_by_number,
          4, GaugeMetric_SamplingType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      GaugeMetric_SamplingType_entries,
      GaugeMetric_SamplingType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     GaugeMetric_SamplingType_strings[idx].get();
}
bool GaugeMetric_SamplingType_Parse(
    const std::string& name, GaugeMetric_SamplingType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      GaugeMetric_SamplingType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<GaugeMetric_SamplingType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GaugeMetric_SamplingType GaugeMetric::RANDOM_ONE_SAMPLE;
constexpr GaugeMetric_SamplingType GaugeMetric::ALL_CONDITION_CHANGES;
constexpr GaugeMetric_SamplingType GaugeMetric::CONDITION_CHANGE_TO_TRUE;
constexpr GaugeMetric_SamplingType GaugeMetric::FIRST_N_SAMPLES;
constexpr GaugeMetric_SamplingType GaugeMetric::SamplingType_MIN;
constexpr GaugeMetric_SamplingType GaugeMetric::SamplingType_MAX;
constexpr int GaugeMetric::SamplingType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool ValueMetric_AggregationType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ValueMetric_AggregationType_strings[4] = {};

static const char ValueMetric_AggregationType_names[] =
  "AVG"
  "MAX"
  "MIN"
  "SUM";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ValueMetric_AggregationType_entries[] = {
  { {ValueMetric_AggregationType_names + 0, 3}, 4 },
  { {ValueMetric_AggregationType_names + 3, 3}, 3 },
  { {ValueMetric_AggregationType_names + 6, 3}, 2 },
  { {ValueMetric_AggregationType_names + 9, 3}, 1 },
};

static const int ValueMetric_AggregationType_entries_by_number[] = {
  3, // 1 -> SUM
  2, // 2 -> MIN
  1, // 3 -> MAX
  0, // 4 -> AVG
};

const std::string& ValueMetric_AggregationType_Name(
    ValueMetric_AggregationType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ValueMetric_AggregationType_entries,
          ValueMetric_AggregationType_entries_by_number,
          4, ValueMetric_AggregationType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ValueMetric_AggregationType_entries,
      ValueMetric_AggregationType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ValueMetric_AggregationType_strings[idx].get();
}
bool ValueMetric_AggregationType_Parse(
    const std::string& name, ValueMetric_AggregationType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ValueMetric_AggregationType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<ValueMetric_AggregationType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ValueMetric_AggregationType ValueMetric::SUM;
constexpr ValueMetric_AggregationType ValueMetric::MIN;
constexpr ValueMetric_AggregationType ValueMetric::MAX;
constexpr ValueMetric_AggregationType ValueMetric::AVG;
constexpr ValueMetric_AggregationType ValueMetric::AggregationType_MIN;
constexpr ValueMetric_AggregationType ValueMetric::AggregationType_MAX;
constexpr int ValueMetric::AggregationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool ValueMetric_ValueDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ValueMetric_ValueDirection_strings[4] = {};

static const char ValueMetric_ValueDirection_names[] =
  "ANY"
  "DECREASING"
  "INCREASING"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ValueMetric_ValueDirection_entries[] = {
  { {ValueMetric_ValueDirection_names + 0, 3}, 3 },
  { {ValueMetric_ValueDirection_names + 3, 10}, 2 },
  { {ValueMetric_ValueDirection_names + 13, 10}, 1 },
  { {ValueMetric_ValueDirection_names + 23, 7}, 0 },
};

static const int ValueMetric_ValueDirection_entries_by_number[] = {
  3, // 0 -> UNKNOWN
  2, // 1 -> INCREASING
  1, // 2 -> DECREASING
  0, // 3 -> ANY
};

const std::string& ValueMetric_ValueDirection_Name(
    ValueMetric_ValueDirection value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ValueMetric_ValueDirection_entries,
          ValueMetric_ValueDirection_entries_by_number,
          4, ValueMetric_ValueDirection_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ValueMetric_ValueDirection_entries,
      ValueMetric_ValueDirection_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ValueMetric_ValueDirection_strings[idx].get();
}
bool ValueMetric_ValueDirection_Parse(
    const std::string& name, ValueMetric_ValueDirection* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ValueMetric_ValueDirection_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<ValueMetric_ValueDirection>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ValueMetric_ValueDirection ValueMetric::UNKNOWN;
constexpr ValueMetric_ValueDirection ValueMetric::INCREASING;
constexpr ValueMetric_ValueDirection ValueMetric::DECREASING;
constexpr ValueMetric_ValueDirection ValueMetric::ANY;
constexpr ValueMetric_ValueDirection ValueMetric::ValueDirection_MIN;
constexpr ValueMetric_ValueDirection ValueMetric::ValueDirection_MAX;
constexpr int ValueMetric::ValueDirection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool IncidentdDetails_Destination_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> IncidentdDetails_Destination_strings[2] = {};

static const char IncidentdDetails_Destination_names[] =
  "AUTOMATIC"
  "EXPLICIT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry IncidentdDetails_Destination_entries[] = {
  { {IncidentdDetails_Destination_names + 0, 9}, 0 },
  { {IncidentdDetails_Destination_names + 9, 8}, 1 },
};

static const int IncidentdDetails_Destination_entries_by_number[] = {
  0, // 0 -> AUTOMATIC
  1, // 1 -> EXPLICIT
};

const std::string& IncidentdDetails_Destination_Name(
    IncidentdDetails_Destination value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          IncidentdDetails_Destination_entries,
          IncidentdDetails_Destination_entries_by_number,
          2, IncidentdDetails_Destination_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      IncidentdDetails_Destination_entries,
      IncidentdDetails_Destination_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     IncidentdDetails_Destination_strings[idx].get();
}
bool IncidentdDetails_Destination_Parse(
    const std::string& name, IncidentdDetails_Destination* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      IncidentdDetails_Destination_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<IncidentdDetails_Destination>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr IncidentdDetails_Destination IncidentdDetails::AUTOMATIC;
constexpr IncidentdDetails_Destination IncidentdDetails::EXPLICIT;
constexpr IncidentdDetails_Destination IncidentdDetails::Destination_MIN;
constexpr IncidentdDetails_Destination IncidentdDetails::Destination_MAX;
constexpr int IncidentdDetails::Destination_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool Subscription_RuleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Subscription_RuleType_strings[3] = {};

static const char Subscription_RuleType_names[] =
  "ALARM"
  "ALERT"
  "RULE_TYPE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Subscription_RuleType_entries[] = {
  { {Subscription_RuleType_names + 0, 5}, 1 },
  { {Subscription_RuleType_names + 5, 5}, 2 },
  { {Subscription_RuleType_names + 10, 21}, 0 },
};

static const int Subscription_RuleType_entries_by_number[] = {
  2, // 0 -> RULE_TYPE_UNSPECIFIED
  0, // 1 -> ALARM
  1, // 2 -> ALERT
};

const std::string& Subscription_RuleType_Name(
    Subscription_RuleType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Subscription_RuleType_entries,
          Subscription_RuleType_entries_by_number,
          3, Subscription_RuleType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Subscription_RuleType_entries,
      Subscription_RuleType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Subscription_RuleType_strings[idx].get();
}
bool Subscription_RuleType_Parse(
    const std::string& name, Subscription_RuleType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Subscription_RuleType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<Subscription_RuleType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Subscription_RuleType Subscription::RULE_TYPE_UNSPECIFIED;
constexpr Subscription_RuleType Subscription::ALARM;
constexpr Subscription_RuleType Subscription::ALERT;
constexpr Subscription_RuleType Subscription::RuleType_MIN;
constexpr Subscription_RuleType Subscription::RuleType_MAX;
constexpr int Subscription::RuleType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool Position_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Position_strings[5] = {};

static const char Position_names[] =
  "ALL"
  "ANY"
  "FIRST"
  "LAST"
  "POSITION_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Position_entries[] = {
  { {Position_names + 0, 3}, 4 },
  { {Position_names + 3, 3}, 3 },
  { {Position_names + 6, 5}, 1 },
  { {Position_names + 11, 4}, 2 },
  { {Position_names + 15, 16}, 0 },
};

static const int Position_entries_by_number[] = {
  4, // 0 -> POSITION_UNKNOWN
  2, // 1 -> FIRST
  3, // 2 -> LAST
  1, // 3 -> ANY
  0, // 4 -> ALL
};

const std::string& Position_Name(
    Position value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Position_entries,
          Position_entries_by_number,
          5, Position_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Position_entries,
      Position_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Position_strings[idx].get();
}
bool Position_Parse(
    const std::string& name, Position* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Position_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<Position>(int_value);
  }
  return success;
}
bool TimeUnit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 1000:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TimeUnit_strings[12] = {};

static const char TimeUnit_names[] =
  "CTS"
  "FIVE_MINUTES"
  "ONE_DAY"
  "ONE_HOUR"
  "ONE_MINUTE"
  "ONE_WEEK"
  "SIX_HOURS"
  "TEN_MINUTES"
  "THIRTY_MINUTES"
  "THREE_HOURS"
  "TIME_UNIT_UNSPECIFIED"
  "TWELVE_HOURS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TimeUnit_entries[] = {
  { {TimeUnit_names + 0, 3}, 1000 },
  { {TimeUnit_names + 3, 12}, 2 },
  { {TimeUnit_names + 15, 7}, 9 },
  { {TimeUnit_names + 22, 8}, 5 },
  { {TimeUnit_names + 30, 10}, 1 },
  { {TimeUnit_names + 40, 8}, 10 },
  { {TimeUnit_names + 48, 9}, 7 },
  { {TimeUnit_names + 57, 11}, 3 },
  { {TimeUnit_names + 68, 14}, 4 },
  { {TimeUnit_names + 82, 11}, 6 },
  { {TimeUnit_names + 93, 21}, 0 },
  { {TimeUnit_names + 114, 12}, 8 },
};

static const int TimeUnit_entries_by_number[] = {
  10, // 0 -> TIME_UNIT_UNSPECIFIED
  4, // 1 -> ONE_MINUTE
  1, // 2 -> FIVE_MINUTES
  7, // 3 -> TEN_MINUTES
  8, // 4 -> THIRTY_MINUTES
  3, // 5 -> ONE_HOUR
  9, // 6 -> THREE_HOURS
  6, // 7 -> SIX_HOURS
  11, // 8 -> TWELVE_HOURS
  2, // 9 -> ONE_DAY
  5, // 10 -> ONE_WEEK
  0, // 1000 -> CTS
};

const std::string& TimeUnit_Name(
    TimeUnit value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TimeUnit_entries,
          TimeUnit_entries_by_number,
          12, TimeUnit_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TimeUnit_entries,
      TimeUnit_entries_by_number,
      12, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TimeUnit_strings[idx].get();
}
bool TimeUnit_Parse(
    const std::string& name, TimeUnit* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TimeUnit_entries, 12, name, &int_value);
  if (success) {
    *value = static_cast<TimeUnit>(int_value);
  }
  return success;
}
bool LogicalOperation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LogicalOperation_strings[6] = {};

static const char LogicalOperation_names[] =
  "AND"
  "LOGICAL_OPERATION_UNSPECIFIED"
  "NAND"
  "NOR"
  "NOT"
  "OR";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LogicalOperation_entries[] = {
  { {LogicalOperation_names + 0, 3}, 1 },
  { {LogicalOperation_names + 3, 29}, 0 },
  { {LogicalOperation_names + 32, 4}, 4 },
  { {LogicalOperation_names + 36, 3}, 5 },
  { {LogicalOperation_names + 39, 3}, 3 },
  { {LogicalOperation_names + 42, 2}, 2 },
};

static const int LogicalOperation_entries_by_number[] = {
  1, // 0 -> LOGICAL_OPERATION_UNSPECIFIED
  0, // 1 -> AND
  5, // 2 -> OR
  4, // 3 -> NOT
  2, // 4 -> NAND
  3, // 5 -> NOR
};

const std::string& LogicalOperation_Name(
    LogicalOperation value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LogicalOperation_entries,
          LogicalOperation_entries_by_number,
          6, LogicalOperation_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LogicalOperation_entries,
      LogicalOperation_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LogicalOperation_strings[idx].get();
}
bool LogicalOperation_Parse(
    const std::string& name, LogicalOperation* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LogicalOperation_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<LogicalOperation>(int_value);
  }
  return success;
}
bool ActivationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ActivationType_strings[3] = {};

static const char ActivationType_names[] =
  "ACTIVATE_IMMEDIATELY"
  "ACTIVATE_ON_BOOT"
  "ACTIVATION_TYPE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ActivationType_entries[] = {
  { {ActivationType_names + 0, 20}, 1 },
  { {ActivationType_names + 20, 16}, 2 },
  { {ActivationType_names + 36, 23}, 0 },
};

static const int ActivationType_entries_by_number[] = {
  2, // 0 -> ACTIVATION_TYPE_UNKNOWN
  0, // 1 -> ACTIVATE_IMMEDIATELY
  1, // 2 -> ACTIVATE_ON_BOOT
};

const std::string& ActivationType_Name(
    ActivationType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ActivationType_entries,
          ActivationType_entries_by_number,
          3, ActivationType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ActivationType_entries,
      ActivationType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ActivationType_strings[idx].get();
}
bool ActivationType_Parse(
    const std::string& name, ActivationType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ActivationType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ActivationType>(int_value);
  }
  return success;
}

// ===================================================================

void FieldMatcher::InitAsDefaultInstance() {
}
class FieldMatcher::_Internal {
 public:
  using HasBits = decltype(std::declval<FieldMatcher>()._has_bits_);
  static void set_has_field(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FieldMatcher::FieldMatcher()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.FieldMatcher)
}
FieldMatcher::FieldMatcher(const FieldMatcher& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      child_(from.child_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&field_, &from.field_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&field_)) + sizeof(position_));
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.FieldMatcher)
}

void FieldMatcher::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FieldMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  ::memset(&field_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&field_)) + sizeof(position_));
}

FieldMatcher::~FieldMatcher() {
  // @@protoc_insertion_point(destructor:android.os.statsd.FieldMatcher)
  SharedDtor();
}

void FieldMatcher::SharedDtor() {
}

void FieldMatcher::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FieldMatcher& FieldMatcher::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FieldMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void FieldMatcher::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.FieldMatcher)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  child_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&field_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&position_) -
        reinterpret_cast<char*>(&field_)) + sizeof(position_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FieldMatcher::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_field(&has_bits);
          field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.Position position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::statsd::Position_IsValid(val))) {
            set_position(static_cast<::android::os::statsd::Position>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .android.os.statsd.FieldMatcher child = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_child(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FieldMatcher::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.FieldMatcher)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 field = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_field(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &field_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.Position position = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::statsd::Position_IsValid(value)) {
            set_position(static_cast< ::android::os::statsd::Position >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.statsd.FieldMatcher child = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_child()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.FieldMatcher)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.FieldMatcher)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FieldMatcher::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.FieldMatcher)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 field = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->field(), output);
  }

  // optional .android.os.statsd.Position position = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->position(), output);
  }

  // repeated .android.os.statsd.FieldMatcher child = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->child_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->child(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.FieldMatcher)
}

size_t FieldMatcher::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.FieldMatcher)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.os.statsd.FieldMatcher child = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->child_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->child(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 field = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->field());
    }

    // optional .android.os.statsd.Position position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->position());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FieldMatcher::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FieldMatcher*>(
      &from));
}

void FieldMatcher::MergeFrom(const FieldMatcher& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.FieldMatcher)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  child_.MergeFrom(from.child_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      field_ = from.field_;
    }
    if (cached_has_bits & 0x00000002u) {
      position_ = from.position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FieldMatcher::CopyFrom(const FieldMatcher& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.FieldMatcher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldMatcher::IsInitialized() const {
  return true;
}

void FieldMatcher::InternalSwap(FieldMatcher* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&child_)->InternalSwap(CastToBase(&other->child_));
  swap(field_, other->field_);
  swap(position_, other->position_);
}

std::string FieldMatcher::GetTypeName() const {
  return "android.os.statsd.FieldMatcher";
}


// ===================================================================

void FieldValueMatcher::InitAsDefaultInstance() {
}
class FieldValueMatcher::_Internal {
 public:
  using HasBits = decltype(std::declval<FieldValueMatcher>()._has_bits_);
  static void set_has_field(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::os::statsd::MessageMatcher& matches_tuple(const FieldValueMatcher* msg);
  static const ::android::os::statsd::StringListMatcher& eq_any_string(const FieldValueMatcher* msg);
  static const ::android::os::statsd::StringListMatcher& neq_any_string(const FieldValueMatcher* msg);
};

const ::android::os::statsd::MessageMatcher&
FieldValueMatcher::_Internal::matches_tuple(const FieldValueMatcher* msg) {
  return *msg->value_matcher_.matches_tuple_;
}
const ::android::os::statsd::StringListMatcher&
FieldValueMatcher::_Internal::eq_any_string(const FieldValueMatcher* msg) {
  return *msg->value_matcher_.eq_any_string_;
}
const ::android::os::statsd::StringListMatcher&
FieldValueMatcher::_Internal::neq_any_string(const FieldValueMatcher* msg) {
  return *msg->value_matcher_.neq_any_string_;
}
void FieldValueMatcher::set_allocated_matches_tuple(::android::os::statsd::MessageMatcher* matches_tuple) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value_matcher();
  if (matches_tuple) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      matches_tuple = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, matches_tuple, submessage_arena);
    }
    set_has_matches_tuple();
    value_matcher_.matches_tuple_ = matches_tuple;
  }
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.FieldValueMatcher.matches_tuple)
}
void FieldValueMatcher::set_allocated_eq_any_string(::android::os::statsd::StringListMatcher* eq_any_string) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value_matcher();
  if (eq_any_string) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      eq_any_string = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eq_any_string, submessage_arena);
    }
    set_has_eq_any_string();
    value_matcher_.eq_any_string_ = eq_any_string;
  }
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.FieldValueMatcher.eq_any_string)
}
void FieldValueMatcher::set_allocated_neq_any_string(::android::os::statsd::StringListMatcher* neq_any_string) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value_matcher();
  if (neq_any_string) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      neq_any_string = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, neq_any_string, submessage_arena);
    }
    set_has_neq_any_string();
    value_matcher_.neq_any_string_ = neq_any_string;
  }
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.FieldValueMatcher.neq_any_string)
}
FieldValueMatcher::FieldValueMatcher()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.FieldValueMatcher)
}
FieldValueMatcher::FieldValueMatcher(const FieldValueMatcher& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&field_, &from.field_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&field_)) + sizeof(position_));
  clear_has_value_matcher();
  switch (from.value_matcher_case()) {
    case kEqBool: {
      set_eq_bool(from.eq_bool());
      break;
    }
    case kEqString: {
      set_eq_string(from.eq_string());
      break;
    }
    case kEqInt: {
      set_eq_int(from.eq_int());
      break;
    }
    case kLtInt: {
      set_lt_int(from.lt_int());
      break;
    }
    case kGtInt: {
      set_gt_int(from.gt_int());
      break;
    }
    case kLtFloat: {
      set_lt_float(from.lt_float());
      break;
    }
    case kGtFloat: {
      set_gt_float(from.gt_float());
      break;
    }
    case kLteInt: {
      set_lte_int(from.lte_int());
      break;
    }
    case kGteInt: {
      set_gte_int(from.gte_int());
      break;
    }
    case kMatchesTuple: {
      mutable_matches_tuple()->::android::os::statsd::MessageMatcher::MergeFrom(from.matches_tuple());
      break;
    }
    case kEqAnyString: {
      mutable_eq_any_string()->::android::os::statsd::StringListMatcher::MergeFrom(from.eq_any_string());
      break;
    }
    case kNeqAnyString: {
      mutable_neq_any_string()->::android::os::statsd::StringListMatcher::MergeFrom(from.neq_any_string());
      break;
    }
    case VALUE_MATCHER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.FieldValueMatcher)
}

void FieldValueMatcher::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FieldValueMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  ::memset(&field_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&field_)) + sizeof(position_));
  clear_has_value_matcher();
}

FieldValueMatcher::~FieldValueMatcher() {
  // @@protoc_insertion_point(destructor:android.os.statsd.FieldValueMatcher)
  SharedDtor();
}

void FieldValueMatcher::SharedDtor() {
  if (has_value_matcher()) {
    clear_value_matcher();
  }
}

void FieldValueMatcher::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FieldValueMatcher& FieldValueMatcher::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FieldValueMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void FieldValueMatcher::clear_value_matcher() {
// @@protoc_insertion_point(one_of_clear_start:android.os.statsd.FieldValueMatcher)
  switch (value_matcher_case()) {
    case kEqBool: {
      // No need to clear
      break;
    }
    case kEqString: {
      value_matcher_.eq_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kEqInt: {
      // No need to clear
      break;
    }
    case kLtInt: {
      // No need to clear
      break;
    }
    case kGtInt: {
      // No need to clear
      break;
    }
    case kLtFloat: {
      // No need to clear
      break;
    }
    case kGtFloat: {
      // No need to clear
      break;
    }
    case kLteInt: {
      // No need to clear
      break;
    }
    case kGteInt: {
      // No need to clear
      break;
    }
    case kMatchesTuple: {
      delete value_matcher_.matches_tuple_;
      break;
    }
    case kEqAnyString: {
      delete value_matcher_.eq_any_string_;
      break;
    }
    case kNeqAnyString: {
      delete value_matcher_.neq_any_string_;
      break;
    }
    case VALUE_MATCHER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_MATCHER_NOT_SET;
}


void FieldValueMatcher::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.FieldValueMatcher)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&field_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&position_) -
        reinterpret_cast<char*>(&field_)) + sizeof(position_));
  }
  clear_value_matcher();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FieldValueMatcher::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_field(&has_bits);
          field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.Position position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::statsd::Position_IsValid(val))) {
            set_position(static_cast<::android::os::statsd::Position>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool eq_bool = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          set_eq_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string eq_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_eq_string(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 eq_int = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          set_eq_int(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 lt_int = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          set_lt_int(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 gt_int = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          set_gt_int(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float lt_float = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          set_lt_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float gt_float = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          set_gt_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int64 lte_int = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          set_lte_int(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 gte_int = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          set_gte_int(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.MessageMatcher matches_tuple = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_matches_tuple(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.StringListMatcher eq_any_string = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_eq_any_string(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.StringListMatcher neq_any_string = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_neq_any_string(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FieldValueMatcher::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.FieldValueMatcher)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 field = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_field(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &field_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.Position position = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::statsd::Position_IsValid(value)) {
            set_position(static_cast< ::android::os::statsd::Position >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool eq_bool = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          clear_value_matcher();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_matcher_.eq_bool_)));
          set_has_eq_bool();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string eq_string = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_eq_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 eq_int = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          clear_value_matcher();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_matcher_.eq_int_)));
          set_has_eq_int();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 lt_int = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          clear_value_matcher();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_matcher_.lt_int_)));
          set_has_lt_int();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 gt_int = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          clear_value_matcher();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_matcher_.gt_int_)));
          set_has_gt_int();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float lt_float = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {
          clear_value_matcher();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_matcher_.lt_float_)));
          set_has_lt_float();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float gt_float = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {
          clear_value_matcher();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_matcher_.gt_float_)));
          set_has_gt_float();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 lte_int = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          clear_value_matcher();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_matcher_.lte_int_)));
          set_has_lte_int();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 gte_int = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          clear_value_matcher();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_matcher_.gte_int_)));
          set_has_gte_int();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.MessageMatcher matches_tuple = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_matches_tuple()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.StringListMatcher eq_any_string = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_eq_any_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.StringListMatcher neq_any_string = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_neq_any_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.FieldValueMatcher)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.FieldValueMatcher)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FieldValueMatcher::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.FieldValueMatcher)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 field = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->field(), output);
  }

  // optional .android.os.statsd.Position position = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->position(), output);
  }

  switch (value_matcher_case()) {
    case kEqBool:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->eq_bool(), output);
      break;
    case kEqString:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
        4, this->eq_string(), output);
      break;
    case kEqInt:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->eq_int(), output);
      break;
    case kLtInt:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->lt_int(), output);
      break;
    case kGtInt:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->gt_int(), output);
      break;
    case kLtFloat:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(8, this->lt_float(), output);
      break;
    case kGtFloat:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->gt_float(), output);
      break;
    case kLteInt:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(10, this->lte_int(), output);
      break;
    case kGteInt:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(11, this->gte_int(), output);
      break;
    case kMatchesTuple:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        12, _Internal::matches_tuple(this), output);
      break;
    case kEqAnyString:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        13, _Internal::eq_any_string(this), output);
      break;
    case kNeqAnyString:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        14, _Internal::neq_any_string(this), output);
      break;
    default: ;
  }
  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.FieldValueMatcher)
}

size_t FieldValueMatcher::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.FieldValueMatcher)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 field = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->field());
    }

    // optional .android.os.statsd.Position position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->position());
    }

  }
  switch (value_matcher_case()) {
    // optional bool eq_bool = 3;
    case kEqBool: {
      total_size += 1 + 1;
      break;
    }
    // optional string eq_string = 4;
    case kEqString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->eq_string());
      break;
    }
    // optional int64 eq_int = 5;
    case kEqInt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->eq_int());
      break;
    }
    // optional int64 lt_int = 6;
    case kLtInt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->lt_int());
      break;
    }
    // optional int64 gt_int = 7;
    case kGtInt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->gt_int());
      break;
    }
    // optional float lt_float = 8;
    case kLtFloat: {
      total_size += 1 + 4;
      break;
    }
    // optional float gt_float = 9;
    case kGtFloat: {
      total_size += 1 + 4;
      break;
    }
    // optional int64 lte_int = 10;
    case kLteInt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->lte_int());
      break;
    }
    // optional int64 gte_int = 11;
    case kGteInt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->gte_int());
      break;
    }
    // optional .android.os.statsd.MessageMatcher matches_tuple = 12;
    case kMatchesTuple: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_matcher_.matches_tuple_);
      break;
    }
    // optional .android.os.statsd.StringListMatcher eq_any_string = 13;
    case kEqAnyString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_matcher_.eq_any_string_);
      break;
    }
    // optional .android.os.statsd.StringListMatcher neq_any_string = 14;
    case kNeqAnyString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_matcher_.neq_any_string_);
      break;
    }
    case VALUE_MATCHER_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FieldValueMatcher::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FieldValueMatcher*>(
      &from));
}

void FieldValueMatcher::MergeFrom(const FieldValueMatcher& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.FieldValueMatcher)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      field_ = from.field_;
    }
    if (cached_has_bits & 0x00000002u) {
      position_ = from.position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.value_matcher_case()) {
    case kEqBool: {
      set_eq_bool(from.eq_bool());
      break;
    }
    case kEqString: {
      set_eq_string(from.eq_string());
      break;
    }
    case kEqInt: {
      set_eq_int(from.eq_int());
      break;
    }
    case kLtInt: {
      set_lt_int(from.lt_int());
      break;
    }
    case kGtInt: {
      set_gt_int(from.gt_int());
      break;
    }
    case kLtFloat: {
      set_lt_float(from.lt_float());
      break;
    }
    case kGtFloat: {
      set_gt_float(from.gt_float());
      break;
    }
    case kLteInt: {
      set_lte_int(from.lte_int());
      break;
    }
    case kGteInt: {
      set_gte_int(from.gte_int());
      break;
    }
    case kMatchesTuple: {
      mutable_matches_tuple()->::android::os::statsd::MessageMatcher::MergeFrom(from.matches_tuple());
      break;
    }
    case kEqAnyString: {
      mutable_eq_any_string()->::android::os::statsd::StringListMatcher::MergeFrom(from.eq_any_string());
      break;
    }
    case kNeqAnyString: {
      mutable_neq_any_string()->::android::os::statsd::StringListMatcher::MergeFrom(from.neq_any_string());
      break;
    }
    case VALUE_MATCHER_NOT_SET: {
      break;
    }
  }
}

void FieldValueMatcher::CopyFrom(const FieldValueMatcher& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.FieldValueMatcher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldValueMatcher::IsInitialized() const {
  return true;
}

void FieldValueMatcher::InternalSwap(FieldValueMatcher* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(field_, other->field_);
  swap(position_, other->position_);
  swap(value_matcher_, other->value_matcher_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string FieldValueMatcher::GetTypeName() const {
  return "android.os.statsd.FieldValueMatcher";
}


// ===================================================================

void MessageMatcher::InitAsDefaultInstance() {
}
class MessageMatcher::_Internal {
 public:
  using HasBits = decltype(std::declval<MessageMatcher>()._has_bits_);
};

MessageMatcher::MessageMatcher()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.MessageMatcher)
}
MessageMatcher::MessageMatcher(const MessageMatcher& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      field_value_matcher_(from.field_value_matcher_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.MessageMatcher)
}

void MessageMatcher::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FieldValueMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
}

MessageMatcher::~MessageMatcher() {
  // @@protoc_insertion_point(destructor:android.os.statsd.MessageMatcher)
  SharedDtor();
}

void MessageMatcher::SharedDtor() {
}

void MessageMatcher::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageMatcher& MessageMatcher::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FieldValueMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void MessageMatcher::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.MessageMatcher)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_value_matcher_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MessageMatcher::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .android.os.statsd.FieldValueMatcher field_value_matcher = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_field_value_matcher(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MessageMatcher::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.MessageMatcher)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .android.os.statsd.FieldValueMatcher field_value_matcher = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_field_value_matcher()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.MessageMatcher)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.MessageMatcher)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MessageMatcher::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.MessageMatcher)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.os.statsd.FieldValueMatcher field_value_matcher = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_value_matcher_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->field_value_matcher(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.MessageMatcher)
}

size_t MessageMatcher::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.MessageMatcher)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.os.statsd.FieldValueMatcher field_value_matcher = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->field_value_matcher_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->field_value_matcher(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageMatcher::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MessageMatcher*>(
      &from));
}

void MessageMatcher::MergeFrom(const MessageMatcher& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.MessageMatcher)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_value_matcher_.MergeFrom(from.field_value_matcher_);
}

void MessageMatcher::CopyFrom(const MessageMatcher& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.MessageMatcher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageMatcher::IsInitialized() const {
  return true;
}

void MessageMatcher::InternalSwap(MessageMatcher* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&field_value_matcher_)->InternalSwap(CastToBase(&other->field_value_matcher_));
}

std::string MessageMatcher::GetTypeName() const {
  return "android.os.statsd.MessageMatcher";
}


// ===================================================================

void StringListMatcher::InitAsDefaultInstance() {
}
class StringListMatcher::_Internal {
 public:
  using HasBits = decltype(std::declval<StringListMatcher>()._has_bits_);
};

StringListMatcher::StringListMatcher()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.StringListMatcher)
}
StringListMatcher::StringListMatcher(const StringListMatcher& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      str_value_(from.str_value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.StringListMatcher)
}

void StringListMatcher::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StringListMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
}

StringListMatcher::~StringListMatcher() {
  // @@protoc_insertion_point(destructor:android.os.statsd.StringListMatcher)
  SharedDtor();
}

void StringListMatcher::SharedDtor() {
}

void StringListMatcher::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StringListMatcher& StringListMatcher::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StringListMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void StringListMatcher::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.StringListMatcher)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  str_value_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StringListMatcher::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string str_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_str_value(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StringListMatcher::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.StringListMatcher)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string str_value = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_str_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.StringListMatcher)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.StringListMatcher)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StringListMatcher::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.StringListMatcher)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string str_value = 1;
  for (int i = 0, n = this->str_value_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->str_value(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.StringListMatcher)
}

size_t StringListMatcher::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.StringListMatcher)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string str_value = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->str_value_size());
  for (int i = 0, n = this->str_value_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->str_value(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringListMatcher::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StringListMatcher*>(
      &from));
}

void StringListMatcher::MergeFrom(const StringListMatcher& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.StringListMatcher)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  str_value_.MergeFrom(from.str_value_);
}

void StringListMatcher::CopyFrom(const StringListMatcher& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.StringListMatcher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringListMatcher::IsInitialized() const {
  return true;
}

void StringListMatcher::InternalSwap(StringListMatcher* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  str_value_.InternalSwap(CastToBase(&other->str_value_));
}

std::string StringListMatcher::GetTypeName() const {
  return "android.os.statsd.StringListMatcher";
}


// ===================================================================

void SimpleAtomMatcher::InitAsDefaultInstance() {
}
class SimpleAtomMatcher::_Internal {
 public:
  using HasBits = decltype(std::declval<SimpleAtomMatcher>()._has_bits_);
  static void set_has_atom_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SimpleAtomMatcher::SimpleAtomMatcher()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.SimpleAtomMatcher)
}
SimpleAtomMatcher::SimpleAtomMatcher(const SimpleAtomMatcher& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      field_value_matcher_(from.field_value_matcher_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  atom_id_ = from.atom_id_;
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.SimpleAtomMatcher)
}

void SimpleAtomMatcher::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimpleAtomMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  atom_id_ = 0;
}

SimpleAtomMatcher::~SimpleAtomMatcher() {
  // @@protoc_insertion_point(destructor:android.os.statsd.SimpleAtomMatcher)
  SharedDtor();
}

void SimpleAtomMatcher::SharedDtor() {
}

void SimpleAtomMatcher::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimpleAtomMatcher& SimpleAtomMatcher::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimpleAtomMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void SimpleAtomMatcher::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.SimpleAtomMatcher)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_value_matcher_.Clear();
  atom_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SimpleAtomMatcher::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 atom_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_atom_id(&has_bits);
          atom_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.statsd.FieldValueMatcher field_value_matcher = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_field_value_matcher(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SimpleAtomMatcher::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.SimpleAtomMatcher)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 atom_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_atom_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &atom_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.statsd.FieldValueMatcher field_value_matcher = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_field_value_matcher()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.SimpleAtomMatcher)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.SimpleAtomMatcher)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SimpleAtomMatcher::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.SimpleAtomMatcher)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 atom_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->atom_id(), output);
  }

  // repeated .android.os.statsd.FieldValueMatcher field_value_matcher = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_value_matcher_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->field_value_matcher(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.SimpleAtomMatcher)
}

size_t SimpleAtomMatcher::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.SimpleAtomMatcher)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.os.statsd.FieldValueMatcher field_value_matcher = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->field_value_matcher_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->field_value_matcher(static_cast<int>(i)));
    }
  }

  // optional int32 atom_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->atom_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleAtomMatcher::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SimpleAtomMatcher*>(
      &from));
}

void SimpleAtomMatcher::MergeFrom(const SimpleAtomMatcher& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.SimpleAtomMatcher)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_value_matcher_.MergeFrom(from.field_value_matcher_);
  if (from.has_atom_id()) {
    set_atom_id(from.atom_id());
  }
}

void SimpleAtomMatcher::CopyFrom(const SimpleAtomMatcher& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.SimpleAtomMatcher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleAtomMatcher::IsInitialized() const {
  return true;
}

void SimpleAtomMatcher::InternalSwap(SimpleAtomMatcher* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&field_value_matcher_)->InternalSwap(CastToBase(&other->field_value_matcher_));
  swap(atom_id_, other->atom_id_);
}

std::string SimpleAtomMatcher::GetTypeName() const {
  return "android.os.statsd.SimpleAtomMatcher";
}


// ===================================================================

void AtomMatcher_Combination::InitAsDefaultInstance() {
}
class AtomMatcher_Combination::_Internal {
 public:
  using HasBits = decltype(std::declval<AtomMatcher_Combination>()._has_bits_);
  static void set_has_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AtomMatcher_Combination::AtomMatcher_Combination()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.AtomMatcher.Combination)
}
AtomMatcher_Combination::AtomMatcher_Combination(const AtomMatcher_Combination& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      matcher_(from.matcher_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  operation_ = from.operation_;
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.AtomMatcher.Combination)
}

void AtomMatcher_Combination::SharedCtor() {
  operation_ = 0;
}

AtomMatcher_Combination::~AtomMatcher_Combination() {
  // @@protoc_insertion_point(destructor:android.os.statsd.AtomMatcher.Combination)
  SharedDtor();
}

void AtomMatcher_Combination::SharedDtor() {
}

void AtomMatcher_Combination::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AtomMatcher_Combination& AtomMatcher_Combination::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AtomMatcher_Combination_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void AtomMatcher_Combination::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.AtomMatcher.Combination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matcher_.Clear();
  operation_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AtomMatcher_Combination::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.os.statsd.LogicalOperation operation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::statsd::LogicalOperation_IsValid(val))) {
            set_operation(static_cast<::android::os::statsd::LogicalOperation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated int64 matcher = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_matcher(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 16);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_matcher(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AtomMatcher_Combination::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.AtomMatcher.Combination)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.os.statsd.LogicalOperation operation = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::statsd::LogicalOperation_IsValid(value)) {
            set_operation(static_cast< ::android::os::statsd::LogicalOperation >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 matcher = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 16u, input, this->mutable_matcher())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_matcher())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.AtomMatcher.Combination)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.AtomMatcher.Combination)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AtomMatcher_Combination::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.AtomMatcher.Combination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.os.statsd.LogicalOperation operation = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }

  // repeated int64 matcher = 2;
  for (int i = 0, n = this->matcher_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(
      2, this->matcher(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.AtomMatcher.Combination)
}

size_t AtomMatcher_Combination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.AtomMatcher.Combination)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 matcher = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->matcher_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->matcher_size());
    total_size += data_size;
  }

  // optional .android.os.statsd.LogicalOperation operation = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->operation());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AtomMatcher_Combination::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AtomMatcher_Combination*>(
      &from));
}

void AtomMatcher_Combination::MergeFrom(const AtomMatcher_Combination& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.AtomMatcher.Combination)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matcher_.MergeFrom(from.matcher_);
  if (from.has_operation()) {
    set_operation(from.operation());
  }
}

void AtomMatcher_Combination::CopyFrom(const AtomMatcher_Combination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.AtomMatcher.Combination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AtomMatcher_Combination::IsInitialized() const {
  return true;
}

void AtomMatcher_Combination::InternalSwap(AtomMatcher_Combination* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  matcher_.InternalSwap(&other->matcher_);
  swap(operation_, other->operation_);
}

std::string AtomMatcher_Combination::GetTypeName() const {
  return "android.os.statsd.AtomMatcher.Combination";
}


// ===================================================================

void AtomMatcher::InitAsDefaultInstance() {
}
class AtomMatcher::_Internal {
 public:
  using HasBits = decltype(std::declval<AtomMatcher>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::os::statsd::SimpleAtomMatcher& simple_atom_matcher(const AtomMatcher* msg);
  static const ::android::os::statsd::AtomMatcher_Combination& combination(const AtomMatcher* msg);
};

const ::android::os::statsd::SimpleAtomMatcher&
AtomMatcher::_Internal::simple_atom_matcher(const AtomMatcher* msg) {
  return *msg->contents_.simple_atom_matcher_;
}
const ::android::os::statsd::AtomMatcher_Combination&
AtomMatcher::_Internal::combination(const AtomMatcher* msg) {
  return *msg->contents_.combination_;
}
void AtomMatcher::set_allocated_simple_atom_matcher(::android::os::statsd::SimpleAtomMatcher* simple_atom_matcher) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_contents();
  if (simple_atom_matcher) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      simple_atom_matcher = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, simple_atom_matcher, submessage_arena);
    }
    set_has_simple_atom_matcher();
    contents_.simple_atom_matcher_ = simple_atom_matcher;
  }
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.AtomMatcher.simple_atom_matcher)
}
void AtomMatcher::set_allocated_combination(::android::os::statsd::AtomMatcher_Combination* combination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_contents();
  if (combination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      combination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, combination, submessage_arena);
    }
    set_has_combination();
    contents_.combination_ = combination;
  }
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.AtomMatcher.combination)
}
AtomMatcher::AtomMatcher()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.AtomMatcher)
}
AtomMatcher::AtomMatcher(const AtomMatcher& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  clear_has_contents();
  switch (from.contents_case()) {
    case kSimpleAtomMatcher: {
      mutable_simple_atom_matcher()->::android::os::statsd::SimpleAtomMatcher::MergeFrom(from.simple_atom_matcher());
      break;
    }
    case kCombination: {
      mutable_combination()->::android::os::statsd::AtomMatcher_Combination::MergeFrom(from.combination());
      break;
    }
    case CONTENTS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.AtomMatcher)
}

void AtomMatcher::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AtomMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  id_ = PROTOBUF_LONGLONG(0);
  clear_has_contents();
}

AtomMatcher::~AtomMatcher() {
  // @@protoc_insertion_point(destructor:android.os.statsd.AtomMatcher)
  SharedDtor();
}

void AtomMatcher::SharedDtor() {
  if (has_contents()) {
    clear_contents();
  }
}

void AtomMatcher::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AtomMatcher& AtomMatcher::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AtomMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void AtomMatcher::clear_contents() {
// @@protoc_insertion_point(one_of_clear_start:android.os.statsd.AtomMatcher)
  switch (contents_case()) {
    case kSimpleAtomMatcher: {
      delete contents_.simple_atom_matcher_;
      break;
    }
    case kCombination: {
      delete contents_.combination_;
      break;
    }
    case CONTENTS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENTS_NOT_SET;
}


void AtomMatcher::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.AtomMatcher)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_LONGLONG(0);
  clear_contents();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AtomMatcher::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.SimpleAtomMatcher simple_atom_matcher = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_simple_atom_matcher(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.AtomMatcher.Combination combination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_combination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AtomMatcher::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.AtomMatcher)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.SimpleAtomMatcher simple_atom_matcher = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_simple_atom_matcher()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.AtomMatcher.Combination combination = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_combination()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.AtomMatcher)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.AtomMatcher)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AtomMatcher::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.AtomMatcher)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  switch (contents_case()) {
    case kSimpleAtomMatcher:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        2, _Internal::simple_atom_matcher(this), output);
      break;
    case kCombination:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        3, _Internal::combination(this), output);
      break;
    default: ;
  }
  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.AtomMatcher)
}

size_t AtomMatcher::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.AtomMatcher)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->id());
  }

  switch (contents_case()) {
    // optional .android.os.statsd.SimpleAtomMatcher simple_atom_matcher = 2;
    case kSimpleAtomMatcher: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contents_.simple_atom_matcher_);
      break;
    }
    // optional .android.os.statsd.AtomMatcher.Combination combination = 3;
    case kCombination: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contents_.combination_);
      break;
    }
    case CONTENTS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AtomMatcher::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AtomMatcher*>(
      &from));
}

void AtomMatcher::MergeFrom(const AtomMatcher& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.AtomMatcher)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    set_id(from.id());
  }
  switch (from.contents_case()) {
    case kSimpleAtomMatcher: {
      mutable_simple_atom_matcher()->::android::os::statsd::SimpleAtomMatcher::MergeFrom(from.simple_atom_matcher());
      break;
    }
    case kCombination: {
      mutable_combination()->::android::os::statsd::AtomMatcher_Combination::MergeFrom(from.combination());
      break;
    }
    case CONTENTS_NOT_SET: {
      break;
    }
  }
}

void AtomMatcher::CopyFrom(const AtomMatcher& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.AtomMatcher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AtomMatcher::IsInitialized() const {
  return true;
}

void AtomMatcher::InternalSwap(AtomMatcher* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(contents_, other->contents_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string AtomMatcher::GetTypeName() const {
  return "android.os.statsd.AtomMatcher";
}


// ===================================================================

void SimplePredicate::InitAsDefaultInstance() {
  ::android::os::statsd::_SimplePredicate_default_instance_._instance.get_mutable()->dimensions_ = const_cast< ::android::os::statsd::FieldMatcher*>(
      ::android::os::statsd::FieldMatcher::internal_default_instance());
}
class SimplePredicate::_Internal {
 public:
  using HasBits = decltype(std::declval<SimplePredicate>()._has_bits_);
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stop(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_count_nesting(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_stop_all(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_initial_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::os::statsd::FieldMatcher& dimensions(const SimplePredicate* msg);
  static void set_has_dimensions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::android::os::statsd::FieldMatcher&
SimplePredicate::_Internal::dimensions(const SimplePredicate* msg) {
  return *msg->dimensions_;
}
SimplePredicate::SimplePredicate()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.SimplePredicate)
}
SimplePredicate::SimplePredicate(const SimplePredicate& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dimensions()) {
    dimensions_ = new ::android::os::statsd::FieldMatcher(*from.dimensions_);
  } else {
    dimensions_ = nullptr;
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_nesting_) -
    reinterpret_cast<char*>(&start_)) + sizeof(count_nesting_));
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.SimplePredicate)
}

void SimplePredicate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimplePredicate_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  ::memset(&dimensions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&initial_value_) -
      reinterpret_cast<char*>(&dimensions_)) + sizeof(initial_value_));
  count_nesting_ = true;
}

SimplePredicate::~SimplePredicate() {
  // @@protoc_insertion_point(destructor:android.os.statsd.SimplePredicate)
  SharedDtor();
}

void SimplePredicate::SharedDtor() {
  if (this != internal_default_instance()) delete dimensions_;
}

void SimplePredicate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimplePredicate& SimplePredicate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimplePredicate_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void SimplePredicate::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.SimplePredicate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(dimensions_ != nullptr);
    dimensions_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&initial_value_) -
        reinterpret_cast<char*>(&start_)) + sizeof(initial_value_));
    count_nesting_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SimplePredicate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_start(&has_bits);
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 stop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stop(&has_bits);
          stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool count_nesting = 3 [default = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_count_nesting(&has_bits);
          count_nesting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 stop_all = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_stop_all(&has_bits);
          stop_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.SimplePredicate.InitialValue initial_value = 5 [default = UNKNOWN];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::statsd::SimplePredicate_InitialValue_IsValid(val))) {
            set_initial_value(static_cast<::android::os::statsd::SimplePredicate_InitialValue>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.FieldMatcher dimensions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_dimensions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SimplePredicate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.SimplePredicate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 start = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_start(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 stop = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_stop(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool count_nesting = 3 [default = true];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_count_nesting(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &count_nesting_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 stop_all = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_stop_all(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &stop_all_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.SimplePredicate.InitialValue initial_value = 5 [default = UNKNOWN];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::statsd::SimplePredicate_InitialValue_IsValid(value)) {
            set_initial_value(static_cast< ::android::os::statsd::SimplePredicate_InitialValue >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.FieldMatcher dimensions = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dimensions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.SimplePredicate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.SimplePredicate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SimplePredicate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.SimplePredicate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 start = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->start(), output);
  }

  // optional int64 stop = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->stop(), output);
  }

  // optional bool count_nesting = 3 [default = true];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->count_nesting(), output);
  }

  // optional int64 stop_all = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->stop_all(), output);
  }

  // optional .android.os.statsd.SimplePredicate.InitialValue initial_value = 5 [default = UNKNOWN];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->initial_value(), output);
  }

  // optional .android.os.statsd.FieldMatcher dimensions = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::dimensions(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.SimplePredicate)
}

size_t SimplePredicate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.SimplePredicate)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .android.os.statsd.FieldMatcher dimensions = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dimensions_);
    }

    // optional int64 start = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->start());
    }

    // optional int64 stop = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->stop());
    }

    // optional int64 stop_all = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->stop_all());
    }

    // optional .android.os.statsd.SimplePredicate.InitialValue initial_value = 5 [default = UNKNOWN];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->initial_value());
    }

    // optional bool count_nesting = 3 [default = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimplePredicate::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SimplePredicate*>(
      &from));
}

void SimplePredicate::MergeFrom(const SimplePredicate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.SimplePredicate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_dimensions()->::android::os::statsd::FieldMatcher::MergeFrom(from.dimensions());
    }
    if (cached_has_bits & 0x00000002u) {
      start_ = from.start_;
    }
    if (cached_has_bits & 0x00000004u) {
      stop_ = from.stop_;
    }
    if (cached_has_bits & 0x00000008u) {
      stop_all_ = from.stop_all_;
    }
    if (cached_has_bits & 0x00000010u) {
      initial_value_ = from.initial_value_;
    }
    if (cached_has_bits & 0x00000020u) {
      count_nesting_ = from.count_nesting_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SimplePredicate::CopyFrom(const SimplePredicate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.SimplePredicate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimplePredicate::IsInitialized() const {
  return true;
}

void SimplePredicate::InternalSwap(SimplePredicate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dimensions_, other->dimensions_);
  swap(start_, other->start_);
  swap(stop_, other->stop_);
  swap(stop_all_, other->stop_all_);
  swap(initial_value_, other->initial_value_);
  swap(count_nesting_, other->count_nesting_);
}

std::string SimplePredicate::GetTypeName() const {
  return "android.os.statsd.SimplePredicate";
}


// ===================================================================

void Predicate_Combination::InitAsDefaultInstance() {
}
class Predicate_Combination::_Internal {
 public:
  using HasBits = decltype(std::declval<Predicate_Combination>()._has_bits_);
  static void set_has_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Predicate_Combination::Predicate_Combination()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.Predicate.Combination)
}
Predicate_Combination::Predicate_Combination(const Predicate_Combination& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      predicate_(from.predicate_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  operation_ = from.operation_;
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.Predicate.Combination)
}

void Predicate_Combination::SharedCtor() {
  operation_ = 0;
}

Predicate_Combination::~Predicate_Combination() {
  // @@protoc_insertion_point(destructor:android.os.statsd.Predicate.Combination)
  SharedDtor();
}

void Predicate_Combination::SharedDtor() {
}

void Predicate_Combination::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Predicate_Combination& Predicate_Combination::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Predicate_Combination_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void Predicate_Combination::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.Predicate.Combination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  predicate_.Clear();
  operation_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Predicate_Combination::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.os.statsd.LogicalOperation operation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::statsd::LogicalOperation_IsValid(val))) {
            set_operation(static_cast<::android::os::statsd::LogicalOperation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated int64 predicate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_predicate(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 16);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_predicate(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Predicate_Combination::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.Predicate.Combination)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.os.statsd.LogicalOperation operation = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::statsd::LogicalOperation_IsValid(value)) {
            set_operation(static_cast< ::android::os::statsd::LogicalOperation >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 predicate = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 16u, input, this->mutable_predicate())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_predicate())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.Predicate.Combination)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.Predicate.Combination)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Predicate_Combination::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.Predicate.Combination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.os.statsd.LogicalOperation operation = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }

  // repeated int64 predicate = 2;
  for (int i = 0, n = this->predicate_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(
      2, this->predicate(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.Predicate.Combination)
}

size_t Predicate_Combination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.Predicate.Combination)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 predicate = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->predicate_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->predicate_size());
    total_size += data_size;
  }

  // optional .android.os.statsd.LogicalOperation operation = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->operation());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Predicate_Combination::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Predicate_Combination*>(
      &from));
}

void Predicate_Combination::MergeFrom(const Predicate_Combination& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.Predicate.Combination)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  predicate_.MergeFrom(from.predicate_);
  if (from.has_operation()) {
    set_operation(from.operation());
  }
}

void Predicate_Combination::CopyFrom(const Predicate_Combination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.Predicate.Combination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Predicate_Combination::IsInitialized() const {
  return true;
}

void Predicate_Combination::InternalSwap(Predicate_Combination* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  predicate_.InternalSwap(&other->predicate_);
  swap(operation_, other->operation_);
}

std::string Predicate_Combination::GetTypeName() const {
  return "android.os.statsd.Predicate.Combination";
}


// ===================================================================

void Predicate::InitAsDefaultInstance() {
}
class Predicate::_Internal {
 public:
  using HasBits = decltype(std::declval<Predicate>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::os::statsd::SimplePredicate& simple_predicate(const Predicate* msg);
  static const ::android::os::statsd::Predicate_Combination& combination(const Predicate* msg);
};

const ::android::os::statsd::SimplePredicate&
Predicate::_Internal::simple_predicate(const Predicate* msg) {
  return *msg->contents_.simple_predicate_;
}
const ::android::os::statsd::Predicate_Combination&
Predicate::_Internal::combination(const Predicate* msg) {
  return *msg->contents_.combination_;
}
void Predicate::set_allocated_simple_predicate(::android::os::statsd::SimplePredicate* simple_predicate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_contents();
  if (simple_predicate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      simple_predicate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, simple_predicate, submessage_arena);
    }
    set_has_simple_predicate();
    contents_.simple_predicate_ = simple_predicate;
  }
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.Predicate.simple_predicate)
}
void Predicate::set_allocated_combination(::android::os::statsd::Predicate_Combination* combination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_contents();
  if (combination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      combination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, combination, submessage_arena);
    }
    set_has_combination();
    contents_.combination_ = combination;
  }
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.Predicate.combination)
}
Predicate::Predicate()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.Predicate)
}
Predicate::Predicate(const Predicate& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  clear_has_contents();
  switch (from.contents_case()) {
    case kSimplePredicate: {
      mutable_simple_predicate()->::android::os::statsd::SimplePredicate::MergeFrom(from.simple_predicate());
      break;
    }
    case kCombination: {
      mutable_combination()->::android::os::statsd::Predicate_Combination::MergeFrom(from.combination());
      break;
    }
    case CONTENTS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.Predicate)
}

void Predicate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Predicate_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  id_ = PROTOBUF_LONGLONG(0);
  clear_has_contents();
}

Predicate::~Predicate() {
  // @@protoc_insertion_point(destructor:android.os.statsd.Predicate)
  SharedDtor();
}

void Predicate::SharedDtor() {
  if (has_contents()) {
    clear_contents();
  }
}

void Predicate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Predicate& Predicate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Predicate_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void Predicate::clear_contents() {
// @@protoc_insertion_point(one_of_clear_start:android.os.statsd.Predicate)
  switch (contents_case()) {
    case kSimplePredicate: {
      delete contents_.simple_predicate_;
      break;
    }
    case kCombination: {
      delete contents_.combination_;
      break;
    }
    case CONTENTS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENTS_NOT_SET;
}


void Predicate::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.Predicate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_LONGLONG(0);
  clear_contents();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Predicate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.SimplePredicate simple_predicate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_simple_predicate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.Predicate.Combination combination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_combination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Predicate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.Predicate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.SimplePredicate simple_predicate = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_simple_predicate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.Predicate.Combination combination = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_combination()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.Predicate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.Predicate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Predicate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.Predicate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  switch (contents_case()) {
    case kSimplePredicate:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        2, _Internal::simple_predicate(this), output);
      break;
    case kCombination:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        3, _Internal::combination(this), output);
      break;
    default: ;
  }
  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.Predicate)
}

size_t Predicate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.Predicate)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->id());
  }

  switch (contents_case()) {
    // optional .android.os.statsd.SimplePredicate simple_predicate = 2;
    case kSimplePredicate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contents_.simple_predicate_);
      break;
    }
    // optional .android.os.statsd.Predicate.Combination combination = 3;
    case kCombination: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contents_.combination_);
      break;
    }
    case CONTENTS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Predicate::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Predicate*>(
      &from));
}

void Predicate::MergeFrom(const Predicate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.Predicate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    set_id(from.id());
  }
  switch (from.contents_case()) {
    case kSimplePredicate: {
      mutable_simple_predicate()->::android::os::statsd::SimplePredicate::MergeFrom(from.simple_predicate());
      break;
    }
    case kCombination: {
      mutable_combination()->::android::os::statsd::Predicate_Combination::MergeFrom(from.combination());
      break;
    }
    case CONTENTS_NOT_SET: {
      break;
    }
  }
}

void Predicate::CopyFrom(const Predicate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.Predicate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Predicate::IsInitialized() const {
  return true;
}

void Predicate::InternalSwap(Predicate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(contents_, other->contents_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string Predicate::GetTypeName() const {
  return "android.os.statsd.Predicate";
}


// ===================================================================

void StateMap_StateGroup::InitAsDefaultInstance() {
}
class StateMap_StateGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<StateMap_StateGroup>()._has_bits_);
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StateMap_StateGroup::StateMap_StateGroup()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.StateMap.StateGroup)
}
StateMap_StateGroup::StateMap_StateGroup(const StateMap_StateGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      value_(from.value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_ = from.group_id_;
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.StateMap.StateGroup)
}

void StateMap_StateGroup::SharedCtor() {
  group_id_ = PROTOBUF_LONGLONG(0);
}

StateMap_StateGroup::~StateMap_StateGroup() {
  // @@protoc_insertion_point(destructor:android.os.statsd.StateMap.StateGroup)
  SharedDtor();
}

void StateMap_StateGroup::SharedDtor() {
}

void StateMap_StateGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateMap_StateGroup& StateMap_StateGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateMap_StateGroup_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void StateMap_StateGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.StateMap.StateGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  group_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateMap_StateGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_group_id(&has_bits);
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 16);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateMap_StateGroup::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.StateMap.StateGroup)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 group_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_group_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_value())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.StateMap.StateGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.StateMap.StateGroup)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateMap_StateGroup::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.StateMap.StateGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->group_id(), output);
  }

  // repeated int32 value = 2;
  for (int i = 0, n = this->value_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      2, this->value(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.StateMap.StateGroup)
}

size_t StateMap_StateGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.StateMap.StateGroup)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 value = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->value_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->value_size());
    total_size += data_size;
  }

  // optional int64 group_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->group_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateMap_StateGroup::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StateMap_StateGroup*>(
      &from));
}

void StateMap_StateGroup::MergeFrom(const StateMap_StateGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.StateMap.StateGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  if (from.has_group_id()) {
    set_group_id(from.group_id());
  }
}

void StateMap_StateGroup::CopyFrom(const StateMap_StateGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.StateMap.StateGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateMap_StateGroup::IsInitialized() const {
  return true;
}

void StateMap_StateGroup::InternalSwap(StateMap_StateGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.InternalSwap(&other->value_);
  swap(group_id_, other->group_id_);
}

std::string StateMap_StateGroup::GetTypeName() const {
  return "android.os.statsd.StateMap.StateGroup";
}


// ===================================================================

void StateMap::InitAsDefaultInstance() {
}
class StateMap::_Internal {
 public:
  using HasBits = decltype(std::declval<StateMap>()._has_bits_);
};

StateMap::StateMap()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.StateMap)
}
StateMap::StateMap(const StateMap& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      group_(from.group_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.StateMap)
}

void StateMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StateMap_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
}

StateMap::~StateMap() {
  // @@protoc_insertion_point(destructor:android.os.statsd.StateMap)
  SharedDtor();
}

void StateMap::SharedDtor() {
}

void StateMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StateMap& StateMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StateMap_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void StateMap::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.StateMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StateMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .android.os.statsd.StateMap.StateGroup group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_group(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StateMap::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.StateMap)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .android.os.statsd.StateMap.StateGroup group = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.StateMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.StateMap)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StateMap::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.StateMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.os.statsd.StateMap.StateGroup group = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->group_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->group(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.StateMap)
}

size_t StateMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.StateMap)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.os.statsd.StateMap.StateGroup group = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->group_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->group(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StateMap::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StateMap*>(
      &from));
}

void StateMap::MergeFrom(const StateMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.StateMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  group_.MergeFrom(from.group_);
}

void StateMap::CopyFrom(const StateMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.StateMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateMap::IsInitialized() const {
  return true;
}

void StateMap::InternalSwap(StateMap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&group_)->InternalSwap(CastToBase(&other->group_));
}

std::string StateMap::GetTypeName() const {
  return "android.os.statsd.StateMap";
}


// ===================================================================

void State::InitAsDefaultInstance() {
  ::android::os::statsd::_State_default_instance_._instance.get_mutable()->map_ = const_cast< ::android::os::statsd::StateMap*>(
      ::android::os::statsd::StateMap::internal_default_instance());
}
class State::_Internal {
 public:
  using HasBits = decltype(std::declval<State>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_atom_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::os::statsd::StateMap& map(const State* msg);
  static void set_has_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::android::os::statsd::StateMap&
State::_Internal::map(const State* msg) {
  return *msg->map_;
}
State::State()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.State)
}
State::State(const State& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_map()) {
    map_ = new ::android::os::statsd::StateMap(*from.map_);
  } else {
    map_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&atom_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(atom_id_));
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.State)
}

void State::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_State_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  ::memset(&map_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&atom_id_) -
      reinterpret_cast<char*>(&map_)) + sizeof(atom_id_));
}

State::~State() {
  // @@protoc_insertion_point(destructor:android.os.statsd.State)
  SharedDtor();
}

void State::SharedDtor() {
  if (this != internal_default_instance()) delete map_;
}

void State::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const State& State::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_State_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void State::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.State)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(map_ != nullptr);
    map_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&atom_id_) -
        reinterpret_cast<char*>(&id_)) + sizeof(atom_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* State::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 atom_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_atom_id(&has_bits);
          atom_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.StateMap map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool State::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.State)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 atom_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_atom_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &atom_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.StateMap map = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.State)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.State)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void State::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.State)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 atom_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->atom_id(), output);
  }

  // optional .android.os.statsd.StateMap map = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::map(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.State)
}

size_t State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.State)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .android.os.statsd.StateMap map = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *map_);
    }

    // optional int64 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 atom_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->atom_id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void State::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const State*>(
      &from));
}

void State::MergeFrom(const State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_map()->::android::os::statsd::StateMap::MergeFrom(from.map());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      atom_id_ = from.atom_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void State::CopyFrom(const State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  return true;
}

void State::InternalSwap(State* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(map_, other->map_);
  swap(id_, other->id_);
  swap(atom_id_, other->atom_id_);
}

std::string State::GetTypeName() const {
  return "android.os.statsd.State";
}


// ===================================================================

void MetricConditionLink::InitAsDefaultInstance() {
  ::android::os::statsd::_MetricConditionLink_default_instance_._instance.get_mutable()->fields_in_what_ = const_cast< ::android::os::statsd::FieldMatcher*>(
      ::android::os::statsd::FieldMatcher::internal_default_instance());
  ::android::os::statsd::_MetricConditionLink_default_instance_._instance.get_mutable()->fields_in_condition_ = const_cast< ::android::os::statsd::FieldMatcher*>(
      ::android::os::statsd::FieldMatcher::internal_default_instance());
}
class MetricConditionLink::_Internal {
 public:
  using HasBits = decltype(std::declval<MetricConditionLink>()._has_bits_);
  static void set_has_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::os::statsd::FieldMatcher& fields_in_what(const MetricConditionLink* msg);
  static void set_has_fields_in_what(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::os::statsd::FieldMatcher& fields_in_condition(const MetricConditionLink* msg);
  static void set_has_fields_in_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::os::statsd::FieldMatcher&
MetricConditionLink::_Internal::fields_in_what(const MetricConditionLink* msg) {
  return *msg->fields_in_what_;
}
const ::android::os::statsd::FieldMatcher&
MetricConditionLink::_Internal::fields_in_condition(const MetricConditionLink* msg) {
  return *msg->fields_in_condition_;
}
MetricConditionLink::MetricConditionLink()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.MetricConditionLink)
}
MetricConditionLink::MetricConditionLink(const MetricConditionLink& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fields_in_what()) {
    fields_in_what_ = new ::android::os::statsd::FieldMatcher(*from.fields_in_what_);
  } else {
    fields_in_what_ = nullptr;
  }
  if (from.has_fields_in_condition()) {
    fields_in_condition_ = new ::android::os::statsd::FieldMatcher(*from.fields_in_condition_);
  } else {
    fields_in_condition_ = nullptr;
  }
  condition_ = from.condition_;
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.MetricConditionLink)
}

void MetricConditionLink::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MetricConditionLink_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  ::memset(&fields_in_what_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&condition_) -
      reinterpret_cast<char*>(&fields_in_what_)) + sizeof(condition_));
}

MetricConditionLink::~MetricConditionLink() {
  // @@protoc_insertion_point(destructor:android.os.statsd.MetricConditionLink)
  SharedDtor();
}

void MetricConditionLink::SharedDtor() {
  if (this != internal_default_instance()) delete fields_in_what_;
  if (this != internal_default_instance()) delete fields_in_condition_;
}

void MetricConditionLink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetricConditionLink& MetricConditionLink::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MetricConditionLink_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void MetricConditionLink::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.MetricConditionLink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(fields_in_what_ != nullptr);
      fields_in_what_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(fields_in_condition_ != nullptr);
      fields_in_condition_->Clear();
    }
  }
  condition_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MetricConditionLink::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 condition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_condition(&has_bits);
          condition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.FieldMatcher fields_in_what = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_fields_in_what(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.FieldMatcher fields_in_condition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_fields_in_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MetricConditionLink::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.MetricConditionLink)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 condition = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_condition(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &condition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.FieldMatcher fields_in_what = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fields_in_what()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.FieldMatcher fields_in_condition = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fields_in_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.MetricConditionLink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.MetricConditionLink)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MetricConditionLink::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.MetricConditionLink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 condition = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->condition(), output);
  }

  // optional .android.os.statsd.FieldMatcher fields_in_what = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::fields_in_what(this), output);
  }

  // optional .android.os.statsd.FieldMatcher fields_in_condition = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::fields_in_condition(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.MetricConditionLink)
}

size_t MetricConditionLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.MetricConditionLink)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .android.os.statsd.FieldMatcher fields_in_what = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fields_in_what_);
    }

    // optional .android.os.statsd.FieldMatcher fields_in_condition = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fields_in_condition_);
    }

    // optional int64 condition = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->condition());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetricConditionLink::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MetricConditionLink*>(
      &from));
}

void MetricConditionLink::MergeFrom(const MetricConditionLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.MetricConditionLink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_fields_in_what()->::android::os::statsd::FieldMatcher::MergeFrom(from.fields_in_what());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_fields_in_condition()->::android::os::statsd::FieldMatcher::MergeFrom(from.fields_in_condition());
    }
    if (cached_has_bits & 0x00000004u) {
      condition_ = from.condition_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MetricConditionLink::CopyFrom(const MetricConditionLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.MetricConditionLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricConditionLink::IsInitialized() const {
  return true;
}

void MetricConditionLink::InternalSwap(MetricConditionLink* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fields_in_what_, other->fields_in_what_);
  swap(fields_in_condition_, other->fields_in_condition_);
  swap(condition_, other->condition_);
}

std::string MetricConditionLink::GetTypeName() const {
  return "android.os.statsd.MetricConditionLink";
}


// ===================================================================

void MetricStateLink::InitAsDefaultInstance() {
  ::android::os::statsd::_MetricStateLink_default_instance_._instance.get_mutable()->fields_in_what_ = const_cast< ::android::os::statsd::FieldMatcher*>(
      ::android::os::statsd::FieldMatcher::internal_default_instance());
  ::android::os::statsd::_MetricStateLink_default_instance_._instance.get_mutable()->fields_in_state_ = const_cast< ::android::os::statsd::FieldMatcher*>(
      ::android::os::statsd::FieldMatcher::internal_default_instance());
}
class MetricStateLink::_Internal {
 public:
  using HasBits = decltype(std::declval<MetricStateLink>()._has_bits_);
  static void set_has_state_atom_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::os::statsd::FieldMatcher& fields_in_what(const MetricStateLink* msg);
  static void set_has_fields_in_what(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::os::statsd::FieldMatcher& fields_in_state(const MetricStateLink* msg);
  static void set_has_fields_in_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::os::statsd::FieldMatcher&
MetricStateLink::_Internal::fields_in_what(const MetricStateLink* msg) {
  return *msg->fields_in_what_;
}
const ::android::os::statsd::FieldMatcher&
MetricStateLink::_Internal::fields_in_state(const MetricStateLink* msg) {
  return *msg->fields_in_state_;
}
MetricStateLink::MetricStateLink()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.MetricStateLink)
}
MetricStateLink::MetricStateLink(const MetricStateLink& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fields_in_what()) {
    fields_in_what_ = new ::android::os::statsd::FieldMatcher(*from.fields_in_what_);
  } else {
    fields_in_what_ = nullptr;
  }
  if (from.has_fields_in_state()) {
    fields_in_state_ = new ::android::os::statsd::FieldMatcher(*from.fields_in_state_);
  } else {
    fields_in_state_ = nullptr;
  }
  state_atom_id_ = from.state_atom_id_;
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.MetricStateLink)
}

void MetricStateLink::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MetricStateLink_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  ::memset(&fields_in_what_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_atom_id_) -
      reinterpret_cast<char*>(&fields_in_what_)) + sizeof(state_atom_id_));
}

MetricStateLink::~MetricStateLink() {
  // @@protoc_insertion_point(destructor:android.os.statsd.MetricStateLink)
  SharedDtor();
}

void MetricStateLink::SharedDtor() {
  if (this != internal_default_instance()) delete fields_in_what_;
  if (this != internal_default_instance()) delete fields_in_state_;
}

void MetricStateLink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetricStateLink& MetricStateLink::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MetricStateLink_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void MetricStateLink::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.MetricStateLink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(fields_in_what_ != nullptr);
      fields_in_what_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(fields_in_state_ != nullptr);
      fields_in_state_->Clear();
    }
  }
  state_atom_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MetricStateLink::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 state_atom_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_state_atom_id(&has_bits);
          state_atom_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.FieldMatcher fields_in_what = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_fields_in_what(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.FieldMatcher fields_in_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_fields_in_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MetricStateLink::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.MetricStateLink)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state_atom_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_state_atom_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_atom_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.FieldMatcher fields_in_what = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fields_in_what()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.FieldMatcher fields_in_state = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fields_in_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.MetricStateLink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.MetricStateLink)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MetricStateLink::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.MetricStateLink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 state_atom_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->state_atom_id(), output);
  }

  // optional .android.os.statsd.FieldMatcher fields_in_what = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::fields_in_what(this), output);
  }

  // optional .android.os.statsd.FieldMatcher fields_in_state = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::fields_in_state(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.MetricStateLink)
}

size_t MetricStateLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.MetricStateLink)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .android.os.statsd.FieldMatcher fields_in_what = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fields_in_what_);
    }

    // optional .android.os.statsd.FieldMatcher fields_in_state = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fields_in_state_);
    }

    // optional int32 state_atom_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->state_atom_id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetricStateLink::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MetricStateLink*>(
      &from));
}

void MetricStateLink::MergeFrom(const MetricStateLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.MetricStateLink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_fields_in_what()->::android::os::statsd::FieldMatcher::MergeFrom(from.fields_in_what());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_fields_in_state()->::android::os::statsd::FieldMatcher::MergeFrom(from.fields_in_state());
    }
    if (cached_has_bits & 0x00000004u) {
      state_atom_id_ = from.state_atom_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MetricStateLink::CopyFrom(const MetricStateLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.MetricStateLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricStateLink::IsInitialized() const {
  return true;
}

void MetricStateLink::InternalSwap(MetricStateLink* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fields_in_what_, other->fields_in_what_);
  swap(fields_in_state_, other->fields_in_state_);
  swap(state_atom_id_, other->state_atom_id_);
}

std::string MetricStateLink::GetTypeName() const {
  return "android.os.statsd.MetricStateLink";
}


// ===================================================================

void FieldFilter::InitAsDefaultInstance() {
  ::android::os::statsd::_FieldFilter_default_instance_._instance.get_mutable()->fields_ = const_cast< ::android::os::statsd::FieldMatcher*>(
      ::android::os::statsd::FieldMatcher::internal_default_instance());
}
class FieldFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<FieldFilter>()._has_bits_);
  static void set_has_include_all(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::os::statsd::FieldMatcher& fields(const FieldFilter* msg);
  static void set_has_fields(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::android::os::statsd::FieldMatcher&
FieldFilter::_Internal::fields(const FieldFilter* msg) {
  return *msg->fields_;
}
FieldFilter::FieldFilter()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.FieldFilter)
}
FieldFilter::FieldFilter(const FieldFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fields()) {
    fields_ = new ::android::os::statsd::FieldMatcher(*from.fields_);
  } else {
    fields_ = nullptr;
  }
  include_all_ = from.include_all_;
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.FieldFilter)
}

void FieldFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FieldFilter_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  ::memset(&fields_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&include_all_) -
      reinterpret_cast<char*>(&fields_)) + sizeof(include_all_));
}

FieldFilter::~FieldFilter() {
  // @@protoc_insertion_point(destructor:android.os.statsd.FieldFilter)
  SharedDtor();
}

void FieldFilter::SharedDtor() {
  if (this != internal_default_instance()) delete fields_;
}

void FieldFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FieldFilter& FieldFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FieldFilter_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void FieldFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.FieldFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(fields_ != nullptr);
    fields_->Clear();
  }
  include_all_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FieldFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool include_all = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_include_all(&has_bits);
          include_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.FieldMatcher fields = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_fields(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FieldFilter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.FieldFilter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool include_all = 1 [default = false];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_include_all(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_all_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.FieldMatcher fields = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.FieldFilter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.FieldFilter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FieldFilter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.FieldFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool include_all = 1 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->include_all(), output);
  }

  // optional .android.os.statsd.FieldMatcher fields = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::fields(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.FieldFilter)
}

size_t FieldFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.FieldFilter)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.os.statsd.FieldMatcher fields = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fields_);
    }

    // optional bool include_all = 1 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FieldFilter::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FieldFilter*>(
      &from));
}

void FieldFilter::MergeFrom(const FieldFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.FieldFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_fields()->::android::os::statsd::FieldMatcher::MergeFrom(from.fields());
    }
    if (cached_has_bits & 0x00000002u) {
      include_all_ = from.include_all_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FieldFilter::CopyFrom(const FieldFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.FieldFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldFilter::IsInitialized() const {
  return true;
}

void FieldFilter::InternalSwap(FieldFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fields_, other->fields_);
  swap(include_all_, other->include_all_);
}

std::string FieldFilter::GetTypeName() const {
  return "android.os.statsd.FieldFilter";
}


// ===================================================================

void UploadThreshold::InitAsDefaultInstance() {
}
class UploadThreshold::_Internal {
 public:
  using HasBits = decltype(std::declval<UploadThreshold>()._has_bits_);
};

UploadThreshold::UploadThreshold()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.UploadThreshold)
}
UploadThreshold::UploadThreshold(const UploadThreshold& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_value_comparison();
  switch (from.value_comparison_case()) {
    case kLtInt: {
      set_lt_int(from.lt_int());
      break;
    }
    case kGtInt: {
      set_gt_int(from.gt_int());
      break;
    }
    case kLtFloat: {
      set_lt_float(from.lt_float());
      break;
    }
    case kGtFloat: {
      set_gt_float(from.gt_float());
      break;
    }
    case kLteInt: {
      set_lte_int(from.lte_int());
      break;
    }
    case kGteInt: {
      set_gte_int(from.gte_int());
      break;
    }
    case VALUE_COMPARISON_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.UploadThreshold)
}

void UploadThreshold::SharedCtor() {
  clear_has_value_comparison();
}

UploadThreshold::~UploadThreshold() {
  // @@protoc_insertion_point(destructor:android.os.statsd.UploadThreshold)
  SharedDtor();
}

void UploadThreshold::SharedDtor() {
  if (has_value_comparison()) {
    clear_value_comparison();
  }
}

void UploadThreshold::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UploadThreshold& UploadThreshold::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UploadThreshold_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void UploadThreshold::clear_value_comparison() {
// @@protoc_insertion_point(one_of_clear_start:android.os.statsd.UploadThreshold)
  switch (value_comparison_case()) {
    case kLtInt: {
      // No need to clear
      break;
    }
    case kGtInt: {
      // No need to clear
      break;
    }
    case kLtFloat: {
      // No need to clear
      break;
    }
    case kGtFloat: {
      // No need to clear
      break;
    }
    case kLteInt: {
      // No need to clear
      break;
    }
    case kGteInt: {
      // No need to clear
      break;
    }
    case VALUE_COMPARISON_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_COMPARISON_NOT_SET;
}


void UploadThreshold::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.UploadThreshold)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value_comparison();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UploadThreshold::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 lt_int = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          set_lt_int(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 gt_int = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          set_gt_int(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float lt_float = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          set_lt_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float gt_float = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          set_gt_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int64 lte_int = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          set_lte_int(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 gte_int = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          set_gte_int(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UploadThreshold::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.UploadThreshold)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 lt_int = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          clear_value_comparison();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_comparison_.lt_int_)));
          set_has_lt_int();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 gt_int = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          clear_value_comparison();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_comparison_.gt_int_)));
          set_has_gt_int();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float lt_float = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          clear_value_comparison();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_comparison_.lt_float_)));
          set_has_lt_float();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float gt_float = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          clear_value_comparison();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_comparison_.gt_float_)));
          set_has_gt_float();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 lte_int = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          clear_value_comparison();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_comparison_.lte_int_)));
          set_has_lte_int();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 gte_int = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          clear_value_comparison();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_comparison_.gte_int_)));
          set_has_gte_int();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.UploadThreshold)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.UploadThreshold)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UploadThreshold::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.UploadThreshold)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (value_comparison_case()) {
    case kLtInt:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->lt_int(), output);
      break;
    case kGtInt:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->gt_int(), output);
      break;
    case kLtFloat:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->lt_float(), output);
      break;
    case kGtFloat:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->gt_float(), output);
      break;
    case kLteInt:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->lte_int(), output);
      break;
    case kGteInt:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->gte_int(), output);
      break;
    default: ;
  }
  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.UploadThreshold)
}

size_t UploadThreshold::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.UploadThreshold)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_comparison_case()) {
    // optional int64 lt_int = 1;
    case kLtInt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->lt_int());
      break;
    }
    // optional int64 gt_int = 2;
    case kGtInt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->gt_int());
      break;
    }
    // optional float lt_float = 3;
    case kLtFloat: {
      total_size += 1 + 4;
      break;
    }
    // optional float gt_float = 4;
    case kGtFloat: {
      total_size += 1 + 4;
      break;
    }
    // optional int64 lte_int = 5;
    case kLteInt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->lte_int());
      break;
    }
    // optional int64 gte_int = 6;
    case kGteInt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->gte_int());
      break;
    }
    case VALUE_COMPARISON_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UploadThreshold::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UploadThreshold*>(
      &from));
}

void UploadThreshold::MergeFrom(const UploadThreshold& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.UploadThreshold)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_comparison_case()) {
    case kLtInt: {
      set_lt_int(from.lt_int());
      break;
    }
    case kGtInt: {
      set_gt_int(from.gt_int());
      break;
    }
    case kLtFloat: {
      set_lt_float(from.lt_float());
      break;
    }
    case kGtFloat: {
      set_gt_float(from.gt_float());
      break;
    }
    case kLteInt: {
      set_lte_int(from.lte_int());
      break;
    }
    case kGteInt: {
      set_gte_int(from.gte_int());
      break;
    }
    case VALUE_COMPARISON_NOT_SET: {
      break;
    }
  }
}

void UploadThreshold::CopyFrom(const UploadThreshold& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.UploadThreshold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadThreshold::IsInitialized() const {
  return true;
}

void UploadThreshold::InternalSwap(UploadThreshold* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(value_comparison_, other->value_comparison_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string UploadThreshold::GetTypeName() const {
  return "android.os.statsd.UploadThreshold";
}


// ===================================================================

void EventMetric::InitAsDefaultInstance() {
}
class EventMetric::_Internal {
 public:
  using HasBits = decltype(std::declval<EventMetric>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_what(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

EventMetric::EventMetric()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.EventMetric)
}
EventMetric::EventMetric(const EventMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      links_(from.links_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&condition_) -
    reinterpret_cast<char*>(&id_)) + sizeof(condition_));
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.EventMetric)
}

void EventMetric::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&condition_) -
      reinterpret_cast<char*>(&id_)) + sizeof(condition_));
}

EventMetric::~EventMetric() {
  // @@protoc_insertion_point(destructor:android.os.statsd.EventMetric)
  SharedDtor();
}

void EventMetric::SharedDtor() {
}

void EventMetric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventMetric& EventMetric::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void EventMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.EventMetric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  links_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&condition_) -
        reinterpret_cast<char*>(&id_)) + sizeof(condition_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EventMetric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 what = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_what(&has_bits);
          what_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 condition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_condition(&has_bits);
          condition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.statsd.MetricConditionLink links = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_links(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EventMetric::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.EventMetric)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 what = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_what(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &what_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 condition = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_condition(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &condition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.statsd.MetricConditionLink links = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_links()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.EventMetric)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.EventMetric)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EventMetric::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.EventMetric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 what = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->what(), output);
  }

  // optional int64 condition = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->condition(), output);
  }

  // repeated .android.os.statsd.MetricConditionLink links = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->links_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4,
      this->links(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.EventMetric)
}

size_t EventMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.EventMetric)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.os.statsd.MetricConditionLink links = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->links_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->links(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 what = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->what());
    }

    // optional int64 condition = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->condition());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventMetric::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EventMetric*>(
      &from));
}

void EventMetric::MergeFrom(const EventMetric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.EventMetric)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  links_.MergeFrom(from.links_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      what_ = from.what_;
    }
    if (cached_has_bits & 0x00000004u) {
      condition_ = from.condition_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EventMetric::CopyFrom(const EventMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.EventMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventMetric::IsInitialized() const {
  return true;
}

void EventMetric::InternalSwap(EventMetric* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&links_)->InternalSwap(CastToBase(&other->links_));
  swap(id_, other->id_);
  swap(what_, other->what_);
  swap(condition_, other->condition_);
}

std::string EventMetric::GetTypeName() const {
  return "android.os.statsd.EventMetric";
}


// ===================================================================

void CountMetric::InitAsDefaultInstance() {
  ::android::os::statsd::_CountMetric_default_instance_._instance.get_mutable()->dimensions_in_what_ = const_cast< ::android::os::statsd::FieldMatcher*>(
      ::android::os::statsd::FieldMatcher::internal_default_instance());
  ::android::os::statsd::_CountMetric_default_instance_._instance.get_mutable()->threshold_ = const_cast< ::android::os::statsd::UploadThreshold*>(
      ::android::os::statsd::UploadThreshold::internal_default_instance());
  ::android::os::statsd::_CountMetric_default_instance_._instance.get_mutable()->dimensions_in_condition_ = const_cast< ::android::os::statsd::FieldMatcher*>(
      ::android::os::statsd::FieldMatcher::internal_default_instance());
}
class CountMetric::_Internal {
 public:
  using HasBits = decltype(std::declval<CountMetric>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_what(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::android::os::statsd::FieldMatcher& dimensions_in_what(const CountMetric* msg);
  static void set_has_dimensions_in_what(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bucket(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::android::os::statsd::UploadThreshold& threshold(const CountMetric* msg);
  static void set_has_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_split_bucket_for_app_upgrade(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::android::os::statsd::FieldMatcher& dimensions_in_condition(const CountMetric* msg);
  static void set_has_dimensions_in_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::os::statsd::FieldMatcher&
CountMetric::_Internal::dimensions_in_what(const CountMetric* msg) {
  return *msg->dimensions_in_what_;
}
const ::android::os::statsd::UploadThreshold&
CountMetric::_Internal::threshold(const CountMetric* msg) {
  return *msg->threshold_;
}
const ::android::os::statsd::FieldMatcher&
CountMetric::_Internal::dimensions_in_condition(const CountMetric* msg) {
  return *msg->dimensions_in_condition_;
}
CountMetric::CountMetric()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.CountMetric)
}
CountMetric::CountMetric(const CountMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      links_(from.links_),
      slice_by_state_(from.slice_by_state_),
      state_link_(from.state_link_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dimensions_in_what()) {
    dimensions_in_what_ = new ::android::os::statsd::FieldMatcher(*from.dimensions_in_what_);
  } else {
    dimensions_in_what_ = nullptr;
  }
  if (from.has_dimensions_in_condition()) {
    dimensions_in_condition_ = new ::android::os::statsd::FieldMatcher(*from.dimensions_in_condition_);
  } else {
    dimensions_in_condition_ = nullptr;
  }
  if (from.has_threshold()) {
    threshold_ = new ::android::os::statsd::UploadThreshold(*from.threshold_);
  } else {
    threshold_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&split_bucket_for_app_upgrade_) -
    reinterpret_cast<char*>(&id_)) + sizeof(split_bucket_for_app_upgrade_));
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.CountMetric)
}

void CountMetric::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CountMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  ::memset(&dimensions_in_what_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bucket_) -
      reinterpret_cast<char*>(&dimensions_in_what_)) + sizeof(bucket_));
  split_bucket_for_app_upgrade_ = true;
}

CountMetric::~CountMetric() {
  // @@protoc_insertion_point(destructor:android.os.statsd.CountMetric)
  SharedDtor();
}

void CountMetric::SharedDtor() {
  if (this != internal_default_instance()) delete dimensions_in_what_;
  if (this != internal_default_instance()) delete dimensions_in_condition_;
  if (this != internal_default_instance()) delete threshold_;
}

void CountMetric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CountMetric& CountMetric::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CountMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void CountMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.CountMetric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  links_.Clear();
  slice_by_state_.Clear();
  state_link_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(dimensions_in_what_ != nullptr);
      dimensions_in_what_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dimensions_in_condition_ != nullptr);
      dimensions_in_condition_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(threshold_ != nullptr);
      threshold_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bucket_) -
        reinterpret_cast<char*>(&id_)) + sizeof(bucket_));
    split_bucket_for_app_upgrade_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CountMetric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 what = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_what(&has_bits);
          what_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 condition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_condition(&has_bits);
          condition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.FieldMatcher dimensions_in_what = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_dimensions_in_what(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.TimeUnit bucket = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::statsd::TimeUnit_IsValid(val))) {
            set_bucket(static_cast<::android::os::statsd::TimeUnit>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .android.os.statsd.MetricConditionLink links = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_links(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.FieldMatcher dimensions_in_condition = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_dimensions_in_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 slice_by_state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_slice_by_state(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 64);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_slice_by_state(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.statsd.MetricStateLink state_link = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_state_link(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.UploadThreshold threshold = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_threshold(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool split_bucket_for_app_upgrade = 11 [default = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_split_bucket_for_app_upgrade(&has_bits);
          split_bucket_for_app_upgrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CountMetric::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.CountMetric)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 what = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_what(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &what_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 condition = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_condition(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &condition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.FieldMatcher dimensions_in_what = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dimensions_in_what()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.TimeUnit bucket = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::statsd::TimeUnit_IsValid(value)) {
            set_bucket(static_cast< ::android::os::statsd::TimeUnit >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.statsd.MetricConditionLink links = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_links()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.FieldMatcher dimensions_in_condition = 7 [deprecated = true];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dimensions_in_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 slice_by_state = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 64u, input, this->mutable_slice_by_state())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_slice_by_state())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.statsd.MetricStateLink state_link = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_state_link()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.UploadThreshold threshold = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_threshold()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool split_bucket_for_app_upgrade = 11 [default = true];
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_split_bucket_for_app_upgrade(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &split_bucket_for_app_upgrade_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.CountMetric)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.CountMetric)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CountMetric::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.CountMetric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 what = 2;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->what(), output);
  }

  // optional int64 condition = 3;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->condition(), output);
  }

  // optional .android.os.statsd.FieldMatcher dimensions_in_what = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::dimensions_in_what(this), output);
  }

  // optional .android.os.statsd.TimeUnit bucket = 5;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->bucket(), output);
  }

  // repeated .android.os.statsd.MetricConditionLink links = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->links_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6,
      this->links(static_cast<int>(i)),
      output);
  }

  // optional .android.os.statsd.FieldMatcher dimensions_in_condition = 7 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::dimensions_in_condition(this), output);
  }

  // repeated int64 slice_by_state = 8;
  for (int i = 0, n = this->slice_by_state_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(
      8, this->slice_by_state(i), output);
  }

  // repeated .android.os.statsd.MetricStateLink state_link = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->state_link_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9,
      this->state_link(static_cast<int>(i)),
      output);
  }

  // optional .android.os.statsd.UploadThreshold threshold = 10;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10, _Internal::threshold(this), output);
  }

  // optional bool split_bucket_for_app_upgrade = 11 [default = true];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(11, this->split_bucket_for_app_upgrade(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.CountMetric)
}

size_t CountMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.CountMetric)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.os.statsd.MetricConditionLink links = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->links_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->links(static_cast<int>(i)));
    }
  }

  // repeated int64 slice_by_state = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->slice_by_state_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->slice_by_state_size());
    total_size += data_size;
  }

  // repeated .android.os.statsd.MetricStateLink state_link = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->state_link_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->state_link(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.os.statsd.FieldMatcher dimensions_in_what = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dimensions_in_what_);
    }

    // optional .android.os.statsd.FieldMatcher dimensions_in_condition = 7 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dimensions_in_condition_);
    }

    // optional .android.os.statsd.UploadThreshold threshold = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *threshold_);
    }

    // optional int64 id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 what = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->what());
    }

    // optional int64 condition = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->condition());
    }

    // optional .android.os.statsd.TimeUnit bucket = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->bucket());
    }

    // optional bool split_bucket_for_app_upgrade = 11 [default = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CountMetric::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CountMetric*>(
      &from));
}

void CountMetric::MergeFrom(const CountMetric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.CountMetric)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  links_.MergeFrom(from.links_);
  slice_by_state_.MergeFrom(from.slice_by_state_);
  state_link_.MergeFrom(from.state_link_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_dimensions_in_what()->::android::os::statsd::FieldMatcher::MergeFrom(from.dimensions_in_what());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_dimensions_in_condition()->::android::os::statsd::FieldMatcher::MergeFrom(from.dimensions_in_condition());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_threshold()->::android::os::statsd::UploadThreshold::MergeFrom(from.threshold());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      what_ = from.what_;
    }
    if (cached_has_bits & 0x00000020u) {
      condition_ = from.condition_;
    }
    if (cached_has_bits & 0x00000040u) {
      bucket_ = from.bucket_;
    }
    if (cached_has_bits & 0x00000080u) {
      split_bucket_for_app_upgrade_ = from.split_bucket_for_app_upgrade_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CountMetric::CopyFrom(const CountMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.CountMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountMetric::IsInitialized() const {
  return true;
}

void CountMetric::InternalSwap(CountMetric* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&links_)->InternalSwap(CastToBase(&other->links_));
  slice_by_state_.InternalSwap(&other->slice_by_state_);
  CastToBase(&state_link_)->InternalSwap(CastToBase(&other->state_link_));
  swap(dimensions_in_what_, other->dimensions_in_what_);
  swap(dimensions_in_condition_, other->dimensions_in_condition_);
  swap(threshold_, other->threshold_);
  swap(id_, other->id_);
  swap(what_, other->what_);
  swap(condition_, other->condition_);
  swap(bucket_, other->bucket_);
  swap(split_bucket_for_app_upgrade_, other->split_bucket_for_app_upgrade_);
}

std::string CountMetric::GetTypeName() const {
  return "android.os.statsd.CountMetric";
}


// ===================================================================

void DurationMetric::InitAsDefaultInstance() {
  ::android::os::statsd::_DurationMetric_default_instance_._instance.get_mutable()->dimensions_in_what_ = const_cast< ::android::os::statsd::FieldMatcher*>(
      ::android::os::statsd::FieldMatcher::internal_default_instance());
  ::android::os::statsd::_DurationMetric_default_instance_._instance.get_mutable()->threshold_ = const_cast< ::android::os::statsd::UploadThreshold*>(
      ::android::os::statsd::UploadThreshold::internal_default_instance());
  ::android::os::statsd::_DurationMetric_default_instance_._instance.get_mutable()->dimensions_in_condition_ = const_cast< ::android::os::statsd::FieldMatcher*>(
      ::android::os::statsd::FieldMatcher::internal_default_instance());
}
class DurationMetric::_Internal {
 public:
  using HasBits = decltype(std::declval<DurationMetric>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_what(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_aggregation_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::android::os::statsd::FieldMatcher& dimensions_in_what(const DurationMetric* msg);
  static void set_has_dimensions_in_what(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bucket(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::android::os::statsd::UploadThreshold& threshold(const DurationMetric* msg);
  static void set_has_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_split_bucket_for_app_upgrade(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::android::os::statsd::FieldMatcher& dimensions_in_condition(const DurationMetric* msg);
  static void set_has_dimensions_in_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::os::statsd::FieldMatcher&
DurationMetric::_Internal::dimensions_in_what(const DurationMetric* msg) {
  return *msg->dimensions_in_what_;
}
const ::android::os::statsd::UploadThreshold&
DurationMetric::_Internal::threshold(const DurationMetric* msg) {
  return *msg->threshold_;
}
const ::android::os::statsd::FieldMatcher&
DurationMetric::_Internal::dimensions_in_condition(const DurationMetric* msg) {
  return *msg->dimensions_in_condition_;
}
DurationMetric::DurationMetric()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.DurationMetric)
}
DurationMetric::DurationMetric(const DurationMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      links_(from.links_),
      slice_by_state_(from.slice_by_state_),
      state_link_(from.state_link_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dimensions_in_what()) {
    dimensions_in_what_ = new ::android::os::statsd::FieldMatcher(*from.dimensions_in_what_);
  } else {
    dimensions_in_what_ = nullptr;
  }
  if (from.has_dimensions_in_condition()) {
    dimensions_in_condition_ = new ::android::os::statsd::FieldMatcher(*from.dimensions_in_condition_);
  } else {
    dimensions_in_condition_ = nullptr;
  }
  if (from.has_threshold()) {
    threshold_ = new ::android::os::statsd::UploadThreshold(*from.threshold_);
  } else {
    threshold_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&split_bucket_for_app_upgrade_) -
    reinterpret_cast<char*>(&id_)) + sizeof(split_bucket_for_app_upgrade_));
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.DurationMetric)
}

void DurationMetric::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DurationMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  ::memset(&dimensions_in_what_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bucket_) -
      reinterpret_cast<char*>(&dimensions_in_what_)) + sizeof(bucket_));
  aggregation_type_ = 1;
  split_bucket_for_app_upgrade_ = true;
}

DurationMetric::~DurationMetric() {
  // @@protoc_insertion_point(destructor:android.os.statsd.DurationMetric)
  SharedDtor();
}

void DurationMetric::SharedDtor() {
  if (this != internal_default_instance()) delete dimensions_in_what_;
  if (this != internal_default_instance()) delete dimensions_in_condition_;
  if (this != internal_default_instance()) delete threshold_;
}

void DurationMetric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DurationMetric& DurationMetric::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DurationMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void DurationMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.DurationMetric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  links_.Clear();
  slice_by_state_.Clear();
  state_link_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(dimensions_in_what_ != nullptr);
      dimensions_in_what_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dimensions_in_condition_ != nullptr);
      dimensions_in_condition_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(threshold_ != nullptr);
      threshold_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bucket_) -
        reinterpret_cast<char*>(&id_)) + sizeof(bucket_));
    aggregation_type_ = 1;
  }
  split_bucket_for_app_upgrade_ = true;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DurationMetric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 what = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_what(&has_bits);
          what_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 condition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_condition(&has_bits);
          condition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.statsd.MetricConditionLink links = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_links(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.DurationMetric.AggregationType aggregation_type = 5 [default = SUM];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::statsd::DurationMetric_AggregationType_IsValid(val))) {
            set_aggregation_type(static_cast<::android::os::statsd::DurationMetric_AggregationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.FieldMatcher dimensions_in_what = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_dimensions_in_what(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.TimeUnit bucket = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::statsd::TimeUnit_IsValid(val))) {
            set_bucket(static_cast<::android::os::statsd::TimeUnit>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.FieldMatcher dimensions_in_condition = 8 [deprecated = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_dimensions_in_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 slice_by_state = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_slice_by_state(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 72);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_slice_by_state(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.statsd.MetricStateLink state_link = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_state_link(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.UploadThreshold threshold = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_threshold(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool split_bucket_for_app_upgrade = 12 [default = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_split_bucket_for_app_upgrade(&has_bits);
          split_bucket_for_app_upgrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DurationMetric::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.DurationMetric)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 what = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_what(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &what_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 condition = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_condition(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &condition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.statsd.MetricConditionLink links = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_links()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.DurationMetric.AggregationType aggregation_type = 5 [default = SUM];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::statsd::DurationMetric_AggregationType_IsValid(value)) {
            set_aggregation_type(static_cast< ::android::os::statsd::DurationMetric_AggregationType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.FieldMatcher dimensions_in_what = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dimensions_in_what()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.TimeUnit bucket = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::statsd::TimeUnit_IsValid(value)) {
            set_bucket(static_cast< ::android::os::statsd::TimeUnit >(value));
          } else {
            unknown_fields_stream.WriteVarint32(56u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.FieldMatcher dimensions_in_condition = 8 [deprecated = true];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dimensions_in_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 slice_by_state = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 72u, input, this->mutable_slice_by_state())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_slice_by_state())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.statsd.MetricStateLink state_link = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_state_link()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.UploadThreshold threshold = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_threshold()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool split_bucket_for_app_upgrade = 12 [default = true];
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_split_bucket_for_app_upgrade(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &split_bucket_for_app_upgrade_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.DurationMetric)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.DurationMetric)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DurationMetric::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.DurationMetric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 what = 2;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->what(), output);
  }

  // optional int64 condition = 3;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->condition(), output);
  }

  // repeated .android.os.statsd.MetricConditionLink links = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->links_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4,
      this->links(static_cast<int>(i)),
      output);
  }

  // optional .android.os.statsd.DurationMetric.AggregationType aggregation_type = 5 [default = SUM];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->aggregation_type(), output);
  }

  // optional .android.os.statsd.FieldMatcher dimensions_in_what = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::dimensions_in_what(this), output);
  }

  // optional .android.os.statsd.TimeUnit bucket = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->bucket(), output);
  }

  // optional .android.os.statsd.FieldMatcher dimensions_in_condition = 8 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::dimensions_in_condition(this), output);
  }

  // repeated int64 slice_by_state = 9;
  for (int i = 0, n = this->slice_by_state_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(
      9, this->slice_by_state(i), output);
  }

  // repeated .android.os.statsd.MetricStateLink state_link = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->state_link_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10,
      this->state_link(static_cast<int>(i)),
      output);
  }

  // optional .android.os.statsd.UploadThreshold threshold = 11;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11, _Internal::threshold(this), output);
  }

  // optional bool split_bucket_for_app_upgrade = 12 [default = true];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(12, this->split_bucket_for_app_upgrade(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.DurationMetric)
}

size_t DurationMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.DurationMetric)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.os.statsd.MetricConditionLink links = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->links_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->links(static_cast<int>(i)));
    }
  }

  // repeated int64 slice_by_state = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->slice_by_state_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->slice_by_state_size());
    total_size += data_size;
  }

  // repeated .android.os.statsd.MetricStateLink state_link = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->state_link_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->state_link(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.os.statsd.FieldMatcher dimensions_in_what = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dimensions_in_what_);
    }

    // optional .android.os.statsd.FieldMatcher dimensions_in_condition = 8 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dimensions_in_condition_);
    }

    // optional .android.os.statsd.UploadThreshold threshold = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *threshold_);
    }

    // optional int64 id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 what = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->what());
    }

    // optional int64 condition = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->condition());
    }

    // optional .android.os.statsd.TimeUnit bucket = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->bucket());
    }

    // optional .android.os.statsd.DurationMetric.AggregationType aggregation_type = 5 [default = SUM];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->aggregation_type());
    }

  }
  // optional bool split_bucket_for_app_upgrade = 12 [default = true];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DurationMetric::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DurationMetric*>(
      &from));
}

void DurationMetric::MergeFrom(const DurationMetric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.DurationMetric)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  links_.MergeFrom(from.links_);
  slice_by_state_.MergeFrom(from.slice_by_state_);
  state_link_.MergeFrom(from.state_link_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_dimensions_in_what()->::android::os::statsd::FieldMatcher::MergeFrom(from.dimensions_in_what());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_dimensions_in_condition()->::android::os::statsd::FieldMatcher::MergeFrom(from.dimensions_in_condition());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_threshold()->::android::os::statsd::UploadThreshold::MergeFrom(from.threshold());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      what_ = from.what_;
    }
    if (cached_has_bits & 0x00000020u) {
      condition_ = from.condition_;
    }
    if (cached_has_bits & 0x00000040u) {
      bucket_ = from.bucket_;
    }
    if (cached_has_bits & 0x00000080u) {
      aggregation_type_ = from.aggregation_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_split_bucket_for_app_upgrade(from.split_bucket_for_app_upgrade());
  }
}

void DurationMetric::CopyFrom(const DurationMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.DurationMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DurationMetric::IsInitialized() const {
  return true;
}

void DurationMetric::InternalSwap(DurationMetric* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&links_)->InternalSwap(CastToBase(&other->links_));
  slice_by_state_.InternalSwap(&other->slice_by_state_);
  CastToBase(&state_link_)->InternalSwap(CastToBase(&other->state_link_));
  swap(dimensions_in_what_, other->dimensions_in_what_);
  swap(dimensions_in_condition_, other->dimensions_in_condition_);
  swap(threshold_, other->threshold_);
  swap(id_, other->id_);
  swap(what_, other->what_);
  swap(condition_, other->condition_);
  swap(bucket_, other->bucket_);
  swap(aggregation_type_, other->aggregation_type_);
  swap(split_bucket_for_app_upgrade_, other->split_bucket_for_app_upgrade_);
}

std::string DurationMetric::GetTypeName() const {
  return "android.os.statsd.DurationMetric";
}


// ===================================================================

void GaugeMetric::InitAsDefaultInstance() {
  ::android::os::statsd::_GaugeMetric_default_instance_._instance.get_mutable()->gauge_fields_filter_ = const_cast< ::android::os::statsd::FieldFilter*>(
      ::android::os::statsd::FieldFilter::internal_default_instance());
  ::android::os::statsd::_GaugeMetric_default_instance_._instance.get_mutable()->dimensions_in_what_ = const_cast< ::android::os::statsd::FieldMatcher*>(
      ::android::os::statsd::FieldMatcher::internal_default_instance());
  ::android::os::statsd::_GaugeMetric_default_instance_._instance.get_mutable()->dimensions_in_condition_ = const_cast< ::android::os::statsd::FieldMatcher*>(
      ::android::os::statsd::FieldMatcher::internal_default_instance());
}
class GaugeMetric::_Internal {
 public:
  using HasBits = decltype(std::declval<GaugeMetric>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_what(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_trigger_event(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::android::os::statsd::FieldFilter& gauge_fields_filter(const GaugeMetric* msg);
  static void set_has_gauge_fields_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::android::os::statsd::FieldMatcher& dimensions_in_what(const GaugeMetric* msg);
  static void set_has_dimensions_in_what(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::os::statsd::FieldMatcher& dimensions_in_condition(const GaugeMetric* msg);
  static void set_has_dimensions_in_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bucket(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_sampling_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_min_bucket_size_nanos(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_max_num_gauge_atoms_per_bucket(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_max_pull_delay_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_split_bucket_for_app_upgrade(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::android::os::statsd::FieldFilter&
GaugeMetric::_Internal::gauge_fields_filter(const GaugeMetric* msg) {
  return *msg->gauge_fields_filter_;
}
const ::android::os::statsd::FieldMatcher&
GaugeMetric::_Internal::dimensions_in_what(const GaugeMetric* msg) {
  return *msg->dimensions_in_what_;
}
const ::android::os::statsd::FieldMatcher&
GaugeMetric::_Internal::dimensions_in_condition(const GaugeMetric* msg) {
  return *msg->dimensions_in_condition_;
}
GaugeMetric::GaugeMetric()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.GaugeMetric)
}
GaugeMetric::GaugeMetric(const GaugeMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      links_(from.links_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_gauge_fields_filter()) {
    gauge_fields_filter_ = new ::android::os::statsd::FieldFilter(*from.gauge_fields_filter_);
  } else {
    gauge_fields_filter_ = nullptr;
  }
  if (from.has_dimensions_in_what()) {
    dimensions_in_what_ = new ::android::os::statsd::FieldMatcher(*from.dimensions_in_what_);
  } else {
    dimensions_in_what_ = nullptr;
  }
  if (from.has_dimensions_in_condition()) {
    dimensions_in_condition_ = new ::android::os::statsd::FieldMatcher(*from.dimensions_in_condition_);
  } else {
    dimensions_in_condition_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_pull_delay_sec_) -
    reinterpret_cast<char*>(&id_)) + sizeof(max_pull_delay_sec_));
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.GaugeMetric)
}

void GaugeMetric::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GaugeMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  ::memset(&gauge_fields_filter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bucket_) -
      reinterpret_cast<char*>(&gauge_fields_filter_)) + sizeof(bucket_));
  split_bucket_for_app_upgrade_ = true;
  max_num_gauge_atoms_per_bucket_ = PROTOBUF_LONGLONG(10);
  sampling_type_ = 1;
  max_pull_delay_sec_ = 30;
}

GaugeMetric::~GaugeMetric() {
  // @@protoc_insertion_point(destructor:android.os.statsd.GaugeMetric)
  SharedDtor();
}

void GaugeMetric::SharedDtor() {
  if (this != internal_default_instance()) delete gauge_fields_filter_;
  if (this != internal_default_instance()) delete dimensions_in_what_;
  if (this != internal_default_instance()) delete dimensions_in_condition_;
}

void GaugeMetric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GaugeMetric& GaugeMetric::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GaugeMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void GaugeMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.GaugeMetric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  links_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(gauge_fields_filter_ != nullptr);
      gauge_fields_filter_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dimensions_in_what_ != nullptr);
      dimensions_in_what_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(dimensions_in_condition_ != nullptr);
      dimensions_in_condition_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trigger_event_) -
        reinterpret_cast<char*>(&id_)) + sizeof(trigger_event_));
  }
  if (cached_has_bits & 0x00001f00u) {
    bucket_ = 0;
    split_bucket_for_app_upgrade_ = true;
    max_num_gauge_atoms_per_bucket_ = PROTOBUF_LONGLONG(10);
    sampling_type_ = 1;
    max_pull_delay_sec_ = 30;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GaugeMetric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 what = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_what(&has_bits);
          what_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.FieldFilter gauge_fields_filter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_gauge_fields_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 condition = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_condition(&has_bits);
          condition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.FieldMatcher dimensions_in_what = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_dimensions_in_what(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.TimeUnit bucket = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::statsd::TimeUnit_IsValid(val))) {
            set_bucket(static_cast<::android::os::statsd::TimeUnit>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .android.os.statsd.MetricConditionLink links = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_links(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.FieldMatcher dimensions_in_condition = 8 [deprecated = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_dimensions_in_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.GaugeMetric.SamplingType sampling_type = 9 [default = RANDOM_ONE_SAMPLE];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::statsd::GaugeMetric_SamplingType_IsValid(val))) {
            set_sampling_type(static_cast<::android::os::statsd::GaugeMetric_SamplingType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 min_bucket_size_nanos = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_min_bucket_size_nanos(&has_bits);
          min_bucket_size_nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 max_num_gauge_atoms_per_bucket = 11 [default = 10];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_max_num_gauge_atoms_per_bucket(&has_bits);
          max_num_gauge_atoms_per_bucket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 trigger_event = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_trigger_event(&has_bits);
          trigger_event_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_pull_delay_sec = 13 [default = 30];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_max_pull_delay_sec(&has_bits);
          max_pull_delay_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool split_bucket_for_app_upgrade = 14 [default = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_split_bucket_for_app_upgrade(&has_bits);
          split_bucket_for_app_upgrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GaugeMetric::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.GaugeMetric)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 what = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_what(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &what_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.FieldFilter gauge_fields_filter = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gauge_fields_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 condition = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_condition(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &condition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.FieldMatcher dimensions_in_what = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dimensions_in_what()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.TimeUnit bucket = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::statsd::TimeUnit_IsValid(value)) {
            set_bucket(static_cast< ::android::os::statsd::TimeUnit >(value));
          } else {
            unknown_fields_stream.WriteVarint32(48u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.statsd.MetricConditionLink links = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_links()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.FieldMatcher dimensions_in_condition = 8 [deprecated = true];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dimensions_in_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.GaugeMetric.SamplingType sampling_type = 9 [default = RANDOM_ONE_SAMPLE];
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::statsd::GaugeMetric_SamplingType_IsValid(value)) {
            set_sampling_type(static_cast< ::android::os::statsd::GaugeMetric_SamplingType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(72u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 min_bucket_size_nanos = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_min_bucket_size_nanos(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_bucket_size_nanos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 max_num_gauge_atoms_per_bucket = 11 [default = 10];
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_max_num_gauge_atoms_per_bucket(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_num_gauge_atoms_per_bucket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 trigger_event = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_trigger_event(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &trigger_event_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_pull_delay_sec = 13 [default = 30];
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_max_pull_delay_sec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_pull_delay_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool split_bucket_for_app_upgrade = 14 [default = true];
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_split_bucket_for_app_upgrade(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &split_bucket_for_app_upgrade_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.GaugeMetric)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.GaugeMetric)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GaugeMetric::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.GaugeMetric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 what = 2;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->what(), output);
  }

  // optional .android.os.statsd.FieldFilter gauge_fields_filter = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::gauge_fields_filter(this), output);
  }

  // optional int64 condition = 4;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->condition(), output);
  }

  // optional .android.os.statsd.FieldMatcher dimensions_in_what = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::dimensions_in_what(this), output);
  }

  // optional .android.os.statsd.TimeUnit bucket = 6;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->bucket(), output);
  }

  // repeated .android.os.statsd.MetricConditionLink links = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->links_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7,
      this->links(static_cast<int>(i)),
      output);
  }

  // optional .android.os.statsd.FieldMatcher dimensions_in_condition = 8 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::dimensions_in_condition(this), output);
  }

  // optional .android.os.statsd.GaugeMetric.SamplingType sampling_type = 9 [default = RANDOM_ONE_SAMPLE];
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      9, this->sampling_type(), output);
  }

  // optional int64 min_bucket_size_nanos = 10;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(10, this->min_bucket_size_nanos(), output);
  }

  // optional int64 max_num_gauge_atoms_per_bucket = 11 [default = 10];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(11, this->max_num_gauge_atoms_per_bucket(), output);
  }

  // optional int64 trigger_event = 12;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(12, this->trigger_event(), output);
  }

  // optional int32 max_pull_delay_sec = 13 [default = 30];
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->max_pull_delay_sec(), output);
  }

  // optional bool split_bucket_for_app_upgrade = 14 [default = true];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(14, this->split_bucket_for_app_upgrade(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.GaugeMetric)
}

size_t GaugeMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.GaugeMetric)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.os.statsd.MetricConditionLink links = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->links_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->links(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.os.statsd.FieldFilter gauge_fields_filter = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gauge_fields_filter_);
    }

    // optional .android.os.statsd.FieldMatcher dimensions_in_what = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dimensions_in_what_);
    }

    // optional .android.os.statsd.FieldMatcher dimensions_in_condition = 8 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dimensions_in_condition_);
    }

    // optional int64 id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 what = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->what());
    }

    // optional int64 condition = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->condition());
    }

    // optional int64 min_bucket_size_nanos = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->min_bucket_size_nanos());
    }

    // optional int64 trigger_event = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->trigger_event());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional .android.os.statsd.TimeUnit bucket = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->bucket());
    }

    // optional bool split_bucket_for_app_upgrade = 14 [default = true];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional int64 max_num_gauge_atoms_per_bucket = 11 [default = 10];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->max_num_gauge_atoms_per_bucket());
    }

    // optional .android.os.statsd.GaugeMetric.SamplingType sampling_type = 9 [default = RANDOM_ONE_SAMPLE];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->sampling_type());
    }

    // optional int32 max_pull_delay_sec = 13 [default = 30];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_pull_delay_sec());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GaugeMetric::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GaugeMetric*>(
      &from));
}

void GaugeMetric::MergeFrom(const GaugeMetric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.GaugeMetric)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  links_.MergeFrom(from.links_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_gauge_fields_filter()->::android::os::statsd::FieldFilter::MergeFrom(from.gauge_fields_filter());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_dimensions_in_what()->::android::os::statsd::FieldMatcher::MergeFrom(from.dimensions_in_what());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_dimensions_in_condition()->::android::os::statsd::FieldMatcher::MergeFrom(from.dimensions_in_condition());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      what_ = from.what_;
    }
    if (cached_has_bits & 0x00000020u) {
      condition_ = from.condition_;
    }
    if (cached_has_bits & 0x00000040u) {
      min_bucket_size_nanos_ = from.min_bucket_size_nanos_;
    }
    if (cached_has_bits & 0x00000080u) {
      trigger_event_ = from.trigger_event_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      bucket_ = from.bucket_;
    }
    if (cached_has_bits & 0x00000200u) {
      split_bucket_for_app_upgrade_ = from.split_bucket_for_app_upgrade_;
    }
    if (cached_has_bits & 0x00000400u) {
      max_num_gauge_atoms_per_bucket_ = from.max_num_gauge_atoms_per_bucket_;
    }
    if (cached_has_bits & 0x00000800u) {
      sampling_type_ = from.sampling_type_;
    }
    if (cached_has_bits & 0x00001000u) {
      max_pull_delay_sec_ = from.max_pull_delay_sec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GaugeMetric::CopyFrom(const GaugeMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.GaugeMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GaugeMetric::IsInitialized() const {
  return true;
}

void GaugeMetric::InternalSwap(GaugeMetric* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&links_)->InternalSwap(CastToBase(&other->links_));
  swap(gauge_fields_filter_, other->gauge_fields_filter_);
  swap(dimensions_in_what_, other->dimensions_in_what_);
  swap(dimensions_in_condition_, other->dimensions_in_condition_);
  swap(id_, other->id_);
  swap(what_, other->what_);
  swap(condition_, other->condition_);
  swap(min_bucket_size_nanos_, other->min_bucket_size_nanos_);
  swap(trigger_event_, other->trigger_event_);
  swap(bucket_, other->bucket_);
  swap(split_bucket_for_app_upgrade_, other->split_bucket_for_app_upgrade_);
  swap(max_num_gauge_atoms_per_bucket_, other->max_num_gauge_atoms_per_bucket_);
  swap(sampling_type_, other->sampling_type_);
  swap(max_pull_delay_sec_, other->max_pull_delay_sec_);
}

std::string GaugeMetric::GetTypeName() const {
  return "android.os.statsd.GaugeMetric";
}


// ===================================================================

void ValueMetric::InitAsDefaultInstance() {
  ::android::os::statsd::_ValueMetric_default_instance_._instance.get_mutable()->value_field_ = const_cast< ::android::os::statsd::FieldMatcher*>(
      ::android::os::statsd::FieldMatcher::internal_default_instance());
  ::android::os::statsd::_ValueMetric_default_instance_._instance.get_mutable()->dimensions_in_what_ = const_cast< ::android::os::statsd::FieldMatcher*>(
      ::android::os::statsd::FieldMatcher::internal_default_instance());
  ::android::os::statsd::_ValueMetric_default_instance_._instance.get_mutable()->threshold_ = const_cast< ::android::os::statsd::UploadThreshold*>(
      ::android::os::statsd::UploadThreshold::internal_default_instance());
  ::android::os::statsd::_ValueMetric_default_instance_._instance.get_mutable()->dimensions_in_condition_ = const_cast< ::android::os::statsd::FieldMatcher*>(
      ::android::os::statsd::FieldMatcher::internal_default_instance());
}
class ValueMetric::_Internal {
 public:
  using HasBits = decltype(std::declval<ValueMetric>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_what(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::android::os::statsd::FieldMatcher& value_field(const ValueMetric* msg);
  static void set_has_value_field(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::android::os::statsd::FieldMatcher& dimensions_in_what(const ValueMetric* msg);
  static void set_has_dimensions_in_what(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bucket(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::android::os::statsd::UploadThreshold& threshold(const ValueMetric* msg);
  static void set_has_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_aggregation_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_min_bucket_size_nanos(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_use_absolute_value_on_reset(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_use_diff(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_use_zero_default_base(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_value_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_skip_zero_diff_output(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_max_pull_delay_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_split_bucket_for_app_upgrade(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::android::os::statsd::FieldMatcher& dimensions_in_condition(const ValueMetric* msg);
  static void set_has_dimensions_in_condition(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::android::os::statsd::FieldMatcher&
ValueMetric::_Internal::value_field(const ValueMetric* msg) {
  return *msg->value_field_;
}
const ::android::os::statsd::FieldMatcher&
ValueMetric::_Internal::dimensions_in_what(const ValueMetric* msg) {
  return *msg->dimensions_in_what_;
}
const ::android::os::statsd::UploadThreshold&
ValueMetric::_Internal::threshold(const ValueMetric* msg) {
  return *msg->threshold_;
}
const ::android::os::statsd::FieldMatcher&
ValueMetric::_Internal::dimensions_in_condition(const ValueMetric* msg) {
  return *msg->dimensions_in_condition_;
}
ValueMetric::ValueMetric()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.ValueMetric)
}
ValueMetric::ValueMetric(const ValueMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      links_(from.links_),
      slice_by_state_(from.slice_by_state_),
      state_link_(from.state_link_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_value_field()) {
    value_field_ = new ::android::os::statsd::FieldMatcher(*from.value_field_);
  } else {
    value_field_ = nullptr;
  }
  if (from.has_dimensions_in_what()) {
    dimensions_in_what_ = new ::android::os::statsd::FieldMatcher(*from.dimensions_in_what_);
  } else {
    dimensions_in_what_ = nullptr;
  }
  if (from.has_dimensions_in_condition()) {
    dimensions_in_condition_ = new ::android::os::statsd::FieldMatcher(*from.dimensions_in_condition_);
  } else {
    dimensions_in_condition_ = nullptr;
  }
  if (from.has_threshold()) {
    threshold_ = new ::android::os::statsd::UploadThreshold(*from.threshold_);
  } else {
    threshold_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_pull_delay_sec_) -
    reinterpret_cast<char*>(&id_)) + sizeof(max_pull_delay_sec_));
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.ValueMetric)
}

void ValueMetric::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ValueMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  ::memset(&value_field_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_zero_default_base_) -
      reinterpret_cast<char*>(&value_field_)) + sizeof(use_zero_default_base_));
  aggregation_type_ = 1;
  value_direction_ = 1;
  skip_zero_diff_output_ = true;
  split_bucket_for_app_upgrade_ = true;
  max_pull_delay_sec_ = 30;
}

ValueMetric::~ValueMetric() {
  // @@protoc_insertion_point(destructor:android.os.statsd.ValueMetric)
  SharedDtor();
}

void ValueMetric::SharedDtor() {
  if (this != internal_default_instance()) delete value_field_;
  if (this != internal_default_instance()) delete dimensions_in_what_;
  if (this != internal_default_instance()) delete dimensions_in_condition_;
  if (this != internal_default_instance()) delete threshold_;
}

void ValueMetric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValueMetric& ValueMetric::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValueMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ValueMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.ValueMetric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  links_.Clear();
  slice_by_state_.Clear();
  state_link_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(value_field_ != nullptr);
      value_field_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dimensions_in_what_ != nullptr);
      dimensions_in_what_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(dimensions_in_condition_ != nullptr);
      dimensions_in_condition_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(threshold_ != nullptr);
      threshold_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_bucket_size_nanos_) -
        reinterpret_cast<char*>(&id_)) + sizeof(min_bucket_size_nanos_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&bucket_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_zero_default_base_) -
        reinterpret_cast<char*>(&bucket_)) + sizeof(use_zero_default_base_));
    aggregation_type_ = 1;
    value_direction_ = 1;
    skip_zero_diff_output_ = true;
    split_bucket_for_app_upgrade_ = true;
  }
  max_pull_delay_sec_ = 30;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ValueMetric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 what = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_what(&has_bits);
          what_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.FieldMatcher value_field = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_value_field(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 condition = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_condition(&has_bits);
          condition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.FieldMatcher dimensions_in_what = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_dimensions_in_what(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.TimeUnit bucket = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::statsd::TimeUnit_IsValid(val))) {
            set_bucket(static_cast<::android::os::statsd::TimeUnit>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .android.os.statsd.MetricConditionLink links = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_links(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.ValueMetric.AggregationType aggregation_type = 8 [default = SUM];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::statsd::ValueMetric_AggregationType_IsValid(val))) {
            set_aggregation_type(static_cast<::android::os::statsd::ValueMetric_AggregationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.FieldMatcher dimensions_in_condition = 9 [deprecated = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_dimensions_in_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 min_bucket_size_nanos = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_min_bucket_size_nanos(&has_bits);
          min_bucket_size_nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_absolute_value_on_reset = 11 [default = false];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_use_absolute_value_on_reset(&has_bits);
          use_absolute_value_on_reset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_diff = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_use_diff(&has_bits);
          use_diff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.ValueMetric.ValueDirection value_direction = 13 [default = INCREASING];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::statsd::ValueMetric_ValueDirection_IsValid(val))) {
            set_value_direction(static_cast<::android::os::statsd::ValueMetric_ValueDirection>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool skip_zero_diff_output = 14 [default = true];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_skip_zero_diff_output(&has_bits);
          skip_zero_diff_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_zero_default_base = 15 [default = false];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_use_zero_default_base(&has_bits);
          use_zero_default_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_pull_delay_sec = 16 [default = 30];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_max_pull_delay_sec(&has_bits);
          max_pull_delay_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool split_bucket_for_app_upgrade = 17 [default = true];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_split_bucket_for_app_upgrade(&has_bits);
          split_bucket_for_app_upgrade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 slice_by_state = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ptr -= 2;
          do {
            ptr += 2;
            add_slice_by_state(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 400);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_slice_by_state(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.statsd.MetricStateLink state_link = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_state_link(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 410);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.UploadThreshold threshold = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_threshold(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ValueMetric::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.ValueMetric)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 what = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_what(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &what_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.FieldMatcher value_field = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_value_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 condition = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_condition(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &condition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.FieldMatcher dimensions_in_what = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dimensions_in_what()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.TimeUnit bucket = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::statsd::TimeUnit_IsValid(value)) {
            set_bucket(static_cast< ::android::os::statsd::TimeUnit >(value));
          } else {
            unknown_fields_stream.WriteVarint32(48u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.statsd.MetricConditionLink links = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_links()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.ValueMetric.AggregationType aggregation_type = 8 [default = SUM];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::statsd::ValueMetric_AggregationType_IsValid(value)) {
            set_aggregation_type(static_cast< ::android::os::statsd::ValueMetric_AggregationType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(64u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.FieldMatcher dimensions_in_condition = 9 [deprecated = true];
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dimensions_in_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 min_bucket_size_nanos = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_min_bucket_size_nanos(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_bucket_size_nanos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_absolute_value_on_reset = 11 [default = false];
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_use_absolute_value_on_reset(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_absolute_value_on_reset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_diff = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_use_diff(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_diff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.ValueMetric.ValueDirection value_direction = 13 [default = INCREASING];
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::statsd::ValueMetric_ValueDirection_IsValid(value)) {
            set_value_direction(static_cast< ::android::os::statsd::ValueMetric_ValueDirection >(value));
          } else {
            unknown_fields_stream.WriteVarint32(104u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool skip_zero_diff_output = 14 [default = true];
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_skip_zero_diff_output(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_zero_diff_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_zero_default_base = 15 [default = false];
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_use_zero_default_base(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_zero_default_base_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_pull_delay_sec = 16 [default = 30];
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_max_pull_delay_sec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_pull_delay_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool split_bucket_for_app_upgrade = 17 [default = true];
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_split_bucket_for_app_upgrade(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &split_bucket_for_app_upgrade_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 slice_by_state = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 2, 144u, input, this->mutable_slice_by_state())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_slice_by_state())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.statsd.MetricStateLink state_link = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_state_link()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.UploadThreshold threshold = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_threshold()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.ValueMetric)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.ValueMetric)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ValueMetric::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.ValueMetric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 what = 2;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->what(), output);
  }

  // optional .android.os.statsd.FieldMatcher value_field = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::value_field(this), output);
  }

  // optional int64 condition = 4;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->condition(), output);
  }

  // optional .android.os.statsd.FieldMatcher dimensions_in_what = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::dimensions_in_what(this), output);
  }

  // optional .android.os.statsd.TimeUnit bucket = 6;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->bucket(), output);
  }

  // repeated .android.os.statsd.MetricConditionLink links = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->links_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7,
      this->links(static_cast<int>(i)),
      output);
  }

  // optional .android.os.statsd.ValueMetric.AggregationType aggregation_type = 8 [default = SUM];
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      8, this->aggregation_type(), output);
  }

  // optional .android.os.statsd.FieldMatcher dimensions_in_condition = 9 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9, _Internal::dimensions_in_condition(this), output);
  }

  // optional int64 min_bucket_size_nanos = 10;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(10, this->min_bucket_size_nanos(), output);
  }

  // optional bool use_absolute_value_on_reset = 11 [default = false];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(11, this->use_absolute_value_on_reset(), output);
  }

  // optional bool use_diff = 12;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(12, this->use_diff(), output);
  }

  // optional .android.os.statsd.ValueMetric.ValueDirection value_direction = 13 [default = INCREASING];
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      13, this->value_direction(), output);
  }

  // optional bool skip_zero_diff_output = 14 [default = true];
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(14, this->skip_zero_diff_output(), output);
  }

  // optional bool use_zero_default_base = 15 [default = false];
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(15, this->use_zero_default_base(), output);
  }

  // optional int32 max_pull_delay_sec = 16 [default = 30];
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(16, this->max_pull_delay_sec(), output);
  }

  // optional bool split_bucket_for_app_upgrade = 17 [default = true];
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(17, this->split_bucket_for_app_upgrade(), output);
  }

  // repeated int64 slice_by_state = 18;
  for (int i = 0, n = this->slice_by_state_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(
      18, this->slice_by_state(i), output);
  }

  // repeated .android.os.statsd.MetricStateLink state_link = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->state_link_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      19,
      this->state_link(static_cast<int>(i)),
      output);
  }

  // optional .android.os.statsd.UploadThreshold threshold = 20;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      20, _Internal::threshold(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.ValueMetric)
}

size_t ValueMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.ValueMetric)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.os.statsd.MetricConditionLink links = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->links_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->links(static_cast<int>(i)));
    }
  }

  // repeated int64 slice_by_state = 18;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->slice_by_state_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->slice_by_state_size());
    total_size += data_size;
  }

  // repeated .android.os.statsd.MetricStateLink state_link = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->state_link_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->state_link(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.os.statsd.FieldMatcher value_field = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_field_);
    }

    // optional .android.os.statsd.FieldMatcher dimensions_in_what = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dimensions_in_what_);
    }

    // optional .android.os.statsd.FieldMatcher dimensions_in_condition = 9 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dimensions_in_condition_);
    }

    // optional .android.os.statsd.UploadThreshold threshold = 20;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *threshold_);
    }

    // optional int64 id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 what = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->what());
    }

    // optional int64 condition = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->condition());
    }

    // optional int64 min_bucket_size_nanos = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->min_bucket_size_nanos());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .android.os.statsd.TimeUnit bucket = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->bucket());
    }

    // optional bool use_absolute_value_on_reset = 11 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool use_diff = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool use_zero_default_base = 15 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional .android.os.statsd.ValueMetric.AggregationType aggregation_type = 8 [default = SUM];
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->aggregation_type());
    }

    // optional .android.os.statsd.ValueMetric.ValueDirection value_direction = 13 [default = INCREASING];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->value_direction());
    }

    // optional bool skip_zero_diff_output = 14 [default = true];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool split_bucket_for_app_upgrade = 17 [default = true];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  // optional int32 max_pull_delay_sec = 16 [default = 30];
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->max_pull_delay_sec());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValueMetric::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ValueMetric*>(
      &from));
}

void ValueMetric::MergeFrom(const ValueMetric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.ValueMetric)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  links_.MergeFrom(from.links_);
  slice_by_state_.MergeFrom(from.slice_by_state_);
  state_link_.MergeFrom(from.state_link_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_value_field()->::android::os::statsd::FieldMatcher::MergeFrom(from.value_field());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_dimensions_in_what()->::android::os::statsd::FieldMatcher::MergeFrom(from.dimensions_in_what());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_dimensions_in_condition()->::android::os::statsd::FieldMatcher::MergeFrom(from.dimensions_in_condition());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_threshold()->::android::os::statsd::UploadThreshold::MergeFrom(from.threshold());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      what_ = from.what_;
    }
    if (cached_has_bits & 0x00000040u) {
      condition_ = from.condition_;
    }
    if (cached_has_bits & 0x00000080u) {
      min_bucket_size_nanos_ = from.min_bucket_size_nanos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      bucket_ = from.bucket_;
    }
    if (cached_has_bits & 0x00000200u) {
      use_absolute_value_on_reset_ = from.use_absolute_value_on_reset_;
    }
    if (cached_has_bits & 0x00000400u) {
      use_diff_ = from.use_diff_;
    }
    if (cached_has_bits & 0x00000800u) {
      use_zero_default_base_ = from.use_zero_default_base_;
    }
    if (cached_has_bits & 0x00001000u) {
      aggregation_type_ = from.aggregation_type_;
    }
    if (cached_has_bits & 0x00002000u) {
      value_direction_ = from.value_direction_;
    }
    if (cached_has_bits & 0x00004000u) {
      skip_zero_diff_output_ = from.skip_zero_diff_output_;
    }
    if (cached_has_bits & 0x00008000u) {
      split_bucket_for_app_upgrade_ = from.split_bucket_for_app_upgrade_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_max_pull_delay_sec(from.max_pull_delay_sec());
  }
}

void ValueMetric::CopyFrom(const ValueMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.ValueMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueMetric::IsInitialized() const {
  return true;
}

void ValueMetric::InternalSwap(ValueMetric* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&links_)->InternalSwap(CastToBase(&other->links_));
  slice_by_state_.InternalSwap(&other->slice_by_state_);
  CastToBase(&state_link_)->InternalSwap(CastToBase(&other->state_link_));
  swap(value_field_, other->value_field_);
  swap(dimensions_in_what_, other->dimensions_in_what_);
  swap(dimensions_in_condition_, other->dimensions_in_condition_);
  swap(threshold_, other->threshold_);
  swap(id_, other->id_);
  swap(what_, other->what_);
  swap(condition_, other->condition_);
  swap(min_bucket_size_nanos_, other->min_bucket_size_nanos_);
  swap(bucket_, other->bucket_);
  swap(use_absolute_value_on_reset_, other->use_absolute_value_on_reset_);
  swap(use_diff_, other->use_diff_);
  swap(use_zero_default_base_, other->use_zero_default_base_);
  swap(aggregation_type_, other->aggregation_type_);
  swap(value_direction_, other->value_direction_);
  swap(skip_zero_diff_output_, other->skip_zero_diff_output_);
  swap(split_bucket_for_app_upgrade_, other->split_bucket_for_app_upgrade_);
  swap(max_pull_delay_sec_, other->max_pull_delay_sec_);
}

std::string ValueMetric::GetTypeName() const {
  return "android.os.statsd.ValueMetric";
}


// ===================================================================

void Alert::InitAsDefaultInstance() {
}
class Alert::_Internal {
 public:
  using HasBits = decltype(std::declval<Alert>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_metric_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_buckets(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_refractory_period_secs(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_trigger_if_sum_gt(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Alert::Alert()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.Alert)
}
Alert::Alert(const Alert& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&trigger_if_sum_gt_) -
    reinterpret_cast<char*>(&id_)) + sizeof(trigger_if_sum_gt_));
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.Alert)
}

void Alert::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trigger_if_sum_gt_) -
      reinterpret_cast<char*>(&id_)) + sizeof(trigger_if_sum_gt_));
}

Alert::~Alert() {
  // @@protoc_insertion_point(destructor:android.os.statsd.Alert)
  SharedDtor();
}

void Alert::SharedDtor() {
}

void Alert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Alert& Alert::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Alert_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void Alert::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.Alert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trigger_if_sum_gt_) -
        reinterpret_cast<char*>(&id_)) + sizeof(trigger_if_sum_gt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Alert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 metric_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_metric_id(&has_bits);
          metric_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_buckets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_buckets(&has_bits);
          num_buckets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 refractory_period_secs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_refractory_period_secs(&has_bits);
          refractory_period_secs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double trigger_if_sum_gt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_trigger_if_sum_gt(&has_bits);
          trigger_if_sum_gt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Alert::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.Alert)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 metric_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_metric_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &metric_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_buckets = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_num_buckets(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_buckets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 refractory_period_secs = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_refractory_period_secs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &refractory_period_secs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double trigger_if_sum_gt = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {
          _Internal::set_has_trigger_if_sum_gt(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trigger_if_sum_gt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.Alert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.Alert)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Alert::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.Alert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 metric_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->metric_id(), output);
  }

  // optional int32 num_buckets = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->num_buckets(), output);
  }

  // optional int32 refractory_period_secs = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->refractory_period_secs(), output);
  }

  // optional double trigger_if_sum_gt = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->trigger_if_sum_gt(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.Alert)
}

size_t Alert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.Alert)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int64 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 metric_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->metric_id());
    }

    // optional int32 num_buckets = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_buckets());
    }

    // optional int32 refractory_period_secs = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->refractory_period_secs());
    }

    // optional double trigger_if_sum_gt = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Alert::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Alert*>(
      &from));
}

void Alert::MergeFrom(const Alert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.Alert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      metric_id_ = from.metric_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_buckets_ = from.num_buckets_;
    }
    if (cached_has_bits & 0x00000008u) {
      refractory_period_secs_ = from.refractory_period_secs_;
    }
    if (cached_has_bits & 0x00000010u) {
      trigger_if_sum_gt_ = from.trigger_if_sum_gt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Alert::CopyFrom(const Alert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.Alert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Alert::IsInitialized() const {
  return true;
}

void Alert::InternalSwap(Alert* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(metric_id_, other->metric_id_);
  swap(num_buckets_, other->num_buckets_);
  swap(refractory_period_secs_, other->refractory_period_secs_);
  swap(trigger_if_sum_gt_, other->trigger_if_sum_gt_);
}

std::string Alert::GetTypeName() const {
  return "android.os.statsd.Alert";
}


// ===================================================================

void Alarm::InitAsDefaultInstance() {
}
class Alarm::_Internal {
 public:
  using HasBits = decltype(std::declval<Alarm>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_offset_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_period_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Alarm::Alarm()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.Alarm)
}
Alarm::Alarm(const Alarm& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&period_millis_) -
    reinterpret_cast<char*>(&id_)) + sizeof(period_millis_));
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.Alarm)
}

void Alarm::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&period_millis_) -
      reinterpret_cast<char*>(&id_)) + sizeof(period_millis_));
}

Alarm::~Alarm() {
  // @@protoc_insertion_point(destructor:android.os.statsd.Alarm)
  SharedDtor();
}

void Alarm::SharedDtor() {
}

void Alarm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Alarm& Alarm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Alarm_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void Alarm::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.Alarm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&period_millis_) -
        reinterpret_cast<char*>(&id_)) + sizeof(period_millis_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Alarm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 offset_millis = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_offset_millis(&has_bits);
          offset_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 period_millis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_period_millis(&has_bits);
          period_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Alarm::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.Alarm)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 offset_millis = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_offset_millis(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_millis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 period_millis = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_period_millis(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &period_millis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.Alarm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.Alarm)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Alarm::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.Alarm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 offset_millis = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->offset_millis(), output);
  }

  // optional int64 period_millis = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->period_millis(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.Alarm)
}

size_t Alarm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.Alarm)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 offset_millis = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->offset_millis());
    }

    // optional int64 period_millis = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->period_millis());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Alarm::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Alarm*>(
      &from));
}

void Alarm::MergeFrom(const Alarm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.Alarm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      offset_millis_ = from.offset_millis_;
    }
    if (cached_has_bits & 0x00000004u) {
      period_millis_ = from.period_millis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Alarm::CopyFrom(const Alarm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.Alarm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Alarm::IsInitialized() const {
  return true;
}

void Alarm::InternalSwap(Alarm* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(offset_millis_, other->offset_millis_);
  swap(period_millis_, other->period_millis_);
}

std::string Alarm::GetTypeName() const {
  return "android.os.statsd.Alarm";
}


// ===================================================================

void IncidentdDetails::InitAsDefaultInstance() {
}
class IncidentdDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<IncidentdDetails>()._has_bits_);
  static void set_has_dest(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_receiver_pkg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_receiver_cls(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_alert_description(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

IncidentdDetails::IncidentdDetails()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.IncidentdDetails)
}
IncidentdDetails::IncidentdDetails(const IncidentdDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      section_(from.section_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  receiver_pkg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_receiver_pkg()) {
    receiver_pkg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.receiver_pkg_);
  }
  receiver_cls_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_receiver_cls()) {
    receiver_cls_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.receiver_cls_);
  }
  alert_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_alert_description()) {
    alert_description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.alert_description_);
  }
  dest_ = from.dest_;
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.IncidentdDetails)
}

void IncidentdDetails::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IncidentdDetails_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  receiver_pkg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_cls_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alert_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dest_ = 0;
}

IncidentdDetails::~IncidentdDetails() {
  // @@protoc_insertion_point(destructor:android.os.statsd.IncidentdDetails)
  SharedDtor();
}

void IncidentdDetails::SharedDtor() {
  receiver_pkg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  receiver_cls_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alert_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IncidentdDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IncidentdDetails& IncidentdDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IncidentdDetails_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void IncidentdDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.IncidentdDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  section_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      receiver_pkg_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      receiver_cls_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      alert_description_.ClearNonDefaultToEmptyNoArena();
    }
  }
  dest_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IncidentdDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 section = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_section(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 8);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_section(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.IncidentdDetails.Destination dest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::statsd::IncidentdDetails_Destination_IsValid(val))) {
            set_dest(static_cast<::android::os::statsd::IncidentdDetails_Destination>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string receiver_pkg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_receiver_pkg(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string receiver_cls = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_receiver_cls(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string alert_description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_alert_description(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IncidentdDetails::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.IncidentdDetails)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 section = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_section())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_section())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.IncidentdDetails.Destination dest = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::statsd::IncidentdDetails_Destination_IsValid(value)) {
            set_dest(static_cast< ::android::os::statsd::IncidentdDetails_Destination >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string receiver_pkg = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_receiver_pkg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string receiver_cls = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_receiver_cls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string alert_description = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_alert_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.IncidentdDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.IncidentdDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IncidentdDetails::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.IncidentdDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 section = 1;
  for (int i = 0, n = this->section_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      1, this->section(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .android.os.statsd.IncidentdDetails.Destination dest = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->dest(), output);
  }

  // optional string receiver_pkg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->receiver_pkg(), output);
  }

  // optional string receiver_cls = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->receiver_cls(), output);
  }

  // optional string alert_description = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->alert_description(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.IncidentdDetails)
}

size_t IncidentdDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.IncidentdDetails)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 section = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->section_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->section_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string receiver_pkg = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->receiver_pkg());
    }

    // optional string receiver_cls = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->receiver_cls());
    }

    // optional string alert_description = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->alert_description());
    }

    // optional .android.os.statsd.IncidentdDetails.Destination dest = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->dest());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IncidentdDetails::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IncidentdDetails*>(
      &from));
}

void IncidentdDetails::MergeFrom(const IncidentdDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.IncidentdDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  section_.MergeFrom(from.section_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      receiver_pkg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.receiver_pkg_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      receiver_cls_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.receiver_cls_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      alert_description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.alert_description_);
    }
    if (cached_has_bits & 0x00000008u) {
      dest_ = from.dest_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IncidentdDetails::CopyFrom(const IncidentdDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.IncidentdDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncidentdDetails::IsInitialized() const {
  return true;
}

void IncidentdDetails::InternalSwap(IncidentdDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  section_.InternalSwap(&other->section_);
  receiver_pkg_.Swap(&other->receiver_pkg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  receiver_cls_.Swap(&other->receiver_cls_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  alert_description_.Swap(&other->alert_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dest_, other->dest_);
}

std::string IncidentdDetails::GetTypeName() const {
  return "android.os.statsd.IncidentdDetails";
}


// ===================================================================

void PerfettoDetails::InitAsDefaultInstance() {
}
class PerfettoDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<PerfettoDetails>()._has_bits_);
  static void set_has_trace_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PerfettoDetails::PerfettoDetails()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.PerfettoDetails)
}
PerfettoDetails::PerfettoDetails(const PerfettoDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trace_config_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_trace_config()) {
    trace_config_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trace_config_);
  }
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.PerfettoDetails)
}

void PerfettoDetails::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PerfettoDetails_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  trace_config_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PerfettoDetails::~PerfettoDetails() {
  // @@protoc_insertion_point(destructor:android.os.statsd.PerfettoDetails)
  SharedDtor();
}

void PerfettoDetails::SharedDtor() {
  trace_config_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PerfettoDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerfettoDetails& PerfettoDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerfettoDetails_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PerfettoDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.PerfettoDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    trace_config_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PerfettoDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes trace_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_trace_config(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PerfettoDetails::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.PerfettoDetails)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes trace_config = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_trace_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.PerfettoDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.PerfettoDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PerfettoDetails::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.PerfettoDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes trace_config = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->trace_config(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.PerfettoDetails)
}

size_t PerfettoDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.PerfettoDetails)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes trace_config = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->trace_config());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerfettoDetails::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PerfettoDetails*>(
      &from));
}

void PerfettoDetails::MergeFrom(const PerfettoDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.PerfettoDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trace_config()) {
    _has_bits_[0] |= 0x00000001u;
    trace_config_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trace_config_);
  }
}

void PerfettoDetails::CopyFrom(const PerfettoDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.PerfettoDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerfettoDetails::IsInitialized() const {
  return true;
}

void PerfettoDetails::InternalSwap(PerfettoDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  trace_config_.Swap(&other->trace_config_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string PerfettoDetails::GetTypeName() const {
  return "android.os.statsd.PerfettoDetails";
}


// ===================================================================

void BroadcastSubscriberDetails::InitAsDefaultInstance() {
}
class BroadcastSubscriberDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<BroadcastSubscriberDetails>()._has_bits_);
  static void set_has_subscriber_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BroadcastSubscriberDetails::BroadcastSubscriberDetails()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.BroadcastSubscriberDetails)
}
BroadcastSubscriberDetails::BroadcastSubscriberDetails(const BroadcastSubscriberDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      cookie_(from.cookie_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscriber_id_ = from.subscriber_id_;
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.BroadcastSubscriberDetails)
}

void BroadcastSubscriberDetails::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BroadcastSubscriberDetails_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  subscriber_id_ = PROTOBUF_LONGLONG(0);
}

BroadcastSubscriberDetails::~BroadcastSubscriberDetails() {
  // @@protoc_insertion_point(destructor:android.os.statsd.BroadcastSubscriberDetails)
  SharedDtor();
}

void BroadcastSubscriberDetails::SharedDtor() {
}

void BroadcastSubscriberDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BroadcastSubscriberDetails& BroadcastSubscriberDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BroadcastSubscriberDetails_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void BroadcastSubscriberDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.BroadcastSubscriberDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cookie_.Clear();
  subscriber_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BroadcastSubscriberDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 subscriber_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_subscriber_id(&has_bits);
          subscriber_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string cookie = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_cookie(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BroadcastSubscriberDetails::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.BroadcastSubscriberDetails)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 subscriber_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_subscriber_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &subscriber_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string cookie = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_cookie()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.BroadcastSubscriberDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.BroadcastSubscriberDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BroadcastSubscriberDetails::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.BroadcastSubscriberDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 subscriber_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->subscriber_id(), output);
  }

  // repeated string cookie = 2;
  for (int i = 0, n = this->cookie_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->cookie(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.BroadcastSubscriberDetails)
}

size_t BroadcastSubscriberDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.BroadcastSubscriberDetails)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string cookie = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->cookie_size());
  for (int i = 0, n = this->cookie_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->cookie(i));
  }

  // optional int64 subscriber_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->subscriber_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BroadcastSubscriberDetails::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BroadcastSubscriberDetails*>(
      &from));
}

void BroadcastSubscriberDetails::MergeFrom(const BroadcastSubscriberDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.BroadcastSubscriberDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cookie_.MergeFrom(from.cookie_);
  if (from.has_subscriber_id()) {
    set_subscriber_id(from.subscriber_id());
  }
}

void BroadcastSubscriberDetails::CopyFrom(const BroadcastSubscriberDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.BroadcastSubscriberDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastSubscriberDetails::IsInitialized() const {
  return true;
}

void BroadcastSubscriberDetails::InternalSwap(BroadcastSubscriberDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cookie_.InternalSwap(CastToBase(&other->cookie_));
  swap(subscriber_id_, other->subscriber_id_);
}

std::string BroadcastSubscriberDetails::GetTypeName() const {
  return "android.os.statsd.BroadcastSubscriberDetails";
}


// ===================================================================

void Subscription::InitAsDefaultInstance() {
}
class Subscription::_Internal {
 public:
  using HasBits = decltype(std::declval<Subscription>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rule_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rule_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::os::statsd::IncidentdDetails& incidentd_details(const Subscription* msg);
  static const ::android::os::statsd::PerfettoDetails& perfetto_details(const Subscription* msg);
  static const ::android::os::statsd::BroadcastSubscriberDetails& broadcast_subscriber_details(const Subscription* msg);
  static void set_has_probability_of_informing(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::android::os::statsd::IncidentdDetails&
Subscription::_Internal::incidentd_details(const Subscription* msg) {
  return *msg->subscriber_information_.incidentd_details_;
}
const ::android::os::statsd::PerfettoDetails&
Subscription::_Internal::perfetto_details(const Subscription* msg) {
  return *msg->subscriber_information_.perfetto_details_;
}
const ::android::os::statsd::BroadcastSubscriberDetails&
Subscription::_Internal::broadcast_subscriber_details(const Subscription* msg) {
  return *msg->subscriber_information_.broadcast_subscriber_details_;
}
void Subscription::set_allocated_incidentd_details(::android::os::statsd::IncidentdDetails* incidentd_details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_subscriber_information();
  if (incidentd_details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      incidentd_details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, incidentd_details, submessage_arena);
    }
    set_has_incidentd_details();
    subscriber_information_.incidentd_details_ = incidentd_details;
  }
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.Subscription.incidentd_details)
}
void Subscription::set_allocated_perfetto_details(::android::os::statsd::PerfettoDetails* perfetto_details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_subscriber_information();
  if (perfetto_details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      perfetto_details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perfetto_details, submessage_arena);
    }
    set_has_perfetto_details();
    subscriber_information_.perfetto_details_ = perfetto_details;
  }
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.Subscription.perfetto_details)
}
void Subscription::set_allocated_broadcast_subscriber_details(::android::os::statsd::BroadcastSubscriberDetails* broadcast_subscriber_details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_subscriber_information();
  if (broadcast_subscriber_details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      broadcast_subscriber_details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, broadcast_subscriber_details, submessage_arena);
    }
    set_has_broadcast_subscriber_details();
    subscriber_information_.broadcast_subscriber_details_ = broadcast_subscriber_details;
  }
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.Subscription.broadcast_subscriber_details)
}
Subscription::Subscription()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.Subscription)
}
Subscription::Subscription(const Subscription& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&probability_of_informing_) -
    reinterpret_cast<char*>(&id_)) + sizeof(probability_of_informing_));
  clear_has_subscriber_information();
  switch (from.subscriber_information_case()) {
    case kIncidentdDetails: {
      mutable_incidentd_details()->::android::os::statsd::IncidentdDetails::MergeFrom(from.incidentd_details());
      break;
    }
    case kPerfettoDetails: {
      mutable_perfetto_details()->::android::os::statsd::PerfettoDetails::MergeFrom(from.perfetto_details());
      break;
    }
    case kBroadcastSubscriberDetails: {
      mutable_broadcast_subscriber_details()->::android::os::statsd::BroadcastSubscriberDetails::MergeFrom(from.broadcast_subscriber_details());
      break;
    }
    case SUBSCRIBER_INFORMATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.Subscription)
}

void Subscription::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Subscription_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rule_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(rule_type_));
  probability_of_informing_ = 1.1f;
  clear_has_subscriber_information();
}

Subscription::~Subscription() {
  // @@protoc_insertion_point(destructor:android.os.statsd.Subscription)
  SharedDtor();
}

void Subscription::SharedDtor() {
  if (has_subscriber_information()) {
    clear_subscriber_information();
  }
}

void Subscription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Subscription& Subscription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Subscription_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void Subscription::clear_subscriber_information() {
// @@protoc_insertion_point(one_of_clear_start:android.os.statsd.Subscription)
  switch (subscriber_information_case()) {
    case kIncidentdDetails: {
      delete subscriber_information_.incidentd_details_;
      break;
    }
    case kPerfettoDetails: {
      delete subscriber_information_.perfetto_details_;
      break;
    }
    case kBroadcastSubscriberDetails: {
      delete subscriber_information_.broadcast_subscriber_details_;
      break;
    }
    case SUBSCRIBER_INFORMATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SUBSCRIBER_INFORMATION_NOT_SET;
}


void Subscription::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.Subscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rule_type_) -
        reinterpret_cast<char*>(&id_)) + sizeof(rule_type_));
    probability_of_informing_ = 1.1f;
  }
  clear_subscriber_information();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Subscription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.Subscription.RuleType rule_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::statsd::Subscription_RuleType_IsValid(val))) {
            set_rule_type(static_cast<::android::os::statsd::Subscription_RuleType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 rule_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rule_id(&has_bits);
          rule_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.IncidentdDetails incidentd_details = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_incidentd_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.PerfettoDetails perfetto_details = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_perfetto_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.BroadcastSubscriberDetails broadcast_subscriber_details = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_broadcast_subscriber_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float probability_of_informing = 7 [default = 1.1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_probability_of_informing(&has_bits);
          probability_of_informing_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Subscription::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.Subscription)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.Subscription.RuleType rule_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::statsd::Subscription_RuleType_IsValid(value)) {
            set_rule_type(static_cast< ::android::os::statsd::Subscription_RuleType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 rule_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_rule_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &rule_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.IncidentdDetails incidentd_details = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_incidentd_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.PerfettoDetails perfetto_details = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_perfetto_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.BroadcastSubscriberDetails broadcast_subscriber_details = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_broadcast_subscriber_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float probability_of_informing = 7 [default = 1.1];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {
          _Internal::set_has_probability_of_informing(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &probability_of_informing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.Subscription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.Subscription)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Subscription::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.Subscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional .android.os.statsd.Subscription.RuleType rule_type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->rule_type(), output);
  }

  // optional int64 rule_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->rule_id(), output);
  }

  switch (subscriber_information_case()) {
    case kIncidentdDetails:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        4, _Internal::incidentd_details(this), output);
      break;
    case kPerfettoDetails:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        5, _Internal::perfetto_details(this), output);
      break;
    case kBroadcastSubscriberDetails:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        6, _Internal::broadcast_subscriber_details(this), output);
      break;
    default: ;
  }
  // optional float probability_of_informing = 7 [default = 1.1];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->probability_of_informing(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.Subscription)
}

size_t Subscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.Subscription)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int64 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 rule_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->rule_id());
    }

    // optional .android.os.statsd.Subscription.RuleType rule_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->rule_type());
    }

    // optional float probability_of_informing = 7 [default = 1.1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  switch (subscriber_information_case()) {
    // optional .android.os.statsd.IncidentdDetails incidentd_details = 4;
    case kIncidentdDetails: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *subscriber_information_.incidentd_details_);
      break;
    }
    // optional .android.os.statsd.PerfettoDetails perfetto_details = 5;
    case kPerfettoDetails: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *subscriber_information_.perfetto_details_);
      break;
    }
    // optional .android.os.statsd.BroadcastSubscriberDetails broadcast_subscriber_details = 6;
    case kBroadcastSubscriberDetails: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *subscriber_information_.broadcast_subscriber_details_);
      break;
    }
    case SUBSCRIBER_INFORMATION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Subscription::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Subscription*>(
      &from));
}

void Subscription::MergeFrom(const Subscription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.Subscription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      rule_id_ = from.rule_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      rule_type_ = from.rule_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      probability_of_informing_ = from.probability_of_informing_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.subscriber_information_case()) {
    case kIncidentdDetails: {
      mutable_incidentd_details()->::android::os::statsd::IncidentdDetails::MergeFrom(from.incidentd_details());
      break;
    }
    case kPerfettoDetails: {
      mutable_perfetto_details()->::android::os::statsd::PerfettoDetails::MergeFrom(from.perfetto_details());
      break;
    }
    case kBroadcastSubscriberDetails: {
      mutable_broadcast_subscriber_details()->::android::os::statsd::BroadcastSubscriberDetails::MergeFrom(from.broadcast_subscriber_details());
      break;
    }
    case SUBSCRIBER_INFORMATION_NOT_SET: {
      break;
    }
  }
}

void Subscription::CopyFrom(const Subscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.Subscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subscription::IsInitialized() const {
  return true;
}

void Subscription::InternalSwap(Subscription* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(rule_id_, other->rule_id_);
  swap(rule_type_, other->rule_type_);
  swap(probability_of_informing_, other->probability_of_informing_);
  swap(subscriber_information_, other->subscriber_information_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string Subscription::GetTypeName() const {
  return "android.os.statsd.Subscription";
}


// ===================================================================

void EventActivation::InitAsDefaultInstance() {
}
class EventActivation::_Internal {
 public:
  using HasBits = decltype(std::declval<EventActivation>()._has_bits_);
  static void set_has_atom_matcher_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ttl_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_deactivation_atom_matcher_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_activation_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

EventActivation::EventActivation()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.EventActivation)
}
EventActivation::EventActivation(const EventActivation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&atom_matcher_id_, &from.atom_matcher_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&activation_type_) -
    reinterpret_cast<char*>(&atom_matcher_id_)) + sizeof(activation_type_));
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.EventActivation)
}

void EventActivation::SharedCtor() {
  ::memset(&atom_matcher_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&activation_type_) -
      reinterpret_cast<char*>(&atom_matcher_id_)) + sizeof(activation_type_));
}

EventActivation::~EventActivation() {
  // @@protoc_insertion_point(destructor:android.os.statsd.EventActivation)
  SharedDtor();
}

void EventActivation::SharedDtor() {
}

void EventActivation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventActivation& EventActivation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventActivation_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void EventActivation::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.EventActivation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&atom_matcher_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&activation_type_) -
        reinterpret_cast<char*>(&atom_matcher_id_)) + sizeof(activation_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EventActivation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 atom_matcher_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_atom_matcher_id(&has_bits);
          atom_matcher_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 ttl_seconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ttl_seconds(&has_bits);
          ttl_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 deactivation_atom_matcher_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_deactivation_atom_matcher_id(&has_bits);
          deactivation_atom_matcher_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.ActivationType activation_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::statsd::ActivationType_IsValid(val))) {
            set_activation_type(static_cast<::android::os::statsd::ActivationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EventActivation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.EventActivation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 atom_matcher_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_atom_matcher_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &atom_matcher_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ttl_seconds = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_ttl_seconds(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &ttl_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 deactivation_atom_matcher_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_deactivation_atom_matcher_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &deactivation_atom_matcher_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.ActivationType activation_type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::statsd::ActivationType_IsValid(value)) {
            set_activation_type(static_cast< ::android::os::statsd::ActivationType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.EventActivation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.EventActivation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EventActivation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.EventActivation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 atom_matcher_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->atom_matcher_id(), output);
  }

  // optional int64 ttl_seconds = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->ttl_seconds(), output);
  }

  // optional int64 deactivation_atom_matcher_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->deactivation_atom_matcher_id(), output);
  }

  // optional .android.os.statsd.ActivationType activation_type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->activation_type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.EventActivation)
}

size_t EventActivation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.EventActivation)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int64 atom_matcher_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->atom_matcher_id());
    }

    // optional int64 ttl_seconds = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->ttl_seconds());
    }

    // optional int64 deactivation_atom_matcher_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->deactivation_atom_matcher_id());
    }

    // optional .android.os.statsd.ActivationType activation_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->activation_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventActivation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EventActivation*>(
      &from));
}

void EventActivation::MergeFrom(const EventActivation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.EventActivation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      atom_matcher_id_ = from.atom_matcher_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      ttl_seconds_ = from.ttl_seconds_;
    }
    if (cached_has_bits & 0x00000004u) {
      deactivation_atom_matcher_id_ = from.deactivation_atom_matcher_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      activation_type_ = from.activation_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EventActivation::CopyFrom(const EventActivation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.EventActivation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventActivation::IsInitialized() const {
  return true;
}

void EventActivation::InternalSwap(EventActivation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(atom_matcher_id_, other->atom_matcher_id_);
  swap(ttl_seconds_, other->ttl_seconds_);
  swap(deactivation_atom_matcher_id_, other->deactivation_atom_matcher_id_);
  swap(activation_type_, other->activation_type_);
}

std::string EventActivation::GetTypeName() const {
  return "android.os.statsd.EventActivation";
}


// ===================================================================

void MetricActivation::InitAsDefaultInstance() {
}
class MetricActivation::_Internal {
 public:
  using HasBits = decltype(std::declval<MetricActivation>()._has_bits_);
  static void set_has_metric_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_activation_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MetricActivation::MetricActivation()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.MetricActivation)
}
MetricActivation::MetricActivation(const MetricActivation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      event_activation_(from.event_activation_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&metric_id_, &from.metric_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&activation_type_) -
    reinterpret_cast<char*>(&metric_id_)) + sizeof(activation_type_));
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.MetricActivation)
}

void MetricActivation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MetricActivation_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  ::memset(&metric_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&activation_type_) -
      reinterpret_cast<char*>(&metric_id_)) + sizeof(activation_type_));
}

MetricActivation::~MetricActivation() {
  // @@protoc_insertion_point(destructor:android.os.statsd.MetricActivation)
  SharedDtor();
}

void MetricActivation::SharedDtor() {
}

void MetricActivation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetricActivation& MetricActivation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MetricActivation_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void MetricActivation::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.MetricActivation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_activation_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&metric_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&activation_type_) -
        reinterpret_cast<char*>(&metric_id_)) + sizeof(activation_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MetricActivation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 metric_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_metric_id(&has_bits);
          metric_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.statsd.EventActivation event_activation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_event_activation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.ActivationType activation_type = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::statsd::ActivationType_IsValid(val))) {
            set_activation_type(static_cast<::android::os::statsd::ActivationType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MetricActivation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.MetricActivation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 metric_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_metric_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &metric_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.statsd.EventActivation event_activation = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_event_activation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.ActivationType activation_type = 3 [deprecated = true];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::statsd::ActivationType_IsValid(value)) {
            set_activation_type(static_cast< ::android::os::statsd::ActivationType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.MetricActivation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.MetricActivation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MetricActivation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.MetricActivation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 metric_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->metric_id(), output);
  }

  // repeated .android.os.statsd.EventActivation event_activation = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->event_activation_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->event_activation(static_cast<int>(i)),
      output);
  }

  // optional .android.os.statsd.ActivationType activation_type = 3 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->activation_type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.MetricActivation)
}

size_t MetricActivation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.MetricActivation)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.os.statsd.EventActivation event_activation = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->event_activation_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->event_activation(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 metric_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->metric_id());
    }

    // optional .android.os.statsd.ActivationType activation_type = 3 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->activation_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetricActivation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MetricActivation*>(
      &from));
}

void MetricActivation::MergeFrom(const MetricActivation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.MetricActivation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  event_activation_.MergeFrom(from.event_activation_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      metric_id_ = from.metric_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      activation_type_ = from.activation_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MetricActivation::CopyFrom(const MetricActivation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.MetricActivation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricActivation::IsInitialized() const {
  return true;
}

void MetricActivation::InternalSwap(MetricActivation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&event_activation_)->InternalSwap(CastToBase(&other->event_activation_));
  swap(metric_id_, other->metric_id_);
  swap(activation_type_, other->activation_type_);
}

std::string MetricActivation::GetTypeName() const {
  return "android.os.statsd.MetricActivation";
}


// ===================================================================

void PullAtomPackages::InitAsDefaultInstance() {
}
class PullAtomPackages::_Internal {
 public:
  using HasBits = decltype(std::declval<PullAtomPackages>()._has_bits_);
  static void set_has_atom_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PullAtomPackages::PullAtomPackages()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.PullAtomPackages)
}
PullAtomPackages::PullAtomPackages(const PullAtomPackages& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      packages_(from.packages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  atom_id_ = from.atom_id_;
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.PullAtomPackages)
}

void PullAtomPackages::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PullAtomPackages_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  atom_id_ = 0;
}

PullAtomPackages::~PullAtomPackages() {
  // @@protoc_insertion_point(destructor:android.os.statsd.PullAtomPackages)
  SharedDtor();
}

void PullAtomPackages::SharedDtor() {
}

void PullAtomPackages::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PullAtomPackages& PullAtomPackages::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PullAtomPackages_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PullAtomPackages::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.PullAtomPackages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packages_.Clear();
  atom_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PullAtomPackages::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 atom_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_atom_id(&has_bits);
          atom_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string packages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_packages(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PullAtomPackages::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.PullAtomPackages)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 atom_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_atom_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &atom_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string packages = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_packages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.PullAtomPackages)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.PullAtomPackages)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PullAtomPackages::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.PullAtomPackages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 atom_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->atom_id(), output);
  }

  // repeated string packages = 2;
  for (int i = 0, n = this->packages_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->packages(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.PullAtomPackages)
}

size_t PullAtomPackages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.PullAtomPackages)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string packages = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->packages_size());
  for (int i = 0, n = this->packages_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->packages(i));
  }

  // optional int32 atom_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->atom_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PullAtomPackages::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PullAtomPackages*>(
      &from));
}

void PullAtomPackages::MergeFrom(const PullAtomPackages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.PullAtomPackages)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  packages_.MergeFrom(from.packages_);
  if (from.has_atom_id()) {
    set_atom_id(from.atom_id());
  }
}

void PullAtomPackages::CopyFrom(const PullAtomPackages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.PullAtomPackages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullAtomPackages::IsInitialized() const {
  return true;
}

void PullAtomPackages::InternalSwap(PullAtomPackages* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  packages_.InternalSwap(CastToBase(&other->packages_));
  swap(atom_id_, other->atom_id_);
}

std::string PullAtomPackages::GetTypeName() const {
  return "android.os.statsd.PullAtomPackages";
}


// ===================================================================

void StatsdConfig_Annotation::InitAsDefaultInstance() {
}
class StatsdConfig_Annotation::_Internal {
 public:
  using HasBits = decltype(std::declval<StatsdConfig_Annotation>()._has_bits_);
  static void set_has_field_int64(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_field_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

StatsdConfig_Annotation::StatsdConfig_Annotation()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.StatsdConfig.Annotation)
}
StatsdConfig_Annotation::StatsdConfig_Annotation(const StatsdConfig_Annotation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&field_int64_, &from.field_int64_,
    static_cast<size_t>(reinterpret_cast<char*>(&field_int32_) -
    reinterpret_cast<char*>(&field_int64_)) + sizeof(field_int32_));
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.StatsdConfig.Annotation)
}

void StatsdConfig_Annotation::SharedCtor() {
  ::memset(&field_int64_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_int32_) -
      reinterpret_cast<char*>(&field_int64_)) + sizeof(field_int32_));
}

StatsdConfig_Annotation::~StatsdConfig_Annotation() {
  // @@protoc_insertion_point(destructor:android.os.statsd.StatsdConfig.Annotation)
  SharedDtor();
}

void StatsdConfig_Annotation::SharedDtor() {
}

void StatsdConfig_Annotation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatsdConfig_Annotation& StatsdConfig_Annotation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatsdConfig_Annotation_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void StatsdConfig_Annotation::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.StatsdConfig.Annotation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&field_int64_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&field_int32_) -
        reinterpret_cast<char*>(&field_int64_)) + sizeof(field_int32_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StatsdConfig_Annotation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 field_int64 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_field_int64(&has_bits);
          field_int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 field_int32 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_field_int32(&has_bits);
          field_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StatsdConfig_Annotation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.StatsdConfig.Annotation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 field_int64 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_field_int64(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &field_int64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 field_int32 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_field_int32(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &field_int32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.StatsdConfig.Annotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.StatsdConfig.Annotation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StatsdConfig_Annotation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.StatsdConfig.Annotation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 field_int64 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->field_int64(), output);
  }

  // optional int32 field_int32 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->field_int32(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.StatsdConfig.Annotation)
}

size_t StatsdConfig_Annotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.StatsdConfig.Annotation)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 field_int64 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->field_int64());
    }

    // optional int32 field_int32 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->field_int32());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatsdConfig_Annotation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StatsdConfig_Annotation*>(
      &from));
}

void StatsdConfig_Annotation::MergeFrom(const StatsdConfig_Annotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.StatsdConfig.Annotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      field_int64_ = from.field_int64_;
    }
    if (cached_has_bits & 0x00000002u) {
      field_int32_ = from.field_int32_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StatsdConfig_Annotation::CopyFrom(const StatsdConfig_Annotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.StatsdConfig.Annotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatsdConfig_Annotation::IsInitialized() const {
  return true;
}

void StatsdConfig_Annotation::InternalSwap(StatsdConfig_Annotation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(field_int64_, other->field_int64_);
  swap(field_int32_, other->field_int32_);
}

std::string StatsdConfig_Annotation::GetTypeName() const {
  return "android.os.statsd.StatsdConfig.Annotation";
}


// ===================================================================

void StatsdConfig::InitAsDefaultInstance() {
}
class StatsdConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<StatsdConfig>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ttl_in_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hash_strings_in_metric_report(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_version_strings_in_metric_report(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_installer_in_metric_report(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_persist_locally(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

StatsdConfig::StatsdConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.StatsdConfig)
}
StatsdConfig::StatsdConfig(const StatsdConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      event_metric_(from.event_metric_),
      count_metric_(from.count_metric_),
      value_metric_(from.value_metric_),
      gauge_metric_(from.gauge_metric_),
      duration_metric_(from.duration_metric_),
      atom_matcher_(from.atom_matcher_),
      predicate_(from.predicate_),
      alert_(from.alert_),
      alarm_(from.alarm_),
      subscription_(from.subscription_),
      allowed_log_source_(from.allowed_log_source_),
      no_report_metric_(from.no_report_metric_),
      annotation_(from.annotation_),
      metric_activation_(from.metric_activation_),
      state_(from.state_),
      default_pull_packages_(from.default_pull_packages_),
      pull_atom_packages_(from.pull_atom_packages_),
      whitelisted_atom_ids_(from.whitelisted_atom_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hash_strings_in_metric_report_) -
    reinterpret_cast<char*>(&id_)) + sizeof(hash_strings_in_metric_report_));
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.StatsdConfig)
}

void StatsdConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StatsdConfig_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&persist_locally_) -
      reinterpret_cast<char*>(&id_)) + sizeof(persist_locally_));
  hash_strings_in_metric_report_ = true;
}

StatsdConfig::~StatsdConfig() {
  // @@protoc_insertion_point(destructor:android.os.statsd.StatsdConfig)
  SharedDtor();
}

void StatsdConfig::SharedDtor() {
}

void StatsdConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatsdConfig& StatsdConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatsdConfig_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void StatsdConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.StatsdConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_metric_.Clear();
  count_metric_.Clear();
  value_metric_.Clear();
  gauge_metric_.Clear();
  duration_metric_.Clear();
  atom_matcher_.Clear();
  predicate_.Clear();
  alert_.Clear();
  alarm_.Clear();
  subscription_.Clear();
  allowed_log_source_.Clear();
  no_report_metric_.Clear();
  annotation_.Clear();
  metric_activation_.Clear();
  state_.Clear();
  default_pull_packages_.Clear();
  pull_atom_packages_.Clear();
  whitelisted_atom_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&persist_locally_) -
        reinterpret_cast<char*>(&id_)) + sizeof(persist_locally_));
    hash_strings_in_metric_report_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StatsdConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.statsd.EventMetric event_metric = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_event_metric(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.statsd.CountMetric count_metric = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_count_metric(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.statsd.ValueMetric value_metric = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_value_metric(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.statsd.GaugeMetric gauge_metric = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_gauge_metric(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.statsd.DurationMetric duration_metric = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_duration_metric(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.statsd.AtomMatcher atom_matcher = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_atom_matcher(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.statsd.Predicate predicate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_predicate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.statsd.Alert alert = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_alert(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.statsd.Alarm alarm = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_alarm(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.statsd.Subscription subscription = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_subscription(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 90);
        } else goto handle_unusual;
        continue;
      // repeated string allowed_log_source = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_allowed_log_source(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 98);
        } else goto handle_unusual;
        continue;
      // repeated int64 no_report_metric = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_no_report_metric(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 104);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_no_report_metric(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.statsd.StatsdConfig.Annotation annotation = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_annotation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 114);
        } else goto handle_unusual;
        continue;
      // optional int64 ttl_in_seconds = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_ttl_in_seconds(&has_bits);
          ttl_in_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hash_strings_in_metric_report = 16 [default = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_hash_strings_in_metric_report(&has_bits);
          hash_strings_in_metric_report_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.statsd.MetricActivation metric_activation = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_metric_activation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 394);
        } else goto handle_unusual;
        continue;
      // optional bool version_strings_in_metric_report = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_version_strings_in_metric_report(&has_bits);
          version_strings_in_metric_report_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool installer_in_metric_report = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_installer_in_metric_report(&has_bits);
          installer_in_metric_report_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool persist_locally = 20 [default = false];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_persist_locally(&has_bits);
          persist_locally_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.statsd.State state = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 426);
        } else goto handle_unusual;
        continue;
      // repeated string default_pull_packages = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_default_pull_packages(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 434);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.statsd.PullAtomPackages pull_atom_packages = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_pull_atom_packages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 442);
        } else goto handle_unusual;
        continue;
      // repeated int32 whitelisted_atom_ids = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ptr -= 2;
          do {
            ptr += 2;
            add_whitelisted_atom_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 448);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_whitelisted_atom_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StatsdConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.StatsdConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.statsd.EventMetric event_metric = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_event_metric()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.statsd.CountMetric count_metric = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_count_metric()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.statsd.ValueMetric value_metric = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_value_metric()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.statsd.GaugeMetric gauge_metric = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_gauge_metric()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.statsd.DurationMetric duration_metric = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_duration_metric()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.statsd.AtomMatcher atom_matcher = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_atom_matcher()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.statsd.Predicate predicate = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_predicate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.statsd.Alert alert = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_alert()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.statsd.Alarm alarm = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_alarm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.statsd.Subscription subscription = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_subscription()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string allowed_log_source = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_allowed_log_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 no_report_metric = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 104u, input, this->mutable_no_report_metric())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_no_report_metric())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.statsd.StatsdConfig.Annotation annotation = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_annotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ttl_in_seconds = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_ttl_in_seconds(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &ttl_in_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hash_strings_in_metric_report = 16 [default = true];
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_hash_strings_in_metric_report(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hash_strings_in_metric_report_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.statsd.MetricActivation metric_activation = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_metric_activation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool version_strings_in_metric_report = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          _Internal::set_has_version_strings_in_metric_report(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &version_strings_in_metric_report_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool installer_in_metric_report = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          _Internal::set_has_installer_in_metric_report(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &installer_in_metric_report_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool persist_locally = 20 [default = false];
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          _Internal::set_has_persist_locally(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &persist_locally_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.statsd.State state = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string default_pull_packages = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_default_pull_packages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.statsd.PullAtomPackages pull_atom_packages = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_pull_atom_packages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 whitelisted_atom_ids = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 2, 192u, input, this->mutable_whitelisted_atom_ids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_whitelisted_atom_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.StatsdConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.StatsdConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StatsdConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.StatsdConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // repeated .android.os.statsd.EventMetric event_metric = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->event_metric_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->event_metric(static_cast<int>(i)),
      output);
  }

  // repeated .android.os.statsd.CountMetric count_metric = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->count_metric_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->count_metric(static_cast<int>(i)),
      output);
  }

  // repeated .android.os.statsd.ValueMetric value_metric = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->value_metric_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4,
      this->value_metric(static_cast<int>(i)),
      output);
  }

  // repeated .android.os.statsd.GaugeMetric gauge_metric = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gauge_metric_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5,
      this->gauge_metric(static_cast<int>(i)),
      output);
  }

  // repeated .android.os.statsd.DurationMetric duration_metric = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->duration_metric_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6,
      this->duration_metric(static_cast<int>(i)),
      output);
  }

  // repeated .android.os.statsd.AtomMatcher atom_matcher = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->atom_matcher_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7,
      this->atom_matcher(static_cast<int>(i)),
      output);
  }

  // repeated .android.os.statsd.Predicate predicate = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->predicate_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8,
      this->predicate(static_cast<int>(i)),
      output);
  }

  // repeated .android.os.statsd.Alert alert = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alert_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9,
      this->alert(static_cast<int>(i)),
      output);
  }

  // repeated .android.os.statsd.Alarm alarm = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alarm_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10,
      this->alarm(static_cast<int>(i)),
      output);
  }

  // repeated .android.os.statsd.Subscription subscription = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subscription_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11,
      this->subscription(static_cast<int>(i)),
      output);
  }

  // repeated string allowed_log_source = 12;
  for (int i = 0, n = this->allowed_log_source_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      12, this->allowed_log_source(i), output);
  }

  // repeated int64 no_report_metric = 13;
  for (int i = 0, n = this->no_report_metric_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(
      13, this->no_report_metric(i), output);
  }

  // repeated .android.os.statsd.StatsdConfig.Annotation annotation = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->annotation_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      14,
      this->annotation(static_cast<int>(i)),
      output);
  }

  // optional int64 ttl_in_seconds = 15;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(15, this->ttl_in_seconds(), output);
  }

  // optional bool hash_strings_in_metric_report = 16 [default = true];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(16, this->hash_strings_in_metric_report(), output);
  }

  // repeated .android.os.statsd.MetricActivation metric_activation = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metric_activation_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      17,
      this->metric_activation(static_cast<int>(i)),
      output);
  }

  // optional bool version_strings_in_metric_report = 18;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(18, this->version_strings_in_metric_report(), output);
  }

  // optional bool installer_in_metric_report = 19;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(19, this->installer_in_metric_report(), output);
  }

  // optional bool persist_locally = 20 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(20, this->persist_locally(), output);
  }

  // repeated .android.os.statsd.State state = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->state_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      21,
      this->state(static_cast<int>(i)),
      output);
  }

  // repeated string default_pull_packages = 22;
  for (int i = 0, n = this->default_pull_packages_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      22, this->default_pull_packages(i), output);
  }

  // repeated .android.os.statsd.PullAtomPackages pull_atom_packages = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pull_atom_packages_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      23,
      this->pull_atom_packages(static_cast<int>(i)),
      output);
  }

  // repeated int32 whitelisted_atom_ids = 24;
  for (int i = 0, n = this->whitelisted_atom_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      24, this->whitelisted_atom_ids(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.StatsdConfig)
}

size_t StatsdConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.StatsdConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.os.statsd.EventMetric event_metric = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->event_metric_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->event_metric(static_cast<int>(i)));
    }
  }

  // repeated .android.os.statsd.CountMetric count_metric = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->count_metric_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->count_metric(static_cast<int>(i)));
    }
  }

  // repeated .android.os.statsd.ValueMetric value_metric = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->value_metric_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->value_metric(static_cast<int>(i)));
    }
  }

  // repeated .android.os.statsd.GaugeMetric gauge_metric = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->gauge_metric_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->gauge_metric(static_cast<int>(i)));
    }
  }

  // repeated .android.os.statsd.DurationMetric duration_metric = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->duration_metric_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->duration_metric(static_cast<int>(i)));
    }
  }

  // repeated .android.os.statsd.AtomMatcher atom_matcher = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->atom_matcher_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->atom_matcher(static_cast<int>(i)));
    }
  }

  // repeated .android.os.statsd.Predicate predicate = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->predicate_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->predicate(static_cast<int>(i)));
    }
  }

  // repeated .android.os.statsd.Alert alert = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->alert_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->alert(static_cast<int>(i)));
    }
  }

  // repeated .android.os.statsd.Alarm alarm = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->alarm_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->alarm(static_cast<int>(i)));
    }
  }

  // repeated .android.os.statsd.Subscription subscription = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->subscription_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->subscription(static_cast<int>(i)));
    }
  }

  // repeated string allowed_log_source = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->allowed_log_source_size());
  for (int i = 0, n = this->allowed_log_source_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->allowed_log_source(i));
  }

  // repeated int64 no_report_metric = 13;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->no_report_metric_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->no_report_metric_size());
    total_size += data_size;
  }

  // repeated .android.os.statsd.StatsdConfig.Annotation annotation = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->annotation_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->annotation(static_cast<int>(i)));
    }
  }

  // repeated .android.os.statsd.MetricActivation metric_activation = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->metric_activation_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->metric_activation(static_cast<int>(i)));
    }
  }

  // repeated .android.os.statsd.State state = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->state_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->state(static_cast<int>(i)));
    }
  }

  // repeated string default_pull_packages = 22;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->default_pull_packages_size());
  for (int i = 0, n = this->default_pull_packages_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->default_pull_packages(i));
  }

  // repeated .android.os.statsd.PullAtomPackages pull_atom_packages = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->pull_atom_packages_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->pull_atom_packages(static_cast<int>(i)));
    }
  }

  // repeated int32 whitelisted_atom_ids = 24;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->whitelisted_atom_ids_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->whitelisted_atom_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int64 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 ttl_in_seconds = 15;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->ttl_in_seconds());
    }

    // optional bool version_strings_in_metric_report = 18;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool installer_in_metric_report = 19;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool persist_locally = 20 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool hash_strings_in_metric_report = 16 [default = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatsdConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StatsdConfig*>(
      &from));
}

void StatsdConfig::MergeFrom(const StatsdConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.StatsdConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  event_metric_.MergeFrom(from.event_metric_);
  count_metric_.MergeFrom(from.count_metric_);
  value_metric_.MergeFrom(from.value_metric_);
  gauge_metric_.MergeFrom(from.gauge_metric_);
  duration_metric_.MergeFrom(from.duration_metric_);
  atom_matcher_.MergeFrom(from.atom_matcher_);
  predicate_.MergeFrom(from.predicate_);
  alert_.MergeFrom(from.alert_);
  alarm_.MergeFrom(from.alarm_);
  subscription_.MergeFrom(from.subscription_);
  allowed_log_source_.MergeFrom(from.allowed_log_source_);
  no_report_metric_.MergeFrom(from.no_report_metric_);
  annotation_.MergeFrom(from.annotation_);
  metric_activation_.MergeFrom(from.metric_activation_);
  state_.MergeFrom(from.state_);
  default_pull_packages_.MergeFrom(from.default_pull_packages_);
  pull_atom_packages_.MergeFrom(from.pull_atom_packages_);
  whitelisted_atom_ids_.MergeFrom(from.whitelisted_atom_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      ttl_in_seconds_ = from.ttl_in_seconds_;
    }
    if (cached_has_bits & 0x00000004u) {
      version_strings_in_metric_report_ = from.version_strings_in_metric_report_;
    }
    if (cached_has_bits & 0x00000008u) {
      installer_in_metric_report_ = from.installer_in_metric_report_;
    }
    if (cached_has_bits & 0x00000010u) {
      persist_locally_ = from.persist_locally_;
    }
    if (cached_has_bits & 0x00000020u) {
      hash_strings_in_metric_report_ = from.hash_strings_in_metric_report_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StatsdConfig::CopyFrom(const StatsdConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.StatsdConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatsdConfig::IsInitialized() const {
  return true;
}

void StatsdConfig::InternalSwap(StatsdConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&event_metric_)->InternalSwap(CastToBase(&other->event_metric_));
  CastToBase(&count_metric_)->InternalSwap(CastToBase(&other->count_metric_));
  CastToBase(&value_metric_)->InternalSwap(CastToBase(&other->value_metric_));
  CastToBase(&gauge_metric_)->InternalSwap(CastToBase(&other->gauge_metric_));
  CastToBase(&duration_metric_)->InternalSwap(CastToBase(&other->duration_metric_));
  CastToBase(&atom_matcher_)->InternalSwap(CastToBase(&other->atom_matcher_));
  CastToBase(&predicate_)->InternalSwap(CastToBase(&other->predicate_));
  CastToBase(&alert_)->InternalSwap(CastToBase(&other->alert_));
  CastToBase(&alarm_)->InternalSwap(CastToBase(&other->alarm_));
  CastToBase(&subscription_)->InternalSwap(CastToBase(&other->subscription_));
  allowed_log_source_.InternalSwap(CastToBase(&other->allowed_log_source_));
  no_report_metric_.InternalSwap(&other->no_report_metric_);
  CastToBase(&annotation_)->InternalSwap(CastToBase(&other->annotation_));
  CastToBase(&metric_activation_)->InternalSwap(CastToBase(&other->metric_activation_));
  CastToBase(&state_)->InternalSwap(CastToBase(&other->state_));
  default_pull_packages_.InternalSwap(CastToBase(&other->default_pull_packages_));
  CastToBase(&pull_atom_packages_)->InternalSwap(CastToBase(&other->pull_atom_packages_));
  whitelisted_atom_ids_.InternalSwap(&other->whitelisted_atom_ids_);
  swap(id_, other->id_);
  swap(ttl_in_seconds_, other->ttl_in_seconds_);
  swap(version_strings_in_metric_report_, other->version_strings_in_metric_report_);
  swap(installer_in_metric_report_, other->installer_in_metric_report_);
  swap(persist_locally_, other->persist_locally_);
  swap(hash_strings_in_metric_report_, other->hash_strings_in_metric_report_);
}

std::string StatsdConfig::GetTypeName() const {
  return "android.os.statsd.StatsdConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace statsd
}  // namespace os
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::os::statsd::FieldMatcher* Arena::CreateMaybeMessage< ::android::os::statsd::FieldMatcher >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::FieldMatcher >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::statsd::FieldValueMatcher* Arena::CreateMaybeMessage< ::android::os::statsd::FieldValueMatcher >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::FieldValueMatcher >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::statsd::MessageMatcher* Arena::CreateMaybeMessage< ::android::os::statsd::MessageMatcher >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::MessageMatcher >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::statsd::StringListMatcher* Arena::CreateMaybeMessage< ::android::os::statsd::StringListMatcher >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::StringListMatcher >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::statsd::SimpleAtomMatcher* Arena::CreateMaybeMessage< ::android::os::statsd::SimpleAtomMatcher >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::SimpleAtomMatcher >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::statsd::AtomMatcher_Combination* Arena::CreateMaybeMessage< ::android::os::statsd::AtomMatcher_Combination >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::AtomMatcher_Combination >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::statsd::AtomMatcher* Arena::CreateMaybeMessage< ::android::os::statsd::AtomMatcher >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::AtomMatcher >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::statsd::SimplePredicate* Arena::CreateMaybeMessage< ::android::os::statsd::SimplePredicate >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::SimplePredicate >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::statsd::Predicate_Combination* Arena::CreateMaybeMessage< ::android::os::statsd::Predicate_Combination >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::Predicate_Combination >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::statsd::Predicate* Arena::CreateMaybeMessage< ::android::os::statsd::Predicate >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::Predicate >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::statsd::StateMap_StateGroup* Arena::CreateMaybeMessage< ::android::os::statsd::StateMap_StateGroup >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::StateMap_StateGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::statsd::StateMap* Arena::CreateMaybeMessage< ::android::os::statsd::StateMap >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::StateMap >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::statsd::State* Arena::CreateMaybeMessage< ::android::os::statsd::State >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::State >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::statsd::MetricConditionLink* Arena::CreateMaybeMessage< ::android::os::statsd::MetricConditionLink >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::MetricConditionLink >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::statsd::MetricStateLink* Arena::CreateMaybeMessage< ::android::os::statsd::MetricStateLink >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::MetricStateLink >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::statsd::FieldFilter* Arena::CreateMaybeMessage< ::android::os::statsd::FieldFilter >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::FieldFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::statsd::UploadThreshold* Arena::CreateMaybeMessage< ::android::os::statsd::UploadThreshold >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::UploadThreshold >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::statsd::EventMetric* Arena::CreateMaybeMessage< ::android::os::statsd::EventMetric >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::EventMetric >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::statsd::CountMetric* Arena::CreateMaybeMessage< ::android::os::statsd::CountMetric >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::CountMetric >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::statsd::DurationMetric* Arena::CreateMaybeMessage< ::android::os::statsd::DurationMetric >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::DurationMetric >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::statsd::GaugeMetric* Arena::CreateMaybeMessage< ::android::os::statsd::GaugeMetric >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::GaugeMetric >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::statsd::ValueMetric* Arena::CreateMaybeMessage< ::android::os::statsd::ValueMetric >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::ValueMetric >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::statsd::Alert* Arena::CreateMaybeMessage< ::android::os::statsd::Alert >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::Alert >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::statsd::Alarm* Arena::CreateMaybeMessage< ::android::os::statsd::Alarm >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::Alarm >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::statsd::IncidentdDetails* Arena::CreateMaybeMessage< ::android::os::statsd::IncidentdDetails >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::IncidentdDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::statsd::PerfettoDetails* Arena::CreateMaybeMessage< ::android::os::statsd::PerfettoDetails >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::PerfettoDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::statsd::BroadcastSubscriberDetails* Arena::CreateMaybeMessage< ::android::os::statsd::BroadcastSubscriberDetails >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::BroadcastSubscriberDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::statsd::Subscription* Arena::CreateMaybeMessage< ::android::os::statsd::Subscription >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::Subscription >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::statsd::EventActivation* Arena::CreateMaybeMessage< ::android::os::statsd::EventActivation >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::EventActivation >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::statsd::MetricActivation* Arena::CreateMaybeMessage< ::android::os::statsd::MetricActivation >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::MetricActivation >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::statsd::PullAtomPackages* Arena::CreateMaybeMessage< ::android::os::statsd::PullAtomPackages >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::PullAtomPackages >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::statsd::StatsdConfig_Annotation* Arena::CreateMaybeMessage< ::android::os::statsd::StatsdConfig_Annotation >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::StatsdConfig_Annotation >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::statsd::StatsdConfig* Arena::CreateMaybeMessage< ::android::os::statsd::StatsdConfig >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::StatsdConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
