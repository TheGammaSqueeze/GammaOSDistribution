// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packages/modules/StatsD/statsd/src/uid_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fuid_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fuid_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fuid_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fuid_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace os {
namespace statsd {
class ApplicationInfo;
class ApplicationInfoDefaultTypeInternal;
extern ApplicationInfoDefaultTypeInternal _ApplicationInfo_default_instance_;
class UidData;
class UidDataDefaultTypeInternal;
extern UidDataDefaultTypeInternal _UidData_default_instance_;
}  // namespace statsd
}  // namespace os
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::os::statsd::ApplicationInfo* Arena::CreateMaybeMessage<::android::os::statsd::ApplicationInfo>(Arena*);
template<> ::android::os::statsd::UidData* Arena::CreateMaybeMessage<::android::os::statsd::UidData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace os {
namespace statsd {

// ===================================================================

class ApplicationInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.ApplicationInfo) */ {
 public:
  ApplicationInfo();
  virtual ~ApplicationInfo();

  ApplicationInfo(const ApplicationInfo& from);
  ApplicationInfo(ApplicationInfo&& from) noexcept
    : ApplicationInfo() {
    *this = ::std::move(from);
  }

  inline ApplicationInfo& operator=(const ApplicationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplicationInfo& operator=(ApplicationInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ApplicationInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApplicationInfo* internal_default_instance() {
    return reinterpret_cast<const ApplicationInfo*>(
               &_ApplicationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ApplicationInfo& a, ApplicationInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplicationInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApplicationInfo* New() const final {
    return CreateMaybeMessage<ApplicationInfo>(nullptr);
  }

  ApplicationInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApplicationInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ApplicationInfo& from);
  void MergeFrom(const ApplicationInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ApplicationInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.ApplicationInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionStringFieldNumber = 3,
    kPackageNameFieldNumber = 4,
    kInstallerFieldNumber = 5,
    kVersionFieldNumber = 2,
    kUidFieldNumber = 1,
  };
  // optional string version_string = 3;
  bool has_version_string() const;
  void clear_version_string();
  const std::string& version_string() const;
  void set_version_string(const std::string& value);
  void set_version_string(std::string&& value);
  void set_version_string(const char* value);
  void set_version_string(const char* value, size_t size);
  std::string* mutable_version_string();
  std::string* release_version_string();
  void set_allocated_version_string(std::string* version_string);

  // optional string package_name = 4;
  bool has_package_name() const;
  void clear_package_name();
  const std::string& package_name() const;
  void set_package_name(const std::string& value);
  void set_package_name(std::string&& value);
  void set_package_name(const char* value);
  void set_package_name(const char* value, size_t size);
  std::string* mutable_package_name();
  std::string* release_package_name();
  void set_allocated_package_name(std::string* package_name);

  // optional string installer = 5;
  bool has_installer() const;
  void clear_installer();
  const std::string& installer() const;
  void set_installer(const std::string& value);
  void set_installer(std::string&& value);
  void set_installer(const char* value);
  void set_installer(const char* value, size_t size);
  std::string* mutable_installer();
  std::string* release_installer();
  void set_allocated_installer(std::string* installer);

  // optional int64 version = 2;
  bool has_version() const;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 uid = 1;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.os.statsd.ApplicationInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr installer_;
  ::PROTOBUF_NAMESPACE_ID::int64 version_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fuid_5fdata_2eproto;
};
// -------------------------------------------------------------------

class UidData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.UidData) */ {
 public:
  UidData();
  virtual ~UidData();

  UidData(const UidData& from);
  UidData(UidData&& from) noexcept
    : UidData() {
    *this = ::std::move(from);
  }

  inline UidData& operator=(const UidData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UidData& operator=(UidData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UidData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UidData* internal_default_instance() {
    return reinterpret_cast<const UidData*>(
               &_UidData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UidData& a, UidData& b) {
    a.Swap(&b);
  }
  inline void Swap(UidData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UidData* New() const final {
    return CreateMaybeMessage<UidData>(nullptr);
  }

  UidData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UidData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UidData& from);
  void MergeFrom(const UidData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UidData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.UidData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppInfoFieldNumber = 1,
  };
  // repeated .android.os.statsd.ApplicationInfo app_info = 1;
  int app_info_size() const;
  void clear_app_info();
  ::android::os::statsd::ApplicationInfo* mutable_app_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::ApplicationInfo >*
      mutable_app_info();
  const ::android::os::statsd::ApplicationInfo& app_info(int index) const;
  ::android::os::statsd::ApplicationInfo* add_app_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::ApplicationInfo >&
      app_info() const;

  // @@protoc_insertion_point(class_scope:android.os.statsd.UidData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::ApplicationInfo > app_info_;
  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fuid_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ApplicationInfo

// optional int32 uid = 1;
inline bool ApplicationInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ApplicationInfo::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ApplicationInfo::uid() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.ApplicationInfo.uid)
  return uid_;
}
inline void ApplicationInfo::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.ApplicationInfo.uid)
}

// optional int64 version = 2;
inline bool ApplicationInfo::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ApplicationInfo::clear_version() {
  version_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ApplicationInfo::version() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.ApplicationInfo.version)
  return version_;
}
inline void ApplicationInfo::set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  version_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.ApplicationInfo.version)
}

// optional string version_string = 3;
inline bool ApplicationInfo::has_version_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ApplicationInfo::clear_version_string() {
  version_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ApplicationInfo::version_string() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.ApplicationInfo.version_string)
  return version_string_.GetNoArena();
}
inline void ApplicationInfo::set_version_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  version_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.statsd.ApplicationInfo.version_string)
}
inline void ApplicationInfo::set_version_string(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  version_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.statsd.ApplicationInfo.version_string)
}
inline void ApplicationInfo::set_version_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  version_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.statsd.ApplicationInfo.version_string)
}
inline void ApplicationInfo::set_version_string(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  version_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.statsd.ApplicationInfo.version_string)
}
inline std::string* ApplicationInfo::mutable_version_string() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.os.statsd.ApplicationInfo.version_string)
  return version_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ApplicationInfo::release_version_string() {
  // @@protoc_insertion_point(field_release:android.os.statsd.ApplicationInfo.version_string)
  if (!has_version_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return version_string_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ApplicationInfo::set_allocated_version_string(std::string* version_string) {
  if (version_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  version_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_string);
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.ApplicationInfo.version_string)
}

// optional string package_name = 4;
inline bool ApplicationInfo::has_package_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ApplicationInfo::clear_package_name() {
  package_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ApplicationInfo::package_name() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.ApplicationInfo.package_name)
  return package_name_.GetNoArena();
}
inline void ApplicationInfo::set_package_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.statsd.ApplicationInfo.package_name)
}
inline void ApplicationInfo::set_package_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  package_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.statsd.ApplicationInfo.package_name)
}
inline void ApplicationInfo::set_package_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.statsd.ApplicationInfo.package_name)
}
inline void ApplicationInfo::set_package_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.statsd.ApplicationInfo.package_name)
}
inline std::string* ApplicationInfo::mutable_package_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.os.statsd.ApplicationInfo.package_name)
  return package_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ApplicationInfo::release_package_name() {
  // @@protoc_insertion_point(field_release:android.os.statsd.ApplicationInfo.package_name)
  if (!has_package_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return package_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ApplicationInfo::set_allocated_package_name(std::string* package_name) {
  if (package_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  package_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package_name);
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.ApplicationInfo.package_name)
}

// optional string installer = 5;
inline bool ApplicationInfo::has_installer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ApplicationInfo::clear_installer() {
  installer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ApplicationInfo::installer() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.ApplicationInfo.installer)
  return installer_.GetNoArena();
}
inline void ApplicationInfo::set_installer(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  installer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.statsd.ApplicationInfo.installer)
}
inline void ApplicationInfo::set_installer(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  installer_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.statsd.ApplicationInfo.installer)
}
inline void ApplicationInfo::set_installer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  installer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.statsd.ApplicationInfo.installer)
}
inline void ApplicationInfo::set_installer(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  installer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.statsd.ApplicationInfo.installer)
}
inline std::string* ApplicationInfo::mutable_installer() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:android.os.statsd.ApplicationInfo.installer)
  return installer_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ApplicationInfo::release_installer() {
  // @@protoc_insertion_point(field_release:android.os.statsd.ApplicationInfo.installer)
  if (!has_installer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return installer_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ApplicationInfo::set_allocated_installer(std::string* installer) {
  if (installer != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  installer_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), installer);
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.ApplicationInfo.installer)
}

// -------------------------------------------------------------------

// UidData

// repeated .android.os.statsd.ApplicationInfo app_info = 1;
inline int UidData::app_info_size() const {
  return app_info_.size();
}
inline void UidData::clear_app_info() {
  app_info_.Clear();
}
inline ::android::os::statsd::ApplicationInfo* UidData::mutable_app_info(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.UidData.app_info)
  return app_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::ApplicationInfo >*
UidData::mutable_app_info() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.UidData.app_info)
  return &app_info_;
}
inline const ::android::os::statsd::ApplicationInfo& UidData::app_info(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.UidData.app_info)
  return app_info_.Get(index);
}
inline ::android::os::statsd::ApplicationInfo* UidData::add_app_info() {
  // @@protoc_insertion_point(field_add:android.os.statsd.UidData.app_info)
  return app_info_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::ApplicationInfo >&
UidData::app_info() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.UidData.app_info)
  return app_info_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace statsd
}  // namespace os
}  // namespace android

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fuid_5fdata_2eproto
