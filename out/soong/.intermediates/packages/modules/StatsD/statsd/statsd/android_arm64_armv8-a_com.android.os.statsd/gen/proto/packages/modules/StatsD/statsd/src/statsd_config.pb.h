// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packages/modules/StatsD/statsd/src/statsd_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[33]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace os {
namespace statsd {
class Alarm;
class AlarmDefaultTypeInternal;
extern AlarmDefaultTypeInternal _Alarm_default_instance_;
class Alert;
class AlertDefaultTypeInternal;
extern AlertDefaultTypeInternal _Alert_default_instance_;
class AtomMatcher;
class AtomMatcherDefaultTypeInternal;
extern AtomMatcherDefaultTypeInternal _AtomMatcher_default_instance_;
class AtomMatcher_Combination;
class AtomMatcher_CombinationDefaultTypeInternal;
extern AtomMatcher_CombinationDefaultTypeInternal _AtomMatcher_Combination_default_instance_;
class BroadcastSubscriberDetails;
class BroadcastSubscriberDetailsDefaultTypeInternal;
extern BroadcastSubscriberDetailsDefaultTypeInternal _BroadcastSubscriberDetails_default_instance_;
class CountMetric;
class CountMetricDefaultTypeInternal;
extern CountMetricDefaultTypeInternal _CountMetric_default_instance_;
class DurationMetric;
class DurationMetricDefaultTypeInternal;
extern DurationMetricDefaultTypeInternal _DurationMetric_default_instance_;
class EventActivation;
class EventActivationDefaultTypeInternal;
extern EventActivationDefaultTypeInternal _EventActivation_default_instance_;
class EventMetric;
class EventMetricDefaultTypeInternal;
extern EventMetricDefaultTypeInternal _EventMetric_default_instance_;
class FieldFilter;
class FieldFilterDefaultTypeInternal;
extern FieldFilterDefaultTypeInternal _FieldFilter_default_instance_;
class FieldMatcher;
class FieldMatcherDefaultTypeInternal;
extern FieldMatcherDefaultTypeInternal _FieldMatcher_default_instance_;
class FieldValueMatcher;
class FieldValueMatcherDefaultTypeInternal;
extern FieldValueMatcherDefaultTypeInternal _FieldValueMatcher_default_instance_;
class GaugeMetric;
class GaugeMetricDefaultTypeInternal;
extern GaugeMetricDefaultTypeInternal _GaugeMetric_default_instance_;
class IncidentdDetails;
class IncidentdDetailsDefaultTypeInternal;
extern IncidentdDetailsDefaultTypeInternal _IncidentdDetails_default_instance_;
class MessageMatcher;
class MessageMatcherDefaultTypeInternal;
extern MessageMatcherDefaultTypeInternal _MessageMatcher_default_instance_;
class MetricActivation;
class MetricActivationDefaultTypeInternal;
extern MetricActivationDefaultTypeInternal _MetricActivation_default_instance_;
class MetricConditionLink;
class MetricConditionLinkDefaultTypeInternal;
extern MetricConditionLinkDefaultTypeInternal _MetricConditionLink_default_instance_;
class MetricStateLink;
class MetricStateLinkDefaultTypeInternal;
extern MetricStateLinkDefaultTypeInternal _MetricStateLink_default_instance_;
class PerfettoDetails;
class PerfettoDetailsDefaultTypeInternal;
extern PerfettoDetailsDefaultTypeInternal _PerfettoDetails_default_instance_;
class Predicate;
class PredicateDefaultTypeInternal;
extern PredicateDefaultTypeInternal _Predicate_default_instance_;
class Predicate_Combination;
class Predicate_CombinationDefaultTypeInternal;
extern Predicate_CombinationDefaultTypeInternal _Predicate_Combination_default_instance_;
class PullAtomPackages;
class PullAtomPackagesDefaultTypeInternal;
extern PullAtomPackagesDefaultTypeInternal _PullAtomPackages_default_instance_;
class SimpleAtomMatcher;
class SimpleAtomMatcherDefaultTypeInternal;
extern SimpleAtomMatcherDefaultTypeInternal _SimpleAtomMatcher_default_instance_;
class SimplePredicate;
class SimplePredicateDefaultTypeInternal;
extern SimplePredicateDefaultTypeInternal _SimplePredicate_default_instance_;
class State;
class StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
class StateMap;
class StateMapDefaultTypeInternal;
extern StateMapDefaultTypeInternal _StateMap_default_instance_;
class StateMap_StateGroup;
class StateMap_StateGroupDefaultTypeInternal;
extern StateMap_StateGroupDefaultTypeInternal _StateMap_StateGroup_default_instance_;
class StatsdConfig;
class StatsdConfigDefaultTypeInternal;
extern StatsdConfigDefaultTypeInternal _StatsdConfig_default_instance_;
class StatsdConfig_Annotation;
class StatsdConfig_AnnotationDefaultTypeInternal;
extern StatsdConfig_AnnotationDefaultTypeInternal _StatsdConfig_Annotation_default_instance_;
class StringListMatcher;
class StringListMatcherDefaultTypeInternal;
extern StringListMatcherDefaultTypeInternal _StringListMatcher_default_instance_;
class Subscription;
class SubscriptionDefaultTypeInternal;
extern SubscriptionDefaultTypeInternal _Subscription_default_instance_;
class UploadThreshold;
class UploadThresholdDefaultTypeInternal;
extern UploadThresholdDefaultTypeInternal _UploadThreshold_default_instance_;
class ValueMetric;
class ValueMetricDefaultTypeInternal;
extern ValueMetricDefaultTypeInternal _ValueMetric_default_instance_;
}  // namespace statsd
}  // namespace os
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::os::statsd::Alarm* Arena::CreateMaybeMessage<::android::os::statsd::Alarm>(Arena*);
template<> ::android::os::statsd::Alert* Arena::CreateMaybeMessage<::android::os::statsd::Alert>(Arena*);
template<> ::android::os::statsd::AtomMatcher* Arena::CreateMaybeMessage<::android::os::statsd::AtomMatcher>(Arena*);
template<> ::android::os::statsd::AtomMatcher_Combination* Arena::CreateMaybeMessage<::android::os::statsd::AtomMatcher_Combination>(Arena*);
template<> ::android::os::statsd::BroadcastSubscriberDetails* Arena::CreateMaybeMessage<::android::os::statsd::BroadcastSubscriberDetails>(Arena*);
template<> ::android::os::statsd::CountMetric* Arena::CreateMaybeMessage<::android::os::statsd::CountMetric>(Arena*);
template<> ::android::os::statsd::DurationMetric* Arena::CreateMaybeMessage<::android::os::statsd::DurationMetric>(Arena*);
template<> ::android::os::statsd::EventActivation* Arena::CreateMaybeMessage<::android::os::statsd::EventActivation>(Arena*);
template<> ::android::os::statsd::EventMetric* Arena::CreateMaybeMessage<::android::os::statsd::EventMetric>(Arena*);
template<> ::android::os::statsd::FieldFilter* Arena::CreateMaybeMessage<::android::os::statsd::FieldFilter>(Arena*);
template<> ::android::os::statsd::FieldMatcher* Arena::CreateMaybeMessage<::android::os::statsd::FieldMatcher>(Arena*);
template<> ::android::os::statsd::FieldValueMatcher* Arena::CreateMaybeMessage<::android::os::statsd::FieldValueMatcher>(Arena*);
template<> ::android::os::statsd::GaugeMetric* Arena::CreateMaybeMessage<::android::os::statsd::GaugeMetric>(Arena*);
template<> ::android::os::statsd::IncidentdDetails* Arena::CreateMaybeMessage<::android::os::statsd::IncidentdDetails>(Arena*);
template<> ::android::os::statsd::MessageMatcher* Arena::CreateMaybeMessage<::android::os::statsd::MessageMatcher>(Arena*);
template<> ::android::os::statsd::MetricActivation* Arena::CreateMaybeMessage<::android::os::statsd::MetricActivation>(Arena*);
template<> ::android::os::statsd::MetricConditionLink* Arena::CreateMaybeMessage<::android::os::statsd::MetricConditionLink>(Arena*);
template<> ::android::os::statsd::MetricStateLink* Arena::CreateMaybeMessage<::android::os::statsd::MetricStateLink>(Arena*);
template<> ::android::os::statsd::PerfettoDetails* Arena::CreateMaybeMessage<::android::os::statsd::PerfettoDetails>(Arena*);
template<> ::android::os::statsd::Predicate* Arena::CreateMaybeMessage<::android::os::statsd::Predicate>(Arena*);
template<> ::android::os::statsd::Predicate_Combination* Arena::CreateMaybeMessage<::android::os::statsd::Predicate_Combination>(Arena*);
template<> ::android::os::statsd::PullAtomPackages* Arena::CreateMaybeMessage<::android::os::statsd::PullAtomPackages>(Arena*);
template<> ::android::os::statsd::SimpleAtomMatcher* Arena::CreateMaybeMessage<::android::os::statsd::SimpleAtomMatcher>(Arena*);
template<> ::android::os::statsd::SimplePredicate* Arena::CreateMaybeMessage<::android::os::statsd::SimplePredicate>(Arena*);
template<> ::android::os::statsd::State* Arena::CreateMaybeMessage<::android::os::statsd::State>(Arena*);
template<> ::android::os::statsd::StateMap* Arena::CreateMaybeMessage<::android::os::statsd::StateMap>(Arena*);
template<> ::android::os::statsd::StateMap_StateGroup* Arena::CreateMaybeMessage<::android::os::statsd::StateMap_StateGroup>(Arena*);
template<> ::android::os::statsd::StatsdConfig* Arena::CreateMaybeMessage<::android::os::statsd::StatsdConfig>(Arena*);
template<> ::android::os::statsd::StatsdConfig_Annotation* Arena::CreateMaybeMessage<::android::os::statsd::StatsdConfig_Annotation>(Arena*);
template<> ::android::os::statsd::StringListMatcher* Arena::CreateMaybeMessage<::android::os::statsd::StringListMatcher>(Arena*);
template<> ::android::os::statsd::Subscription* Arena::CreateMaybeMessage<::android::os::statsd::Subscription>(Arena*);
template<> ::android::os::statsd::UploadThreshold* Arena::CreateMaybeMessage<::android::os::statsd::UploadThreshold>(Arena*);
template<> ::android::os::statsd::ValueMetric* Arena::CreateMaybeMessage<::android::os::statsd::ValueMetric>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace os {
namespace statsd {

enum SimplePredicate_InitialValue : int {
  SimplePredicate_InitialValue_UNKNOWN = 0,
  SimplePredicate_InitialValue_FALSE = 1
};
bool SimplePredicate_InitialValue_IsValid(int value);
constexpr SimplePredicate_InitialValue SimplePredicate_InitialValue_InitialValue_MIN = SimplePredicate_InitialValue_UNKNOWN;
constexpr SimplePredicate_InitialValue SimplePredicate_InitialValue_InitialValue_MAX = SimplePredicate_InitialValue_FALSE;
constexpr int SimplePredicate_InitialValue_InitialValue_ARRAYSIZE = SimplePredicate_InitialValue_InitialValue_MAX + 1;

const std::string& SimplePredicate_InitialValue_Name(SimplePredicate_InitialValue value);
template<typename T>
inline const std::string& SimplePredicate_InitialValue_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SimplePredicate_InitialValue>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SimplePredicate_InitialValue_Name.");
  return SimplePredicate_InitialValue_Name(static_cast<SimplePredicate_InitialValue>(enum_t_value));
}
bool SimplePredicate_InitialValue_Parse(
    const std::string& name, SimplePredicate_InitialValue* value);
enum DurationMetric_AggregationType : int {
  DurationMetric_AggregationType_SUM = 1,
  DurationMetric_AggregationType_MAX_SPARSE = 2
};
bool DurationMetric_AggregationType_IsValid(int value);
constexpr DurationMetric_AggregationType DurationMetric_AggregationType_AggregationType_MIN = DurationMetric_AggregationType_SUM;
constexpr DurationMetric_AggregationType DurationMetric_AggregationType_AggregationType_MAX = DurationMetric_AggregationType_MAX_SPARSE;
constexpr int DurationMetric_AggregationType_AggregationType_ARRAYSIZE = DurationMetric_AggregationType_AggregationType_MAX + 1;

const std::string& DurationMetric_AggregationType_Name(DurationMetric_AggregationType value);
template<typename T>
inline const std::string& DurationMetric_AggregationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DurationMetric_AggregationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DurationMetric_AggregationType_Name.");
  return DurationMetric_AggregationType_Name(static_cast<DurationMetric_AggregationType>(enum_t_value));
}
bool DurationMetric_AggregationType_Parse(
    const std::string& name, DurationMetric_AggregationType* value);
enum GaugeMetric_SamplingType : int {
  GaugeMetric_SamplingType_RANDOM_ONE_SAMPLE = 1,
  GaugeMetric_SamplingType_ALL_CONDITION_CHANGES PROTOBUF_DEPRECATED = 2,
  GaugeMetric_SamplingType_CONDITION_CHANGE_TO_TRUE = 3,
  GaugeMetric_SamplingType_FIRST_N_SAMPLES = 4
};
bool GaugeMetric_SamplingType_IsValid(int value);
constexpr GaugeMetric_SamplingType GaugeMetric_SamplingType_SamplingType_MIN = GaugeMetric_SamplingType_RANDOM_ONE_SAMPLE;
constexpr GaugeMetric_SamplingType GaugeMetric_SamplingType_SamplingType_MAX = GaugeMetric_SamplingType_FIRST_N_SAMPLES;
constexpr int GaugeMetric_SamplingType_SamplingType_ARRAYSIZE = GaugeMetric_SamplingType_SamplingType_MAX + 1;

const std::string& GaugeMetric_SamplingType_Name(GaugeMetric_SamplingType value);
template<typename T>
inline const std::string& GaugeMetric_SamplingType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GaugeMetric_SamplingType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GaugeMetric_SamplingType_Name.");
  return GaugeMetric_SamplingType_Name(static_cast<GaugeMetric_SamplingType>(enum_t_value));
}
bool GaugeMetric_SamplingType_Parse(
    const std::string& name, GaugeMetric_SamplingType* value);
enum ValueMetric_AggregationType : int {
  ValueMetric_AggregationType_SUM = 1,
  ValueMetric_AggregationType_MIN = 2,
  ValueMetric_AggregationType_MAX = 3,
  ValueMetric_AggregationType_AVG = 4
};
bool ValueMetric_AggregationType_IsValid(int value);
constexpr ValueMetric_AggregationType ValueMetric_AggregationType_AggregationType_MIN = ValueMetric_AggregationType_SUM;
constexpr ValueMetric_AggregationType ValueMetric_AggregationType_AggregationType_MAX = ValueMetric_AggregationType_AVG;
constexpr int ValueMetric_AggregationType_AggregationType_ARRAYSIZE = ValueMetric_AggregationType_AggregationType_MAX + 1;

const std::string& ValueMetric_AggregationType_Name(ValueMetric_AggregationType value);
template<typename T>
inline const std::string& ValueMetric_AggregationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ValueMetric_AggregationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ValueMetric_AggregationType_Name.");
  return ValueMetric_AggregationType_Name(static_cast<ValueMetric_AggregationType>(enum_t_value));
}
bool ValueMetric_AggregationType_Parse(
    const std::string& name, ValueMetric_AggregationType* value);
enum ValueMetric_ValueDirection : int {
  ValueMetric_ValueDirection_UNKNOWN = 0,
  ValueMetric_ValueDirection_INCREASING = 1,
  ValueMetric_ValueDirection_DECREASING = 2,
  ValueMetric_ValueDirection_ANY = 3
};
bool ValueMetric_ValueDirection_IsValid(int value);
constexpr ValueMetric_ValueDirection ValueMetric_ValueDirection_ValueDirection_MIN = ValueMetric_ValueDirection_UNKNOWN;
constexpr ValueMetric_ValueDirection ValueMetric_ValueDirection_ValueDirection_MAX = ValueMetric_ValueDirection_ANY;
constexpr int ValueMetric_ValueDirection_ValueDirection_ARRAYSIZE = ValueMetric_ValueDirection_ValueDirection_MAX + 1;

const std::string& ValueMetric_ValueDirection_Name(ValueMetric_ValueDirection value);
template<typename T>
inline const std::string& ValueMetric_ValueDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ValueMetric_ValueDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ValueMetric_ValueDirection_Name.");
  return ValueMetric_ValueDirection_Name(static_cast<ValueMetric_ValueDirection>(enum_t_value));
}
bool ValueMetric_ValueDirection_Parse(
    const std::string& name, ValueMetric_ValueDirection* value);
enum IncidentdDetails_Destination : int {
  IncidentdDetails_Destination_AUTOMATIC = 0,
  IncidentdDetails_Destination_EXPLICIT = 1
};
bool IncidentdDetails_Destination_IsValid(int value);
constexpr IncidentdDetails_Destination IncidentdDetails_Destination_Destination_MIN = IncidentdDetails_Destination_AUTOMATIC;
constexpr IncidentdDetails_Destination IncidentdDetails_Destination_Destination_MAX = IncidentdDetails_Destination_EXPLICIT;
constexpr int IncidentdDetails_Destination_Destination_ARRAYSIZE = IncidentdDetails_Destination_Destination_MAX + 1;

const std::string& IncidentdDetails_Destination_Name(IncidentdDetails_Destination value);
template<typename T>
inline const std::string& IncidentdDetails_Destination_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IncidentdDetails_Destination>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IncidentdDetails_Destination_Name.");
  return IncidentdDetails_Destination_Name(static_cast<IncidentdDetails_Destination>(enum_t_value));
}
bool IncidentdDetails_Destination_Parse(
    const std::string& name, IncidentdDetails_Destination* value);
enum Subscription_RuleType : int {
  Subscription_RuleType_RULE_TYPE_UNSPECIFIED = 0,
  Subscription_RuleType_ALARM = 1,
  Subscription_RuleType_ALERT = 2
};
bool Subscription_RuleType_IsValid(int value);
constexpr Subscription_RuleType Subscription_RuleType_RuleType_MIN = Subscription_RuleType_RULE_TYPE_UNSPECIFIED;
constexpr Subscription_RuleType Subscription_RuleType_RuleType_MAX = Subscription_RuleType_ALERT;
constexpr int Subscription_RuleType_RuleType_ARRAYSIZE = Subscription_RuleType_RuleType_MAX + 1;

const std::string& Subscription_RuleType_Name(Subscription_RuleType value);
template<typename T>
inline const std::string& Subscription_RuleType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Subscription_RuleType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Subscription_RuleType_Name.");
  return Subscription_RuleType_Name(static_cast<Subscription_RuleType>(enum_t_value));
}
bool Subscription_RuleType_Parse(
    const std::string& name, Subscription_RuleType* value);
enum Position : int {
  POSITION_UNKNOWN = 0,
  FIRST = 1,
  LAST = 2,
  ANY = 3,
  ALL = 4
};
bool Position_IsValid(int value);
constexpr Position Position_MIN = POSITION_UNKNOWN;
constexpr Position Position_MAX = ALL;
constexpr int Position_ARRAYSIZE = Position_MAX + 1;

const std::string& Position_Name(Position value);
template<typename T>
inline const std::string& Position_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Position>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Position_Name.");
  return Position_Name(static_cast<Position>(enum_t_value));
}
bool Position_Parse(
    const std::string& name, Position* value);
enum TimeUnit : int {
  TIME_UNIT_UNSPECIFIED = 0,
  ONE_MINUTE = 1,
  FIVE_MINUTES = 2,
  TEN_MINUTES = 3,
  THIRTY_MINUTES = 4,
  ONE_HOUR = 5,
  THREE_HOURS = 6,
  SIX_HOURS = 7,
  TWELVE_HOURS = 8,
  ONE_DAY = 9,
  ONE_WEEK = 10,
  CTS = 1000
};
bool TimeUnit_IsValid(int value);
constexpr TimeUnit TimeUnit_MIN = TIME_UNIT_UNSPECIFIED;
constexpr TimeUnit TimeUnit_MAX = CTS;
constexpr int TimeUnit_ARRAYSIZE = TimeUnit_MAX + 1;

const std::string& TimeUnit_Name(TimeUnit value);
template<typename T>
inline const std::string& TimeUnit_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TimeUnit>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TimeUnit_Name.");
  return TimeUnit_Name(static_cast<TimeUnit>(enum_t_value));
}
bool TimeUnit_Parse(
    const std::string& name, TimeUnit* value);
enum LogicalOperation : int {
  LOGICAL_OPERATION_UNSPECIFIED = 0,
  AND = 1,
  OR = 2,
  NOT = 3,
  NAND = 4,
  NOR = 5
};
bool LogicalOperation_IsValid(int value);
constexpr LogicalOperation LogicalOperation_MIN = LOGICAL_OPERATION_UNSPECIFIED;
constexpr LogicalOperation LogicalOperation_MAX = NOR;
constexpr int LogicalOperation_ARRAYSIZE = LogicalOperation_MAX + 1;

const std::string& LogicalOperation_Name(LogicalOperation value);
template<typename T>
inline const std::string& LogicalOperation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LogicalOperation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LogicalOperation_Name.");
  return LogicalOperation_Name(static_cast<LogicalOperation>(enum_t_value));
}
bool LogicalOperation_Parse(
    const std::string& name, LogicalOperation* value);
enum ActivationType : int {
  ACTIVATION_TYPE_UNKNOWN = 0,
  ACTIVATE_IMMEDIATELY = 1,
  ACTIVATE_ON_BOOT = 2
};
bool ActivationType_IsValid(int value);
constexpr ActivationType ActivationType_MIN = ACTIVATION_TYPE_UNKNOWN;
constexpr ActivationType ActivationType_MAX = ACTIVATE_ON_BOOT;
constexpr int ActivationType_ARRAYSIZE = ActivationType_MAX + 1;

const std::string& ActivationType_Name(ActivationType value);
template<typename T>
inline const std::string& ActivationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ActivationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ActivationType_Name.");
  return ActivationType_Name(static_cast<ActivationType>(enum_t_value));
}
bool ActivationType_Parse(
    const std::string& name, ActivationType* value);
// ===================================================================

class FieldMatcher :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.FieldMatcher) */ {
 public:
  FieldMatcher();
  virtual ~FieldMatcher();

  FieldMatcher(const FieldMatcher& from);
  FieldMatcher(FieldMatcher&& from) noexcept
    : FieldMatcher() {
    *this = ::std::move(from);
  }

  inline FieldMatcher& operator=(const FieldMatcher& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldMatcher& operator=(FieldMatcher&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FieldMatcher& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldMatcher* internal_default_instance() {
    return reinterpret_cast<const FieldMatcher*>(
               &_FieldMatcher_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FieldMatcher& a, FieldMatcher& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldMatcher* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldMatcher* New() const final {
    return CreateMaybeMessage<FieldMatcher>(nullptr);
  }

  FieldMatcher* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldMatcher>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FieldMatcher& from);
  void MergeFrom(const FieldMatcher& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FieldMatcher* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.FieldMatcher";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildFieldNumber = 3,
    kFieldFieldNumber = 1,
    kPositionFieldNumber = 2,
  };
  // repeated .android.os.statsd.FieldMatcher child = 3;
  int child_size() const;
  void clear_child();
  ::android::os::statsd::FieldMatcher* mutable_child(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::FieldMatcher >*
      mutable_child();
  const ::android::os::statsd::FieldMatcher& child(int index) const;
  ::android::os::statsd::FieldMatcher* add_child();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::FieldMatcher >&
      child() const;

  // optional int32 field = 1;
  bool has_field() const;
  void clear_field();
  ::PROTOBUF_NAMESPACE_ID::int32 field() const;
  void set_field(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .android.os.statsd.Position position = 2;
  bool has_position() const;
  void clear_position();
  ::android::os::statsd::Position position() const;
  void set_position(::android::os::statsd::Position value);

  // @@protoc_insertion_point(class_scope:android.os.statsd.FieldMatcher)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::FieldMatcher > child_;
  ::PROTOBUF_NAMESPACE_ID::int32 field_;
  int position_;
  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class FieldValueMatcher :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.FieldValueMatcher) */ {
 public:
  FieldValueMatcher();
  virtual ~FieldValueMatcher();

  FieldValueMatcher(const FieldValueMatcher& from);
  FieldValueMatcher(FieldValueMatcher&& from) noexcept
    : FieldValueMatcher() {
    *this = ::std::move(from);
  }

  inline FieldValueMatcher& operator=(const FieldValueMatcher& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldValueMatcher& operator=(FieldValueMatcher&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FieldValueMatcher& default_instance();

  enum ValueMatcherCase {
    kEqBool = 3,
    kEqString = 4,
    kEqInt = 5,
    kLtInt = 6,
    kGtInt = 7,
    kLtFloat = 8,
    kGtFloat = 9,
    kLteInt = 10,
    kGteInt = 11,
    kMatchesTuple = 12,
    kEqAnyString = 13,
    kNeqAnyString = 14,
    VALUE_MATCHER_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldValueMatcher* internal_default_instance() {
    return reinterpret_cast<const FieldValueMatcher*>(
               &_FieldValueMatcher_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FieldValueMatcher& a, FieldValueMatcher& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldValueMatcher* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldValueMatcher* New() const final {
    return CreateMaybeMessage<FieldValueMatcher>(nullptr);
  }

  FieldValueMatcher* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldValueMatcher>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FieldValueMatcher& from);
  void MergeFrom(const FieldValueMatcher& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FieldValueMatcher* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.FieldValueMatcher";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldFieldNumber = 1,
    kPositionFieldNumber = 2,
    kEqBoolFieldNumber = 3,
    kEqStringFieldNumber = 4,
    kEqIntFieldNumber = 5,
    kLtIntFieldNumber = 6,
    kGtIntFieldNumber = 7,
    kLtFloatFieldNumber = 8,
    kGtFloatFieldNumber = 9,
    kLteIntFieldNumber = 10,
    kGteIntFieldNumber = 11,
    kMatchesTupleFieldNumber = 12,
    kEqAnyStringFieldNumber = 13,
    kNeqAnyStringFieldNumber = 14,
  };
  // optional int32 field = 1;
  bool has_field() const;
  void clear_field();
  ::PROTOBUF_NAMESPACE_ID::int32 field() const;
  void set_field(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .android.os.statsd.Position position = 2;
  bool has_position() const;
  void clear_position();
  ::android::os::statsd::Position position() const;
  void set_position(::android::os::statsd::Position value);

  // optional bool eq_bool = 3;
  bool has_eq_bool() const;
  void clear_eq_bool();
  bool eq_bool() const;
  void set_eq_bool(bool value);

  // optional string eq_string = 4;
  bool has_eq_string() const;
  void clear_eq_string();
  const std::string& eq_string() const;
  void set_eq_string(const std::string& value);
  void set_eq_string(std::string&& value);
  void set_eq_string(const char* value);
  void set_eq_string(const char* value, size_t size);
  std::string* mutable_eq_string();
  std::string* release_eq_string();
  void set_allocated_eq_string(std::string* eq_string);

  // optional int64 eq_int = 5;
  bool has_eq_int() const;
  void clear_eq_int();
  ::PROTOBUF_NAMESPACE_ID::int64 eq_int() const;
  void set_eq_int(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 lt_int = 6;
  bool has_lt_int() const;
  void clear_lt_int();
  ::PROTOBUF_NAMESPACE_ID::int64 lt_int() const;
  void set_lt_int(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 gt_int = 7;
  bool has_gt_int() const;
  void clear_gt_int();
  ::PROTOBUF_NAMESPACE_ID::int64 gt_int() const;
  void set_gt_int(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional float lt_float = 8;
  bool has_lt_float() const;
  void clear_lt_float();
  float lt_float() const;
  void set_lt_float(float value);

  // optional float gt_float = 9;
  bool has_gt_float() const;
  void clear_gt_float();
  float gt_float() const;
  void set_gt_float(float value);

  // optional int64 lte_int = 10;
  bool has_lte_int() const;
  void clear_lte_int();
  ::PROTOBUF_NAMESPACE_ID::int64 lte_int() const;
  void set_lte_int(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 gte_int = 11;
  bool has_gte_int() const;
  void clear_gte_int();
  ::PROTOBUF_NAMESPACE_ID::int64 gte_int() const;
  void set_gte_int(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .android.os.statsd.MessageMatcher matches_tuple = 12;
  bool has_matches_tuple() const;
  void clear_matches_tuple();
  const ::android::os::statsd::MessageMatcher& matches_tuple() const;
  ::android::os::statsd::MessageMatcher* release_matches_tuple();
  ::android::os::statsd::MessageMatcher* mutable_matches_tuple();
  void set_allocated_matches_tuple(::android::os::statsd::MessageMatcher* matches_tuple);

  // optional .android.os.statsd.StringListMatcher eq_any_string = 13;
  bool has_eq_any_string() const;
  void clear_eq_any_string();
  const ::android::os::statsd::StringListMatcher& eq_any_string() const;
  ::android::os::statsd::StringListMatcher* release_eq_any_string();
  ::android::os::statsd::StringListMatcher* mutable_eq_any_string();
  void set_allocated_eq_any_string(::android::os::statsd::StringListMatcher* eq_any_string);

  // optional .android.os.statsd.StringListMatcher neq_any_string = 14;
  bool has_neq_any_string() const;
  void clear_neq_any_string();
  const ::android::os::statsd::StringListMatcher& neq_any_string() const;
  ::android::os::statsd::StringListMatcher* release_neq_any_string();
  ::android::os::statsd::StringListMatcher* mutable_neq_any_string();
  void set_allocated_neq_any_string(::android::os::statsd::StringListMatcher* neq_any_string);

  void clear_value_matcher();
  ValueMatcherCase value_matcher_case() const;
  // @@protoc_insertion_point(class_scope:android.os.statsd.FieldValueMatcher)
 private:
  class _Internal;
  void set_has_eq_bool();
  void set_has_eq_string();
  void set_has_eq_int();
  void set_has_lt_int();
  void set_has_gt_int();
  void set_has_lt_float();
  void set_has_gt_float();
  void set_has_lte_int();
  void set_has_gte_int();
  void set_has_matches_tuple();
  void set_has_eq_any_string();
  void set_has_neq_any_string();

  inline bool has_value_matcher() const;
  inline void clear_has_value_matcher();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 field_;
  int position_;
  union ValueMatcherUnion {
    ValueMatcherUnion() {}
    bool eq_bool_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eq_string_;
    ::PROTOBUF_NAMESPACE_ID::int64 eq_int_;
    ::PROTOBUF_NAMESPACE_ID::int64 lt_int_;
    ::PROTOBUF_NAMESPACE_ID::int64 gt_int_;
    float lt_float_;
    float gt_float_;
    ::PROTOBUF_NAMESPACE_ID::int64 lte_int_;
    ::PROTOBUF_NAMESPACE_ID::int64 gte_int_;
    ::android::os::statsd::MessageMatcher* matches_tuple_;
    ::android::os::statsd::StringListMatcher* eq_any_string_;
    ::android::os::statsd::StringListMatcher* neq_any_string_;
  } value_matcher_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class MessageMatcher :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.MessageMatcher) */ {
 public:
  MessageMatcher();
  virtual ~MessageMatcher();

  MessageMatcher(const MessageMatcher& from);
  MessageMatcher(MessageMatcher&& from) noexcept
    : MessageMatcher() {
    *this = ::std::move(from);
  }

  inline MessageMatcher& operator=(const MessageMatcher& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageMatcher& operator=(MessageMatcher&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MessageMatcher& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageMatcher* internal_default_instance() {
    return reinterpret_cast<const MessageMatcher*>(
               &_MessageMatcher_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MessageMatcher& a, MessageMatcher& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageMatcher* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageMatcher* New() const final {
    return CreateMaybeMessage<MessageMatcher>(nullptr);
  }

  MessageMatcher* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageMatcher>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MessageMatcher& from);
  void MergeFrom(const MessageMatcher& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageMatcher* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.MessageMatcher";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldValueMatcherFieldNumber = 1,
  };
  // repeated .android.os.statsd.FieldValueMatcher field_value_matcher = 1;
  int field_value_matcher_size() const;
  void clear_field_value_matcher();
  ::android::os::statsd::FieldValueMatcher* mutable_field_value_matcher(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::FieldValueMatcher >*
      mutable_field_value_matcher();
  const ::android::os::statsd::FieldValueMatcher& field_value_matcher(int index) const;
  ::android::os::statsd::FieldValueMatcher* add_field_value_matcher();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::FieldValueMatcher >&
      field_value_matcher() const;

  // @@protoc_insertion_point(class_scope:android.os.statsd.MessageMatcher)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::FieldValueMatcher > field_value_matcher_;
  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class StringListMatcher :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.StringListMatcher) */ {
 public:
  StringListMatcher();
  virtual ~StringListMatcher();

  StringListMatcher(const StringListMatcher& from);
  StringListMatcher(StringListMatcher&& from) noexcept
    : StringListMatcher() {
    *this = ::std::move(from);
  }

  inline StringListMatcher& operator=(const StringListMatcher& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringListMatcher& operator=(StringListMatcher&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const StringListMatcher& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StringListMatcher* internal_default_instance() {
    return reinterpret_cast<const StringListMatcher*>(
               &_StringListMatcher_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StringListMatcher& a, StringListMatcher& b) {
    a.Swap(&b);
  }
  inline void Swap(StringListMatcher* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringListMatcher* New() const final {
    return CreateMaybeMessage<StringListMatcher>(nullptr);
  }

  StringListMatcher* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringListMatcher>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const StringListMatcher& from);
  void MergeFrom(const StringListMatcher& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StringListMatcher* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.StringListMatcher";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrValueFieldNumber = 1,
  };
  // repeated string str_value = 1;
  int str_value_size() const;
  void clear_str_value();
  const std::string& str_value(int index) const;
  std::string* mutable_str_value(int index);
  void set_str_value(int index, const std::string& value);
  void set_str_value(int index, std::string&& value);
  void set_str_value(int index, const char* value);
  void set_str_value(int index, const char* value, size_t size);
  std::string* add_str_value();
  void add_str_value(const std::string& value);
  void add_str_value(std::string&& value);
  void add_str_value(const char* value);
  void add_str_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& str_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_str_value();

  // @@protoc_insertion_point(class_scope:android.os.statsd.StringListMatcher)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> str_value_;
  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class SimpleAtomMatcher :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.SimpleAtomMatcher) */ {
 public:
  SimpleAtomMatcher();
  virtual ~SimpleAtomMatcher();

  SimpleAtomMatcher(const SimpleAtomMatcher& from);
  SimpleAtomMatcher(SimpleAtomMatcher&& from) noexcept
    : SimpleAtomMatcher() {
    *this = ::std::move(from);
  }

  inline SimpleAtomMatcher& operator=(const SimpleAtomMatcher& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleAtomMatcher& operator=(SimpleAtomMatcher&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SimpleAtomMatcher& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpleAtomMatcher* internal_default_instance() {
    return reinterpret_cast<const SimpleAtomMatcher*>(
               &_SimpleAtomMatcher_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SimpleAtomMatcher& a, SimpleAtomMatcher& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpleAtomMatcher* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimpleAtomMatcher* New() const final {
    return CreateMaybeMessage<SimpleAtomMatcher>(nullptr);
  }

  SimpleAtomMatcher* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimpleAtomMatcher>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SimpleAtomMatcher& from);
  void MergeFrom(const SimpleAtomMatcher& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SimpleAtomMatcher* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.SimpleAtomMatcher";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldValueMatcherFieldNumber = 2,
    kAtomIdFieldNumber = 1,
  };
  // repeated .android.os.statsd.FieldValueMatcher field_value_matcher = 2;
  int field_value_matcher_size() const;
  void clear_field_value_matcher();
  ::android::os::statsd::FieldValueMatcher* mutable_field_value_matcher(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::FieldValueMatcher >*
      mutable_field_value_matcher();
  const ::android::os::statsd::FieldValueMatcher& field_value_matcher(int index) const;
  ::android::os::statsd::FieldValueMatcher* add_field_value_matcher();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::FieldValueMatcher >&
      field_value_matcher() const;

  // optional int32 atom_id = 1;
  bool has_atom_id() const;
  void clear_atom_id();
  ::PROTOBUF_NAMESPACE_ID::int32 atom_id() const;
  void set_atom_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.os.statsd.SimpleAtomMatcher)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::FieldValueMatcher > field_value_matcher_;
  ::PROTOBUF_NAMESPACE_ID::int32 atom_id_;
  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class AtomMatcher_Combination :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.AtomMatcher.Combination) */ {
 public:
  AtomMatcher_Combination();
  virtual ~AtomMatcher_Combination();

  AtomMatcher_Combination(const AtomMatcher_Combination& from);
  AtomMatcher_Combination(AtomMatcher_Combination&& from) noexcept
    : AtomMatcher_Combination() {
    *this = ::std::move(from);
  }

  inline AtomMatcher_Combination& operator=(const AtomMatcher_Combination& from) {
    CopyFrom(from);
    return *this;
  }
  inline AtomMatcher_Combination& operator=(AtomMatcher_Combination&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AtomMatcher_Combination& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AtomMatcher_Combination* internal_default_instance() {
    return reinterpret_cast<const AtomMatcher_Combination*>(
               &_AtomMatcher_Combination_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AtomMatcher_Combination& a, AtomMatcher_Combination& b) {
    a.Swap(&b);
  }
  inline void Swap(AtomMatcher_Combination* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AtomMatcher_Combination* New() const final {
    return CreateMaybeMessage<AtomMatcher_Combination>(nullptr);
  }

  AtomMatcher_Combination* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AtomMatcher_Combination>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AtomMatcher_Combination& from);
  void MergeFrom(const AtomMatcher_Combination& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AtomMatcher_Combination* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.AtomMatcher.Combination";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatcherFieldNumber = 2,
    kOperationFieldNumber = 1,
  };
  // repeated int64 matcher = 2;
  int matcher_size() const;
  void clear_matcher();
  ::PROTOBUF_NAMESPACE_ID::int64 matcher(int index) const;
  void set_matcher(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_matcher(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      matcher() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_matcher();

  // optional .android.os.statsd.LogicalOperation operation = 1;
  bool has_operation() const;
  void clear_operation();
  ::android::os::statsd::LogicalOperation operation() const;
  void set_operation(::android::os::statsd::LogicalOperation value);

  // @@protoc_insertion_point(class_scope:android.os.statsd.AtomMatcher.Combination)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > matcher_;
  int operation_;
  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class AtomMatcher :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.AtomMatcher) */ {
 public:
  AtomMatcher();
  virtual ~AtomMatcher();

  AtomMatcher(const AtomMatcher& from);
  AtomMatcher(AtomMatcher&& from) noexcept
    : AtomMatcher() {
    *this = ::std::move(from);
  }

  inline AtomMatcher& operator=(const AtomMatcher& from) {
    CopyFrom(from);
    return *this;
  }
  inline AtomMatcher& operator=(AtomMatcher&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AtomMatcher& default_instance();

  enum ContentsCase {
    kSimpleAtomMatcher = 2,
    kCombination = 3,
    CONTENTS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AtomMatcher* internal_default_instance() {
    return reinterpret_cast<const AtomMatcher*>(
               &_AtomMatcher_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AtomMatcher& a, AtomMatcher& b) {
    a.Swap(&b);
  }
  inline void Swap(AtomMatcher* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AtomMatcher* New() const final {
    return CreateMaybeMessage<AtomMatcher>(nullptr);
  }

  AtomMatcher* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AtomMatcher>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AtomMatcher& from);
  void MergeFrom(const AtomMatcher& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AtomMatcher* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.AtomMatcher";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AtomMatcher_Combination Combination;

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSimpleAtomMatcherFieldNumber = 2,
    kCombinationFieldNumber = 3,
  };
  // optional int64 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .android.os.statsd.SimpleAtomMatcher simple_atom_matcher = 2;
  bool has_simple_atom_matcher() const;
  void clear_simple_atom_matcher();
  const ::android::os::statsd::SimpleAtomMatcher& simple_atom_matcher() const;
  ::android::os::statsd::SimpleAtomMatcher* release_simple_atom_matcher();
  ::android::os::statsd::SimpleAtomMatcher* mutable_simple_atom_matcher();
  void set_allocated_simple_atom_matcher(::android::os::statsd::SimpleAtomMatcher* simple_atom_matcher);

  // optional .android.os.statsd.AtomMatcher.Combination combination = 3;
  bool has_combination() const;
  void clear_combination();
  const ::android::os::statsd::AtomMatcher_Combination& combination() const;
  ::android::os::statsd::AtomMatcher_Combination* release_combination();
  ::android::os::statsd::AtomMatcher_Combination* mutable_combination();
  void set_allocated_combination(::android::os::statsd::AtomMatcher_Combination* combination);

  void clear_contents();
  ContentsCase contents_case() const;
  // @@protoc_insertion_point(class_scope:android.os.statsd.AtomMatcher)
 private:
  class _Internal;
  void set_has_simple_atom_matcher();
  void set_has_combination();

  inline bool has_contents() const;
  inline void clear_has_contents();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  union ContentsUnion {
    ContentsUnion() {}
    ::android::os::statsd::SimpleAtomMatcher* simple_atom_matcher_;
    ::android::os::statsd::AtomMatcher_Combination* combination_;
  } contents_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class SimplePredicate :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.SimplePredicate) */ {
 public:
  SimplePredicate();
  virtual ~SimplePredicate();

  SimplePredicate(const SimplePredicate& from);
  SimplePredicate(SimplePredicate&& from) noexcept
    : SimplePredicate() {
    *this = ::std::move(from);
  }

  inline SimplePredicate& operator=(const SimplePredicate& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimplePredicate& operator=(SimplePredicate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SimplePredicate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimplePredicate* internal_default_instance() {
    return reinterpret_cast<const SimplePredicate*>(
               &_SimplePredicate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SimplePredicate& a, SimplePredicate& b) {
    a.Swap(&b);
  }
  inline void Swap(SimplePredicate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimplePredicate* New() const final {
    return CreateMaybeMessage<SimplePredicate>(nullptr);
  }

  SimplePredicate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimplePredicate>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SimplePredicate& from);
  void MergeFrom(const SimplePredicate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SimplePredicate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.SimplePredicate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SimplePredicate_InitialValue InitialValue;
  static constexpr InitialValue UNKNOWN =
    SimplePredicate_InitialValue_UNKNOWN;
  static constexpr InitialValue FALSE =
    SimplePredicate_InitialValue_FALSE;
  static inline bool InitialValue_IsValid(int value) {
    return SimplePredicate_InitialValue_IsValid(value);
  }
  static constexpr InitialValue InitialValue_MIN =
    SimplePredicate_InitialValue_InitialValue_MIN;
  static constexpr InitialValue InitialValue_MAX =
    SimplePredicate_InitialValue_InitialValue_MAX;
  static constexpr int InitialValue_ARRAYSIZE =
    SimplePredicate_InitialValue_InitialValue_ARRAYSIZE;
  template<typename T>
  static inline const std::string& InitialValue_Name(T enum_t_value) {
    static_assert(::std::is_same<T, InitialValue>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function InitialValue_Name.");
    return SimplePredicate_InitialValue_Name(enum_t_value);
  }
  static inline bool InitialValue_Parse(const std::string& name,
      InitialValue* value) {
    return SimplePredicate_InitialValue_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDimensionsFieldNumber = 6,
    kStartFieldNumber = 1,
    kStopFieldNumber = 2,
    kStopAllFieldNumber = 4,
    kInitialValueFieldNumber = 5,
    kCountNestingFieldNumber = 3,
  };
  // optional .android.os.statsd.FieldMatcher dimensions = 6;
  bool has_dimensions() const;
  void clear_dimensions();
  const ::android::os::statsd::FieldMatcher& dimensions() const;
  ::android::os::statsd::FieldMatcher* release_dimensions();
  ::android::os::statsd::FieldMatcher* mutable_dimensions();
  void set_allocated_dimensions(::android::os::statsd::FieldMatcher* dimensions);

  // optional int64 start = 1;
  bool has_start() const;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::int64 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 stop = 2;
  bool has_stop() const;
  void clear_stop();
  ::PROTOBUF_NAMESPACE_ID::int64 stop() const;
  void set_stop(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 stop_all = 4;
  bool has_stop_all() const;
  void clear_stop_all();
  ::PROTOBUF_NAMESPACE_ID::int64 stop_all() const;
  void set_stop_all(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .android.os.statsd.SimplePredicate.InitialValue initial_value = 5 [default = UNKNOWN];
  bool has_initial_value() const;
  void clear_initial_value();
  ::android::os::statsd::SimplePredicate_InitialValue initial_value() const;
  void set_initial_value(::android::os::statsd::SimplePredicate_InitialValue value);

  // optional bool count_nesting = 3 [default = true];
  bool has_count_nesting() const;
  void clear_count_nesting();
  bool count_nesting() const;
  void set_count_nesting(bool value);

  // @@protoc_insertion_point(class_scope:android.os.statsd.SimplePredicate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::os::statsd::FieldMatcher* dimensions_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_;
  ::PROTOBUF_NAMESPACE_ID::int64 stop_;
  ::PROTOBUF_NAMESPACE_ID::int64 stop_all_;
  int initial_value_;
  bool count_nesting_;
  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class Predicate_Combination :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.Predicate.Combination) */ {
 public:
  Predicate_Combination();
  virtual ~Predicate_Combination();

  Predicate_Combination(const Predicate_Combination& from);
  Predicate_Combination(Predicate_Combination&& from) noexcept
    : Predicate_Combination() {
    *this = ::std::move(from);
  }

  inline Predicate_Combination& operator=(const Predicate_Combination& from) {
    CopyFrom(from);
    return *this;
  }
  inline Predicate_Combination& operator=(Predicate_Combination&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Predicate_Combination& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Predicate_Combination* internal_default_instance() {
    return reinterpret_cast<const Predicate_Combination*>(
               &_Predicate_Combination_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Predicate_Combination& a, Predicate_Combination& b) {
    a.Swap(&b);
  }
  inline void Swap(Predicate_Combination* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Predicate_Combination* New() const final {
    return CreateMaybeMessage<Predicate_Combination>(nullptr);
  }

  Predicate_Combination* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Predicate_Combination>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Predicate_Combination& from);
  void MergeFrom(const Predicate_Combination& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Predicate_Combination* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.Predicate.Combination";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPredicateFieldNumber = 2,
    kOperationFieldNumber = 1,
  };
  // repeated int64 predicate = 2;
  int predicate_size() const;
  void clear_predicate();
  ::PROTOBUF_NAMESPACE_ID::int64 predicate(int index) const;
  void set_predicate(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_predicate(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      predicate() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_predicate();

  // optional .android.os.statsd.LogicalOperation operation = 1;
  bool has_operation() const;
  void clear_operation();
  ::android::os::statsd::LogicalOperation operation() const;
  void set_operation(::android::os::statsd::LogicalOperation value);

  // @@protoc_insertion_point(class_scope:android.os.statsd.Predicate.Combination)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > predicate_;
  int operation_;
  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class Predicate :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.Predicate) */ {
 public:
  Predicate();
  virtual ~Predicate();

  Predicate(const Predicate& from);
  Predicate(Predicate&& from) noexcept
    : Predicate() {
    *this = ::std::move(from);
  }

  inline Predicate& operator=(const Predicate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Predicate& operator=(Predicate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Predicate& default_instance();

  enum ContentsCase {
    kSimplePredicate = 2,
    kCombination = 3,
    CONTENTS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Predicate* internal_default_instance() {
    return reinterpret_cast<const Predicate*>(
               &_Predicate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Predicate& a, Predicate& b) {
    a.Swap(&b);
  }
  inline void Swap(Predicate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Predicate* New() const final {
    return CreateMaybeMessage<Predicate>(nullptr);
  }

  Predicate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Predicate>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Predicate& from);
  void MergeFrom(const Predicate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Predicate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.Predicate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Predicate_Combination Combination;

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSimplePredicateFieldNumber = 2,
    kCombinationFieldNumber = 3,
  };
  // optional int64 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .android.os.statsd.SimplePredicate simple_predicate = 2;
  bool has_simple_predicate() const;
  void clear_simple_predicate();
  const ::android::os::statsd::SimplePredicate& simple_predicate() const;
  ::android::os::statsd::SimplePredicate* release_simple_predicate();
  ::android::os::statsd::SimplePredicate* mutable_simple_predicate();
  void set_allocated_simple_predicate(::android::os::statsd::SimplePredicate* simple_predicate);

  // optional .android.os.statsd.Predicate.Combination combination = 3;
  bool has_combination() const;
  void clear_combination();
  const ::android::os::statsd::Predicate_Combination& combination() const;
  ::android::os::statsd::Predicate_Combination* release_combination();
  ::android::os::statsd::Predicate_Combination* mutable_combination();
  void set_allocated_combination(::android::os::statsd::Predicate_Combination* combination);

  void clear_contents();
  ContentsCase contents_case() const;
  // @@protoc_insertion_point(class_scope:android.os.statsd.Predicate)
 private:
  class _Internal;
  void set_has_simple_predicate();
  void set_has_combination();

  inline bool has_contents() const;
  inline void clear_has_contents();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  union ContentsUnion {
    ContentsUnion() {}
    ::android::os::statsd::SimplePredicate* simple_predicate_;
    ::android::os::statsd::Predicate_Combination* combination_;
  } contents_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class StateMap_StateGroup :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.StateMap.StateGroup) */ {
 public:
  StateMap_StateGroup();
  virtual ~StateMap_StateGroup();

  StateMap_StateGroup(const StateMap_StateGroup& from);
  StateMap_StateGroup(StateMap_StateGroup&& from) noexcept
    : StateMap_StateGroup() {
    *this = ::std::move(from);
  }

  inline StateMap_StateGroup& operator=(const StateMap_StateGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateMap_StateGroup& operator=(StateMap_StateGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const StateMap_StateGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StateMap_StateGroup* internal_default_instance() {
    return reinterpret_cast<const StateMap_StateGroup*>(
               &_StateMap_StateGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(StateMap_StateGroup& a, StateMap_StateGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(StateMap_StateGroup* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StateMap_StateGroup* New() const final {
    return CreateMaybeMessage<StateMap_StateGroup>(nullptr);
  }

  StateMap_StateGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StateMap_StateGroup>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const StateMap_StateGroup& from);
  void MergeFrom(const StateMap_StateGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StateMap_StateGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.StateMap.StateGroup";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kGroupIdFieldNumber = 1,
  };
  // repeated int32 value = 2;
  int value_size() const;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value(int index) const;
  void set_value(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_value();

  // optional int64 group_id = 1;
  bool has_group_id() const;
  void clear_group_id();
  ::PROTOBUF_NAMESPACE_ID::int64 group_id() const;
  void set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:android.os.statsd.StateMap.StateGroup)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > value_;
  ::PROTOBUF_NAMESPACE_ID::int64 group_id_;
  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class StateMap :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.StateMap) */ {
 public:
  StateMap();
  virtual ~StateMap();

  StateMap(const StateMap& from);
  StateMap(StateMap&& from) noexcept
    : StateMap() {
    *this = ::std::move(from);
  }

  inline StateMap& operator=(const StateMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateMap& operator=(StateMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const StateMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StateMap* internal_default_instance() {
    return reinterpret_cast<const StateMap*>(
               &_StateMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(StateMap& a, StateMap& b) {
    a.Swap(&b);
  }
  inline void Swap(StateMap* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StateMap* New() const final {
    return CreateMaybeMessage<StateMap>(nullptr);
  }

  StateMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StateMap>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const StateMap& from);
  void MergeFrom(const StateMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StateMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.StateMap";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef StateMap_StateGroup StateGroup;

  // accessors -------------------------------------------------------

  enum : int {
    kGroupFieldNumber = 1,
  };
  // repeated .android.os.statsd.StateMap.StateGroup group = 1;
  int group_size() const;
  void clear_group();
  ::android::os::statsd::StateMap_StateGroup* mutable_group(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::StateMap_StateGroup >*
      mutable_group();
  const ::android::os::statsd::StateMap_StateGroup& group(int index) const;
  ::android::os::statsd::StateMap_StateGroup* add_group();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::StateMap_StateGroup >&
      group() const;

  // @@protoc_insertion_point(class_scope:android.os.statsd.StateMap)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::StateMap_StateGroup > group_;
  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class State :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.State) */ {
 public:
  State();
  virtual ~State();

  State(const State& from);
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  inline State& operator=(State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }
  inline void Swap(State* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline State* New() const final {
    return CreateMaybeMessage<State>(nullptr);
  }

  State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<State>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const State& from);
  void MergeFrom(const State& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(State* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.State";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 3,
    kIdFieldNumber = 1,
    kAtomIdFieldNumber = 2,
  };
  // optional .android.os.statsd.StateMap map = 3;
  bool has_map() const;
  void clear_map();
  const ::android::os::statsd::StateMap& map() const;
  ::android::os::statsd::StateMap* release_map();
  ::android::os::statsd::StateMap* mutable_map();
  void set_allocated_map(::android::os::statsd::StateMap* map);

  // optional int64 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 atom_id = 2;
  bool has_atom_id() const;
  void clear_atom_id();
  ::PROTOBUF_NAMESPACE_ID::int32 atom_id() const;
  void set_atom_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.os.statsd.State)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::os::statsd::StateMap* map_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 atom_id_;
  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class MetricConditionLink :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.MetricConditionLink) */ {
 public:
  MetricConditionLink();
  virtual ~MetricConditionLink();

  MetricConditionLink(const MetricConditionLink& from);
  MetricConditionLink(MetricConditionLink&& from) noexcept
    : MetricConditionLink() {
    *this = ::std::move(from);
  }

  inline MetricConditionLink& operator=(const MetricConditionLink& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricConditionLink& operator=(MetricConditionLink&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MetricConditionLink& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetricConditionLink* internal_default_instance() {
    return reinterpret_cast<const MetricConditionLink*>(
               &_MetricConditionLink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MetricConditionLink& a, MetricConditionLink& b) {
    a.Swap(&b);
  }
  inline void Swap(MetricConditionLink* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetricConditionLink* New() const final {
    return CreateMaybeMessage<MetricConditionLink>(nullptr);
  }

  MetricConditionLink* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetricConditionLink>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MetricConditionLink& from);
  void MergeFrom(const MetricConditionLink& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MetricConditionLink* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.MetricConditionLink";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsInWhatFieldNumber = 2,
    kFieldsInConditionFieldNumber = 3,
    kConditionFieldNumber = 1,
  };
  // optional .android.os.statsd.FieldMatcher fields_in_what = 2;
  bool has_fields_in_what() const;
  void clear_fields_in_what();
  const ::android::os::statsd::FieldMatcher& fields_in_what() const;
  ::android::os::statsd::FieldMatcher* release_fields_in_what();
  ::android::os::statsd::FieldMatcher* mutable_fields_in_what();
  void set_allocated_fields_in_what(::android::os::statsd::FieldMatcher* fields_in_what);

  // optional .android.os.statsd.FieldMatcher fields_in_condition = 3;
  bool has_fields_in_condition() const;
  void clear_fields_in_condition();
  const ::android::os::statsd::FieldMatcher& fields_in_condition() const;
  ::android::os::statsd::FieldMatcher* release_fields_in_condition();
  ::android::os::statsd::FieldMatcher* mutable_fields_in_condition();
  void set_allocated_fields_in_condition(::android::os::statsd::FieldMatcher* fields_in_condition);

  // optional int64 condition = 1;
  bool has_condition() const;
  void clear_condition();
  ::PROTOBUF_NAMESPACE_ID::int64 condition() const;
  void set_condition(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:android.os.statsd.MetricConditionLink)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::os::statsd::FieldMatcher* fields_in_what_;
  ::android::os::statsd::FieldMatcher* fields_in_condition_;
  ::PROTOBUF_NAMESPACE_ID::int64 condition_;
  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class MetricStateLink :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.MetricStateLink) */ {
 public:
  MetricStateLink();
  virtual ~MetricStateLink();

  MetricStateLink(const MetricStateLink& from);
  MetricStateLink(MetricStateLink&& from) noexcept
    : MetricStateLink() {
    *this = ::std::move(from);
  }

  inline MetricStateLink& operator=(const MetricStateLink& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricStateLink& operator=(MetricStateLink&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MetricStateLink& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetricStateLink* internal_default_instance() {
    return reinterpret_cast<const MetricStateLink*>(
               &_MetricStateLink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MetricStateLink& a, MetricStateLink& b) {
    a.Swap(&b);
  }
  inline void Swap(MetricStateLink* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetricStateLink* New() const final {
    return CreateMaybeMessage<MetricStateLink>(nullptr);
  }

  MetricStateLink* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetricStateLink>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MetricStateLink& from);
  void MergeFrom(const MetricStateLink& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MetricStateLink* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.MetricStateLink";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsInWhatFieldNumber = 2,
    kFieldsInStateFieldNumber = 3,
    kStateAtomIdFieldNumber = 1,
  };
  // optional .android.os.statsd.FieldMatcher fields_in_what = 2;
  bool has_fields_in_what() const;
  void clear_fields_in_what();
  const ::android::os::statsd::FieldMatcher& fields_in_what() const;
  ::android::os::statsd::FieldMatcher* release_fields_in_what();
  ::android::os::statsd::FieldMatcher* mutable_fields_in_what();
  void set_allocated_fields_in_what(::android::os::statsd::FieldMatcher* fields_in_what);

  // optional .android.os.statsd.FieldMatcher fields_in_state = 3;
  bool has_fields_in_state() const;
  void clear_fields_in_state();
  const ::android::os::statsd::FieldMatcher& fields_in_state() const;
  ::android::os::statsd::FieldMatcher* release_fields_in_state();
  ::android::os::statsd::FieldMatcher* mutable_fields_in_state();
  void set_allocated_fields_in_state(::android::os::statsd::FieldMatcher* fields_in_state);

  // optional int32 state_atom_id = 1;
  bool has_state_atom_id() const;
  void clear_state_atom_id();
  ::PROTOBUF_NAMESPACE_ID::int32 state_atom_id() const;
  void set_state_atom_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.os.statsd.MetricStateLink)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::os::statsd::FieldMatcher* fields_in_what_;
  ::android::os::statsd::FieldMatcher* fields_in_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_atom_id_;
  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class FieldFilter :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.FieldFilter) */ {
 public:
  FieldFilter();
  virtual ~FieldFilter();

  FieldFilter(const FieldFilter& from);
  FieldFilter(FieldFilter&& from) noexcept
    : FieldFilter() {
    *this = ::std::move(from);
  }

  inline FieldFilter& operator=(const FieldFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldFilter& operator=(FieldFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FieldFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldFilter* internal_default_instance() {
    return reinterpret_cast<const FieldFilter*>(
               &_FieldFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(FieldFilter& a, FieldFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldFilter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldFilter* New() const final {
    return CreateMaybeMessage<FieldFilter>(nullptr);
  }

  FieldFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldFilter>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FieldFilter& from);
  void MergeFrom(const FieldFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FieldFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.FieldFilter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 2,
    kIncludeAllFieldNumber = 1,
  };
  // optional .android.os.statsd.FieldMatcher fields = 2;
  bool has_fields() const;
  void clear_fields();
  const ::android::os::statsd::FieldMatcher& fields() const;
  ::android::os::statsd::FieldMatcher* release_fields();
  ::android::os::statsd::FieldMatcher* mutable_fields();
  void set_allocated_fields(::android::os::statsd::FieldMatcher* fields);

  // optional bool include_all = 1 [default = false];
  bool has_include_all() const;
  void clear_include_all();
  bool include_all() const;
  void set_include_all(bool value);

  // @@protoc_insertion_point(class_scope:android.os.statsd.FieldFilter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::os::statsd::FieldMatcher* fields_;
  bool include_all_;
  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class UploadThreshold :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.UploadThreshold) */ {
 public:
  UploadThreshold();
  virtual ~UploadThreshold();

  UploadThreshold(const UploadThreshold& from);
  UploadThreshold(UploadThreshold&& from) noexcept
    : UploadThreshold() {
    *this = ::std::move(from);
  }

  inline UploadThreshold& operator=(const UploadThreshold& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadThreshold& operator=(UploadThreshold&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UploadThreshold& default_instance();

  enum ValueComparisonCase {
    kLtInt = 1,
    kGtInt = 2,
    kLtFloat = 3,
    kGtFloat = 4,
    kLteInt = 5,
    kGteInt = 6,
    VALUE_COMPARISON_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadThreshold* internal_default_instance() {
    return reinterpret_cast<const UploadThreshold*>(
               &_UploadThreshold_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(UploadThreshold& a, UploadThreshold& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadThreshold* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadThreshold* New() const final {
    return CreateMaybeMessage<UploadThreshold>(nullptr);
  }

  UploadThreshold* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadThreshold>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UploadThreshold& from);
  void MergeFrom(const UploadThreshold& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UploadThreshold* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.UploadThreshold";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLtIntFieldNumber = 1,
    kGtIntFieldNumber = 2,
    kLtFloatFieldNumber = 3,
    kGtFloatFieldNumber = 4,
    kLteIntFieldNumber = 5,
    kGteIntFieldNumber = 6,
  };
  // optional int64 lt_int = 1;
  bool has_lt_int() const;
  void clear_lt_int();
  ::PROTOBUF_NAMESPACE_ID::int64 lt_int() const;
  void set_lt_int(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 gt_int = 2;
  bool has_gt_int() const;
  void clear_gt_int();
  ::PROTOBUF_NAMESPACE_ID::int64 gt_int() const;
  void set_gt_int(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional float lt_float = 3;
  bool has_lt_float() const;
  void clear_lt_float();
  float lt_float() const;
  void set_lt_float(float value);

  // optional float gt_float = 4;
  bool has_gt_float() const;
  void clear_gt_float();
  float gt_float() const;
  void set_gt_float(float value);

  // optional int64 lte_int = 5;
  bool has_lte_int() const;
  void clear_lte_int();
  ::PROTOBUF_NAMESPACE_ID::int64 lte_int() const;
  void set_lte_int(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 gte_int = 6;
  bool has_gte_int() const;
  void clear_gte_int();
  ::PROTOBUF_NAMESPACE_ID::int64 gte_int() const;
  void set_gte_int(::PROTOBUF_NAMESPACE_ID::int64 value);

  void clear_value_comparison();
  ValueComparisonCase value_comparison_case() const;
  // @@protoc_insertion_point(class_scope:android.os.statsd.UploadThreshold)
 private:
  class _Internal;
  void set_has_lt_int();
  void set_has_gt_int();
  void set_has_lt_float();
  void set_has_gt_float();
  void set_has_lte_int();
  void set_has_gte_int();

  inline bool has_value_comparison() const;
  inline void clear_has_value_comparison();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union ValueComparisonUnion {
    ValueComparisonUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int64 lt_int_;
    ::PROTOBUF_NAMESPACE_ID::int64 gt_int_;
    float lt_float_;
    float gt_float_;
    ::PROTOBUF_NAMESPACE_ID::int64 lte_int_;
    ::PROTOBUF_NAMESPACE_ID::int64 gte_int_;
  } value_comparison_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class EventMetric :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.EventMetric) */ {
 public:
  EventMetric();
  virtual ~EventMetric();

  EventMetric(const EventMetric& from);
  EventMetric(EventMetric&& from) noexcept
    : EventMetric() {
    *this = ::std::move(from);
  }

  inline EventMetric& operator=(const EventMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventMetric& operator=(EventMetric&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const EventMetric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventMetric* internal_default_instance() {
    return reinterpret_cast<const EventMetric*>(
               &_EventMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(EventMetric& a, EventMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(EventMetric* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventMetric* New() const final {
    return CreateMaybeMessage<EventMetric>(nullptr);
  }

  EventMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventMetric>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EventMetric& from);
  void MergeFrom(const EventMetric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EventMetric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.EventMetric";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinksFieldNumber = 4,
    kIdFieldNumber = 1,
    kWhatFieldNumber = 2,
    kConditionFieldNumber = 3,
  };
  // repeated .android.os.statsd.MetricConditionLink links = 4;
  int links_size() const;
  void clear_links();
  ::android::os::statsd::MetricConditionLink* mutable_links(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricConditionLink >*
      mutable_links();
  const ::android::os::statsd::MetricConditionLink& links(int index) const;
  ::android::os::statsd::MetricConditionLink* add_links();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricConditionLink >&
      links() const;

  // optional int64 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 what = 2;
  bool has_what() const;
  void clear_what();
  ::PROTOBUF_NAMESPACE_ID::int64 what() const;
  void set_what(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 condition = 3;
  bool has_condition() const;
  void clear_condition();
  ::PROTOBUF_NAMESPACE_ID::int64 condition() const;
  void set_condition(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:android.os.statsd.EventMetric)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricConditionLink > links_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 what_;
  ::PROTOBUF_NAMESPACE_ID::int64 condition_;
  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class CountMetric :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.CountMetric) */ {
 public:
  CountMetric();
  virtual ~CountMetric();

  CountMetric(const CountMetric& from);
  CountMetric(CountMetric&& from) noexcept
    : CountMetric() {
    *this = ::std::move(from);
  }

  inline CountMetric& operator=(const CountMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline CountMetric& operator=(CountMetric&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CountMetric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CountMetric* internal_default_instance() {
    return reinterpret_cast<const CountMetric*>(
               &_CountMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CountMetric& a, CountMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(CountMetric* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CountMetric* New() const final {
    return CreateMaybeMessage<CountMetric>(nullptr);
  }

  CountMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CountMetric>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CountMetric& from);
  void MergeFrom(const CountMetric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CountMetric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.CountMetric";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinksFieldNumber = 6,
    kSliceByStateFieldNumber = 8,
    kStateLinkFieldNumber = 9,
    kDimensionsInWhatFieldNumber = 4,
    kDimensionsInConditionFieldNumber = 7,
    kThresholdFieldNumber = 10,
    kIdFieldNumber = 1,
    kWhatFieldNumber = 2,
    kConditionFieldNumber = 3,
    kBucketFieldNumber = 5,
    kSplitBucketForAppUpgradeFieldNumber = 11,
  };
  // repeated .android.os.statsd.MetricConditionLink links = 6;
  int links_size() const;
  void clear_links();
  ::android::os::statsd::MetricConditionLink* mutable_links(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricConditionLink >*
      mutable_links();
  const ::android::os::statsd::MetricConditionLink& links(int index) const;
  ::android::os::statsd::MetricConditionLink* add_links();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricConditionLink >&
      links() const;

  // repeated int64 slice_by_state = 8;
  int slice_by_state_size() const;
  void clear_slice_by_state();
  ::PROTOBUF_NAMESPACE_ID::int64 slice_by_state(int index) const;
  void set_slice_by_state(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_slice_by_state(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      slice_by_state() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_slice_by_state();

  // repeated .android.os.statsd.MetricStateLink state_link = 9;
  int state_link_size() const;
  void clear_state_link();
  ::android::os::statsd::MetricStateLink* mutable_state_link(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricStateLink >*
      mutable_state_link();
  const ::android::os::statsd::MetricStateLink& state_link(int index) const;
  ::android::os::statsd::MetricStateLink* add_state_link();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricStateLink >&
      state_link() const;

  // optional .android.os.statsd.FieldMatcher dimensions_in_what = 4;
  bool has_dimensions_in_what() const;
  void clear_dimensions_in_what();
  const ::android::os::statsd::FieldMatcher& dimensions_in_what() const;
  ::android::os::statsd::FieldMatcher* release_dimensions_in_what();
  ::android::os::statsd::FieldMatcher* mutable_dimensions_in_what();
  void set_allocated_dimensions_in_what(::android::os::statsd::FieldMatcher* dimensions_in_what);

  // optional .android.os.statsd.FieldMatcher dimensions_in_condition = 7 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_dimensions_in_condition() const;
  PROTOBUF_DEPRECATED void clear_dimensions_in_condition();
  PROTOBUF_DEPRECATED const ::android::os::statsd::FieldMatcher& dimensions_in_condition() const;
  PROTOBUF_DEPRECATED ::android::os::statsd::FieldMatcher* release_dimensions_in_condition();
  PROTOBUF_DEPRECATED ::android::os::statsd::FieldMatcher* mutable_dimensions_in_condition();
  PROTOBUF_DEPRECATED void set_allocated_dimensions_in_condition(::android::os::statsd::FieldMatcher* dimensions_in_condition);

  // optional .android.os.statsd.UploadThreshold threshold = 10;
  bool has_threshold() const;
  void clear_threshold();
  const ::android::os::statsd::UploadThreshold& threshold() const;
  ::android::os::statsd::UploadThreshold* release_threshold();
  ::android::os::statsd::UploadThreshold* mutable_threshold();
  void set_allocated_threshold(::android::os::statsd::UploadThreshold* threshold);

  // optional int64 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 what = 2;
  bool has_what() const;
  void clear_what();
  ::PROTOBUF_NAMESPACE_ID::int64 what() const;
  void set_what(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 condition = 3;
  bool has_condition() const;
  void clear_condition();
  ::PROTOBUF_NAMESPACE_ID::int64 condition() const;
  void set_condition(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .android.os.statsd.TimeUnit bucket = 5;
  bool has_bucket() const;
  void clear_bucket();
  ::android::os::statsd::TimeUnit bucket() const;
  void set_bucket(::android::os::statsd::TimeUnit value);

  // optional bool split_bucket_for_app_upgrade = 11 [default = true];
  bool has_split_bucket_for_app_upgrade() const;
  void clear_split_bucket_for_app_upgrade();
  bool split_bucket_for_app_upgrade() const;
  void set_split_bucket_for_app_upgrade(bool value);

  // @@protoc_insertion_point(class_scope:android.os.statsd.CountMetric)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricConditionLink > links_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > slice_by_state_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricStateLink > state_link_;
  ::android::os::statsd::FieldMatcher* dimensions_in_what_;
  ::android::os::statsd::FieldMatcher* dimensions_in_condition_;
  ::android::os::statsd::UploadThreshold* threshold_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 what_;
  ::PROTOBUF_NAMESPACE_ID::int64 condition_;
  int bucket_;
  bool split_bucket_for_app_upgrade_;
  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class DurationMetric :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.DurationMetric) */ {
 public:
  DurationMetric();
  virtual ~DurationMetric();

  DurationMetric(const DurationMetric& from);
  DurationMetric(DurationMetric&& from) noexcept
    : DurationMetric() {
    *this = ::std::move(from);
  }

  inline DurationMetric& operator=(const DurationMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline DurationMetric& operator=(DurationMetric&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DurationMetric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DurationMetric* internal_default_instance() {
    return reinterpret_cast<const DurationMetric*>(
               &_DurationMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(DurationMetric& a, DurationMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(DurationMetric* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DurationMetric* New() const final {
    return CreateMaybeMessage<DurationMetric>(nullptr);
  }

  DurationMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DurationMetric>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DurationMetric& from);
  void MergeFrom(const DurationMetric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DurationMetric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.DurationMetric";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DurationMetric_AggregationType AggregationType;
  static constexpr AggregationType SUM =
    DurationMetric_AggregationType_SUM;
  static constexpr AggregationType MAX_SPARSE =
    DurationMetric_AggregationType_MAX_SPARSE;
  static inline bool AggregationType_IsValid(int value) {
    return DurationMetric_AggregationType_IsValid(value);
  }
  static constexpr AggregationType AggregationType_MIN =
    DurationMetric_AggregationType_AggregationType_MIN;
  static constexpr AggregationType AggregationType_MAX =
    DurationMetric_AggregationType_AggregationType_MAX;
  static constexpr int AggregationType_ARRAYSIZE =
    DurationMetric_AggregationType_AggregationType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& AggregationType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AggregationType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AggregationType_Name.");
    return DurationMetric_AggregationType_Name(enum_t_value);
  }
  static inline bool AggregationType_Parse(const std::string& name,
      AggregationType* value) {
    return DurationMetric_AggregationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLinksFieldNumber = 4,
    kSliceByStateFieldNumber = 9,
    kStateLinkFieldNumber = 10,
    kDimensionsInWhatFieldNumber = 6,
    kDimensionsInConditionFieldNumber = 8,
    kThresholdFieldNumber = 11,
    kIdFieldNumber = 1,
    kWhatFieldNumber = 2,
    kConditionFieldNumber = 3,
    kBucketFieldNumber = 7,
    kAggregationTypeFieldNumber = 5,
    kSplitBucketForAppUpgradeFieldNumber = 12,
  };
  // repeated .android.os.statsd.MetricConditionLink links = 4;
  int links_size() const;
  void clear_links();
  ::android::os::statsd::MetricConditionLink* mutable_links(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricConditionLink >*
      mutable_links();
  const ::android::os::statsd::MetricConditionLink& links(int index) const;
  ::android::os::statsd::MetricConditionLink* add_links();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricConditionLink >&
      links() const;

  // repeated int64 slice_by_state = 9;
  int slice_by_state_size() const;
  void clear_slice_by_state();
  ::PROTOBUF_NAMESPACE_ID::int64 slice_by_state(int index) const;
  void set_slice_by_state(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_slice_by_state(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      slice_by_state() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_slice_by_state();

  // repeated .android.os.statsd.MetricStateLink state_link = 10;
  int state_link_size() const;
  void clear_state_link();
  ::android::os::statsd::MetricStateLink* mutable_state_link(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricStateLink >*
      mutable_state_link();
  const ::android::os::statsd::MetricStateLink& state_link(int index) const;
  ::android::os::statsd::MetricStateLink* add_state_link();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricStateLink >&
      state_link() const;

  // optional .android.os.statsd.FieldMatcher dimensions_in_what = 6;
  bool has_dimensions_in_what() const;
  void clear_dimensions_in_what();
  const ::android::os::statsd::FieldMatcher& dimensions_in_what() const;
  ::android::os::statsd::FieldMatcher* release_dimensions_in_what();
  ::android::os::statsd::FieldMatcher* mutable_dimensions_in_what();
  void set_allocated_dimensions_in_what(::android::os::statsd::FieldMatcher* dimensions_in_what);

  // optional .android.os.statsd.FieldMatcher dimensions_in_condition = 8 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_dimensions_in_condition() const;
  PROTOBUF_DEPRECATED void clear_dimensions_in_condition();
  PROTOBUF_DEPRECATED const ::android::os::statsd::FieldMatcher& dimensions_in_condition() const;
  PROTOBUF_DEPRECATED ::android::os::statsd::FieldMatcher* release_dimensions_in_condition();
  PROTOBUF_DEPRECATED ::android::os::statsd::FieldMatcher* mutable_dimensions_in_condition();
  PROTOBUF_DEPRECATED void set_allocated_dimensions_in_condition(::android::os::statsd::FieldMatcher* dimensions_in_condition);

  // optional .android.os.statsd.UploadThreshold threshold = 11;
  bool has_threshold() const;
  void clear_threshold();
  const ::android::os::statsd::UploadThreshold& threshold() const;
  ::android::os::statsd::UploadThreshold* release_threshold();
  ::android::os::statsd::UploadThreshold* mutable_threshold();
  void set_allocated_threshold(::android::os::statsd::UploadThreshold* threshold);

  // optional int64 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 what = 2;
  bool has_what() const;
  void clear_what();
  ::PROTOBUF_NAMESPACE_ID::int64 what() const;
  void set_what(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 condition = 3;
  bool has_condition() const;
  void clear_condition();
  ::PROTOBUF_NAMESPACE_ID::int64 condition() const;
  void set_condition(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .android.os.statsd.TimeUnit bucket = 7;
  bool has_bucket() const;
  void clear_bucket();
  ::android::os::statsd::TimeUnit bucket() const;
  void set_bucket(::android::os::statsd::TimeUnit value);

  // optional .android.os.statsd.DurationMetric.AggregationType aggregation_type = 5 [default = SUM];
  bool has_aggregation_type() const;
  void clear_aggregation_type();
  ::android::os::statsd::DurationMetric_AggregationType aggregation_type() const;
  void set_aggregation_type(::android::os::statsd::DurationMetric_AggregationType value);

  // optional bool split_bucket_for_app_upgrade = 12 [default = true];
  bool has_split_bucket_for_app_upgrade() const;
  void clear_split_bucket_for_app_upgrade();
  bool split_bucket_for_app_upgrade() const;
  void set_split_bucket_for_app_upgrade(bool value);

  // @@protoc_insertion_point(class_scope:android.os.statsd.DurationMetric)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricConditionLink > links_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > slice_by_state_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricStateLink > state_link_;
  ::android::os::statsd::FieldMatcher* dimensions_in_what_;
  ::android::os::statsd::FieldMatcher* dimensions_in_condition_;
  ::android::os::statsd::UploadThreshold* threshold_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 what_;
  ::PROTOBUF_NAMESPACE_ID::int64 condition_;
  int bucket_;
  int aggregation_type_;
  bool split_bucket_for_app_upgrade_;
  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class GaugeMetric :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.GaugeMetric) */ {
 public:
  GaugeMetric();
  virtual ~GaugeMetric();

  GaugeMetric(const GaugeMetric& from);
  GaugeMetric(GaugeMetric&& from) noexcept
    : GaugeMetric() {
    *this = ::std::move(from);
  }

  inline GaugeMetric& operator=(const GaugeMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline GaugeMetric& operator=(GaugeMetric&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GaugeMetric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GaugeMetric* internal_default_instance() {
    return reinterpret_cast<const GaugeMetric*>(
               &_GaugeMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GaugeMetric& a, GaugeMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(GaugeMetric* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GaugeMetric* New() const final {
    return CreateMaybeMessage<GaugeMetric>(nullptr);
  }

  GaugeMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GaugeMetric>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GaugeMetric& from);
  void MergeFrom(const GaugeMetric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GaugeMetric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.GaugeMetric";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GaugeMetric_SamplingType SamplingType;
  static constexpr SamplingType RANDOM_ONE_SAMPLE =
    GaugeMetric_SamplingType_RANDOM_ONE_SAMPLE;
  PROTOBUF_DEPRECATED static constexpr SamplingType ALL_CONDITION_CHANGES =
    GaugeMetric_SamplingType_ALL_CONDITION_CHANGES;
  static constexpr SamplingType CONDITION_CHANGE_TO_TRUE =
    GaugeMetric_SamplingType_CONDITION_CHANGE_TO_TRUE;
  static constexpr SamplingType FIRST_N_SAMPLES =
    GaugeMetric_SamplingType_FIRST_N_SAMPLES;
  static inline bool SamplingType_IsValid(int value) {
    return GaugeMetric_SamplingType_IsValid(value);
  }
  static constexpr SamplingType SamplingType_MIN =
    GaugeMetric_SamplingType_SamplingType_MIN;
  static constexpr SamplingType SamplingType_MAX =
    GaugeMetric_SamplingType_SamplingType_MAX;
  static constexpr int SamplingType_ARRAYSIZE =
    GaugeMetric_SamplingType_SamplingType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& SamplingType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SamplingType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SamplingType_Name.");
    return GaugeMetric_SamplingType_Name(enum_t_value);
  }
  static inline bool SamplingType_Parse(const std::string& name,
      SamplingType* value) {
    return GaugeMetric_SamplingType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLinksFieldNumber = 7,
    kGaugeFieldsFilterFieldNumber = 3,
    kDimensionsInWhatFieldNumber = 5,
    kDimensionsInConditionFieldNumber = 8,
    kIdFieldNumber = 1,
    kWhatFieldNumber = 2,
    kConditionFieldNumber = 4,
    kMinBucketSizeNanosFieldNumber = 10,
    kTriggerEventFieldNumber = 12,
    kBucketFieldNumber = 6,
    kSplitBucketForAppUpgradeFieldNumber = 14,
    kMaxNumGaugeAtomsPerBucketFieldNumber = 11,
    kSamplingTypeFieldNumber = 9,
    kMaxPullDelaySecFieldNumber = 13,
  };
  // repeated .android.os.statsd.MetricConditionLink links = 7;
  int links_size() const;
  void clear_links();
  ::android::os::statsd::MetricConditionLink* mutable_links(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricConditionLink >*
      mutable_links();
  const ::android::os::statsd::MetricConditionLink& links(int index) const;
  ::android::os::statsd::MetricConditionLink* add_links();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricConditionLink >&
      links() const;

  // optional .android.os.statsd.FieldFilter gauge_fields_filter = 3;
  bool has_gauge_fields_filter() const;
  void clear_gauge_fields_filter();
  const ::android::os::statsd::FieldFilter& gauge_fields_filter() const;
  ::android::os::statsd::FieldFilter* release_gauge_fields_filter();
  ::android::os::statsd::FieldFilter* mutable_gauge_fields_filter();
  void set_allocated_gauge_fields_filter(::android::os::statsd::FieldFilter* gauge_fields_filter);

  // optional .android.os.statsd.FieldMatcher dimensions_in_what = 5;
  bool has_dimensions_in_what() const;
  void clear_dimensions_in_what();
  const ::android::os::statsd::FieldMatcher& dimensions_in_what() const;
  ::android::os::statsd::FieldMatcher* release_dimensions_in_what();
  ::android::os::statsd::FieldMatcher* mutable_dimensions_in_what();
  void set_allocated_dimensions_in_what(::android::os::statsd::FieldMatcher* dimensions_in_what);

  // optional .android.os.statsd.FieldMatcher dimensions_in_condition = 8 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_dimensions_in_condition() const;
  PROTOBUF_DEPRECATED void clear_dimensions_in_condition();
  PROTOBUF_DEPRECATED const ::android::os::statsd::FieldMatcher& dimensions_in_condition() const;
  PROTOBUF_DEPRECATED ::android::os::statsd::FieldMatcher* release_dimensions_in_condition();
  PROTOBUF_DEPRECATED ::android::os::statsd::FieldMatcher* mutable_dimensions_in_condition();
  PROTOBUF_DEPRECATED void set_allocated_dimensions_in_condition(::android::os::statsd::FieldMatcher* dimensions_in_condition);

  // optional int64 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 what = 2;
  bool has_what() const;
  void clear_what();
  ::PROTOBUF_NAMESPACE_ID::int64 what() const;
  void set_what(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 condition = 4;
  bool has_condition() const;
  void clear_condition();
  ::PROTOBUF_NAMESPACE_ID::int64 condition() const;
  void set_condition(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 min_bucket_size_nanos = 10;
  bool has_min_bucket_size_nanos() const;
  void clear_min_bucket_size_nanos();
  ::PROTOBUF_NAMESPACE_ID::int64 min_bucket_size_nanos() const;
  void set_min_bucket_size_nanos(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 trigger_event = 12;
  bool has_trigger_event() const;
  void clear_trigger_event();
  ::PROTOBUF_NAMESPACE_ID::int64 trigger_event() const;
  void set_trigger_event(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .android.os.statsd.TimeUnit bucket = 6;
  bool has_bucket() const;
  void clear_bucket();
  ::android::os::statsd::TimeUnit bucket() const;
  void set_bucket(::android::os::statsd::TimeUnit value);

  // optional bool split_bucket_for_app_upgrade = 14 [default = true];
  bool has_split_bucket_for_app_upgrade() const;
  void clear_split_bucket_for_app_upgrade();
  bool split_bucket_for_app_upgrade() const;
  void set_split_bucket_for_app_upgrade(bool value);

  // optional int64 max_num_gauge_atoms_per_bucket = 11 [default = 10];
  bool has_max_num_gauge_atoms_per_bucket() const;
  void clear_max_num_gauge_atoms_per_bucket();
  ::PROTOBUF_NAMESPACE_ID::int64 max_num_gauge_atoms_per_bucket() const;
  void set_max_num_gauge_atoms_per_bucket(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .android.os.statsd.GaugeMetric.SamplingType sampling_type = 9 [default = RANDOM_ONE_SAMPLE];
  bool has_sampling_type() const;
  void clear_sampling_type();
  ::android::os::statsd::GaugeMetric_SamplingType sampling_type() const;
  void set_sampling_type(::android::os::statsd::GaugeMetric_SamplingType value);

  // optional int32 max_pull_delay_sec = 13 [default = 30];
  bool has_max_pull_delay_sec() const;
  void clear_max_pull_delay_sec();
  ::PROTOBUF_NAMESPACE_ID::int32 max_pull_delay_sec() const;
  void set_max_pull_delay_sec(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.os.statsd.GaugeMetric)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricConditionLink > links_;
  ::android::os::statsd::FieldFilter* gauge_fields_filter_;
  ::android::os::statsd::FieldMatcher* dimensions_in_what_;
  ::android::os::statsd::FieldMatcher* dimensions_in_condition_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 what_;
  ::PROTOBUF_NAMESPACE_ID::int64 condition_;
  ::PROTOBUF_NAMESPACE_ID::int64 min_bucket_size_nanos_;
  ::PROTOBUF_NAMESPACE_ID::int64 trigger_event_;
  int bucket_;
  bool split_bucket_for_app_upgrade_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_num_gauge_atoms_per_bucket_;
  int sampling_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_pull_delay_sec_;
  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ValueMetric :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.ValueMetric) */ {
 public:
  ValueMetric();
  virtual ~ValueMetric();

  ValueMetric(const ValueMetric& from);
  ValueMetric(ValueMetric&& from) noexcept
    : ValueMetric() {
    *this = ::std::move(from);
  }

  inline ValueMetric& operator=(const ValueMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValueMetric& operator=(ValueMetric&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ValueMetric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueMetric* internal_default_instance() {
    return reinterpret_cast<const ValueMetric*>(
               &_ValueMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ValueMetric& a, ValueMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(ValueMetric* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValueMetric* New() const final {
    return CreateMaybeMessage<ValueMetric>(nullptr);
  }

  ValueMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValueMetric>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ValueMetric& from);
  void MergeFrom(const ValueMetric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ValueMetric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.ValueMetric";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ValueMetric_AggregationType AggregationType;
  static constexpr AggregationType SUM =
    ValueMetric_AggregationType_SUM;
  static constexpr AggregationType MIN =
    ValueMetric_AggregationType_MIN;
  static constexpr AggregationType MAX =
    ValueMetric_AggregationType_MAX;
  static constexpr AggregationType AVG =
    ValueMetric_AggregationType_AVG;
  static inline bool AggregationType_IsValid(int value) {
    return ValueMetric_AggregationType_IsValid(value);
  }
  static constexpr AggregationType AggregationType_MIN =
    ValueMetric_AggregationType_AggregationType_MIN;
  static constexpr AggregationType AggregationType_MAX =
    ValueMetric_AggregationType_AggregationType_MAX;
  static constexpr int AggregationType_ARRAYSIZE =
    ValueMetric_AggregationType_AggregationType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& AggregationType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AggregationType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AggregationType_Name.");
    return ValueMetric_AggregationType_Name(enum_t_value);
  }
  static inline bool AggregationType_Parse(const std::string& name,
      AggregationType* value) {
    return ValueMetric_AggregationType_Parse(name, value);
  }

  typedef ValueMetric_ValueDirection ValueDirection;
  static constexpr ValueDirection UNKNOWN =
    ValueMetric_ValueDirection_UNKNOWN;
  static constexpr ValueDirection INCREASING =
    ValueMetric_ValueDirection_INCREASING;
  static constexpr ValueDirection DECREASING =
    ValueMetric_ValueDirection_DECREASING;
  static constexpr ValueDirection ANY =
    ValueMetric_ValueDirection_ANY;
  static inline bool ValueDirection_IsValid(int value) {
    return ValueMetric_ValueDirection_IsValid(value);
  }
  static constexpr ValueDirection ValueDirection_MIN =
    ValueMetric_ValueDirection_ValueDirection_MIN;
  static constexpr ValueDirection ValueDirection_MAX =
    ValueMetric_ValueDirection_ValueDirection_MAX;
  static constexpr int ValueDirection_ARRAYSIZE =
    ValueMetric_ValueDirection_ValueDirection_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ValueDirection_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ValueDirection>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ValueDirection_Name.");
    return ValueMetric_ValueDirection_Name(enum_t_value);
  }
  static inline bool ValueDirection_Parse(const std::string& name,
      ValueDirection* value) {
    return ValueMetric_ValueDirection_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLinksFieldNumber = 7,
    kSliceByStateFieldNumber = 18,
    kStateLinkFieldNumber = 19,
    kValueFieldFieldNumber = 3,
    kDimensionsInWhatFieldNumber = 5,
    kDimensionsInConditionFieldNumber = 9,
    kThresholdFieldNumber = 20,
    kIdFieldNumber = 1,
    kWhatFieldNumber = 2,
    kConditionFieldNumber = 4,
    kMinBucketSizeNanosFieldNumber = 10,
    kBucketFieldNumber = 6,
    kUseAbsoluteValueOnResetFieldNumber = 11,
    kUseDiffFieldNumber = 12,
    kUseZeroDefaultBaseFieldNumber = 15,
    kAggregationTypeFieldNumber = 8,
    kValueDirectionFieldNumber = 13,
    kSkipZeroDiffOutputFieldNumber = 14,
    kSplitBucketForAppUpgradeFieldNumber = 17,
    kMaxPullDelaySecFieldNumber = 16,
  };
  // repeated .android.os.statsd.MetricConditionLink links = 7;
  int links_size() const;
  void clear_links();
  ::android::os::statsd::MetricConditionLink* mutable_links(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricConditionLink >*
      mutable_links();
  const ::android::os::statsd::MetricConditionLink& links(int index) const;
  ::android::os::statsd::MetricConditionLink* add_links();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricConditionLink >&
      links() const;

  // repeated int64 slice_by_state = 18;
  int slice_by_state_size() const;
  void clear_slice_by_state();
  ::PROTOBUF_NAMESPACE_ID::int64 slice_by_state(int index) const;
  void set_slice_by_state(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_slice_by_state(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      slice_by_state() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_slice_by_state();

  // repeated .android.os.statsd.MetricStateLink state_link = 19;
  int state_link_size() const;
  void clear_state_link();
  ::android::os::statsd::MetricStateLink* mutable_state_link(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricStateLink >*
      mutable_state_link();
  const ::android::os::statsd::MetricStateLink& state_link(int index) const;
  ::android::os::statsd::MetricStateLink* add_state_link();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricStateLink >&
      state_link() const;

  // optional .android.os.statsd.FieldMatcher value_field = 3;
  bool has_value_field() const;
  void clear_value_field();
  const ::android::os::statsd::FieldMatcher& value_field() const;
  ::android::os::statsd::FieldMatcher* release_value_field();
  ::android::os::statsd::FieldMatcher* mutable_value_field();
  void set_allocated_value_field(::android::os::statsd::FieldMatcher* value_field);

  // optional .android.os.statsd.FieldMatcher dimensions_in_what = 5;
  bool has_dimensions_in_what() const;
  void clear_dimensions_in_what();
  const ::android::os::statsd::FieldMatcher& dimensions_in_what() const;
  ::android::os::statsd::FieldMatcher* release_dimensions_in_what();
  ::android::os::statsd::FieldMatcher* mutable_dimensions_in_what();
  void set_allocated_dimensions_in_what(::android::os::statsd::FieldMatcher* dimensions_in_what);

  // optional .android.os.statsd.FieldMatcher dimensions_in_condition = 9 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_dimensions_in_condition() const;
  PROTOBUF_DEPRECATED void clear_dimensions_in_condition();
  PROTOBUF_DEPRECATED const ::android::os::statsd::FieldMatcher& dimensions_in_condition() const;
  PROTOBUF_DEPRECATED ::android::os::statsd::FieldMatcher* release_dimensions_in_condition();
  PROTOBUF_DEPRECATED ::android::os::statsd::FieldMatcher* mutable_dimensions_in_condition();
  PROTOBUF_DEPRECATED void set_allocated_dimensions_in_condition(::android::os::statsd::FieldMatcher* dimensions_in_condition);

  // optional .android.os.statsd.UploadThreshold threshold = 20;
  bool has_threshold() const;
  void clear_threshold();
  const ::android::os::statsd::UploadThreshold& threshold() const;
  ::android::os::statsd::UploadThreshold* release_threshold();
  ::android::os::statsd::UploadThreshold* mutable_threshold();
  void set_allocated_threshold(::android::os::statsd::UploadThreshold* threshold);

  // optional int64 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 what = 2;
  bool has_what() const;
  void clear_what();
  ::PROTOBUF_NAMESPACE_ID::int64 what() const;
  void set_what(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 condition = 4;
  bool has_condition() const;
  void clear_condition();
  ::PROTOBUF_NAMESPACE_ID::int64 condition() const;
  void set_condition(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 min_bucket_size_nanos = 10;
  bool has_min_bucket_size_nanos() const;
  void clear_min_bucket_size_nanos();
  ::PROTOBUF_NAMESPACE_ID::int64 min_bucket_size_nanos() const;
  void set_min_bucket_size_nanos(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .android.os.statsd.TimeUnit bucket = 6;
  bool has_bucket() const;
  void clear_bucket();
  ::android::os::statsd::TimeUnit bucket() const;
  void set_bucket(::android::os::statsd::TimeUnit value);

  // optional bool use_absolute_value_on_reset = 11 [default = false];
  bool has_use_absolute_value_on_reset() const;
  void clear_use_absolute_value_on_reset();
  bool use_absolute_value_on_reset() const;
  void set_use_absolute_value_on_reset(bool value);

  // optional bool use_diff = 12;
  bool has_use_diff() const;
  void clear_use_diff();
  bool use_diff() const;
  void set_use_diff(bool value);

  // optional bool use_zero_default_base = 15 [default = false];
  bool has_use_zero_default_base() const;
  void clear_use_zero_default_base();
  bool use_zero_default_base() const;
  void set_use_zero_default_base(bool value);

  // optional .android.os.statsd.ValueMetric.AggregationType aggregation_type = 8 [default = SUM];
  bool has_aggregation_type() const;
  void clear_aggregation_type();
  ::android::os::statsd::ValueMetric_AggregationType aggregation_type() const;
  void set_aggregation_type(::android::os::statsd::ValueMetric_AggregationType value);

  // optional .android.os.statsd.ValueMetric.ValueDirection value_direction = 13 [default = INCREASING];
  bool has_value_direction() const;
  void clear_value_direction();
  ::android::os::statsd::ValueMetric_ValueDirection value_direction() const;
  void set_value_direction(::android::os::statsd::ValueMetric_ValueDirection value);

  // optional bool skip_zero_diff_output = 14 [default = true];
  bool has_skip_zero_diff_output() const;
  void clear_skip_zero_diff_output();
  bool skip_zero_diff_output() const;
  void set_skip_zero_diff_output(bool value);

  // optional bool split_bucket_for_app_upgrade = 17 [default = true];
  bool has_split_bucket_for_app_upgrade() const;
  void clear_split_bucket_for_app_upgrade();
  bool split_bucket_for_app_upgrade() const;
  void set_split_bucket_for_app_upgrade(bool value);

  // optional int32 max_pull_delay_sec = 16 [default = 30];
  bool has_max_pull_delay_sec() const;
  void clear_max_pull_delay_sec();
  ::PROTOBUF_NAMESPACE_ID::int32 max_pull_delay_sec() const;
  void set_max_pull_delay_sec(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.os.statsd.ValueMetric)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricConditionLink > links_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > slice_by_state_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricStateLink > state_link_;
  ::android::os::statsd::FieldMatcher* value_field_;
  ::android::os::statsd::FieldMatcher* dimensions_in_what_;
  ::android::os::statsd::FieldMatcher* dimensions_in_condition_;
  ::android::os::statsd::UploadThreshold* threshold_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 what_;
  ::PROTOBUF_NAMESPACE_ID::int64 condition_;
  ::PROTOBUF_NAMESPACE_ID::int64 min_bucket_size_nanos_;
  int bucket_;
  bool use_absolute_value_on_reset_;
  bool use_diff_;
  bool use_zero_default_base_;
  int aggregation_type_;
  int value_direction_;
  bool skip_zero_diff_output_;
  bool split_bucket_for_app_upgrade_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_pull_delay_sec_;
  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class Alert :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.Alert) */ {
 public:
  Alert();
  virtual ~Alert();

  Alert(const Alert& from);
  Alert(Alert&& from) noexcept
    : Alert() {
    *this = ::std::move(from);
  }

  inline Alert& operator=(const Alert& from) {
    CopyFrom(from);
    return *this;
  }
  inline Alert& operator=(Alert&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Alert& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Alert* internal_default_instance() {
    return reinterpret_cast<const Alert*>(
               &_Alert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Alert& a, Alert& b) {
    a.Swap(&b);
  }
  inline void Swap(Alert* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Alert* New() const final {
    return CreateMaybeMessage<Alert>(nullptr);
  }

  Alert* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Alert>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Alert& from);
  void MergeFrom(const Alert& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Alert* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.Alert";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kMetricIdFieldNumber = 2,
    kNumBucketsFieldNumber = 3,
    kRefractoryPeriodSecsFieldNumber = 4,
    kTriggerIfSumGtFieldNumber = 5,
  };
  // optional int64 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 metric_id = 2;
  bool has_metric_id() const;
  void clear_metric_id();
  ::PROTOBUF_NAMESPACE_ID::int64 metric_id() const;
  void set_metric_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 num_buckets = 3;
  bool has_num_buckets() const;
  void clear_num_buckets();
  ::PROTOBUF_NAMESPACE_ID::int32 num_buckets() const;
  void set_num_buckets(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 refractory_period_secs = 4;
  bool has_refractory_period_secs() const;
  void clear_refractory_period_secs();
  ::PROTOBUF_NAMESPACE_ID::int32 refractory_period_secs() const;
  void set_refractory_period_secs(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional double trigger_if_sum_gt = 5;
  bool has_trigger_if_sum_gt() const;
  void clear_trigger_if_sum_gt();
  double trigger_if_sum_gt() const;
  void set_trigger_if_sum_gt(double value);

  // @@protoc_insertion_point(class_scope:android.os.statsd.Alert)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 metric_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_buckets_;
  ::PROTOBUF_NAMESPACE_ID::int32 refractory_period_secs_;
  double trigger_if_sum_gt_;
  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class Alarm :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.Alarm) */ {
 public:
  Alarm();
  virtual ~Alarm();

  Alarm(const Alarm& from);
  Alarm(Alarm&& from) noexcept
    : Alarm() {
    *this = ::std::move(from);
  }

  inline Alarm& operator=(const Alarm& from) {
    CopyFrom(from);
    return *this;
  }
  inline Alarm& operator=(Alarm&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Alarm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Alarm* internal_default_instance() {
    return reinterpret_cast<const Alarm*>(
               &_Alarm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Alarm& a, Alarm& b) {
    a.Swap(&b);
  }
  inline void Swap(Alarm* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Alarm* New() const final {
    return CreateMaybeMessage<Alarm>(nullptr);
  }

  Alarm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Alarm>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Alarm& from);
  void MergeFrom(const Alarm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Alarm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.Alarm";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kOffsetMillisFieldNumber = 2,
    kPeriodMillisFieldNumber = 3,
  };
  // optional int64 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 offset_millis = 2;
  bool has_offset_millis() const;
  void clear_offset_millis();
  ::PROTOBUF_NAMESPACE_ID::int64 offset_millis() const;
  void set_offset_millis(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 period_millis = 3;
  bool has_period_millis() const;
  void clear_period_millis();
  ::PROTOBUF_NAMESPACE_ID::int64 period_millis() const;
  void set_period_millis(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:android.os.statsd.Alarm)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_millis_;
  ::PROTOBUF_NAMESPACE_ID::int64 period_millis_;
  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class IncidentdDetails :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.IncidentdDetails) */ {
 public:
  IncidentdDetails();
  virtual ~IncidentdDetails();

  IncidentdDetails(const IncidentdDetails& from);
  IncidentdDetails(IncidentdDetails&& from) noexcept
    : IncidentdDetails() {
    *this = ::std::move(from);
  }

  inline IncidentdDetails& operator=(const IncidentdDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncidentdDetails& operator=(IncidentdDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IncidentdDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IncidentdDetails* internal_default_instance() {
    return reinterpret_cast<const IncidentdDetails*>(
               &_IncidentdDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(IncidentdDetails& a, IncidentdDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(IncidentdDetails* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IncidentdDetails* New() const final {
    return CreateMaybeMessage<IncidentdDetails>(nullptr);
  }

  IncidentdDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IncidentdDetails>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IncidentdDetails& from);
  void MergeFrom(const IncidentdDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IncidentdDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.IncidentdDetails";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef IncidentdDetails_Destination Destination;
  static constexpr Destination AUTOMATIC =
    IncidentdDetails_Destination_AUTOMATIC;
  static constexpr Destination EXPLICIT =
    IncidentdDetails_Destination_EXPLICIT;
  static inline bool Destination_IsValid(int value) {
    return IncidentdDetails_Destination_IsValid(value);
  }
  static constexpr Destination Destination_MIN =
    IncidentdDetails_Destination_Destination_MIN;
  static constexpr Destination Destination_MAX =
    IncidentdDetails_Destination_Destination_MAX;
  static constexpr int Destination_ARRAYSIZE =
    IncidentdDetails_Destination_Destination_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Destination_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Destination>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Destination_Name.");
    return IncidentdDetails_Destination_Name(enum_t_value);
  }
  static inline bool Destination_Parse(const std::string& name,
      Destination* value) {
    return IncidentdDetails_Destination_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSectionFieldNumber = 1,
    kReceiverPkgFieldNumber = 3,
    kReceiverClsFieldNumber = 4,
    kAlertDescriptionFieldNumber = 5,
    kDestFieldNumber = 2,
  };
  // repeated int32 section = 1;
  int section_size() const;
  void clear_section();
  ::PROTOBUF_NAMESPACE_ID::int32 section(int index) const;
  void set_section(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_section(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      section() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_section();

  // optional string receiver_pkg = 3;
  bool has_receiver_pkg() const;
  void clear_receiver_pkg();
  const std::string& receiver_pkg() const;
  void set_receiver_pkg(const std::string& value);
  void set_receiver_pkg(std::string&& value);
  void set_receiver_pkg(const char* value);
  void set_receiver_pkg(const char* value, size_t size);
  std::string* mutable_receiver_pkg();
  std::string* release_receiver_pkg();
  void set_allocated_receiver_pkg(std::string* receiver_pkg);

  // optional string receiver_cls = 4;
  bool has_receiver_cls() const;
  void clear_receiver_cls();
  const std::string& receiver_cls() const;
  void set_receiver_cls(const std::string& value);
  void set_receiver_cls(std::string&& value);
  void set_receiver_cls(const char* value);
  void set_receiver_cls(const char* value, size_t size);
  std::string* mutable_receiver_cls();
  std::string* release_receiver_cls();
  void set_allocated_receiver_cls(std::string* receiver_cls);

  // optional string alert_description = 5;
  bool has_alert_description() const;
  void clear_alert_description();
  const std::string& alert_description() const;
  void set_alert_description(const std::string& value);
  void set_alert_description(std::string&& value);
  void set_alert_description(const char* value);
  void set_alert_description(const char* value, size_t size);
  std::string* mutable_alert_description();
  std::string* release_alert_description();
  void set_allocated_alert_description(std::string* alert_description);

  // optional .android.os.statsd.IncidentdDetails.Destination dest = 2;
  bool has_dest() const;
  void clear_dest();
  ::android::os::statsd::IncidentdDetails_Destination dest() const;
  void set_dest(::android::os::statsd::IncidentdDetails_Destination value);

  // @@protoc_insertion_point(class_scope:android.os.statsd.IncidentdDetails)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > section_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_pkg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_cls_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alert_description_;
  int dest_;
  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PerfettoDetails :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.PerfettoDetails) */ {
 public:
  PerfettoDetails();
  virtual ~PerfettoDetails();

  PerfettoDetails(const PerfettoDetails& from);
  PerfettoDetails(PerfettoDetails&& from) noexcept
    : PerfettoDetails() {
    *this = ::std::move(from);
  }

  inline PerfettoDetails& operator=(const PerfettoDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerfettoDetails& operator=(PerfettoDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerfettoDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerfettoDetails* internal_default_instance() {
    return reinterpret_cast<const PerfettoDetails*>(
               &_PerfettoDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(PerfettoDetails& a, PerfettoDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(PerfettoDetails* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerfettoDetails* New() const final {
    return CreateMaybeMessage<PerfettoDetails>(nullptr);
  }

  PerfettoDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerfettoDetails>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerfettoDetails& from);
  void MergeFrom(const PerfettoDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerfettoDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.PerfettoDetails";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTraceConfigFieldNumber = 1,
  };
  // optional bytes trace_config = 1;
  bool has_trace_config() const;
  void clear_trace_config();
  const std::string& trace_config() const;
  void set_trace_config(const std::string& value);
  void set_trace_config(std::string&& value);
  void set_trace_config(const char* value);
  void set_trace_config(const void* value, size_t size);
  std::string* mutable_trace_config();
  std::string* release_trace_config();
  void set_allocated_trace_config(std::string* trace_config);

  // @@protoc_insertion_point(class_scope:android.os.statsd.PerfettoDetails)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_config_;
  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class BroadcastSubscriberDetails :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.BroadcastSubscriberDetails) */ {
 public:
  BroadcastSubscriberDetails();
  virtual ~BroadcastSubscriberDetails();

  BroadcastSubscriberDetails(const BroadcastSubscriberDetails& from);
  BroadcastSubscriberDetails(BroadcastSubscriberDetails&& from) noexcept
    : BroadcastSubscriberDetails() {
    *this = ::std::move(from);
  }

  inline BroadcastSubscriberDetails& operator=(const BroadcastSubscriberDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastSubscriberDetails& operator=(BroadcastSubscriberDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BroadcastSubscriberDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BroadcastSubscriberDetails* internal_default_instance() {
    return reinterpret_cast<const BroadcastSubscriberDetails*>(
               &_BroadcastSubscriberDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(BroadcastSubscriberDetails& a, BroadcastSubscriberDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastSubscriberDetails* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BroadcastSubscriberDetails* New() const final {
    return CreateMaybeMessage<BroadcastSubscriberDetails>(nullptr);
  }

  BroadcastSubscriberDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BroadcastSubscriberDetails>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BroadcastSubscriberDetails& from);
  void MergeFrom(const BroadcastSubscriberDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BroadcastSubscriberDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.BroadcastSubscriberDetails";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCookieFieldNumber = 2,
    kSubscriberIdFieldNumber = 1,
  };
  // repeated string cookie = 2;
  int cookie_size() const;
  void clear_cookie();
  const std::string& cookie(int index) const;
  std::string* mutable_cookie(int index);
  void set_cookie(int index, const std::string& value);
  void set_cookie(int index, std::string&& value);
  void set_cookie(int index, const char* value);
  void set_cookie(int index, const char* value, size_t size);
  std::string* add_cookie();
  void add_cookie(const std::string& value);
  void add_cookie(std::string&& value);
  void add_cookie(const char* value);
  void add_cookie(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cookie() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cookie();

  // optional int64 subscriber_id = 1;
  bool has_subscriber_id() const;
  void clear_subscriber_id();
  ::PROTOBUF_NAMESPACE_ID::int64 subscriber_id() const;
  void set_subscriber_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:android.os.statsd.BroadcastSubscriberDetails)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cookie_;
  ::PROTOBUF_NAMESPACE_ID::int64 subscriber_id_;
  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class Subscription :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.Subscription) */ {
 public:
  Subscription();
  virtual ~Subscription();

  Subscription(const Subscription& from);
  Subscription(Subscription&& from) noexcept
    : Subscription() {
    *this = ::std::move(from);
  }

  inline Subscription& operator=(const Subscription& from) {
    CopyFrom(from);
    return *this;
  }
  inline Subscription& operator=(Subscription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Subscription& default_instance();

  enum SubscriberInformationCase {
    kIncidentdDetails = 4,
    kPerfettoDetails = 5,
    kBroadcastSubscriberDetails = 6,
    SUBSCRIBER_INFORMATION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Subscription* internal_default_instance() {
    return reinterpret_cast<const Subscription*>(
               &_Subscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Subscription& a, Subscription& b) {
    a.Swap(&b);
  }
  inline void Swap(Subscription* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Subscription* New() const final {
    return CreateMaybeMessage<Subscription>(nullptr);
  }

  Subscription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Subscription>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Subscription& from);
  void MergeFrom(const Subscription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Subscription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.Subscription";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Subscription_RuleType RuleType;
  static constexpr RuleType RULE_TYPE_UNSPECIFIED =
    Subscription_RuleType_RULE_TYPE_UNSPECIFIED;
  static constexpr RuleType ALARM =
    Subscription_RuleType_ALARM;
  static constexpr RuleType ALERT =
    Subscription_RuleType_ALERT;
  static inline bool RuleType_IsValid(int value) {
    return Subscription_RuleType_IsValid(value);
  }
  static constexpr RuleType RuleType_MIN =
    Subscription_RuleType_RuleType_MIN;
  static constexpr RuleType RuleType_MAX =
    Subscription_RuleType_RuleType_MAX;
  static constexpr int RuleType_ARRAYSIZE =
    Subscription_RuleType_RuleType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& RuleType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RuleType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RuleType_Name.");
    return Subscription_RuleType_Name(enum_t_value);
  }
  static inline bool RuleType_Parse(const std::string& name,
      RuleType* value) {
    return Subscription_RuleType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kRuleIdFieldNumber = 3,
    kRuleTypeFieldNumber = 2,
    kProbabilityOfInformingFieldNumber = 7,
    kIncidentdDetailsFieldNumber = 4,
    kPerfettoDetailsFieldNumber = 5,
    kBroadcastSubscriberDetailsFieldNumber = 6,
  };
  // optional int64 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 rule_id = 3;
  bool has_rule_id() const;
  void clear_rule_id();
  ::PROTOBUF_NAMESPACE_ID::int64 rule_id() const;
  void set_rule_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .android.os.statsd.Subscription.RuleType rule_type = 2;
  bool has_rule_type() const;
  void clear_rule_type();
  ::android::os::statsd::Subscription_RuleType rule_type() const;
  void set_rule_type(::android::os::statsd::Subscription_RuleType value);

  // optional float probability_of_informing = 7 [default = 1.1];
  bool has_probability_of_informing() const;
  void clear_probability_of_informing();
  float probability_of_informing() const;
  void set_probability_of_informing(float value);

  // optional .android.os.statsd.IncidentdDetails incidentd_details = 4;
  bool has_incidentd_details() const;
  void clear_incidentd_details();
  const ::android::os::statsd::IncidentdDetails& incidentd_details() const;
  ::android::os::statsd::IncidentdDetails* release_incidentd_details();
  ::android::os::statsd::IncidentdDetails* mutable_incidentd_details();
  void set_allocated_incidentd_details(::android::os::statsd::IncidentdDetails* incidentd_details);

  // optional .android.os.statsd.PerfettoDetails perfetto_details = 5;
  bool has_perfetto_details() const;
  void clear_perfetto_details();
  const ::android::os::statsd::PerfettoDetails& perfetto_details() const;
  ::android::os::statsd::PerfettoDetails* release_perfetto_details();
  ::android::os::statsd::PerfettoDetails* mutable_perfetto_details();
  void set_allocated_perfetto_details(::android::os::statsd::PerfettoDetails* perfetto_details);

  // optional .android.os.statsd.BroadcastSubscriberDetails broadcast_subscriber_details = 6;
  bool has_broadcast_subscriber_details() const;
  void clear_broadcast_subscriber_details();
  const ::android::os::statsd::BroadcastSubscriberDetails& broadcast_subscriber_details() const;
  ::android::os::statsd::BroadcastSubscriberDetails* release_broadcast_subscriber_details();
  ::android::os::statsd::BroadcastSubscriberDetails* mutable_broadcast_subscriber_details();
  void set_allocated_broadcast_subscriber_details(::android::os::statsd::BroadcastSubscriberDetails* broadcast_subscriber_details);

  void clear_subscriber_information();
  SubscriberInformationCase subscriber_information_case() const;
  // @@protoc_insertion_point(class_scope:android.os.statsd.Subscription)
 private:
  class _Internal;
  void set_has_incidentd_details();
  void set_has_perfetto_details();
  void set_has_broadcast_subscriber_details();

  inline bool has_subscriber_information() const;
  inline void clear_has_subscriber_information();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 rule_id_;
  int rule_type_;
  float probability_of_informing_;
  union SubscriberInformationUnion {
    SubscriberInformationUnion() {}
    ::android::os::statsd::IncidentdDetails* incidentd_details_;
    ::android::os::statsd::PerfettoDetails* perfetto_details_;
    ::android::os::statsd::BroadcastSubscriberDetails* broadcast_subscriber_details_;
  } subscriber_information_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class EventActivation :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.EventActivation) */ {
 public:
  EventActivation();
  virtual ~EventActivation();

  EventActivation(const EventActivation& from);
  EventActivation(EventActivation&& from) noexcept
    : EventActivation() {
    *this = ::std::move(from);
  }

  inline EventActivation& operator=(const EventActivation& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventActivation& operator=(EventActivation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const EventActivation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventActivation* internal_default_instance() {
    return reinterpret_cast<const EventActivation*>(
               &_EventActivation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(EventActivation& a, EventActivation& b) {
    a.Swap(&b);
  }
  inline void Swap(EventActivation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventActivation* New() const final {
    return CreateMaybeMessage<EventActivation>(nullptr);
  }

  EventActivation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventActivation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EventActivation& from);
  void MergeFrom(const EventActivation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EventActivation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.EventActivation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAtomMatcherIdFieldNumber = 1,
    kTtlSecondsFieldNumber = 2,
    kDeactivationAtomMatcherIdFieldNumber = 3,
    kActivationTypeFieldNumber = 4,
  };
  // optional int64 atom_matcher_id = 1;
  bool has_atom_matcher_id() const;
  void clear_atom_matcher_id();
  ::PROTOBUF_NAMESPACE_ID::int64 atom_matcher_id() const;
  void set_atom_matcher_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 ttl_seconds = 2;
  bool has_ttl_seconds() const;
  void clear_ttl_seconds();
  ::PROTOBUF_NAMESPACE_ID::int64 ttl_seconds() const;
  void set_ttl_seconds(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 deactivation_atom_matcher_id = 3;
  bool has_deactivation_atom_matcher_id() const;
  void clear_deactivation_atom_matcher_id();
  ::PROTOBUF_NAMESPACE_ID::int64 deactivation_atom_matcher_id() const;
  void set_deactivation_atom_matcher_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .android.os.statsd.ActivationType activation_type = 4;
  bool has_activation_type() const;
  void clear_activation_type();
  ::android::os::statsd::ActivationType activation_type() const;
  void set_activation_type(::android::os::statsd::ActivationType value);

  // @@protoc_insertion_point(class_scope:android.os.statsd.EventActivation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 atom_matcher_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 ttl_seconds_;
  ::PROTOBUF_NAMESPACE_ID::int64 deactivation_atom_matcher_id_;
  int activation_type_;
  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class MetricActivation :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.MetricActivation) */ {
 public:
  MetricActivation();
  virtual ~MetricActivation();

  MetricActivation(const MetricActivation& from);
  MetricActivation(MetricActivation&& from) noexcept
    : MetricActivation() {
    *this = ::std::move(from);
  }

  inline MetricActivation& operator=(const MetricActivation& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricActivation& operator=(MetricActivation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MetricActivation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetricActivation* internal_default_instance() {
    return reinterpret_cast<const MetricActivation*>(
               &_MetricActivation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(MetricActivation& a, MetricActivation& b) {
    a.Swap(&b);
  }
  inline void Swap(MetricActivation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetricActivation* New() const final {
    return CreateMaybeMessage<MetricActivation>(nullptr);
  }

  MetricActivation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetricActivation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MetricActivation& from);
  void MergeFrom(const MetricActivation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MetricActivation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.MetricActivation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventActivationFieldNumber = 2,
    kMetricIdFieldNumber = 1,
    kActivationTypeFieldNumber = 3,
  };
  // repeated .android.os.statsd.EventActivation event_activation = 2;
  int event_activation_size() const;
  void clear_event_activation();
  ::android::os::statsd::EventActivation* mutable_event_activation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::EventActivation >*
      mutable_event_activation();
  const ::android::os::statsd::EventActivation& event_activation(int index) const;
  ::android::os::statsd::EventActivation* add_event_activation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::EventActivation >&
      event_activation() const;

  // optional int64 metric_id = 1;
  bool has_metric_id() const;
  void clear_metric_id();
  ::PROTOBUF_NAMESPACE_ID::int64 metric_id() const;
  void set_metric_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .android.os.statsd.ActivationType activation_type = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_activation_type() const;
  PROTOBUF_DEPRECATED void clear_activation_type();
  PROTOBUF_DEPRECATED ::android::os::statsd::ActivationType activation_type() const;
  PROTOBUF_DEPRECATED void set_activation_type(::android::os::statsd::ActivationType value);

  // @@protoc_insertion_point(class_scope:android.os.statsd.MetricActivation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::EventActivation > event_activation_;
  ::PROTOBUF_NAMESPACE_ID::int64 metric_id_;
  int activation_type_;
  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PullAtomPackages :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.PullAtomPackages) */ {
 public:
  PullAtomPackages();
  virtual ~PullAtomPackages();

  PullAtomPackages(const PullAtomPackages& from);
  PullAtomPackages(PullAtomPackages&& from) noexcept
    : PullAtomPackages() {
    *this = ::std::move(from);
  }

  inline PullAtomPackages& operator=(const PullAtomPackages& from) {
    CopyFrom(from);
    return *this;
  }
  inline PullAtomPackages& operator=(PullAtomPackages&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PullAtomPackages& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PullAtomPackages* internal_default_instance() {
    return reinterpret_cast<const PullAtomPackages*>(
               &_PullAtomPackages_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(PullAtomPackages& a, PullAtomPackages& b) {
    a.Swap(&b);
  }
  inline void Swap(PullAtomPackages* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PullAtomPackages* New() const final {
    return CreateMaybeMessage<PullAtomPackages>(nullptr);
  }

  PullAtomPackages* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PullAtomPackages>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PullAtomPackages& from);
  void MergeFrom(const PullAtomPackages& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PullAtomPackages* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.PullAtomPackages";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackagesFieldNumber = 2,
    kAtomIdFieldNumber = 1,
  };
  // repeated string packages = 2;
  int packages_size() const;
  void clear_packages();
  const std::string& packages(int index) const;
  std::string* mutable_packages(int index);
  void set_packages(int index, const std::string& value);
  void set_packages(int index, std::string&& value);
  void set_packages(int index, const char* value);
  void set_packages(int index, const char* value, size_t size);
  std::string* add_packages();
  void add_packages(const std::string& value);
  void add_packages(std::string&& value);
  void add_packages(const char* value);
  void add_packages(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& packages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_packages();

  // optional int32 atom_id = 1;
  bool has_atom_id() const;
  void clear_atom_id();
  ::PROTOBUF_NAMESPACE_ID::int32 atom_id() const;
  void set_atom_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.os.statsd.PullAtomPackages)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> packages_;
  ::PROTOBUF_NAMESPACE_ID::int32 atom_id_;
  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class StatsdConfig_Annotation :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.StatsdConfig.Annotation) */ {
 public:
  StatsdConfig_Annotation();
  virtual ~StatsdConfig_Annotation();

  StatsdConfig_Annotation(const StatsdConfig_Annotation& from);
  StatsdConfig_Annotation(StatsdConfig_Annotation&& from) noexcept
    : StatsdConfig_Annotation() {
    *this = ::std::move(from);
  }

  inline StatsdConfig_Annotation& operator=(const StatsdConfig_Annotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatsdConfig_Annotation& operator=(StatsdConfig_Annotation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const StatsdConfig_Annotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatsdConfig_Annotation* internal_default_instance() {
    return reinterpret_cast<const StatsdConfig_Annotation*>(
               &_StatsdConfig_Annotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(StatsdConfig_Annotation& a, StatsdConfig_Annotation& b) {
    a.Swap(&b);
  }
  inline void Swap(StatsdConfig_Annotation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatsdConfig_Annotation* New() const final {
    return CreateMaybeMessage<StatsdConfig_Annotation>(nullptr);
  }

  StatsdConfig_Annotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatsdConfig_Annotation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const StatsdConfig_Annotation& from);
  void MergeFrom(const StatsdConfig_Annotation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StatsdConfig_Annotation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.StatsdConfig.Annotation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldInt64FieldNumber = 1,
    kFieldInt32FieldNumber = 2,
  };
  // optional int64 field_int64 = 1;
  bool has_field_int64() const;
  void clear_field_int64();
  ::PROTOBUF_NAMESPACE_ID::int64 field_int64() const;
  void set_field_int64(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 field_int32 = 2;
  bool has_field_int32() const;
  void clear_field_int32();
  ::PROTOBUF_NAMESPACE_ID::int32 field_int32() const;
  void set_field_int32(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.os.statsd.StatsdConfig.Annotation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 field_int64_;
  ::PROTOBUF_NAMESPACE_ID::int32 field_int32_;
  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class StatsdConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.statsd.StatsdConfig) */ {
 public:
  StatsdConfig();
  virtual ~StatsdConfig();

  StatsdConfig(const StatsdConfig& from);
  StatsdConfig(StatsdConfig&& from) noexcept
    : StatsdConfig() {
    *this = ::std::move(from);
  }

  inline StatsdConfig& operator=(const StatsdConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatsdConfig& operator=(StatsdConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const StatsdConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatsdConfig* internal_default_instance() {
    return reinterpret_cast<const StatsdConfig*>(
               &_StatsdConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(StatsdConfig& a, StatsdConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(StatsdConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatsdConfig* New() const final {
    return CreateMaybeMessage<StatsdConfig>(nullptr);
  }

  StatsdConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatsdConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const StatsdConfig& from);
  void MergeFrom(const StatsdConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StatsdConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.statsd.StatsdConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef StatsdConfig_Annotation Annotation;

  // accessors -------------------------------------------------------

  enum : int {
    kEventMetricFieldNumber = 2,
    kCountMetricFieldNumber = 3,
    kValueMetricFieldNumber = 4,
    kGaugeMetricFieldNumber = 5,
    kDurationMetricFieldNumber = 6,
    kAtomMatcherFieldNumber = 7,
    kPredicateFieldNumber = 8,
    kAlertFieldNumber = 9,
    kAlarmFieldNumber = 10,
    kSubscriptionFieldNumber = 11,
    kAllowedLogSourceFieldNumber = 12,
    kNoReportMetricFieldNumber = 13,
    kAnnotationFieldNumber = 14,
    kMetricActivationFieldNumber = 17,
    kStateFieldNumber = 21,
    kDefaultPullPackagesFieldNumber = 22,
    kPullAtomPackagesFieldNumber = 23,
    kWhitelistedAtomIdsFieldNumber = 24,
    kIdFieldNumber = 1,
    kTtlInSecondsFieldNumber = 15,
    kVersionStringsInMetricReportFieldNumber = 18,
    kInstallerInMetricReportFieldNumber = 19,
    kPersistLocallyFieldNumber = 20,
    kHashStringsInMetricReportFieldNumber = 16,
  };
  // repeated .android.os.statsd.EventMetric event_metric = 2;
  int event_metric_size() const;
  void clear_event_metric();
  ::android::os::statsd::EventMetric* mutable_event_metric(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::EventMetric >*
      mutable_event_metric();
  const ::android::os::statsd::EventMetric& event_metric(int index) const;
  ::android::os::statsd::EventMetric* add_event_metric();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::EventMetric >&
      event_metric() const;

  // repeated .android.os.statsd.CountMetric count_metric = 3;
  int count_metric_size() const;
  void clear_count_metric();
  ::android::os::statsd::CountMetric* mutable_count_metric(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::CountMetric >*
      mutable_count_metric();
  const ::android::os::statsd::CountMetric& count_metric(int index) const;
  ::android::os::statsd::CountMetric* add_count_metric();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::CountMetric >&
      count_metric() const;

  // repeated .android.os.statsd.ValueMetric value_metric = 4;
  int value_metric_size() const;
  void clear_value_metric();
  ::android::os::statsd::ValueMetric* mutable_value_metric(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::ValueMetric >*
      mutable_value_metric();
  const ::android::os::statsd::ValueMetric& value_metric(int index) const;
  ::android::os::statsd::ValueMetric* add_value_metric();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::ValueMetric >&
      value_metric() const;

  // repeated .android.os.statsd.GaugeMetric gauge_metric = 5;
  int gauge_metric_size() const;
  void clear_gauge_metric();
  ::android::os::statsd::GaugeMetric* mutable_gauge_metric(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::GaugeMetric >*
      mutable_gauge_metric();
  const ::android::os::statsd::GaugeMetric& gauge_metric(int index) const;
  ::android::os::statsd::GaugeMetric* add_gauge_metric();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::GaugeMetric >&
      gauge_metric() const;

  // repeated .android.os.statsd.DurationMetric duration_metric = 6;
  int duration_metric_size() const;
  void clear_duration_metric();
  ::android::os::statsd::DurationMetric* mutable_duration_metric(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::DurationMetric >*
      mutable_duration_metric();
  const ::android::os::statsd::DurationMetric& duration_metric(int index) const;
  ::android::os::statsd::DurationMetric* add_duration_metric();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::DurationMetric >&
      duration_metric() const;

  // repeated .android.os.statsd.AtomMatcher atom_matcher = 7;
  int atom_matcher_size() const;
  void clear_atom_matcher();
  ::android::os::statsd::AtomMatcher* mutable_atom_matcher(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::AtomMatcher >*
      mutable_atom_matcher();
  const ::android::os::statsd::AtomMatcher& atom_matcher(int index) const;
  ::android::os::statsd::AtomMatcher* add_atom_matcher();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::AtomMatcher >&
      atom_matcher() const;

  // repeated .android.os.statsd.Predicate predicate = 8;
  int predicate_size() const;
  void clear_predicate();
  ::android::os::statsd::Predicate* mutable_predicate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::Predicate >*
      mutable_predicate();
  const ::android::os::statsd::Predicate& predicate(int index) const;
  ::android::os::statsd::Predicate* add_predicate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::Predicate >&
      predicate() const;

  // repeated .android.os.statsd.Alert alert = 9;
  int alert_size() const;
  void clear_alert();
  ::android::os::statsd::Alert* mutable_alert(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::Alert >*
      mutable_alert();
  const ::android::os::statsd::Alert& alert(int index) const;
  ::android::os::statsd::Alert* add_alert();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::Alert >&
      alert() const;

  // repeated .android.os.statsd.Alarm alarm = 10;
  int alarm_size() const;
  void clear_alarm();
  ::android::os::statsd::Alarm* mutable_alarm(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::Alarm >*
      mutable_alarm();
  const ::android::os::statsd::Alarm& alarm(int index) const;
  ::android::os::statsd::Alarm* add_alarm();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::Alarm >&
      alarm() const;

  // repeated .android.os.statsd.Subscription subscription = 11;
  int subscription_size() const;
  void clear_subscription();
  ::android::os::statsd::Subscription* mutable_subscription(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::Subscription >*
      mutable_subscription();
  const ::android::os::statsd::Subscription& subscription(int index) const;
  ::android::os::statsd::Subscription* add_subscription();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::Subscription >&
      subscription() const;

  // repeated string allowed_log_source = 12;
  int allowed_log_source_size() const;
  void clear_allowed_log_source();
  const std::string& allowed_log_source(int index) const;
  std::string* mutable_allowed_log_source(int index);
  void set_allowed_log_source(int index, const std::string& value);
  void set_allowed_log_source(int index, std::string&& value);
  void set_allowed_log_source(int index, const char* value);
  void set_allowed_log_source(int index, const char* value, size_t size);
  std::string* add_allowed_log_source();
  void add_allowed_log_source(const std::string& value);
  void add_allowed_log_source(std::string&& value);
  void add_allowed_log_source(const char* value);
  void add_allowed_log_source(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& allowed_log_source() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_allowed_log_source();

  // repeated int64 no_report_metric = 13;
  int no_report_metric_size() const;
  void clear_no_report_metric();
  ::PROTOBUF_NAMESPACE_ID::int64 no_report_metric(int index) const;
  void set_no_report_metric(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_no_report_metric(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      no_report_metric() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_no_report_metric();

  // repeated .android.os.statsd.StatsdConfig.Annotation annotation = 14;
  int annotation_size() const;
  void clear_annotation();
  ::android::os::statsd::StatsdConfig_Annotation* mutable_annotation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::StatsdConfig_Annotation >*
      mutable_annotation();
  const ::android::os::statsd::StatsdConfig_Annotation& annotation(int index) const;
  ::android::os::statsd::StatsdConfig_Annotation* add_annotation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::StatsdConfig_Annotation >&
      annotation() const;

  // repeated .android.os.statsd.MetricActivation metric_activation = 17;
  int metric_activation_size() const;
  void clear_metric_activation();
  ::android::os::statsd::MetricActivation* mutable_metric_activation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricActivation >*
      mutable_metric_activation();
  const ::android::os::statsd::MetricActivation& metric_activation(int index) const;
  ::android::os::statsd::MetricActivation* add_metric_activation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricActivation >&
      metric_activation() const;

  // repeated .android.os.statsd.State state = 21;
  int state_size() const;
  void clear_state();
  ::android::os::statsd::State* mutable_state(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::State >*
      mutable_state();
  const ::android::os::statsd::State& state(int index) const;
  ::android::os::statsd::State* add_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::State >&
      state() const;

  // repeated string default_pull_packages = 22;
  int default_pull_packages_size() const;
  void clear_default_pull_packages();
  const std::string& default_pull_packages(int index) const;
  std::string* mutable_default_pull_packages(int index);
  void set_default_pull_packages(int index, const std::string& value);
  void set_default_pull_packages(int index, std::string&& value);
  void set_default_pull_packages(int index, const char* value);
  void set_default_pull_packages(int index, const char* value, size_t size);
  std::string* add_default_pull_packages();
  void add_default_pull_packages(const std::string& value);
  void add_default_pull_packages(std::string&& value);
  void add_default_pull_packages(const char* value);
  void add_default_pull_packages(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& default_pull_packages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_default_pull_packages();

  // repeated .android.os.statsd.PullAtomPackages pull_atom_packages = 23;
  int pull_atom_packages_size() const;
  void clear_pull_atom_packages();
  ::android::os::statsd::PullAtomPackages* mutable_pull_atom_packages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::PullAtomPackages >*
      mutable_pull_atom_packages();
  const ::android::os::statsd::PullAtomPackages& pull_atom_packages(int index) const;
  ::android::os::statsd::PullAtomPackages* add_pull_atom_packages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::PullAtomPackages >&
      pull_atom_packages() const;

  // repeated int32 whitelisted_atom_ids = 24;
  int whitelisted_atom_ids_size() const;
  void clear_whitelisted_atom_ids();
  ::PROTOBUF_NAMESPACE_ID::int32 whitelisted_atom_ids(int index) const;
  void set_whitelisted_atom_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_whitelisted_atom_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      whitelisted_atom_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_whitelisted_atom_ids();

  // optional int64 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 ttl_in_seconds = 15;
  bool has_ttl_in_seconds() const;
  void clear_ttl_in_seconds();
  ::PROTOBUF_NAMESPACE_ID::int64 ttl_in_seconds() const;
  void set_ttl_in_seconds(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional bool version_strings_in_metric_report = 18;
  bool has_version_strings_in_metric_report() const;
  void clear_version_strings_in_metric_report();
  bool version_strings_in_metric_report() const;
  void set_version_strings_in_metric_report(bool value);

  // optional bool installer_in_metric_report = 19;
  bool has_installer_in_metric_report() const;
  void clear_installer_in_metric_report();
  bool installer_in_metric_report() const;
  void set_installer_in_metric_report(bool value);

  // optional bool persist_locally = 20 [default = false];
  bool has_persist_locally() const;
  void clear_persist_locally();
  bool persist_locally() const;
  void set_persist_locally(bool value);

  // optional bool hash_strings_in_metric_report = 16 [default = true];
  bool has_hash_strings_in_metric_report() const;
  void clear_hash_strings_in_metric_report();
  bool hash_strings_in_metric_report() const;
  void set_hash_strings_in_metric_report(bool value);

  // @@protoc_insertion_point(class_scope:android.os.statsd.StatsdConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::EventMetric > event_metric_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::CountMetric > count_metric_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::ValueMetric > value_metric_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::GaugeMetric > gauge_metric_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::DurationMetric > duration_metric_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::AtomMatcher > atom_matcher_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::Predicate > predicate_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::Alert > alert_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::Alarm > alarm_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::Subscription > subscription_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> allowed_log_source_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > no_report_metric_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::StatsdConfig_Annotation > annotation_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricActivation > metric_activation_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::State > state_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> default_pull_packages_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::PullAtomPackages > pull_atom_packages_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > whitelisted_atom_ids_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 ttl_in_seconds_;
  bool version_strings_in_metric_report_;
  bool installer_in_metric_report_;
  bool persist_locally_;
  bool hash_strings_in_metric_report_;
  friend struct ::TableStruct_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FieldMatcher

// optional int32 field = 1;
inline bool FieldMatcher::has_field() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FieldMatcher::clear_field() {
  field_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FieldMatcher::field() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.FieldMatcher.field)
  return field_;
}
inline void FieldMatcher::set_field(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  field_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.FieldMatcher.field)
}

// optional .android.os.statsd.Position position = 2;
inline bool FieldMatcher::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FieldMatcher::clear_position() {
  position_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::android::os::statsd::Position FieldMatcher::position() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.FieldMatcher.position)
  return static_cast< ::android::os::statsd::Position >(position_);
}
inline void FieldMatcher::set_position(::android::os::statsd::Position value) {
  assert(::android::os::statsd::Position_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  position_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.FieldMatcher.position)
}

// repeated .android.os.statsd.FieldMatcher child = 3;
inline int FieldMatcher::child_size() const {
  return child_.size();
}
inline void FieldMatcher::clear_child() {
  child_.Clear();
}
inline ::android::os::statsd::FieldMatcher* FieldMatcher::mutable_child(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.FieldMatcher.child)
  return child_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::FieldMatcher >*
FieldMatcher::mutable_child() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.FieldMatcher.child)
  return &child_;
}
inline const ::android::os::statsd::FieldMatcher& FieldMatcher::child(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.FieldMatcher.child)
  return child_.Get(index);
}
inline ::android::os::statsd::FieldMatcher* FieldMatcher::add_child() {
  // @@protoc_insertion_point(field_add:android.os.statsd.FieldMatcher.child)
  return child_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::FieldMatcher >&
FieldMatcher::child() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.FieldMatcher.child)
  return child_;
}

// -------------------------------------------------------------------

// FieldValueMatcher

// optional int32 field = 1;
inline bool FieldValueMatcher::has_field() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FieldValueMatcher::clear_field() {
  field_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FieldValueMatcher::field() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.FieldValueMatcher.field)
  return field_;
}
inline void FieldValueMatcher::set_field(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  field_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.FieldValueMatcher.field)
}

// optional .android.os.statsd.Position position = 2;
inline bool FieldValueMatcher::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FieldValueMatcher::clear_position() {
  position_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::android::os::statsd::Position FieldValueMatcher::position() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.FieldValueMatcher.position)
  return static_cast< ::android::os::statsd::Position >(position_);
}
inline void FieldValueMatcher::set_position(::android::os::statsd::Position value) {
  assert(::android::os::statsd::Position_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  position_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.FieldValueMatcher.position)
}

// optional bool eq_bool = 3;
inline bool FieldValueMatcher::has_eq_bool() const {
  return value_matcher_case() == kEqBool;
}
inline void FieldValueMatcher::set_has_eq_bool() {
  _oneof_case_[0] = kEqBool;
}
inline void FieldValueMatcher::clear_eq_bool() {
  if (has_eq_bool()) {
    value_matcher_.eq_bool_ = false;
    clear_has_value_matcher();
  }
}
inline bool FieldValueMatcher::eq_bool() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.FieldValueMatcher.eq_bool)
  if (has_eq_bool()) {
    return value_matcher_.eq_bool_;
  }
  return false;
}
inline void FieldValueMatcher::set_eq_bool(bool value) {
  if (!has_eq_bool()) {
    clear_value_matcher();
    set_has_eq_bool();
  }
  value_matcher_.eq_bool_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.FieldValueMatcher.eq_bool)
}

// optional string eq_string = 4;
inline bool FieldValueMatcher::has_eq_string() const {
  return value_matcher_case() == kEqString;
}
inline void FieldValueMatcher::set_has_eq_string() {
  _oneof_case_[0] = kEqString;
}
inline void FieldValueMatcher::clear_eq_string() {
  if (has_eq_string()) {
    value_matcher_.eq_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_value_matcher();
  }
}
inline const std::string& FieldValueMatcher::eq_string() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.FieldValueMatcher.eq_string)
  if (has_eq_string()) {
    return value_matcher_.eq_string_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void FieldValueMatcher::set_eq_string(const std::string& value) {
  // @@protoc_insertion_point(field_set:android.os.statsd.FieldValueMatcher.eq_string)
  if (!has_eq_string()) {
    clear_value_matcher();
    set_has_eq_string();
    value_matcher_.eq_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_matcher_.eq_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.statsd.FieldValueMatcher.eq_string)
}
inline void FieldValueMatcher::set_eq_string(std::string&& value) {
  // @@protoc_insertion_point(field_set:android.os.statsd.FieldValueMatcher.eq_string)
  if (!has_eq_string()) {
    clear_value_matcher();
    set_has_eq_string();
    value_matcher_.eq_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_matcher_.eq_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.statsd.FieldValueMatcher.eq_string)
}
inline void FieldValueMatcher::set_eq_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_eq_string()) {
    clear_value_matcher();
    set_has_eq_string();
    value_matcher_.eq_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_matcher_.eq_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.statsd.FieldValueMatcher.eq_string)
}
inline void FieldValueMatcher::set_eq_string(const char* value, size_t size) {
  if (!has_eq_string()) {
    clear_value_matcher();
    set_has_eq_string();
    value_matcher_.eq_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_matcher_.eq_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.statsd.FieldValueMatcher.eq_string)
}
inline std::string* FieldValueMatcher::mutable_eq_string() {
  if (!has_eq_string()) {
    clear_value_matcher();
    set_has_eq_string();
    value_matcher_.eq_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:android.os.statsd.FieldValueMatcher.eq_string)
  return value_matcher_.eq_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FieldValueMatcher::release_eq_string() {
  // @@protoc_insertion_point(field_release:android.os.statsd.FieldValueMatcher.eq_string)
  if (has_eq_string()) {
    clear_has_value_matcher();
    return value_matcher_.eq_string_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void FieldValueMatcher::set_allocated_eq_string(std::string* eq_string) {
  if (has_value_matcher()) {
    clear_value_matcher();
  }
  if (eq_string != nullptr) {
    set_has_eq_string();
    value_matcher_.eq_string_.UnsafeSetDefault(eq_string);
  }
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.FieldValueMatcher.eq_string)
}

// optional int64 eq_int = 5;
inline bool FieldValueMatcher::has_eq_int() const {
  return value_matcher_case() == kEqInt;
}
inline void FieldValueMatcher::set_has_eq_int() {
  _oneof_case_[0] = kEqInt;
}
inline void FieldValueMatcher::clear_eq_int() {
  if (has_eq_int()) {
    value_matcher_.eq_int_ = PROTOBUF_LONGLONG(0);
    clear_has_value_matcher();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FieldValueMatcher::eq_int() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.FieldValueMatcher.eq_int)
  if (has_eq_int()) {
    return value_matcher_.eq_int_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void FieldValueMatcher::set_eq_int(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!has_eq_int()) {
    clear_value_matcher();
    set_has_eq_int();
  }
  value_matcher_.eq_int_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.FieldValueMatcher.eq_int)
}

// optional int64 lt_int = 6;
inline bool FieldValueMatcher::has_lt_int() const {
  return value_matcher_case() == kLtInt;
}
inline void FieldValueMatcher::set_has_lt_int() {
  _oneof_case_[0] = kLtInt;
}
inline void FieldValueMatcher::clear_lt_int() {
  if (has_lt_int()) {
    value_matcher_.lt_int_ = PROTOBUF_LONGLONG(0);
    clear_has_value_matcher();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FieldValueMatcher::lt_int() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.FieldValueMatcher.lt_int)
  if (has_lt_int()) {
    return value_matcher_.lt_int_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void FieldValueMatcher::set_lt_int(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!has_lt_int()) {
    clear_value_matcher();
    set_has_lt_int();
  }
  value_matcher_.lt_int_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.FieldValueMatcher.lt_int)
}

// optional int64 gt_int = 7;
inline bool FieldValueMatcher::has_gt_int() const {
  return value_matcher_case() == kGtInt;
}
inline void FieldValueMatcher::set_has_gt_int() {
  _oneof_case_[0] = kGtInt;
}
inline void FieldValueMatcher::clear_gt_int() {
  if (has_gt_int()) {
    value_matcher_.gt_int_ = PROTOBUF_LONGLONG(0);
    clear_has_value_matcher();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FieldValueMatcher::gt_int() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.FieldValueMatcher.gt_int)
  if (has_gt_int()) {
    return value_matcher_.gt_int_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void FieldValueMatcher::set_gt_int(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!has_gt_int()) {
    clear_value_matcher();
    set_has_gt_int();
  }
  value_matcher_.gt_int_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.FieldValueMatcher.gt_int)
}

// optional float lt_float = 8;
inline bool FieldValueMatcher::has_lt_float() const {
  return value_matcher_case() == kLtFloat;
}
inline void FieldValueMatcher::set_has_lt_float() {
  _oneof_case_[0] = kLtFloat;
}
inline void FieldValueMatcher::clear_lt_float() {
  if (has_lt_float()) {
    value_matcher_.lt_float_ = 0;
    clear_has_value_matcher();
  }
}
inline float FieldValueMatcher::lt_float() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.FieldValueMatcher.lt_float)
  if (has_lt_float()) {
    return value_matcher_.lt_float_;
  }
  return 0;
}
inline void FieldValueMatcher::set_lt_float(float value) {
  if (!has_lt_float()) {
    clear_value_matcher();
    set_has_lt_float();
  }
  value_matcher_.lt_float_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.FieldValueMatcher.lt_float)
}

// optional float gt_float = 9;
inline bool FieldValueMatcher::has_gt_float() const {
  return value_matcher_case() == kGtFloat;
}
inline void FieldValueMatcher::set_has_gt_float() {
  _oneof_case_[0] = kGtFloat;
}
inline void FieldValueMatcher::clear_gt_float() {
  if (has_gt_float()) {
    value_matcher_.gt_float_ = 0;
    clear_has_value_matcher();
  }
}
inline float FieldValueMatcher::gt_float() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.FieldValueMatcher.gt_float)
  if (has_gt_float()) {
    return value_matcher_.gt_float_;
  }
  return 0;
}
inline void FieldValueMatcher::set_gt_float(float value) {
  if (!has_gt_float()) {
    clear_value_matcher();
    set_has_gt_float();
  }
  value_matcher_.gt_float_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.FieldValueMatcher.gt_float)
}

// optional int64 lte_int = 10;
inline bool FieldValueMatcher::has_lte_int() const {
  return value_matcher_case() == kLteInt;
}
inline void FieldValueMatcher::set_has_lte_int() {
  _oneof_case_[0] = kLteInt;
}
inline void FieldValueMatcher::clear_lte_int() {
  if (has_lte_int()) {
    value_matcher_.lte_int_ = PROTOBUF_LONGLONG(0);
    clear_has_value_matcher();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FieldValueMatcher::lte_int() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.FieldValueMatcher.lte_int)
  if (has_lte_int()) {
    return value_matcher_.lte_int_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void FieldValueMatcher::set_lte_int(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!has_lte_int()) {
    clear_value_matcher();
    set_has_lte_int();
  }
  value_matcher_.lte_int_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.FieldValueMatcher.lte_int)
}

// optional int64 gte_int = 11;
inline bool FieldValueMatcher::has_gte_int() const {
  return value_matcher_case() == kGteInt;
}
inline void FieldValueMatcher::set_has_gte_int() {
  _oneof_case_[0] = kGteInt;
}
inline void FieldValueMatcher::clear_gte_int() {
  if (has_gte_int()) {
    value_matcher_.gte_int_ = PROTOBUF_LONGLONG(0);
    clear_has_value_matcher();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FieldValueMatcher::gte_int() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.FieldValueMatcher.gte_int)
  if (has_gte_int()) {
    return value_matcher_.gte_int_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void FieldValueMatcher::set_gte_int(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!has_gte_int()) {
    clear_value_matcher();
    set_has_gte_int();
  }
  value_matcher_.gte_int_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.FieldValueMatcher.gte_int)
}

// optional .android.os.statsd.MessageMatcher matches_tuple = 12;
inline bool FieldValueMatcher::has_matches_tuple() const {
  return value_matcher_case() == kMatchesTuple;
}
inline void FieldValueMatcher::set_has_matches_tuple() {
  _oneof_case_[0] = kMatchesTuple;
}
inline void FieldValueMatcher::clear_matches_tuple() {
  if (has_matches_tuple()) {
    delete value_matcher_.matches_tuple_;
    clear_has_value_matcher();
  }
}
inline ::android::os::statsd::MessageMatcher* FieldValueMatcher::release_matches_tuple() {
  // @@protoc_insertion_point(field_release:android.os.statsd.FieldValueMatcher.matches_tuple)
  if (has_matches_tuple()) {
    clear_has_value_matcher();
      ::android::os::statsd::MessageMatcher* temp = value_matcher_.matches_tuple_;
    value_matcher_.matches_tuple_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::os::statsd::MessageMatcher& FieldValueMatcher::matches_tuple() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.FieldValueMatcher.matches_tuple)
  return has_matches_tuple()
      ? *value_matcher_.matches_tuple_
      : *reinterpret_cast< ::android::os::statsd::MessageMatcher*>(&::android::os::statsd::_MessageMatcher_default_instance_);
}
inline ::android::os::statsd::MessageMatcher* FieldValueMatcher::mutable_matches_tuple() {
  if (!has_matches_tuple()) {
    clear_value_matcher();
    set_has_matches_tuple();
    value_matcher_.matches_tuple_ = CreateMaybeMessage< ::android::os::statsd::MessageMatcher >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.os.statsd.FieldValueMatcher.matches_tuple)
  return value_matcher_.matches_tuple_;
}

// optional .android.os.statsd.StringListMatcher eq_any_string = 13;
inline bool FieldValueMatcher::has_eq_any_string() const {
  return value_matcher_case() == kEqAnyString;
}
inline void FieldValueMatcher::set_has_eq_any_string() {
  _oneof_case_[0] = kEqAnyString;
}
inline void FieldValueMatcher::clear_eq_any_string() {
  if (has_eq_any_string()) {
    delete value_matcher_.eq_any_string_;
    clear_has_value_matcher();
  }
}
inline ::android::os::statsd::StringListMatcher* FieldValueMatcher::release_eq_any_string() {
  // @@protoc_insertion_point(field_release:android.os.statsd.FieldValueMatcher.eq_any_string)
  if (has_eq_any_string()) {
    clear_has_value_matcher();
      ::android::os::statsd::StringListMatcher* temp = value_matcher_.eq_any_string_;
    value_matcher_.eq_any_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::os::statsd::StringListMatcher& FieldValueMatcher::eq_any_string() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.FieldValueMatcher.eq_any_string)
  return has_eq_any_string()
      ? *value_matcher_.eq_any_string_
      : *reinterpret_cast< ::android::os::statsd::StringListMatcher*>(&::android::os::statsd::_StringListMatcher_default_instance_);
}
inline ::android::os::statsd::StringListMatcher* FieldValueMatcher::mutable_eq_any_string() {
  if (!has_eq_any_string()) {
    clear_value_matcher();
    set_has_eq_any_string();
    value_matcher_.eq_any_string_ = CreateMaybeMessage< ::android::os::statsd::StringListMatcher >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.os.statsd.FieldValueMatcher.eq_any_string)
  return value_matcher_.eq_any_string_;
}

// optional .android.os.statsd.StringListMatcher neq_any_string = 14;
inline bool FieldValueMatcher::has_neq_any_string() const {
  return value_matcher_case() == kNeqAnyString;
}
inline void FieldValueMatcher::set_has_neq_any_string() {
  _oneof_case_[0] = kNeqAnyString;
}
inline void FieldValueMatcher::clear_neq_any_string() {
  if (has_neq_any_string()) {
    delete value_matcher_.neq_any_string_;
    clear_has_value_matcher();
  }
}
inline ::android::os::statsd::StringListMatcher* FieldValueMatcher::release_neq_any_string() {
  // @@protoc_insertion_point(field_release:android.os.statsd.FieldValueMatcher.neq_any_string)
  if (has_neq_any_string()) {
    clear_has_value_matcher();
      ::android::os::statsd::StringListMatcher* temp = value_matcher_.neq_any_string_;
    value_matcher_.neq_any_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::os::statsd::StringListMatcher& FieldValueMatcher::neq_any_string() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.FieldValueMatcher.neq_any_string)
  return has_neq_any_string()
      ? *value_matcher_.neq_any_string_
      : *reinterpret_cast< ::android::os::statsd::StringListMatcher*>(&::android::os::statsd::_StringListMatcher_default_instance_);
}
inline ::android::os::statsd::StringListMatcher* FieldValueMatcher::mutable_neq_any_string() {
  if (!has_neq_any_string()) {
    clear_value_matcher();
    set_has_neq_any_string();
    value_matcher_.neq_any_string_ = CreateMaybeMessage< ::android::os::statsd::StringListMatcher >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.os.statsd.FieldValueMatcher.neq_any_string)
  return value_matcher_.neq_any_string_;
}

inline bool FieldValueMatcher::has_value_matcher() const {
  return value_matcher_case() != VALUE_MATCHER_NOT_SET;
}
inline void FieldValueMatcher::clear_has_value_matcher() {
  _oneof_case_[0] = VALUE_MATCHER_NOT_SET;
}
inline FieldValueMatcher::ValueMatcherCase FieldValueMatcher::value_matcher_case() const {
  return FieldValueMatcher::ValueMatcherCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MessageMatcher

// repeated .android.os.statsd.FieldValueMatcher field_value_matcher = 1;
inline int MessageMatcher::field_value_matcher_size() const {
  return field_value_matcher_.size();
}
inline void MessageMatcher::clear_field_value_matcher() {
  field_value_matcher_.Clear();
}
inline ::android::os::statsd::FieldValueMatcher* MessageMatcher::mutable_field_value_matcher(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.MessageMatcher.field_value_matcher)
  return field_value_matcher_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::FieldValueMatcher >*
MessageMatcher::mutable_field_value_matcher() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.MessageMatcher.field_value_matcher)
  return &field_value_matcher_;
}
inline const ::android::os::statsd::FieldValueMatcher& MessageMatcher::field_value_matcher(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.MessageMatcher.field_value_matcher)
  return field_value_matcher_.Get(index);
}
inline ::android::os::statsd::FieldValueMatcher* MessageMatcher::add_field_value_matcher() {
  // @@protoc_insertion_point(field_add:android.os.statsd.MessageMatcher.field_value_matcher)
  return field_value_matcher_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::FieldValueMatcher >&
MessageMatcher::field_value_matcher() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.MessageMatcher.field_value_matcher)
  return field_value_matcher_;
}

// -------------------------------------------------------------------

// StringListMatcher

// repeated string str_value = 1;
inline int StringListMatcher::str_value_size() const {
  return str_value_.size();
}
inline void StringListMatcher::clear_str_value() {
  str_value_.Clear();
}
inline const std::string& StringListMatcher::str_value(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.StringListMatcher.str_value)
  return str_value_.Get(index);
}
inline std::string* StringListMatcher::mutable_str_value(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.StringListMatcher.str_value)
  return str_value_.Mutable(index);
}
inline void StringListMatcher::set_str_value(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:android.os.statsd.StringListMatcher.str_value)
  str_value_.Mutable(index)->assign(value);
}
inline void StringListMatcher::set_str_value(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:android.os.statsd.StringListMatcher.str_value)
  str_value_.Mutable(index)->assign(std::move(value));
}
inline void StringListMatcher::set_str_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  str_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:android.os.statsd.StringListMatcher.str_value)
}
inline void StringListMatcher::set_str_value(int index, const char* value, size_t size) {
  str_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:android.os.statsd.StringListMatcher.str_value)
}
inline std::string* StringListMatcher::add_str_value() {
  // @@protoc_insertion_point(field_add_mutable:android.os.statsd.StringListMatcher.str_value)
  return str_value_.Add();
}
inline void StringListMatcher::add_str_value(const std::string& value) {
  str_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:android.os.statsd.StringListMatcher.str_value)
}
inline void StringListMatcher::add_str_value(std::string&& value) {
  str_value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:android.os.statsd.StringListMatcher.str_value)
}
inline void StringListMatcher::add_str_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  str_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:android.os.statsd.StringListMatcher.str_value)
}
inline void StringListMatcher::add_str_value(const char* value, size_t size) {
  str_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:android.os.statsd.StringListMatcher.str_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StringListMatcher::str_value() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.StringListMatcher.str_value)
  return str_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StringListMatcher::mutable_str_value() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.StringListMatcher.str_value)
  return &str_value_;
}

// -------------------------------------------------------------------

// SimpleAtomMatcher

// optional int32 atom_id = 1;
inline bool SimpleAtomMatcher::has_atom_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SimpleAtomMatcher::clear_atom_id() {
  atom_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimpleAtomMatcher::atom_id() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.SimpleAtomMatcher.atom_id)
  return atom_id_;
}
inline void SimpleAtomMatcher::set_atom_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  atom_id_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.SimpleAtomMatcher.atom_id)
}

// repeated .android.os.statsd.FieldValueMatcher field_value_matcher = 2;
inline int SimpleAtomMatcher::field_value_matcher_size() const {
  return field_value_matcher_.size();
}
inline void SimpleAtomMatcher::clear_field_value_matcher() {
  field_value_matcher_.Clear();
}
inline ::android::os::statsd::FieldValueMatcher* SimpleAtomMatcher::mutable_field_value_matcher(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.SimpleAtomMatcher.field_value_matcher)
  return field_value_matcher_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::FieldValueMatcher >*
SimpleAtomMatcher::mutable_field_value_matcher() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.SimpleAtomMatcher.field_value_matcher)
  return &field_value_matcher_;
}
inline const ::android::os::statsd::FieldValueMatcher& SimpleAtomMatcher::field_value_matcher(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.SimpleAtomMatcher.field_value_matcher)
  return field_value_matcher_.Get(index);
}
inline ::android::os::statsd::FieldValueMatcher* SimpleAtomMatcher::add_field_value_matcher() {
  // @@protoc_insertion_point(field_add:android.os.statsd.SimpleAtomMatcher.field_value_matcher)
  return field_value_matcher_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::FieldValueMatcher >&
SimpleAtomMatcher::field_value_matcher() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.SimpleAtomMatcher.field_value_matcher)
  return field_value_matcher_;
}

// -------------------------------------------------------------------

// AtomMatcher_Combination

// optional .android.os.statsd.LogicalOperation operation = 1;
inline bool AtomMatcher_Combination::has_operation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AtomMatcher_Combination::clear_operation() {
  operation_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::android::os::statsd::LogicalOperation AtomMatcher_Combination::operation() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.AtomMatcher.Combination.operation)
  return static_cast< ::android::os::statsd::LogicalOperation >(operation_);
}
inline void AtomMatcher_Combination::set_operation(::android::os::statsd::LogicalOperation value) {
  assert(::android::os::statsd::LogicalOperation_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  operation_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.AtomMatcher.Combination.operation)
}

// repeated int64 matcher = 2;
inline int AtomMatcher_Combination::matcher_size() const {
  return matcher_.size();
}
inline void AtomMatcher_Combination::clear_matcher() {
  matcher_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AtomMatcher_Combination::matcher(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.AtomMatcher.Combination.matcher)
  return matcher_.Get(index);
}
inline void AtomMatcher_Combination::set_matcher(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  matcher_.Set(index, value);
  // @@protoc_insertion_point(field_set:android.os.statsd.AtomMatcher.Combination.matcher)
}
inline void AtomMatcher_Combination::add_matcher(::PROTOBUF_NAMESPACE_ID::int64 value) {
  matcher_.Add(value);
  // @@protoc_insertion_point(field_add:android.os.statsd.AtomMatcher.Combination.matcher)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
AtomMatcher_Combination::matcher() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.AtomMatcher.Combination.matcher)
  return matcher_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
AtomMatcher_Combination::mutable_matcher() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.AtomMatcher.Combination.matcher)
  return &matcher_;
}

// -------------------------------------------------------------------

// AtomMatcher

// optional int64 id = 1;
inline bool AtomMatcher::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AtomMatcher::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AtomMatcher::id() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.AtomMatcher.id)
  return id_;
}
inline void AtomMatcher::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.AtomMatcher.id)
}

// optional .android.os.statsd.SimpleAtomMatcher simple_atom_matcher = 2;
inline bool AtomMatcher::has_simple_atom_matcher() const {
  return contents_case() == kSimpleAtomMatcher;
}
inline void AtomMatcher::set_has_simple_atom_matcher() {
  _oneof_case_[0] = kSimpleAtomMatcher;
}
inline void AtomMatcher::clear_simple_atom_matcher() {
  if (has_simple_atom_matcher()) {
    delete contents_.simple_atom_matcher_;
    clear_has_contents();
  }
}
inline ::android::os::statsd::SimpleAtomMatcher* AtomMatcher::release_simple_atom_matcher() {
  // @@protoc_insertion_point(field_release:android.os.statsd.AtomMatcher.simple_atom_matcher)
  if (has_simple_atom_matcher()) {
    clear_has_contents();
      ::android::os::statsd::SimpleAtomMatcher* temp = contents_.simple_atom_matcher_;
    contents_.simple_atom_matcher_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::os::statsd::SimpleAtomMatcher& AtomMatcher::simple_atom_matcher() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.AtomMatcher.simple_atom_matcher)
  return has_simple_atom_matcher()
      ? *contents_.simple_atom_matcher_
      : *reinterpret_cast< ::android::os::statsd::SimpleAtomMatcher*>(&::android::os::statsd::_SimpleAtomMatcher_default_instance_);
}
inline ::android::os::statsd::SimpleAtomMatcher* AtomMatcher::mutable_simple_atom_matcher() {
  if (!has_simple_atom_matcher()) {
    clear_contents();
    set_has_simple_atom_matcher();
    contents_.simple_atom_matcher_ = CreateMaybeMessage< ::android::os::statsd::SimpleAtomMatcher >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.os.statsd.AtomMatcher.simple_atom_matcher)
  return contents_.simple_atom_matcher_;
}

// optional .android.os.statsd.AtomMatcher.Combination combination = 3;
inline bool AtomMatcher::has_combination() const {
  return contents_case() == kCombination;
}
inline void AtomMatcher::set_has_combination() {
  _oneof_case_[0] = kCombination;
}
inline void AtomMatcher::clear_combination() {
  if (has_combination()) {
    delete contents_.combination_;
    clear_has_contents();
  }
}
inline ::android::os::statsd::AtomMatcher_Combination* AtomMatcher::release_combination() {
  // @@protoc_insertion_point(field_release:android.os.statsd.AtomMatcher.combination)
  if (has_combination()) {
    clear_has_contents();
      ::android::os::statsd::AtomMatcher_Combination* temp = contents_.combination_;
    contents_.combination_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::os::statsd::AtomMatcher_Combination& AtomMatcher::combination() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.AtomMatcher.combination)
  return has_combination()
      ? *contents_.combination_
      : *reinterpret_cast< ::android::os::statsd::AtomMatcher_Combination*>(&::android::os::statsd::_AtomMatcher_Combination_default_instance_);
}
inline ::android::os::statsd::AtomMatcher_Combination* AtomMatcher::mutable_combination() {
  if (!has_combination()) {
    clear_contents();
    set_has_combination();
    contents_.combination_ = CreateMaybeMessage< ::android::os::statsd::AtomMatcher_Combination >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.os.statsd.AtomMatcher.combination)
  return contents_.combination_;
}

inline bool AtomMatcher::has_contents() const {
  return contents_case() != CONTENTS_NOT_SET;
}
inline void AtomMatcher::clear_has_contents() {
  _oneof_case_[0] = CONTENTS_NOT_SET;
}
inline AtomMatcher::ContentsCase AtomMatcher::contents_case() const {
  return AtomMatcher::ContentsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SimplePredicate

// optional int64 start = 1;
inline bool SimplePredicate::has_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SimplePredicate::clear_start() {
  start_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SimplePredicate::start() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.SimplePredicate.start)
  return start_;
}
inline void SimplePredicate::set_start(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  start_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.SimplePredicate.start)
}

// optional int64 stop = 2;
inline bool SimplePredicate::has_stop() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SimplePredicate::clear_stop() {
  stop_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SimplePredicate::stop() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.SimplePredicate.stop)
  return stop_;
}
inline void SimplePredicate::set_stop(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  stop_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.SimplePredicate.stop)
}

// optional bool count_nesting = 3 [default = true];
inline bool SimplePredicate::has_count_nesting() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SimplePredicate::clear_count_nesting() {
  count_nesting_ = true;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool SimplePredicate::count_nesting() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.SimplePredicate.count_nesting)
  return count_nesting_;
}
inline void SimplePredicate::set_count_nesting(bool value) {
  _has_bits_[0] |= 0x00000020u;
  count_nesting_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.SimplePredicate.count_nesting)
}

// optional int64 stop_all = 4;
inline bool SimplePredicate::has_stop_all() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SimplePredicate::clear_stop_all() {
  stop_all_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SimplePredicate::stop_all() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.SimplePredicate.stop_all)
  return stop_all_;
}
inline void SimplePredicate::set_stop_all(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  stop_all_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.SimplePredicate.stop_all)
}

// optional .android.os.statsd.SimplePredicate.InitialValue initial_value = 5 [default = UNKNOWN];
inline bool SimplePredicate::has_initial_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SimplePredicate::clear_initial_value() {
  initial_value_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::android::os::statsd::SimplePredicate_InitialValue SimplePredicate::initial_value() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.SimplePredicate.initial_value)
  return static_cast< ::android::os::statsd::SimplePredicate_InitialValue >(initial_value_);
}
inline void SimplePredicate::set_initial_value(::android::os::statsd::SimplePredicate_InitialValue value) {
  assert(::android::os::statsd::SimplePredicate_InitialValue_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  initial_value_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.SimplePredicate.initial_value)
}

// optional .android.os.statsd.FieldMatcher dimensions = 6;
inline bool SimplePredicate::has_dimensions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SimplePredicate::clear_dimensions() {
  if (dimensions_ != nullptr) dimensions_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::android::os::statsd::FieldMatcher& SimplePredicate::dimensions() const {
  const ::android::os::statsd::FieldMatcher* p = dimensions_;
  // @@protoc_insertion_point(field_get:android.os.statsd.SimplePredicate.dimensions)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::statsd::FieldMatcher*>(
      &::android::os::statsd::_FieldMatcher_default_instance_);
}
inline ::android::os::statsd::FieldMatcher* SimplePredicate::release_dimensions() {
  // @@protoc_insertion_point(field_release:android.os.statsd.SimplePredicate.dimensions)
  _has_bits_[0] &= ~0x00000001u;
  ::android::os::statsd::FieldMatcher* temp = dimensions_;
  dimensions_ = nullptr;
  return temp;
}
inline ::android::os::statsd::FieldMatcher* SimplePredicate::mutable_dimensions() {
  _has_bits_[0] |= 0x00000001u;
  if (dimensions_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::statsd::FieldMatcher>(GetArenaNoVirtual());
    dimensions_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.statsd.SimplePredicate.dimensions)
  return dimensions_;
}
inline void SimplePredicate::set_allocated_dimensions(::android::os::statsd::FieldMatcher* dimensions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dimensions_;
  }
  if (dimensions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dimensions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dimensions, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dimensions_ = dimensions;
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.SimplePredicate.dimensions)
}

// -------------------------------------------------------------------

// Predicate_Combination

// optional .android.os.statsd.LogicalOperation operation = 1;
inline bool Predicate_Combination::has_operation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Predicate_Combination::clear_operation() {
  operation_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::android::os::statsd::LogicalOperation Predicate_Combination::operation() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.Predicate.Combination.operation)
  return static_cast< ::android::os::statsd::LogicalOperation >(operation_);
}
inline void Predicate_Combination::set_operation(::android::os::statsd::LogicalOperation value) {
  assert(::android::os::statsd::LogicalOperation_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  operation_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.Predicate.Combination.operation)
}

// repeated int64 predicate = 2;
inline int Predicate_Combination::predicate_size() const {
  return predicate_.size();
}
inline void Predicate_Combination::clear_predicate() {
  predicate_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Predicate_Combination::predicate(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.Predicate.Combination.predicate)
  return predicate_.Get(index);
}
inline void Predicate_Combination::set_predicate(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  predicate_.Set(index, value);
  // @@protoc_insertion_point(field_set:android.os.statsd.Predicate.Combination.predicate)
}
inline void Predicate_Combination::add_predicate(::PROTOBUF_NAMESPACE_ID::int64 value) {
  predicate_.Add(value);
  // @@protoc_insertion_point(field_add:android.os.statsd.Predicate.Combination.predicate)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Predicate_Combination::predicate() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.Predicate.Combination.predicate)
  return predicate_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Predicate_Combination::mutable_predicate() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.Predicate.Combination.predicate)
  return &predicate_;
}

// -------------------------------------------------------------------

// Predicate

// optional int64 id = 1;
inline bool Predicate::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Predicate::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Predicate::id() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.Predicate.id)
  return id_;
}
inline void Predicate::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.Predicate.id)
}

// optional .android.os.statsd.SimplePredicate simple_predicate = 2;
inline bool Predicate::has_simple_predicate() const {
  return contents_case() == kSimplePredicate;
}
inline void Predicate::set_has_simple_predicate() {
  _oneof_case_[0] = kSimplePredicate;
}
inline void Predicate::clear_simple_predicate() {
  if (has_simple_predicate()) {
    delete contents_.simple_predicate_;
    clear_has_contents();
  }
}
inline ::android::os::statsd::SimplePredicate* Predicate::release_simple_predicate() {
  // @@protoc_insertion_point(field_release:android.os.statsd.Predicate.simple_predicate)
  if (has_simple_predicate()) {
    clear_has_contents();
      ::android::os::statsd::SimplePredicate* temp = contents_.simple_predicate_;
    contents_.simple_predicate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::os::statsd::SimplePredicate& Predicate::simple_predicate() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.Predicate.simple_predicate)
  return has_simple_predicate()
      ? *contents_.simple_predicate_
      : *reinterpret_cast< ::android::os::statsd::SimplePredicate*>(&::android::os::statsd::_SimplePredicate_default_instance_);
}
inline ::android::os::statsd::SimplePredicate* Predicate::mutable_simple_predicate() {
  if (!has_simple_predicate()) {
    clear_contents();
    set_has_simple_predicate();
    contents_.simple_predicate_ = CreateMaybeMessage< ::android::os::statsd::SimplePredicate >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.os.statsd.Predicate.simple_predicate)
  return contents_.simple_predicate_;
}

// optional .android.os.statsd.Predicate.Combination combination = 3;
inline bool Predicate::has_combination() const {
  return contents_case() == kCombination;
}
inline void Predicate::set_has_combination() {
  _oneof_case_[0] = kCombination;
}
inline void Predicate::clear_combination() {
  if (has_combination()) {
    delete contents_.combination_;
    clear_has_contents();
  }
}
inline ::android::os::statsd::Predicate_Combination* Predicate::release_combination() {
  // @@protoc_insertion_point(field_release:android.os.statsd.Predicate.combination)
  if (has_combination()) {
    clear_has_contents();
      ::android::os::statsd::Predicate_Combination* temp = contents_.combination_;
    contents_.combination_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::os::statsd::Predicate_Combination& Predicate::combination() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.Predicate.combination)
  return has_combination()
      ? *contents_.combination_
      : *reinterpret_cast< ::android::os::statsd::Predicate_Combination*>(&::android::os::statsd::_Predicate_Combination_default_instance_);
}
inline ::android::os::statsd::Predicate_Combination* Predicate::mutable_combination() {
  if (!has_combination()) {
    clear_contents();
    set_has_combination();
    contents_.combination_ = CreateMaybeMessage< ::android::os::statsd::Predicate_Combination >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.os.statsd.Predicate.combination)
  return contents_.combination_;
}

inline bool Predicate::has_contents() const {
  return contents_case() != CONTENTS_NOT_SET;
}
inline void Predicate::clear_has_contents() {
  _oneof_case_[0] = CONTENTS_NOT_SET;
}
inline Predicate::ContentsCase Predicate::contents_case() const {
  return Predicate::ContentsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StateMap_StateGroup

// optional int64 group_id = 1;
inline bool StateMap_StateGroup::has_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StateMap_StateGroup::clear_group_id() {
  group_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StateMap_StateGroup::group_id() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.StateMap.StateGroup.group_id)
  return group_id_;
}
inline void StateMap_StateGroup::set_group_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  group_id_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.StateMap.StateGroup.group_id)
}

// repeated int32 value = 2;
inline int StateMap_StateGroup::value_size() const {
  return value_.size();
}
inline void StateMap_StateGroup::clear_value() {
  value_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StateMap_StateGroup::value(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.StateMap.StateGroup.value)
  return value_.Get(index);
}
inline void StateMap_StateGroup::set_value(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:android.os.statsd.StateMap.StateGroup.value)
}
inline void StateMap_StateGroup::add_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:android.os.statsd.StateMap.StateGroup.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
StateMap_StateGroup::value() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.StateMap.StateGroup.value)
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
StateMap_StateGroup::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.StateMap.StateGroup.value)
  return &value_;
}

// -------------------------------------------------------------------

// StateMap

// repeated .android.os.statsd.StateMap.StateGroup group = 1;
inline int StateMap::group_size() const {
  return group_.size();
}
inline void StateMap::clear_group() {
  group_.Clear();
}
inline ::android::os::statsd::StateMap_StateGroup* StateMap::mutable_group(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.StateMap.group)
  return group_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::StateMap_StateGroup >*
StateMap::mutable_group() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.StateMap.group)
  return &group_;
}
inline const ::android::os::statsd::StateMap_StateGroup& StateMap::group(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.StateMap.group)
  return group_.Get(index);
}
inline ::android::os::statsd::StateMap_StateGroup* StateMap::add_group() {
  // @@protoc_insertion_point(field_add:android.os.statsd.StateMap.group)
  return group_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::StateMap_StateGroup >&
StateMap::group() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.StateMap.group)
  return group_;
}

// -------------------------------------------------------------------

// State

// optional int64 id = 1;
inline bool State::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void State::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 State::id() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.State.id)
  return id_;
}
inline void State::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.State.id)
}

// optional int32 atom_id = 2;
inline bool State::has_atom_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void State::clear_atom_id() {
  atom_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 State::atom_id() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.State.atom_id)
  return atom_id_;
}
inline void State::set_atom_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  atom_id_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.State.atom_id)
}

// optional .android.os.statsd.StateMap map = 3;
inline bool State::has_map() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void State::clear_map() {
  if (map_ != nullptr) map_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::android::os::statsd::StateMap& State::map() const {
  const ::android::os::statsd::StateMap* p = map_;
  // @@protoc_insertion_point(field_get:android.os.statsd.State.map)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::statsd::StateMap*>(
      &::android::os::statsd::_StateMap_default_instance_);
}
inline ::android::os::statsd::StateMap* State::release_map() {
  // @@protoc_insertion_point(field_release:android.os.statsd.State.map)
  _has_bits_[0] &= ~0x00000001u;
  ::android::os::statsd::StateMap* temp = map_;
  map_ = nullptr;
  return temp;
}
inline ::android::os::statsd::StateMap* State::mutable_map() {
  _has_bits_[0] |= 0x00000001u;
  if (map_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::statsd::StateMap>(GetArenaNoVirtual());
    map_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.statsd.State.map)
  return map_;
}
inline void State::set_allocated_map(::android::os::statsd::StateMap* map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete map_;
  }
  if (map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  map_ = map;
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.State.map)
}

// -------------------------------------------------------------------

// MetricConditionLink

// optional int64 condition = 1;
inline bool MetricConditionLink::has_condition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MetricConditionLink::clear_condition() {
  condition_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MetricConditionLink::condition() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.MetricConditionLink.condition)
  return condition_;
}
inline void MetricConditionLink::set_condition(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  condition_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.MetricConditionLink.condition)
}

// optional .android.os.statsd.FieldMatcher fields_in_what = 2;
inline bool MetricConditionLink::has_fields_in_what() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetricConditionLink::clear_fields_in_what() {
  if (fields_in_what_ != nullptr) fields_in_what_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::android::os::statsd::FieldMatcher& MetricConditionLink::fields_in_what() const {
  const ::android::os::statsd::FieldMatcher* p = fields_in_what_;
  // @@protoc_insertion_point(field_get:android.os.statsd.MetricConditionLink.fields_in_what)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::statsd::FieldMatcher*>(
      &::android::os::statsd::_FieldMatcher_default_instance_);
}
inline ::android::os::statsd::FieldMatcher* MetricConditionLink::release_fields_in_what() {
  // @@protoc_insertion_point(field_release:android.os.statsd.MetricConditionLink.fields_in_what)
  _has_bits_[0] &= ~0x00000001u;
  ::android::os::statsd::FieldMatcher* temp = fields_in_what_;
  fields_in_what_ = nullptr;
  return temp;
}
inline ::android::os::statsd::FieldMatcher* MetricConditionLink::mutable_fields_in_what() {
  _has_bits_[0] |= 0x00000001u;
  if (fields_in_what_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::statsd::FieldMatcher>(GetArenaNoVirtual());
    fields_in_what_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.statsd.MetricConditionLink.fields_in_what)
  return fields_in_what_;
}
inline void MetricConditionLink::set_allocated_fields_in_what(::android::os::statsd::FieldMatcher* fields_in_what) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fields_in_what_;
  }
  if (fields_in_what) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fields_in_what = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fields_in_what, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fields_in_what_ = fields_in_what;
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.MetricConditionLink.fields_in_what)
}

// optional .android.os.statsd.FieldMatcher fields_in_condition = 3;
inline bool MetricConditionLink::has_fields_in_condition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MetricConditionLink::clear_fields_in_condition() {
  if (fields_in_condition_ != nullptr) fields_in_condition_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::android::os::statsd::FieldMatcher& MetricConditionLink::fields_in_condition() const {
  const ::android::os::statsd::FieldMatcher* p = fields_in_condition_;
  // @@protoc_insertion_point(field_get:android.os.statsd.MetricConditionLink.fields_in_condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::statsd::FieldMatcher*>(
      &::android::os::statsd::_FieldMatcher_default_instance_);
}
inline ::android::os::statsd::FieldMatcher* MetricConditionLink::release_fields_in_condition() {
  // @@protoc_insertion_point(field_release:android.os.statsd.MetricConditionLink.fields_in_condition)
  _has_bits_[0] &= ~0x00000002u;
  ::android::os::statsd::FieldMatcher* temp = fields_in_condition_;
  fields_in_condition_ = nullptr;
  return temp;
}
inline ::android::os::statsd::FieldMatcher* MetricConditionLink::mutable_fields_in_condition() {
  _has_bits_[0] |= 0x00000002u;
  if (fields_in_condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::statsd::FieldMatcher>(GetArenaNoVirtual());
    fields_in_condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.statsd.MetricConditionLink.fields_in_condition)
  return fields_in_condition_;
}
inline void MetricConditionLink::set_allocated_fields_in_condition(::android::os::statsd::FieldMatcher* fields_in_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fields_in_condition_;
  }
  if (fields_in_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fields_in_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fields_in_condition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  fields_in_condition_ = fields_in_condition;
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.MetricConditionLink.fields_in_condition)
}

// -------------------------------------------------------------------

// MetricStateLink

// optional int32 state_atom_id = 1;
inline bool MetricStateLink::has_state_atom_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MetricStateLink::clear_state_atom_id() {
  state_atom_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MetricStateLink::state_atom_id() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.MetricStateLink.state_atom_id)
  return state_atom_id_;
}
inline void MetricStateLink::set_state_atom_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  state_atom_id_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.MetricStateLink.state_atom_id)
}

// optional .android.os.statsd.FieldMatcher fields_in_what = 2;
inline bool MetricStateLink::has_fields_in_what() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetricStateLink::clear_fields_in_what() {
  if (fields_in_what_ != nullptr) fields_in_what_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::android::os::statsd::FieldMatcher& MetricStateLink::fields_in_what() const {
  const ::android::os::statsd::FieldMatcher* p = fields_in_what_;
  // @@protoc_insertion_point(field_get:android.os.statsd.MetricStateLink.fields_in_what)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::statsd::FieldMatcher*>(
      &::android::os::statsd::_FieldMatcher_default_instance_);
}
inline ::android::os::statsd::FieldMatcher* MetricStateLink::release_fields_in_what() {
  // @@protoc_insertion_point(field_release:android.os.statsd.MetricStateLink.fields_in_what)
  _has_bits_[0] &= ~0x00000001u;
  ::android::os::statsd::FieldMatcher* temp = fields_in_what_;
  fields_in_what_ = nullptr;
  return temp;
}
inline ::android::os::statsd::FieldMatcher* MetricStateLink::mutable_fields_in_what() {
  _has_bits_[0] |= 0x00000001u;
  if (fields_in_what_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::statsd::FieldMatcher>(GetArenaNoVirtual());
    fields_in_what_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.statsd.MetricStateLink.fields_in_what)
  return fields_in_what_;
}
inline void MetricStateLink::set_allocated_fields_in_what(::android::os::statsd::FieldMatcher* fields_in_what) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fields_in_what_;
  }
  if (fields_in_what) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fields_in_what = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fields_in_what, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fields_in_what_ = fields_in_what;
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.MetricStateLink.fields_in_what)
}

// optional .android.os.statsd.FieldMatcher fields_in_state = 3;
inline bool MetricStateLink::has_fields_in_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MetricStateLink::clear_fields_in_state() {
  if (fields_in_state_ != nullptr) fields_in_state_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::android::os::statsd::FieldMatcher& MetricStateLink::fields_in_state() const {
  const ::android::os::statsd::FieldMatcher* p = fields_in_state_;
  // @@protoc_insertion_point(field_get:android.os.statsd.MetricStateLink.fields_in_state)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::statsd::FieldMatcher*>(
      &::android::os::statsd::_FieldMatcher_default_instance_);
}
inline ::android::os::statsd::FieldMatcher* MetricStateLink::release_fields_in_state() {
  // @@protoc_insertion_point(field_release:android.os.statsd.MetricStateLink.fields_in_state)
  _has_bits_[0] &= ~0x00000002u;
  ::android::os::statsd::FieldMatcher* temp = fields_in_state_;
  fields_in_state_ = nullptr;
  return temp;
}
inline ::android::os::statsd::FieldMatcher* MetricStateLink::mutable_fields_in_state() {
  _has_bits_[0] |= 0x00000002u;
  if (fields_in_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::statsd::FieldMatcher>(GetArenaNoVirtual());
    fields_in_state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.statsd.MetricStateLink.fields_in_state)
  return fields_in_state_;
}
inline void MetricStateLink::set_allocated_fields_in_state(::android::os::statsd::FieldMatcher* fields_in_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fields_in_state_;
  }
  if (fields_in_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fields_in_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fields_in_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  fields_in_state_ = fields_in_state;
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.MetricStateLink.fields_in_state)
}

// -------------------------------------------------------------------

// FieldFilter

// optional bool include_all = 1 [default = false];
inline bool FieldFilter::has_include_all() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FieldFilter::clear_include_all() {
  include_all_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool FieldFilter::include_all() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.FieldFilter.include_all)
  return include_all_;
}
inline void FieldFilter::set_include_all(bool value) {
  _has_bits_[0] |= 0x00000002u;
  include_all_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.FieldFilter.include_all)
}

// optional .android.os.statsd.FieldMatcher fields = 2;
inline bool FieldFilter::has_fields() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FieldFilter::clear_fields() {
  if (fields_ != nullptr) fields_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::android::os::statsd::FieldMatcher& FieldFilter::fields() const {
  const ::android::os::statsd::FieldMatcher* p = fields_;
  // @@protoc_insertion_point(field_get:android.os.statsd.FieldFilter.fields)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::statsd::FieldMatcher*>(
      &::android::os::statsd::_FieldMatcher_default_instance_);
}
inline ::android::os::statsd::FieldMatcher* FieldFilter::release_fields() {
  // @@protoc_insertion_point(field_release:android.os.statsd.FieldFilter.fields)
  _has_bits_[0] &= ~0x00000001u;
  ::android::os::statsd::FieldMatcher* temp = fields_;
  fields_ = nullptr;
  return temp;
}
inline ::android::os::statsd::FieldMatcher* FieldFilter::mutable_fields() {
  _has_bits_[0] |= 0x00000001u;
  if (fields_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::statsd::FieldMatcher>(GetArenaNoVirtual());
    fields_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.statsd.FieldFilter.fields)
  return fields_;
}
inline void FieldFilter::set_allocated_fields(::android::os::statsd::FieldMatcher* fields) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fields_;
  }
  if (fields) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fields = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fields, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fields_ = fields;
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.FieldFilter.fields)
}

// -------------------------------------------------------------------

// UploadThreshold

// optional int64 lt_int = 1;
inline bool UploadThreshold::has_lt_int() const {
  return value_comparison_case() == kLtInt;
}
inline void UploadThreshold::set_has_lt_int() {
  _oneof_case_[0] = kLtInt;
}
inline void UploadThreshold::clear_lt_int() {
  if (has_lt_int()) {
    value_comparison_.lt_int_ = PROTOBUF_LONGLONG(0);
    clear_has_value_comparison();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UploadThreshold::lt_int() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.UploadThreshold.lt_int)
  if (has_lt_int()) {
    return value_comparison_.lt_int_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void UploadThreshold::set_lt_int(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!has_lt_int()) {
    clear_value_comparison();
    set_has_lt_int();
  }
  value_comparison_.lt_int_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.UploadThreshold.lt_int)
}

// optional int64 gt_int = 2;
inline bool UploadThreshold::has_gt_int() const {
  return value_comparison_case() == kGtInt;
}
inline void UploadThreshold::set_has_gt_int() {
  _oneof_case_[0] = kGtInt;
}
inline void UploadThreshold::clear_gt_int() {
  if (has_gt_int()) {
    value_comparison_.gt_int_ = PROTOBUF_LONGLONG(0);
    clear_has_value_comparison();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UploadThreshold::gt_int() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.UploadThreshold.gt_int)
  if (has_gt_int()) {
    return value_comparison_.gt_int_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void UploadThreshold::set_gt_int(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!has_gt_int()) {
    clear_value_comparison();
    set_has_gt_int();
  }
  value_comparison_.gt_int_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.UploadThreshold.gt_int)
}

// optional float lt_float = 3;
inline bool UploadThreshold::has_lt_float() const {
  return value_comparison_case() == kLtFloat;
}
inline void UploadThreshold::set_has_lt_float() {
  _oneof_case_[0] = kLtFloat;
}
inline void UploadThreshold::clear_lt_float() {
  if (has_lt_float()) {
    value_comparison_.lt_float_ = 0;
    clear_has_value_comparison();
  }
}
inline float UploadThreshold::lt_float() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.UploadThreshold.lt_float)
  if (has_lt_float()) {
    return value_comparison_.lt_float_;
  }
  return 0;
}
inline void UploadThreshold::set_lt_float(float value) {
  if (!has_lt_float()) {
    clear_value_comparison();
    set_has_lt_float();
  }
  value_comparison_.lt_float_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.UploadThreshold.lt_float)
}

// optional float gt_float = 4;
inline bool UploadThreshold::has_gt_float() const {
  return value_comparison_case() == kGtFloat;
}
inline void UploadThreshold::set_has_gt_float() {
  _oneof_case_[0] = kGtFloat;
}
inline void UploadThreshold::clear_gt_float() {
  if (has_gt_float()) {
    value_comparison_.gt_float_ = 0;
    clear_has_value_comparison();
  }
}
inline float UploadThreshold::gt_float() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.UploadThreshold.gt_float)
  if (has_gt_float()) {
    return value_comparison_.gt_float_;
  }
  return 0;
}
inline void UploadThreshold::set_gt_float(float value) {
  if (!has_gt_float()) {
    clear_value_comparison();
    set_has_gt_float();
  }
  value_comparison_.gt_float_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.UploadThreshold.gt_float)
}

// optional int64 lte_int = 5;
inline bool UploadThreshold::has_lte_int() const {
  return value_comparison_case() == kLteInt;
}
inline void UploadThreshold::set_has_lte_int() {
  _oneof_case_[0] = kLteInt;
}
inline void UploadThreshold::clear_lte_int() {
  if (has_lte_int()) {
    value_comparison_.lte_int_ = PROTOBUF_LONGLONG(0);
    clear_has_value_comparison();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UploadThreshold::lte_int() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.UploadThreshold.lte_int)
  if (has_lte_int()) {
    return value_comparison_.lte_int_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void UploadThreshold::set_lte_int(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!has_lte_int()) {
    clear_value_comparison();
    set_has_lte_int();
  }
  value_comparison_.lte_int_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.UploadThreshold.lte_int)
}

// optional int64 gte_int = 6;
inline bool UploadThreshold::has_gte_int() const {
  return value_comparison_case() == kGteInt;
}
inline void UploadThreshold::set_has_gte_int() {
  _oneof_case_[0] = kGteInt;
}
inline void UploadThreshold::clear_gte_int() {
  if (has_gte_int()) {
    value_comparison_.gte_int_ = PROTOBUF_LONGLONG(0);
    clear_has_value_comparison();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UploadThreshold::gte_int() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.UploadThreshold.gte_int)
  if (has_gte_int()) {
    return value_comparison_.gte_int_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void UploadThreshold::set_gte_int(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!has_gte_int()) {
    clear_value_comparison();
    set_has_gte_int();
  }
  value_comparison_.gte_int_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.UploadThreshold.gte_int)
}

inline bool UploadThreshold::has_value_comparison() const {
  return value_comparison_case() != VALUE_COMPARISON_NOT_SET;
}
inline void UploadThreshold::clear_has_value_comparison() {
  _oneof_case_[0] = VALUE_COMPARISON_NOT_SET;
}
inline UploadThreshold::ValueComparisonCase UploadThreshold::value_comparison_case() const {
  return UploadThreshold::ValueComparisonCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// EventMetric

// optional int64 id = 1;
inline bool EventMetric::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventMetric::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EventMetric::id() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.EventMetric.id)
  return id_;
}
inline void EventMetric::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.EventMetric.id)
}

// optional int64 what = 2;
inline bool EventMetric::has_what() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EventMetric::clear_what() {
  what_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EventMetric::what() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.EventMetric.what)
  return what_;
}
inline void EventMetric::set_what(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  what_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.EventMetric.what)
}

// optional int64 condition = 3;
inline bool EventMetric::has_condition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EventMetric::clear_condition() {
  condition_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EventMetric::condition() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.EventMetric.condition)
  return condition_;
}
inline void EventMetric::set_condition(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  condition_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.EventMetric.condition)
}

// repeated .android.os.statsd.MetricConditionLink links = 4;
inline int EventMetric::links_size() const {
  return links_.size();
}
inline void EventMetric::clear_links() {
  links_.Clear();
}
inline ::android::os::statsd::MetricConditionLink* EventMetric::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.EventMetric.links)
  return links_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricConditionLink >*
EventMetric::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.EventMetric.links)
  return &links_;
}
inline const ::android::os::statsd::MetricConditionLink& EventMetric::links(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.EventMetric.links)
  return links_.Get(index);
}
inline ::android::os::statsd::MetricConditionLink* EventMetric::add_links() {
  // @@protoc_insertion_point(field_add:android.os.statsd.EventMetric.links)
  return links_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricConditionLink >&
EventMetric::links() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.EventMetric.links)
  return links_;
}

// -------------------------------------------------------------------

// CountMetric

// optional int64 id = 1;
inline bool CountMetric::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CountMetric::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CountMetric::id() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.CountMetric.id)
  return id_;
}
inline void CountMetric::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.CountMetric.id)
}

// optional int64 what = 2;
inline bool CountMetric::has_what() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CountMetric::clear_what() {
  what_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CountMetric::what() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.CountMetric.what)
  return what_;
}
inline void CountMetric::set_what(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  what_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.CountMetric.what)
}

// optional int64 condition = 3;
inline bool CountMetric::has_condition() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CountMetric::clear_condition() {
  condition_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CountMetric::condition() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.CountMetric.condition)
  return condition_;
}
inline void CountMetric::set_condition(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  condition_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.CountMetric.condition)
}

// optional .android.os.statsd.FieldMatcher dimensions_in_what = 4;
inline bool CountMetric::has_dimensions_in_what() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CountMetric::clear_dimensions_in_what() {
  if (dimensions_in_what_ != nullptr) dimensions_in_what_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::android::os::statsd::FieldMatcher& CountMetric::dimensions_in_what() const {
  const ::android::os::statsd::FieldMatcher* p = dimensions_in_what_;
  // @@protoc_insertion_point(field_get:android.os.statsd.CountMetric.dimensions_in_what)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::statsd::FieldMatcher*>(
      &::android::os::statsd::_FieldMatcher_default_instance_);
}
inline ::android::os::statsd::FieldMatcher* CountMetric::release_dimensions_in_what() {
  // @@protoc_insertion_point(field_release:android.os.statsd.CountMetric.dimensions_in_what)
  _has_bits_[0] &= ~0x00000001u;
  ::android::os::statsd::FieldMatcher* temp = dimensions_in_what_;
  dimensions_in_what_ = nullptr;
  return temp;
}
inline ::android::os::statsd::FieldMatcher* CountMetric::mutable_dimensions_in_what() {
  _has_bits_[0] |= 0x00000001u;
  if (dimensions_in_what_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::statsd::FieldMatcher>(GetArenaNoVirtual());
    dimensions_in_what_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.statsd.CountMetric.dimensions_in_what)
  return dimensions_in_what_;
}
inline void CountMetric::set_allocated_dimensions_in_what(::android::os::statsd::FieldMatcher* dimensions_in_what) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dimensions_in_what_;
  }
  if (dimensions_in_what) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dimensions_in_what = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dimensions_in_what, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dimensions_in_what_ = dimensions_in_what;
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.CountMetric.dimensions_in_what)
}

// repeated int64 slice_by_state = 8;
inline int CountMetric::slice_by_state_size() const {
  return slice_by_state_.size();
}
inline void CountMetric::clear_slice_by_state() {
  slice_by_state_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CountMetric::slice_by_state(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.CountMetric.slice_by_state)
  return slice_by_state_.Get(index);
}
inline void CountMetric::set_slice_by_state(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  slice_by_state_.Set(index, value);
  // @@protoc_insertion_point(field_set:android.os.statsd.CountMetric.slice_by_state)
}
inline void CountMetric::add_slice_by_state(::PROTOBUF_NAMESPACE_ID::int64 value) {
  slice_by_state_.Add(value);
  // @@protoc_insertion_point(field_add:android.os.statsd.CountMetric.slice_by_state)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
CountMetric::slice_by_state() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.CountMetric.slice_by_state)
  return slice_by_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
CountMetric::mutable_slice_by_state() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.CountMetric.slice_by_state)
  return &slice_by_state_;
}

// optional .android.os.statsd.TimeUnit bucket = 5;
inline bool CountMetric::has_bucket() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CountMetric::clear_bucket() {
  bucket_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::android::os::statsd::TimeUnit CountMetric::bucket() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.CountMetric.bucket)
  return static_cast< ::android::os::statsd::TimeUnit >(bucket_);
}
inline void CountMetric::set_bucket(::android::os::statsd::TimeUnit value) {
  assert(::android::os::statsd::TimeUnit_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  bucket_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.CountMetric.bucket)
}

// repeated .android.os.statsd.MetricConditionLink links = 6;
inline int CountMetric::links_size() const {
  return links_.size();
}
inline void CountMetric::clear_links() {
  links_.Clear();
}
inline ::android::os::statsd::MetricConditionLink* CountMetric::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.CountMetric.links)
  return links_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricConditionLink >*
CountMetric::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.CountMetric.links)
  return &links_;
}
inline const ::android::os::statsd::MetricConditionLink& CountMetric::links(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.CountMetric.links)
  return links_.Get(index);
}
inline ::android::os::statsd::MetricConditionLink* CountMetric::add_links() {
  // @@protoc_insertion_point(field_add:android.os.statsd.CountMetric.links)
  return links_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricConditionLink >&
CountMetric::links() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.CountMetric.links)
  return links_;
}

// repeated .android.os.statsd.MetricStateLink state_link = 9;
inline int CountMetric::state_link_size() const {
  return state_link_.size();
}
inline void CountMetric::clear_state_link() {
  state_link_.Clear();
}
inline ::android::os::statsd::MetricStateLink* CountMetric::mutable_state_link(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.CountMetric.state_link)
  return state_link_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricStateLink >*
CountMetric::mutable_state_link() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.CountMetric.state_link)
  return &state_link_;
}
inline const ::android::os::statsd::MetricStateLink& CountMetric::state_link(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.CountMetric.state_link)
  return state_link_.Get(index);
}
inline ::android::os::statsd::MetricStateLink* CountMetric::add_state_link() {
  // @@protoc_insertion_point(field_add:android.os.statsd.CountMetric.state_link)
  return state_link_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricStateLink >&
CountMetric::state_link() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.CountMetric.state_link)
  return state_link_;
}

// optional .android.os.statsd.UploadThreshold threshold = 10;
inline bool CountMetric::has_threshold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CountMetric::clear_threshold() {
  if (threshold_ != nullptr) threshold_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::android::os::statsd::UploadThreshold& CountMetric::threshold() const {
  const ::android::os::statsd::UploadThreshold* p = threshold_;
  // @@protoc_insertion_point(field_get:android.os.statsd.CountMetric.threshold)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::statsd::UploadThreshold*>(
      &::android::os::statsd::_UploadThreshold_default_instance_);
}
inline ::android::os::statsd::UploadThreshold* CountMetric::release_threshold() {
  // @@protoc_insertion_point(field_release:android.os.statsd.CountMetric.threshold)
  _has_bits_[0] &= ~0x00000004u;
  ::android::os::statsd::UploadThreshold* temp = threshold_;
  threshold_ = nullptr;
  return temp;
}
inline ::android::os::statsd::UploadThreshold* CountMetric::mutable_threshold() {
  _has_bits_[0] |= 0x00000004u;
  if (threshold_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::statsd::UploadThreshold>(GetArenaNoVirtual());
    threshold_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.statsd.CountMetric.threshold)
  return threshold_;
}
inline void CountMetric::set_allocated_threshold(::android::os::statsd::UploadThreshold* threshold) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete threshold_;
  }
  if (threshold) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      threshold = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, threshold, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  threshold_ = threshold;
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.CountMetric.threshold)
}

// optional bool split_bucket_for_app_upgrade = 11 [default = true];
inline bool CountMetric::has_split_bucket_for_app_upgrade() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CountMetric::clear_split_bucket_for_app_upgrade() {
  split_bucket_for_app_upgrade_ = true;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CountMetric::split_bucket_for_app_upgrade() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.CountMetric.split_bucket_for_app_upgrade)
  return split_bucket_for_app_upgrade_;
}
inline void CountMetric::set_split_bucket_for_app_upgrade(bool value) {
  _has_bits_[0] |= 0x00000080u;
  split_bucket_for_app_upgrade_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.CountMetric.split_bucket_for_app_upgrade)
}

// optional .android.os.statsd.FieldMatcher dimensions_in_condition = 7 [deprecated = true];
inline bool CountMetric::has_dimensions_in_condition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CountMetric::clear_dimensions_in_condition() {
  if (dimensions_in_condition_ != nullptr) dimensions_in_condition_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::android::os::statsd::FieldMatcher& CountMetric::dimensions_in_condition() const {
  const ::android::os::statsd::FieldMatcher* p = dimensions_in_condition_;
  // @@protoc_insertion_point(field_get:android.os.statsd.CountMetric.dimensions_in_condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::statsd::FieldMatcher*>(
      &::android::os::statsd::_FieldMatcher_default_instance_);
}
inline ::android::os::statsd::FieldMatcher* CountMetric::release_dimensions_in_condition() {
  // @@protoc_insertion_point(field_release:android.os.statsd.CountMetric.dimensions_in_condition)
  _has_bits_[0] &= ~0x00000002u;
  ::android::os::statsd::FieldMatcher* temp = dimensions_in_condition_;
  dimensions_in_condition_ = nullptr;
  return temp;
}
inline ::android::os::statsd::FieldMatcher* CountMetric::mutable_dimensions_in_condition() {
  _has_bits_[0] |= 0x00000002u;
  if (dimensions_in_condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::statsd::FieldMatcher>(GetArenaNoVirtual());
    dimensions_in_condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.statsd.CountMetric.dimensions_in_condition)
  return dimensions_in_condition_;
}
inline void CountMetric::set_allocated_dimensions_in_condition(::android::os::statsd::FieldMatcher* dimensions_in_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dimensions_in_condition_;
  }
  if (dimensions_in_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dimensions_in_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dimensions_in_condition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dimensions_in_condition_ = dimensions_in_condition;
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.CountMetric.dimensions_in_condition)
}

// -------------------------------------------------------------------

// DurationMetric

// optional int64 id = 1;
inline bool DurationMetric::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DurationMetric::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DurationMetric::id() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.DurationMetric.id)
  return id_;
}
inline void DurationMetric::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.DurationMetric.id)
}

// optional int64 what = 2;
inline bool DurationMetric::has_what() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DurationMetric::clear_what() {
  what_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DurationMetric::what() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.DurationMetric.what)
  return what_;
}
inline void DurationMetric::set_what(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  what_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.DurationMetric.what)
}

// optional int64 condition = 3;
inline bool DurationMetric::has_condition() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DurationMetric::clear_condition() {
  condition_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DurationMetric::condition() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.DurationMetric.condition)
  return condition_;
}
inline void DurationMetric::set_condition(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  condition_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.DurationMetric.condition)
}

// repeated int64 slice_by_state = 9;
inline int DurationMetric::slice_by_state_size() const {
  return slice_by_state_.size();
}
inline void DurationMetric::clear_slice_by_state() {
  slice_by_state_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DurationMetric::slice_by_state(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.DurationMetric.slice_by_state)
  return slice_by_state_.Get(index);
}
inline void DurationMetric::set_slice_by_state(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  slice_by_state_.Set(index, value);
  // @@protoc_insertion_point(field_set:android.os.statsd.DurationMetric.slice_by_state)
}
inline void DurationMetric::add_slice_by_state(::PROTOBUF_NAMESPACE_ID::int64 value) {
  slice_by_state_.Add(value);
  // @@protoc_insertion_point(field_add:android.os.statsd.DurationMetric.slice_by_state)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
DurationMetric::slice_by_state() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.DurationMetric.slice_by_state)
  return slice_by_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
DurationMetric::mutable_slice_by_state() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.DurationMetric.slice_by_state)
  return &slice_by_state_;
}

// repeated .android.os.statsd.MetricConditionLink links = 4;
inline int DurationMetric::links_size() const {
  return links_.size();
}
inline void DurationMetric::clear_links() {
  links_.Clear();
}
inline ::android::os::statsd::MetricConditionLink* DurationMetric::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.DurationMetric.links)
  return links_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricConditionLink >*
DurationMetric::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.DurationMetric.links)
  return &links_;
}
inline const ::android::os::statsd::MetricConditionLink& DurationMetric::links(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.DurationMetric.links)
  return links_.Get(index);
}
inline ::android::os::statsd::MetricConditionLink* DurationMetric::add_links() {
  // @@protoc_insertion_point(field_add:android.os.statsd.DurationMetric.links)
  return links_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricConditionLink >&
DurationMetric::links() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.DurationMetric.links)
  return links_;
}

// repeated .android.os.statsd.MetricStateLink state_link = 10;
inline int DurationMetric::state_link_size() const {
  return state_link_.size();
}
inline void DurationMetric::clear_state_link() {
  state_link_.Clear();
}
inline ::android::os::statsd::MetricStateLink* DurationMetric::mutable_state_link(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.DurationMetric.state_link)
  return state_link_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricStateLink >*
DurationMetric::mutable_state_link() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.DurationMetric.state_link)
  return &state_link_;
}
inline const ::android::os::statsd::MetricStateLink& DurationMetric::state_link(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.DurationMetric.state_link)
  return state_link_.Get(index);
}
inline ::android::os::statsd::MetricStateLink* DurationMetric::add_state_link() {
  // @@protoc_insertion_point(field_add:android.os.statsd.DurationMetric.state_link)
  return state_link_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricStateLink >&
DurationMetric::state_link() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.DurationMetric.state_link)
  return state_link_;
}

// optional .android.os.statsd.DurationMetric.AggregationType aggregation_type = 5 [default = SUM];
inline bool DurationMetric::has_aggregation_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DurationMetric::clear_aggregation_type() {
  aggregation_type_ = 1;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::android::os::statsd::DurationMetric_AggregationType DurationMetric::aggregation_type() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.DurationMetric.aggregation_type)
  return static_cast< ::android::os::statsd::DurationMetric_AggregationType >(aggregation_type_);
}
inline void DurationMetric::set_aggregation_type(::android::os::statsd::DurationMetric_AggregationType value) {
  assert(::android::os::statsd::DurationMetric_AggregationType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  aggregation_type_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.DurationMetric.aggregation_type)
}

// optional .android.os.statsd.FieldMatcher dimensions_in_what = 6;
inline bool DurationMetric::has_dimensions_in_what() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DurationMetric::clear_dimensions_in_what() {
  if (dimensions_in_what_ != nullptr) dimensions_in_what_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::android::os::statsd::FieldMatcher& DurationMetric::dimensions_in_what() const {
  const ::android::os::statsd::FieldMatcher* p = dimensions_in_what_;
  // @@protoc_insertion_point(field_get:android.os.statsd.DurationMetric.dimensions_in_what)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::statsd::FieldMatcher*>(
      &::android::os::statsd::_FieldMatcher_default_instance_);
}
inline ::android::os::statsd::FieldMatcher* DurationMetric::release_dimensions_in_what() {
  // @@protoc_insertion_point(field_release:android.os.statsd.DurationMetric.dimensions_in_what)
  _has_bits_[0] &= ~0x00000001u;
  ::android::os::statsd::FieldMatcher* temp = dimensions_in_what_;
  dimensions_in_what_ = nullptr;
  return temp;
}
inline ::android::os::statsd::FieldMatcher* DurationMetric::mutable_dimensions_in_what() {
  _has_bits_[0] |= 0x00000001u;
  if (dimensions_in_what_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::statsd::FieldMatcher>(GetArenaNoVirtual());
    dimensions_in_what_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.statsd.DurationMetric.dimensions_in_what)
  return dimensions_in_what_;
}
inline void DurationMetric::set_allocated_dimensions_in_what(::android::os::statsd::FieldMatcher* dimensions_in_what) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dimensions_in_what_;
  }
  if (dimensions_in_what) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dimensions_in_what = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dimensions_in_what, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dimensions_in_what_ = dimensions_in_what;
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.DurationMetric.dimensions_in_what)
}

// optional .android.os.statsd.TimeUnit bucket = 7;
inline bool DurationMetric::has_bucket() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DurationMetric::clear_bucket() {
  bucket_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::android::os::statsd::TimeUnit DurationMetric::bucket() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.DurationMetric.bucket)
  return static_cast< ::android::os::statsd::TimeUnit >(bucket_);
}
inline void DurationMetric::set_bucket(::android::os::statsd::TimeUnit value) {
  assert(::android::os::statsd::TimeUnit_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  bucket_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.DurationMetric.bucket)
}

// optional .android.os.statsd.UploadThreshold threshold = 11;
inline bool DurationMetric::has_threshold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DurationMetric::clear_threshold() {
  if (threshold_ != nullptr) threshold_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::android::os::statsd::UploadThreshold& DurationMetric::threshold() const {
  const ::android::os::statsd::UploadThreshold* p = threshold_;
  // @@protoc_insertion_point(field_get:android.os.statsd.DurationMetric.threshold)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::statsd::UploadThreshold*>(
      &::android::os::statsd::_UploadThreshold_default_instance_);
}
inline ::android::os::statsd::UploadThreshold* DurationMetric::release_threshold() {
  // @@protoc_insertion_point(field_release:android.os.statsd.DurationMetric.threshold)
  _has_bits_[0] &= ~0x00000004u;
  ::android::os::statsd::UploadThreshold* temp = threshold_;
  threshold_ = nullptr;
  return temp;
}
inline ::android::os::statsd::UploadThreshold* DurationMetric::mutable_threshold() {
  _has_bits_[0] |= 0x00000004u;
  if (threshold_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::statsd::UploadThreshold>(GetArenaNoVirtual());
    threshold_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.statsd.DurationMetric.threshold)
  return threshold_;
}
inline void DurationMetric::set_allocated_threshold(::android::os::statsd::UploadThreshold* threshold) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete threshold_;
  }
  if (threshold) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      threshold = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, threshold, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  threshold_ = threshold;
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.DurationMetric.threshold)
}

// optional bool split_bucket_for_app_upgrade = 12 [default = true];
inline bool DurationMetric::has_split_bucket_for_app_upgrade() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DurationMetric::clear_split_bucket_for_app_upgrade() {
  split_bucket_for_app_upgrade_ = true;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool DurationMetric::split_bucket_for_app_upgrade() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.DurationMetric.split_bucket_for_app_upgrade)
  return split_bucket_for_app_upgrade_;
}
inline void DurationMetric::set_split_bucket_for_app_upgrade(bool value) {
  _has_bits_[0] |= 0x00000100u;
  split_bucket_for_app_upgrade_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.DurationMetric.split_bucket_for_app_upgrade)
}

// optional .android.os.statsd.FieldMatcher dimensions_in_condition = 8 [deprecated = true];
inline bool DurationMetric::has_dimensions_in_condition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DurationMetric::clear_dimensions_in_condition() {
  if (dimensions_in_condition_ != nullptr) dimensions_in_condition_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::android::os::statsd::FieldMatcher& DurationMetric::dimensions_in_condition() const {
  const ::android::os::statsd::FieldMatcher* p = dimensions_in_condition_;
  // @@protoc_insertion_point(field_get:android.os.statsd.DurationMetric.dimensions_in_condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::statsd::FieldMatcher*>(
      &::android::os::statsd::_FieldMatcher_default_instance_);
}
inline ::android::os::statsd::FieldMatcher* DurationMetric::release_dimensions_in_condition() {
  // @@protoc_insertion_point(field_release:android.os.statsd.DurationMetric.dimensions_in_condition)
  _has_bits_[0] &= ~0x00000002u;
  ::android::os::statsd::FieldMatcher* temp = dimensions_in_condition_;
  dimensions_in_condition_ = nullptr;
  return temp;
}
inline ::android::os::statsd::FieldMatcher* DurationMetric::mutable_dimensions_in_condition() {
  _has_bits_[0] |= 0x00000002u;
  if (dimensions_in_condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::statsd::FieldMatcher>(GetArenaNoVirtual());
    dimensions_in_condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.statsd.DurationMetric.dimensions_in_condition)
  return dimensions_in_condition_;
}
inline void DurationMetric::set_allocated_dimensions_in_condition(::android::os::statsd::FieldMatcher* dimensions_in_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dimensions_in_condition_;
  }
  if (dimensions_in_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dimensions_in_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dimensions_in_condition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dimensions_in_condition_ = dimensions_in_condition;
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.DurationMetric.dimensions_in_condition)
}

// -------------------------------------------------------------------

// GaugeMetric

// optional int64 id = 1;
inline bool GaugeMetric::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GaugeMetric::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GaugeMetric::id() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.GaugeMetric.id)
  return id_;
}
inline void GaugeMetric::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.GaugeMetric.id)
}

// optional int64 what = 2;
inline bool GaugeMetric::has_what() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GaugeMetric::clear_what() {
  what_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GaugeMetric::what() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.GaugeMetric.what)
  return what_;
}
inline void GaugeMetric::set_what(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  what_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.GaugeMetric.what)
}

// optional int64 trigger_event = 12;
inline bool GaugeMetric::has_trigger_event() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GaugeMetric::clear_trigger_event() {
  trigger_event_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GaugeMetric::trigger_event() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.GaugeMetric.trigger_event)
  return trigger_event_;
}
inline void GaugeMetric::set_trigger_event(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  trigger_event_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.GaugeMetric.trigger_event)
}

// optional .android.os.statsd.FieldFilter gauge_fields_filter = 3;
inline bool GaugeMetric::has_gauge_fields_filter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GaugeMetric::clear_gauge_fields_filter() {
  if (gauge_fields_filter_ != nullptr) gauge_fields_filter_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::android::os::statsd::FieldFilter& GaugeMetric::gauge_fields_filter() const {
  const ::android::os::statsd::FieldFilter* p = gauge_fields_filter_;
  // @@protoc_insertion_point(field_get:android.os.statsd.GaugeMetric.gauge_fields_filter)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::statsd::FieldFilter*>(
      &::android::os::statsd::_FieldFilter_default_instance_);
}
inline ::android::os::statsd::FieldFilter* GaugeMetric::release_gauge_fields_filter() {
  // @@protoc_insertion_point(field_release:android.os.statsd.GaugeMetric.gauge_fields_filter)
  _has_bits_[0] &= ~0x00000001u;
  ::android::os::statsd::FieldFilter* temp = gauge_fields_filter_;
  gauge_fields_filter_ = nullptr;
  return temp;
}
inline ::android::os::statsd::FieldFilter* GaugeMetric::mutable_gauge_fields_filter() {
  _has_bits_[0] |= 0x00000001u;
  if (gauge_fields_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::statsd::FieldFilter>(GetArenaNoVirtual());
    gauge_fields_filter_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.statsd.GaugeMetric.gauge_fields_filter)
  return gauge_fields_filter_;
}
inline void GaugeMetric::set_allocated_gauge_fields_filter(::android::os::statsd::FieldFilter* gauge_fields_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gauge_fields_filter_;
  }
  if (gauge_fields_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gauge_fields_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gauge_fields_filter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gauge_fields_filter_ = gauge_fields_filter;
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.GaugeMetric.gauge_fields_filter)
}

// optional int64 condition = 4;
inline bool GaugeMetric::has_condition() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GaugeMetric::clear_condition() {
  condition_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GaugeMetric::condition() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.GaugeMetric.condition)
  return condition_;
}
inline void GaugeMetric::set_condition(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  condition_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.GaugeMetric.condition)
}

// optional .android.os.statsd.FieldMatcher dimensions_in_what = 5;
inline bool GaugeMetric::has_dimensions_in_what() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GaugeMetric::clear_dimensions_in_what() {
  if (dimensions_in_what_ != nullptr) dimensions_in_what_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::android::os::statsd::FieldMatcher& GaugeMetric::dimensions_in_what() const {
  const ::android::os::statsd::FieldMatcher* p = dimensions_in_what_;
  // @@protoc_insertion_point(field_get:android.os.statsd.GaugeMetric.dimensions_in_what)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::statsd::FieldMatcher*>(
      &::android::os::statsd::_FieldMatcher_default_instance_);
}
inline ::android::os::statsd::FieldMatcher* GaugeMetric::release_dimensions_in_what() {
  // @@protoc_insertion_point(field_release:android.os.statsd.GaugeMetric.dimensions_in_what)
  _has_bits_[0] &= ~0x00000002u;
  ::android::os::statsd::FieldMatcher* temp = dimensions_in_what_;
  dimensions_in_what_ = nullptr;
  return temp;
}
inline ::android::os::statsd::FieldMatcher* GaugeMetric::mutable_dimensions_in_what() {
  _has_bits_[0] |= 0x00000002u;
  if (dimensions_in_what_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::statsd::FieldMatcher>(GetArenaNoVirtual());
    dimensions_in_what_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.statsd.GaugeMetric.dimensions_in_what)
  return dimensions_in_what_;
}
inline void GaugeMetric::set_allocated_dimensions_in_what(::android::os::statsd::FieldMatcher* dimensions_in_what) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dimensions_in_what_;
  }
  if (dimensions_in_what) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dimensions_in_what = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dimensions_in_what, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dimensions_in_what_ = dimensions_in_what;
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.GaugeMetric.dimensions_in_what)
}

// optional .android.os.statsd.FieldMatcher dimensions_in_condition = 8 [deprecated = true];
inline bool GaugeMetric::has_dimensions_in_condition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GaugeMetric::clear_dimensions_in_condition() {
  if (dimensions_in_condition_ != nullptr) dimensions_in_condition_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::android::os::statsd::FieldMatcher& GaugeMetric::dimensions_in_condition() const {
  const ::android::os::statsd::FieldMatcher* p = dimensions_in_condition_;
  // @@protoc_insertion_point(field_get:android.os.statsd.GaugeMetric.dimensions_in_condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::statsd::FieldMatcher*>(
      &::android::os::statsd::_FieldMatcher_default_instance_);
}
inline ::android::os::statsd::FieldMatcher* GaugeMetric::release_dimensions_in_condition() {
  // @@protoc_insertion_point(field_release:android.os.statsd.GaugeMetric.dimensions_in_condition)
  _has_bits_[0] &= ~0x00000004u;
  ::android::os::statsd::FieldMatcher* temp = dimensions_in_condition_;
  dimensions_in_condition_ = nullptr;
  return temp;
}
inline ::android::os::statsd::FieldMatcher* GaugeMetric::mutable_dimensions_in_condition() {
  _has_bits_[0] |= 0x00000004u;
  if (dimensions_in_condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::statsd::FieldMatcher>(GetArenaNoVirtual());
    dimensions_in_condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.statsd.GaugeMetric.dimensions_in_condition)
  return dimensions_in_condition_;
}
inline void GaugeMetric::set_allocated_dimensions_in_condition(::android::os::statsd::FieldMatcher* dimensions_in_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dimensions_in_condition_;
  }
  if (dimensions_in_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dimensions_in_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dimensions_in_condition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  dimensions_in_condition_ = dimensions_in_condition;
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.GaugeMetric.dimensions_in_condition)
}

// optional .android.os.statsd.TimeUnit bucket = 6;
inline bool GaugeMetric::has_bucket() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GaugeMetric::clear_bucket() {
  bucket_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::android::os::statsd::TimeUnit GaugeMetric::bucket() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.GaugeMetric.bucket)
  return static_cast< ::android::os::statsd::TimeUnit >(bucket_);
}
inline void GaugeMetric::set_bucket(::android::os::statsd::TimeUnit value) {
  assert(::android::os::statsd::TimeUnit_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  bucket_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.GaugeMetric.bucket)
}

// repeated .android.os.statsd.MetricConditionLink links = 7;
inline int GaugeMetric::links_size() const {
  return links_.size();
}
inline void GaugeMetric::clear_links() {
  links_.Clear();
}
inline ::android::os::statsd::MetricConditionLink* GaugeMetric::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.GaugeMetric.links)
  return links_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricConditionLink >*
GaugeMetric::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.GaugeMetric.links)
  return &links_;
}
inline const ::android::os::statsd::MetricConditionLink& GaugeMetric::links(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.GaugeMetric.links)
  return links_.Get(index);
}
inline ::android::os::statsd::MetricConditionLink* GaugeMetric::add_links() {
  // @@protoc_insertion_point(field_add:android.os.statsd.GaugeMetric.links)
  return links_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricConditionLink >&
GaugeMetric::links() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.GaugeMetric.links)
  return links_;
}

// optional .android.os.statsd.GaugeMetric.SamplingType sampling_type = 9 [default = RANDOM_ONE_SAMPLE];
inline bool GaugeMetric::has_sampling_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GaugeMetric::clear_sampling_type() {
  sampling_type_ = 1;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::android::os::statsd::GaugeMetric_SamplingType GaugeMetric::sampling_type() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.GaugeMetric.sampling_type)
  return static_cast< ::android::os::statsd::GaugeMetric_SamplingType >(sampling_type_);
}
inline void GaugeMetric::set_sampling_type(::android::os::statsd::GaugeMetric_SamplingType value) {
  assert(::android::os::statsd::GaugeMetric_SamplingType_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  sampling_type_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.GaugeMetric.sampling_type)
}

// optional int64 min_bucket_size_nanos = 10;
inline bool GaugeMetric::has_min_bucket_size_nanos() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GaugeMetric::clear_min_bucket_size_nanos() {
  min_bucket_size_nanos_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GaugeMetric::min_bucket_size_nanos() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.GaugeMetric.min_bucket_size_nanos)
  return min_bucket_size_nanos_;
}
inline void GaugeMetric::set_min_bucket_size_nanos(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  min_bucket_size_nanos_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.GaugeMetric.min_bucket_size_nanos)
}

// optional int64 max_num_gauge_atoms_per_bucket = 11 [default = 10];
inline bool GaugeMetric::has_max_num_gauge_atoms_per_bucket() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GaugeMetric::clear_max_num_gauge_atoms_per_bucket() {
  max_num_gauge_atoms_per_bucket_ = PROTOBUF_LONGLONG(10);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GaugeMetric::max_num_gauge_atoms_per_bucket() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.GaugeMetric.max_num_gauge_atoms_per_bucket)
  return max_num_gauge_atoms_per_bucket_;
}
inline void GaugeMetric::set_max_num_gauge_atoms_per_bucket(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000400u;
  max_num_gauge_atoms_per_bucket_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.GaugeMetric.max_num_gauge_atoms_per_bucket)
}

// optional int32 max_pull_delay_sec = 13 [default = 30];
inline bool GaugeMetric::has_max_pull_delay_sec() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GaugeMetric::clear_max_pull_delay_sec() {
  max_pull_delay_sec_ = 30;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GaugeMetric::max_pull_delay_sec() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.GaugeMetric.max_pull_delay_sec)
  return max_pull_delay_sec_;
}
inline void GaugeMetric::set_max_pull_delay_sec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  max_pull_delay_sec_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.GaugeMetric.max_pull_delay_sec)
}

// optional bool split_bucket_for_app_upgrade = 14 [default = true];
inline bool GaugeMetric::has_split_bucket_for_app_upgrade() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GaugeMetric::clear_split_bucket_for_app_upgrade() {
  split_bucket_for_app_upgrade_ = true;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool GaugeMetric::split_bucket_for_app_upgrade() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.GaugeMetric.split_bucket_for_app_upgrade)
  return split_bucket_for_app_upgrade_;
}
inline void GaugeMetric::set_split_bucket_for_app_upgrade(bool value) {
  _has_bits_[0] |= 0x00000200u;
  split_bucket_for_app_upgrade_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.GaugeMetric.split_bucket_for_app_upgrade)
}

// -------------------------------------------------------------------

// ValueMetric

// optional int64 id = 1;
inline bool ValueMetric::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ValueMetric::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ValueMetric::id() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.ValueMetric.id)
  return id_;
}
inline void ValueMetric::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.ValueMetric.id)
}

// optional int64 what = 2;
inline bool ValueMetric::has_what() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ValueMetric::clear_what() {
  what_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ValueMetric::what() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.ValueMetric.what)
  return what_;
}
inline void ValueMetric::set_what(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  what_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.ValueMetric.what)
}

// optional .android.os.statsd.FieldMatcher value_field = 3;
inline bool ValueMetric::has_value_field() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ValueMetric::clear_value_field() {
  if (value_field_ != nullptr) value_field_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::android::os::statsd::FieldMatcher& ValueMetric::value_field() const {
  const ::android::os::statsd::FieldMatcher* p = value_field_;
  // @@protoc_insertion_point(field_get:android.os.statsd.ValueMetric.value_field)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::statsd::FieldMatcher*>(
      &::android::os::statsd::_FieldMatcher_default_instance_);
}
inline ::android::os::statsd::FieldMatcher* ValueMetric::release_value_field() {
  // @@protoc_insertion_point(field_release:android.os.statsd.ValueMetric.value_field)
  _has_bits_[0] &= ~0x00000001u;
  ::android::os::statsd::FieldMatcher* temp = value_field_;
  value_field_ = nullptr;
  return temp;
}
inline ::android::os::statsd::FieldMatcher* ValueMetric::mutable_value_field() {
  _has_bits_[0] |= 0x00000001u;
  if (value_field_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::statsd::FieldMatcher>(GetArenaNoVirtual());
    value_field_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.statsd.ValueMetric.value_field)
  return value_field_;
}
inline void ValueMetric::set_allocated_value_field(::android::os::statsd::FieldMatcher* value_field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete value_field_;
  }
  if (value_field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value_field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_field, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_field_ = value_field;
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.ValueMetric.value_field)
}

// optional int64 condition = 4;
inline bool ValueMetric::has_condition() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ValueMetric::clear_condition() {
  condition_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ValueMetric::condition() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.ValueMetric.condition)
  return condition_;
}
inline void ValueMetric::set_condition(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  condition_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.ValueMetric.condition)
}

// optional .android.os.statsd.FieldMatcher dimensions_in_what = 5;
inline bool ValueMetric::has_dimensions_in_what() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ValueMetric::clear_dimensions_in_what() {
  if (dimensions_in_what_ != nullptr) dimensions_in_what_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::android::os::statsd::FieldMatcher& ValueMetric::dimensions_in_what() const {
  const ::android::os::statsd::FieldMatcher* p = dimensions_in_what_;
  // @@protoc_insertion_point(field_get:android.os.statsd.ValueMetric.dimensions_in_what)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::statsd::FieldMatcher*>(
      &::android::os::statsd::_FieldMatcher_default_instance_);
}
inline ::android::os::statsd::FieldMatcher* ValueMetric::release_dimensions_in_what() {
  // @@protoc_insertion_point(field_release:android.os.statsd.ValueMetric.dimensions_in_what)
  _has_bits_[0] &= ~0x00000002u;
  ::android::os::statsd::FieldMatcher* temp = dimensions_in_what_;
  dimensions_in_what_ = nullptr;
  return temp;
}
inline ::android::os::statsd::FieldMatcher* ValueMetric::mutable_dimensions_in_what() {
  _has_bits_[0] |= 0x00000002u;
  if (dimensions_in_what_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::statsd::FieldMatcher>(GetArenaNoVirtual());
    dimensions_in_what_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.statsd.ValueMetric.dimensions_in_what)
  return dimensions_in_what_;
}
inline void ValueMetric::set_allocated_dimensions_in_what(::android::os::statsd::FieldMatcher* dimensions_in_what) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dimensions_in_what_;
  }
  if (dimensions_in_what) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dimensions_in_what = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dimensions_in_what, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dimensions_in_what_ = dimensions_in_what;
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.ValueMetric.dimensions_in_what)
}

// repeated int64 slice_by_state = 18;
inline int ValueMetric::slice_by_state_size() const {
  return slice_by_state_.size();
}
inline void ValueMetric::clear_slice_by_state() {
  slice_by_state_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ValueMetric::slice_by_state(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.ValueMetric.slice_by_state)
  return slice_by_state_.Get(index);
}
inline void ValueMetric::set_slice_by_state(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  slice_by_state_.Set(index, value);
  // @@protoc_insertion_point(field_set:android.os.statsd.ValueMetric.slice_by_state)
}
inline void ValueMetric::add_slice_by_state(::PROTOBUF_NAMESPACE_ID::int64 value) {
  slice_by_state_.Add(value);
  // @@protoc_insertion_point(field_add:android.os.statsd.ValueMetric.slice_by_state)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ValueMetric::slice_by_state() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.ValueMetric.slice_by_state)
  return slice_by_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ValueMetric::mutable_slice_by_state() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.ValueMetric.slice_by_state)
  return &slice_by_state_;
}

// optional .android.os.statsd.TimeUnit bucket = 6;
inline bool ValueMetric::has_bucket() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ValueMetric::clear_bucket() {
  bucket_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::android::os::statsd::TimeUnit ValueMetric::bucket() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.ValueMetric.bucket)
  return static_cast< ::android::os::statsd::TimeUnit >(bucket_);
}
inline void ValueMetric::set_bucket(::android::os::statsd::TimeUnit value) {
  assert(::android::os::statsd::TimeUnit_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  bucket_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.ValueMetric.bucket)
}

// repeated .android.os.statsd.MetricConditionLink links = 7;
inline int ValueMetric::links_size() const {
  return links_.size();
}
inline void ValueMetric::clear_links() {
  links_.Clear();
}
inline ::android::os::statsd::MetricConditionLink* ValueMetric::mutable_links(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.ValueMetric.links)
  return links_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricConditionLink >*
ValueMetric::mutable_links() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.ValueMetric.links)
  return &links_;
}
inline const ::android::os::statsd::MetricConditionLink& ValueMetric::links(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.ValueMetric.links)
  return links_.Get(index);
}
inline ::android::os::statsd::MetricConditionLink* ValueMetric::add_links() {
  // @@protoc_insertion_point(field_add:android.os.statsd.ValueMetric.links)
  return links_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricConditionLink >&
ValueMetric::links() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.ValueMetric.links)
  return links_;
}

// repeated .android.os.statsd.MetricStateLink state_link = 19;
inline int ValueMetric::state_link_size() const {
  return state_link_.size();
}
inline void ValueMetric::clear_state_link() {
  state_link_.Clear();
}
inline ::android::os::statsd::MetricStateLink* ValueMetric::mutable_state_link(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.ValueMetric.state_link)
  return state_link_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricStateLink >*
ValueMetric::mutable_state_link() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.ValueMetric.state_link)
  return &state_link_;
}
inline const ::android::os::statsd::MetricStateLink& ValueMetric::state_link(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.ValueMetric.state_link)
  return state_link_.Get(index);
}
inline ::android::os::statsd::MetricStateLink* ValueMetric::add_state_link() {
  // @@protoc_insertion_point(field_add:android.os.statsd.ValueMetric.state_link)
  return state_link_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricStateLink >&
ValueMetric::state_link() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.ValueMetric.state_link)
  return state_link_;
}

// optional .android.os.statsd.UploadThreshold threshold = 20;
inline bool ValueMetric::has_threshold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ValueMetric::clear_threshold() {
  if (threshold_ != nullptr) threshold_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::android::os::statsd::UploadThreshold& ValueMetric::threshold() const {
  const ::android::os::statsd::UploadThreshold* p = threshold_;
  // @@protoc_insertion_point(field_get:android.os.statsd.ValueMetric.threshold)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::statsd::UploadThreshold*>(
      &::android::os::statsd::_UploadThreshold_default_instance_);
}
inline ::android::os::statsd::UploadThreshold* ValueMetric::release_threshold() {
  // @@protoc_insertion_point(field_release:android.os.statsd.ValueMetric.threshold)
  _has_bits_[0] &= ~0x00000008u;
  ::android::os::statsd::UploadThreshold* temp = threshold_;
  threshold_ = nullptr;
  return temp;
}
inline ::android::os::statsd::UploadThreshold* ValueMetric::mutable_threshold() {
  _has_bits_[0] |= 0x00000008u;
  if (threshold_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::statsd::UploadThreshold>(GetArenaNoVirtual());
    threshold_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.statsd.ValueMetric.threshold)
  return threshold_;
}
inline void ValueMetric::set_allocated_threshold(::android::os::statsd::UploadThreshold* threshold) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete threshold_;
  }
  if (threshold) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      threshold = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, threshold, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  threshold_ = threshold;
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.ValueMetric.threshold)
}

// optional .android.os.statsd.ValueMetric.AggregationType aggregation_type = 8 [default = SUM];
inline bool ValueMetric::has_aggregation_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ValueMetric::clear_aggregation_type() {
  aggregation_type_ = 1;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::android::os::statsd::ValueMetric_AggregationType ValueMetric::aggregation_type() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.ValueMetric.aggregation_type)
  return static_cast< ::android::os::statsd::ValueMetric_AggregationType >(aggregation_type_);
}
inline void ValueMetric::set_aggregation_type(::android::os::statsd::ValueMetric_AggregationType value) {
  assert(::android::os::statsd::ValueMetric_AggregationType_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  aggregation_type_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.ValueMetric.aggregation_type)
}

// optional int64 min_bucket_size_nanos = 10;
inline bool ValueMetric::has_min_bucket_size_nanos() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ValueMetric::clear_min_bucket_size_nanos() {
  min_bucket_size_nanos_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ValueMetric::min_bucket_size_nanos() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.ValueMetric.min_bucket_size_nanos)
  return min_bucket_size_nanos_;
}
inline void ValueMetric::set_min_bucket_size_nanos(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  min_bucket_size_nanos_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.ValueMetric.min_bucket_size_nanos)
}

// optional bool use_absolute_value_on_reset = 11 [default = false];
inline bool ValueMetric::has_use_absolute_value_on_reset() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ValueMetric::clear_use_absolute_value_on_reset() {
  use_absolute_value_on_reset_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool ValueMetric::use_absolute_value_on_reset() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.ValueMetric.use_absolute_value_on_reset)
  return use_absolute_value_on_reset_;
}
inline void ValueMetric::set_use_absolute_value_on_reset(bool value) {
  _has_bits_[0] |= 0x00000200u;
  use_absolute_value_on_reset_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.ValueMetric.use_absolute_value_on_reset)
}

// optional bool use_diff = 12;
inline bool ValueMetric::has_use_diff() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ValueMetric::clear_use_diff() {
  use_diff_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool ValueMetric::use_diff() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.ValueMetric.use_diff)
  return use_diff_;
}
inline void ValueMetric::set_use_diff(bool value) {
  _has_bits_[0] |= 0x00000400u;
  use_diff_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.ValueMetric.use_diff)
}

// optional bool use_zero_default_base = 15 [default = false];
inline bool ValueMetric::has_use_zero_default_base() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ValueMetric::clear_use_zero_default_base() {
  use_zero_default_base_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool ValueMetric::use_zero_default_base() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.ValueMetric.use_zero_default_base)
  return use_zero_default_base_;
}
inline void ValueMetric::set_use_zero_default_base(bool value) {
  _has_bits_[0] |= 0x00000800u;
  use_zero_default_base_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.ValueMetric.use_zero_default_base)
}

// optional .android.os.statsd.ValueMetric.ValueDirection value_direction = 13 [default = INCREASING];
inline bool ValueMetric::has_value_direction() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ValueMetric::clear_value_direction() {
  value_direction_ = 1;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::android::os::statsd::ValueMetric_ValueDirection ValueMetric::value_direction() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.ValueMetric.value_direction)
  return static_cast< ::android::os::statsd::ValueMetric_ValueDirection >(value_direction_);
}
inline void ValueMetric::set_value_direction(::android::os::statsd::ValueMetric_ValueDirection value) {
  assert(::android::os::statsd::ValueMetric_ValueDirection_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  value_direction_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.ValueMetric.value_direction)
}

// optional bool skip_zero_diff_output = 14 [default = true];
inline bool ValueMetric::has_skip_zero_diff_output() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ValueMetric::clear_skip_zero_diff_output() {
  skip_zero_diff_output_ = true;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool ValueMetric::skip_zero_diff_output() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.ValueMetric.skip_zero_diff_output)
  return skip_zero_diff_output_;
}
inline void ValueMetric::set_skip_zero_diff_output(bool value) {
  _has_bits_[0] |= 0x00004000u;
  skip_zero_diff_output_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.ValueMetric.skip_zero_diff_output)
}

// optional int32 max_pull_delay_sec = 16 [default = 30];
inline bool ValueMetric::has_max_pull_delay_sec() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ValueMetric::clear_max_pull_delay_sec() {
  max_pull_delay_sec_ = 30;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ValueMetric::max_pull_delay_sec() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.ValueMetric.max_pull_delay_sec)
  return max_pull_delay_sec_;
}
inline void ValueMetric::set_max_pull_delay_sec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  max_pull_delay_sec_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.ValueMetric.max_pull_delay_sec)
}

// optional bool split_bucket_for_app_upgrade = 17 [default = true];
inline bool ValueMetric::has_split_bucket_for_app_upgrade() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ValueMetric::clear_split_bucket_for_app_upgrade() {
  split_bucket_for_app_upgrade_ = true;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool ValueMetric::split_bucket_for_app_upgrade() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.ValueMetric.split_bucket_for_app_upgrade)
  return split_bucket_for_app_upgrade_;
}
inline void ValueMetric::set_split_bucket_for_app_upgrade(bool value) {
  _has_bits_[0] |= 0x00008000u;
  split_bucket_for_app_upgrade_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.ValueMetric.split_bucket_for_app_upgrade)
}

// optional .android.os.statsd.FieldMatcher dimensions_in_condition = 9 [deprecated = true];
inline bool ValueMetric::has_dimensions_in_condition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ValueMetric::clear_dimensions_in_condition() {
  if (dimensions_in_condition_ != nullptr) dimensions_in_condition_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::android::os::statsd::FieldMatcher& ValueMetric::dimensions_in_condition() const {
  const ::android::os::statsd::FieldMatcher* p = dimensions_in_condition_;
  // @@protoc_insertion_point(field_get:android.os.statsd.ValueMetric.dimensions_in_condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::statsd::FieldMatcher*>(
      &::android::os::statsd::_FieldMatcher_default_instance_);
}
inline ::android::os::statsd::FieldMatcher* ValueMetric::release_dimensions_in_condition() {
  // @@protoc_insertion_point(field_release:android.os.statsd.ValueMetric.dimensions_in_condition)
  _has_bits_[0] &= ~0x00000004u;
  ::android::os::statsd::FieldMatcher* temp = dimensions_in_condition_;
  dimensions_in_condition_ = nullptr;
  return temp;
}
inline ::android::os::statsd::FieldMatcher* ValueMetric::mutable_dimensions_in_condition() {
  _has_bits_[0] |= 0x00000004u;
  if (dimensions_in_condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::statsd::FieldMatcher>(GetArenaNoVirtual());
    dimensions_in_condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.statsd.ValueMetric.dimensions_in_condition)
  return dimensions_in_condition_;
}
inline void ValueMetric::set_allocated_dimensions_in_condition(::android::os::statsd::FieldMatcher* dimensions_in_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dimensions_in_condition_;
  }
  if (dimensions_in_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dimensions_in_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dimensions_in_condition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  dimensions_in_condition_ = dimensions_in_condition;
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.ValueMetric.dimensions_in_condition)
}

// -------------------------------------------------------------------

// Alert

// optional int64 id = 1;
inline bool Alert::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Alert::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Alert::id() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.Alert.id)
  return id_;
}
inline void Alert::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.Alert.id)
}

// optional int64 metric_id = 2;
inline bool Alert::has_metric_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Alert::clear_metric_id() {
  metric_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Alert::metric_id() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.Alert.metric_id)
  return metric_id_;
}
inline void Alert::set_metric_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  metric_id_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.Alert.metric_id)
}

// optional int32 num_buckets = 3;
inline bool Alert::has_num_buckets() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Alert::clear_num_buckets() {
  num_buckets_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Alert::num_buckets() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.Alert.num_buckets)
  return num_buckets_;
}
inline void Alert::set_num_buckets(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_buckets_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.Alert.num_buckets)
}

// optional int32 refractory_period_secs = 4;
inline bool Alert::has_refractory_period_secs() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Alert::clear_refractory_period_secs() {
  refractory_period_secs_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Alert::refractory_period_secs() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.Alert.refractory_period_secs)
  return refractory_period_secs_;
}
inline void Alert::set_refractory_period_secs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  refractory_period_secs_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.Alert.refractory_period_secs)
}

// optional double trigger_if_sum_gt = 5;
inline bool Alert::has_trigger_if_sum_gt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Alert::clear_trigger_if_sum_gt() {
  trigger_if_sum_gt_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Alert::trigger_if_sum_gt() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.Alert.trigger_if_sum_gt)
  return trigger_if_sum_gt_;
}
inline void Alert::set_trigger_if_sum_gt(double value) {
  _has_bits_[0] |= 0x00000010u;
  trigger_if_sum_gt_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.Alert.trigger_if_sum_gt)
}

// -------------------------------------------------------------------

// Alarm

// optional int64 id = 1;
inline bool Alarm::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Alarm::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Alarm::id() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.Alarm.id)
  return id_;
}
inline void Alarm::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.Alarm.id)
}

// optional int64 offset_millis = 2;
inline bool Alarm::has_offset_millis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Alarm::clear_offset_millis() {
  offset_millis_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Alarm::offset_millis() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.Alarm.offset_millis)
  return offset_millis_;
}
inline void Alarm::set_offset_millis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  offset_millis_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.Alarm.offset_millis)
}

// optional int64 period_millis = 3;
inline bool Alarm::has_period_millis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Alarm::clear_period_millis() {
  period_millis_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Alarm::period_millis() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.Alarm.period_millis)
  return period_millis_;
}
inline void Alarm::set_period_millis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  period_millis_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.Alarm.period_millis)
}

// -------------------------------------------------------------------

// IncidentdDetails

// repeated int32 section = 1;
inline int IncidentdDetails::section_size() const {
  return section_.size();
}
inline void IncidentdDetails::clear_section() {
  section_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IncidentdDetails::section(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.IncidentdDetails.section)
  return section_.Get(index);
}
inline void IncidentdDetails::set_section(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  section_.Set(index, value);
  // @@protoc_insertion_point(field_set:android.os.statsd.IncidentdDetails.section)
}
inline void IncidentdDetails::add_section(::PROTOBUF_NAMESPACE_ID::int32 value) {
  section_.Add(value);
  // @@protoc_insertion_point(field_add:android.os.statsd.IncidentdDetails.section)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
IncidentdDetails::section() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.IncidentdDetails.section)
  return section_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
IncidentdDetails::mutable_section() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.IncidentdDetails.section)
  return &section_;
}

// optional .android.os.statsd.IncidentdDetails.Destination dest = 2;
inline bool IncidentdDetails::has_dest() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IncidentdDetails::clear_dest() {
  dest_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::android::os::statsd::IncidentdDetails_Destination IncidentdDetails::dest() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.IncidentdDetails.dest)
  return static_cast< ::android::os::statsd::IncidentdDetails_Destination >(dest_);
}
inline void IncidentdDetails::set_dest(::android::os::statsd::IncidentdDetails_Destination value) {
  assert(::android::os::statsd::IncidentdDetails_Destination_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  dest_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.IncidentdDetails.dest)
}

// optional string receiver_pkg = 3;
inline bool IncidentdDetails::has_receiver_pkg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IncidentdDetails::clear_receiver_pkg() {
  receiver_pkg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IncidentdDetails::receiver_pkg() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.IncidentdDetails.receiver_pkg)
  return receiver_pkg_.GetNoArena();
}
inline void IncidentdDetails::set_receiver_pkg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  receiver_pkg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.statsd.IncidentdDetails.receiver_pkg)
}
inline void IncidentdDetails::set_receiver_pkg(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  receiver_pkg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.statsd.IncidentdDetails.receiver_pkg)
}
inline void IncidentdDetails::set_receiver_pkg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  receiver_pkg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.statsd.IncidentdDetails.receiver_pkg)
}
inline void IncidentdDetails::set_receiver_pkg(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  receiver_pkg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.statsd.IncidentdDetails.receiver_pkg)
}
inline std::string* IncidentdDetails::mutable_receiver_pkg() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.os.statsd.IncidentdDetails.receiver_pkg)
  return receiver_pkg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IncidentdDetails::release_receiver_pkg() {
  // @@protoc_insertion_point(field_release:android.os.statsd.IncidentdDetails.receiver_pkg)
  if (!has_receiver_pkg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return receiver_pkg_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IncidentdDetails::set_allocated_receiver_pkg(std::string* receiver_pkg) {
  if (receiver_pkg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  receiver_pkg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiver_pkg);
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.IncidentdDetails.receiver_pkg)
}

// optional string receiver_cls = 4;
inline bool IncidentdDetails::has_receiver_cls() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IncidentdDetails::clear_receiver_cls() {
  receiver_cls_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& IncidentdDetails::receiver_cls() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.IncidentdDetails.receiver_cls)
  return receiver_cls_.GetNoArena();
}
inline void IncidentdDetails::set_receiver_cls(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  receiver_cls_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.statsd.IncidentdDetails.receiver_cls)
}
inline void IncidentdDetails::set_receiver_cls(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  receiver_cls_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.statsd.IncidentdDetails.receiver_cls)
}
inline void IncidentdDetails::set_receiver_cls(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  receiver_cls_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.statsd.IncidentdDetails.receiver_cls)
}
inline void IncidentdDetails::set_receiver_cls(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  receiver_cls_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.statsd.IncidentdDetails.receiver_cls)
}
inline std::string* IncidentdDetails::mutable_receiver_cls() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.os.statsd.IncidentdDetails.receiver_cls)
  return receiver_cls_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IncidentdDetails::release_receiver_cls() {
  // @@protoc_insertion_point(field_release:android.os.statsd.IncidentdDetails.receiver_cls)
  if (!has_receiver_cls()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return receiver_cls_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IncidentdDetails::set_allocated_receiver_cls(std::string* receiver_cls) {
  if (receiver_cls != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  receiver_cls_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiver_cls);
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.IncidentdDetails.receiver_cls)
}

// optional string alert_description = 5;
inline bool IncidentdDetails::has_alert_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IncidentdDetails::clear_alert_description() {
  alert_description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& IncidentdDetails::alert_description() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.IncidentdDetails.alert_description)
  return alert_description_.GetNoArena();
}
inline void IncidentdDetails::set_alert_description(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  alert_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.statsd.IncidentdDetails.alert_description)
}
inline void IncidentdDetails::set_alert_description(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  alert_description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.statsd.IncidentdDetails.alert_description)
}
inline void IncidentdDetails::set_alert_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  alert_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.statsd.IncidentdDetails.alert_description)
}
inline void IncidentdDetails::set_alert_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  alert_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.statsd.IncidentdDetails.alert_description)
}
inline std::string* IncidentdDetails::mutable_alert_description() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:android.os.statsd.IncidentdDetails.alert_description)
  return alert_description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IncidentdDetails::release_alert_description() {
  // @@protoc_insertion_point(field_release:android.os.statsd.IncidentdDetails.alert_description)
  if (!has_alert_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return alert_description_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IncidentdDetails::set_allocated_alert_description(std::string* alert_description) {
  if (alert_description != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  alert_description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alert_description);
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.IncidentdDetails.alert_description)
}

// -------------------------------------------------------------------

// PerfettoDetails

// optional bytes trace_config = 1;
inline bool PerfettoDetails::has_trace_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerfettoDetails::clear_trace_config() {
  trace_config_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PerfettoDetails::trace_config() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.PerfettoDetails.trace_config)
  return trace_config_.GetNoArena();
}
inline void PerfettoDetails::set_trace_config(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  trace_config_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.statsd.PerfettoDetails.trace_config)
}
inline void PerfettoDetails::set_trace_config(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  trace_config_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.statsd.PerfettoDetails.trace_config)
}
inline void PerfettoDetails::set_trace_config(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  trace_config_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.statsd.PerfettoDetails.trace_config)
}
inline void PerfettoDetails::set_trace_config(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  trace_config_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.statsd.PerfettoDetails.trace_config)
}
inline std::string* PerfettoDetails::mutable_trace_config() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.os.statsd.PerfettoDetails.trace_config)
  return trace_config_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PerfettoDetails::release_trace_config() {
  // @@protoc_insertion_point(field_release:android.os.statsd.PerfettoDetails.trace_config)
  if (!has_trace_config()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return trace_config_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PerfettoDetails::set_allocated_trace_config(std::string* trace_config) {
  if (trace_config != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  trace_config_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trace_config);
  // @@protoc_insertion_point(field_set_allocated:android.os.statsd.PerfettoDetails.trace_config)
}

// -------------------------------------------------------------------

// BroadcastSubscriberDetails

// optional int64 subscriber_id = 1;
inline bool BroadcastSubscriberDetails::has_subscriber_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BroadcastSubscriberDetails::clear_subscriber_id() {
  subscriber_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BroadcastSubscriberDetails::subscriber_id() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.BroadcastSubscriberDetails.subscriber_id)
  return subscriber_id_;
}
inline void BroadcastSubscriberDetails::set_subscriber_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  subscriber_id_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.BroadcastSubscriberDetails.subscriber_id)
}

// repeated string cookie = 2;
inline int BroadcastSubscriberDetails::cookie_size() const {
  return cookie_.size();
}
inline void BroadcastSubscriberDetails::clear_cookie() {
  cookie_.Clear();
}
inline const std::string& BroadcastSubscriberDetails::cookie(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.BroadcastSubscriberDetails.cookie)
  return cookie_.Get(index);
}
inline std::string* BroadcastSubscriberDetails::mutable_cookie(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.BroadcastSubscriberDetails.cookie)
  return cookie_.Mutable(index);
}
inline void BroadcastSubscriberDetails::set_cookie(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:android.os.statsd.BroadcastSubscriberDetails.cookie)
  cookie_.Mutable(index)->assign(value);
}
inline void BroadcastSubscriberDetails::set_cookie(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:android.os.statsd.BroadcastSubscriberDetails.cookie)
  cookie_.Mutable(index)->assign(std::move(value));
}
inline void BroadcastSubscriberDetails::set_cookie(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cookie_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:android.os.statsd.BroadcastSubscriberDetails.cookie)
}
inline void BroadcastSubscriberDetails::set_cookie(int index, const char* value, size_t size) {
  cookie_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:android.os.statsd.BroadcastSubscriberDetails.cookie)
}
inline std::string* BroadcastSubscriberDetails::add_cookie() {
  // @@protoc_insertion_point(field_add_mutable:android.os.statsd.BroadcastSubscriberDetails.cookie)
  return cookie_.Add();
}
inline void BroadcastSubscriberDetails::add_cookie(const std::string& value) {
  cookie_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:android.os.statsd.BroadcastSubscriberDetails.cookie)
}
inline void BroadcastSubscriberDetails::add_cookie(std::string&& value) {
  cookie_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:android.os.statsd.BroadcastSubscriberDetails.cookie)
}
inline void BroadcastSubscriberDetails::add_cookie(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cookie_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:android.os.statsd.BroadcastSubscriberDetails.cookie)
}
inline void BroadcastSubscriberDetails::add_cookie(const char* value, size_t size) {
  cookie_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:android.os.statsd.BroadcastSubscriberDetails.cookie)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BroadcastSubscriberDetails::cookie() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.BroadcastSubscriberDetails.cookie)
  return cookie_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BroadcastSubscriberDetails::mutable_cookie() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.BroadcastSubscriberDetails.cookie)
  return &cookie_;
}

// -------------------------------------------------------------------

// Subscription

// optional int64 id = 1;
inline bool Subscription::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Subscription::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Subscription::id() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.Subscription.id)
  return id_;
}
inline void Subscription::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.Subscription.id)
}

// optional .android.os.statsd.Subscription.RuleType rule_type = 2;
inline bool Subscription::has_rule_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Subscription::clear_rule_type() {
  rule_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::android::os::statsd::Subscription_RuleType Subscription::rule_type() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.Subscription.rule_type)
  return static_cast< ::android::os::statsd::Subscription_RuleType >(rule_type_);
}
inline void Subscription::set_rule_type(::android::os::statsd::Subscription_RuleType value) {
  assert(::android::os::statsd::Subscription_RuleType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  rule_type_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.Subscription.rule_type)
}

// optional int64 rule_id = 3;
inline bool Subscription::has_rule_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Subscription::clear_rule_id() {
  rule_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Subscription::rule_id() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.Subscription.rule_id)
  return rule_id_;
}
inline void Subscription::set_rule_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  rule_id_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.Subscription.rule_id)
}

// optional .android.os.statsd.IncidentdDetails incidentd_details = 4;
inline bool Subscription::has_incidentd_details() const {
  return subscriber_information_case() == kIncidentdDetails;
}
inline void Subscription::set_has_incidentd_details() {
  _oneof_case_[0] = kIncidentdDetails;
}
inline void Subscription::clear_incidentd_details() {
  if (has_incidentd_details()) {
    delete subscriber_information_.incidentd_details_;
    clear_has_subscriber_information();
  }
}
inline ::android::os::statsd::IncidentdDetails* Subscription::release_incidentd_details() {
  // @@protoc_insertion_point(field_release:android.os.statsd.Subscription.incidentd_details)
  if (has_incidentd_details()) {
    clear_has_subscriber_information();
      ::android::os::statsd::IncidentdDetails* temp = subscriber_information_.incidentd_details_;
    subscriber_information_.incidentd_details_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::os::statsd::IncidentdDetails& Subscription::incidentd_details() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.Subscription.incidentd_details)
  return has_incidentd_details()
      ? *subscriber_information_.incidentd_details_
      : *reinterpret_cast< ::android::os::statsd::IncidentdDetails*>(&::android::os::statsd::_IncidentdDetails_default_instance_);
}
inline ::android::os::statsd::IncidentdDetails* Subscription::mutable_incidentd_details() {
  if (!has_incidentd_details()) {
    clear_subscriber_information();
    set_has_incidentd_details();
    subscriber_information_.incidentd_details_ = CreateMaybeMessage< ::android::os::statsd::IncidentdDetails >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.os.statsd.Subscription.incidentd_details)
  return subscriber_information_.incidentd_details_;
}

// optional .android.os.statsd.PerfettoDetails perfetto_details = 5;
inline bool Subscription::has_perfetto_details() const {
  return subscriber_information_case() == kPerfettoDetails;
}
inline void Subscription::set_has_perfetto_details() {
  _oneof_case_[0] = kPerfettoDetails;
}
inline void Subscription::clear_perfetto_details() {
  if (has_perfetto_details()) {
    delete subscriber_information_.perfetto_details_;
    clear_has_subscriber_information();
  }
}
inline ::android::os::statsd::PerfettoDetails* Subscription::release_perfetto_details() {
  // @@protoc_insertion_point(field_release:android.os.statsd.Subscription.perfetto_details)
  if (has_perfetto_details()) {
    clear_has_subscriber_information();
      ::android::os::statsd::PerfettoDetails* temp = subscriber_information_.perfetto_details_;
    subscriber_information_.perfetto_details_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::os::statsd::PerfettoDetails& Subscription::perfetto_details() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.Subscription.perfetto_details)
  return has_perfetto_details()
      ? *subscriber_information_.perfetto_details_
      : *reinterpret_cast< ::android::os::statsd::PerfettoDetails*>(&::android::os::statsd::_PerfettoDetails_default_instance_);
}
inline ::android::os::statsd::PerfettoDetails* Subscription::mutable_perfetto_details() {
  if (!has_perfetto_details()) {
    clear_subscriber_information();
    set_has_perfetto_details();
    subscriber_information_.perfetto_details_ = CreateMaybeMessage< ::android::os::statsd::PerfettoDetails >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.os.statsd.Subscription.perfetto_details)
  return subscriber_information_.perfetto_details_;
}

// optional .android.os.statsd.BroadcastSubscriberDetails broadcast_subscriber_details = 6;
inline bool Subscription::has_broadcast_subscriber_details() const {
  return subscriber_information_case() == kBroadcastSubscriberDetails;
}
inline void Subscription::set_has_broadcast_subscriber_details() {
  _oneof_case_[0] = kBroadcastSubscriberDetails;
}
inline void Subscription::clear_broadcast_subscriber_details() {
  if (has_broadcast_subscriber_details()) {
    delete subscriber_information_.broadcast_subscriber_details_;
    clear_has_subscriber_information();
  }
}
inline ::android::os::statsd::BroadcastSubscriberDetails* Subscription::release_broadcast_subscriber_details() {
  // @@protoc_insertion_point(field_release:android.os.statsd.Subscription.broadcast_subscriber_details)
  if (has_broadcast_subscriber_details()) {
    clear_has_subscriber_information();
      ::android::os::statsd::BroadcastSubscriberDetails* temp = subscriber_information_.broadcast_subscriber_details_;
    subscriber_information_.broadcast_subscriber_details_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::android::os::statsd::BroadcastSubscriberDetails& Subscription::broadcast_subscriber_details() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.Subscription.broadcast_subscriber_details)
  return has_broadcast_subscriber_details()
      ? *subscriber_information_.broadcast_subscriber_details_
      : *reinterpret_cast< ::android::os::statsd::BroadcastSubscriberDetails*>(&::android::os::statsd::_BroadcastSubscriberDetails_default_instance_);
}
inline ::android::os::statsd::BroadcastSubscriberDetails* Subscription::mutable_broadcast_subscriber_details() {
  if (!has_broadcast_subscriber_details()) {
    clear_subscriber_information();
    set_has_broadcast_subscriber_details();
    subscriber_information_.broadcast_subscriber_details_ = CreateMaybeMessage< ::android::os::statsd::BroadcastSubscriberDetails >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:android.os.statsd.Subscription.broadcast_subscriber_details)
  return subscriber_information_.broadcast_subscriber_details_;
}

// optional float probability_of_informing = 7 [default = 1.1];
inline bool Subscription::has_probability_of_informing() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Subscription::clear_probability_of_informing() {
  probability_of_informing_ = 1.1f;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Subscription::probability_of_informing() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.Subscription.probability_of_informing)
  return probability_of_informing_;
}
inline void Subscription::set_probability_of_informing(float value) {
  _has_bits_[0] |= 0x00000008u;
  probability_of_informing_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.Subscription.probability_of_informing)
}

inline bool Subscription::has_subscriber_information() const {
  return subscriber_information_case() != SUBSCRIBER_INFORMATION_NOT_SET;
}
inline void Subscription::clear_has_subscriber_information() {
  _oneof_case_[0] = SUBSCRIBER_INFORMATION_NOT_SET;
}
inline Subscription::SubscriberInformationCase Subscription::subscriber_information_case() const {
  return Subscription::SubscriberInformationCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// EventActivation

// optional int64 atom_matcher_id = 1;
inline bool EventActivation::has_atom_matcher_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventActivation::clear_atom_matcher_id() {
  atom_matcher_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EventActivation::atom_matcher_id() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.EventActivation.atom_matcher_id)
  return atom_matcher_id_;
}
inline void EventActivation::set_atom_matcher_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  atom_matcher_id_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.EventActivation.atom_matcher_id)
}

// optional int64 ttl_seconds = 2;
inline bool EventActivation::has_ttl_seconds() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EventActivation::clear_ttl_seconds() {
  ttl_seconds_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EventActivation::ttl_seconds() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.EventActivation.ttl_seconds)
  return ttl_seconds_;
}
inline void EventActivation::set_ttl_seconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  ttl_seconds_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.EventActivation.ttl_seconds)
}

// optional int64 deactivation_atom_matcher_id = 3;
inline bool EventActivation::has_deactivation_atom_matcher_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EventActivation::clear_deactivation_atom_matcher_id() {
  deactivation_atom_matcher_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EventActivation::deactivation_atom_matcher_id() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.EventActivation.deactivation_atom_matcher_id)
  return deactivation_atom_matcher_id_;
}
inline void EventActivation::set_deactivation_atom_matcher_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  deactivation_atom_matcher_id_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.EventActivation.deactivation_atom_matcher_id)
}

// optional .android.os.statsd.ActivationType activation_type = 4;
inline bool EventActivation::has_activation_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EventActivation::clear_activation_type() {
  activation_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::android::os::statsd::ActivationType EventActivation::activation_type() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.EventActivation.activation_type)
  return static_cast< ::android::os::statsd::ActivationType >(activation_type_);
}
inline void EventActivation::set_activation_type(::android::os::statsd::ActivationType value) {
  assert(::android::os::statsd::ActivationType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  activation_type_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.EventActivation.activation_type)
}

// -------------------------------------------------------------------

// MetricActivation

// optional int64 metric_id = 1;
inline bool MetricActivation::has_metric_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetricActivation::clear_metric_id() {
  metric_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MetricActivation::metric_id() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.MetricActivation.metric_id)
  return metric_id_;
}
inline void MetricActivation::set_metric_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  metric_id_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.MetricActivation.metric_id)
}

// optional .android.os.statsd.ActivationType activation_type = 3 [deprecated = true];
inline bool MetricActivation::has_activation_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MetricActivation::clear_activation_type() {
  activation_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::android::os::statsd::ActivationType MetricActivation::activation_type() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.MetricActivation.activation_type)
  return static_cast< ::android::os::statsd::ActivationType >(activation_type_);
}
inline void MetricActivation::set_activation_type(::android::os::statsd::ActivationType value) {
  assert(::android::os::statsd::ActivationType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  activation_type_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.MetricActivation.activation_type)
}

// repeated .android.os.statsd.EventActivation event_activation = 2;
inline int MetricActivation::event_activation_size() const {
  return event_activation_.size();
}
inline void MetricActivation::clear_event_activation() {
  event_activation_.Clear();
}
inline ::android::os::statsd::EventActivation* MetricActivation::mutable_event_activation(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.MetricActivation.event_activation)
  return event_activation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::EventActivation >*
MetricActivation::mutable_event_activation() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.MetricActivation.event_activation)
  return &event_activation_;
}
inline const ::android::os::statsd::EventActivation& MetricActivation::event_activation(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.MetricActivation.event_activation)
  return event_activation_.Get(index);
}
inline ::android::os::statsd::EventActivation* MetricActivation::add_event_activation() {
  // @@protoc_insertion_point(field_add:android.os.statsd.MetricActivation.event_activation)
  return event_activation_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::EventActivation >&
MetricActivation::event_activation() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.MetricActivation.event_activation)
  return event_activation_;
}

// -------------------------------------------------------------------

// PullAtomPackages

// optional int32 atom_id = 1;
inline bool PullAtomPackages::has_atom_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PullAtomPackages::clear_atom_id() {
  atom_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PullAtomPackages::atom_id() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.PullAtomPackages.atom_id)
  return atom_id_;
}
inline void PullAtomPackages::set_atom_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  atom_id_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.PullAtomPackages.atom_id)
}

// repeated string packages = 2;
inline int PullAtomPackages::packages_size() const {
  return packages_.size();
}
inline void PullAtomPackages::clear_packages() {
  packages_.Clear();
}
inline const std::string& PullAtomPackages::packages(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.PullAtomPackages.packages)
  return packages_.Get(index);
}
inline std::string* PullAtomPackages::mutable_packages(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.PullAtomPackages.packages)
  return packages_.Mutable(index);
}
inline void PullAtomPackages::set_packages(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:android.os.statsd.PullAtomPackages.packages)
  packages_.Mutable(index)->assign(value);
}
inline void PullAtomPackages::set_packages(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:android.os.statsd.PullAtomPackages.packages)
  packages_.Mutable(index)->assign(std::move(value));
}
inline void PullAtomPackages::set_packages(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  packages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:android.os.statsd.PullAtomPackages.packages)
}
inline void PullAtomPackages::set_packages(int index, const char* value, size_t size) {
  packages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:android.os.statsd.PullAtomPackages.packages)
}
inline std::string* PullAtomPackages::add_packages() {
  // @@protoc_insertion_point(field_add_mutable:android.os.statsd.PullAtomPackages.packages)
  return packages_.Add();
}
inline void PullAtomPackages::add_packages(const std::string& value) {
  packages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:android.os.statsd.PullAtomPackages.packages)
}
inline void PullAtomPackages::add_packages(std::string&& value) {
  packages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:android.os.statsd.PullAtomPackages.packages)
}
inline void PullAtomPackages::add_packages(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  packages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:android.os.statsd.PullAtomPackages.packages)
}
inline void PullAtomPackages::add_packages(const char* value, size_t size) {
  packages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:android.os.statsd.PullAtomPackages.packages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PullAtomPackages::packages() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.PullAtomPackages.packages)
  return packages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PullAtomPackages::mutable_packages() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.PullAtomPackages.packages)
  return &packages_;
}

// -------------------------------------------------------------------

// StatsdConfig_Annotation

// optional int64 field_int64 = 1;
inline bool StatsdConfig_Annotation::has_field_int64() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatsdConfig_Annotation::clear_field_int64() {
  field_int64_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatsdConfig_Annotation::field_int64() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.StatsdConfig.Annotation.field_int64)
  return field_int64_;
}
inline void StatsdConfig_Annotation::set_field_int64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  field_int64_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.StatsdConfig.Annotation.field_int64)
}

// optional int32 field_int32 = 2;
inline bool StatsdConfig_Annotation::has_field_int32() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StatsdConfig_Annotation::clear_field_int32() {
  field_int32_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatsdConfig_Annotation::field_int32() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.StatsdConfig.Annotation.field_int32)
  return field_int32_;
}
inline void StatsdConfig_Annotation::set_field_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  field_int32_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.StatsdConfig.Annotation.field_int32)
}

// -------------------------------------------------------------------

// StatsdConfig

// optional int64 id = 1;
inline bool StatsdConfig::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatsdConfig::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatsdConfig::id() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.StatsdConfig.id)
  return id_;
}
inline void StatsdConfig::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.StatsdConfig.id)
}

// repeated .android.os.statsd.EventMetric event_metric = 2;
inline int StatsdConfig::event_metric_size() const {
  return event_metric_.size();
}
inline void StatsdConfig::clear_event_metric() {
  event_metric_.Clear();
}
inline ::android::os::statsd::EventMetric* StatsdConfig::mutable_event_metric(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.StatsdConfig.event_metric)
  return event_metric_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::EventMetric >*
StatsdConfig::mutable_event_metric() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.StatsdConfig.event_metric)
  return &event_metric_;
}
inline const ::android::os::statsd::EventMetric& StatsdConfig::event_metric(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.StatsdConfig.event_metric)
  return event_metric_.Get(index);
}
inline ::android::os::statsd::EventMetric* StatsdConfig::add_event_metric() {
  // @@protoc_insertion_point(field_add:android.os.statsd.StatsdConfig.event_metric)
  return event_metric_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::EventMetric >&
StatsdConfig::event_metric() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.StatsdConfig.event_metric)
  return event_metric_;
}

// repeated .android.os.statsd.CountMetric count_metric = 3;
inline int StatsdConfig::count_metric_size() const {
  return count_metric_.size();
}
inline void StatsdConfig::clear_count_metric() {
  count_metric_.Clear();
}
inline ::android::os::statsd::CountMetric* StatsdConfig::mutable_count_metric(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.StatsdConfig.count_metric)
  return count_metric_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::CountMetric >*
StatsdConfig::mutable_count_metric() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.StatsdConfig.count_metric)
  return &count_metric_;
}
inline const ::android::os::statsd::CountMetric& StatsdConfig::count_metric(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.StatsdConfig.count_metric)
  return count_metric_.Get(index);
}
inline ::android::os::statsd::CountMetric* StatsdConfig::add_count_metric() {
  // @@protoc_insertion_point(field_add:android.os.statsd.StatsdConfig.count_metric)
  return count_metric_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::CountMetric >&
StatsdConfig::count_metric() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.StatsdConfig.count_metric)
  return count_metric_;
}

// repeated .android.os.statsd.ValueMetric value_metric = 4;
inline int StatsdConfig::value_metric_size() const {
  return value_metric_.size();
}
inline void StatsdConfig::clear_value_metric() {
  value_metric_.Clear();
}
inline ::android::os::statsd::ValueMetric* StatsdConfig::mutable_value_metric(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.StatsdConfig.value_metric)
  return value_metric_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::ValueMetric >*
StatsdConfig::mutable_value_metric() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.StatsdConfig.value_metric)
  return &value_metric_;
}
inline const ::android::os::statsd::ValueMetric& StatsdConfig::value_metric(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.StatsdConfig.value_metric)
  return value_metric_.Get(index);
}
inline ::android::os::statsd::ValueMetric* StatsdConfig::add_value_metric() {
  // @@protoc_insertion_point(field_add:android.os.statsd.StatsdConfig.value_metric)
  return value_metric_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::ValueMetric >&
StatsdConfig::value_metric() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.StatsdConfig.value_metric)
  return value_metric_;
}

// repeated .android.os.statsd.GaugeMetric gauge_metric = 5;
inline int StatsdConfig::gauge_metric_size() const {
  return gauge_metric_.size();
}
inline void StatsdConfig::clear_gauge_metric() {
  gauge_metric_.Clear();
}
inline ::android::os::statsd::GaugeMetric* StatsdConfig::mutable_gauge_metric(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.StatsdConfig.gauge_metric)
  return gauge_metric_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::GaugeMetric >*
StatsdConfig::mutable_gauge_metric() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.StatsdConfig.gauge_metric)
  return &gauge_metric_;
}
inline const ::android::os::statsd::GaugeMetric& StatsdConfig::gauge_metric(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.StatsdConfig.gauge_metric)
  return gauge_metric_.Get(index);
}
inline ::android::os::statsd::GaugeMetric* StatsdConfig::add_gauge_metric() {
  // @@protoc_insertion_point(field_add:android.os.statsd.StatsdConfig.gauge_metric)
  return gauge_metric_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::GaugeMetric >&
StatsdConfig::gauge_metric() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.StatsdConfig.gauge_metric)
  return gauge_metric_;
}

// repeated .android.os.statsd.DurationMetric duration_metric = 6;
inline int StatsdConfig::duration_metric_size() const {
  return duration_metric_.size();
}
inline void StatsdConfig::clear_duration_metric() {
  duration_metric_.Clear();
}
inline ::android::os::statsd::DurationMetric* StatsdConfig::mutable_duration_metric(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.StatsdConfig.duration_metric)
  return duration_metric_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::DurationMetric >*
StatsdConfig::mutable_duration_metric() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.StatsdConfig.duration_metric)
  return &duration_metric_;
}
inline const ::android::os::statsd::DurationMetric& StatsdConfig::duration_metric(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.StatsdConfig.duration_metric)
  return duration_metric_.Get(index);
}
inline ::android::os::statsd::DurationMetric* StatsdConfig::add_duration_metric() {
  // @@protoc_insertion_point(field_add:android.os.statsd.StatsdConfig.duration_metric)
  return duration_metric_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::DurationMetric >&
StatsdConfig::duration_metric() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.StatsdConfig.duration_metric)
  return duration_metric_;
}

// repeated .android.os.statsd.AtomMatcher atom_matcher = 7;
inline int StatsdConfig::atom_matcher_size() const {
  return atom_matcher_.size();
}
inline void StatsdConfig::clear_atom_matcher() {
  atom_matcher_.Clear();
}
inline ::android::os::statsd::AtomMatcher* StatsdConfig::mutable_atom_matcher(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.StatsdConfig.atom_matcher)
  return atom_matcher_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::AtomMatcher >*
StatsdConfig::mutable_atom_matcher() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.StatsdConfig.atom_matcher)
  return &atom_matcher_;
}
inline const ::android::os::statsd::AtomMatcher& StatsdConfig::atom_matcher(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.StatsdConfig.atom_matcher)
  return atom_matcher_.Get(index);
}
inline ::android::os::statsd::AtomMatcher* StatsdConfig::add_atom_matcher() {
  // @@protoc_insertion_point(field_add:android.os.statsd.StatsdConfig.atom_matcher)
  return atom_matcher_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::AtomMatcher >&
StatsdConfig::atom_matcher() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.StatsdConfig.atom_matcher)
  return atom_matcher_;
}

// repeated .android.os.statsd.Predicate predicate = 8;
inline int StatsdConfig::predicate_size() const {
  return predicate_.size();
}
inline void StatsdConfig::clear_predicate() {
  predicate_.Clear();
}
inline ::android::os::statsd::Predicate* StatsdConfig::mutable_predicate(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.StatsdConfig.predicate)
  return predicate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::Predicate >*
StatsdConfig::mutable_predicate() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.StatsdConfig.predicate)
  return &predicate_;
}
inline const ::android::os::statsd::Predicate& StatsdConfig::predicate(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.StatsdConfig.predicate)
  return predicate_.Get(index);
}
inline ::android::os::statsd::Predicate* StatsdConfig::add_predicate() {
  // @@protoc_insertion_point(field_add:android.os.statsd.StatsdConfig.predicate)
  return predicate_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::Predicate >&
StatsdConfig::predicate() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.StatsdConfig.predicate)
  return predicate_;
}

// repeated .android.os.statsd.Alert alert = 9;
inline int StatsdConfig::alert_size() const {
  return alert_.size();
}
inline void StatsdConfig::clear_alert() {
  alert_.Clear();
}
inline ::android::os::statsd::Alert* StatsdConfig::mutable_alert(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.StatsdConfig.alert)
  return alert_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::Alert >*
StatsdConfig::mutable_alert() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.StatsdConfig.alert)
  return &alert_;
}
inline const ::android::os::statsd::Alert& StatsdConfig::alert(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.StatsdConfig.alert)
  return alert_.Get(index);
}
inline ::android::os::statsd::Alert* StatsdConfig::add_alert() {
  // @@protoc_insertion_point(field_add:android.os.statsd.StatsdConfig.alert)
  return alert_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::Alert >&
StatsdConfig::alert() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.StatsdConfig.alert)
  return alert_;
}

// repeated .android.os.statsd.Alarm alarm = 10;
inline int StatsdConfig::alarm_size() const {
  return alarm_.size();
}
inline void StatsdConfig::clear_alarm() {
  alarm_.Clear();
}
inline ::android::os::statsd::Alarm* StatsdConfig::mutable_alarm(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.StatsdConfig.alarm)
  return alarm_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::Alarm >*
StatsdConfig::mutable_alarm() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.StatsdConfig.alarm)
  return &alarm_;
}
inline const ::android::os::statsd::Alarm& StatsdConfig::alarm(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.StatsdConfig.alarm)
  return alarm_.Get(index);
}
inline ::android::os::statsd::Alarm* StatsdConfig::add_alarm() {
  // @@protoc_insertion_point(field_add:android.os.statsd.StatsdConfig.alarm)
  return alarm_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::Alarm >&
StatsdConfig::alarm() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.StatsdConfig.alarm)
  return alarm_;
}

// repeated .android.os.statsd.Subscription subscription = 11;
inline int StatsdConfig::subscription_size() const {
  return subscription_.size();
}
inline void StatsdConfig::clear_subscription() {
  subscription_.Clear();
}
inline ::android::os::statsd::Subscription* StatsdConfig::mutable_subscription(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.StatsdConfig.subscription)
  return subscription_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::Subscription >*
StatsdConfig::mutable_subscription() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.StatsdConfig.subscription)
  return &subscription_;
}
inline const ::android::os::statsd::Subscription& StatsdConfig::subscription(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.StatsdConfig.subscription)
  return subscription_.Get(index);
}
inline ::android::os::statsd::Subscription* StatsdConfig::add_subscription() {
  // @@protoc_insertion_point(field_add:android.os.statsd.StatsdConfig.subscription)
  return subscription_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::Subscription >&
StatsdConfig::subscription() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.StatsdConfig.subscription)
  return subscription_;
}

// repeated string allowed_log_source = 12;
inline int StatsdConfig::allowed_log_source_size() const {
  return allowed_log_source_.size();
}
inline void StatsdConfig::clear_allowed_log_source() {
  allowed_log_source_.Clear();
}
inline const std::string& StatsdConfig::allowed_log_source(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.StatsdConfig.allowed_log_source)
  return allowed_log_source_.Get(index);
}
inline std::string* StatsdConfig::mutable_allowed_log_source(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.StatsdConfig.allowed_log_source)
  return allowed_log_source_.Mutable(index);
}
inline void StatsdConfig::set_allowed_log_source(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:android.os.statsd.StatsdConfig.allowed_log_source)
  allowed_log_source_.Mutable(index)->assign(value);
}
inline void StatsdConfig::set_allowed_log_source(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:android.os.statsd.StatsdConfig.allowed_log_source)
  allowed_log_source_.Mutable(index)->assign(std::move(value));
}
inline void StatsdConfig::set_allowed_log_source(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  allowed_log_source_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:android.os.statsd.StatsdConfig.allowed_log_source)
}
inline void StatsdConfig::set_allowed_log_source(int index, const char* value, size_t size) {
  allowed_log_source_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:android.os.statsd.StatsdConfig.allowed_log_source)
}
inline std::string* StatsdConfig::add_allowed_log_source() {
  // @@protoc_insertion_point(field_add_mutable:android.os.statsd.StatsdConfig.allowed_log_source)
  return allowed_log_source_.Add();
}
inline void StatsdConfig::add_allowed_log_source(const std::string& value) {
  allowed_log_source_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:android.os.statsd.StatsdConfig.allowed_log_source)
}
inline void StatsdConfig::add_allowed_log_source(std::string&& value) {
  allowed_log_source_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:android.os.statsd.StatsdConfig.allowed_log_source)
}
inline void StatsdConfig::add_allowed_log_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  allowed_log_source_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:android.os.statsd.StatsdConfig.allowed_log_source)
}
inline void StatsdConfig::add_allowed_log_source(const char* value, size_t size) {
  allowed_log_source_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:android.os.statsd.StatsdConfig.allowed_log_source)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StatsdConfig::allowed_log_source() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.StatsdConfig.allowed_log_source)
  return allowed_log_source_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StatsdConfig::mutable_allowed_log_source() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.StatsdConfig.allowed_log_source)
  return &allowed_log_source_;
}

// repeated int64 no_report_metric = 13;
inline int StatsdConfig::no_report_metric_size() const {
  return no_report_metric_.size();
}
inline void StatsdConfig::clear_no_report_metric() {
  no_report_metric_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatsdConfig::no_report_metric(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.StatsdConfig.no_report_metric)
  return no_report_metric_.Get(index);
}
inline void StatsdConfig::set_no_report_metric(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  no_report_metric_.Set(index, value);
  // @@protoc_insertion_point(field_set:android.os.statsd.StatsdConfig.no_report_metric)
}
inline void StatsdConfig::add_no_report_metric(::PROTOBUF_NAMESPACE_ID::int64 value) {
  no_report_metric_.Add(value);
  // @@protoc_insertion_point(field_add:android.os.statsd.StatsdConfig.no_report_metric)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
StatsdConfig::no_report_metric() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.StatsdConfig.no_report_metric)
  return no_report_metric_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
StatsdConfig::mutable_no_report_metric() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.StatsdConfig.no_report_metric)
  return &no_report_metric_;
}

// repeated .android.os.statsd.StatsdConfig.Annotation annotation = 14;
inline int StatsdConfig::annotation_size() const {
  return annotation_.size();
}
inline void StatsdConfig::clear_annotation() {
  annotation_.Clear();
}
inline ::android::os::statsd::StatsdConfig_Annotation* StatsdConfig::mutable_annotation(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.StatsdConfig.annotation)
  return annotation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::StatsdConfig_Annotation >*
StatsdConfig::mutable_annotation() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.StatsdConfig.annotation)
  return &annotation_;
}
inline const ::android::os::statsd::StatsdConfig_Annotation& StatsdConfig::annotation(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.StatsdConfig.annotation)
  return annotation_.Get(index);
}
inline ::android::os::statsd::StatsdConfig_Annotation* StatsdConfig::add_annotation() {
  // @@protoc_insertion_point(field_add:android.os.statsd.StatsdConfig.annotation)
  return annotation_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::StatsdConfig_Annotation >&
StatsdConfig::annotation() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.StatsdConfig.annotation)
  return annotation_;
}

// optional int64 ttl_in_seconds = 15;
inline bool StatsdConfig::has_ttl_in_seconds() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StatsdConfig::clear_ttl_in_seconds() {
  ttl_in_seconds_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StatsdConfig::ttl_in_seconds() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.StatsdConfig.ttl_in_seconds)
  return ttl_in_seconds_;
}
inline void StatsdConfig::set_ttl_in_seconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  ttl_in_seconds_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.StatsdConfig.ttl_in_seconds)
}

// optional bool hash_strings_in_metric_report = 16 [default = true];
inline bool StatsdConfig::has_hash_strings_in_metric_report() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StatsdConfig::clear_hash_strings_in_metric_report() {
  hash_strings_in_metric_report_ = true;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool StatsdConfig::hash_strings_in_metric_report() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.StatsdConfig.hash_strings_in_metric_report)
  return hash_strings_in_metric_report_;
}
inline void StatsdConfig::set_hash_strings_in_metric_report(bool value) {
  _has_bits_[0] |= 0x00000020u;
  hash_strings_in_metric_report_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.StatsdConfig.hash_strings_in_metric_report)
}

// repeated .android.os.statsd.MetricActivation metric_activation = 17;
inline int StatsdConfig::metric_activation_size() const {
  return metric_activation_.size();
}
inline void StatsdConfig::clear_metric_activation() {
  metric_activation_.Clear();
}
inline ::android::os::statsd::MetricActivation* StatsdConfig::mutable_metric_activation(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.StatsdConfig.metric_activation)
  return metric_activation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricActivation >*
StatsdConfig::mutable_metric_activation() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.StatsdConfig.metric_activation)
  return &metric_activation_;
}
inline const ::android::os::statsd::MetricActivation& StatsdConfig::metric_activation(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.StatsdConfig.metric_activation)
  return metric_activation_.Get(index);
}
inline ::android::os::statsd::MetricActivation* StatsdConfig::add_metric_activation() {
  // @@protoc_insertion_point(field_add:android.os.statsd.StatsdConfig.metric_activation)
  return metric_activation_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::MetricActivation >&
StatsdConfig::metric_activation() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.StatsdConfig.metric_activation)
  return metric_activation_;
}

// optional bool version_strings_in_metric_report = 18;
inline bool StatsdConfig::has_version_strings_in_metric_report() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StatsdConfig::clear_version_strings_in_metric_report() {
  version_strings_in_metric_report_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool StatsdConfig::version_strings_in_metric_report() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.StatsdConfig.version_strings_in_metric_report)
  return version_strings_in_metric_report_;
}
inline void StatsdConfig::set_version_strings_in_metric_report(bool value) {
  _has_bits_[0] |= 0x00000004u;
  version_strings_in_metric_report_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.StatsdConfig.version_strings_in_metric_report)
}

// optional bool installer_in_metric_report = 19;
inline bool StatsdConfig::has_installer_in_metric_report() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StatsdConfig::clear_installer_in_metric_report() {
  installer_in_metric_report_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool StatsdConfig::installer_in_metric_report() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.StatsdConfig.installer_in_metric_report)
  return installer_in_metric_report_;
}
inline void StatsdConfig::set_installer_in_metric_report(bool value) {
  _has_bits_[0] |= 0x00000008u;
  installer_in_metric_report_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.StatsdConfig.installer_in_metric_report)
}

// optional bool persist_locally = 20 [default = false];
inline bool StatsdConfig::has_persist_locally() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StatsdConfig::clear_persist_locally() {
  persist_locally_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool StatsdConfig::persist_locally() const {
  // @@protoc_insertion_point(field_get:android.os.statsd.StatsdConfig.persist_locally)
  return persist_locally_;
}
inline void StatsdConfig::set_persist_locally(bool value) {
  _has_bits_[0] |= 0x00000010u;
  persist_locally_ = value;
  // @@protoc_insertion_point(field_set:android.os.statsd.StatsdConfig.persist_locally)
}

// repeated .android.os.statsd.State state = 21;
inline int StatsdConfig::state_size() const {
  return state_.size();
}
inline void StatsdConfig::clear_state() {
  state_.Clear();
}
inline ::android::os::statsd::State* StatsdConfig::mutable_state(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.StatsdConfig.state)
  return state_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::State >*
StatsdConfig::mutable_state() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.StatsdConfig.state)
  return &state_;
}
inline const ::android::os::statsd::State& StatsdConfig::state(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.StatsdConfig.state)
  return state_.Get(index);
}
inline ::android::os::statsd::State* StatsdConfig::add_state() {
  // @@protoc_insertion_point(field_add:android.os.statsd.StatsdConfig.state)
  return state_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::State >&
StatsdConfig::state() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.StatsdConfig.state)
  return state_;
}

// repeated string default_pull_packages = 22;
inline int StatsdConfig::default_pull_packages_size() const {
  return default_pull_packages_.size();
}
inline void StatsdConfig::clear_default_pull_packages() {
  default_pull_packages_.Clear();
}
inline const std::string& StatsdConfig::default_pull_packages(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.StatsdConfig.default_pull_packages)
  return default_pull_packages_.Get(index);
}
inline std::string* StatsdConfig::mutable_default_pull_packages(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.StatsdConfig.default_pull_packages)
  return default_pull_packages_.Mutable(index);
}
inline void StatsdConfig::set_default_pull_packages(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:android.os.statsd.StatsdConfig.default_pull_packages)
  default_pull_packages_.Mutable(index)->assign(value);
}
inline void StatsdConfig::set_default_pull_packages(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:android.os.statsd.StatsdConfig.default_pull_packages)
  default_pull_packages_.Mutable(index)->assign(std::move(value));
}
inline void StatsdConfig::set_default_pull_packages(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  default_pull_packages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:android.os.statsd.StatsdConfig.default_pull_packages)
}
inline void StatsdConfig::set_default_pull_packages(int index, const char* value, size_t size) {
  default_pull_packages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:android.os.statsd.StatsdConfig.default_pull_packages)
}
inline std::string* StatsdConfig::add_default_pull_packages() {
  // @@protoc_insertion_point(field_add_mutable:android.os.statsd.StatsdConfig.default_pull_packages)
  return default_pull_packages_.Add();
}
inline void StatsdConfig::add_default_pull_packages(const std::string& value) {
  default_pull_packages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:android.os.statsd.StatsdConfig.default_pull_packages)
}
inline void StatsdConfig::add_default_pull_packages(std::string&& value) {
  default_pull_packages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:android.os.statsd.StatsdConfig.default_pull_packages)
}
inline void StatsdConfig::add_default_pull_packages(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  default_pull_packages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:android.os.statsd.StatsdConfig.default_pull_packages)
}
inline void StatsdConfig::add_default_pull_packages(const char* value, size_t size) {
  default_pull_packages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:android.os.statsd.StatsdConfig.default_pull_packages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StatsdConfig::default_pull_packages() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.StatsdConfig.default_pull_packages)
  return default_pull_packages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StatsdConfig::mutable_default_pull_packages() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.StatsdConfig.default_pull_packages)
  return &default_pull_packages_;
}

// repeated .android.os.statsd.PullAtomPackages pull_atom_packages = 23;
inline int StatsdConfig::pull_atom_packages_size() const {
  return pull_atom_packages_.size();
}
inline void StatsdConfig::clear_pull_atom_packages() {
  pull_atom_packages_.Clear();
}
inline ::android::os::statsd::PullAtomPackages* StatsdConfig::mutable_pull_atom_packages(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.statsd.StatsdConfig.pull_atom_packages)
  return pull_atom_packages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::PullAtomPackages >*
StatsdConfig::mutable_pull_atom_packages() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.StatsdConfig.pull_atom_packages)
  return &pull_atom_packages_;
}
inline const ::android::os::statsd::PullAtomPackages& StatsdConfig::pull_atom_packages(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.StatsdConfig.pull_atom_packages)
  return pull_atom_packages_.Get(index);
}
inline ::android::os::statsd::PullAtomPackages* StatsdConfig::add_pull_atom_packages() {
  // @@protoc_insertion_point(field_add:android.os.statsd.StatsdConfig.pull_atom_packages)
  return pull_atom_packages_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::statsd::PullAtomPackages >&
StatsdConfig::pull_atom_packages() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.StatsdConfig.pull_atom_packages)
  return pull_atom_packages_;
}

// repeated int32 whitelisted_atom_ids = 24;
inline int StatsdConfig::whitelisted_atom_ids_size() const {
  return whitelisted_atom_ids_.size();
}
inline void StatsdConfig::clear_whitelisted_atom_ids() {
  whitelisted_atom_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StatsdConfig::whitelisted_atom_ids(int index) const {
  // @@protoc_insertion_point(field_get:android.os.statsd.StatsdConfig.whitelisted_atom_ids)
  return whitelisted_atom_ids_.Get(index);
}
inline void StatsdConfig::set_whitelisted_atom_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  whitelisted_atom_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:android.os.statsd.StatsdConfig.whitelisted_atom_ids)
}
inline void StatsdConfig::add_whitelisted_atom_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  whitelisted_atom_ids_.Add(value);
  // @@protoc_insertion_point(field_add:android.os.statsd.StatsdConfig.whitelisted_atom_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
StatsdConfig::whitelisted_atom_ids() const {
  // @@protoc_insertion_point(field_list:android.os.statsd.StatsdConfig.whitelisted_atom_ids)
  return whitelisted_atom_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
StatsdConfig::mutable_whitelisted_atom_ids() {
  // @@protoc_insertion_point(field_mutable_list:android.os.statsd.StatsdConfig.whitelisted_atom_ids)
  return &whitelisted_atom_ids_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace statsd
}  // namespace os
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::os::statsd::SimplePredicate_InitialValue> : ::std::true_type {};
template <> struct is_proto_enum< ::android::os::statsd::DurationMetric_AggregationType> : ::std::true_type {};
template <> struct is_proto_enum< ::android::os::statsd::GaugeMetric_SamplingType> : ::std::true_type {};
template <> struct is_proto_enum< ::android::os::statsd::ValueMetric_AggregationType> : ::std::true_type {};
template <> struct is_proto_enum< ::android::os::statsd::ValueMetric_ValueDirection> : ::std::true_type {};
template <> struct is_proto_enum< ::android::os::statsd::IncidentdDetails_Destination> : ::std::true_type {};
template <> struct is_proto_enum< ::android::os::statsd::Subscription_RuleType> : ::std::true_type {};
template <> struct is_proto_enum< ::android::os::statsd::Position> : ::std::true_type {};
template <> struct is_proto_enum< ::android::os::statsd::TimeUnit> : ::std::true_type {};
template <> struct is_proto_enum< ::android::os::statsd::LogicalOperation> : ::std::true_type {};
template <> struct is_proto_enum< ::android::os::statsd::ActivationType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto
