// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packages/modules/StatsD/statsd/src/active_config_list.proto

#include "packages/modules/StatsD/statsd/src/active_config_list.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActiveConfig_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActiveEventActivation_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActiveMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto;
namespace android {
namespace os {
namespace statsd {
class ActiveEventActivationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActiveEventActivation> _instance;
} _ActiveEventActivation_default_instance_;
class ActiveMetricDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActiveMetric> _instance;
} _ActiveMetric_default_instance_;
class ActiveConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActiveConfig> _instance;
} _ActiveConfig_default_instance_;
class ActiveConfigListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActiveConfigList> _instance;
} _ActiveConfigList_default_instance_;
}  // namespace statsd
}  // namespace os
}  // namespace android
static void InitDefaultsscc_info_ActiveConfig_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_ActiveConfig_default_instance_;
    new (ptr) ::android::os::statsd::ActiveConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::ActiveConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActiveConfig_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ActiveConfig_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto}, {
      &scc_info_ActiveMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto.base,}};

static void InitDefaultsscc_info_ActiveConfigList_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_ActiveConfigList_default_instance_;
    new (ptr) ::android::os::statsd::ActiveConfigList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::ActiveConfigList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActiveConfigList_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ActiveConfigList_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto}, {
      &scc_info_ActiveConfig_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto.base,}};

static void InitDefaultsscc_info_ActiveEventActivation_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_ActiveEventActivation_default_instance_;
    new (ptr) ::android::os::statsd::ActiveEventActivation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::ActiveEventActivation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActiveEventActivation_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ActiveEventActivation_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto}, {}};

static void InitDefaultsscc_info_ActiveMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_ActiveMetric_default_instance_;
    new (ptr) ::android::os::statsd::ActiveMetric();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::ActiveMetric::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActiveMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ActiveMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto}, {
      &scc_info_ActiveEventActivation_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto.base,}};

namespace android {
namespace os {
namespace statsd {
bool ActiveEventActivation_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ActiveEventActivation_State_strings[3] = {};

static const char ActiveEventActivation_State_names[] =
  "ACTIVATE_ON_BOOT"
  "ACTIVE"
  "UNNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ActiveEventActivation_State_entries[] = {
  { {ActiveEventActivation_State_names + 0, 16}, 2 },
  { {ActiveEventActivation_State_names + 16, 6}, 1 },
  { {ActiveEventActivation_State_names + 22, 8}, 0 },
};

static const int ActiveEventActivation_State_entries_by_number[] = {
  2, // 0 -> UNNKNOWN
  1, // 1 -> ACTIVE
  0, // 2 -> ACTIVATE_ON_BOOT
};

const std::string& ActiveEventActivation_State_Name(
    ActiveEventActivation_State value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ActiveEventActivation_State_entries,
          ActiveEventActivation_State_entries_by_number,
          3, ActiveEventActivation_State_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ActiveEventActivation_State_entries,
      ActiveEventActivation_State_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ActiveEventActivation_State_strings[idx].get();
}
bool ActiveEventActivation_State_Parse(
    const std::string& name, ActiveEventActivation_State* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ActiveEventActivation_State_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ActiveEventActivation_State>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ActiveEventActivation_State ActiveEventActivation::UNNKNOWN;
constexpr ActiveEventActivation_State ActiveEventActivation::ACTIVE;
constexpr ActiveEventActivation_State ActiveEventActivation::ACTIVATE_ON_BOOT;
constexpr ActiveEventActivation_State ActiveEventActivation::State_MIN;
constexpr ActiveEventActivation_State ActiveEventActivation::State_MAX;
constexpr int ActiveEventActivation::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ActiveEventActivation::InitAsDefaultInstance() {
}
class ActiveEventActivation::_Internal {
 public:
  using HasBits = decltype(std::declval<ActiveEventActivation>()._has_bits_);
  static void set_has_atom_matcher_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_remaining_ttl_nanos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ActiveEventActivation::ActiveEventActivation()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.ActiveEventActivation)
}
ActiveEventActivation::ActiveEventActivation(const ActiveEventActivation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&remaining_ttl_nanos_, &from.remaining_ttl_nanos_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&remaining_ttl_nanos_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.ActiveEventActivation)
}

void ActiveEventActivation::SharedCtor() {
  ::memset(&remaining_ttl_nanos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&remaining_ttl_nanos_)) + sizeof(state_));
}

ActiveEventActivation::~ActiveEventActivation() {
  // @@protoc_insertion_point(destructor:android.os.statsd.ActiveEventActivation)
  SharedDtor();
}

void ActiveEventActivation::SharedDtor() {
}

void ActiveEventActivation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActiveEventActivation& ActiveEventActivation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActiveEventActivation_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto.base);
  return *internal_default_instance();
}


void ActiveEventActivation::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.ActiveEventActivation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&remaining_ttl_nanos_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&remaining_ttl_nanos_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActiveEventActivation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 atom_matcher_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_atom_matcher_index(&has_bits);
          atom_matcher_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 remaining_ttl_nanos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_remaining_ttl_nanos(&has_bits);
          remaining_ttl_nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.statsd.ActiveEventActivation.State state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::statsd::ActiveEventActivation_State_IsValid(val))) {
            set_state(static_cast<::android::os::statsd::ActiveEventActivation_State>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActiveEventActivation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.ActiveEventActivation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 atom_matcher_index = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_atom_matcher_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &atom_matcher_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 remaining_ttl_nanos = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_remaining_ttl_nanos(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &remaining_ttl_nanos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.statsd.ActiveEventActivation.State state = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::statsd::ActiveEventActivation_State_IsValid(value)) {
            set_state(static_cast< ::android::os::statsd::ActiveEventActivation_State >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.ActiveEventActivation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.ActiveEventActivation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActiveEventActivation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.ActiveEventActivation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 atom_matcher_index = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->atom_matcher_index(), output);
  }

  // optional int64 remaining_ttl_nanos = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->remaining_ttl_nanos(), output);
  }

  // optional .android.os.statsd.ActiveEventActivation.State state = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.ActiveEventActivation)
}

size_t ActiveEventActivation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.ActiveEventActivation)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 remaining_ttl_nanos = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->remaining_ttl_nanos());
    }

    // optional int32 atom_matcher_index = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->atom_matcher_index());
    }

    // optional .android.os.statsd.ActiveEventActivation.State state = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActiveEventActivation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ActiveEventActivation*>(
      &from));
}

void ActiveEventActivation::MergeFrom(const ActiveEventActivation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.ActiveEventActivation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      remaining_ttl_nanos_ = from.remaining_ttl_nanos_;
    }
    if (cached_has_bits & 0x00000002u) {
      atom_matcher_index_ = from.atom_matcher_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ActiveEventActivation::CopyFrom(const ActiveEventActivation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.ActiveEventActivation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveEventActivation::IsInitialized() const {
  return true;
}

void ActiveEventActivation::InternalSwap(ActiveEventActivation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(remaining_ttl_nanos_, other->remaining_ttl_nanos_);
  swap(atom_matcher_index_, other->atom_matcher_index_);
  swap(state_, other->state_);
}

std::string ActiveEventActivation::GetTypeName() const {
  return "android.os.statsd.ActiveEventActivation";
}


// ===================================================================

void ActiveMetric::InitAsDefaultInstance() {
}
class ActiveMetric::_Internal {
 public:
  using HasBits = decltype(std::declval<ActiveMetric>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ActiveMetric::ActiveMetric()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.ActiveMetric)
}
ActiveMetric::ActiveMetric(const ActiveMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      activation_(from.activation_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.ActiveMetric)
}

void ActiveMetric::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActiveMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto.base);
  id_ = PROTOBUF_LONGLONG(0);
}

ActiveMetric::~ActiveMetric() {
  // @@protoc_insertion_point(destructor:android.os.statsd.ActiveMetric)
  SharedDtor();
}

void ActiveMetric::SharedDtor() {
}

void ActiveMetric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActiveMetric& ActiveMetric::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActiveMetric_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto.base);
  return *internal_default_instance();
}


void ActiveMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.ActiveMetric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activation_.Clear();
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActiveMetric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.statsd.ActiveEventActivation activation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_activation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActiveMetric::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.ActiveMetric)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.statsd.ActiveEventActivation activation = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_activation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.ActiveMetric)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.ActiveMetric)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActiveMetric::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.ActiveMetric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // repeated .android.os.statsd.ActiveEventActivation activation = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->activation_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->activation(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.ActiveMetric)
}

size_t ActiveMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.ActiveMetric)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.os.statsd.ActiveEventActivation activation = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->activation_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->activation(static_cast<int>(i)));
    }
  }

  // optional int64 id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActiveMetric::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ActiveMetric*>(
      &from));
}

void ActiveMetric::MergeFrom(const ActiveMetric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.ActiveMetric)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  activation_.MergeFrom(from.activation_);
  if (from.has_id()) {
    set_id(from.id());
  }
}

void ActiveMetric::CopyFrom(const ActiveMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.ActiveMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveMetric::IsInitialized() const {
  return true;
}

void ActiveMetric::InternalSwap(ActiveMetric* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&activation_)->InternalSwap(CastToBase(&other->activation_));
  swap(id_, other->id_);
}

std::string ActiveMetric::GetTypeName() const {
  return "android.os.statsd.ActiveMetric";
}


// ===================================================================

void ActiveConfig::InitAsDefaultInstance() {
}
class ActiveConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ActiveConfig>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ActiveConfig::ActiveConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.ActiveConfig)
}
ActiveConfig::ActiveConfig(const ActiveConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      metric_(from.metric_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.ActiveConfig)
}

void ActiveConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActiveConfig_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(uid_));
}

ActiveConfig::~ActiveConfig() {
  // @@protoc_insertion_point(destructor:android.os.statsd.ActiveConfig)
  SharedDtor();
}

void ActiveConfig::SharedDtor() {
}

void ActiveConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActiveConfig& ActiveConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActiveConfig_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto.base);
  return *internal_default_instance();
}


void ActiveConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.ActiveConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metric_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uid_) -
        reinterpret_cast<char*>(&id_)) + sizeof(uid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActiveConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.statsd.ActiveMetric metric = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_metric(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActiveConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.ActiveConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 uid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.statsd.ActiveMetric metric = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_metric()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.ActiveConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.ActiveConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActiveConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.ActiveConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 uid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->uid(), output);
  }

  // repeated .android.os.statsd.ActiveMetric metric = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metric_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->metric(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.ActiveConfig)
}

size_t ActiveConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.ActiveConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.os.statsd.ActiveMetric metric = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->metric_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->metric(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 uid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActiveConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ActiveConfig*>(
      &from));
}

void ActiveConfig::MergeFrom(const ActiveConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.ActiveConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metric_.MergeFrom(from.metric_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      uid_ = from.uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ActiveConfig::CopyFrom(const ActiveConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.ActiveConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveConfig::IsInitialized() const {
  return true;
}

void ActiveConfig::InternalSwap(ActiveConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&metric_)->InternalSwap(CastToBase(&other->metric_));
  swap(id_, other->id_);
  swap(uid_, other->uid_);
}

std::string ActiveConfig::GetTypeName() const {
  return "android.os.statsd.ActiveConfig";
}


// ===================================================================

void ActiveConfigList::InitAsDefaultInstance() {
}
class ActiveConfigList::_Internal {
 public:
  using HasBits = decltype(std::declval<ActiveConfigList>()._has_bits_);
};

ActiveConfigList::ActiveConfigList()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.ActiveConfigList)
}
ActiveConfigList::ActiveConfigList(const ActiveConfigList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      config_(from.config_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.ActiveConfigList)
}

void ActiveConfigList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActiveConfigList_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto.base);
}

ActiveConfigList::~ActiveConfigList() {
  // @@protoc_insertion_point(destructor:android.os.statsd.ActiveConfigList)
  SharedDtor();
}

void ActiveConfigList::SharedDtor() {
}

void ActiveConfigList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActiveConfigList& ActiveConfigList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActiveConfigList_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2factive_5fconfig_5flist_2eproto.base);
  return *internal_default_instance();
}


void ActiveConfigList::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.ActiveConfigList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActiveConfigList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .android.os.statsd.ActiveConfig config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActiveConfigList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.ActiveConfigList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .android.os.statsd.ActiveConfig config = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.ActiveConfigList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.ActiveConfigList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActiveConfigList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.ActiveConfigList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.os.statsd.ActiveConfig config = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->config_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->config(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.ActiveConfigList)
}

size_t ActiveConfigList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.ActiveConfigList)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.os.statsd.ActiveConfig config = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->config_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->config(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActiveConfigList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ActiveConfigList*>(
      &from));
}

void ActiveConfigList::MergeFrom(const ActiveConfigList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.ActiveConfigList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  config_.MergeFrom(from.config_);
}

void ActiveConfigList::CopyFrom(const ActiveConfigList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.ActiveConfigList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveConfigList::IsInitialized() const {
  return true;
}

void ActiveConfigList::InternalSwap(ActiveConfigList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&config_)->InternalSwap(CastToBase(&other->config_));
}

std::string ActiveConfigList::GetTypeName() const {
  return "android.os.statsd.ActiveConfigList";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace statsd
}  // namespace os
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::os::statsd::ActiveEventActivation* Arena::CreateMaybeMessage< ::android::os::statsd::ActiveEventActivation >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::ActiveEventActivation >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::statsd::ActiveMetric* Arena::CreateMaybeMessage< ::android::os::statsd::ActiveMetric >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::ActiveMetric >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::statsd::ActiveConfig* Arena::CreateMaybeMessage< ::android::os::statsd::ActiveConfig >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::ActiveConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::statsd::ActiveConfigList* Arena::CreateMaybeMessage< ::android::os::statsd::ActiveConfigList >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::ActiveConfigList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
