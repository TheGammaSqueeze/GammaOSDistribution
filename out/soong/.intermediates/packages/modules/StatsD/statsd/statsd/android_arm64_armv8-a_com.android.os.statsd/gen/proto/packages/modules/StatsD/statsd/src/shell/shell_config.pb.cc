// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packages/modules/StatsD/statsd/src/shell/shell_config.proto

#include "packages/modules/StatsD/statsd/src/shell/shell_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fshell_2fshell_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PulledAtomSubscription_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fshell_2fshell_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimpleAtomMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto;
namespace android {
namespace os {
namespace statsd {
class PulledAtomSubscriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PulledAtomSubscription> _instance;
} _PulledAtomSubscription_default_instance_;
class ShellSubscriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShellSubscription> _instance;
} _ShellSubscription_default_instance_;
}  // namespace statsd
}  // namespace os
}  // namespace android
static void InitDefaultsscc_info_PulledAtomSubscription_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fshell_2fshell_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_PulledAtomSubscription_default_instance_;
    new (ptr) ::android::os::statsd::PulledAtomSubscription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::PulledAtomSubscription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PulledAtomSubscription_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fshell_2fshell_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PulledAtomSubscription_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fshell_2fshell_5fconfig_2eproto}, {
      &scc_info_SimpleAtomMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_ShellSubscription_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fshell_2fshell_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::statsd::_ShellSubscription_default_instance_;
    new (ptr) ::android::os::statsd::ShellSubscription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::statsd::ShellSubscription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ShellSubscription_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fshell_2fshell_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ShellSubscription_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fshell_2fshell_5fconfig_2eproto}, {
      &scc_info_SimpleAtomMatcher_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fstatsd_5fconfig_2eproto.base,
      &scc_info_PulledAtomSubscription_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fshell_2fshell_5fconfig_2eproto.base,}};

namespace android {
namespace os {
namespace statsd {

// ===================================================================

void PulledAtomSubscription::InitAsDefaultInstance() {
  ::android::os::statsd::_PulledAtomSubscription_default_instance_._instance.get_mutable()->matcher_ = const_cast< ::android::os::statsd::SimpleAtomMatcher*>(
      ::android::os::statsd::SimpleAtomMatcher::internal_default_instance());
}
class PulledAtomSubscription::_Internal {
 public:
  using HasBits = decltype(std::declval<PulledAtomSubscription>()._has_bits_);
  static const ::android::os::statsd::SimpleAtomMatcher& matcher(const PulledAtomSubscription* msg);
  static void set_has_matcher(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_freq_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::os::statsd::SimpleAtomMatcher&
PulledAtomSubscription::_Internal::matcher(const PulledAtomSubscription* msg) {
  return *msg->matcher_;
}
void PulledAtomSubscription::clear_matcher() {
  if (matcher_ != nullptr) matcher_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
PulledAtomSubscription::PulledAtomSubscription()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.PulledAtomSubscription)
}
PulledAtomSubscription::PulledAtomSubscription(const PulledAtomSubscription& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      packages_(from.packages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_matcher()) {
    matcher_ = new ::android::os::statsd::SimpleAtomMatcher(*from.matcher_);
  } else {
    matcher_ = nullptr;
  }
  freq_millis_ = from.freq_millis_;
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.PulledAtomSubscription)
}

void PulledAtomSubscription::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PulledAtomSubscription_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fshell_2fshell_5fconfig_2eproto.base);
  ::memset(&matcher_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&freq_millis_) -
      reinterpret_cast<char*>(&matcher_)) + sizeof(freq_millis_));
}

PulledAtomSubscription::~PulledAtomSubscription() {
  // @@protoc_insertion_point(destructor:android.os.statsd.PulledAtomSubscription)
  SharedDtor();
}

void PulledAtomSubscription::SharedDtor() {
  if (this != internal_default_instance()) delete matcher_;
}

void PulledAtomSubscription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PulledAtomSubscription& PulledAtomSubscription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PulledAtomSubscription_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fshell_2fshell_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void PulledAtomSubscription::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.PulledAtomSubscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packages_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(matcher_ != nullptr);
    matcher_->Clear();
  }
  freq_millis_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PulledAtomSubscription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.os.statsd.SimpleAtomMatcher matcher = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_matcher(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 freq_millis = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_freq_millis(&has_bits);
          freq_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string packages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_packages(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PulledAtomSubscription::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.PulledAtomSubscription)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.os.statsd.SimpleAtomMatcher matcher = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_matcher()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 freq_millis = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_freq_millis(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &freq_millis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string packages = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_packages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.PulledAtomSubscription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.PulledAtomSubscription)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PulledAtomSubscription::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.PulledAtomSubscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.os.statsd.SimpleAtomMatcher matcher = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::matcher(this), output);
  }

  // optional int32 freq_millis = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->freq_millis(), output);
  }

  // repeated string packages = 3;
  for (int i = 0, n = this->packages_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->packages(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.PulledAtomSubscription)
}

size_t PulledAtomSubscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.PulledAtomSubscription)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string packages = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->packages_size());
  for (int i = 0, n = this->packages_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->packages(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.os.statsd.SimpleAtomMatcher matcher = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *matcher_);
    }

    // optional int32 freq_millis = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->freq_millis());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PulledAtomSubscription::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PulledAtomSubscription*>(
      &from));
}

void PulledAtomSubscription::MergeFrom(const PulledAtomSubscription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.PulledAtomSubscription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  packages_.MergeFrom(from.packages_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_matcher()->::android::os::statsd::SimpleAtomMatcher::MergeFrom(from.matcher());
    }
    if (cached_has_bits & 0x00000002u) {
      freq_millis_ = from.freq_millis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PulledAtomSubscription::CopyFrom(const PulledAtomSubscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.PulledAtomSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PulledAtomSubscription::IsInitialized() const {
  return true;
}

void PulledAtomSubscription::InternalSwap(PulledAtomSubscription* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  packages_.InternalSwap(CastToBase(&other->packages_));
  swap(matcher_, other->matcher_);
  swap(freq_millis_, other->freq_millis_);
}

std::string PulledAtomSubscription::GetTypeName() const {
  return "android.os.statsd.PulledAtomSubscription";
}


// ===================================================================

void ShellSubscription::InitAsDefaultInstance() {
}
class ShellSubscription::_Internal {
 public:
  using HasBits = decltype(std::declval<ShellSubscription>()._has_bits_);
};

void ShellSubscription::clear_pushed() {
  pushed_.Clear();
}
ShellSubscription::ShellSubscription()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.statsd.ShellSubscription)
}
ShellSubscription::ShellSubscription(const ShellSubscription& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      pushed_(from.pushed_),
      pulled_(from.pulled_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.os.statsd.ShellSubscription)
}

void ShellSubscription::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShellSubscription_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fshell_2fshell_5fconfig_2eproto.base);
}

ShellSubscription::~ShellSubscription() {
  // @@protoc_insertion_point(destructor:android.os.statsd.ShellSubscription)
  SharedDtor();
}

void ShellSubscription::SharedDtor() {
}

void ShellSubscription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShellSubscription& ShellSubscription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShellSubscription_packages_2fmodules_2fStatsD_2fstatsd_2fsrc_2fshell_2fshell_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ShellSubscription::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.statsd.ShellSubscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pushed_.Clear();
  pulled_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ShellSubscription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .android.os.statsd.SimpleAtomMatcher pushed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_pushed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.statsd.PulledAtomSubscription pulled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_pulled(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ShellSubscription::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.statsd.ShellSubscription)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .android.os.statsd.SimpleAtomMatcher pushed = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_pushed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.statsd.PulledAtomSubscription pulled = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_pulled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.statsd.ShellSubscription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.statsd.ShellSubscription)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ShellSubscription::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.statsd.ShellSubscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.os.statsd.SimpleAtomMatcher pushed = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pushed_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->pushed(static_cast<int>(i)),
      output);
  }

  // repeated .android.os.statsd.PulledAtomSubscription pulled = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pulled_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->pulled(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.statsd.ShellSubscription)
}

size_t ShellSubscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.statsd.ShellSubscription)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.os.statsd.SimpleAtomMatcher pushed = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->pushed_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->pushed(static_cast<int>(i)));
    }
  }

  // repeated .android.os.statsd.PulledAtomSubscription pulled = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->pulled_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->pulled(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShellSubscription::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ShellSubscription*>(
      &from));
}

void ShellSubscription::MergeFrom(const ShellSubscription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.statsd.ShellSubscription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pushed_.MergeFrom(from.pushed_);
  pulled_.MergeFrom(from.pulled_);
}

void ShellSubscription::CopyFrom(const ShellSubscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.statsd.ShellSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellSubscription::IsInitialized() const {
  return true;
}

void ShellSubscription::InternalSwap(ShellSubscription* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&pushed_)->InternalSwap(CastToBase(&other->pushed_));
  CastToBase(&pulled_)->InternalSwap(CastToBase(&other->pulled_));
}

std::string ShellSubscription::GetTypeName() const {
  return "android.os.statsd.ShellSubscription";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace statsd
}  // namespace os
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::os::statsd::PulledAtomSubscription* Arena::CreateMaybeMessage< ::android::os::statsd::PulledAtomSubscription >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::PulledAtomSubscription >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::statsd::ShellSubscription* Arena::CreateMaybeMessage< ::android::os::statsd::ShellSubscription >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::statsd::ShellSubscription >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
