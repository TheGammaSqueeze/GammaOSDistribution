// This file is autogenerated

#include <statslog_statsd.h>
#include <stats_event.h>
#include <stats_annotations.h>
#include <stats_pull_atom_callback.h>

namespace android {
namespace os {
namespace statsd {
namespace util {

int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (APP_BREADCRUMB_REPORTED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int64_t arg2) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (DAVEY_OCCURRED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt64(event, arg2);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, int64_t arg2, int64_t arg3) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (ANOMALY_DETECTED == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, int32_t arg1, char const* arg2, int32_t arg3, int32_t arg4, char const* arg5, const BytesField& arg6) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeInt32(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_writeString(event, arg5);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg6.arg), arg6.arg_length);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}

int stats_write(int32_t code, char const* arg1, int64_t arg2, bool arg3, bool arg4, bool arg5, int32_t arg6, const BytesField& arg7, int32_t arg8, int32_t arg9, bool arg10) {
    AStatsEvent* event = AStatsEvent_obtain();
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeString(event, arg1);
    AStatsEvent_writeInt64(event, arg2);
    AStatsEvent_writeBool(event, arg3);
    AStatsEvent_writeBool(event, arg4);
    AStatsEvent_writeBool(event, arg5);
    AStatsEvent_writeInt32(event, arg6);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg7.arg), arg7.arg_length);
    AStatsEvent_writeInt32(event, arg8);
    AStatsEvent_writeInt32(event, arg9);
    AStatsEvent_writeBool(event, arg10);
    const int ret = AStatsEvent_write(event);
    AStatsEvent_release(event);
    return ret;
}



void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int32_t arg2, int64_t arg3) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (CPU_TIME_PER_UID_FREQ == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeInt32(event, arg2);
    AStatsEvent_writeInt64(event, arg3);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, char const* arg2, char const* arg3, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8, int64_t arg9, int64_t arg10, int64_t arg11, int64_t arg12, bool arg13, int32_t arg14) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (BINDER_CALLS == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeInt64(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_writeInt64(event, arg6);
    AStatsEvent_writeInt64(event, arg7);
    AStatsEvent_writeInt64(event, arg8);
    AStatsEvent_writeInt64(event, arg9);
    AStatsEvent_writeInt64(event, arg10);
    AStatsEvent_writeInt64(event, arg11);
    AStatsEvent_writeInt64(event, arg12);
    AStatsEvent_writeBool(event, arg13);
    AStatsEvent_writeInt32(event, arg14);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, char const* arg2, char const* arg3, char const* arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8, int64_t arg9, bool arg10, int64_t arg11, int64_t arg12, int64_t arg13, int64_t arg14, int64_t arg15) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt32(event, arg1);
    if (LOOPER_STATS == code) {
        AStatsEvent_addBoolAnnotation(event, ASTATSLOG_ANNOTATION_ID_IS_UID, true);
    }
    AStatsEvent_writeString(event, arg2);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeString(event, arg4);
    AStatsEvent_writeInt64(event, arg5);
    AStatsEvent_writeInt64(event, arg6);
    AStatsEvent_writeInt64(event, arg7);
    AStatsEvent_writeInt64(event, arg8);
    AStatsEvent_writeInt64(event, arg9);
    AStatsEvent_writeBool(event, arg10);
    AStatsEvent_writeInt64(event, arg11);
    AStatsEvent_writeInt64(event, arg12);
    AStatsEvent_writeInt64(event, arg13);
    AStatsEvent_writeInt64(event, arg14);
    AStatsEvent_writeInt64(event, arg15);
    AStatsEvent_build(event);
}

void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int64_t arg1, const BytesField& arg2, char const* arg3, int32_t arg4) {
    AStatsEvent* event = AStatsEventList_addStatsEvent(pulled_data);
    AStatsEvent_setAtomId(event, code);
    AStatsEvent_writeInt64(event, arg1);
    AStatsEvent_writeByteArray(event, reinterpret_cast<const uint8_t*>(arg2.arg), arg2.arg_length);
    AStatsEvent_writeString(event, arg3);
    AStatsEvent_writeInt32(event, arg4);
    AStatsEvent_build(event);
}


} // namespace util
} // namespace statsd
} // namespace os
} // namespace android
