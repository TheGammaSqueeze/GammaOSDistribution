// This file is autogenerated

#pragma once

#include <stdint.h>
#include <vector>
#include <map>
#include <set>
#include <stats_pull_atom_callback.h>

namespace android {
namespace os {
namespace statsd {
namespace util {

/*
 * API For logging statistics events.
 */

/**
 * Constants for atom codes.
 */
enum {

    /**
     * IsolatedUidChanged isolated_uid_changed
     * Usage: stats_write(StatsLog.ISOLATED_UID_CHANGED, int32_t parent_uid, int32_t isolated_uid, int32_t event);
     */
    ISOLATED_UID_CHANGED = 43,

    /**
     * AnomalyDetected anomaly_detected
     * Usage: stats_write(StatsLog.ANOMALY_DETECTED, int32_t config_uid, int64_t config_id, int64_t alert_id);
     */
    ANOMALY_DETECTED = 46,

    /**
     * AppBreadcrumbReported app_breadcrumb_reported
     * Usage: stats_write(StatsLog.APP_BREADCRUMB_REPORTED, int32_t uid, int32_t label, int32_t state);
     */
    APP_BREADCRUMB_REPORTED = 47,

    /**
     * DaveyOccurred davey_occurred
     * Usage: stats_write(StatsLog.DAVEY_OCCURRED, int32_t uid, int64_t jank_duration_millis);
     */
    DAVEY_OCCURRED = 58,

    /**
     * KeyValuePairsAtom key_value_pairs_atom
     * Usage: stats_write(StatsLog.KEY_VALUE_PAIRS_ATOM, int32_t uid, const std::map<int, int32_t>& pairs_int, const std::map<int, int64_t>& pairs_long, const std::map<int, char const*>& pairs_str, const std::map<int, float>& pairs_float);
     */
    KEY_VALUE_PAIRS_ATOM = 83,

    /**
     * BinaryPushStateChanged binary_push_state_changed
     * Usage: stats_write(StatsLog.BINARY_PUSH_STATE_CHANGED, char const* train_name, int64_t train_version_code, bool requires_staging, bool rollback_enabled, bool requires_low_latency_monitor, int32_t state, const BytesField& experiment_ids, int32_t user_id, int32_t reason, bool is_rollback);
     */
    BINARY_PUSH_STATE_CHANGED = 102,

    /**
     * WatchdogRollbackOccurred watchdog_rollback_occurred
     * Usage: stats_write(StatsLog.WATCHDOG_ROLLBACK_OCCURRED, int32_t rollback_type, char const* package_name, int32_t package_version_code, int32_t rollback_reason, char const* failing_package_name, const BytesField& experiment_ids);
     */
    WATCHDOG_ROLLBACK_OCCURRED = 147,

    /**
     * CpuTimePerUidFreq cpu_time_per_uid_freq
     * Usage: stats_write(StatsLog.CPU_TIME_PER_UID_FREQ, int32_t uid, int32_t freq_index, int64_t time_millis);
     */
    CPU_TIME_PER_UID_FREQ = 10010,

    /**
     * BinderCalls binder_calls
     * Usage: stats_write(StatsLog.BINDER_CALLS, int32_t uid, char const* service_class_name, char const* service_method_name, int64_t call_count, int64_t recorded_exception_count, int64_t recorded_total_latency_micros, int64_t recorded_max_latency_micros, int64_t recorded_total_cpu_micros, int64_t recorded_max_cpu_micros, int64_t recorded_max_reply_size_bytes, int64_t recorded_max_request_size_bytes, int64_t recorded_call_count, bool screen_interactive, int32_t direct_caller_uid);
     */
    BINDER_CALLS = 10022,

    /**
     * LooperStats looper_stats
     * Usage: stats_write(StatsLog.LOOPER_STATS, int32_t uid, char const* handler_class_name, char const* looper_thread_name, char const* message_name, int64_t message_count, int64_t exception_count, int64_t recorded_message_count, int64_t recorded_total_latency_micros, int64_t recorded_total_cpu_micros, bool screen_interactive, int64_t recorded_max_cpu_micros, int64_t recorded_max_latency_micros, int64_t recorded_delay_message_count, int64_t recorded_total_delay_millis, int64_t recorded_max_delay_millis);
     */
    LOOPER_STATS = 10024,

    /**
     * TrainInfo train_info
     * Usage: stats_write(StatsLog.TRAIN_INFO, int64_t train_version_code, const BytesField& train_experiment_id, char const* train_name, int32_t status);
     */
    TRAIN_INFO = 10051

};

//
// Constants for enum values
//

// Values for IsolatedUidChanged.event
const int32_t ISOLATED_UID_CHANGED__EVENT__REMOVED = 0;
const int32_t ISOLATED_UID_CHANGED__EVENT__CREATED = 1;

// Values for AppBreadcrumbReported.state
const int32_t APP_BREADCRUMB_REPORTED__STATE__UNKNOWN = 0;
const int32_t APP_BREADCRUMB_REPORTED__STATE__UNSPECIFIED = 1;
const int32_t APP_BREADCRUMB_REPORTED__STATE__STOP = 2;
const int32_t APP_BREADCRUMB_REPORTED__STATE__START = 3;

// Values for BinaryPushStateChanged.state
const int32_t BINARY_PUSH_STATE_CHANGED__STATE__UNKNOWN = 0;
const int32_t BINARY_PUSH_STATE_CHANGED__STATE__INSTALL_REQUESTED = 1;
const int32_t BINARY_PUSH_STATE_CHANGED__STATE__INSTALL_STARTED = 2;
const int32_t BINARY_PUSH_STATE_CHANGED__STATE__INSTALL_STAGED_NOT_READY = 3;
const int32_t BINARY_PUSH_STATE_CHANGED__STATE__INSTALL_STAGED_READY = 4;
const int32_t BINARY_PUSH_STATE_CHANGED__STATE__INSTALL_SUCCESS = 5;
const int32_t BINARY_PUSH_STATE_CHANGED__STATE__INSTALL_FAILURE = 6;
const int32_t BINARY_PUSH_STATE_CHANGED__STATE__INSTALL_CANCELLED = 7;
const int32_t BINARY_PUSH_STATE_CHANGED__STATE__INSTALLER_ROLLBACK_REQUESTED = 8;
const int32_t BINARY_PUSH_STATE_CHANGED__STATE__INSTALLER_ROLLBACK_INITIATED = 9;
const int32_t BINARY_PUSH_STATE_CHANGED__STATE__INSTALLER_ROLLBACK_INITIATED_FAILURE = 10;
const int32_t BINARY_PUSH_STATE_CHANGED__STATE__INSTALLER_ROLLBACK_STAGED = 11;
const int32_t BINARY_PUSH_STATE_CHANGED__STATE__INSTALLER_ROLLBACK_STAGED_FAILURE = 12;
const int32_t BINARY_PUSH_STATE_CHANGED__STATE__INSTALLER_ROLLBACK_BOOT_TRIGGERED = 13;
const int32_t BINARY_PUSH_STATE_CHANGED__STATE__INSTALLER_ROLLBACK_BOOT_TRIGGERED_FAILURE = 14;
const int32_t BINARY_PUSH_STATE_CHANGED__STATE__INSTALLER_ROLLBACK_SUCCESS = 15;
const int32_t BINARY_PUSH_STATE_CHANGED__STATE__INSTALLER_ROLLBACK_FAILURE = 16;
const int32_t BINARY_PUSH_STATE_CHANGED__STATE__INSTALLER_ROLLBACK_STAGED_CANCEL_REQUESTED = 17;
const int32_t BINARY_PUSH_STATE_CHANGED__STATE__INSTALLER_ROLLBACK_STAGED_CANCEL_SUCCESS = 18;
const int32_t BINARY_PUSH_STATE_CHANGED__STATE__INSTALLER_ROLLBACK_STAGED_CANCEL_FAILURE = 19;
const int32_t BINARY_PUSH_STATE_CHANGED__STATE__INSTALL_STAGED_CANCEL_REQUESTED = 20;
const int32_t BINARY_PUSH_STATE_CHANGED__STATE__INSTALL_STAGED_CANCEL_SUCCESS = 21;
const int32_t BINARY_PUSH_STATE_CHANGED__STATE__INSTALL_STAGED_CANCEL_FAILURE = 22;
const int32_t BINARY_PUSH_STATE_CHANGED__STATE__INSTALL_FAILURE_DOWNLOAD = 23;
const int32_t BINARY_PUSH_STATE_CHANGED__STATE__INSTALL_FAILURE_STATE_MISMATCH = 24;
const int32_t BINARY_PUSH_STATE_CHANGED__STATE__INSTALL_FAILURE_COMMIT = 25;
const int32_t BINARY_PUSH_STATE_CHANGED__STATE__REBOOT_TRIGGERED = 26;
const int32_t BINARY_PUSH_STATE_CHANGED__STATE__REBOOT_NOT_REQUIRED = 27;
const int32_t BINARY_PUSH_STATE_CHANGED__STATE__SOFT_RESTART_ELIGIBLE = 28;
const int32_t BINARY_PUSH_STATE_CHANGED__STATE__NOTIFICATION_RESTART_ELIGIBLE = 29;
const int32_t BINARY_PUSH_STATE_CHANGED__STATE__NO_REBOOT_PROMOTION_STRATEGY_ELIGIBLE = 30;
const int32_t BINARY_PUSH_STATE_CHANGED__STATE__REBOOT_TRIGGER_FAILURE = 31;

// Values for WatchdogRollbackOccurred.rollback_type
const int32_t WATCHDOG_ROLLBACK_OCCURRED__ROLLBACK_TYPE__UNKNOWN = 0;
const int32_t WATCHDOG_ROLLBACK_OCCURRED__ROLLBACK_TYPE__ROLLBACK_INITIATE = 1;
const int32_t WATCHDOG_ROLLBACK_OCCURRED__ROLLBACK_TYPE__ROLLBACK_SUCCESS = 2;
const int32_t WATCHDOG_ROLLBACK_OCCURRED__ROLLBACK_TYPE__ROLLBACK_FAILURE = 3;
const int32_t WATCHDOG_ROLLBACK_OCCURRED__ROLLBACK_TYPE__ROLLBACK_BOOT_TRIGGERED = 4;

// Values for WatchdogRollbackOccurred.rollback_reason
const int32_t WATCHDOG_ROLLBACK_OCCURRED__ROLLBACK_REASON__REASON_UNKNOWN = 0;
const int32_t WATCHDOG_ROLLBACK_OCCURRED__ROLLBACK_REASON__REASON_NATIVE_CRASH = 1;
const int32_t WATCHDOG_ROLLBACK_OCCURRED__ROLLBACK_REASON__REASON_EXPLICIT_HEALTH_CHECK = 2;
const int32_t WATCHDOG_ROLLBACK_OCCURRED__ROLLBACK_REASON__REASON_APP_CRASH = 3;
const int32_t WATCHDOG_ROLLBACK_OCCURRED__ROLLBACK_REASON__REASON_APP_NOT_RESPONDING = 4;
const int32_t WATCHDOG_ROLLBACK_OCCURRED__ROLLBACK_REASON__REASON_NATIVE_CRASH_DURING_BOOT = 5;

// Values for TrainInfo.status
const int32_t TRAIN_INFO__STATUS__UNKNOWN = 0;
const int32_t TRAIN_INFO__STATUS__INSTALL_REQUESTED = 1;
const int32_t TRAIN_INFO__STATUS__INSTALL_STARTED = 2;
const int32_t TRAIN_INFO__STATUS__INSTALL_STAGED_NOT_READY = 3;
const int32_t TRAIN_INFO__STATUS__INSTALL_STAGED_READY = 4;
const int32_t TRAIN_INFO__STATUS__INSTALL_SUCCESS = 5;
const int32_t TRAIN_INFO__STATUS__INSTALL_FAILURE = 6;
const int32_t TRAIN_INFO__STATUS__INSTALL_CANCELLED = 7;
const int32_t TRAIN_INFO__STATUS__INSTALLER_ROLLBACK_REQUESTED = 8;
const int32_t TRAIN_INFO__STATUS__INSTALLER_ROLLBACK_INITIATED = 9;
const int32_t TRAIN_INFO__STATUS__INSTALLER_ROLLBACK_INITIATED_FAILURE = 10;
const int32_t TRAIN_INFO__STATUS__INSTALLER_ROLLBACK_STAGED = 11;
const int32_t TRAIN_INFO__STATUS__INSTALLER_ROLLBACK_STAGED_FAILURE = 12;
const int32_t TRAIN_INFO__STATUS__INSTALLER_ROLLBACK_BOOT_TRIGGERED = 13;
const int32_t TRAIN_INFO__STATUS__INSTALLER_ROLLBACK_BOOT_TRIGGERED_FAILURE = 14;
const int32_t TRAIN_INFO__STATUS__INSTALLER_ROLLBACK_SUCCESS = 15;
const int32_t TRAIN_INFO__STATUS__INSTALLER_ROLLBACK_FAILURE = 16;
const int32_t TRAIN_INFO__STATUS__INSTALLER_ROLLBACK_STAGED_CANCEL_REQUESTED = 17;
const int32_t TRAIN_INFO__STATUS__INSTALLER_ROLLBACK_STAGED_CANCEL_SUCCESS = 18;
const int32_t TRAIN_INFO__STATUS__INSTALLER_ROLLBACK_STAGED_CANCEL_FAILURE = 19;
const int32_t TRAIN_INFO__STATUS__INSTALL_STAGED_CANCEL_REQUESTED = 20;
const int32_t TRAIN_INFO__STATUS__INSTALL_STAGED_CANCEL_SUCCESS = 21;
const int32_t TRAIN_INFO__STATUS__INSTALL_STAGED_CANCEL_FAILURE = 22;
const int32_t TRAIN_INFO__STATUS__INSTALL_FAILURE_DOWNLOAD = 23;
const int32_t TRAIN_INFO__STATUS__INSTALL_FAILURE_STATE_MISMATCH = 24;
const int32_t TRAIN_INFO__STATUS__INSTALL_FAILURE_COMMIT = 25;
const int32_t TRAIN_INFO__STATUS__REBOOT_TRIGGERED = 26;

struct BytesField {
  BytesField(char const* array, size_t len) : arg(array), arg_length(len) {}
  char const* arg;
  size_t arg_length;
};

//
// Write methods
//
int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3);
int stats_write(int32_t code, int32_t arg1, int64_t arg2);
int stats_write(int32_t code, int32_t arg1, int64_t arg2, int64_t arg3);
int stats_write(int32_t code, int32_t arg1, char const* arg2, int32_t arg3, int32_t arg4, char const* arg5, const BytesField& arg6);
int stats_write(int32_t code, char const* arg1, int64_t arg2, bool arg3, bool arg4, bool arg5, int32_t arg6, const BytesField& arg7, int32_t arg8, int32_t arg9, bool arg10);

//
// Write flattened methods
//

//
// Add AStatsEvent methods
//
void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, int32_t arg2, int64_t arg3);
void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, char const* arg2, char const* arg3, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8, int64_t arg9, int64_t arg10, int64_t arg11, int64_t arg12, bool arg13, int32_t arg14);
void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int32_t arg1, char const* arg2, char const* arg3, char const* arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8, int64_t arg9, bool arg10, int64_t arg11, int64_t arg12, int64_t arg13, int64_t arg14, int64_t arg15);
void addAStatsEvent(AStatsEventList* pulled_data, int32_t code, int64_t arg1, const BytesField& arg2, char const* arg3, int32_t arg4);

} // namespace util
} // namespace statsd
} // namespace os
} // namespace android
