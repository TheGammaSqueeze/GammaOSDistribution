/* AUTO-GENERATED FILE. DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found. It
 * should not be modified by hand.
 */

package com.android.connectivity.resources;

public final class R {
  public static final class array {
    public static final int config_legacy_networktype_restore_timers=0x7f010000;
    /**
     * What types of network switches to notify. See LingerMonitor.java.
     */
    public static final int config_networkNotifySwitches=0x7f010001;
    /**
     * An Array of "[NetworkCapabilities.TRANSPORT_*],[supported keepalives]
     */
    public static final int config_networkSupportedKeepaliveCount=0x7f010002;
    /**
     * Array of ConnectivityManager.TYPE_xxxx constants for networks that may only
     * be controlled by systemOrSignature apps.
     */
    public static final int config_protectedNetworks=0x7f010003;
    /**
     * Configuration of network interfaces that support WakeOnLAN
     */
    public static final int config_wakeonlan_supported_interfaces=0x7f010004;
    /**
     * Network type names used in the network_switch_metered and network_switch_metered_detail strings. These must be kept in the sync with the values NetworkCapabilities.TRANSPORT_xxx values, and in the same order.
     */
    public static final int network_switch_type_name=0x7f010005;
  }
  public static final class bool {
    /**
     * Whether to cancel network notifications automatically when tapped
     */
    public static final int config_autoCancelNetworkNotifications=0x7f020000;
    /**
     * When no internet or partial connectivity is detected on a network, and a high priority
     * (heads up) notification would be shown due to the network being explicitly selected,
     * directly show the dialog that would normally be shown when tapping the notification
     * instead of showing the notification.
     */
    public static final int config_notifyNoInternetAsDialogWhenHighPriority=0x7f020001;
    /**
     * Whether to use an ongoing notification for signing in to captive portals, instead of a
     * notification that can be dismissed.
     */
    public static final int config_ongoingSignInNotification=0x7f020002;
    /**
     * When showing notifications indicating partial connectivity, display the same notifications
     * as no connectivity instead. This may be easier to understand for users but offers less
     * details on what is happening.
     */
    public static final int config_partialConnectivityNotifiedAsNoInternet=0x7f020003;
    /**
     * Whether the internal vehicle network should remain active even when no
     * apps requested it.
     */
    public static final int config_vehicleInternalNetworkAlwaysRequested=0x7f020004;
  }
  public static final class drawable {
    public static final int stat_notify_rssi_in_range=0x7f030000;
    public static final int stat_notify_wifi_in_range=0x7f030001;
  }
  public static final class integer {
    /**
     * Allowed unprivileged keepalive slots per uid.
     */
    public static final int config_allowedUnprivilegedKeepalivePerUid=0x7f040000;
    /**
     * Whether the device should automatically switch away from Wi-Fi networks that lose
     * Internet access. Actual device behaviour is controlled by
     * Settings.Global.NETWORK_AVOID_BAD_WIFI. This is the default value of that setting.
     * Whether the device should automatically switch away from Wi-Fi networks that lose
     * Internet access. Actual device behaviour is controlled by
     * Settings.Global.NETWORK_AVOID_BAD_WIFI. This is the default value of that setting.
     * Whether the device should automatically switch away from Wi-Fi networks that lose
     * Internet access. Actual device behaviour is controlled by
     * Settings.Global.NETWORK_AVOID_BAD_WIFI. This is the default value of that setting.
     * Whether the device should automatically switch away from Wi-Fi networks that lose
     * Internet access. Actual device behaviour is controlled by
     * Settings.Global.NETWORK_AVOID_BAD_WIFI. This is the default value of that setting.
     */
    public static final int config_networkAvoidBadWifi=0x7f040001;
    /**
     * Default value for ConnectivityManager.getMultipathPreference() on metered networks. Actual
     * device behaviour is controlled by the metered multipath preference in
     * ConnectivitySettingsManager. This is the default value of that setting.
     */
    public static final int config_networkMeteredMultipathPreference=0x7f040002;
    /**
     * Whether/how to notify the user on network switches. See LingerMonitor.java.
     */
    public static final int config_networkNotifySwitchType=0x7f040003;
    /**
     * The maximum duration (in milliseconds) we expect a network transition to take
     */
    public static final int config_networkTransitionTimeout=0x7f040004;
    /**
     * If the hardware supports specially marking packets that caused a wakeup of the
     * main CPU, set this value to the mark used.
     */
    public static final int config_networkWakeupPacketMark=0x7f040005;
    /**
     * Mask to use when checking skb mark defined in config_networkWakeupPacketMark above.
     */
    public static final int config_networkWakeupPacketMask=0x7f040006;
    /**
     * Reserved privileged keepalive slots per transport.
     */
    public static final int config_reservedPrivilegedKeepaliveSlots=0x7f040007;
  }
  public static final class string {
    /**
     * suppress CheckTagEmptyBody
     */
    public static final int config_networkCaptivePortalServerUrl=0x7f050000;
    /**
     * The System Connectivity Resources package is an internal system package that provides
     * configuration values for system networking that were pre-configured in the device. This
     * is the name of the package to display in the list of system apps. [CHAR LIMIT=40]
     */
    public static final int connectivityResourcesAppLabel=0x7f050001;
    /**
     * A notification is shown when the user connects to a mobile network without internet access. This is the notification's title.
     */
    public static final int mobile_no_internet=0x7f050002;
    /**
     * A notification is shown when a captive portal network is detected.  This is the notification's title.
     */
    public static final int network_available_sign_in=0x7f050003;
    /**
     * A notification is shown when a captive portal network is detected.  This is the notification's message.
     */
    public static final int network_available_sign_in_detailed=0x7f050004;
    /**
     * A notification is shown when the user connects to a network that doesn't have access to some services (e.g. Push notifications may not work). This is the notification's title. [CHAR LIMIT=50]
     */
    public static final int network_partial_connectivity=0x7f050005;
    /**
     * A notification is shown when the user connects to a network that doesn't have access to some services (e.g. Push notifications may not work). This is the notification's message. [CHAR LIMIT=50]
     */
    public static final int network_partial_connectivity_detailed=0x7f050006;
    /**
     * A notification might be shown if the device switches to another network type (e.g., mobile data) because it detects that the network it was using (e.g., Wi-Fi) has lost Internet connectivity. This is the notification's title. %1$s is the network type that the device switched to, e.g., cellular data. It is one of the strings in the network_switch_type_name array.
     */
    public static final int network_switch_metered=0x7f050007;
    /**
     * A notification might be shown if the device switches to another network type (e.g., mobile data) because it detects that the network it was using (e.g., Wi-Fi) has lost Internet connectivity. This is the notification's message. %1$s is the network that the device switched to, e.g., cellular data. %2$s is the network type the device switched from, e.g., Wi-Fi. Both are strings in the network_switch_type_name array.
     */
    public static final int network_switch_metered_detail=0x7f050008;
    /**
     * A toast might be shown if the device switches to another network type (e.g., mobile data) because it detects that the network it was using (e.g., Wi-Fi) has lost Internet connectivity. This is the text of the toast. %1$s is the network that the device switched from, e.g., Wi-Fi. %2$s is the network type the device switched from, e.g., cellular data. Both are strings in the network_switch_type_name array.
     */
    public static final int network_switch_metered_toast=0x7f050009;
    /**
     * Network type name displayed if one of the types is not found in network_switch_type_name.
     */
    public static final int network_switch_type_name_unknown=0x7f05000a;
    /**
     * A notification is shown when the user connects to a non-mobile and non-wifi network without internet access. This is the notification's title.
     */
    public static final int other_networks_no_internet=0x7f05000b;
    /**
     * A notification is shown when connected network without internet due to private dns validation failed. This is the notification's message. [CHAR LIMIT=NONE]
     */
    public static final int private_dns_broken_detailed=0x7f05000c;
    /**
     * A notification is shown when a wifi captive portal network is detected.  This is the notification's title.
     */
    public static final int wifi_available_sign_in=0x7f05000d;
    /**
     * A notification is shown when the user connects to a Wi-Fi network and the system detects that that network has no Internet access. This is the notification's title.
     */
    public static final int wifi_no_internet=0x7f05000e;
    /**
     * A notification is shown when the user connects to a Wi-Fi network and the system detects that that network has no Internet access. This is the notification's message.
     */
    public static final int wifi_no_internet_detailed=0x7f05000f;
  }
}