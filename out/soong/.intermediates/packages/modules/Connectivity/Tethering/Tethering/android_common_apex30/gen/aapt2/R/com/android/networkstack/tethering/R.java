/* AUTO-GENERATED FILE. DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found. It
 * should not be modified by hand.
 */

package com.android.networkstack.tethering;

public final class R {
  public static final class array {
    /**
     * The first element is the package name and the second element is the class name
     * of the provisioning app
     */
    public static final int config_mobile_hotspot_provision_app=0x7f010000;
    /**
     * List of regexpressions describing the interface (if any) that represent tetherable
     * bluetooth interfaces.  If the device doesn't want to support tethering over bluetooth this
     * should be empty.
     */
    public static final int config_tether_bluetooth_regexs=0x7f010001;
    /**
     * Dhcp range (min, max) to use for tethering purposes
     */
    public static final int config_tether_dhcp_range=0x7f010002;
    /**
     * List of regexpressions describing the interface (if any) that represent tetherable
     * NCM interfaces.  If the device doesn't want to support tethering over NCM this should
     * be empty.
     */
    public static final int config_tether_ncm_regexs=0x7f010003;
    /**
     * Array of ConnectivityManager.TYPE_{BLUETOOTH, ETHERNET, MOBILE, MOBILE_DUN, MOBILE_HIPRI,
     * WIFI} values allowable for tethering.
     * Common options are [1, 4] for TYPE_WIFI and TYPE_MOBILE_DUN or
     * [1,7,0] for TYPE_WIFI, TYPE_BLUETOOTH, and TYPE_MOBILE.
     * This list is also modified by code within the framework, including:
     * - TYPE_ETHERNET (9) is prepended to this list, and
     * - the return value of TelephonyManager.isTetheringApnRequired()
     * determines how the array is further modified:
     * * TRUE (DUN REQUIRED).
     * TYPE_MOBILE is removed (if present).
     * TYPE_MOBILE_HIPRI is removed (if present).
     * TYPE_MOBILE_DUN is appended (if not already present).
     * * FALSE (DUN NOT REQUIRED).
     * TYPE_MOBILE_DUN is removed (if present).
     * If both of TYPE_MOBILE{,_HIPRI} are not present:
     * TYPE_MOBILE is appended.
     * TYPE_MOBILE_HIPRI is appended.
     * For other changes applied to this list, now and in the future, see
     * com.android.networkstack.tethering.TetheringConfiguration.
     * Note also: the order of this is important. The first upstream type
     * for which a satisfying network exists is used.
     */
    public static final int config_tether_upstream_types=0x7f010004;
    /**
     * List of regexpressions describing the interface (if any) that represent tetherable
     * USB interfaces.  If the device doesn't want to support tethering over USB this should
     * be empty.  An example would be "usb.*"
     */
    public static final int config_tether_usb_regexs=0x7f010005;
    /**
     * List of regexpressions describing the interface (if any) that represent tetherable
     * Wifi P2P interfaces.  If the device doesn't want to support tethering over Wifi P2p this
     * should be empty.  An example would be "p2p-p2p\\d-.*"
     */
    public static final int config_tether_wifi_p2p_regexs=0x7f010006;
    /**
     * List of regexpressions describing the interface (if any) that represent tetherable
     * Wifi interfaces.  If the device doesn't want to support tethering over Wifi this
     * should be empty.  An example would be "softap.*"
     */
    public static final int config_tether_wifi_regexs=0x7f010007;
    /**
     * List of regexpressions describing the interface (if any) that represent tetherable
     * WiGig interfaces.  If the device doesn't want to support tethering over WiGig this
     * should be empty.  An example would be "wigig\\d"
     */
    public static final int config_tether_wigig_regexs=0x7f010008;
  }
  public static final class bool {
    /**
     * Use the BPF offload for tethering when the kernel has support. True by default.
     * If the device doesn't want to support tether BPF offload, this should be false.
     * Note that this setting could be overridden by device config.
     */
    public static final int config_tether_enable_bpf_offload=0x7f020000;
    /**
     * Use the old dnsmasq DHCP server for tethering instead of the framework implementation.
     */
    public static final int config_tether_enable_legacy_dhcp_server=0x7f020001;
    /**
     * Use legacy wifi p2p dedicated address instead of randomize address.
     */
    public static final int config_tether_enable_legacy_wifi_p2p_dedicated_ip=0x7f020002;
    /**
     * When true, the tethering upstream network follows the current default
     * Internet network (except when the current default network is mobile,
     * in which case a DUN network will be used if required).
     * When true, overrides the config_tether_upstream_types setting above.
     */
    public static final int config_tether_upstream_automatic=0x7f020003;
    /**
     * Config for showing upstream roaming notification.
     * Config for showing upstream roaming notification.
     * Config for showing upstream roaming notification.
     */
    public static final int config_upstream_roaming_notification=0x7f020004;
  }
  public static final class drawable {
    public static final int stat_sys_tether_bluetooth=0x7f030000;
    public static final int stat_sys_tether_general=0x7f030001;
    public static final int stat_sys_tether_usb=0x7f030002;
  }
  public static final class integer {
    /**
     * Number of hours between each background provisioning call
     */
    public static final int config_mobile_hotspot_provision_check_period=0x7f040000;
    /**
     * Used to config periodic polls tether offload stats from tethering offload HAL to make the
     * data warnings work. 5000(ms) by default. If the device doesn't want to poll tether
     * offload stats, this should be -1. Note that this setting could be override by
     * runtime resource overlays.
     */
    public static final int config_tether_offload_poll_interval=0x7f040001;
    /**
     * Which USB function should be enabled when TETHERING_USB is requested. 0: RNDIS, 1: NCM.
     */
    public static final int config_tether_usb_functions=0x7f040002;
    /**
     * Delay(millisecond) to show no upstream notification after there's no Backhaul. Set delay to
     * "-1" for disable this feature.
     * Delay(millisecond) to show no upstream notification after there's no Backhaul. Set delay to
     * "0" for disable this feature.
     * Delay(millisecond) to show no upstream notification after there's no Backhaul. Set delay to
     * "0" for disable this feature.
     */
    public static final int delay_to_show_no_upstream_after_no_backhaul=0x7f040003;
  }
  public static final class string {
    /**
     * If the mobile hotspot feature requires provisioning, an action can be provided
     * that will be broadcast in non-ui cases for checking the provisioning status.
     * EntitlementManager will pass the specified name to Settings and Settings would
     * launch provisioning app by sending an intent with the package name.
     * A second broadcast, action defined by config_mobile_hotspot_provision_response,
     * will be sent back to notify if provisioning succeeded or not.  The response will
     * match that of the activity in config_mobile_hotspot_provision_app, but instead
     * contained within the int extra "EntitlementResult".
     * TODO: provide the system api for "EntitlementResult" extra and note it here.
     * See EntitlementManager#runSilentTetherProvisioning and
     * packages/apps/Settings/src/com/android/settings/wifi/tether/TetherService.java for more
     * details.
     */
    public static final int config_mobile_hotspot_provision_app_no_ui=0x7f050000;
    /**
     * Sent in response to a provisioning check. The caller must hold the
     * permission android.permission.TETHER_PRIVILEGED for Settings to
     * receive this response.
     * See config_mobile_hotspot_provision_response
     */
    public static final int config_mobile_hotspot_provision_response=0x7f050001;
    /**
     * ComponentName of the service used to run no ui tether provisioning.
     */
    public static final int config_wifi_tether_enable=0x7f050002;
    /**
     * String for tether disabling notification message [CHAR LIMIT=200]
     */
    public static final int disable_tether_notification_message=0x7f050003;
    /**
     * String for tether disabling notification title [CHAR LIMIT=200]
     */
    public static final int disable_tether_notification_title=0x7f050004;
    /**
     * String for no upstream notification disable button [CHAR LIMIT=200]
     * String for no upstream notification disable button [CHAR LIMIT=200]
     * String for no upstream notification disable button [CHAR LIMIT=200]
     */
    public static final int no_upstream_notification_disable_button=0x7f050005;
    /**
     * String for no upstream notification message [CHAR LIMIT=200]
     * String for no upstream notification title [CHAR LIMIT=200]
     * String for no upstream notification title [CHAR LIMIT=200]
     */
    public static final int no_upstream_notification_message=0x7f050006;
    /**
     * String for no upstream notification title [CHAR LIMIT=200]
     * String for no upstream notification title [CHAR LIMIT=200]
     * String for no upstream notification title [CHAR LIMIT=200]
     */
    public static final int no_upstream_notification_title=0x7f050007;
    /**
     * String for tether notification channel name [CHAR LIMIT=200]
     */
    public static final int notification_channel_tethering_status=0x7f050008;
    /**
     * String for tethered notification message [CHAR LIMIT=200]
     */
    public static final int tethered_notification_message=0x7f050009;
    /**
     * String for tethered notification title [CHAR LIMIT=200]
     */
    public static final int tethered_notification_title=0x7f05000a;
    public static final int upstream_roaming_notification_continue_button=0x7f05000b;
    /**
     * String for cellular roaming notification message [CHAR LIMIT=500]
     * String for cellular roaming notification message [CHAR LIMIT=500]
     * String for cellular roaming notification message [CHAR LIMIT=500]
     */
    public static final int upstream_roaming_notification_message=0x7f05000c;
    /**
     * String for cellular roaming notification title [CHAR LIMIT=200]
     * String for cellular roaming notification title [CHAR LIMIT=200]
     * String for cellular roaming notification title [CHAR LIMIT=200]
     */
    public static final int upstream_roaming_notification_title=0x7f05000d;
  }
}