# compiler: R8
# compiler_version: 3.0.41-sc04
# min_api: 30
# pg_map_id: 45c3e40
# common_typos_disable
android.hardware.tetheroffload.config.V1_0.IOffloadConfig -> android.hardware.tetheroffload.config.V1_0.IOffloadConfig:
    21:31:android.hardware.tetheroffload.config.V1_0.IOffloadConfig asInterface(android.os.IHwBinder) -> asInterface
    60:60:android.hardware.tetheroffload.config.V1_0.IOffloadConfig getService(java.lang.String,boolean) -> getService
    67:67:android.hardware.tetheroffload.config.V1_0.IOffloadConfig getService(boolean) -> getService
android.hardware.tetheroffload.config.V1_0.IOffloadConfig$Proxy -> android.hardware.tetheroffload.config.V1_0.IOffloadConfig$Proxy:
    223:224:void <init>(android.os.IHwBinder) -> <init>
    229:229:android.os.IHwBinder asBinder() -> asBinder
    244:244:boolean equals(java.lang.Object) -> equals
    249:249:int hashCode() -> hashCode
    279:292:java.util.ArrayList interfaceChain() -> interfaceChain
    316:329:java.lang.String interfaceDescriptor() -> interfaceDescriptor
    256:272:void setHandles(android.os.NativeHandle,android.os.NativeHandle,android.hardware.tetheroffload.config.V1_0.IOffloadConfig$setHandlesCallback) -> setHandles
    235:235:java.lang.String toString() -> toString
android.hardware.tetheroffload.control.V1_0.IOffloadControl -> android.hardware.tetheroffload.control.V1_0.IOffloadControl:
    21:31:android.hardware.tetheroffload.control.V1_0.IOffloadControl asInterface(android.os.IHwBinder) -> asInterface
    60:60:android.hardware.tetheroffload.control.V1_0.IOffloadControl getService(java.lang.String,boolean) -> getService
    67:67:android.hardware.tetheroffload.control.V1_0.IOffloadControl getService(boolean) -> getService
android.hardware.tetheroffload.control.V1_0.IOffloadControl$Proxy -> android.hardware.tetheroffload.control.V1_0.IOffloadControl$Proxy:
    444:445:void <init>(android.os.IHwBinder) -> <init>
    606:622:void addDownstream(java.lang.String,java.lang.String,android.hardware.tetheroffload.control.V1_0.IOffloadControl$addDownstreamCallback) -> addDownstream
    450:450:android.os.IHwBinder asBinder() -> asBinder
    465:465:boolean equals(java.lang.Object) -> equals
    539:554:void getForwardedStats(java.lang.String,android.hardware.tetheroffload.control.V1_0.IOffloadControl$getForwardedStatsCallback) -> getForwardedStats
    470:470:int hashCode() -> hashCode
    477:492:void initOffload(android.hardware.tetheroffload.control.V1_0.ITetheringOffloadCallback,android.hardware.tetheroffload.control.V1_0.IOffloadControl$initOffloadCallback) -> initOffload
    651:664:java.util.ArrayList interfaceChain() -> interfaceChain
    688:701:java.lang.String interfaceDescriptor() -> interfaceDescriptor
    628:644:void removeDownstream(java.lang.String,java.lang.String,android.hardware.tetheroffload.control.V1_0.IOffloadControl$removeDownstreamCallback) -> removeDownstream
    560:576:void setDataLimit(java.lang.String,long,android.hardware.tetheroffload.control.V1_0.IOffloadControl$setDataLimitCallback) -> setDataLimit
    518:533:void setLocalPrefixes(java.util.ArrayList,android.hardware.tetheroffload.control.V1_0.IOffloadControl$setLocalPrefixesCallback) -> setLocalPrefixes
    582:600:void setUpstreamParameters(java.lang.String,java.lang.String,java.lang.String,java.util.ArrayList,android.hardware.tetheroffload.control.V1_0.IOffloadControl$setUpstreamParametersCallback) -> setUpstreamParameters
    498:512:void stopOffload(android.hardware.tetheroffload.control.V1_0.IOffloadControl$stopOffloadCallback) -> stopOffload
    456:456:java.lang.String toString() -> toString
android.hardware.tetheroffload.control.V1_0.IPv4AddrPortPair -> android.hardware.tetheroffload.control.V1_0.IPv4AddrPortPair:
    4:9:void <init>() -> <init>
    19:26:boolean equals(java.lang.Object) -> equals
    34:36:int hashCode() -> hashCode
    79:86:void readEmbeddedFromParcel(android.os.HwParcel,android.os.HwBlob,long) -> readEmbeddedFromParcel
    41:48:java.lang.String toString() -> toString
android.hardware.tetheroffload.control.V1_0.NatTimeoutUpdate -> android.hardware.tetheroffload.control.V1_0.NatTimeoutUpdate:
    4:7:void <init>() -> <init>
    17:27:boolean equals(java.lang.Object) -> equals
    35:38:int hashCode() -> hashCode
    83:85:void readEmbeddedFromParcel(android.os.HwParcel,android.os.HwBlob,long) -> readEmbeddedFromParcel
    56:57:void readFromParcel(android.os.HwParcel) -> readFromParcel
    43:52:java.lang.String toString() -> toString
android.hardware.tetheroffload.control.V1_0.NetworkProtocol -> android.hardware.tetheroffload.control.V1_0.NetworkProtocol:
    14:14:java.lang.String toString(int) -> toString
android.hardware.tetheroffload.control.V1_1.IOffloadControl -> android.hardware.tetheroffload.control.V1_1.IOffloadControl:
    22:32:android.hardware.tetheroffload.control.V1_1.IOffloadControl asInterface(android.os.IHwBinder) -> asInterface
    61:61:android.hardware.tetheroffload.control.V1_1.IOffloadControl getService(java.lang.String,boolean) -> getService
    68:68:android.hardware.tetheroffload.control.V1_1.IOffloadControl getService(boolean) -> getService
android.hardware.tetheroffload.control.V1_1.IOffloadControl$Proxy -> android.hardware.tetheroffload.control.V1_1.IOffloadControl$Proxy:
    265:266:void <init>(android.os.IHwBinder) -> <init>
    427:443:void addDownstream(java.lang.String,java.lang.String,android.hardware.tetheroffload.control.V1_0.IOffloadControl$addDownstreamCallback) -> addDownstream
    271:271:android.os.IHwBinder asBinder() -> asBinder
    286:286:boolean equals(java.lang.Object) -> equals
    360:375:void getForwardedStats(java.lang.String,android.hardware.tetheroffload.control.V1_0.IOffloadControl$getForwardedStatsCallback) -> getForwardedStats
    291:291:int hashCode() -> hashCode
    298:313:void initOffload(android.hardware.tetheroffload.control.V1_0.ITetheringOffloadCallback,android.hardware.tetheroffload.control.V1_0.IOffloadControl$initOffloadCallback) -> initOffload
    496:509:java.util.ArrayList interfaceChain() -> interfaceChain
    533:546:java.lang.String interfaceDescriptor() -> interfaceDescriptor
    449:465:void removeDownstream(java.lang.String,java.lang.String,android.hardware.tetheroffload.control.V1_0.IOffloadControl$removeDownstreamCallback) -> removeDownstream
    381:397:void setDataLimit(java.lang.String,long,android.hardware.tetheroffload.control.V1_0.IOffloadControl$setDataLimitCallback) -> setDataLimit
    472:489:void setDataWarningAndLimit(java.lang.String,long,long,android.hardware.tetheroffload.control.V1_1.IOffloadControl$setDataWarningAndLimitCallback) -> setDataWarningAndLimit
    339:354:void setLocalPrefixes(java.util.ArrayList,android.hardware.tetheroffload.control.V1_0.IOffloadControl$setLocalPrefixesCallback) -> setLocalPrefixes
    403:421:void setUpstreamParameters(java.lang.String,java.lang.String,java.lang.String,java.util.ArrayList,android.hardware.tetheroffload.control.V1_0.IOffloadControl$setUpstreamParametersCallback) -> setUpstreamParameters
    319:333:void stopOffload(android.hardware.tetheroffload.control.V1_0.IOffloadControl$stopOffloadCallback) -> stopOffload
    277:277:java.lang.String toString() -> toString
android.hardware.tetheroffload.control.V1_1.ITetheringOffloadCallback$Stub -> android.hardware.tetheroffload.control.V1_1.ITetheringOffloadCallback$Stub:
    465:465:void <init>() -> <init>
    520:523:android.hidl.base.V1_0.DebugInfo getDebugInfo() -> getDebugInfo
    494:494:java.util.ArrayList getHashChain() -> getHashChain
    473:473:java.util.ArrayList interfaceChain() -> interfaceChain
    530:530:void notifySyspropsChanged() -> notifySyspropsChanged
    563:695:void onTransact(int,android.os.HwParcel,android.os.HwParcel,int) -> onTransact
    542:542:android.os.IHwInterface queryLocalInterface(java.lang.String) -> queryLocalInterface
    554:554:java.lang.String toString() -> toString
android.hidl.base.V1_0.DebugInfo -> android.hidl.base.V1_0.DebugInfo:
    4:44:void <init>() -> <init>
    54:64:boolean equals(java.lang.Object) -> equals
    72:75:int hashCode() -> hashCode
    80:89:java.lang.String toString() -> toString
    150:152:void writeEmbeddedToBlob(android.os.HwBlob,long) -> writeEmbeddedToBlob
    126:128:void writeToParcel(android.os.HwParcel) -> writeToParcel
android.hidl.base.V1_0.DebugInfo$Architecture -> android.hidl.base.V1_0.DebugInfo$Architecture:
    19:19:java.lang.String toString(int) -> toString
android.net.DataStallReportParcelable -> android.net.DataStallReportParcelable:
    12:12:void <clinit>() -> <clinit>
    5:11:void <init>() -> <init>
    40:59:void readFromParcel(android.os.Parcel) -> readFromParcel
    63:69:java.lang.String toString() -> toString
    26:36:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.DataStallReportParcelable$1 -> android.net.DataStallReportParcelable$1:
    12:12:void <init>() -> <init>
    12:12:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    15:16:android.net.DataStallReportParcelable createFromParcel(android.os.Parcel) -> createFromParcel
    12:12:java.lang.Object[] newArray(int) -> newArray
    21:21:android.net.DataStallReportParcelable[] newArray(int) -> newArray
android.net.DhcpResultsParcelable -> android.net.DhcpResultsParcelable:
    14:14:void <clinit>() -> <clinit>
    5:9:void <init>() -> <init>
    95:95:int describeContents() -> describeContents
    100:101:int describeContents(java.lang.Object) -> describeContents
    50:78:void readFromParcel(android.os.Parcel) -> readFromParcel
    82:90:java.lang.String toString() -> toString
    28:46:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.DhcpResultsParcelable$1 -> android.net.DhcpResultsParcelable$1:
    14:14:void <init>() -> <init>
    14:14:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    17:18:android.net.DhcpResultsParcelable createFromParcel(android.os.Parcel) -> createFromParcel
    14:14:java.lang.Object[] newArray(int) -> newArray
    23:23:android.net.DhcpResultsParcelable[] newArray(int) -> newArray
android.net.INetd$Stub -> android.net.INetd$Stub:
    4645:4645:void <clinit>() -> <clinit>
    397:401:android.net.INetd asInterface(android.os.IBinder) -> asInterface
    4769:4769:android.net.INetd getDefaultImpl() -> getDefaultImpl
android.net.INetd$Stub$Proxy -> android.net.INetd$Stub$Proxy:
    1755:1759:void <init>(android.os.IBinder) -> <init>
    1762:1762:android.os.IBinder asBinder() -> asBinder
    2181:2205:java.lang.String getProcSysNet(int,int,java.lang.String,java.lang.String) -> getProcSysNet
    2129:2151:void interfaceAddAddress(java.lang.String,java.lang.String,int) -> interfaceAddAddress
    2155:2177:void interfaceDelAddress(java.lang.String,java.lang.String,int) -> interfaceDelAddress
    3835:3855:java.lang.String[] interfaceGetList() -> interfaceGetList
    3891:3917:void interfaceSetCfg(android.net.InterfaceConfigurationParcel) -> interfaceSetCfg
    2917:2938:void ipfwdAddInterfaceForward(java.lang.String,java.lang.String) -> ipfwdAddInterfaceForward
    2893:2913:void ipfwdDisableForwarding(java.lang.String) -> ipfwdDisableForwarding
    2869:2889:void ipfwdEnableForwarding(java.lang.String) -> ipfwdEnableForwarding
    2942:2963:void ipfwdRemoveInterfaceForward(java.lang.String,java.lang.String) -> ipfwdRemoveInterfaceForward
    1929:1950:void networkAddInterface(int,java.lang.String) -> networkAddInterface
    3380:3403:void networkAddRoute(int,java.lang.String,java.lang.String,java.lang.String) -> networkAddRoute
    1954:1975:void networkRemoveInterface(int,java.lang.String) -> networkRemoveInterface
    3407:3430:void networkRemoveRoute(int,java.lang.String,java.lang.String,java.lang.String) -> networkRemoveRoute
    4095:4115:void registerUnsolicitedEventListener(android.net.INetdUnsolicitedEventListener) -> registerUnsolicitedEventListener
    4020:4041:void tetherAddForward(java.lang.String,java.lang.String) -> tetherAddForward
    2079:2099:boolean tetherApplyDnsInterfaces() -> tetherApplyDnsInterfaces
    3330:3351:void tetherDnsSet(int,java.lang.String[]) -> tetherDnsSet
    3257:3277:void tetherInterfaceAdd(java.lang.String) -> tetherInterfaceAdd
    3281:3301:void tetherInterfaceRemove(java.lang.String) -> tetherInterfaceRemove
    4480:4506:android.net.TetherStatsParcel tetherOffloadGetAndClearStats(int) -> tetherOffloadGetAndClearStats
    4430:4450:android.net.TetherStatsParcel[] tetherOffloadGetStats() -> tetherOffloadGetStats
    4370:4396:void tetherOffloadRuleAdd(android.net.TetherOffloadRuleParcel) -> tetherOffloadRuleAdd
    4400:4426:void tetherOffloadRuleRemove(android.net.TetherOffloadRuleParcel) -> tetherOffloadRuleRemove
    4455:4476:void tetherOffloadSetInterfaceQuota(int,long) -> tetherOffloadSetInterfaceQuota
    4045:4066:void tetherRemoveForward(java.lang.String,java.lang.String) -> tetherRemoveForward
    4216:4242:void tetherStartWithConfiguration(android.net.TetherConfigParcel) -> tetherStartWithConfiguration
    3209:3228:void tetherStop() -> tetherStop
android.net.INetdUnsolicitedEventListener -> android.net.INetdUnsolicitedEventListener:
    591:591:void <clinit>() -> <clinit>
android.net.INetdUnsolicitedEventListener$Stub -> android.net.INetdUnsolicitedEventListener$Stub:
    70:71:void <init>() -> <init>
    94:245:boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
android.net.INetworkStackConnector -> android.net.INetworkStackConnector:
    379:379:void <clinit>() -> <clinit>
android.net.INetworkStackConnector$Stub -> android.net.INetworkStackConnector$Stub:
    64:68:android.net.INetworkStackConnector asInterface(android.os.IBinder) -> asInterface
    376:376:android.net.INetworkStackConnector getDefaultImpl() -> getDefaultImpl
android.net.INetworkStackConnector$Stub$Proxy -> android.net.INetworkStackConnector$Stub$Proxy:
    173:177:void <init>(android.os.IBinder) -> <init>
    180:180:android.os.IBinder asBinder() -> asBinder
    188:213:void makeDhcpServer(java.lang.String,android.net.dhcp.DhcpServingParamsParcel,android.net.dhcp.IDhcpServerCallbacks) -> makeDhcpServer
android.net.INetworkStackStatusCallback -> android.net.INetworkStackStatusCallback:
    207:207:void <clinit>() -> <clinit>
android.net.INetworkStackStatusCallback$Stub -> android.net.INetworkStackStatusCallback$Stub:
    40:41:void <init>() -> <init>
    64:99:boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
android.net.InformationElementParcelable -> android.net.InformationElementParcelable:
    9:9:void <clinit>() -> <clinit>
    5:7:void <init>() -> <init>
    34:47:void readFromParcel(android.os.Parcel) -> readFromParcel
    51:54:java.lang.String toString() -> toString
    23:30:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.InformationElementParcelable$1 -> android.net.InformationElementParcelable$1:
    9:9:void <init>() -> <init>
    9:9:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    12:13:android.net.InformationElementParcelable createFromParcel(android.os.Parcel) -> createFromParcel
    9:9:java.lang.Object[] newArray(int) -> newArray
    18:18:android.net.InformationElementParcelable[] newArray(int) -> newArray
android.net.InitialConfigurationParcelable -> android.net.InitialConfigurationParcelable:
    11:11:void <clinit>() -> <clinit>
    5:5:void <init>() -> <init>
    69:70:int describeContents() -> describeContents
    75:84:int describeContents(java.lang.Object) -> describeContents
    38:55:void readFromParcel(android.os.Parcel) -> readFromParcel
    59:64:java.lang.String toString() -> toString
    25:34:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.InitialConfigurationParcelable$1 -> android.net.InitialConfigurationParcelable$1:
    11:11:void <init>() -> <init>
    11:11:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    14:15:android.net.InitialConfigurationParcelable createFromParcel(android.os.Parcel) -> createFromParcel
    11:11:java.lang.Object[] newArray(int) -> newArray
    20:20:android.net.InitialConfigurationParcelable[] newArray(int) -> newArray
android.net.InterfaceConfigurationParcel -> android.net.InterfaceConfigurationParcel:
    13:13:void <clinit>() -> <clinit>
    6:11:void <init>() -> <init>
    41:60:void readFromParcel(android.os.Parcel) -> readFromParcel
    27:37:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.InterfaceConfigurationParcel$1 -> android.net.InterfaceConfigurationParcel$1:
    13:13:void <init>() -> <init>
    13:13:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    16:17:android.net.InterfaceConfigurationParcel createFromParcel(android.os.Parcel) -> createFromParcel
    13:13:java.lang.Object[] newArray(int) -> newArray
    22:22:android.net.InterfaceConfigurationParcel[] newArray(int) -> newArray
android.net.Layer2InformationParcelable -> android.net.Layer2InformationParcelable:
    10:10:void <clinit>() -> <clinit>
    5:5:void <init>() -> <init>
    75:75:int describeContents() -> describeContents
    80:81:int describeContents(java.lang.Object) -> describeContents
    42:62:void readFromParcel(android.os.Parcel) -> readFromParcel
    66:70:java.lang.String toString() -> toString
    24:38:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.Layer2InformationParcelable$1 -> android.net.Layer2InformationParcelable$1:
    10:10:void <init>() -> <init>
    10:10:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    13:14:android.net.Layer2InformationParcelable createFromParcel(android.os.Parcel) -> createFromParcel
    10:10:java.lang.Object[] newArray(int) -> newArray
    19:19:android.net.Layer2InformationParcelable[] newArray(int) -> newArray
android.net.Layer2PacketParcelable -> android.net.Layer2PacketParcelable:
    9:9:void <clinit>() -> <clinit>
    5:5:void <init>() -> <init>
    70:70:int describeContents() -> describeContents
    75:76:int describeContents(java.lang.Object) -> describeContents
    40:58:void readFromParcel(android.os.Parcel) -> readFromParcel
    62:65:java.lang.String toString() -> toString
    23:36:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.Layer2PacketParcelable$1 -> android.net.Layer2PacketParcelable$1:
    9:9:void <init>() -> <init>
    9:9:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    12:13:android.net.Layer2PacketParcelable createFromParcel(android.os.Parcel) -> createFromParcel
    9:9:java.lang.Object[] newArray(int) -> newArray
    18:18:android.net.Layer2PacketParcelable[] newArray(int) -> newArray
android.net.MarkMaskParcel -> android.net.MarkMaskParcel:
    10:10:void <clinit>() -> <clinit>
    6:9:void <init>() -> <init>
    35:48:void readFromParcel(android.os.Parcel) -> readFromParcel
    24:31:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.MarkMaskParcel$1 -> android.net.MarkMaskParcel$1:
    10:10:void <init>() -> <init>
    10:10:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    13:14:android.net.MarkMaskParcel createFromParcel(android.os.Parcel) -> createFromParcel
    10:10:java.lang.Object[] newArray(int) -> newArray
    19:19:android.net.MarkMaskParcel[] newArray(int) -> newArray
android.net.NativeNetworkConfig -> android.net.NativeNetworkConfig:
    44:44:void <clinit>() -> <clinit>
    69:74:void <init>(int,int,int,boolean,int) -> <init>
    6:6:android.net.NativeNetworkConfig access$000(android.os.Parcel) -> access$000
    125:131:boolean equals(java.lang.Object) -> equals
    137:137:int hashCode() -> hashCode
    78:108:android.net.NativeNetworkConfig internalCreateFromParcel(android.os.Parcel) -> internalCreateFromParcel
    113:119:java.lang.String toString() -> toString
    56:66:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.NativeNetworkConfig$1 -> android.net.NativeNetworkConfig$1:
    44:44:void <init>() -> <init>
    44:44:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    47:47:android.net.NativeNetworkConfig createFromParcel(android.os.Parcel) -> createFromParcel
    44:44:java.lang.Object[] newArray(int) -> newArray
    51:51:android.net.NativeNetworkConfig[] newArray(int) -> newArray
android.net.NativeNetworkConfig$Builder -> android.net.NativeNetworkConfig$Builder:
    13:35:void <init>() -> <init>
    41:41:android.net.NativeNetworkConfig build() -> build
    17:17:android.net.NativeNetworkConfig$Builder setNetId(int) -> setNetId
    22:22:android.net.NativeNetworkConfig$Builder setNetworkType(int) -> setNetworkType
    27:27:android.net.NativeNetworkConfig$Builder setPermission(int) -> setPermission
    32:32:android.net.NativeNetworkConfig$Builder setSecure(boolean) -> setSecure
    37:37:android.net.NativeNetworkConfig$Builder setVpnType(int) -> setVpnType
android.net.NattKeepalivePacketDataParcelable -> android.net.NattKeepalivePacketDataParcelable:
    11:11:void <clinit>() -> <clinit>
    5:10:void <init>() -> <init>
    38:55:void readFromParcel(android.os.Parcel) -> readFromParcel
    59:64:java.lang.String toString() -> toString
    25:34:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.NattKeepalivePacketDataParcelable$1 -> android.net.NattKeepalivePacketDataParcelable$1:
    11:11:void <init>() -> <init>
    11:11:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    14:15:android.net.NattKeepalivePacketDataParcelable createFromParcel(android.os.Parcel) -> createFromParcel
    11:11:java.lang.Object[] newArray(int) -> newArray
    20:20:android.net.NattKeepalivePacketDataParcelable[] newArray(int) -> newArray
android.net.NetworkTestResultParcelable -> android.net.NetworkTestResultParcelable:
    12:12:void <clinit>() -> <clinit>
    5:10:void <init>() -> <init>
    40:59:void readFromParcel(android.os.Parcel) -> readFromParcel
    63:69:java.lang.String toString() -> toString
    26:36:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.NetworkTestResultParcelable$1 -> android.net.NetworkTestResultParcelable$1:
    12:12:void <init>() -> <init>
    12:12:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    15:16:android.net.NetworkTestResultParcelable createFromParcel(android.os.Parcel) -> createFromParcel
    12:12:java.lang.Object[] newArray(int) -> newArray
    21:21:android.net.NetworkTestResultParcelable[] newArray(int) -> newArray
android.net.PrivateDnsConfigParcel -> android.net.PrivateDnsConfigParcel:
    9:9:void <clinit>() -> <clinit>
    5:5:void <init>() -> <init>
    34:47:void readFromParcel(android.os.Parcel) -> readFromParcel
    51:54:java.lang.String toString() -> toString
    23:30:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.PrivateDnsConfigParcel$1 -> android.net.PrivateDnsConfigParcel$1:
    9:9:void <init>() -> <init>
    9:9:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    12:13:android.net.PrivateDnsConfigParcel createFromParcel(android.os.Parcel) -> createFromParcel
    9:9:java.lang.Object[] newArray(int) -> newArray
    18:18:android.net.PrivateDnsConfigParcel[] newArray(int) -> newArray
android.net.ProvisioningConfigurationParcelable -> android.net.ProvisioningConfigurationParcelable:
    23:23:void <clinit>() -> <clinit>
    5:19:void <init>() -> <init>
    195:201:int describeContents() -> describeContents
    206:214:int describeContents(java.lang.Object) -> describeContents
    98:169:void readFromParcel(android.os.Parcel) -> readFromParcel
    173:190:java.lang.String toString() -> toString
    37:94:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.ProvisioningConfigurationParcelable$1 -> android.net.ProvisioningConfigurationParcelable$1:
    23:23:void <init>() -> <init>
    23:23:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    26:27:android.net.ProvisioningConfigurationParcelable createFromParcel(android.os.Parcel) -> createFromParcel
    23:23:java.lang.Object[] newArray(int) -> newArray
    32:32:android.net.ProvisioningConfigurationParcelable[] newArray(int) -> newArray
android.net.RouteInfoParcel -> android.net.RouteInfoParcel:
    11:11:void <clinit>() -> <clinit>
    5:10:void <init>() -> <init>
    38:55:void readFromParcel(android.os.Parcel) -> readFromParcel
    25:34:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.RouteInfoParcel$1 -> android.net.RouteInfoParcel$1:
    11:11:void <init>() -> <init>
    11:11:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    14:15:android.net.RouteInfoParcel createFromParcel(android.os.Parcel) -> createFromParcel
    11:11:java.lang.Object[] newArray(int) -> newArray
    20:20:android.net.RouteInfoParcel[] newArray(int) -> newArray
android.net.ScanResultInfoParcelable -> android.net.ScanResultInfoParcelable:
    10:10:void <clinit>() -> <clinit>
    5:5:void <init>() -> <init>
    64:64:int describeContents() -> describeContents
    69:78:int describeContents(java.lang.Object) -> describeContents
    36:51:void readFromParcel(android.os.Parcel) -> readFromParcel
    55:59:java.lang.String toString() -> toString
    24:32:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.ScanResultInfoParcelable$1 -> android.net.ScanResultInfoParcelable$1:
    10:10:void <init>() -> <init>
    10:10:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    13:14:android.net.ScanResultInfoParcelable createFromParcel(android.os.Parcel) -> createFromParcel
    10:10:java.lang.Object[] newArray(int) -> newArray
    19:19:android.net.ScanResultInfoParcelable[] newArray(int) -> newArray
android.net.TcpKeepalivePacketDataParcelable -> android.net.TcpKeepalivePacketDataParcelable:
    17:17:void <clinit>() -> <clinit>
    5:16:void <init>() -> <init>
    50:79:void readFromParcel(android.os.Parcel) -> readFromParcel
    83:94:java.lang.String toString() -> toString
    31:46:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.TcpKeepalivePacketDataParcelable$1 -> android.net.TcpKeepalivePacketDataParcelable$1:
    17:17:void <init>() -> <init>
    17:17:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    20:21:android.net.TcpKeepalivePacketDataParcelable createFromParcel(android.os.Parcel) -> createFromParcel
    17:17:java.lang.Object[] newArray(int) -> newArray
    26:26:android.net.TcpKeepalivePacketDataParcelable[] newArray(int) -> newArray
android.net.TetherConfigParcel -> android.net.TetherConfigParcel:
    10:10:void <clinit>() -> <clinit>
    6:8:void <init>() -> <init>
    35:48:void readFromParcel(android.os.Parcel) -> readFromParcel
    24:31:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.TetherConfigParcel$1 -> android.net.TetherConfigParcel$1:
    10:10:void <init>() -> <init>
    10:10:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    13:14:android.net.TetherConfigParcel createFromParcel(android.os.Parcel) -> createFromParcel
    10:10:java.lang.Object[] newArray(int) -> newArray
    19:19:android.net.TetherConfigParcel[] newArray(int) -> newArray
android.net.TetherOffloadRuleParcel -> android.net.TetherOffloadRuleParcel:
    15:15:void <clinit>() -> <clinit>
    6:14:void <init>() -> <init>
    45:68:void readFromParcel(android.os.Parcel) -> readFromParcel
    29:41:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.TetherOffloadRuleParcel$1 -> android.net.TetherOffloadRuleParcel$1:
    15:15:void <init>() -> <init>
    15:15:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    18:19:android.net.TetherOffloadRuleParcel createFromParcel(android.os.Parcel) -> createFromParcel
    15:15:java.lang.Object[] newArray(int) -> newArray
    24:24:android.net.TetherOffloadRuleParcel[] newArray(int) -> newArray
android.net.TetherStatsParcel -> android.net.TetherStatsParcel:
    14:14:void <clinit>() -> <clinit>
    6:13:void <init>() -> <init>
    43:64:void readFromParcel(android.os.Parcel) -> readFromParcel
    28:39:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.TetherStatsParcel$1 -> android.net.TetherStatsParcel$1:
    14:14:void <init>() -> <init>
    14:14:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    17:18:android.net.TetherStatsParcel createFromParcel(android.os.Parcel) -> createFromParcel
    14:14:java.lang.Object[] newArray(int) -> newArray
    23:23:android.net.TetherStatsParcel[] newArray(int) -> newArray
android.net.UidRangeParcel -> android.net.UidRangeParcel:
    26:26:void <clinit>() -> <clinit>
    48:50:void <init>(int,int) -> <init>
    6:6:android.net.UidRangeParcel access$000(android.os.Parcel) -> access$000
    86:89:boolean equals(java.lang.Object) -> equals
    95:95:int hashCode() -> hashCode
    54:72:android.net.UidRangeParcel internalCreateFromParcel(android.os.Parcel) -> internalCreateFromParcel
    77:80:java.lang.String toString() -> toString
    38:45:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.UidRangeParcel$1 -> android.net.UidRangeParcel$1:
    26:26:void <init>() -> <init>
    26:26:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    29:29:android.net.UidRangeParcel createFromParcel(android.os.Parcel) -> createFromParcel
    26:26:java.lang.Object[] newArray(int) -> newArray
    33:33:android.net.UidRangeParcel[] newArray(int) -> newArray
android.net.UidRangeParcel$Builder -> android.net.UidRangeParcel$Builder:
    10:17:void <init>() -> <init>
    23:23:android.net.UidRangeParcel build() -> build
    14:14:android.net.UidRangeParcel$Builder setStart(int) -> setStart
    19:19:android.net.UidRangeParcel$Builder setStop(int) -> setStop
android.net.dhcp.DhcpLeaseParcelable -> android.net.dhcp.DhcpLeaseParcelable:
    13:13:void <clinit>() -> <clinit>
    5:11:void <init>() -> <init>
    42:63:void readFromParcel(android.os.Parcel) -> readFromParcel
    67:74:java.lang.String toString() -> toString
    27:38:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.dhcp.DhcpLeaseParcelable$1 -> android.net.dhcp.DhcpLeaseParcelable$1:
    13:13:void <init>() -> <init>
    13:13:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    16:17:android.net.dhcp.DhcpLeaseParcelable createFromParcel(android.os.Parcel) -> createFromParcel
    13:13:java.lang.Object[] newArray(int) -> newArray
    22:22:android.net.dhcp.DhcpLeaseParcelable[] newArray(int) -> newArray
android.net.dhcp.DhcpServerCallbacks -> android.net.dhcp.DhcpServerCallbacks:
    23:23:void <init>() -> <init>
android.net.dhcp.DhcpServingParamsParcel -> android.net.dhcp.DhcpServingParamsParcel:
    17:17:void <clinit>() -> <clinit>
    5:16:void <init>() -> <init>
    50:79:void readFromParcel(android.os.Parcel) -> readFromParcel
    83:94:java.lang.String toString() -> toString
    31:46:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.dhcp.DhcpServingParamsParcel$1 -> android.net.dhcp.DhcpServingParamsParcel$1:
    17:17:void <init>() -> <init>
    17:17:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    20:21:android.net.dhcp.DhcpServingParamsParcel createFromParcel(android.os.Parcel) -> createFromParcel
    17:17:java.lang.Object[] newArray(int) -> newArray
    26:26:android.net.dhcp.DhcpServingParamsParcel[] newArray(int) -> newArray
android.net.dhcp.DhcpServingParamsParcelExt -> android.net.dhcp.DhcpServingParamsParcelExt:
    41:41:void <init>() -> <init>
    199:200:android.util.ArraySet newArraySet(java.net.Inet4Address[]) -> newArraySet
    184:184:android.net.dhcp.DhcpServingParamsParcelExt setChangePrefixOnDecline(boolean) -> setChangePrefixOnDecline
    62:62:android.net.dhcp.DhcpServingParamsParcelExt setDefaultRouters(java.util.Set) -> setDefaultRouters
    73:73:android.net.dhcp.DhcpServingParamsParcelExt setDefaultRouters(java.net.Inet4Address[]) -> setDefaultRouters
    140:140:android.net.dhcp.DhcpServingParamsParcelExt setDhcpLeaseTimeSecs(long) -> setDhcpLeaseTimeSecs
    91:91:android.net.dhcp.DhcpServingParamsParcelExt setDnsServers(java.util.Set) -> setDnsServers
    101:101:android.net.dhcp.DhcpServingParamsParcelExt setDnsServers(java.net.Inet4Address[]) -> setDnsServers
    161:161:android.net.dhcp.DhcpServingParamsParcelExt setMetered(boolean) -> setMetered
    50:51:android.net.dhcp.DhcpServingParamsParcelExt setServerAddr(android.net.LinkAddress) -> setServerAddr
    172:172:android.net.dhcp.DhcpServingParamsParcelExt setSingleClientAddr(java.net.Inet4Address) -> setSingleClientAddr
    189:192:int[] toIntArray(java.util.Collection) -> toIntArray
android.net.dhcp.IDhcpEventCallbacks -> android.net.dhcp.IDhcpEventCallbacks:
    250:250:void <clinit>() -> <clinit>
android.net.dhcp.IDhcpEventCallbacks$Stub -> android.net.dhcp.IDhcpEventCallbacks$Stub:
    42:43:void <init>() -> <init>
    66:114:boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
android.net.dhcp.IDhcpServer -> android.net.dhcp.IDhcpServer:
    323:323:void <clinit>() -> <clinit>
android.net.dhcp.IDhcpServer$Stub -> android.net.dhcp.IDhcpServer$Stub:
    61:65:android.net.dhcp.IDhcpServer asInterface(android.os.IBinder) -> asInterface
    320:320:android.net.dhcp.IDhcpServer getDefaultImpl() -> getDefaultImpl
android.net.dhcp.IDhcpServer$Stub$Proxy -> android.net.dhcp.IDhcpServer$Stub$Proxy:
    149:153:void <init>(android.os.IBinder) -> <init>
    156:156:android.os.IBinder asBinder() -> asBinder
    185:203:void startWithCallbacks(android.net.INetworkStackStatusCallback,android.net.dhcp.IDhcpEventCallbacks) -> startWithCallbacks
    235:252:void stop(android.net.INetworkStackStatusCallback) -> stop
    207:231:void updateParams(android.net.dhcp.DhcpServingParamsParcel,android.net.INetworkStackStatusCallback) -> updateParams
android.net.dhcp.IDhcpServerCallbacks -> android.net.dhcp.IDhcpServerCallbacks:
    210:210:void <clinit>() -> <clinit>
android.net.dhcp.IDhcpServerCallbacks$Stub -> android.net.dhcp.IDhcpServerCallbacks$Stub:
    40:41:void <init>() -> <init>
    64:101:boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
android.net.ip.ConntrackMonitor -> android.net.ip.ConntrackMonitor:
    178:180:void <init>(android.os.Handler,android.net.util.SharedLog,android.net.ip.ConntrackMonitor$ConntrackEventConsumer) -> <init>
    185:196:void processNetlinkMessage(android.net.netlink.NetlinkMessage,long) -> processNetlinkMessage
android.net.ip.ConntrackMonitor$ConntrackEvent -> android.net.ip.ConntrackMonitor$ConntrackEvent:
    79:84:void <init>(android.net.netlink.ConntrackMessage) -> <init>
    89:94:void <init>(short,android.net.netlink.ConntrackMessage$Tuple,android.net.netlink.ConntrackMessage$Tuple,int,int) -> <init>
    100:104:boolean equals(java.lang.Object) -> equals
    111:111:int hashCode() -> hashCode
    153:157:boolean isDyingNatSession(android.net.netlink.ConntrackMessage) -> isDyingNatSession
    136:140:boolean isEstablishedNatSession(android.net.netlink.ConntrackMessage) -> isEstablishedNatSession
    116:125:java.lang.String toString() -> toString
android.net.ip.DadProxy -> android.net.ip.DadProxy:
    36:39:void <init>(android.os.Handler,android.net.util.InterfaceParams) -> <init>
    51:52:void setUpstreamIface(android.net.util.InterfaceParams) -> setUpstreamIface
    45:46:void stop() -> stop
android.net.ip.InterfaceController -> android.net.ip.InterfaceController:
    48:51:void <init>(java.lang.String,android.net.INetd,android.net.util.SharedLog) -> <init>
    174:176:boolean addAddress(java.net.InetAddress,int) -> addAddress
    100:100:boolean clearIPv4Address() -> clearIPv4Address
    209:209:void logError(java.lang.String,java.lang.Object[]) -> logError
    187:189:boolean removeAddress(java.net.InetAddress,int) -> removeAddress
    93:93:boolean setIPv4Address(android.net.LinkAddress) -> setIPv4Address
    59:83:boolean setInterfaceConfiguration(android.net.LinkAddress,java.lang.Boolean) -> setInterfaceConfiguration
android.net.ip.IpNeighborMonitor -> android.net.ip.IpNeighborMonitor:
    126:127:void <init>(android.os.Handler,android.net.util.SharedLog,android.net.ip.IpNeighborMonitor$NeighborEventConsumer) -> <init>
    169:171:android.net.MacAddress getMacAddress(byte[]) -> getMacAddress
    132:163:void processNetlinkMessage(android.net.netlink.NetlinkMessage,long) -> processNetlinkMessage
android.net.ip.IpNeighborMonitor$$ExternalSyntheticLambda0 -> android.net.ip.IpNeighborMonitor$$ExternalSyntheticLambda0:
    android.net.ip.IpNeighborMonitor$$InternalSyntheticLambda$1$6081435deb3f0b442174f7dda5fb860d26413d52c795baa6d8258605c395fb87$0 android.net.ip.IpNeighborMonitor$$InternalSyntheticLambda$1$6081435deb3f0b442174f7dda5fb860d26413d52c795baa6d8258605c395fb87$0.INSTANCE -> INSTANCE
    void android.net.ip.IpNeighborMonitor$$InternalSyntheticLambda$1$6081435deb3f0b442174f7dda5fb860d26413d52c795baa6d8258605c395fb87$0.<clinit>() -> <clinit>
    void android.net.ip.IpNeighborMonitor$$InternalSyntheticLambda$1$6081435deb3f0b442174f7dda5fb860d26413d52c795baa6d8258605c395fb87$0.<init>() -> <init>
    void android.net.ip.IpNeighborMonitor$$InternalSyntheticLambda$1$6081435deb3f0b442174f7dda5fb860d26413d52c795baa6d8258605c395fb87$0.accept(android.net.ip.IpNeighborMonitor$NeighborEvent) -> accept
android.net.ip.IpNeighborMonitor$NeighborEvent -> android.net.ip.IpNeighborMonitor$NeighborEvent:
    87:93:void <init>(long,short,int,java.net.InetAddress,short,android.net.MacAddress) -> <init>
    101:101:boolean isValid() -> isValid
    106:113:java.lang.String toString() -> toString
android.net.ip.IpServer -> android.net.ip.IpServer:
    118:127:void <clinit>() -> <clinit>
    262:330:void <init>(java.lang.String,android.os.Looper,int,android.net.util.SharedLog,android.net.INetd,com.android.networkstack.tethering.BpfCoordinator,android.net.ip.IpServer$Callback,boolean,boolean,com.android.networkstack.tethering.PrivateAddressCoordinator,android.net.ip.IpServer$Dependencies) -> <init>
    93:93:int access$100(android.net.ip.IpServer) -> access$100
    93:93:java.util.List access$1000(android.net.ip.IpServer) -> access$1000
    93:93:java.util.List access$1002(android.net.ip.IpServer,java.util.List) -> access$1002
    93:93:int access$102(android.net.ip.IpServer,int) -> access$102
    93:93:android.net.ip.IpServer$Callback access$1100(android.net.ip.IpServer) -> access$1100
    93:93:void access$1300(android.net.ip.IpServer,int) -> access$1300
    93:93:void access$1400(android.net.ip.IpServer,com.android.networkstack.tethering.util.State,int) -> access$1400
    93:93:void access$1500(android.net.ip.IpServer,android.net.TetheringRequestParcel) -> access$1500
    93:93:com.android.networkstack.tethering.util.State access$1600(android.net.ip.IpServer) -> access$1600
    93:93:com.android.networkstack.tethering.util.State access$1700(android.net.ip.IpServer) -> access$1700
    93:93:com.android.networkstack.tethering.util.State access$1800(android.net.ip.IpServer) -> access$1800
    93:93:void access$1900(android.net.ip.IpServer,android.net.LinkProperties,int) -> access$1900
    93:93:com.android.networkstack.tethering.util.State access$200(android.net.ip.IpServer) -> access$200
    93:93:void access$2000(android.net.ip.IpServer) -> access$2000
    93:93:boolean access$2100(android.net.ip.IpServer) -> access$2100
    93:93:android.net.INetd access$2200(android.net.ip.IpServer) -> access$2200
    93:93:java.lang.String access$2300(android.net.ip.IpServer) -> access$2300
    93:93:android.net.LinkAddress access$2400(android.net.ip.IpServer) -> access$2400
    93:93:boolean access$2500(android.net.ip.IpServer) -> access$2500
    93:93:void access$2600(android.net.ip.IpServer) -> access$2600
    93:93:void access$2700(android.net.ip.IpServer) -> access$2700
    93:93:void access$2800(android.net.ip.IpServer) -> access$2800
    93:93:void access$2900(android.net.ip.IpServer) -> access$2900
    93:93:int access$300(android.net.ip.IpServer) -> access$300
    93:93:void access$3000(android.net.ip.IpServer) -> access$3000
    93:93:void access$3100(android.net.ip.IpServer,android.net.IpPrefix) -> access$3100
    93:93:com.android.networkstack.tethering.util.State access$3200(android.net.ip.IpServer) -> access$3200
    93:93:android.net.util.InterfaceSet access$3300(android.net.ip.IpServer) -> access$3300
    93:93:android.net.util.InterfaceSet access$3302(android.net.ip.IpServer,android.net.util.InterfaceSet) -> access$3302
    93:93:void access$3400(android.net.ip.IpServer) -> access$3400
    93:93:com.android.networkstack.tethering.BpfCoordinator access$3500(android.net.ip.IpServer) -> access$3500
    93:93:android.net.ip.IpServer$Dependencies access$3600(android.net.ip.IpServer) -> access$3600
    93:93:void access$3700(android.net.ip.IpServer,android.net.ip.IpNeighborMonitor$NeighborEvent) -> access$3700
    93:93:android.net.ip.IpNeighborMonitor access$3800(android.net.ip.IpServer) -> access$3800
    93:93:android.net.util.SharedLog access$400(android.net.ip.IpServer) -> access$400
    93:93:android.net.dhcp.IDhcpServer access$500(android.net.ip.IpServer) -> access$500
    93:93:android.net.dhcp.IDhcpServer access$502(android.net.ip.IpServer,android.net.dhcp.IDhcpServer) -> access$502
    93:93:int access$900(android.net.ip.IpServer) -> access$900
    872:874:void addIpv6ForwardingRule(com.android.networkstack.tethering.BpfCoordinator$Ipv6ForwardingRule) -> addIpv6ForwardingRule
    786:800:void addRoutesToLocalNetwork(java.util.List) -> addRoutesToLocalNetwork
    886:888:void clearIpv6ForwardingRules() -> clearIpv6ForwardingRules
    587:589:boolean configureDhcp(boolean,android.net.LinkAddress,android.net.LinkAddress) -> configureDhcp
    610:652:boolean configureIPv4(boolean) -> configureIPv4
    826:864:void configureLocalIPv6Dns(java.util.HashSet,java.util.HashSet) -> configureLocalIPv6Dns
    806:818:void configureLocalIPv6Routes(java.util.HashSet,java.util.HashSet) -> configureLocalIPv6Routes
    362:362:android.net.LinkAddress getAddress() -> getAddress
    370:370:java.util.List getAllLeases() -> getAllLeases
    521:522:android.net.RouteInfo getDirectConnectedRoute(android.net.LinkAddress) -> getDirectConnectedRoute
    1041:1047:byte getHopLimit(java.lang.String,int) -> getHopLimit
    1481:1486:java.net.Inet6Address getLocalDnsIpFor(android.net.IpPrefix) -> getLocalDnsIpFor
    1472:1474:java.util.ArrayList getLocalRoutesFor(java.lang.String,java.util.HashSet) -> getLocalRoutesFor
    1492:1493:byte getRandomSanitizedByte(byte,byte[]) -> getRandomSanitizedByte
    107:107:java.lang.String getStateString(int) -> getStateString
    970:974:void handleNeighborEvent(android.net.ip.IpNeighborMonitor$NeighborEvent) -> handleNeighborEvent
    979:1035:void handleNewPrefixRequest(android.net.IpPrefix) -> handleNewPrefixRequest
    335:335:java.lang.String interfaceName() -> interfaceName
    342:342:int interfaceType() -> interfaceType
    900:902:boolean isIpv6VcnNetworkInterface() -> isIpv6VcnNetworkInterface
    347:347:int lastError() -> lastError
    357:357:android.net.LinkProperties linkProperties() -> linkProperties
    528:537:android.net.dhcp.DhcpServingParamsParcel makeServingParams(java.net.Inet4Address,java.net.Inet4Address,android.net.LinkAddress,java.net.Inet4Address) -> makeServingParams
    1100:1107:void maybeConfigureStaticIp(android.net.TetheringRequestParcel) -> maybeConfigureStaticIp
    1076:1077:void maybeLogMessage(com.android.networkstack.tethering.util.State,int) -> maybeLogMessage
    880:882:void removeIpv6ForwardingRule(com.android.networkstack.tethering.BpfCoordinator$Ipv6ForwardingRule) -> removeIpv6ForwardingRule
    772:779:void removeRoutesFromLocalNetwork(java.util.List) -> removeRoutesFromLocalNetwork
    656:662:android.net.LinkAddress requestIpv4Address(boolean) -> requestIpv4Address
    1092:1093:void resetLinkProperties() -> resetLinkProperties
    1082:1084:void sendInterfaceState(int) -> sendInterfaceState
    1088:1088:void sendLinkProperties() -> sendLinkProperties
    352:352:int servingMode() -> servingMode
    1053:1066:void setRaParams(android.net.ip.RouterAdvertisementDaemon$RaParams) -> setRaParams
    1149:1149:void startConntrackMonitoring() -> startConntrackMonitoring
    542:553:boolean startDhcp(android.net.LinkAddress,android.net.LinkAddress) -> startDhcp
    389:389:boolean startIPv4() -> startIPv4
    666:683:boolean startIPv6() -> startIPv6
    375:375:void stop() -> stop
    1153:1153:void stopConntrackMonitoring() -> stopConntrackMonitoring
    560:578:void stopDhcp() -> stopDhcp
    595:603:void stopIPv4() -> stopIPv4
    690:700:void stopIPv6() -> stopIPv6
    383:383:void unwanted() -> unwanted
    948:965:void updateClientInfoIpv4(android.net.ip.IpNeighborMonitor$NeighborEvent) -> updateClientInfoIpv4
    894:896:void updateIpv6ForwardingRule(int) -> updateIpv6ForwardingRule
    912:940:void updateIpv6ForwardingRules(int,int,android.net.ip.IpNeighborMonitor$NeighborEvent) -> updateIpv6ForwardingRules
    711:767:void updateUpstreamIPv6LinkProperties(android.net.LinkProperties,int) -> updateUpstreamIPv6LinkProperties
android.net.ip.IpServer$1 -> android.net.ip.IpServer$1:
    564:564:void <init>(android.net.ip.IpServer) -> <init>
    568:573:void callback(int) -> callback
android.net.ip.IpServer$1$$ExternalSyntheticLambda0 -> android.net.ip.IpServer$1$$ExternalSyntheticLambda0:
    android.net.ip.IpServer$Callback android.net.ip.IpServer$1$$InternalSyntheticLambda$2$54903ce8cc12cefe972b4dbe8554c4a993d6e3ad135e8e1f76c35bb3e1a7640c$0.f$0 -> f$0
    void android.net.ip.IpServer$1$$InternalSyntheticLambda$2$54903ce8cc12cefe972b4dbe8554c4a993d6e3ad135e8e1f76c35bb3e1a7640c$0.<init>(android.net.ip.IpServer$Callback) -> <init>
    void android.net.ip.IpServer$1$$InternalSyntheticLambda$2$54903ce8cc12cefe972b4dbe8554c4a993d6e3ad135e8e1f76c35bb3e1a7640c$0.run() -> run
android.net.ip.IpServer$2 -> android.net.ip.IpServer$2:
    1026:1026:void <init>(android.net.ip.IpServer) -> <init>
    1030:1030:void callback(int) -> callback
android.net.ip.IpServer$BaseServingState -> android.net.ip.IpServer$BaseServingState:
    1156:1156:void <init>(android.net.ip.IpServer) -> <init>
    1159:1175:void enter() -> enter
    1186:1198:void exit() -> exit
    1203:1230:boolean processMessage(android.os.Message) -> processMessage
android.net.ip.IpServer$Callback -> android.net.ip.IpServer$Callback:
    130:130:void <init>() -> <init>
android.net.ip.IpServer$Dependencies -> android.net.ip.IpServer$Dependencies:
    163:163:void <init>() -> <init>
    170:170:android.net.ip.DadProxy getDadProxy(android.os.Handler,android.net.util.InterfaceParams) -> getDadProxy
    186:186:android.net.util.InterfaceParams getInterfaceParams(java.lang.String) -> getInterfaceParams
    176:176:android.net.ip.IpNeighborMonitor getIpNeighborMonitor(android.os.Handler,android.net.util.SharedLog,android.net.ip.IpNeighborMonitor$NeighborEventConsumer) -> getIpNeighborMonitor
    181:181:android.net.ip.RouterAdvertisementDaemon getRouterAdvertisementDaemon(android.net.util.InterfaceParams) -> getRouterAdvertisementDaemon
android.net.ip.IpServer$DhcpEventCallback -> android.net.ip.IpServer$DhcpEventCallback:
    470:470:void <init>(android.net.ip.IpServer) -> <init>
    470:470:void <init>(android.net.ip.IpServer,android.net.ip.IpServer$1) -> <init>
    498:499:void lambda$onLeasesChanged$0(java.util.ArrayList) -> lambda$onLeasesChanged$0
    473:497:void onLeasesChanged(java.util.List) -> onLeasesChanged
    505:506:void onNewPrefixRequest(android.net.IpPrefix) -> onNewPrefixRequest
android.net.ip.IpServer$DhcpEventCallback$$ExternalSyntheticLambda0 -> android.net.ip.IpServer$DhcpEventCallback$$ExternalSyntheticLambda0:
    java.util.ArrayList android.net.ip.IpServer$DhcpEventCallback$$InternalSyntheticLambda$2$a635f379e195892cb2dd9727782df2c8c7a92f619780e2a065d0ff3f0ec58e03$0.f$1 -> f$1
    android.net.ip.IpServer$DhcpEventCallback android.net.ip.IpServer$DhcpEventCallback$$InternalSyntheticLambda$2$a635f379e195892cb2dd9727782df2c8c7a92f619780e2a065d0ff3f0ec58e03$0.f$0 -> f$0
    void android.net.ip.IpServer$DhcpEventCallback$$InternalSyntheticLambda$2$a635f379e195892cb2dd9727782df2c8c7a92f619780e2a065d0ff3f0ec58e03$0.<init>(android.net.ip.IpServer$DhcpEventCallback,java.util.ArrayList) -> <init>
    void android.net.ip.IpServer$DhcpEventCallback$$InternalSyntheticLambda$2$a635f379e195892cb2dd9727782df2c8c7a92f619780e2a065d0ff3f0ec58e03$0.run() -> run
android.net.ip.IpServer$DhcpServerCallbacksImpl -> android.net.ip.IpServer$DhcpServerCallbacksImpl:
    419:419:void <init>(android.net.ip.IpServer,int,android.net.ip.IpServer$1) -> <init>
    422:423:void <init>(android.net.ip.IpServer,int) -> <init>
    419:419:void access$700(android.net.ip.IpServer$DhcpServerCallbacksImpl) -> access$700
    465:466:void handleError() -> handleError
    430:459:void lambda$onDhcpServerCreated$0(android.net.dhcp.IDhcpServer,int) -> lambda$onDhcpServerCreated$0
    428:428:void onDhcpServerCreated(int,android.net.dhcp.IDhcpServer) -> onDhcpServerCreated
android.net.ip.IpServer$DhcpServerCallbacksImpl$$ExternalSyntheticLambda0 -> android.net.ip.IpServer$DhcpServerCallbacksImpl$$ExternalSyntheticLambda0:
    android.net.dhcp.IDhcpServer android.net.ip.IpServer$DhcpServerCallbacksImpl$$InternalSyntheticLambda$1$c3c2263bf4970454ca5c11a057f36808cfddb20dd1765b928dc3a3a2725dda62$0.f$1 -> f$1
    android.net.ip.IpServer$DhcpServerCallbacksImpl android.net.ip.IpServer$DhcpServerCallbacksImpl$$InternalSyntheticLambda$1$c3c2263bf4970454ca5c11a057f36808cfddb20dd1765b928dc3a3a2725dda62$0.f$0 -> f$0
    int android.net.ip.IpServer$DhcpServerCallbacksImpl$$InternalSyntheticLambda$1$c3c2263bf4970454ca5c11a057f36808cfddb20dd1765b928dc3a3a2725dda62$0.f$2 -> f$2
    void android.net.ip.IpServer$DhcpServerCallbacksImpl$$InternalSyntheticLambda$1$c3c2263bf4970454ca5c11a057f36808cfddb20dd1765b928dc3a3a2725dda62$0.<init>(android.net.ip.IpServer$DhcpServerCallbacksImpl,android.net.dhcp.IDhcpServer,int) -> <init>
    void android.net.ip.IpServer$DhcpServerCallbacksImpl$$InternalSyntheticLambda$1$c3c2263bf4970454ca5c11a057f36808cfddb20dd1765b928dc3a3a2725dda62$0.run() -> run
android.net.ip.IpServer$DhcpServerCallbacksImpl$1 -> android.net.ip.IpServer$DhcpServerCallbacksImpl$1:
    449:449:void <init>(android.net.ip.IpServer$DhcpServerCallbacksImpl) -> <init>
    453:454:void callback(int) -> callback
android.net.ip.IpServer$InitialState -> android.net.ip.IpServer$InitialState:
    1110:1110:void <init>(android.net.ip.IpServer) -> <init>
    1113:1113:void enter() -> enter
    1118:1139:boolean processMessage(android.os.Message) -> processMessage
android.net.ip.IpServer$LocalHotspotState -> android.net.ip.IpServer$LocalHotspotState:
    1244:1244:void <init>(android.net.ip.IpServer) -> <init>
    1247:1253:void enter() -> enter
    1258:1263:boolean processMessage(android.os.Message) -> processMessage
android.net.ip.IpServer$MyNeighborEventConsumer -> android.net.ip.IpServer$MyNeighborEventConsumer:
    274:274:void <init>(android.net.ip.IpServer) -> <init>
    274:274:void <init>(android.net.ip.IpServer,android.net.ip.IpServer$1) -> <init>
    276:276:void accept(android.net.ip.IpNeighborMonitor$NeighborEvent) -> accept
android.net.ip.IpServer$OnHandlerStatusCallback -> android.net.ip.IpServer$OnHandlerStatusCallback:
    400:400:void <init>(android.net.ip.IpServer) -> <init>
    400:400:void <init>(android.net.ip.IpServer,android.net.ip.IpServer$1) -> <init>
    403:403:void lambda$onStatusAvailable$0(int) -> lambda$onStatusAvailable$0
    403:403:void onStatusAvailable(int) -> onStatusAvailable
android.net.ip.IpServer$OnHandlerStatusCallback$$ExternalSyntheticLambda0 -> android.net.ip.IpServer$OnHandlerStatusCallback$$ExternalSyntheticLambda0:
    int android.net.ip.IpServer$OnHandlerStatusCallback$$InternalSyntheticLambda$1$5162865325efb35e9f0defaeac8169f9bd3ccf98cfa7b91d6ee481b9106d0ef3$0.f$1 -> f$1
    android.net.ip.IpServer$OnHandlerStatusCallback android.net.ip.IpServer$OnHandlerStatusCallback$$InternalSyntheticLambda$1$5162865325efb35e9f0defaeac8169f9bd3ccf98cfa7b91d6ee481b9106d0ef3$0.f$0 -> f$0
    void android.net.ip.IpServer$OnHandlerStatusCallback$$InternalSyntheticLambda$1$5162865325efb35e9f0defaeac8169f9bd3ccf98cfa7b91d6ee481b9106d0ef3$0.<init>(android.net.ip.IpServer$OnHandlerStatusCallback,int) -> <init>
    void android.net.ip.IpServer$OnHandlerStatusCallback$$InternalSyntheticLambda$1$5162865325efb35e9f0defaeac8169f9bd3ccf98cfa7b91d6ee481b9106d0ef3$0.run() -> run
android.net.ip.IpServer$TetheredState -> android.net.ip.IpServer$TetheredState:
    1280:1280:void <init>(android.net.ip.IpServer) -> <init>
    1309:1313:void cleanupUpstream() -> cleanupUpstream
    1321:1330:void cleanupUpstreamInterface(java.lang.String) -> cleanupUpstreamInterface
    1283:1289:void enter() -> enter
    1294:1295:void exit() -> exit
    1408:1410:boolean noChangeInUpstreamIfaceSet(android.net.util.InterfaceSet) -> noChangeInUpstreamIfaceSet
    1336:1399:boolean processMessage(android.os.Message) -> processMessage
    1424:1425:java.util.Set upstreamInterfacesAdd(android.net.util.InterfaceSet) -> upstreamInterfacesAdd
    1416:1419:java.util.Set upstreamInterfacesRemoved(android.net.util.InterfaceSet) -> upstreamInterfacesRemoved
android.net.ip.IpServer$UnavailableState -> android.net.ip.IpServer$UnavailableState:
    1437:1437:void <init>(android.net.ip.IpServer) -> <init>
    1440:1442:void enter() -> enter
android.net.ip.IpServer$WaitingForRestartState -> android.net.ip.IpServer$WaitingForRestartState:
    1446:1446:void <init>(android.net.ip.IpServer) -> <init>
    1449:1459:boolean processMessage(android.os.Message) -> processMessage
android.net.ip.NeighborPacketForwarder -> android.net.ip.NeighborPacketForwarder:
    72:80:void <init>(android.os.Handler,android.net.util.InterfaceParams,int) -> <init>
    111:111:void closeSocketQuietly(java.io.FileDescriptor) -> closeSocketQuietly
    121:139:java.io.FileDescriptor createFd() -> createFd
    145:148:java.net.Inet6Address getIpv6DestinationAddress(byte[]) -> getIpv6DestinationAddress
    54:54:void handlePacket(java.lang.Object,int) -> handlePacket
    155:179:void handlePacket(byte[],int) -> handlePacket
    88:103:void setUpstreamIface(android.net.util.InterfaceParams) -> setUpstreamIface
android.net.ip.NetlinkMonitor -> android.net.ip.NetlinkMonitor:
    74:78:void <init>(android.os.Handler,android.net.util.SharedLog,java.lang.String,int,int) -> <init>
    134:134:void closeSocketQuietly(java.io.FileDescriptor) -> closeSocketQuietly
    86:96:java.io.FileDescriptor createFd() -> createFd
    54:54:void handlePacket(java.lang.Object,int) -> handlePacket
    105:126:void handlePacket(byte[],int) -> handlePacket
android.net.ip.RouterAdvertisementDaemon -> android.net.ip.RouterAdvertisementDaemon:
    113:253:void <init>(android.net.util.InterfaceParams) -> <init>
    84:84:android.net.ip.RouterAdvertisementDaemon$DeprecatedInfoTracker access$1000(android.net.ip.RouterAdvertisementDaemon) -> access$1000
    84:84:void access$1200(android.net.ip.RouterAdvertisementDaemon) -> access$1200
    84:84:int access$1300(android.net.ip.RouterAdvertisementDaemon) -> access$1300
    84:84:boolean access$300(android.net.ip.RouterAdvertisementDaemon) -> access$300
    84:84:java.io.FileDescriptor access$400(android.net.ip.RouterAdvertisementDaemon) -> access$400
    84:84:byte access$500(int) -> access$500
    84:84:java.lang.String access$600() -> access$600
    84:84:void access$700(android.net.ip.RouterAdvertisementDaemon,java.net.InetSocketAddress) -> access$700
    84:84:java.net.InetSocketAddress access$800(android.net.ip.RouterAdvertisementDaemon) -> access$800
    84:84:java.lang.Object access$900(android.net.ip.RouterAdvertisementDaemon) -> access$900
    304:361:void assembleRaLocked() -> assembleRaLocked
    258:274:void buildNewRa(android.net.ip.RouterAdvertisementDaemon$RaParams,android.net.ip.RouterAdvertisementDaemon$RaParams) -> buildNewRa
    526:531:void closeSocket() -> closeSocket
    507:520:boolean createSocket() -> createSocket
    535:536:boolean isSocketValid() -> isSocketValid
    540:547:boolean isSuitableDestination(java.net.InetSocketAddress) -> isSuitableDestination
    366:368:void maybeNotifyMulticastTransmitter() -> maybeNotifyMulticastTransmitter
    551:566:void maybeSendRA(java.net.InetSocketAddress) -> maybeSendRA
    381:389:void putHeader(java.nio.ByteBuffer,boolean,byte) -> putHeader
    426:427:void putMtu(java.nio.ByteBuffer,int) -> putMtu
    432:443:void putPio(java.nio.ByteBuffer,android.net.IpPrefix,int,int) -> putPio
    484:501:void putRdnss(java.nio.ByteBuffer,java.util.Set,int) -> putRdnss
    393:400:void putSlla(java.nio.ByteBuffer,byte[]) -> putSlla
    279:287:boolean start() -> start
    294:299:void stop() -> stop
android.net.ip.RouterAdvertisementDaemon$DeprecatedInfoTracker -> android.net.ip.RouterAdvertisementDaemon$DeprecatedInfoTracker:
    186:188:void <init>() -> <init>
    186:186:void <init>(android.net.ip.RouterAdvertisementDaemon$1) -> <init>
    186:186:boolean access$1100(android.net.ip.RouterAdvertisementDaemon$DeprecatedInfoTracker) -> access$1100
    235:242:boolean decrementCounter(java.util.HashMap) -> decrementCounter
    227:228:boolean decrementCounters() -> decrementCounters
    207:207:java.util.Set getDnses() -> getDnses
    191:191:java.util.Set getPrefixes() -> getPrefixes
    223:223:boolean isEmpty() -> isEmpty
    211:212:void putDnses(java.util.Set) -> putDnses
    195:196:void putPrefixes(java.util.Set) -> putPrefixes
    217:218:void removeDnses(java.util.Set) -> removeDnses
    201:202:void removePrefixes(java.util.Set) -> removePrefixes
android.net.ip.RouterAdvertisementDaemon$MulticastTransmitter -> android.net.ip.RouterAdvertisementDaemon$MulticastTransmitter:
    603:605:void <init>(android.net.ip.RouterAdvertisementDaemon) -> <init>
    603:603:void <init>(android.net.ip.RouterAdvertisementDaemon,android.net.ip.RouterAdvertisementDaemon$1) -> <init>
    656:656:long getNextMulticastTransmitDelayMs() -> getNextMulticastTransmitDelayMs
    638:651:int getNextMulticastTransmitDelaySec() -> getNextMulticastTransmitDelaySec
    632:633:void hup() -> hup
    609:623:void run() -> run
android.net.ip.RouterAdvertisementDaemon$RaParams -> android.net.ip.RouterAdvertisementDaemon$RaParams:
    143:148:void <init>() -> <init>
    166:177:android.net.ip.RouterAdvertisementDaemon$RaParams getDeprecatedRaParams(android.net.ip.RouterAdvertisementDaemon$RaParams,android.net.ip.RouterAdvertisementDaemon$RaParams) -> getDeprecatedRaParams
android.net.ip.RouterAdvertisementDaemon$UnicastResponder -> android.net.ip.RouterAdvertisementDaemon$UnicastResponder:
    571:576:void <init>(android.net.ip.RouterAdvertisementDaemon) -> <init>
    571:571:void <init>(android.net.ip.RouterAdvertisementDaemon,android.net.ip.RouterAdvertisementDaemon$1) -> <init>
    580:596:void run() -> run
android.net.ipmemorystore.Blob -> android.net.ipmemorystore.Blob:
    9:9:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
    33:44:void readFromParcel(android.os.Parcel) -> readFromParcel
    23:29:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.ipmemorystore.Blob$1 -> android.net.ipmemorystore.Blob$1:
    9:9:void <init>() -> <init>
    9:9:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    12:13:android.net.ipmemorystore.Blob createFromParcel(android.os.Parcel) -> createFromParcel
    9:9:java.lang.Object[] newArray(int) -> newArray
    18:18:android.net.ipmemorystore.Blob[] newArray(int) -> newArray
android.net.ipmemorystore.NetworkAttributesParcelable -> android.net.ipmemorystore.NetworkAttributesParcelable:
    14:14:void <clinit>() -> <clinit>
    6:12:void <init>() -> <init>
    91:92:int describeContents() -> describeContents
    97:106:int describeContents(java.lang.Object) -> describeContents
    49:75:void readFromParcel(android.os.Parcel) -> readFromParcel
    79:86:java.lang.String toString() -> toString
    28:45:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.ipmemorystore.NetworkAttributesParcelable$1 -> android.net.ipmemorystore.NetworkAttributesParcelable$1:
    14:14:void <init>() -> <init>
    14:14:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    17:18:android.net.ipmemorystore.NetworkAttributesParcelable createFromParcel(android.os.Parcel) -> createFromParcel
    14:14:java.lang.Object[] newArray(int) -> newArray
    23:23:android.net.ipmemorystore.NetworkAttributesParcelable[] newArray(int) -> newArray
android.net.ipmemorystore.SameL3NetworkResponseParcelable -> android.net.ipmemorystore.SameL3NetworkResponseParcelable:
    11:11:void <clinit>() -> <clinit>
    6:10:void <init>() -> <init>
    37:52:void readFromParcel(android.os.Parcel) -> readFromParcel
    56:60:java.lang.String toString() -> toString
    25:33:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.ipmemorystore.SameL3NetworkResponseParcelable$1 -> android.net.ipmemorystore.SameL3NetworkResponseParcelable$1:
    11:11:void <init>() -> <init>
    11:11:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    14:15:android.net.ipmemorystore.SameL3NetworkResponseParcelable createFromParcel(android.os.Parcel) -> createFromParcel
    11:11:java.lang.Object[] newArray(int) -> newArray
    20:20:android.net.ipmemorystore.SameL3NetworkResponseParcelable[] newArray(int) -> newArray
android.net.ipmemorystore.StatusParcelable -> android.net.ipmemorystore.StatusParcelable:
    9:9:void <clinit>() -> <clinit>
    6:8:void <init>() -> <init>
    33:44:void readFromParcel(android.os.Parcel) -> readFromParcel
    48:50:java.lang.String toString() -> toString
    23:29:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.ipmemorystore.StatusParcelable$1 -> android.net.ipmemorystore.StatusParcelable$1:
    9:9:void <init>() -> <init>
    9:9:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    12:13:android.net.ipmemorystore.StatusParcelable createFromParcel(android.os.Parcel) -> createFromParcel
    9:9:java.lang.Object[] newArray(int) -> newArray
    18:18:android.net.ipmemorystore.StatusParcelable[] newArray(int) -> newArray
android.net.netd.aidl.NativeUidRangeConfig -> android.net.netd.aidl.NativeUidRangeConfig:
    32:32:void <clinit>() -> <clinit>
    55:58:void <init>(int,android.net.UidRangeParcel[],int) -> <init>
    6:6:android.net.netd.aidl.NativeUidRangeConfig access$000(android.os.Parcel) -> access$000
    114:114:int describeContents() -> describeContents
    119:128:int describeContents(java.lang.Object) -> describeContents
    99:103:boolean equals(java.lang.Object) -> equals
    109:109:int hashCode() -> hashCode
    62:84:android.net.netd.aidl.NativeUidRangeConfig internalCreateFromParcel(android.os.Parcel) -> internalCreateFromParcel
    89:93:java.lang.String toString() -> toString
    44:52:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.netd.aidl.NativeUidRangeConfig$1 -> android.net.netd.aidl.NativeUidRangeConfig$1:
    32:32:void <init>() -> <init>
    32:32:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    35:35:android.net.netd.aidl.NativeUidRangeConfig createFromParcel(android.os.Parcel) -> createFromParcel
    32:32:java.lang.Object[] newArray(int) -> newArray
    39:39:android.net.netd.aidl.NativeUidRangeConfig[] newArray(int) -> newArray
android.net.netd.aidl.NativeUidRangeConfig$Builder -> android.net.netd.aidl.NativeUidRangeConfig$Builder:
    11:23:void <init>() -> <init>
    29:29:android.net.netd.aidl.NativeUidRangeConfig build() -> build
    15:15:android.net.netd.aidl.NativeUidRangeConfig$Builder setNetId(int) -> setNetId
    25:25:android.net.netd.aidl.NativeUidRangeConfig$Builder setSubPriority(int) -> setSubPriority
    20:20:android.net.netd.aidl.NativeUidRangeConfig$Builder setUidRanges(android.net.UidRangeParcel[]) -> setUidRanges
android.net.netlink.ConntrackMessage -> android.net.netlink.ConntrackMessage:
    437:445:void <init>() -> <init>
    450:455:void <init>(android.net.netlink.StructNlMsgHdr,android.net.netlink.StructNfGenMsg,android.net.netlink.ConntrackMessage$Tuple,android.net.netlink.ConntrackMessage$Tuple,int,int) -> <init>
    337:338:java.net.Inet4Address castToInet4Address(java.net.InetAddress) -> castToInet4Address
    464:464:short getMessageType() -> getMessageType
    190:215:byte[] newIPv4TimeoutUpdateRequest(int,java.net.Inet4Address,int,java.net.Inet4Address,int,int) -> newIPv4TimeoutUpdateRequest
    459:460:void pack(java.nio.ByteBuffer) -> pack
    232:275:android.net.netlink.ConntrackMessage parse(android.net.netlink.StructNlMsgHdr,java.nio.ByteBuffer) -> parse
    318:332:android.net.netlink.ConntrackMessage$Tuple parseTuple(java.nio.ByteBuffer) -> parseTuple
    348:362:android.net.netlink.ConntrackMessage$TupleIpv4 parseTupleIpv4(java.nio.ByteBuffer) -> parseTupleIpv4
    373:394:android.net.netlink.ConntrackMessage$TupleProto parseTupleProto(java.nio.ByteBuffer) -> parseTupleProto
    471:536:java.lang.String stringForIpConntrackStatus(int) -> stringForIpConntrackStatus
    541:549:java.lang.String toString() -> toString
android.net.netlink.ConntrackMessage$Tuple -> android.net.netlink.ConntrackMessage$Tuple:
    113:118:void <init>(android.net.netlink.ConntrackMessage$TupleIpv4,android.net.netlink.ConntrackMessage$TupleProto) -> <init>
    124:127:boolean equals(java.lang.Object) -> equals
    135:135:int hashCode() -> hashCode
    140:147:java.lang.String toString() -> toString
android.net.netlink.ConntrackMessage$TupleIpv4 -> android.net.netlink.ConntrackMessage$TupleIpv4:
    161:163:void <init>(java.net.Inet4Address,java.net.Inet4Address) -> <init>
android.net.netlink.ConntrackMessage$TupleProto -> android.net.netlink.ConntrackMessage$TupleProto:
    177:180:void <init>(byte,short,short) -> <init>
android.net.netlink.InetDiagMessage -> android.net.netlink.InetDiagMessage:
    134:134:void <clinit>() -> <clinit>
    105:106:void <init>(android.net.netlink.StructNlMsgHdr) -> <init>
    110:111:android.net.netlink.InetDiagMessage parse(android.net.netlink.StructNlMsgHdr,java.nio.ByteBuffer) -> parse
    215:219:java.lang.String toString() -> toString
android.net.netlink.NdOption -> android.net.netlink.NdOption:
    82:82:void <clinit>() -> <clinit>
    33:35:void <init>(byte,int) -> <init>
    54:68:android.net.netlink.NdOption parse(java.nio.ByteBuffer) -> parse
    79:79:java.lang.String toString() -> toString
android.net.netlink.NduseroptMessage -> android.net.netlink.NduseroptMessage:
    66:107:void <init>(android.net.netlink.StructNlMsgHdr,java.nio.ByteBuffer) -> <init>
    121:132:android.net.netlink.NduseroptMessage parse(android.net.netlink.StructNlMsgHdr,java.nio.ByteBuffer) -> parse
    137:139:java.lang.String toString() -> toString
android.net.netlink.NetlinkConstants -> android.net.netlink.NetlinkConstants:
    225:225:void <clinit>() -> <clinit>
    52:52:int alignedLengthOf(short) -> alignedLengthOf
    57:57:int alignedLengthOf(int) -> alignedLengthOf
    75:75:java.lang.String hexify(byte[]) -> hexify
    80:81:java.lang.String hexify(java.nio.ByteBuffer) -> hexify
    61:64:java.lang.String stringForAddressFamily(int) -> stringForAddressFamily
    140:140:java.lang.String stringForCtlMsgType(short) -> stringForCtlMsgType
    178:178:java.lang.String stringForInetDiagMsgType(short) -> stringForInetDiagMsgType
    203:203:java.lang.String stringForNfMsgType(short) -> stringForNfMsgType
    213:222:java.lang.String stringForNlMsgType(short,int) -> stringForNlMsgType
    68:70:java.lang.String stringForProtocol(int) -> stringForProtocol
    167:167:java.lang.String stringForRtMsgType(short) -> stringForRtMsgType
    231:240:java.lang.String toHexString(byte[],int,int) -> toHexString
android.net.netlink.NetlinkErrorMessage -> android.net.netlink.NetlinkErrorMessage:
    43:44:void <init>(android.net.netlink.StructNlMsgHdr) -> <init>
    48:48:android.net.netlink.StructNlMsgErr getNlMsgError() -> getNlMsgError
    30:32:android.net.netlink.NetlinkErrorMessage parse(android.net.netlink.StructNlMsgHdr,java.nio.ByteBuffer) -> parse
    53:55:java.lang.String toString() -> toString
android.net.netlink.NetlinkMessage -> android.net.netlink.NetlinkMessage:
    84:85:void <init>(android.net.netlink.StructNlMsgHdr) -> <init>
    89:89:android.net.netlink.StructNlMsgHdr getHeader() -> getHeader
    48:76:android.net.netlink.NetlinkMessage parse(java.nio.ByteBuffer,int) -> parse
    105:112:android.net.netlink.NetlinkMessage parseCtlMessage(android.net.netlink.StructNlMsgHdr,java.nio.ByteBuffer,int) -> parseCtlMessage
    134:136:android.net.netlink.NetlinkMessage parseInetDiagMessage(android.net.netlink.StructNlMsgHdr,java.nio.ByteBuffer) -> parseInetDiagMessage
    144:149:android.net.netlink.NetlinkMessage parseNfMessage(android.net.netlink.StructNlMsgHdr,java.nio.ByteBuffer) -> parseNfMessage
    120:126:android.net.netlink.NetlinkMessage parseRtMessage(android.net.netlink.StructNlMsgHdr,java.nio.ByteBuffer) -> parseRtMessage
    99:99:java.lang.String toString() -> toString
android.net.netlink.NetlinkSocket -> android.net.netlink.NetlinkSocket:
    118:118:void checkTimeout(long) -> checkTimeout
    113:113:void connectToKernel(java.io.FileDescriptor) -> connectToKernel
    107:108:java.io.FileDescriptor forProto(int) -> forProto
    130:141:java.nio.ByteBuffer recvMessage(java.io.FileDescriptor,int,long) -> recvMessage
    154:156:int sendMessage(java.io.FileDescriptor,byte[],int,int,long) -> sendMessage
    61:103:void sendOneShotKernelMessage(int,byte[]) -> sendOneShotKernelMessage
android.net.netlink.RtNetlinkNeighborMessage -> android.net.netlink.RtNetlinkNeighborMessage:
    153:158:void <init>(android.net.netlink.StructNlMsgHdr) -> <init>
    166:166:java.net.InetAddress getDestination() -> getDestination
    170:170:byte[] getLinkLayerAddress() -> getLinkLayerAddress
    162:162:android.net.netlink.StructNdMsg getNdHeader() -> getNdHeader
    52:90:android.net.netlink.RtNetlinkNeighborMessage parse(android.net.netlink.StructNlMsgHdr,java.nio.ByteBuffer) -> parse
    218:226:java.lang.String toString() -> toString
android.net.netlink.StructInetDiagMsg -> android.net.netlink.StructInetDiagMsg:
    41:41:void <init>() -> <init>
    48:49:android.net.netlink.StructInetDiagMsg parse(java.nio.ByteBuffer) -> parse
    55:55:java.lang.String toString() -> toString
android.net.netlink.StructNdMsg -> android.net.netlink.StructNdMsg:
    128:129:void <init>() -> <init>
    102:102:boolean hasAvailableSpace(java.nio.ByteBuffer) -> hasAvailableSpace
    66:66:boolean isNudStateValid(short) -> isNudStateValid
    106:118:android.net.netlink.StructNdMsg parse(java.nio.ByteBuffer) -> parse
    78:98:java.lang.String stringForNudFlags(byte) -> stringForNudFlags
    57:57:java.lang.String stringForNudState(short) -> stringForNudState
    155:158:java.lang.String toString() -> toString
android.net.netlink.StructNdOptPref64 -> android.net.netlink.StructNdOptPref64:
    111:126:void <init>(java.nio.ByteBuffer) -> <init>
    138:145:android.net.netlink.StructNdOptPref64 parse(java.nio.ByteBuffer) -> parse
    70:70:int plcToPrefixLength(int) -> plcToPrefixLength
    167:167:java.lang.String toString() -> toString
android.net.netlink.StructNdaCacheInfo -> android.net.netlink.StructNdaCacheInfo:
    56:56:void <clinit>() -> <clinit>
    94:94:void <init>() -> <init>
    37:37:boolean hasAvailableSpace(java.nio.ByteBuffer) -> hasAvailableSpace
    101:101:long lastConfirmed() -> lastConfirmed
    105:105:long lastUpdated() -> lastUpdated
    97:97:long lastUsed() -> lastUsed
    41:50:android.net.netlink.StructNdaCacheInfo parse(java.nio.ByteBuffer) -> parse
    60:60:long ticksToMilliSeconds(int) -> ticksToMilliSeconds
    110:113:java.lang.String toString() -> toString
android.net.netlink.StructNfGenMsg -> android.net.netlink.StructNfGenMsg:
    67:70:void <init>(byte,byte,short) -> <init>
    73:76:void <init>(byte) -> <init>
    90:90:boolean hasAvailableSpace(java.nio.ByteBuffer) -> hasAvailableSpace
    80:86:void pack(java.nio.ByteBuffer) -> pack
    52:64:android.net.netlink.StructNfGenMsg parse(java.nio.ByteBuffer) -> parse
    95:100:java.lang.String toString() -> toString
android.net.netlink.StructNlAttr -> android.net.netlink.StructNlAttr:
    117:121:void <init>() -> <init>
    117:126:void <init>(short,byte) -> <init>
    117:143:void <init>(short,short,java.nio.ByteOrder) -> <init>
    117:160:void <init>(short,int,java.nio.ByteOrder) -> <init>
    117:165:void <init>(short,java.net.InetAddress) -> <init>
    169:178:void <init>(short,android.net.netlink.StructNlAttr[]) -> <init>
    101:112:android.net.netlink.StructNlAttr findNextAttrOfType(short,java.nio.ByteBuffer) -> findNextAttrOfType
    183:183:int getAlignedLength() -> getAlignedLength
    190:200:short getValueAsBe16(short) -> getValueAsBe16
    204:214:int getValueAsBe32(int) -> getValueAsBe32
    231:235:byte getValueAsByte(byte) -> getValueAsByte
    218:223:java.nio.ByteBuffer getValueAsByteBuffer() -> getValueAsByteBuffer
    247:250:java.net.InetAddress getValueAsInetAddress() -> getValueAsInetAddress
    239:243:int getValueAsInt(int) -> getValueAsInt
    257:268:void pack(java.nio.ByteBuffer) -> pack
    72:85:android.net.netlink.StructNlAttr parse(java.nio.ByteBuffer) -> parse
    48:64:android.net.netlink.StructNlAttr peek(java.nio.ByteBuffer) -> peek
    272:273:void setValue(byte[]) -> setValue
    278:281:java.lang.String toString() -> toString
android.net.netlink.StructNlMsgErr -> android.net.netlink.StructNlMsgErr:
    29:29:void <init>() -> <init>
    33:33:boolean hasAvailableSpace(java.nio.ByteBuffer) -> hasAvailableSpace
    37:44:android.net.netlink.StructNlMsgErr parse(java.nio.ByteBuffer) -> parse
    63:65:java.lang.String toString() -> toString
android.net.netlink.StructNlMsgHdr -> android.net.netlink.StructNlMsgHdr:
    110:115:void <init>() -> <init>
    81:81:boolean hasAvailableSpace(java.nio.ByteBuffer) -> hasAvailableSpace
    122:126:void pack(java.nio.ByteBuffer) -> pack
    85:97:android.net.netlink.StructNlMsgHdr parse(java.nio.ByteBuffer) -> parse
    53:77:java.lang.String stringForNlMsgFlags(short) -> stringForNlMsgFlags
    131:131:java.lang.String toString() -> toString
    144:150:java.lang.String toString(java.lang.Integer) -> toString
android.net.networkstack.aidl.dhcp.DhcpOption -> android.net.networkstack.aidl.dhcp.DhcpOption:
    9:9:void <clinit>() -> <clinit>
    5:7:void <init>() -> <init>
    34:47:void readFromParcel(android.os.Parcel) -> readFromParcel
    51:54:java.lang.String toString() -> toString
    23:30:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.networkstack.aidl.dhcp.DhcpOption$1 -> android.net.networkstack.aidl.dhcp.DhcpOption$1:
    9:9:void <init>() -> <init>
    9:9:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    12:13:android.net.networkstack.aidl.dhcp.DhcpOption createFromParcel(android.os.Parcel) -> createFromParcel
    9:9:java.lang.Object[] newArray(int) -> newArray
    18:18:android.net.networkstack.aidl.dhcp.DhcpOption[] newArray(int) -> newArray
android.net.networkstack.aidl.quirks.IPv6ProvisioningLossQuirkParcelable -> android.net.networkstack.aidl.quirks.IPv6ProvisioningLossQuirkParcelable:
    9:9:void <clinit>() -> <clinit>
    5:8:void <init>() -> <init>
    34:47:void readFromParcel(android.os.Parcel) -> readFromParcel
    51:54:java.lang.String toString() -> toString
    23:30:void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.net.networkstack.aidl.quirks.IPv6ProvisioningLossQuirkParcelable$1 -> android.net.networkstack.aidl.quirks.IPv6ProvisioningLossQuirkParcelable$1:
    9:9:void <init>() -> <init>
    9:9:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    12:13:android.net.networkstack.aidl.quirks.IPv6ProvisioningLossQuirkParcelable createFromParcel(android.os.Parcel) -> createFromParcel
    9:9:java.lang.Object[] newArray(int) -> newArray
    18:18:android.net.networkstack.aidl.quirks.IPv6ProvisioningLossQuirkParcelable[] newArray(int) -> newArray
android.net.shared.NetdUtils -> android.net.shared.NetdUtils:
    79:88:void networkAddInterface(android.net.INetd,java.lang.String,int,int) -> networkAddInterface
    53:53:void tetherInterface(android.net.INetd,java.lang.String,android.net.IpPrefix) -> tetherInterface
    60:64:void tetherInterface(android.net.INetd,java.lang.String,android.net.IpPrefix,int,int) -> tetherInterface
    44:47:void tetherStart(android.net.INetd,boolean,java.lang.String[]) -> tetherStart
    97:100:void untetherInterface(android.net.INetd,java.lang.String) -> untetherInterface
android.net.shared.RouteUtils -> android.net.shared.RouteUtils:
    66:73:void addRoutesToLocalNetwork(android.net.INetd,java.lang.String,java.util.List) -> addRoutesToLocalNetwork
    41:44:java.lang.String findNextHop(android.net.RouteInfo) -> findNextHop
    95:111:void modifyRoute(android.net.INetd,android.net.shared.RouteUtils$ModifyOperation,int,android.net.RouteInfo) -> modifyRoute
    81:83:int removeRoutesFromLocalNetwork(android.net.INetd,java.util.List) -> removeRoutesFromLocalNetwork
android.net.shared.RouteUtils$1 -> android.net.shared.RouteUtils$1:
    100:100:void <clinit>() -> <clinit>
android.net.shared.RouteUtils$ModifyOperation -> android.net.shared.RouteUtils$ModifyOperation:
    34:36:void <clinit>() -> <clinit>
    34:34:void <init>(java.lang.String,int) -> <init>
    34:34:android.net.shared.RouteUtils$ModifyOperation valueOf(java.lang.String) -> valueOf
    34:34:android.net.shared.RouteUtils$ModifyOperation[] values() -> values
android.net.util.InterfaceParams -> android.net.util.InterfaceParams:
    66:78:void <init>(java.lang.String,int,android.net.MacAddress,int) -> <init>
    49:56:android.net.util.InterfaceParams getByName(java.lang.String) -> getByName
    96:96:android.net.MacAddress getMacAddress(java.net.NetworkInterface) -> getMacAddress
    88:88:java.net.NetworkInterface getNetworkInterfaceByName(java.lang.String) -> getNetworkInterfaceByName
    83:83:java.lang.String toString() -> toString
android.net.util.InterfaceSet -> android.net.util.InterfaceSet:
    31:36:void <init>(java.lang.String[]) -> <init>
    48:50:boolean equals(java.lang.Object) -> equals
    41:43:java.lang.String toString() -> toString
android.net.util.NetworkConstants -> android.net.util.NetworkConstants:
    31:32:void <clinit>() -> <clinit>
android.net.util.PrefixUtils -> android.net.util.PrefixUtils:
    35:43:void <clinit>() -> <clinit>
    54:54:void addNonForwardablePrefixes(java.util.Set) -> addNonForwardablePrefixes
    74:74:android.net.IpPrefix asIpPrefix(android.net.LinkAddress) -> asIpPrefix
    79:82:android.net.IpPrefix ipAddressAsPrefix(java.net.InetAddress) -> ipAddressAsPrefix
    59:64:java.util.Set localPrefixesFrom(android.net.LinkProperties) -> localPrefixesFrom
    86:86:android.net.IpPrefix pfx(java.lang.String) -> pfx
android.net.util.SharedLog -> android.net.util.SharedLog:
    59:59:void <init>(java.lang.String) -> <init>
    63:63:void <init>(int,java.lang.String) -> <init>
    66:69:void <init>(com.android.networkstack.tethering.util.LocalLog,java.lang.String,java.lang.String) -> <init>
    92:92:void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    106:106:void e(java.lang.Exception) -> e
    115:115:void e(java.lang.String) -> e
    126:129:void e(java.lang.String,java.lang.Throwable) -> e
    80:83:android.net.util.SharedLog forSubComponent(java.lang.String) -> forSubComponent
    138:138:void i(java.lang.String) -> i
    199:199:boolean isRootLogInstance() -> isRootLogInstance
    160:160:void log(java.lang.String) -> log
    189:192:java.lang.String logLine(android.net.util.SharedLog$Category,java.lang.String) -> logLine
    179:179:void mark(java.lang.String) -> mark
    183:184:java.lang.String record(android.net.util.SharedLog$Category,java.lang.String) -> record
    147:147:void w(java.lang.String) -> w
android.net.util.SharedLog$Category -> android.net.util.SharedLog$Category:
    41:45:void <clinit>() -> <clinit>
    41:41:void <init>(java.lang.String,int) -> <init>
    41:41:android.net.util.SharedLog$Category valueOf(java.lang.String) -> valueOf
    41:41:android.net.util.SharedLog$Category[] values() -> values
android.net.util.TetheringUtils -> android.net.util.TetheringUtils:
    40:43:void <clinit>() -> <clinit>
    172:175:java.net.Inet6Address getAllNodesForScopeId(int) -> getAllNodesForScopeId
    160:163:boolean isTetheringRequestEquals(android.net.TetheringRequestParcel,android.net.TetheringRequestParcel) -> isTetheringRequestEquals
android.net.util.TetheringUtils$ForwardedStats -> android.net.util.TetheringUtils$ForwardedStats:
    72:76:void <init>() -> <init>
    86:90:void <init>(long,long,long,long) -> <init>
    100:104:void <init>(com.android.networkstack.tethering.TetherStatsValue) -> <init>
    125:129:android.net.util.TetheringUtils$ForwardedStats subtract(android.net.util.TetheringUtils$ForwardedStats) -> subtract
    135:136:java.lang.String toString() -> toString
android.net.util.VersionedBroadcastListener -> android.net.util.VersionedBroadcastListener:
    51:57:void <init>(java.lang.String,android.content.Context,android.os.Handler,android.content.IntentFilter,java.util.function.Consumer) -> <init>
    63:66:void startListening() -> startListening
android.net.util.VersionedBroadcastListener$Receiver -> android.net.util.VersionedBroadcastListener$Receiver:
    86:90:void <init>(java.lang.String,java.util.concurrent.atomic.AtomicInteger,java.util.function.Consumer) -> <init>
    95:103:void onReceive(android.content.Context,android.content.Intent) -> onReceive
android.util.IndentingPrintWriter -> android.util.IndentingPrintWriter:
    56:56:void <init>(java.io.Writer) -> <init>
    60:60:void <init>(java.io.Writer,java.lang.String) -> <init>
    65:65:void <init>(java.io.Writer,java.lang.String,java.lang.String) -> <init>
    70:70:void <init>(java.io.Writer,java.lang.String,int) -> <init>
    41:79:void <init>(java.io.Writer,java.lang.String,java.lang.String,int) -> <init>
    130:131:android.util.IndentingPrintWriter decreaseIndent() -> decreaseIndent
    120:121:android.util.IndentingPrintWriter increaseIndent() -> increaseIndent
    242:248:void maybeWriteIndent() -> maybeWriteIndent
    143:166:android.util.IndentingPrintWriter print(java.lang.String,java.lang.Object) -> print
    175:175:android.util.IndentingPrintWriter printHexInt(java.lang.String,int) -> printHexInt
    181:181:void println() -> println
    92:94:android.util.IndentingPrintWriter setIndent(java.lang.String) -> setIndent
    108:110:android.util.IndentingPrintWriter setIndent(int) -> setIndent
    186:187:void write(int) -> write
    192:194:void write(java.lang.String,int,int) -> write
    199:237:void write(char[],int,int) -> write
com.android.modules.utils.build.SdkLevel -> com.android.modules.utils.build.SdkLevel:
    46:46:boolean isAtLeastS() -> isAtLeastS
com.android.networkstack.apishim.ConnectivityManagerShimImpl -> com.android.networkstack.apishim.ConnectivityManagerShimImpl:
    43:43:void <init>(android.content.Context) -> <init>
    51:55:com.android.networkstack.apishim.common.ConnectivityManagerShim newInstance(android.content.Context) -> newInstance
    73:73:void registerSystemDefaultNetworkCallback(android.net.ConnectivityManager$NetworkCallback,android.os.Handler) -> registerSystemDefaultNetworkCallback
com.android.networkstack.apishim.SettingsShimImpl -> com.android.networkstack.apishim.SettingsShimImpl:
    34:34:void <init>() -> <init>
    51:51:boolean checkAndNoteWriteSettingsOperation(android.content.Context,int,java.lang.String,java.lang.String,boolean) -> checkAndNoteWriteSettingsOperation
    40:44:com.android.networkstack.apishim.common.SettingsShim newInstance() -> newInstance
com.android.networkstack.apishim.api29.ConnectivityManagerShimImpl -> com.android.networkstack.apishim.api29.ConnectivityManagerShimImpl:
    33:33:void <init>(android.content.Context) -> <init>
    39:39:com.android.networkstack.apishim.common.ConnectivityManagerShim newInstance(android.content.Context) -> newInstance
    61:61:void registerSystemDefaultNetworkCallback(android.net.ConnectivityManager$NetworkCallback,android.os.Handler) -> registerSystemDefaultNetworkCallback
com.android.networkstack.apishim.api30.ConnectivityManagerShimImpl -> com.android.networkstack.apishim.api30.ConnectivityManagerShimImpl:
    41:42:void <init>(android.content.Context) -> <init>
    49:53:com.android.networkstack.apishim.common.ConnectivityManagerShim newInstance(android.content.Context) -> newInstance
    82:89:void registerSystemDefaultNetworkCallback(android.net.ConnectivityManager$NetworkCallback,android.os.Handler) -> registerSystemDefaultNetworkCallback
com.android.networkstack.apishim.api30.SettingsShimImpl -> com.android.networkstack.apishim.api30.SettingsShimImpl:
    31:31:void <init>() -> <init>
    47:47:boolean checkAndNoteWriteSettingsOperation(android.content.Context,int,java.lang.String,java.lang.String,boolean) -> checkAndNoteWriteSettingsOperation
    40:40:com.android.networkstack.apishim.common.SettingsShim newInstance() -> newInstance
com.android.networkstack.apishim.common.ShimUtils -> com.android.networkstack.apishim.common.ShimUtils:
    41:42:boolean isReleaseOrDevelopmentApiAbove(int) -> isReleaseOrDevelopmentApiAbove
com.android.networkstack.apishim.common.UnsupportedApiLevelException -> com.android.networkstack.apishim.common.UnsupportedApiLevelException:
    29:29:void <init>() -> <init>
    39:39:void <init>(java.lang.String) -> <init>
com.android.networkstack.tethering.BpfCoordinator -> com.android.networkstack.tethering.BpfCoordinator:
    100:117:void <clinit>() -> <clinit>
    170:418:void <init>(com.android.networkstack.tethering.BpfCoordinator$Dependencies) -> <init>
    95:95:java.lang.String access$000() -> access$000
    95:95:java.lang.String access$100() -> access$100
    95:95:android.net.util.SharedLog access$1000(com.android.networkstack.tethering.BpfCoordinator) -> access$1000
    95:95:java.util.HashMap access$1100(com.android.networkstack.tethering.BpfCoordinator) -> access$1100
    95:95:void access$1200(com.android.networkstack.tethering.BpfCoordinator,java.lang.String) -> access$1200
    95:95:void access$1300(com.android.networkstack.tethering.BpfCoordinator,long) -> access$1300
    95:95:byte[] access$1400(com.android.networkstack.tethering.BpfCoordinator,java.net.Inet4Address) -> access$1400
    95:95:com.android.networkstack.tethering.BpfCoordinator$ClientInfo access$1500(com.android.networkstack.tethering.BpfCoordinator,java.net.Inet4Address) -> access$1500
    95:95:java.util.HashMap access$1600(com.android.networkstack.tethering.BpfCoordinator) -> access$1600
    95:95:com.android.networkstack.tethering.apishim.common.BpfCoordinatorShim access$1700(com.android.networkstack.tethering.BpfCoordinator) -> access$1700
    95:95:void access$1800(com.android.networkstack.tethering.BpfCoordinator,int) -> access$1800
    95:95:void access$1900(com.android.networkstack.tethering.BpfCoordinator,int,int) -> access$1900
    95:95:java.lang.String access$200() -> access$200
    95:95:void access$2000(com.android.networkstack.tethering.BpfCoordinator,int) -> access$2000
    95:95:java.lang.String access$300() -> access$300
    95:95:java.lang.String access$400() -> access$400
    95:95:java.lang.String access$500() -> access$500
    95:95:java.lang.String access$600() -> access$600
    95:95:java.lang.String access$700() -> access$700
    95:95:android.net.MacAddress access$800() -> access$800
    95:95:android.os.Handler access$900(com.android.networkstack.tethering.BpfCoordinator) -> access$900
    666:678:void addUpstreamNameToLookupTable(int,java.lang.String) -> addUpstreamNameToLookupTable
    1776:1787:android.net.NetworkStats buildNetworkStats(com.android.networkstack.tethering.BpfCoordinator$StatsType,int,android.net.util.TetheringUtils$ForwardedStats) -> buildNetworkStats
    926:984:void dump(com.android.networkstack.tethering.util.IndentingPrintWriter) -> dump
    996:1008:void dumpBpfStats(com.android.networkstack.tethering.util.IndentingPrintWriter) -> dumpBpfStats
    1131:1151:void dumpCounters(com.android.networkstack.tethering.util.IndentingPrintWriter) -> dumpCounters
    1156:1177:void dumpDevmap(com.android.networkstack.tethering.util.IndentingPrintWriter) -> dumpDevmap
    1090:1097:void dumpIpv4ForwardingRuleMap(long,boolean,com.android.networkstack.tethering.BpfMap,com.android.networkstack.tethering.util.IndentingPrintWriter) -> dumpIpv4ForwardingRuleMap
    1101:1117:void dumpIpv4ForwardingRules(com.android.networkstack.tethering.util.IndentingPrintWriter) -> dumpIpv4ForwardingRules
    1013:1034:void dumpIpv6ForwardingRules(com.android.networkstack.tethering.util.IndentingPrintWriter) -> dumpIpv6ForwardingRules
    1045:1056:void dumpIpv6UpstreamRules(com.android.networkstack.tethering.util.IndentingPrintWriter) -> dumpIpv6UpstreamRules
    988:992:void dumpStats(com.android.networkstack.tethering.util.IndentingPrintWriter) -> dumpStats
    1747:1750:void forwardingPairAdd(java.lang.String,java.lang.String) -> forwardingPairAdd
    1764:1766:boolean forwardingPairExists(java.lang.String,java.lang.String) -> forwardingPairExists
    1754:1759:void forwardingPairRemove(java.lang.String,java.lang.String) -> forwardingPairRemove
    1972:1972:com.android.networkstack.tethering.BpfCoordinator$BpfConntrackEventConsumer getBpfConntrackEventConsumerForTesting() -> getBpfConntrackEventConsumerForTesting
    1429:1431:com.android.networkstack.tethering.BpfCoordinator$ClientInfo getClientInfo(java.net.Inet4Address) -> getClientInfo
    1956:1956:java.util.HashMap getForwardingRulesForTesting() -> getForwardingRulesForTesting
    916:916:java.lang.String getIfName(long) -> getIfName
    1621:1625:int getInterfaceIndexFromRules(java.lang.String) -> getInterfaceIndexFromRules
    1964:1964:android.util.SparseArray getInterfaceNamesForTesting() -> getInterfaceNamesForTesting
    1860:1862:int getPollingInterval() -> getPollingInterval
    1634:1635:long getQuotaBytes(java.lang.String) -> getQuotaBytes
    1454:1468:java.net.Inet4Address ipv4MappedAddressBytesToIpv4Address(byte[]) -> ipv4MappedAddressBytesToIpv4Address
    1065:1084:java.lang.String ipv4RuleToString(long,boolean,com.android.networkstack.tethering.Tether4Key,com.android.networkstack.tethering.Tether4Value) -> ipv4RuleToString
    1039:1041:java.lang.String ipv6UpstreamRuletoString(com.android.networkstack.tethering.TetherUpstream6Key,com.android.networkstack.tethering.Tether6Value) -> ipv6UpstreamRuletoString
    1770:1770:boolean isAnyForwardingPairOnUpstream(java.lang.String) -> isAnyForwardingPairOnUpstream
    1725:1728:boolean isAnyRuleFromDownstreamToUpstream(int,int) -> isAnyRuleFromDownstreamToUpstream
    1715:1718:boolean isAnyRuleOnUpstream(int) -> isAnyRuleOnUpstream
    1616:1617:boolean isBpfEnabled() -> isBpfEnabled
    469:469:boolean isUsingBpf() -> isUsingBpf
    812:815:boolean isValidUpstreamIpv4Address(java.net.InetAddress) -> isValidUpstreamIpv4Address
    1005:1005:void lambda$dumpBpfStats$4(com.android.networkstack.tethering.util.IndentingPrintWriter,com.android.networkstack.tethering.TetherStatsKey,com.android.networkstack.tethering.TetherStatsValue) -> lambda$dumpBpfStats$4
    1141:1148:void lambda$dumpCounters$7(com.android.networkstack.tethering.util.IndentingPrintWriter,com.android.networkstack.tethering.BpfCoordinator$U32Struct,com.android.networkstack.tethering.BpfCoordinator$U32Struct) -> lambda$dumpCounters$7
    1171:1172:void lambda$dumpDevmap$8(com.android.networkstack.tethering.util.IndentingPrintWriter,com.android.networkstack.tethering.TetherDevKey,com.android.networkstack.tethering.TetherDevValue) -> lambda$dumpDevmap$8
    1097:1097:void lambda$dumpIpv4ForwardingRuleMap$6(com.android.networkstack.tethering.util.IndentingPrintWriter,long,boolean,com.android.networkstack.tethering.Tether4Key,com.android.networkstack.tethering.Tether4Value) -> lambda$dumpIpv4ForwardingRuleMap$6
    1054:1054:void lambda$dumpIpv6UpstreamRules$5(com.android.networkstack.tethering.util.IndentingPrintWriter,com.android.networkstack.tethering.TetherUpstream6Key,com.android.networkstack.tethering.Tether6Value) -> lambda$dumpIpv6UpstreamRules$5
    1923:1925:void lambda$maybeRefreshConntrackTimeout$10(long,com.android.networkstack.tethering.Tether4Key,com.android.networkstack.tethering.Tether4Value) -> lambda$maybeRefreshConntrackTimeout$10
    1912:1915:void lambda$maybeRefreshConntrackTimeout$9(long,com.android.networkstack.tethering.Tether4Key,com.android.networkstack.tethering.Tether4Value) -> lambda$maybeRefreshConntrackTimeout$9
    249:250:void lambda$new$0() -> lambda$new$0
    255:256:void lambda$new$1() -> lambda$new$1
    756:757:void lambda$tetherOffloadRuleClear$2(java.net.Inet4Address,java.util.Set,com.android.networkstack.tethering.Tether4Key,com.android.networkstack.tethering.Tether4Value) -> lambda$tetherOffloadRuleClear$2
    761:763:void lambda$tetherOffloadRuleClear$3(java.net.Inet4Address,java.util.Set,java.util.Set,com.android.networkstack.tethering.Tether4Key,com.android.networkstack.tethering.Tether4Value) -> lambda$tetherOffloadRuleClear$3
    120:120:java.lang.String makeMapPath(java.lang.String) -> makeMapPath
    124:124:java.lang.String makeMapPath(boolean,int) -> makeMapPath
    1740:1742:void maybeAddDevMap(int,int) -> maybeAddDevMap
    886:896:void maybeAttachProgram(java.lang.String,java.lang.String) -> maybeAttachProgram
    1692:1709:void maybeClearLimit(int) -> maybeClearLimit
    904:910:void maybeDetachProgram(java.lang.String,java.lang.String) -> maybeDetachProgram
    1906:1922:void maybeRefreshConntrackTimeout() -> maybeRefreshConntrackTimeout
    1941:1947:void maybeSchedulePollingConntrackTimeout() -> maybeSchedulePollingConntrackTimeout
    1931:1937:void maybeSchedulePollingStats() -> maybeSchedulePollingStats
    1674:1685:void maybeSetLimit(int) -> maybeSetLimit
    1655:1659:void maybeUpdateDataLimit(java.lang.String) -> maybeUpdateDataLimit
    1868:1871:java.net.Inet4Address parseIPv4Address(byte[]) -> parseIPv4Address
    1642:1646:boolean sendDataLimitToBpfMap(int,long) -> sendDataLimitToBpfMap
    496:509:void startMonitoring(android.net.ip.IpServer) -> startMonitoring
    429:440:void startPolling() -> startPolling
    518:525:void stopMonitoring(android.net.ip.IpServer) -> stopMonitoring
    452:465:void stopPolling() -> stopPolling
    690:697:void tetherOffloadClientAdd(android.net.ip.IpServer,com.android.networkstack.tethering.BpfCoordinator$ClientInfo) -> tetherOffloadClientAdd
    730:737:void tetherOffloadClientClear(android.net.ip.IpServer) -> tetherOffloadClientClear
    706:721:void tetherOffloadClientRemove(android.net.ip.IpServer,com.android.networkstack.tethering.BpfCoordinator$ClientInfo) -> tetherOffloadClientRemove
    799:807:void tetherOffloadRule4Clear(android.net.ip.IpServer) -> tetherOffloadRule4Clear
    535:566:void tetherOffloadRuleAdd(android.net.ip.IpServer,com.android.networkstack.tethering.BpfCoordinator$Ipv6ForwardingRule) -> tetherOffloadRuleAdd
    615:623:void tetherOffloadRuleClear(android.net.ip.IpServer) -> tetherOffloadRuleClear
    749:789:void tetherOffloadRuleClear(com.android.networkstack.tethering.BpfCoordinator$ClientInfo) -> tetherOffloadRuleClear
    576:606:void tetherOffloadRuleRemove(android.net.ip.IpServer,com.android.networkstack.tethering.BpfCoordinator$Ipv6ForwardingRule) -> tetherOffloadRuleRemove
    632:655:void tetherOffloadRuleUpdate(android.net.ip.IpServer,int) -> tetherOffloadRuleUpdate
    1441:1448:byte[] toIpv4MappedAddressBytes(java.net.Inet4Address) -> toIpv4MappedAddressBytes
    1794:1801:void updateAlertQuota(long) -> updateAlertQuota
    1886:1900:void updateConntrackTimeout(byte,java.net.Inet4Address,short,java.net.Inet4Address,short) -> updateConntrackTimeout
    1664:1670:boolean updateDataLimit(int) -> updateDataLimit
    1843:1851:void updateForwardedStats() -> updateForwardedStats
    1808:1836:void updateQuotaAndStatsFromSnapshot(android.util.SparseArray) -> updateQuotaAndStatsFromSnapshot
    830:875:void updateUpstreamNetworkState(com.android.networkstack.tethering.UpstreamNetworkState) -> updateUpstreamNetworkState
com.android.networkstack.tethering.BpfCoordinator$$ExternalSyntheticLambda0 -> com.android.networkstack.tethering.BpfCoordinator$$ExternalSyntheticLambda0:
    com.android.networkstack.tethering.BpfCoordinator com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$0$c1b62de516444d8dddb8ead2273c55b5b206108d45a461f445a57402dc2a6352$0.f$0 -> f$0
    void com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$0$c1b62de516444d8dddb8ead2273c55b5b206108d45a461f445a57402dc2a6352$0.<init>(com.android.networkstack.tethering.BpfCoordinator) -> <init>
    void com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$0$c1b62de516444d8dddb8ead2273c55b5b206108d45a461f445a57402dc2a6352$0.run() -> run
com.android.networkstack.tethering.BpfCoordinator$$ExternalSyntheticLambda1 -> com.android.networkstack.tethering.BpfCoordinator$$ExternalSyntheticLambda1:
    com.android.networkstack.tethering.BpfCoordinator com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$0$c1b62de516444d8dddb8ead2273c55b5b206108d45a461f445a57402dc2a6352$1.f$0 -> f$0
    void com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$0$c1b62de516444d8dddb8ead2273c55b5b206108d45a461f445a57402dc2a6352$1.<init>(com.android.networkstack.tethering.BpfCoordinator) -> <init>
    void com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$0$c1b62de516444d8dddb8ead2273c55b5b206108d45a461f445a57402dc2a6352$1.run() -> run
com.android.networkstack.tethering.BpfCoordinator$$ExternalSyntheticLambda10 -> com.android.networkstack.tethering.BpfCoordinator$$ExternalSyntheticLambda10:
    java.net.Inet4Address com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$0$2b154489d154c48d3f62b979ba89c503a3e44a1dfb1ea6715154e25b0cc7dd2e$0.f$0 -> f$0
    java.util.Set com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$0$2b154489d154c48d3f62b979ba89c503a3e44a1dfb1ea6715154e25b0cc7dd2e$0.f$1 -> f$1
    void com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$0$2b154489d154c48d3f62b979ba89c503a3e44a1dfb1ea6715154e25b0cc7dd2e$0.<init>(java.net.Inet4Address,java.util.Set) -> <init>
    void com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$0$2b154489d154c48d3f62b979ba89c503a3e44a1dfb1ea6715154e25b0cc7dd2e$0.accept(java.lang.Object,java.lang.Object) -> accept
com.android.networkstack.tethering.BpfCoordinator$$ExternalSyntheticLambda2 -> com.android.networkstack.tethering.BpfCoordinator$$ExternalSyntheticLambda2:
    long com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$1$5a73add7d38e85a2e86db436b8426a14077fbb9a591849a73645a580b80e5f57$0.f$1 -> f$1
    com.android.networkstack.tethering.BpfCoordinator com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$1$5a73add7d38e85a2e86db436b8426a14077fbb9a591849a73645a580b80e5f57$0.f$0 -> f$0
    void com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$1$5a73add7d38e85a2e86db436b8426a14077fbb9a591849a73645a580b80e5f57$0.<init>(com.android.networkstack.tethering.BpfCoordinator,long) -> <init>
    void com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$1$5a73add7d38e85a2e86db436b8426a14077fbb9a591849a73645a580b80e5f57$0.accept(java.lang.Object,java.lang.Object) -> accept
com.android.networkstack.tethering.BpfCoordinator$$ExternalSyntheticLambda3 -> com.android.networkstack.tethering.BpfCoordinator$$ExternalSyntheticLambda3:
    long com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$1$5a73add7d38e85a2e86db436b8426a14077fbb9a591849a73645a580b80e5f57$1.f$1 -> f$1
    com.android.networkstack.tethering.BpfCoordinator com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$1$5a73add7d38e85a2e86db436b8426a14077fbb9a591849a73645a580b80e5f57$1.f$0 -> f$0
    void com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$1$5a73add7d38e85a2e86db436b8426a14077fbb9a591849a73645a580b80e5f57$1.<init>(com.android.networkstack.tethering.BpfCoordinator,long) -> <init>
    void com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$1$5a73add7d38e85a2e86db436b8426a14077fbb9a591849a73645a580b80e5f57$1.accept(java.lang.Object,java.lang.Object) -> accept
com.android.networkstack.tethering.BpfCoordinator$$ExternalSyntheticLambda4 -> com.android.networkstack.tethering.BpfCoordinator$$ExternalSyntheticLambda4:
    com.android.networkstack.tethering.BpfCoordinator com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$1$d7e7d1d6612356ce5ecb6ed7a14dfba52ac65baa00289b01e51c35b19f590faa$0.f$0 -> f$0
    com.android.networkstack.tethering.util.IndentingPrintWriter com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$1$d7e7d1d6612356ce5ecb6ed7a14dfba52ac65baa00289b01e51c35b19f590faa$0.f$1 -> f$1
    void com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$1$d7e7d1d6612356ce5ecb6ed7a14dfba52ac65baa00289b01e51c35b19f590faa$0.<init>(com.android.networkstack.tethering.BpfCoordinator,com.android.networkstack.tethering.util.IndentingPrintWriter) -> <init>
    void com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$1$d7e7d1d6612356ce5ecb6ed7a14dfba52ac65baa00289b01e51c35b19f590faa$0.accept(java.lang.Object,java.lang.Object) -> accept
com.android.networkstack.tethering.BpfCoordinator$$ExternalSyntheticLambda5 -> com.android.networkstack.tethering.BpfCoordinator$$ExternalSyntheticLambda5:
    com.android.networkstack.tethering.BpfCoordinator com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$1$769fad2288381ea188953f09413c4915393a0e8a9b5d1769f297f983706a0e8a$0.f$0 -> f$0
    com.android.networkstack.tethering.util.IndentingPrintWriter com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$1$769fad2288381ea188953f09413c4915393a0e8a9b5d1769f297f983706a0e8a$0.f$1 -> f$1
    void com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$1$769fad2288381ea188953f09413c4915393a0e8a9b5d1769f297f983706a0e8a$0.<init>(com.android.networkstack.tethering.BpfCoordinator,com.android.networkstack.tethering.util.IndentingPrintWriter) -> <init>
    void com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$1$769fad2288381ea188953f09413c4915393a0e8a9b5d1769f297f983706a0e8a$0.accept(java.lang.Object,java.lang.Object) -> accept
com.android.networkstack.tethering.BpfCoordinator$$ExternalSyntheticLambda6 -> com.android.networkstack.tethering.BpfCoordinator$$ExternalSyntheticLambda6:
    com.android.networkstack.tethering.BpfCoordinator com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$1$d28030e2678cc548978c55b639dbb93dc7dc4c2ead4449948f8a60e808d174ba$0.f$0 -> f$0
    com.android.networkstack.tethering.util.IndentingPrintWriter com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$1$d28030e2678cc548978c55b639dbb93dc7dc4c2ead4449948f8a60e808d174ba$0.f$1 -> f$1
    long com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$1$d28030e2678cc548978c55b639dbb93dc7dc4c2ead4449948f8a60e808d174ba$0.f$2 -> f$2
    boolean com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$1$d28030e2678cc548978c55b639dbb93dc7dc4c2ead4449948f8a60e808d174ba$0.f$3 -> f$3
    void com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$1$d28030e2678cc548978c55b639dbb93dc7dc4c2ead4449948f8a60e808d174ba$0.<init>(com.android.networkstack.tethering.BpfCoordinator,com.android.networkstack.tethering.util.IndentingPrintWriter,long,boolean) -> <init>
    void com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$1$d28030e2678cc548978c55b639dbb93dc7dc4c2ead4449948f8a60e808d174ba$0.accept(java.lang.Object,java.lang.Object) -> accept
com.android.networkstack.tethering.BpfCoordinator$$ExternalSyntheticLambda7 -> com.android.networkstack.tethering.BpfCoordinator$$ExternalSyntheticLambda7:
    java.util.Set com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$0$2b154489d154c48d3f62b979ba89c503a3e44a1dfb1ea6715154e25b0cc7dd2e$1.f$2 -> f$2
    java.net.Inet4Address com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$0$2b154489d154c48d3f62b979ba89c503a3e44a1dfb1ea6715154e25b0cc7dd2e$1.f$1 -> f$1
    java.util.Set com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$0$2b154489d154c48d3f62b979ba89c503a3e44a1dfb1ea6715154e25b0cc7dd2e$1.f$3 -> f$3
    com.android.networkstack.tethering.BpfCoordinator com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$0$2b154489d154c48d3f62b979ba89c503a3e44a1dfb1ea6715154e25b0cc7dd2e$1.f$0 -> f$0
    void com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$0$2b154489d154c48d3f62b979ba89c503a3e44a1dfb1ea6715154e25b0cc7dd2e$1.<init>(com.android.networkstack.tethering.BpfCoordinator,java.net.Inet4Address,java.util.Set,java.util.Set) -> <init>
    void com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$0$2b154489d154c48d3f62b979ba89c503a3e44a1dfb1ea6715154e25b0cc7dd2e$1.accept(java.lang.Object,java.lang.Object) -> accept
com.android.networkstack.tethering.BpfCoordinator$$ExternalSyntheticLambda8 -> com.android.networkstack.tethering.BpfCoordinator$$ExternalSyntheticLambda8:
    com.android.networkstack.tethering.util.IndentingPrintWriter com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$1$529aa55c1e522bc0a86010b0269e76f694572f5cba40889bc9730287cf00ef5a$0.f$0 -> f$0
    void com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$1$529aa55c1e522bc0a86010b0269e76f694572f5cba40889bc9730287cf00ef5a$0.<init>(com.android.networkstack.tethering.util.IndentingPrintWriter) -> <init>
    void com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$1$529aa55c1e522bc0a86010b0269e76f694572f5cba40889bc9730287cf00ef5a$0.accept(java.lang.Object,java.lang.Object) -> accept
com.android.networkstack.tethering.BpfCoordinator$$ExternalSyntheticLambda9 -> com.android.networkstack.tethering.BpfCoordinator$$ExternalSyntheticLambda9:
    com.android.networkstack.tethering.util.IndentingPrintWriter com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$1$7c812c8a75f0594c68e897ff4620710ae2c985bcd43defc604e87d1fbd140c8d$0.f$0 -> f$0
    void com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$1$7c812c8a75f0594c68e897ff4620710ae2c985bcd43defc604e87d1fbd140c8d$0.<init>(com.android.networkstack.tethering.util.IndentingPrintWriter) -> <init>
    void com.android.networkstack.tethering.BpfCoordinator$$InternalSyntheticLambda$1$7c812c8a75f0594c68e897ff4620710ae2c985bcd43defc604e87d1fbd140c8d$0.accept(java.lang.Object,java.lang.Object) -> accept
com.android.networkstack.tethering.BpfCoordinator$BpfConntrackEventConsumer -> com.android.networkstack.tethering.BpfCoordinator$BpfConntrackEventConsumer:
    1474:1474:void <init>(com.android.networkstack.tethering.BpfCoordinator) -> <init>
    1571:1611:void accept(android.net.ip.ConntrackMonitor$ConntrackEvent) -> accept
    1543:1545:com.android.networkstack.tethering.Tether4Key makeTetherDownstream4Key(android.net.ip.ConntrackMonitor$ConntrackEvent,com.android.networkstack.tethering.BpfCoordinator$ClientInfo,int) -> makeTetherDownstream4Key
    1562:1565:com.android.networkstack.tethering.Tether4Value makeTetherDownstream4Value(android.net.ip.ConntrackMonitor$ConntrackEvent,com.android.networkstack.tethering.BpfCoordinator$ClientInfo,int) -> makeTetherDownstream4Value
    1535:1537:com.android.networkstack.tethering.Tether4Key makeTetherUpstream4Key(android.net.ip.ConntrackMonitor$ConntrackEvent,com.android.networkstack.tethering.BpfCoordinator$ClientInfo) -> makeTetherUpstream4Key
    1551:1555:com.android.networkstack.tethering.Tether4Value makeTetherUpstream4Value(android.net.ip.ConntrackMonitor$ConntrackEvent,int) -> makeTetherUpstream4Value
com.android.networkstack.tethering.BpfCoordinator$BpfTetherStatsProvider -> com.android.networkstack.tethering.BpfCoordinator$BpfTetherStatsProvider:
    1366:1373:void <init>(com.android.networkstack.tethering.BpfCoordinator) -> <init>
    1366:1366:void access$2100(com.android.networkstack.tethering.BpfCoordinator$BpfTetherStatsProvider,android.net.NetworkStats,android.net.NetworkStats) -> access$2100
    1422:1423:void accumulateDiff(android.net.NetworkStats,android.net.NetworkStats) -> accumulateDiff
    1377:1377:void lambda$onRequestStatsUpdate$0() -> lambda$onRequestStatsUpdate$0
    1382:1382:void lambda$onSetAlert$1(long) -> lambda$onSetAlert$1
    1392:1401:void lambda$onSetLimit$2(java.lang.String,long) -> lambda$onSetLimit$2
    1377:1377:void onRequestStatsUpdate(int) -> onRequestStatsUpdate
    1382:1382:void onSetAlert(long) -> onSetAlert
    1388:1391:void onSetLimit(java.lang.String,long) -> onSetLimit
    1409:1416:void pushTetherStats() -> pushTetherStats
com.android.networkstack.tethering.BpfCoordinator$BpfTetherStatsProvider$$ExternalSyntheticLambda0 -> com.android.networkstack.tethering.BpfCoordinator$BpfTetherStatsProvider$$ExternalSyntheticLambda0:
    com.android.networkstack.tethering.BpfCoordinator$BpfTetherStatsProvider com.android.networkstack.tethering.BpfCoordinator$BpfTetherStatsProvider$$InternalSyntheticLambda$0$b1fd14fcecf699f5c9ab4e082e736f99876f0c209c767076d718e636ab7ffd9d$0.f$0 -> f$0
    void com.android.networkstack.tethering.BpfCoordinator$BpfTetherStatsProvider$$InternalSyntheticLambda$0$b1fd14fcecf699f5c9ab4e082e736f99876f0c209c767076d718e636ab7ffd9d$0.<init>(com.android.networkstack.tethering.BpfCoordinator$BpfTetherStatsProvider) -> <init>
    void com.android.networkstack.tethering.BpfCoordinator$BpfTetherStatsProvider$$InternalSyntheticLambda$0$b1fd14fcecf699f5c9ab4e082e736f99876f0c209c767076d718e636ab7ffd9d$0.run() -> run
com.android.networkstack.tethering.BpfCoordinator$BpfTetherStatsProvider$$ExternalSyntheticLambda1 -> com.android.networkstack.tethering.BpfCoordinator$BpfTetherStatsProvider$$ExternalSyntheticLambda1:
    long com.android.networkstack.tethering.BpfCoordinator$BpfTetherStatsProvider$$InternalSyntheticLambda$0$d0aff02761038e278c31197a849326b600e37a5d05c0cd23d9a2126cd7064d3f$0.f$1 -> f$1
    com.android.networkstack.tethering.BpfCoordinator$BpfTetherStatsProvider com.android.networkstack.tethering.BpfCoordinator$BpfTetherStatsProvider$$InternalSyntheticLambda$0$d0aff02761038e278c31197a849326b600e37a5d05c0cd23d9a2126cd7064d3f$0.f$0 -> f$0
    void com.android.networkstack.tethering.BpfCoordinator$BpfTetherStatsProvider$$InternalSyntheticLambda$0$d0aff02761038e278c31197a849326b600e37a5d05c0cd23d9a2126cd7064d3f$0.<init>(com.android.networkstack.tethering.BpfCoordinator$BpfTetherStatsProvider,long) -> <init>
    void com.android.networkstack.tethering.BpfCoordinator$BpfTetherStatsProvider$$InternalSyntheticLambda$0$d0aff02761038e278c31197a849326b600e37a5d05c0cd23d9a2126cd7064d3f$0.run() -> run
com.android.networkstack.tethering.BpfCoordinator$BpfTetherStatsProvider$$ExternalSyntheticLambda2 -> com.android.networkstack.tethering.BpfCoordinator$BpfTetherStatsProvider$$ExternalSyntheticLambda2:
    long com.android.networkstack.tethering.BpfCoordinator$BpfTetherStatsProvider$$InternalSyntheticLambda$0$e20646feba2919414b209097b8cb5ae958380d234f2403bd6207d743dfabd47a$0.f$2 -> f$2
    com.android.networkstack.tethering.BpfCoordinator$BpfTetherStatsProvider com.android.networkstack.tethering.BpfCoordinator$BpfTetherStatsProvider$$InternalSyntheticLambda$0$e20646feba2919414b209097b8cb5ae958380d234f2403bd6207d743dfabd47a$0.f$0 -> f$0
    java.lang.String com.android.networkstack.tethering.BpfCoordinator$BpfTetherStatsProvider$$InternalSyntheticLambda$0$e20646feba2919414b209097b8cb5ae958380d234f2403bd6207d743dfabd47a$0.f$1 -> f$1
    void com.android.networkstack.tethering.BpfCoordinator$BpfTetherStatsProvider$$InternalSyntheticLambda$0$e20646feba2919414b209097b8cb5ae958380d234f2403bd6207d743dfabd47a$0.<init>(com.android.networkstack.tethering.BpfCoordinator$BpfTetherStatsProvider,java.lang.String,long) -> <init>
    void com.android.networkstack.tethering.BpfCoordinator$BpfTetherStatsProvider$$InternalSyntheticLambda$0$e20646feba2919414b209097b8cb5ae958380d234f2403bd6207d743dfabd47a$0.run() -> run
com.android.networkstack.tethering.BpfCoordinator$ClientInfo -> com.android.networkstack.tethering.BpfCoordinator$ClientInfo:
    1332:1336:void <init>(int,android.net.MacAddress,java.net.Inet4Address,android.net.MacAddress) -> <init>
    1341:1346:boolean equals(java.lang.Object) -> equals
    1351:1351:int hashCode() -> hashCode
    1356:1357:java.lang.String toString() -> toString
com.android.networkstack.tethering.BpfCoordinator$Dependencies -> com.android.networkstack.tethering.BpfCoordinator$Dependencies:
    261:261:void <init>() -> <init>
    291:291:long elapsedRealtimeNanos() -> elapsedRealtimeNanos
    378:383:com.android.networkstack.tethering.BpfMap getBpfDevMap() -> getBpfDevMap
    306:311:com.android.networkstack.tethering.BpfMap getBpfDownstream4Map() -> getBpfDownstream4Map
    330:335:com.android.networkstack.tethering.BpfMap getBpfDownstream6Map() -> getBpfDownstream6Map
    366:371:com.android.networkstack.tethering.BpfMap getBpfLimitMap() -> getBpfLimitMap
    354:359:com.android.networkstack.tethering.BpfMap getBpfStatsMap() -> getBpfStatsMap
    318:323:com.android.networkstack.tethering.BpfMap getBpfUpstream4Map() -> getBpfUpstream4Map
    342:347:com.android.networkstack.tethering.BpfMap getBpfUpstream6Map() -> getBpfUpstream6Map
    279:279:android.net.ip.ConntrackMonitor getConntrackMonitor(android.net.ip.ConntrackMonitor$ConntrackEventConsumer) -> getConntrackMonitor
    284:284:android.net.util.InterfaceParams getInterfaceParams(java.lang.String) -> getInterfaceParams
    301:301:boolean isAtLeastS() -> isAtLeastS
com.android.networkstack.tethering.BpfCoordinator$Ipv6ForwardingRule -> com.android.networkstack.tethering.BpfCoordinator$Ipv6ForwardingRule:
    1251:1256:void <init>(int,int,java.net.Inet6Address,android.net.MacAddress,android.net.MacAddress) -> <init>
    1302:1308:boolean equals(java.lang.Object) -> equals
    1315:1315:int hashCode() -> hashCode
    1296:1296:com.android.networkstack.tethering.Tether6Value makeTether6Value() -> makeTether6Value
    1287:1288:com.android.networkstack.tethering.TetherDownstream6Key makeTetherDownstream6Key() -> makeTetherDownstream6Key
    1262:1262:com.android.networkstack.tethering.BpfCoordinator$Ipv6ForwardingRule onNewUpstream(int) -> onNewUpstream
    1272:1278:android.net.TetherOffloadRuleParcel toTetherOffloadRuleParcel() -> toTetherOffloadRuleParcel
com.android.networkstack.tethering.BpfCoordinator$StatsType -> com.android.networkstack.tethering.BpfCoordinator$StatsType:
    134:137:void <clinit>() -> <clinit>
    135:135:void <init>(java.lang.String,int) -> <init>
    134:134:com.android.networkstack.tethering.BpfCoordinator$StatsType valueOf(java.lang.String) -> valueOf
    134:134:com.android.networkstack.tethering.BpfCoordinator$StatsType[] values() -> values
com.android.networkstack.tethering.BpfCoordinator$U32Struct -> com.android.networkstack.tethering.BpfCoordinator$U32Struct:
    1125:1125:void <init>() -> <init>
com.android.networkstack.tethering.BpfMap -> com.android.networkstack.tethering.BpfMap:
    45:45:void <clinit>() -> <clinit>
    75:81:void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    91:96:void <init>(java.lang.Class,java.lang.Class) -> <init>
    266:269:void clear() -> clear
    256:256:void close() -> close
    168:168:boolean deleteEntry(com.android.networkstack.tethering.util.Struct) -> deleteEntry
    243:250:void forEach(java.util.function.BiConsumer) -> forEach
    206:206:com.android.networkstack.tethering.util.Struct getFirstKey() -> getFirstKey
    193:194:com.android.networkstack.tethering.util.Struct getNextKey(com.android.networkstack.tethering.util.Struct) -> getNextKey
    177:183:com.android.networkstack.tethering.util.Struct getNextKeyInternal(com.android.networkstack.tethering.util.Struct) -> getNextKeyInternal
    198:199:byte[] getNextRawKey(byte[]) -> getNextRawKey
    230:231:byte[] getRawValue(byte[]) -> getRawValue
    219:226:com.android.networkstack.tethering.util.Struct getValue(com.android.networkstack.tethering.util.Struct) -> getValue
    114:118:void insertEntry(com.android.networkstack.tethering.util.Struct,com.android.networkstack.tethering.util.Struct) -> insertEntry
    173:173:boolean isEmpty() -> isEmpty
    104:104:void updateEntry(com.android.networkstack.tethering.util.Struct,com.android.networkstack.tethering.util.Struct) -> updateEntry
com.android.networkstack.tethering.BpfUtils -> com.android.networkstack.tethering.BpfUtils:
    34:34:void <clinit>() -> <clinit>
    76:104:void attachProgram(java.lang.String,boolean) -> attachProgram
    115:132:void detachProgram(java.lang.String) -> detachProgram
    62:65:java.lang.String makeProgPath(boolean,int,boolean) -> makeProgPath
com.android.networkstack.tethering.ConnectedClientsTracker -> com.android.networkstack.tethering.ConnectedClientsTracker:
    62:62:void <init>() -> <init>
    50:67:void <init>(com.android.networkstack.tethering.ConnectedClientsTracker$Clock) -> <init>
    121:134:void addLease(java.util.Map,android.net.TetheredClient) -> addLease
    177:179:java.util.Set getClientMacs(java.util.List) -> getClientMacs
    144:144:java.util.List getLastTetheredClients() -> getLastTetheredClients
    148:149:boolean hasExpiredAddress(java.util.List,long) -> hasExpiredAddress
    158:172:android.net.TetheredClient pruneExpired(android.net.TetheredClient,long) -> pruneExpired
    81:116:boolean updateConnectedClients(java.lang.Iterable,java.util.List) -> updateConnectedClients
com.android.networkstack.tethering.ConnectedClientsTracker$Clock -> com.android.networkstack.tethering.ConnectedClientsTracker$Clock:
    55:55:void <init>() -> <init>
    57:57:long elapsedRealtime() -> elapsedRealtime
com.android.networkstack.tethering.EntitlementManager -> com.android.networkstack.tethering.EntitlementManager:
    95:490:void <init>(android.content.Context,android.os.Handler,android.net.util.SharedLog,java.lang.Runnable) -> <init>
    67:67:android.net.util.SharedLog access$000(com.android.networkstack.tethering.EntitlementManager) -> access$000
    67:67:com.android.networkstack.tethering.EntitlementManager$TetheringConfigurationFetcher access$100(com.android.networkstack.tethering.EntitlementManager) -> access$100
    67:67:int access$200(com.android.networkstack.tethering.EntitlementManager,int,int) -> access$200
    67:67:com.android.networkstack.tethering.EntitlementManager$OnUiEntitlementFailedListener access$300(com.android.networkstack.tethering.EntitlementManager) -> access$300
    470:476:void addDownstreamMapping(int,int) -> addDownstreamMapping
    563:575:android.os.ResultReceiver buildProxyReceiver(int,boolean,android.os.ResultReceiver) -> buildProxyReceiver
    432:436:void cancelTetherProvisioningRechecks() -> cancelTetherProvisioningRechecks
    351:355:boolean carrierConfigAffirmsEntitlementCheckNotRequired(com.android.networkstack.tethering.TetheringConfiguration) -> carrierConfigAffirmsEntitlementCheckNotRequired
    518:537:void dump(java.io.PrintWriter) -> dump
    557:557:java.lang.String errorString(int) -> errorString
    441:459:void evaluateCellularPermission(com.android.networkstack.tethering.TetheringConfiguration) -> evaluateCellularPermission
    329:336:android.os.PersistableBundle getCarrierConfig(com.android.networkstack.tethering.TetheringConfiguration) -> getCarrierConfig
    149:151:boolean isCellularUpstreamPermitted() -> isCellularUpstreamPermitted
    155:162:boolean isCellularUpstreamPermitted(com.android.networkstack.tethering.TetheringConfiguration) -> isCellularUpstreamPermitted
    283:290:boolean isTetherProvisioningRequired(com.android.networkstack.tethering.TetheringConfiguration) -> isTetherProvisioningRequired
    249:250:void maybeRunProvisioning() -> maybeRunProvisioning
    254:269:void maybeRunProvisioning(com.android.networkstack.tethering.TetheringConfiguration) -> maybeRunProvisioning
    239:243:void notifyUpstream(boolean) -> notifyUpstream
    305:320:void reevaluateSimCardProvisioning(com.android.networkstack.tethering.TetheringConfiguration) -> reevaluateSimCardProvisioning
    484:487:void removeDownstreamMapping(int) -> removeDownstreamMapping
    619:636:void requestLatestTetheringEntitlementResult(int,android.os.ResultReceiver,boolean) -> requestLatestTetheringEntitlementResult
    369:381:android.content.Intent runSilentTetherProvisioning(int,com.android.networkstack.tethering.TetheringConfiguration) -> runSilentTetherProvisioning
    386:387:void runUiTetherProvisioning(int,com.android.networkstack.tethering.TetheringConfiguration) -> runUiTetherProvisioning
    401:409:android.content.Intent runUiTetherProvisioning(int,com.android.networkstack.tethering.TetheringConfiguration,android.os.ResultReceiver) -> runUiTetherProvisioning
    415:426:void scheduleProvisioningRechecks(com.android.networkstack.tethering.TetheringConfiguration) -> scheduleProvisioningRechecks
    177:177:void setExemptedDownstreamType(int) -> setExemptedDownstreamType
    118:118:void setOnUiEntitlementFailedListener(com.android.networkstack.tethering.EntitlementManager$OnUiEntitlementFailedListener) -> setOnUiEntitlementFailedListener
    132:132:void setTetheringConfigurationFetcher(com.android.networkstack.tethering.EntitlementManager$TetheringConfigurationFetcher) -> setTetheringConfigurationFetcher
    189:208:void startProvisioningIfNeeded(int,boolean) -> startProvisioningIfNeeded
    218:225:void stopProvisioningIfNeeded(int) -> stopProvisioningIfNeeded
    547:547:java.lang.String typeString(int) -> typeString
    608:611:int updateEntitlementCacheValue(int,int) -> updateEntitlementCacheValue
    588:592:android.os.ResultReceiver writeToParcel(android.os.ResultReceiver) -> writeToParcel
com.android.networkstack.tethering.EntitlementManager$1 -> com.android.networkstack.tethering.EntitlementManager$1:
    490:490:void <init>(com.android.networkstack.tethering.EntitlementManager) -> <init>
    493:496:void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.android.networkstack.tethering.EntitlementManager$2 -> com.android.networkstack.tethering.EntitlementManager$2:
    563:563:void <init>(com.android.networkstack.tethering.EntitlementManager,android.os.Handler,int,boolean,android.os.ResultReceiver) -> <init>
    566:571:void onReceiveResult(int,android.os.Bundle) -> onReceiveResult
com.android.networkstack.tethering.IPv6TetheringCoordinator -> com.android.networkstack.tethering.IPv6TetheringCoordinator:
    77:82:void <init>(java.util.ArrayList,android.net.util.SharedLog) -> <init>
    87:97:void addActiveDownstream(android.net.ip.IpServer,int) -> addActiveDownstream
    218:219:com.android.networkstack.tethering.IPv6TetheringCoordinator$Downstream findDownstream(android.net.ip.IpServer) -> findDownstream
    310:313:byte[] generateUniqueLocalPrefix() -> generateUniqueLocalPrefix
    225:258:android.net.LinkProperties getIPv6OnlyLinkProperties(android.net.LinkProperties) -> getIPv6OnlyLinkProperties
    187:209:android.net.LinkProperties getInterfaceIPv6LinkProperties(android.net.ip.IpServer) -> getInterfaceIPv6LinkProperties
    170:176:int getTtlAdjustment() -> getTtlAdjustment
    275:286:android.net.LinkProperties getUniqueLocalConfig(byte[],short) -> getUniqueLocalConfig
    266:271:boolean isIPv6GlobalAddress(java.net.InetAddress) -> isIPv6GlobalAddress
    291:300:android.net.IpPrefix makeUniqueLocalPrefix(byte[],short,int) -> makeUniqueLocalPrefix
    103:113:void removeActiveDownstream(android.net.ip.IpServer) -> removeActiveDownstream
    149:158:void setUpstreamNetworkState(com.android.networkstack.tethering.UpstreamNetworkState) -> setUpstreamNetworkState
    326:326:void stopIPv6TetheringOn(android.net.ip.IpServer) -> stopIPv6TetheringOn
    142:143:void stopIPv6TetheringOnAllInterfaces() -> stopIPv6TetheringOnAllInterfaces
    322:322:java.lang.String toDebugString(com.android.networkstack.tethering.UpstreamNetworkState) -> toDebugString
    162:164:void updateIPv6TetheringInterfaces() -> updateIPv6TetheringInterfaces
    126:138:void updateUpstreamNetworkState(com.android.networkstack.tethering.UpstreamNetworkState) -> updateUpstreamNetworkState
com.android.networkstack.tethering.IPv6TetheringCoordinator$Downstream -> com.android.networkstack.tethering.IPv6TetheringCoordinator$Downstream:
    58:61:void <init>(android.net.ip.IpServer,int,short) -> <init>
com.android.networkstack.tethering.OffloadController -> com.android.networkstack.tethering.OffloadController:
    84:84:void <clinit>() -> <clinit>
    116:196:void <init>(android.os.Handler,com.android.networkstack.tethering.OffloadHardwareInterface,android.content.ContentResolver,android.app.usage.NetworkStatsManager,android.net.util.SharedLog,com.android.networkstack.tethering.OffloadController$Dependencies) -> <init>
    80:80:boolean access$000(com.android.networkstack.tethering.OffloadController) -> access$000
    80:80:android.net.util.SharedLog access$100(com.android.networkstack.tethering.OffloadController) -> access$100
    80:80:android.os.Handler access$1000(com.android.networkstack.tethering.OffloadController) -> access$1000
    80:80:boolean access$1100(com.android.networkstack.tethering.OffloadController) -> access$1100
    80:80:void access$1200(com.android.networkstack.tethering.OffloadController,long) -> access$1200
    80:80:void access$1300(com.android.networkstack.tethering.OffloadController) -> access$1300
    80:80:java.util.HashMap access$1400(com.android.networkstack.tethering.OffloadController) -> access$1400
    80:80:boolean access$1500(com.android.networkstack.tethering.OffloadController,java.lang.String) -> access$1500
    80:80:void access$200(com.android.networkstack.tethering.OffloadController) -> access$200
    80:80:com.android.networkstack.tethering.OffloadController$OffloadTetheringStatsProvider access$300(com.android.networkstack.tethering.OffloadController) -> access$300
    80:80:boolean access$400(com.android.networkstack.tethering.OffloadController,com.android.networkstack.tethering.OffloadController$UpdateType) -> access$400
    80:80:void access$500(com.android.networkstack.tethering.OffloadController) -> access$500
    80:80:boolean access$600(com.android.networkstack.tethering.OffloadController,java.lang.String) -> access$600
    80:80:void access$700(com.android.networkstack.tethering.OffloadController) -> access$700
    80:80:void access$800(com.android.networkstack.tethering.OffloadController,int,java.lang.String,int,java.lang.String,int) -> access$800
    80:80:java.util.concurrent.ConcurrentHashMap access$900(com.android.networkstack.tethering.OffloadController) -> access$900
    714:720:boolean computeAndPushLocalPrefixes(com.android.networkstack.tethering.OffloadController$UpdateType) -> computeAndPushLocalPrefixes
    727:748:java.util.Set computeLocalPrefixStrings(java.util.Set,android.net.LinkProperties) -> computeLocalPrefixStrings
    872:872:int connectionTimeoutUpdateSecondsFor(int) -> connectionTimeoutUpdateSecondsFor
    448:449:java.lang.String currentUpstreamInterface() -> currentUpstreamInterface
    764:781:void dump(com.android.networkstack.tethering.util.IndentingPrintWriter) -> dump
    647:648:boolean isOffloadDisabled() -> isOffloadDisabled
    522:526:boolean isPollingStatsNeeded() -> isPollingStatsNeeded
    162:163:void lambda$new$0() -> lambda$new$0
    512:518:void maybeSchedulePollingStats() -> maybeSchedulePollingStats
    537:546:boolean maybeUpdateDataWarningAndLimit(java.lang.String) -> maybeUpdateDataWarningAndLimit
    453:478:void maybeUpdateStats(java.lang.String) -> maybeUpdateStats
    596:601:void notifyDownstreamLinkProperties(android.net.LinkProperties) -> notifyDownstreamLinkProperties
    840:848:java.net.Inet4Address parseIPv4Address(java.lang.String) -> parseIPv4Address
    856:858:java.lang.String protoNameFor(int) -> protoNameFor
    628:629:void pushAllDownstreamState() -> pushAllDownstreamState
    605:622:void pushDownstreamState(android.net.LinkProperties,android.net.LinkProperties) -> pushDownstreamState
    653:707:boolean pushUpstreamParameters(java.lang.String) -> pushUpstreamParameters
    635:642:void removeDownstreamInterface(java.lang.String) -> removeDownstreamInterface
    588:591:void setLocalPrefixes(java.util.Set) -> setLocalPrefixes
    567:583:void setUpstreamLinkProperties(android.net.LinkProperties) -> setUpstreamLinkProperties
    754:757:boolean shouldIgnoreDownstreamRoute(android.net.RouteInfo) -> shouldIgnoreDownstreamRoute
    201:315:boolean start() -> start
    338:338:boolean started() -> started
    325:334:void stop() -> stop
    495:502:void updateAlertQuota(long) -> updateAlertQuota
    788:834:void updateNatTimeout(int,java.lang.String,int,java.lang.String,int) -> updateNatTimeout
    560:561:void updateStatsForAllUpstreams() -> updateStatsForAllUpstreams
    552:552:void updateStatsForCurrentUpstream() -> updateStatsForCurrentUpstream
    531:531:boolean useStatsPolling() -> useStatsPolling
com.android.networkstack.tethering.OffloadController$$ExternalSyntheticLambda0 -> com.android.networkstack.tethering.OffloadController$$ExternalSyntheticLambda0:
    com.android.networkstack.tethering.OffloadController com.android.networkstack.tethering.OffloadController$$InternalSyntheticLambda$1$46ea8fc10ee90a3239130bff8c4510544267ad7adcd237bc1a773e0d9506ddc3$0.f$0 -> f$0
    void com.android.networkstack.tethering.OffloadController$$InternalSyntheticLambda$1$46ea8fc10ee90a3239130bff8c4510544267ad7adcd237bc1a773e0d9506ddc3$0.<init>(com.android.networkstack.tethering.OffloadController) -> <init>
    void com.android.networkstack.tethering.OffloadController$$InternalSyntheticLambda$1$46ea8fc10ee90a3239130bff8c4510544267ad7adcd237bc1a773e0d9506ddc3$0.run() -> run
com.android.networkstack.tethering.OffloadController$1 -> com.android.networkstack.tethering.OffloadController$1:
    221:221:void <init>(com.android.networkstack.tethering.OffloadController) -> <init>
    301:302:void onNatTimeoutUpdate(int,java.lang.String,int,java.lang.String,int) -> onNatTimeoutUpdate
    224:225:void onStarted() -> onStarted
    230:231:void onStoppedError() -> onStoppedError
    267:281:void onStoppedLimitReached() -> onStoppedLimitReached
    236:245:void onStoppedUnsupported() -> onStoppedUnsupported
    250:262:void onSupportAvailable() -> onSupportAvailable
    287:293:void onWarningReached() -> onWarningReached
com.android.networkstack.tethering.OffloadController$InterfaceQuota -> com.android.networkstack.tethering.OffloadController$InterfaceQuota:
    123:123:void <clinit>() -> <clinit>
    125:127:void <init>(long,long) -> <init>
    133:135:boolean equals(java.lang.Object) -> equals
    141:141:int hashCode() -> hashCode
    146:146:java.lang.String toString() -> toString
com.android.networkstack.tethering.OffloadController$OffloadTetheringStatsProvider -> com.android.networkstack.tethering.OffloadController$OffloadTetheringStatsProvider:
    342:346:void <init>(com.android.networkstack.tethering.OffloadController) -> <init>
    356:363:android.net.NetworkStats getTetherStats(com.android.networkstack.tethering.OffloadController$StatsType) -> getTetherStats
    427:428:void lambda$onRequestStatsUpdate$1() -> lambda$onRequestStatsUpdate$1
    441:442:void lambda$onSetAlert$2(long) -> lambda$onSetAlert$2
    380:399:void lambda$onSetWarningAndLimit$0(java.lang.String,long,long) -> lambda$onSetWarningAndLimit$0
    426:426:void onRequestStatsUpdate(int) -> onRequestStatsUpdate
    436:440:void onSetAlert(long) -> onSetAlert
    371:371:void onSetLimit(java.lang.String,long) -> onSetLimit
    379:379:void onSetWarningAndLimit(java.lang.String,long,long) -> onSetWarningAndLimit
    409:418:void pushTetherStats() -> pushTetherStats
com.android.networkstack.tethering.OffloadController$OffloadTetheringStatsProvider$$ExternalSyntheticLambda0 -> com.android.networkstack.tethering.OffloadController$OffloadTetheringStatsProvider$$ExternalSyntheticLambda0:
    com.android.networkstack.tethering.OffloadController$OffloadTetheringStatsProvider com.android.networkstack.tethering.OffloadController$OffloadTetheringStatsProvider$$InternalSyntheticLambda$0$65d2176a84ae859d9bad4637fcb552ca6c0164e71b03f690d06611fda10d938d$0.f$0 -> f$0
    void com.android.networkstack.tethering.OffloadController$OffloadTetheringStatsProvider$$InternalSyntheticLambda$0$65d2176a84ae859d9bad4637fcb552ca6c0164e71b03f690d06611fda10d938d$0.<init>(com.android.networkstack.tethering.OffloadController$OffloadTetheringStatsProvider) -> <init>
    void com.android.networkstack.tethering.OffloadController$OffloadTetheringStatsProvider$$InternalSyntheticLambda$0$65d2176a84ae859d9bad4637fcb552ca6c0164e71b03f690d06611fda10d938d$0.run() -> run
com.android.networkstack.tethering.OffloadController$OffloadTetheringStatsProvider$$ExternalSyntheticLambda1 -> com.android.networkstack.tethering.OffloadController$OffloadTetheringStatsProvider$$ExternalSyntheticLambda1:
    com.android.networkstack.tethering.OffloadController$OffloadTetheringStatsProvider com.android.networkstack.tethering.OffloadController$OffloadTetheringStatsProvider$$InternalSyntheticLambda$0$814f28d2505d920d6606af8766b66627b1eb0aba56ea187a8d890ee32d0eeb25$0.f$0 -> f$0
    long com.android.networkstack.tethering.OffloadController$OffloadTetheringStatsProvider$$InternalSyntheticLambda$0$814f28d2505d920d6606af8766b66627b1eb0aba56ea187a8d890ee32d0eeb25$0.f$1 -> f$1
    void com.android.networkstack.tethering.OffloadController$OffloadTetheringStatsProvider$$InternalSyntheticLambda$0$814f28d2505d920d6606af8766b66627b1eb0aba56ea187a8d890ee32d0eeb25$0.<init>(com.android.networkstack.tethering.OffloadController$OffloadTetheringStatsProvider,long) -> <init>
    void com.android.networkstack.tethering.OffloadController$OffloadTetheringStatsProvider$$InternalSyntheticLambda$0$814f28d2505d920d6606af8766b66627b1eb0aba56ea187a8d890ee32d0eeb25$0.run() -> run
com.android.networkstack.tethering.OffloadController$OffloadTetheringStatsProvider$$ExternalSyntheticLambda2 -> com.android.networkstack.tethering.OffloadController$OffloadTetheringStatsProvider$$ExternalSyntheticLambda2:
    com.android.networkstack.tethering.OffloadController$OffloadTetheringStatsProvider com.android.networkstack.tethering.OffloadController$OffloadTetheringStatsProvider$$InternalSyntheticLambda$0$92d72efd0f609bb2e8541fbd1ca5526495423b32359a637e829871fa04728c73$0.f$0 -> f$0
    long com.android.networkstack.tethering.OffloadController$OffloadTetheringStatsProvider$$InternalSyntheticLambda$0$92d72efd0f609bb2e8541fbd1ca5526495423b32359a637e829871fa04728c73$0.f$3 -> f$3
    long com.android.networkstack.tethering.OffloadController$OffloadTetheringStatsProvider$$InternalSyntheticLambda$0$92d72efd0f609bb2e8541fbd1ca5526495423b32359a637e829871fa04728c73$0.f$2 -> f$2
    java.lang.String com.android.networkstack.tethering.OffloadController$OffloadTetheringStatsProvider$$InternalSyntheticLambda$0$92d72efd0f609bb2e8541fbd1ca5526495423b32359a637e829871fa04728c73$0.f$1 -> f$1
    void com.android.networkstack.tethering.OffloadController$OffloadTetheringStatsProvider$$InternalSyntheticLambda$0$92d72efd0f609bb2e8541fbd1ca5526495423b32359a637e829871fa04728c73$0.<init>(com.android.networkstack.tethering.OffloadController$OffloadTetheringStatsProvider,java.lang.String,long,long) -> <init>
    void com.android.networkstack.tethering.OffloadController$OffloadTetheringStatsProvider$$InternalSyntheticLambda$0$92d72efd0f609bb2e8541fbd1ca5526495423b32359a637e829871fa04728c73$0.run() -> run
com.android.networkstack.tethering.OffloadController$StatsType -> com.android.networkstack.tethering.OffloadController$StatsType:
    86:89:void <clinit>() -> <clinit>
    87:87:void <init>(java.lang.String,int) -> <init>
    86:86:com.android.networkstack.tethering.OffloadController$StatsType valueOf(java.lang.String) -> valueOf
    86:86:com.android.networkstack.tethering.OffloadController$StatsType[] values() -> values
com.android.networkstack.tethering.OffloadController$UpdateType -> com.android.networkstack.tethering.OffloadController$UpdateType:
    92:92:void <clinit>() -> <clinit>
    92:92:void <init>(java.lang.String,int) -> <init>
    92:92:com.android.networkstack.tethering.OffloadController$UpdateType valueOf(java.lang.String) -> valueOf
    92:92:com.android.networkstack.tethering.OffloadController$UpdateType[] values() -> values
com.android.networkstack.tethering.OffloadHardwareInterface -> com.android.networkstack.tethering.OffloadHardwareInterface:
    182:182:void <init>(android.os.Handler,android.net.util.SharedLog) -> <init>
    84:188:void <init>(android.os.Handler,android.net.util.SharedLog,com.android.networkstack.tethering.OffloadHardwareInterface$Dependencies) -> <init>
    65:65:java.lang.String access$100() -> access$100
    65:65:int access$200(int) -> access$200
    544:559:boolean addDownstreamPrefix(java.lang.String,java.lang.String) -> addDownstreamPrefix
    355:355:void closeFdInNativeHandle(android.os.NativeHandle) -> closeFdInNativeHandle
    426:437:com.android.networkstack.tethering.OffloadHardwareInterface$ForwardedStats getForwardedStats(java.lang.String) -> getForwardedStats
    116:116:java.lang.String halVerToString(int) -> halVerToString
    282:324:boolean initOffloadConfig() -> initOffloadConfig
    369:403:int initOffloadControl(com.android.networkstack.tethering.OffloadHardwareInterface$ControlCallback) -> initOffloadControl
    550:551:void lambda$addDownstreamPrefix$8(com.android.networkstack.tethering.OffloadHardwareInterface$CbResults,boolean,java.lang.String) -> lambda$addDownstreamPrefix$8
    433:434:void lambda$getForwardedStats$3(com.android.networkstack.tethering.OffloadHardwareInterface$ForwardedStats,long,long) -> lambda$getForwardedStats$3
    312:313:void lambda$initOffloadConfig$0(com.android.networkstack.tethering.OffloadHardwareInterface$CbResults,boolean,java.lang.String) -> lambda$initOffloadConfig$0
    394:395:void lambda$initOffloadControl$1(com.android.networkstack.tethering.OffloadHardwareInterface$CbResults,boolean,java.lang.String) -> lambda$initOffloadControl$1
    570:571:void lambda$removeDownstreamPrefix$9(com.android.networkstack.tethering.OffloadHardwareInterface$CbResults,boolean,java.lang.String) -> lambda$removeDownstreamPrefix$9
    475:476:void lambda$setDataLimit$5(com.android.networkstack.tethering.OffloadHardwareInterface$CbResults,boolean,java.lang.String) -> lambda$setDataLimit$5
    502:503:void lambda$setDataWarningAndLimit$6(com.android.networkstack.tethering.OffloadHardwareInterface$CbResults,boolean,java.lang.String) -> lambda$setDataWarningAndLimit$6
    453:454:void lambda$setLocalPrefixes$4(com.android.networkstack.tethering.OffloadHardwareInterface$CbResults,boolean,java.lang.String) -> lambda$setLocalPrefixes$4
    530:531:void lambda$setUpstreamParameters$7(com.android.networkstack.tethering.OffloadHardwareInterface$CbResults,boolean,java.lang.String) -> lambda$setUpstreamParameters$7
    412:412:void lambda$stopOffloadControl$2(boolean,java.lang.String) -> lambda$stopOffloadControl$2
    673:678:int networkProtocolToOsConstant(int) -> networkProtocolToOsConstant
    583:583:void record(java.lang.String,java.lang.Throwable) -> record
    587:591:void record(java.lang.String,com.android.networkstack.tethering.OffloadHardwareInterface$CbResults) -> record
    564:579:boolean removeDownstreamPrefix(java.lang.String,java.lang.String) -> removeDownstreamPrefix
    331:349:void sendIpv4NfGenMsg(android.os.NativeHandle,short,short) -> sendIpv4NfGenMsg
    468:484:boolean setDataLimit(java.lang.String,long) -> setDataLimit
    489:511:boolean setDataWarningAndLimit(java.lang.String,long,long) -> setDataWarningAndLimit
    446:462:boolean setLocalPrefixes(java.util.ArrayList) -> setLocalPrefixes
    520:539:boolean setUpstreamParameters(java.lang.String,java.lang.String,java.lang.String,java.util.ArrayList) -> setUpstreamParameters
    408:421:void stopOffloadControl() -> stopOffloadControl
com.android.networkstack.tethering.OffloadHardwareInterface$$ExternalSyntheticLambda0 -> com.android.networkstack.tethering.OffloadHardwareInterface$$ExternalSyntheticLambda0:
    com.android.networkstack.tethering.OffloadHardwareInterface$CbResults com.android.networkstack.tethering.OffloadHardwareInterface$$InternalSyntheticLambda$1$b503d78bdd2cb373c83586f6293921b9c152c8f4236c1c53e49336f2a3ef10bf$0.f$0 -> f$0
    void com.android.networkstack.tethering.OffloadHardwareInterface$$InternalSyntheticLambda$1$b503d78bdd2cb373c83586f6293921b9c152c8f4236c1c53e49336f2a3ef10bf$0.<init>(com.android.networkstack.tethering.OffloadHardwareInterface$CbResults) -> <init>
    void com.android.networkstack.tethering.OffloadHardwareInterface$$InternalSyntheticLambda$1$b503d78bdd2cb373c83586f6293921b9c152c8f4236c1c53e49336f2a3ef10bf$0.onValues(boolean,java.lang.String) -> onValues
com.android.networkstack.tethering.OffloadHardwareInterface$$ExternalSyntheticLambda1 -> com.android.networkstack.tethering.OffloadHardwareInterface$$ExternalSyntheticLambda1:
    com.android.networkstack.tethering.OffloadHardwareInterface$CbResults com.android.networkstack.tethering.OffloadHardwareInterface$$InternalSyntheticLambda$1$469fb2fe0a4687a3b8c9a66262fd87106535ca815ca74a31ed0669304d33d194$0.f$0 -> f$0
    void com.android.networkstack.tethering.OffloadHardwareInterface$$InternalSyntheticLambda$1$469fb2fe0a4687a3b8c9a66262fd87106535ca815ca74a31ed0669304d33d194$0.<init>(com.android.networkstack.tethering.OffloadHardwareInterface$CbResults) -> <init>
    void com.android.networkstack.tethering.OffloadHardwareInterface$$InternalSyntheticLambda$1$469fb2fe0a4687a3b8c9a66262fd87106535ca815ca74a31ed0669304d33d194$0.onValues(boolean,java.lang.String) -> onValues
com.android.networkstack.tethering.OffloadHardwareInterface$$ExternalSyntheticLambda2 -> com.android.networkstack.tethering.OffloadHardwareInterface$$ExternalSyntheticLambda2:
    com.android.networkstack.tethering.OffloadHardwareInterface$ForwardedStats com.android.networkstack.tethering.OffloadHardwareInterface$$InternalSyntheticLambda$1$b5de93c387af1f12555229c8fd1d71087a983bab9a0f28b3b4b4f9726bcb5f24$0.f$0 -> f$0
    void com.android.networkstack.tethering.OffloadHardwareInterface$$InternalSyntheticLambda$1$b5de93c387af1f12555229c8fd1d71087a983bab9a0f28b3b4b4f9726bcb5f24$0.<init>(com.android.networkstack.tethering.OffloadHardwareInterface$ForwardedStats) -> <init>
    void com.android.networkstack.tethering.OffloadHardwareInterface$$InternalSyntheticLambda$1$b5de93c387af1f12555229c8fd1d71087a983bab9a0f28b3b4b4f9726bcb5f24$0.onValues(long,long) -> onValues
com.android.networkstack.tethering.OffloadHardwareInterface$$ExternalSyntheticLambda3 -> com.android.networkstack.tethering.OffloadHardwareInterface$$ExternalSyntheticLambda3:
    com.android.networkstack.tethering.OffloadHardwareInterface$CbResults com.android.networkstack.tethering.OffloadHardwareInterface$$InternalSyntheticLambda$1$598ea878a1c1bb8afddf429cc4ee35988648db56959741bf7051aaa6a4cbcc89$0.f$0 -> f$0
    void com.android.networkstack.tethering.OffloadHardwareInterface$$InternalSyntheticLambda$1$598ea878a1c1bb8afddf429cc4ee35988648db56959741bf7051aaa6a4cbcc89$0.<init>(com.android.networkstack.tethering.OffloadHardwareInterface$CbResults) -> <init>
    void com.android.networkstack.tethering.OffloadHardwareInterface$$InternalSyntheticLambda$1$598ea878a1c1bb8afddf429cc4ee35988648db56959741bf7051aaa6a4cbcc89$0.onValues(boolean,java.lang.String) -> onValues
com.android.networkstack.tethering.OffloadHardwareInterface$$ExternalSyntheticLambda4 -> com.android.networkstack.tethering.OffloadHardwareInterface$$ExternalSyntheticLambda4:
    com.android.networkstack.tethering.OffloadHardwareInterface$CbResults com.android.networkstack.tethering.OffloadHardwareInterface$$InternalSyntheticLambda$1$013e253966621b2857e77f6e5f026b23b98291d8f243bca73e3a483a2c936610$0.f$0 -> f$0
    void com.android.networkstack.tethering.OffloadHardwareInterface$$InternalSyntheticLambda$1$013e253966621b2857e77f6e5f026b23b98291d8f243bca73e3a483a2c936610$0.<init>(com.android.networkstack.tethering.OffloadHardwareInterface$CbResults) -> <init>
    void com.android.networkstack.tethering.OffloadHardwareInterface$$InternalSyntheticLambda$1$013e253966621b2857e77f6e5f026b23b98291d8f243bca73e3a483a2c936610$0.onValues(boolean,java.lang.String) -> onValues
com.android.networkstack.tethering.OffloadHardwareInterface$$ExternalSyntheticLambda5 -> com.android.networkstack.tethering.OffloadHardwareInterface$$ExternalSyntheticLambda5:
    com.android.networkstack.tethering.OffloadHardwareInterface$CbResults com.android.networkstack.tethering.OffloadHardwareInterface$$InternalSyntheticLambda$1$9fed7d5c1ab524cdadfdbdda1a69efd196d39aad5ffe5074aae6df141c27af3d$0.f$0 -> f$0
    void com.android.networkstack.tethering.OffloadHardwareInterface$$InternalSyntheticLambda$1$9fed7d5c1ab524cdadfdbdda1a69efd196d39aad5ffe5074aae6df141c27af3d$0.<init>(com.android.networkstack.tethering.OffloadHardwareInterface$CbResults) -> <init>
    void com.android.networkstack.tethering.OffloadHardwareInterface$$InternalSyntheticLambda$1$9fed7d5c1ab524cdadfdbdda1a69efd196d39aad5ffe5074aae6df141c27af3d$0.onValues(boolean,java.lang.String) -> onValues
com.android.networkstack.tethering.OffloadHardwareInterface$$ExternalSyntheticLambda6 -> com.android.networkstack.tethering.OffloadHardwareInterface$$ExternalSyntheticLambda6:
    com.android.networkstack.tethering.OffloadHardwareInterface$CbResults com.android.networkstack.tethering.OffloadHardwareInterface$$InternalSyntheticLambda$1$73814e59654cb7787f6309e28f61c32bf194464816ada86fdd3bd284ccb253b4$0.f$0 -> f$0
    void com.android.networkstack.tethering.OffloadHardwareInterface$$InternalSyntheticLambda$1$73814e59654cb7787f6309e28f61c32bf194464816ada86fdd3bd284ccb253b4$0.<init>(com.android.networkstack.tethering.OffloadHardwareInterface$CbResults) -> <init>
    void com.android.networkstack.tethering.OffloadHardwareInterface$$InternalSyntheticLambda$1$73814e59654cb7787f6309e28f61c32bf194464816ada86fdd3bd284ccb253b4$0.onValues(boolean,java.lang.String) -> onValues
com.android.networkstack.tethering.OffloadHardwareInterface$$ExternalSyntheticLambda7 -> com.android.networkstack.tethering.OffloadHardwareInterface$$ExternalSyntheticLambda7:
    com.android.networkstack.tethering.OffloadHardwareInterface$CbResults com.android.networkstack.tethering.OffloadHardwareInterface$$InternalSyntheticLambda$1$189bfc0a6c1a77fa303d1313a363588bcc5f1bfbb248c3ec447f890604d88d2f$0.f$0 -> f$0
    void com.android.networkstack.tethering.OffloadHardwareInterface$$InternalSyntheticLambda$1$189bfc0a6c1a77fa303d1313a363588bcc5f1bfbb248c3ec447f890604d88d2f$0.<init>(com.android.networkstack.tethering.OffloadHardwareInterface$CbResults) -> <init>
    void com.android.networkstack.tethering.OffloadHardwareInterface$$InternalSyntheticLambda$1$189bfc0a6c1a77fa303d1313a363588bcc5f1bfbb248c3ec447f890604d88d2f$0.onValues(boolean,java.lang.String) -> onValues
com.android.networkstack.tethering.OffloadHardwareInterface$$ExternalSyntheticLambda8 -> com.android.networkstack.tethering.OffloadHardwareInterface$$ExternalSyntheticLambda8:
    com.android.networkstack.tethering.OffloadHardwareInterface com.android.networkstack.tethering.OffloadHardwareInterface$$InternalSyntheticLambda$1$0d378310e58ec7bbd1eeea564665d0ac7f3a8514ac5da48ca398f4b05de29ad1$0.f$0 -> f$0
    void com.android.networkstack.tethering.OffloadHardwareInterface$$InternalSyntheticLambda$1$0d378310e58ec7bbd1eeea564665d0ac7f3a8514ac5da48ca398f4b05de29ad1$0.<init>(com.android.networkstack.tethering.OffloadHardwareInterface) -> <init>
    void com.android.networkstack.tethering.OffloadHardwareInterface$$InternalSyntheticLambda$1$0d378310e58ec7bbd1eeea564665d0ac7f3a8514ac5da48ca398f4b05de29ad1$0.onValues(boolean,java.lang.String) -> onValues
com.android.networkstack.tethering.OffloadHardwareInterface$$ExternalSyntheticLambda9 -> com.android.networkstack.tethering.OffloadHardwareInterface$$ExternalSyntheticLambda9:
    com.android.networkstack.tethering.OffloadHardwareInterface$CbResults com.android.networkstack.tethering.OffloadHardwareInterface$$InternalSyntheticLambda$1$be6d3d39831b4718749ac2f7ce878b9b12419843db70063cea4efbf2b5de8e25$0.f$0 -> f$0
    void com.android.networkstack.tethering.OffloadHardwareInterface$$InternalSyntheticLambda$1$be6d3d39831b4718749ac2f7ce878b9b12419843db70063cea4efbf2b5de8e25$0.<init>(com.android.networkstack.tethering.OffloadHardwareInterface$CbResults) -> <init>
    void com.android.networkstack.tethering.OffloadHardwareInterface$$InternalSyntheticLambda$1$be6d3d39831b4718749ac2f7ce878b9b12419843db70063cea4efbf2b5de8e25$0.onValues(boolean,java.lang.String) -> onValues
com.android.networkstack.tethering.OffloadHardwareInterface$CbResults -> com.android.networkstack.tethering.OffloadHardwareInterface$CbResults:
    682:682:void <init>() -> <init>
    682:682:void <init>(com.android.networkstack.tethering.OffloadHardwareInterface$1) -> <init>
    688:691:java.lang.String toString() -> toString
com.android.networkstack.tethering.OffloadHardwareInterface$ControlCallback -> com.android.networkstack.tethering.OffloadHardwareInterface$ControlCallback:
    125:125:void <init>() -> <init>
com.android.networkstack.tethering.OffloadHardwareInterface$Dependencies -> com.android.networkstack.tethering.OffloadHardwareInterface$Dependencies:
    195:196:void <init>(android.net.util.SharedLog) -> <init>
    237:267:android.os.NativeHandle createConntrackSocket(int) -> createConntrackSocket
    201:203:android.hardware.tetheroffload.config.V1_0.IOffloadConfig getOffloadConfig() -> getOffloadConfig
    214:231:android.util.Pair getOffloadControl() -> getOffloadControl
com.android.networkstack.tethering.OffloadHardwareInterface$ForwardedStats -> com.android.networkstack.tethering.OffloadHardwareInterface$ForwardedStats:
    158:160:void <init>() -> <init>
    164:166:void <init>(long,long) -> <init>
    171:172:void add(com.android.networkstack.tethering.OffloadHardwareInterface$ForwardedStats) -> add
    177:177:java.lang.String toString() -> toString
com.android.networkstack.tethering.OffloadHardwareInterface$TetheringOffloadCallback -> com.android.networkstack.tethering.OffloadHardwareInterface$TetheringOffloadCallback:
    602:606:void <init>(android.os.Handler,com.android.networkstack.tethering.OffloadHardwareInterface$ControlCallback,android.net.util.SharedLog,int) -> <init>
    612:631:void handleOnEvent(int) -> handleOnEvent
    644:644:void lambda$onEvent$0(int) -> lambda$onEvent$0
    656:656:void lambda$onEvent_1_1$1(int) -> lambda$onEvent_1_1$1
    663:666:void lambda$updateTimeout$2(android.hardware.tetheroffload.control.V1_0.NatTimeoutUpdate) -> lambda$updateTimeout$2
    639:643:void onEvent(int) -> onEvent
    650:655:void onEvent_1_1(int) -> onEvent_1_1
    662:662:void updateTimeout(android.hardware.tetheroffload.control.V1_0.NatTimeoutUpdate) -> updateTimeout
com.android.networkstack.tethering.OffloadHardwareInterface$TetheringOffloadCallback$$ExternalSyntheticLambda0 -> com.android.networkstack.tethering.OffloadHardwareInterface$TetheringOffloadCallback$$ExternalSyntheticLambda0:
    com.android.networkstack.tethering.OffloadHardwareInterface$TetheringOffloadCallback com.android.networkstack.tethering.OffloadHardwareInterface$TetheringOffloadCallback$$InternalSyntheticLambda$2$abebd8a96dbd8b8d183f17f2f9efbdc4d4ad880f1cf2fd6982600de2a205f758$0.f$0 -> f$0
    int com.android.networkstack.tethering.OffloadHardwareInterface$TetheringOffloadCallback$$InternalSyntheticLambda$2$abebd8a96dbd8b8d183f17f2f9efbdc4d4ad880f1cf2fd6982600de2a205f758$0.f$1 -> f$1
    void com.android.networkstack.tethering.OffloadHardwareInterface$TetheringOffloadCallback$$InternalSyntheticLambda$2$abebd8a96dbd8b8d183f17f2f9efbdc4d4ad880f1cf2fd6982600de2a205f758$0.<init>(com.android.networkstack.tethering.OffloadHardwareInterface$TetheringOffloadCallback,int) -> <init>
    void com.android.networkstack.tethering.OffloadHardwareInterface$TetheringOffloadCallback$$InternalSyntheticLambda$2$abebd8a96dbd8b8d183f17f2f9efbdc4d4ad880f1cf2fd6982600de2a205f758$0.run() -> run
com.android.networkstack.tethering.OffloadHardwareInterface$TetheringOffloadCallback$$ExternalSyntheticLambda1 -> com.android.networkstack.tethering.OffloadHardwareInterface$TetheringOffloadCallback$$ExternalSyntheticLambda1:
    com.android.networkstack.tethering.OffloadHardwareInterface$TetheringOffloadCallback com.android.networkstack.tethering.OffloadHardwareInterface$TetheringOffloadCallback$$InternalSyntheticLambda$2$0b71ff7ea8a1302ec1d8d5ad08ba3c7ef844237cdfd0845408c4955673794ae1$0.f$0 -> f$0
    int com.android.networkstack.tethering.OffloadHardwareInterface$TetheringOffloadCallback$$InternalSyntheticLambda$2$0b71ff7ea8a1302ec1d8d5ad08ba3c7ef844237cdfd0845408c4955673794ae1$0.f$1 -> f$1
    void com.android.networkstack.tethering.OffloadHardwareInterface$TetheringOffloadCallback$$InternalSyntheticLambda$2$0b71ff7ea8a1302ec1d8d5ad08ba3c7ef844237cdfd0845408c4955673794ae1$0.<init>(com.android.networkstack.tethering.OffloadHardwareInterface$TetheringOffloadCallback,int) -> <init>
    void com.android.networkstack.tethering.OffloadHardwareInterface$TetheringOffloadCallback$$InternalSyntheticLambda$2$0b71ff7ea8a1302ec1d8d5ad08ba3c7ef844237cdfd0845408c4955673794ae1$0.run() -> run
com.android.networkstack.tethering.OffloadHardwareInterface$TetheringOffloadCallback$$ExternalSyntheticLambda2 -> com.android.networkstack.tethering.OffloadHardwareInterface$TetheringOffloadCallback$$ExternalSyntheticLambda2:
    com.android.networkstack.tethering.OffloadHardwareInterface$TetheringOffloadCallback com.android.networkstack.tethering.OffloadHardwareInterface$TetheringOffloadCallback$$InternalSyntheticLambda$2$c1a84f0966509b78170a2a37038b279b7b158de44c7c97051c6a26547cac0192$0.f$0 -> f$0
    android.hardware.tetheroffload.control.V1_0.NatTimeoutUpdate com.android.networkstack.tethering.OffloadHardwareInterface$TetheringOffloadCallback$$InternalSyntheticLambda$2$c1a84f0966509b78170a2a37038b279b7b158de44c7c97051c6a26547cac0192$0.f$1 -> f$1
    void com.android.networkstack.tethering.OffloadHardwareInterface$TetheringOffloadCallback$$InternalSyntheticLambda$2$c1a84f0966509b78170a2a37038b279b7b158de44c7c97051c6a26547cac0192$0.<init>(com.android.networkstack.tethering.OffloadHardwareInterface$TetheringOffloadCallback,android.hardware.tetheroffload.control.V1_0.NatTimeoutUpdate) -> <init>
    void com.android.networkstack.tethering.OffloadHardwareInterface$TetheringOffloadCallback$$InternalSyntheticLambda$2$c1a84f0966509b78170a2a37038b279b7b158de44c7c97051c6a26547cac0192$0.run() -> run
com.android.networkstack.tethering.PrivateAddressCoordinator -> com.android.networkstack.tethering.PrivateAddressCoordinator:
    82:96:void <init>(android.content.Context,com.android.networkstack.tethering.TetheringConfiguration) -> <init>
    236:278:android.net.LinkAddress chooseDownstreamAddress(android.net.IpPrefix) -> chooseDownstreamAddress
    388:414:void dump(com.android.networkstack.tethering.util.IndentingPrintWriter) -> dump
    292:299:android.net.IpPrefix findAvailablePrefixFromRange(int,int,int,int) -> findAvailablePrefixFromRange
    207:210:android.net.IpPrefix getConflictPrefix(android.net.IpPrefix) -> getConflictPrefix
    340:343:android.net.IpPrefix getConflictWithUpstream(android.net.IpPrefix) -> getConflictWithUpstream
    382:384:android.net.IpPrefix getDownstreamPrefix(android.net.ip.IpServer) -> getDownstreamPrefix
    364:374:android.net.IpPrefix getInUseDownstreamPrefix(android.net.IpPrefix) -> getInUseDownstreamPrefix
    125:129:java.util.ArrayList getIpv4Prefixes(java.util.List) -> getIpv4Prefixes
    284:285:android.net.LinkAddress getLinkAddress(android.net.IpPrefix,int) -> getLinkAddress
    220:226:int getNextSubPrefix(android.net.IpPrefix,int) -> getNextSubPrefix
    199:199:int getPrefixBaseAddress(android.net.IpPrefix) -> getPrefixBaseAddress
    308:308:int getRandomInt() -> getRandomInt
    313:313:int getSanitizedSubAddr(int) -> getSanitizedSubAddr
    136:141:void handleMaybePrefixConflict(java.util.List) -> handleMaybePrefixConflict
    354:358:boolean isConflictPrefix(android.net.IpPrefix,android.net.IpPrefix) -> isConflictPrefix
    350:350:boolean isConflictWithUpstream(android.net.IpPrefix) -> isConflictWithUpstream
    158:164:void maybeRemoveDeprecatedUpstreams() -> maybeRemoveDeprecatedUpstreams
    331:331:void releaseDownstream(android.net.ip.IpServer) -> releaseDownstream
    150:150:void removeUpstreamPrefix(android.net.Network) -> removeUpstreamPrefix
    173:189:android.net.LinkAddress requestDownstreamAddress(android.net.ip.IpServer,boolean) -> requestDownstreamAddress
    108:121:void updateUpstreamPrefix(com.android.networkstack.tethering.UpstreamNetworkState) -> updateUpstreamPrefix
com.android.networkstack.tethering.Tether4Key -> com.android.networkstack.tethering.Tether4Key:
    56:65:void <init>(long,android.net.MacAddress,short,byte[],byte[],int,int) -> <init>
    71:78:java.lang.String toString() -> toString
com.android.networkstack.tethering.Tether4Value -> com.android.networkstack.tethering.Tether4Value:
    66:79:void <init>(long,android.net.MacAddress,android.net.MacAddress,int,int,byte[],byte[],int,int,long) -> <init>
    85:94:java.lang.String toString() -> toString
com.android.networkstack.tethering.Tether6Value -> com.android.networkstack.tethering.Tether6Value:
    44:52:void <init>(int,android.net.MacAddress,android.net.MacAddress,int,int) -> <init>
    57:58:java.lang.String toString() -> toString
com.android.networkstack.tethering.TetherDevKey -> com.android.networkstack.tethering.TetherDevKey:
    28:29:void <init>(long) -> <init>
com.android.networkstack.tethering.TetherDevValue -> com.android.networkstack.tethering.TetherDevValue:
    28:29:void <init>(long) -> <init>
com.android.networkstack.tethering.TetherDownstream6Key -> com.android.networkstack.tethering.TetherDownstream6Key:
    45:56:void <init>(long,android.net.MacAddress,byte[]) -> <init>
    62:66:java.lang.String toString() -> toString
com.android.networkstack.tethering.TetherLimitKey -> com.android.networkstack.tethering.TetherLimitKey:
    28:29:void <init>(long) -> <init>
    37:41:boolean equals(java.lang.Object) -> equals
    46:46:int hashCode() -> hashCode
    51:51:java.lang.String toString() -> toString
com.android.networkstack.tethering.TetherLimitValue -> com.android.networkstack.tethering.TetherLimitValue:
    32:33:void <init>(long) -> <init>
    41:45:boolean equals(java.lang.Object) -> equals
    50:50:int hashCode() -> hashCode
    55:55:java.lang.String toString() -> toString
com.android.networkstack.tethering.TetherStatsKey -> com.android.networkstack.tethering.TetherStatsKey:
    28:29:void <init>(long) -> <init>
    37:41:boolean equals(java.lang.Object) -> equals
    46:46:int hashCode() -> hashCode
    51:51:java.lang.String toString() -> toString
com.android.networkstack.tethering.TetherStatsValue -> com.android.networkstack.tethering.TetherStatsValue:
    42:48:void <init>(long,long,long,long,long,long) -> <init>
    56:60:boolean equals(java.lang.Object) -> equals
    70:71:int hashCode() -> hashCode
    76:78:java.lang.String toString() -> toString
com.android.networkstack.tethering.TetherUpstream6Key -> com.android.networkstack.tethering.TetherUpstream6Key:
    35:39:void <init>(int,android.net.MacAddress) -> <init>
com.android.networkstack.tethering.Tethering -> com.android.networkstack.tethering.Tethering:
    172:176:void <clinit>() -> <clinit>
    221:374:void <init>(com.android.networkstack.tethering.TetheringDependencies) -> <init>
    166:166:com.android.networkstack.tethering.TetheringConfiguration access$000(com.android.networkstack.tethering.Tethering) -> access$000
    166:166:int access$1000(com.android.networkstack.tethering.Tethering) -> access$1000
    166:166:int access$1002(com.android.networkstack.tethering.Tethering,int) -> access$1002
    166:166:com.android.networkstack.tethering.TetheringNotificationUpdater access$1100(com.android.networkstack.tethering.Tethering) -> access$1100
    166:166:com.android.networkstack.tethering.EntitlementManager access$1200(com.android.networkstack.tethering.Tethering) -> access$1200
    166:166:void access$1300(com.android.networkstack.tethering.Tethering,java.util.List) -> access$1300
    166:166:void access$1400(com.android.networkstack.tethering.Tethering,android.net.IIntResultListener,int,int) -> access$1400
    166:166:com.android.networkstack.tethering.Tethering$EthernetCallback access$1600(com.android.networkstack.tethering.Tethering) -> access$1600
    166:166:int access$1700(com.android.networkstack.tethering.Tethering,int) -> access$1700
    166:166:void access$1800(com.android.networkstack.tethering.Tethering,int,java.lang.String,int) -> access$1800
    166:166:java.lang.String access$1902(com.android.networkstack.tethering.Tethering,java.lang.String) -> access$1902
    166:166:void access$2000(com.android.networkstack.tethering.Tethering) -> access$2000
    166:166:boolean access$2100(com.android.networkstack.tethering.Tethering) -> access$2100
    166:166:boolean access$2102(com.android.networkstack.tethering.Tethering,boolean) -> access$2102
    166:166:boolean access$2200(com.android.networkstack.tethering.Tethering) -> access$2200
    166:166:boolean access$2202(com.android.networkstack.tethering.Tethering,boolean) -> access$2202
    166:166:void access$2300(com.android.networkstack.tethering.Tethering,boolean) -> access$2300
    166:166:void access$2400(com.android.networkstack.tethering.Tethering,boolean) -> access$2400
    166:166:android.util.ArrayMap access$2500(com.android.networkstack.tethering.Tethering) -> access$2500
    166:166:void access$2600(com.android.networkstack.tethering.Tethering,java.lang.String,int) -> access$2600
    166:166:void access$2700(com.android.networkstack.tethering.Tethering,java.lang.String,int) -> access$2700
    166:166:java.lang.String access$2800(com.android.networkstack.tethering.Tethering) -> access$2800
    166:166:java.lang.String access$2802(com.android.networkstack.tethering.Tethering,java.lang.String) -> access$2802
    166:166:void access$2900(com.android.networkstack.tethering.Tethering,java.lang.String) -> access$2900
    166:166:android.os.Handler access$300(com.android.networkstack.tethering.Tethering) -> access$300
    166:166:com.android.networkstack.tethering.Tethering$UserRestrictionActionListener access$3000(com.android.networkstack.tethering.Tethering) -> access$3000
    166:166:boolean access$3100(com.android.networkstack.tethering.Tethering) -> access$3100
    166:166:boolean access$3102(com.android.networkstack.tethering.Tethering,boolean) -> access$3102
    166:166:void access$3200(com.android.networkstack.tethering.Tethering,com.android.networkstack.tethering.util.State,int) -> access$3200
    166:166:java.lang.String access$3600() -> access$3600
    166:166:void access$3700(com.android.networkstack.tethering.Tethering) -> access$3700
    166:166:com.android.networkstack.tethering.UpstreamNetworkMonitor access$3800(com.android.networkstack.tethering.Tethering) -> access$3800
    166:166:android.net.Network access$3900(com.android.networkstack.tethering.Tethering) -> access$3900
    166:166:android.net.Network access$3902(com.android.networkstack.tethering.Tethering,android.net.Network) -> access$3902
    166:166:android.net.INetd access$400(com.android.networkstack.tethering.Tethering) -> access$400
    166:166:void access$4000(com.android.networkstack.tethering.Tethering,com.android.networkstack.tethering.UpstreamNetworkState) -> access$4000
    166:166:boolean access$4100(com.android.networkstack.tethering.Tethering,com.android.networkstack.tethering.UpstreamNetworkState) -> access$4100
    166:166:android.net.util.InterfaceSet access$4200(com.android.networkstack.tethering.Tethering) -> access$4200
    166:166:android.net.util.InterfaceSet access$4202(com.android.networkstack.tethering.Tethering,android.net.util.InterfaceSet) -> access$4202
    166:166:com.android.networkstack.tethering.BpfCoordinator access$4300(com.android.networkstack.tethering.Tethering) -> access$4300
    166:166:java.util.HashSet access$4400(com.android.networkstack.tethering.Tethering) -> access$4400
    166:166:android.net.wifi.WifiManager access$4500(com.android.networkstack.tethering.Tethering) -> access$4500
    166:166:com.android.networkstack.tethering.PrivateAddressCoordinator access$4600(com.android.networkstack.tethering.Tethering) -> access$4600
    166:166:boolean access$4700(com.android.networkstack.tethering.Tethering) -> access$4700
    166:166:android.content.Context access$500(com.android.networkstack.tethering.Tethering) -> access$500
    166:166:com.android.networkstack.tethering.OffloadController access$5100(com.android.networkstack.tethering.Tethering) -> access$5100
    166:166:int access$5200(com.android.networkstack.tethering.Tethering) -> access$5200
    166:166:int access$5202(com.android.networkstack.tethering.Tethering,int) -> access$5202
    166:166:void access$5300(com.android.networkstack.tethering.Tethering,int) -> access$5300
    166:166:void access$5400(com.android.networkstack.tethering.Tethering,android.net.ip.IpServer,int,int) -> access$5400
    166:166:void access$5500(com.android.networkstack.tethering.Tethering,android.net.ip.IpServer,android.net.LinkProperties) -> access$5500
    166:166:void access$5600(com.android.networkstack.tethering.Tethering,int,boolean,android.net.IIntResultListener) -> access$5600
    166:166:android.net.util.SharedLog access$600(com.android.networkstack.tethering.Tethering) -> access$600
    166:166:void access$700(com.android.networkstack.tethering.Tethering) -> access$700
    166:166:com.android.networkstack.tethering.Tethering$TetherMainSM access$900(com.android.networkstack.tethering.Tethering) -> access$900
    2477:2478:boolean argsContain(java.lang.String[],java.lang.String) -> argsContain
    1005:1011:android.content.Intent buildStateChangeIntent(java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList) -> buildStateChangeIntent
    987:995:android.net.TetherStatesParcel buildTetherStatesParcel(java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList) -> buildTetherStatesParcel
    1397:1408:void changeInterfaceState(java.lang.String,int) -> changeInterfaceState
    1381:1387:void disableUsbIpServing(boolean) -> disableUsbIpServing
    1307:1309:void disableWifiIpServing(java.lang.String,int) -> disableWifiIpServing
    1276:1299:void disableWifiIpServingCommon(int,java.lang.String,int) -> disableWifiIpServingCommon
    1313:1315:void disableWifiP2pIpServingIfNeeded(java.lang.String) -> disableWifiP2pIpServingIfNeeded
    2366:2439:void doDump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> doDump
    888:894:boolean doesEntitlementPackageExist() -> doesEntitlementPackageExist
    2443:2473:void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    2358:2361:void dumpBpf(com.android.networkstack.tethering.util.IndentingPrintWriter) -> dumpBpf
    2238:2243:android.net.TetherStatesParcel emptyTetherStatesParcel() -> emptyTetherStatesParcel
    1266:1266:void enableIpServing(int,java.lang.String,int) -> enableIpServing
    1271:1272:void enableIpServing(int,java.lang.String,int,boolean) -> enableIpServing
    651:672:void enableTetheringInternal(int,boolean,android.net.IIntResultListener) -> enableTetheringInternal
    1358:1377:void enableUsbIpServing(boolean) -> enableUsbIpServing
    1330:1340:void enableWifiIpServing(java.lang.String,int) -> enableWifiIpServing
    2571:2589:void ensureIpServerStarted(java.lang.String) -> ensureIpServerStarted
    2594:2606:void ensureIpServerStarted(java.lang.String,int,boolean) -> ensureIpServerStarted
    2610:2615:void ensureIpServerStopped(java.lang.String) -> ensureIpServerStopped
    1208:1208:android.util.SparseArray getActiveTetheringRequests() -> getActiveTetheringRequests
    868:874:int getLastErrorForTest(java.lang.String) -> getLastErrorForTest
    902:910:int getRequestedState(int) -> getRequestedState
    919:919:int getServedUsbType(boolean) -> getServedUsbType
    396:396:android.database.ContentObserver getSettingsObserverForTest() -> getSettingsObserverForTest
    1466:1473:java.lang.String[] getTetheredIfaces() -> getTetheredIfaces
    486:486:android.net.wifi.WifiManager getWifiManager() -> getWifiManager
    2249:2249:boolean hasCallingPermission(java.lang.String) -> hasCallingPermission
    1418:1423:boolean hasTetherableConfiguration() -> hasTetherableConfiguration
    579:591:int ifaceNameToType(java.lang.String) -> ifaceNameToType
    599:599:void interfaceAdded(java.lang.String) -> interfaceAdded
    575:575:void interfaceLinkStateChanged(java.lang.String,boolean) -> interfaceLinkStateChanged
    604:604:void interfaceRemoved(java.lang.String) -> interfaceRemoved
    561:571:void interfaceStatusChanged(java.lang.String,boolean) -> interfaceStatusChanged
    878:878:boolean isProvisioningNeededButUnavailable() -> isProvisioningNeededButUnavailable
    882:883:boolean isTetherProvisioningRequired() -> isTetherProvisioningRequired
    1213:1213:boolean isTetheringActive() -> isTetheringActive
    2347:2354:boolean isTetheringSupported() -> isTetheringSupported
    2456:2460:void lambda$dump$12(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],java.util.concurrent.atomic.AtomicReference,java.util.concurrent.CountDownLatch) -> lambda$dump$12
    306:306:void lambda$new$0() -> lambda$new$0
    309:310:void lambda$new$1(int) -> lambda$new$1
    313:313:com.android.networkstack.tethering.TetheringConfiguration lambda$new$2() -> lambda$new$2
    319:321:void lambda$new$3(android.content.Intent) -> lambda$new$3
    2218:2230:void lambda$registerTetheringEventCallback$10(android.net.ITetheringEventCallback,boolean) -> lambda$registerTetheringEventCallback$10
    2206:2206:void lambda$requestLatestTetheringEntitlementResult$9(int,android.os.ResultReceiver,boolean) -> lambda$requestLatestTetheringEntitlementResult$9
    1432:1432:void lambda$setUsbTethering$8(android.net.IIntResultListener,boolean) -> lambda$setUsbTethering$8
    609:626:void lambda$startTethering$4(android.net.TetheringRequestParcel,android.net.IIntResultListener) -> lambda$startTethering$4
    632:632:void lambda$stopTethering$5(int) -> lambda$stopTethering$5
    802:802:void lambda$tether$6(android.net.IIntResultListener,java.lang.String,int) -> lambda$tether$6
    2255:2255:void lambda$unregisterTetheringEventCallback$11(android.net.ITetheringEventCallback) -> lambda$unregisterTetheringEventCallback$11
    837:837:void lambda$untether$7(android.net.IIntResultListener,java.lang.String) -> lambda$untether$7
    1488:1488:void logMessage(com.android.networkstack.tethering.util.State,int) -> logMessage
    2491:2491:android.net.ip.IpServer$Callback makeControlCallback() -> makeControlCallback
    498:500:void maybeDunSettingChanged() -> maybeDunSettingChanged
    2516:2548:void notifyInterfaceStateChange(android.net.ip.IpServer,int,int) -> notifyInterfaceStateChange
    2552:2566:void notifyLinkPropertiesChanged(android.net.ip.IpServer,android.net.LinkProperties) -> notifyLinkPropertiesChanged
    1499:1501:boolean pertainsToCurrentUpstream(com.android.networkstack.tethering.UpstreamNetworkState) -> pertainsToCurrentUpstream
    546:552:void processInterfaceStateChange(java.lang.String,boolean) -> processInterfaceStateChange
    2214:2217:void registerTetheringEventCallback(android.net.ITetheringEventCallback) -> registerTetheringEventCallback
    2280:2292:void reportConfigurationChanged(android.net.TetheringConfigurationParcel) -> reportConfigurationChanged
    2329:2340:void reportOffloadStatusChanged(int) -> reportOffloadStatusChanged
    2311:2325:void reportTetherClientsChanged(java.util.List) -> reportTetherClientsChanged
    2296:2307:void reportTetherStateChanged(android.net.TetherStatesParcel) -> reportTetherStateChanged
    2260:2276:void reportUpstreamChanged(com.android.networkstack.tethering.UpstreamNetworkState) -> reportUpstreamChanged
    2205:2205:void requestLatestTetheringEntitlementResult(int,android.os.ResultReceiver,boolean) -> requestLatestTetheringEntitlementResult
    680:686:void sendTetherResult(android.net.IIntResultListener,int,int) -> sendTetherResult
    926:978:void sendTetherStateChangedBroadcast() -> sendTetherStateChangedBroadcast
    710:718:void setBluetoothTethering(boolean,android.net.IIntResultListener) -> setBluetoothTethering
    750:761:int setEthernetTethering(boolean) -> setEthernetTethering
    1457:1460:int setNcmTethering(boolean) -> setNcmTethering
    1430:1430:void setUsbTethering(boolean,android.net.IIntResultListener) -> setUsbTethering
    1439:1447:int setUsbTethering(boolean) -> setUsbTethering
    690:704:int setWifiTethering(boolean) -> setWifiTethering
    405:443:void startStateMachineUpdaters() -> startStateMachineUpdaters
    608:608:void startTethering(android.net.TetheringRequestParcel,android.net.IIntResultListener) -> startTethering
    2197:2197:void startTrackDefaultNetwork() -> startTrackDefaultNetwork
    767:774:void stopEthernetTethering() -> stopEthernetTethering
    631:631:void stopTethering(int) -> stopTethering
    636:639:void stopTetheringInternal(int) -> stopTetheringInternal
    800:800:void tether(java.lang.String,int,android.net.IIntResultListener) -> tether
    809:829:int tether(java.lang.String,int) -> tether
    2254:2254:void unregisterTetheringEventCallback(android.net.ITetheringEventCallback) -> unregisterTetheringEventCallback
    835:835:void untether(java.lang.String,android.net.IIntResultListener) -> untether
    845:854:int untether(java.lang.String) -> untether
    859:863:void untetherAll() -> untetherAll
    491:494:void updateConfiguration() -> updateConfiguration
    2484:2486:void updateConnectedClients(java.util.List) -> updateConnectedClients
    1492:1493:boolean upstreamWanted() -> upstreamWanted
com.android.networkstack.tethering.Tethering$$ExternalSyntheticLambda0 -> com.android.networkstack.tethering.Tethering$$ExternalSyntheticLambda0:
    com.android.networkstack.tethering.Tethering com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$79d9c7b8fe27e799c1df4ec601560e872d8f802379e56e71a6ebf28ef20b4b9f$1.f$0 -> f$0
    void com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$79d9c7b8fe27e799c1df4ec601560e872d8f802379e56e71a6ebf28ef20b4b9f$1.<init>(com.android.networkstack.tethering.Tethering) -> <init>
    void com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$79d9c7b8fe27e799c1df4ec601560e872d8f802379e56e71a6ebf28ef20b4b9f$1.onUiEntitlementFailed(int) -> onUiEntitlementFailed
com.android.networkstack.tethering.Tethering$$ExternalSyntheticLambda1 -> com.android.networkstack.tethering.Tethering$$ExternalSyntheticLambda1:
    com.android.networkstack.tethering.Tethering com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$79d9c7b8fe27e799c1df4ec601560e872d8f802379e56e71a6ebf28ef20b4b9f$2.f$0 -> f$0
    void com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$79d9c7b8fe27e799c1df4ec601560e872d8f802379e56e71a6ebf28ef20b4b9f$2.<init>(com.android.networkstack.tethering.Tethering) -> <init>
    com.android.networkstack.tethering.TetheringConfiguration com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$79d9c7b8fe27e799c1df4ec601560e872d8f802379e56e71a6ebf28ef20b4b9f$2.fetchTetheringConfiguration() -> fetchTetheringConfiguration
com.android.networkstack.tethering.Tethering$$ExternalSyntheticLambda10 -> com.android.networkstack.tethering.Tethering$$ExternalSyntheticLambda10:
    android.net.TetheringRequestParcel com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$afdfc8d6d3d831aa2b27cf591499fe86a5d18335dc37cef5c0768390314e90b7$0.f$1 -> f$1
    com.android.networkstack.tethering.Tethering com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$afdfc8d6d3d831aa2b27cf591499fe86a5d18335dc37cef5c0768390314e90b7$0.f$0 -> f$0
    android.net.IIntResultListener com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$afdfc8d6d3d831aa2b27cf591499fe86a5d18335dc37cef5c0768390314e90b7$0.f$2 -> f$2
    void com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$afdfc8d6d3d831aa2b27cf591499fe86a5d18335dc37cef5c0768390314e90b7$0.<init>(com.android.networkstack.tethering.Tethering,android.net.TetheringRequestParcel,android.net.IIntResultListener) -> <init>
    void com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$afdfc8d6d3d831aa2b27cf591499fe86a5d18335dc37cef5c0768390314e90b7$0.run() -> run
com.android.networkstack.tethering.Tethering$$ExternalSyntheticLambda11 -> com.android.networkstack.tethering.Tethering$$ExternalSyntheticLambda11:
    java.io.PrintWriter com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$efd5060a53720e5a336c6c5a85dcf40a9905b5c0dae6b6bc55cd056400c6515c$0.f$2 -> f$2
    java.util.concurrent.atomic.AtomicReference com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$efd5060a53720e5a336c6c5a85dcf40a9905b5c0dae6b6bc55cd056400c6515c$0.f$4 -> f$4
    com.android.networkstack.tethering.Tethering com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$efd5060a53720e5a336c6c5a85dcf40a9905b5c0dae6b6bc55cd056400c6515c$0.f$0 -> f$0
    java.util.concurrent.CountDownLatch com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$efd5060a53720e5a336c6c5a85dcf40a9905b5c0dae6b6bc55cd056400c6515c$0.f$5 -> f$5
    java.io.FileDescriptor com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$efd5060a53720e5a336c6c5a85dcf40a9905b5c0dae6b6bc55cd056400c6515c$0.f$1 -> f$1
    java.lang.String[] com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$efd5060a53720e5a336c6c5a85dcf40a9905b5c0dae6b6bc55cd056400c6515c$0.f$3 -> f$3
    void com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$efd5060a53720e5a336c6c5a85dcf40a9905b5c0dae6b6bc55cd056400c6515c$0.<init>(com.android.networkstack.tethering.Tethering,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],java.util.concurrent.atomic.AtomicReference,java.util.concurrent.CountDownLatch) -> <init>
    void com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$efd5060a53720e5a336c6c5a85dcf40a9905b5c0dae6b6bc55cd056400c6515c$0.run() -> run
com.android.networkstack.tethering.Tethering$$ExternalSyntheticLambda12 -> com.android.networkstack.tethering.Tethering$$ExternalSyntheticLambda12:
    com.android.networkstack.tethering.Tethering com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$79d9c7b8fe27e799c1df4ec601560e872d8f802379e56e71a6ebf28ef20b4b9f$3.f$0 -> f$0
    void com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$79d9c7b8fe27e799c1df4ec601560e872d8f802379e56e71a6ebf28ef20b4b9f$3.<init>(com.android.networkstack.tethering.Tethering) -> <init>
    void com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$79d9c7b8fe27e799c1df4ec601560e872d8f802379e56e71a6ebf28ef20b4b9f$3.accept(java.lang.Object) -> accept
com.android.networkstack.tethering.Tethering$$ExternalSyntheticLambda2 -> com.android.networkstack.tethering.Tethering$$ExternalSyntheticLambda2:
    com.android.networkstack.tethering.Tethering com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$79d9c7b8fe27e799c1df4ec601560e872d8f802379e56e71a6ebf28ef20b4b9f$0.f$0 -> f$0
    void com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$79d9c7b8fe27e799c1df4ec601560e872d8f802379e56e71a6ebf28ef20b4b9f$0.<init>(com.android.networkstack.tethering.Tethering) -> <init>
    void com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$79d9c7b8fe27e799c1df4ec601560e872d8f802379e56e71a6ebf28ef20b4b9f$0.run() -> run
com.android.networkstack.tethering.Tethering$$ExternalSyntheticLambda3 -> com.android.networkstack.tethering.Tethering$$ExternalSyntheticLambda3:
    com.android.networkstack.tethering.Tethering com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$2907c478a66acd325de25b1f8d6d879581a18bdef236b8a3e460a1dd1c7c4422$0.f$0 -> f$0
    int com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$2907c478a66acd325de25b1f8d6d879581a18bdef236b8a3e460a1dd1c7c4422$0.f$1 -> f$1
    void com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$2907c478a66acd325de25b1f8d6d879581a18bdef236b8a3e460a1dd1c7c4422$0.<init>(com.android.networkstack.tethering.Tethering,int) -> <init>
    void com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$2907c478a66acd325de25b1f8d6d879581a18bdef236b8a3e460a1dd1c7c4422$0.run() -> run
com.android.networkstack.tethering.Tethering$$ExternalSyntheticLambda4 -> com.android.networkstack.tethering.Tethering$$ExternalSyntheticLambda4:
    android.os.ResultReceiver com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$2daad34966603985da1e908fcd7dce43c65d3686057c6682bf1fbac975becfdb$0.f$2 -> f$2
    com.android.networkstack.tethering.Tethering com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$2daad34966603985da1e908fcd7dce43c65d3686057c6682bf1fbac975becfdb$0.f$0 -> f$0
    boolean com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$2daad34966603985da1e908fcd7dce43c65d3686057c6682bf1fbac975becfdb$0.f$3 -> f$3
    int com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$2daad34966603985da1e908fcd7dce43c65d3686057c6682bf1fbac975becfdb$0.f$1 -> f$1
    void com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$2daad34966603985da1e908fcd7dce43c65d3686057c6682bf1fbac975becfdb$0.<init>(com.android.networkstack.tethering.Tethering,int,android.os.ResultReceiver,boolean) -> <init>
    void com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$2daad34966603985da1e908fcd7dce43c65d3686057c6682bf1fbac975becfdb$0.run() -> run
com.android.networkstack.tethering.Tethering$$ExternalSyntheticLambda5 -> com.android.networkstack.tethering.Tethering$$ExternalSyntheticLambda5:
    com.android.networkstack.tethering.Tethering com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$bd8ce66162b8ca07caf514eeb0019e4812e6c24895b95df84571e58e63e4a78b$0.f$0 -> f$0
    java.lang.String com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$bd8ce66162b8ca07caf514eeb0019e4812e6c24895b95df84571e58e63e4a78b$0.f$2 -> f$2
    android.net.IIntResultListener com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$bd8ce66162b8ca07caf514eeb0019e4812e6c24895b95df84571e58e63e4a78b$0.f$1 -> f$1
    void com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$bd8ce66162b8ca07caf514eeb0019e4812e6c24895b95df84571e58e63e4a78b$0.<init>(com.android.networkstack.tethering.Tethering,android.net.IIntResultListener,java.lang.String) -> <init>
    void com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$bd8ce66162b8ca07caf514eeb0019e4812e6c24895b95df84571e58e63e4a78b$0.run() -> run
com.android.networkstack.tethering.Tethering$$ExternalSyntheticLambda6 -> com.android.networkstack.tethering.Tethering$$ExternalSyntheticLambda6:
    com.android.networkstack.tethering.Tethering com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$de0f368ce8153240397fb8e86fd668ed7508d00c055cecaa832f1309ed6d7ec5$0.f$0 -> f$0
    int com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$de0f368ce8153240397fb8e86fd668ed7508d00c055cecaa832f1309ed6d7ec5$0.f$3 -> f$3
    java.lang.String com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$de0f368ce8153240397fb8e86fd668ed7508d00c055cecaa832f1309ed6d7ec5$0.f$2 -> f$2
    android.net.IIntResultListener com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$de0f368ce8153240397fb8e86fd668ed7508d00c055cecaa832f1309ed6d7ec5$0.f$1 -> f$1
    void com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$de0f368ce8153240397fb8e86fd668ed7508d00c055cecaa832f1309ed6d7ec5$0.<init>(com.android.networkstack.tethering.Tethering,android.net.IIntResultListener,java.lang.String,int) -> <init>
    void com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$de0f368ce8153240397fb8e86fd668ed7508d00c055cecaa832f1309ed6d7ec5$0.run() -> run
com.android.networkstack.tethering.Tethering$$ExternalSyntheticLambda7 -> com.android.networkstack.tethering.Tethering$$ExternalSyntheticLambda7:
    com.android.networkstack.tethering.Tethering com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$3b638ec770788848cc36d31c3ee1939fdb3d30622ac7330cc0ae06dbe5d59135$0.f$0 -> f$0
    android.net.IIntResultListener com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$3b638ec770788848cc36d31c3ee1939fdb3d30622ac7330cc0ae06dbe5d59135$0.f$1 -> f$1
    boolean com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$3b638ec770788848cc36d31c3ee1939fdb3d30622ac7330cc0ae06dbe5d59135$0.f$2 -> f$2
    void com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$3b638ec770788848cc36d31c3ee1939fdb3d30622ac7330cc0ae06dbe5d59135$0.<init>(com.android.networkstack.tethering.Tethering,android.net.IIntResultListener,boolean) -> <init>
    void com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$3b638ec770788848cc36d31c3ee1939fdb3d30622ac7330cc0ae06dbe5d59135$0.run() -> run
com.android.networkstack.tethering.Tethering$$ExternalSyntheticLambda8 -> com.android.networkstack.tethering.Tethering$$ExternalSyntheticLambda8:
    android.net.ITetheringEventCallback com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$4e66afe67784eb31487faa68d0728c92fde600e89d4a9c8726340b5bd9e7c195$0.f$1 -> f$1
    com.android.networkstack.tethering.Tethering com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$4e66afe67784eb31487faa68d0728c92fde600e89d4a9c8726340b5bd9e7c195$0.f$0 -> f$0
    void com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$4e66afe67784eb31487faa68d0728c92fde600e89d4a9c8726340b5bd9e7c195$0.<init>(com.android.networkstack.tethering.Tethering,android.net.ITetheringEventCallback) -> <init>
    void com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$4e66afe67784eb31487faa68d0728c92fde600e89d4a9c8726340b5bd9e7c195$0.run() -> run
com.android.networkstack.tethering.Tethering$$ExternalSyntheticLambda9 -> com.android.networkstack.tethering.Tethering$$ExternalSyntheticLambda9:
    android.net.ITetheringEventCallback com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$c42e4d044a4c83a8bdff38e35838602137a6724108c83a5335151989b292116f$0.f$1 -> f$1
    com.android.networkstack.tethering.Tethering com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$c42e4d044a4c83a8bdff38e35838602137a6724108c83a5335151989b292116f$0.f$0 -> f$0
    boolean com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$c42e4d044a4c83a8bdff38e35838602137a6724108c83a5335151989b292116f$0.f$2 -> f$2
    void com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$c42e4d044a4c83a8bdff38e35838602137a6724108c83a5335151989b292116f$0.<init>(com.android.networkstack.tethering.Tethering,android.net.ITetheringEventCallback,boolean) -> <init>
    void com.android.networkstack.tethering.Tethering$$InternalSyntheticLambda$0$c42e4d044a4c83a8bdff38e35838602137a6724108c83a5335151989b292116f$0.run() -> run
com.android.networkstack.tethering.Tethering$1 -> com.android.networkstack.tethering.Tethering$1:
    290:290:void <init>(com.android.networkstack.tethering.Tethering) -> <init>
    294:294:com.android.networkstack.tethering.TetheringConfiguration getTetherConfig() -> getTetherConfig
com.android.networkstack.tethering.Tethering$2 -> com.android.networkstack.tethering.Tethering$2:
    347:347:void <init>(com.android.networkstack.tethering.Tethering) -> <init>
    350:350:android.os.Handler getHandler() -> getHandler
    355:355:android.net.INetd getNetd() -> getNetd
    360:360:android.app.usage.NetworkStatsManager getNetworkStatsManager() -> getNetworkStatsManager
    365:365:android.net.util.SharedLog getSharedLog() -> getSharedLog
    370:370:com.android.networkstack.tethering.TetheringConfiguration getTetherConfig() -> getTetherConfig
com.android.networkstack.tethering.Tethering$3 -> com.android.networkstack.tethering.Tethering$3:
    436:436:void <init>(com.android.networkstack.tethering.Tethering,android.os.Handler) -> <init>
    440:440:void onChange(boolean) -> onChange
com.android.networkstack.tethering.Tethering$4 -> com.android.networkstack.tethering.Tethering$4:
    718:718:void <init>(com.android.networkstack.tethering.Tethering,boolean,android.net.IIntResultListener,android.bluetooth.BluetoothAdapter) -> <init>
    732:744:void onServiceConnected(int,android.bluetooth.BluetoothProfile) -> onServiceConnected
com.android.networkstack.tethering.Tethering$5 -> com.android.networkstack.tethering.Tethering$5:
    2491:2491:void <init>(com.android.networkstack.tethering.Tethering) -> <init>
    2504:2504:void dhcpLeasesChanged() -> dhcpLeasesChanged
    2509:2509:void requestEnableTethering(int,boolean) -> requestEnableTethering
    2494:2494:void updateInterfaceState(android.net.ip.IpServer,int,int) -> updateInterfaceState
    2499:2499:void updateLinkProperties(android.net.ip.IpServer,android.net.LinkProperties) -> updateLinkProperties
com.android.networkstack.tethering.Tethering$ActiveDataSubIdListener -> com.android.networkstack.tethering.Tethering$ActiveDataSubIdListener:
    461:462:void <init>(com.android.networkstack.tethering.Tethering,java.util.concurrent.Executor) -> <init>
    467:480:void onActiveDataSubscriptionIdChanged(int) -> onActiveDataSubscriptionIdChanged
com.android.networkstack.tethering.Tethering$CallbackCookie -> com.android.networkstack.tethering.Tethering$CallbackCookie:
    213:213:void <init>(boolean,com.android.networkstack.tethering.Tethering$1) -> <init>
    216:217:void <init>(boolean) -> <init>
com.android.networkstack.tethering.Tethering$EthernetCallback -> com.android.networkstack.tethering.Tethering$EthernetCallback:
    778:778:void <init>(com.android.networkstack.tethering.Tethering) -> <init>
    778:778:void <init>(com.android.networkstack.tethering.Tethering,com.android.networkstack.tethering.Tethering$1) -> <init>
    781:786:void onAvailable(java.lang.String) -> onAvailable
    791:795:void onUnavailable() -> onUnavailable
com.android.networkstack.tethering.Tethering$NetdCallback -> com.android.networkstack.tethering.Tethering$NetdCallback:
    503:503:void <init>(com.android.networkstack.tethering.Tethering) -> <init>
    503:503:void <init>(com.android.networkstack.tethering.Tethering,com.android.networkstack.tethering.Tethering$1) -> <init>
    516:516:void lambda$onInterfaceAdded$2(java.lang.String) -> lambda$onInterfaceAdded$2
    506:506:void lambda$onInterfaceChanged$0(java.lang.String,boolean) -> lambda$onInterfaceChanged$0
    511:511:void lambda$onInterfaceLinkStateChanged$1(java.lang.String,boolean) -> lambda$onInterfaceLinkStateChanged$1
    521:521:void lambda$onInterfaceRemoved$3(java.lang.String) -> lambda$onInterfaceRemoved$3
    516:516:void onInterfaceAdded(java.lang.String) -> onInterfaceAdded
    506:506:void onInterfaceChanged(java.lang.String,boolean) -> onInterfaceChanged
    511:511:void onInterfaceLinkStateChanged(java.lang.String,boolean) -> onInterfaceLinkStateChanged
    521:521:void onInterfaceRemoved(java.lang.String) -> onInterfaceRemoved
com.android.networkstack.tethering.Tethering$NetdCallback$$ExternalSyntheticLambda0 -> com.android.networkstack.tethering.Tethering$NetdCallback$$ExternalSyntheticLambda0:
    com.android.networkstack.tethering.Tethering$NetdCallback com.android.networkstack.tethering.Tethering$NetdCallback$$InternalSyntheticLambda$1$45537d356cf13406378e401f6aa65c242f9b8023b0439963fc8572bcab201b16$0.f$0 -> f$0
    java.lang.String com.android.networkstack.tethering.Tethering$NetdCallback$$InternalSyntheticLambda$1$45537d356cf13406378e401f6aa65c242f9b8023b0439963fc8572bcab201b16$0.f$1 -> f$1
    void com.android.networkstack.tethering.Tethering$NetdCallback$$InternalSyntheticLambda$1$45537d356cf13406378e401f6aa65c242f9b8023b0439963fc8572bcab201b16$0.<init>(com.android.networkstack.tethering.Tethering$NetdCallback,java.lang.String) -> <init>
    void com.android.networkstack.tethering.Tethering$NetdCallback$$InternalSyntheticLambda$1$45537d356cf13406378e401f6aa65c242f9b8023b0439963fc8572bcab201b16$0.run() -> run
com.android.networkstack.tethering.Tethering$NetdCallback$$ExternalSyntheticLambda1 -> com.android.networkstack.tethering.Tethering$NetdCallback$$ExternalSyntheticLambda1:
    com.android.networkstack.tethering.Tethering$NetdCallback com.android.networkstack.tethering.Tethering$NetdCallback$$InternalSyntheticLambda$1$18e5736879b2cc2dd25f1f51dc940983524e214ae60ea6e5a20636bb8f0ffd50$0.f$0 -> f$0
    java.lang.String com.android.networkstack.tethering.Tethering$NetdCallback$$InternalSyntheticLambda$1$18e5736879b2cc2dd25f1f51dc940983524e214ae60ea6e5a20636bb8f0ffd50$0.f$1 -> f$1
    void com.android.networkstack.tethering.Tethering$NetdCallback$$InternalSyntheticLambda$1$18e5736879b2cc2dd25f1f51dc940983524e214ae60ea6e5a20636bb8f0ffd50$0.<init>(com.android.networkstack.tethering.Tethering$NetdCallback,java.lang.String) -> <init>
    void com.android.networkstack.tethering.Tethering$NetdCallback$$InternalSyntheticLambda$1$18e5736879b2cc2dd25f1f51dc940983524e214ae60ea6e5a20636bb8f0ffd50$0.run() -> run
com.android.networkstack.tethering.Tethering$NetdCallback$$ExternalSyntheticLambda2 -> com.android.networkstack.tethering.Tethering$NetdCallback$$ExternalSyntheticLambda2:
    com.android.networkstack.tethering.Tethering$NetdCallback com.android.networkstack.tethering.Tethering$NetdCallback$$InternalSyntheticLambda$1$71a9fbb919fa30202af6910ac3fb788e29d09a69f7879f6662462a6a00c0c7e3$0.f$0 -> f$0
    boolean com.android.networkstack.tethering.Tethering$NetdCallback$$InternalSyntheticLambda$1$71a9fbb919fa30202af6910ac3fb788e29d09a69f7879f6662462a6a00c0c7e3$0.f$2 -> f$2
    java.lang.String com.android.networkstack.tethering.Tethering$NetdCallback$$InternalSyntheticLambda$1$71a9fbb919fa30202af6910ac3fb788e29d09a69f7879f6662462a6a00c0c7e3$0.f$1 -> f$1
    void com.android.networkstack.tethering.Tethering$NetdCallback$$InternalSyntheticLambda$1$71a9fbb919fa30202af6910ac3fb788e29d09a69f7879f6662462a6a00c0c7e3$0.<init>(com.android.networkstack.tethering.Tethering$NetdCallback,java.lang.String,boolean) -> <init>
    void com.android.networkstack.tethering.Tethering$NetdCallback$$InternalSyntheticLambda$1$71a9fbb919fa30202af6910ac3fb788e29d09a69f7879f6662462a6a00c0c7e3$0.run() -> run
com.android.networkstack.tethering.Tethering$NetdCallback$$ExternalSyntheticLambda3 -> com.android.networkstack.tethering.Tethering$NetdCallback$$ExternalSyntheticLambda3:
    com.android.networkstack.tethering.Tethering$NetdCallback com.android.networkstack.tethering.Tethering$NetdCallback$$InternalSyntheticLambda$1$52d2e0b9c32b4defb0c38b71cd56f28aa3e4ced42e0b707cef6eb1615aebd0bf$0.f$0 -> f$0
    boolean com.android.networkstack.tethering.Tethering$NetdCallback$$InternalSyntheticLambda$1$52d2e0b9c32b4defb0c38b71cd56f28aa3e4ced42e0b707cef6eb1615aebd0bf$0.f$2 -> f$2
    java.lang.String com.android.networkstack.tethering.Tethering$NetdCallback$$InternalSyntheticLambda$1$52d2e0b9c32b4defb0c38b71cd56f28aa3e4ced42e0b707cef6eb1615aebd0bf$0.f$1 -> f$1
    void com.android.networkstack.tethering.Tethering$NetdCallback$$InternalSyntheticLambda$1$52d2e0b9c32b4defb0c38b71cd56f28aa3e4ced42e0b707cef6eb1615aebd0bf$0.<init>(com.android.networkstack.tethering.Tethering$NetdCallback,java.lang.String,boolean) -> <init>
    void com.android.networkstack.tethering.Tethering$NetdCallback$$InternalSyntheticLambda$1$52d2e0b9c32b4defb0c38b71cd56f28aa3e4ced42e0b707cef6eb1615aebd0bf$0.run() -> run
com.android.networkstack.tethering.Tethering$SettingsObserver -> com.android.networkstack.tethering.Tethering$SettingsObserver:
    378:379:void <init>(com.android.networkstack.tethering.Tethering,android.os.Handler) -> <init>
    384:389:void onChange(boolean) -> onChange
com.android.networkstack.tethering.Tethering$StateReceiver -> com.android.networkstack.tethering.Tethering$StateReceiver:
    1016:1016:void <init>(com.android.networkstack.tethering.Tethering) -> <init>
    1016:1016:void <init>(com.android.networkstack.tethering.Tethering,com.android.networkstack.tethering.Tethering$1) -> <init>
    1106:1108:void changeUsbIpServing(boolean,boolean) -> changeUsbIpServing
    1046:1053:void handleConnectivityAction(android.content.Intent) -> handleConnectivityAction
    1192:1201:void handleDataSaverChanged() -> handleDataSaverChanged
    1057:1099:void handleUsbAction(android.content.Intent) -> handleUsbAction
    1188:1188:void handleUserRestrictionAction() -> handleUserRestrictionAction
    1122:1139:void handleWifiApAction(android.content.Intent) -> handleWifiApAction
    1150:1184:void handleWifiP2pAction(android.content.Intent) -> handleWifiP2pAction
    1145:1146:boolean isGroupOwner(android.net.wifi.p2p.WifiP2pGroup) -> isGroupOwner
    1113:1116:void maybeStopUsbProvisioning() -> maybeStopUsbProvisioning
    1019:1040:void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.android.networkstack.tethering.Tethering$TetherMainSM -> com.android.networkstack.tethering.Tethering$TetherMainSM:
    1554:1577:void <init>(com.android.networkstack.tethering.Tethering,java.lang.String,android.os.Looper,com.android.networkstack.tethering.TetheringDependencies) -> <init>
    1509:1509:void access$3300(com.android.networkstack.tethering.Tethering$TetherMainSM,int,android.net.ip.IpServer) -> access$3300
    1509:1509:com.android.networkstack.tethering.util.State access$3400(com.android.networkstack.tethering.Tethering$TetherMainSM) -> access$3400
    1509:1509:void access$3500(com.android.networkstack.tethering.Tethering$TetherMainSM,android.net.ip.IpServer) -> access$3500
    1509:1509:com.android.networkstack.tethering.Tethering$TetherMainSM$OffloadWrapper access$4800(com.android.networkstack.tethering.Tethering$TetherMainSM) -> access$4800
    1509:1509:java.util.ArrayList access$4900(com.android.networkstack.tethering.Tethering$TetherMainSM) -> access$4900
    1509:1509:com.android.networkstack.tethering.util.State access$5000(com.android.networkstack.tethering.Tethering$TetherMainSM) -> access$5000
    1671:1695:void chooseUpstreamType(boolean) -> chooseUpstreamType
    1586:1586:java.util.List getAllDownstreams() -> getAllDownstreams
    1765:1792:void handleInterfaceServingStateActive(int,android.net.ip.IpServer) -> handleInterfaceServingStateActive
    1799:1815:void handleInterfaceServingStateInactive(android.net.ip.IpServer) -> handleInterfaceServingStateInactive
    1759:1761:void handleNewUpstreamNetworkState(com.android.networkstack.tethering.UpstreamNetworkState) -> handleNewUpstreamNetworkState
    1823:1877:void handleUpstreamNetworkMonitorCallback(int,java.lang.Object) -> handleUpstreamNetworkMonitorCallback
    1752:1754:void notifyDownstreamsOfNewUpstreamIface(android.net.util.InterfaceSet) -> notifyDownstreamsOfNewUpstreamIface
    1725:1747:void setDnsForwarders(android.net.Network,android.net.LinkProperties) -> setDnsForwarders
    1705:1719:void setUpstreamNetwork(com.android.networkstack.tethering.UpstreamNetworkState) -> setUpstreamNetwork
    1650:1664:boolean turnOffMainTetherSettings() -> turnOffMainTetherSettings
    1618:1644:boolean turnOnMainTetherSettings() -> turnOnMainTetherSettings
com.android.networkstack.tethering.Tethering$TetherMainSM$ErrorState -> com.android.networkstack.tethering.Tethering$TetherMainSM$ErrorState:
    2021:2021:void <init>(com.android.networkstack.tethering.Tethering$TetherMainSM) -> <init>
    2043:2045:void notify(int) -> notify
    2027:2034:boolean processMessage(android.os.Message) -> processMessage
com.android.networkstack.tethering.Tethering$TetherMainSM$InitialState -> com.android.networkstack.tethering.Tethering$TetherMainSM$InitialState:
    1589:1589:void <init>(com.android.networkstack.tethering.Tethering$TetherMainSM) -> <init>
    1592:1604:boolean processMessage(android.os.Message) -> processMessage
com.android.networkstack.tethering.Tethering$TetherMainSM$OffloadWrapper -> com.android.networkstack.tethering.Tethering$TetherMainSM$OffloadWrapper:
    2109:2109:void <init>(com.android.networkstack.tethering.Tethering$TetherMainSM) -> <init>
    2143:2144:void excludeDownstreamInterface(java.lang.String) -> excludeDownstreamInterface
    2148:2148:void sendOffloadExemptPrefixes() -> sendOffloadExemptPrefixes
    2153:2184:void sendOffloadExemptPrefixes(java.util.Set) -> sendOffloadExemptPrefixes
    2111:2114:void start() -> start
    2118:2119:void stop() -> stop
    2136:2137:void updateDownstreamLinkProperties(android.net.LinkProperties) -> updateDownstreamLinkProperties
    2188:2191:void updateOffloadStatus(int) -> updateOffloadStatus
    2125:2130:void updateUpstreamNetworkState(com.android.networkstack.tethering.UpstreamNetworkState) -> updateUpstreamNetworkState
com.android.networkstack.tethering.Tethering$TetherMainSM$SetDnsForwardersErrorState -> com.android.networkstack.tethering.Tethering$TetherMainSM$SetDnsForwardersErrorState:
    2089:2089:void <init>(com.android.networkstack.tethering.Tethering$TetherMainSM) -> <init>
    2092:2098:void enter() -> enter
com.android.networkstack.tethering.Tethering$TetherMainSM$SetIpForwardingDisabledErrorState -> com.android.networkstack.tethering.Tethering$TetherMainSM$SetIpForwardingDisabledErrorState:
    2059:2059:void <init>(com.android.networkstack.tethering.Tethering$TetherMainSM) -> <init>
    2062:2063:void enter() -> enter
com.android.networkstack.tethering.Tethering$TetherMainSM$SetIpForwardingEnabledErrorState -> com.android.networkstack.tethering.Tethering$TetherMainSM$SetIpForwardingEnabledErrorState:
    2051:2051:void <init>(com.android.networkstack.tethering.Tethering$TetherMainSM) -> <init>
    2054:2055:void enter() -> enter
com.android.networkstack.tethering.Tethering$TetherMainSM$StartTetheringErrorState -> com.android.networkstack.tethering.Tethering$TetherMainSM$StartTetheringErrorState:
    2067:2067:void <init>(com.android.networkstack.tethering.Tethering$TetherMainSM) -> <init>
    2070:2073:void enter() -> enter
com.android.networkstack.tethering.Tethering$TetherMainSM$StopTetheringErrorState -> com.android.networkstack.tethering.Tethering$TetherMainSM$StopTetheringErrorState:
    2078:2078:void <init>(com.android.networkstack.tethering.Tethering$TetherMainSM) -> <init>
    2081:2084:void enter() -> enter
com.android.networkstack.tethering.Tethering$TetherMainSM$TetherModeAliveState -> com.android.networkstack.tethering.Tethering$TetherMainSM$TetherModeAliveState:
    1882:1884:void <init>(com.android.networkstack.tethering.Tethering$TetherMainSM) -> <init>
    1890:1906:void enter() -> enter
    1911:1919:void exit() -> exit
    1937:2009:boolean processMessage(android.os.Message) -> processMessage
    1923:1929:boolean updateUpstreamWanted() -> updateUpstreamWanted
com.android.networkstack.tethering.Tethering$TetherState -> com.android.networkstack.tethering.Tethering$TetherState:
    191:196:void <init>(android.net.ip.IpServer,boolean) -> <init>
    200:200:boolean isCurrentlyServing() -> isCurrentlyServing
com.android.networkstack.tethering.Tethering$TetheringSoftApCallback -> com.android.networkstack.tethering.Tethering$TetheringSoftApCallback:
    525:525:void <init>(com.android.networkstack.tethering.Tethering) -> <init>
    525:525:void <init>(com.android.networkstack.tethering.Tethering,com.android.networkstack.tethering.Tethering$1) -> <init>
    537:537:void onConnectedClientsChanged(java.util.List) -> onConnectedClientsChanged
com.android.networkstack.tethering.Tethering$TetheringThreadExecutor -> com.android.networkstack.tethering.Tethering$TetheringThreadExecutor:
    449:450:void <init>(com.android.networkstack.tethering.Tethering,android.os.Handler) -> <init>
    454:455:void execute(java.lang.Runnable) -> execute
com.android.networkstack.tethering.Tethering$UserRestrictionActionListener -> com.android.networkstack.tethering.Tethering$UserRestrictionActionListener:
    1224:1228:void <init>(android.os.UserManager,com.android.networkstack.tethering.Tethering,com.android.networkstack.tethering.TetheringNotificationUpdater) -> <init>
    1235:1259:void onUserRestrictionsChanged() -> onUserRestrictionsChanged
com.android.networkstack.tethering.TetheringConfiguration -> com.android.networkstack.tethering.TetheringConfiguration:
    59:76:void <clinit>() -> <clinit>
    162:228:void <init>(android.content.Context,android.net.util.SharedLog,int) -> <init>
    558:559:void appendIfNotPresent(java.util.ArrayList,int) -> appendIfNotPresent
    563:564:boolean containsOneOf(java.util.ArrayList,java.lang.Integer[]) -> containsOneOf
    549:549:java.lang.String[] copy(java.lang.String[]) -> copy
    283:323:void dump(java.io.PrintWriter) -> dump
    348:359:void dumpStringArray(java.io.PrintWriter,java.lang.String,java.lang.String[]) -> dumpStringArray
    520:521:boolean getDeviceConfigBoolean(java.lang.String,boolean) -> getDeviceConfigBoolean
    526:526:java.lang.String getDeviceConfigProperty(java.lang.String) -> getDeviceConfigProperty
    502:505:boolean getEnableBpfOffload(android.content.res.Resources) -> getEnableBpfOffload
    509:511:boolean getEnableLegacyDhcpServer(android.content.res.Resources) -> getEnableLegacyDhcpServer
    457:461:java.lang.String[] getLegacyDhcpRanges(android.content.res.Resources) -> getLegacyDhcpRanges
    375:375:int getOffloadPollInterval() -> getOffloadPollInterval
    474:474:boolean getResourceBoolean(android.content.res.Resources,int,boolean) -> getResourceBoolean
    491:491:int getResourceInteger(android.content.res.Resources,int,int) -> getResourceInteger
    466:466:java.lang.String getResourceString(android.content.res.Resources,int) -> getResourceString
    482:485:java.lang.String[] getResourceStringArray(android.content.res.Resources,int) -> getResourceStringArray
    537:539:android.content.res.Resources getResources(android.content.Context,int) -> getResources
    545:545:android.content.res.Resources getResourcesForSubIdWrapper(android.content.Context,int) -> getResourcesForSubIdWrapper
    393:395:int getSettingsIntValue(java.lang.String,int) -> getSettingsIntValue
    403:403:java.lang.String getSettingsValue(java.lang.String) -> getSettingsValue
    407:444:java.util.Collection getUpstreamIfaceTypes(android.content.res.Resources,boolean) -> getUpstreamIfaceTypes
    387:389:int getUsbTetheringFunction(android.content.res.Resources) -> getUsbTetheringFunction
    273:273:boolean hasMobileHotspotProvisionApp() -> hasMobileHotspotProvisionApp
    263:263:boolean isBluetooth(java.lang.String) -> isBluetooth
    379:379:boolean isBpfOffloadEnabled() -> isBpfOffloadEnabled
    531:531:boolean isFeatureEnabled(android.content.Context,java.lang.String) -> isFeatureEnabled
    268:268:boolean isNcm(java.lang.String) -> isNcm
    383:383:boolean isSelectAllPrefixRangeEnabled() -> isSelectAllPrefixRangeEnabled
    238:238:boolean isUsb(java.lang.String) -> isUsb
    233:233:boolean isUsingNcm() -> isUsingNcm
    243:243:boolean isWifi(java.lang.String) -> isWifi
    253:253:boolean isWifiP2p(java.lang.String) -> isWifiP2p
    258:258:boolean isWifiP2pLegacyTetheringMode() -> isWifiP2pLegacyTetheringMode
    248:248:boolean isWigig(java.lang.String) -> isWigig
    364:366:java.lang.String makeString(java.lang.String[]) -> makeString
    450:451:boolean matchesDownstreamRegexs(java.lang.String,java.lang.String[]) -> matchesDownstreamRegexs
    553:554:void prependIfNotPresent(java.util.ArrayList,int) -> prependIfNotPresent
    278:278:boolean shouldEnableWifiP2pDedicatedIp() -> shouldEnableWifiP2pDedicatedIp
    570:573:int[] toIntArray(java.util.Collection) -> toIntArray
    582:597:android.net.TetheringConfigurationParcel toStableParcelable() -> toStableParcelable
    328:344:java.lang.String toString() -> toString
com.android.networkstack.tethering.TetheringDependencies -> com.android.networkstack.tethering.TetheringDependencies:
    43:43:void <init>() -> <init>
    113:113:com.android.networkstack.tethering.TetheringConfiguration generateTetheringConfiguration(android.content.Context,android.net.util.SharedLog,int) -> generateTetheringConfiguration
    49:49:com.android.networkstack.tethering.BpfCoordinator getBpfCoordinator(com.android.networkstack.tethering.BpfCoordinator$Dependencies) -> getBpfCoordinator
    105:105:com.android.networkstack.tethering.EntitlementManager getEntitlementManager(android.content.Context,android.os.Handler,android.net.util.SharedLog,java.lang.Runnable) -> getEntitlementManager
    120:121:android.net.INetd getINetd(android.content.Context) -> getINetd
    85:85:com.android.networkstack.tethering.IPv6TetheringCoordinator getIPv6TetheringCoordinator(java.util.ArrayList,android.net.util.SharedLog) -> getIPv6TetheringCoordinator
    129:129:com.android.networkstack.tethering.TetheringNotificationUpdater getNotificationUpdater(android.content.Context,android.os.Looper) -> getNotificationUpdater
    66:68:com.android.networkstack.tethering.OffloadController getOffloadController(android.os.Handler,android.net.util.SharedLog,com.android.networkstack.tethering.OffloadController$Dependencies) -> getOffloadController
    56:56:com.android.networkstack.tethering.OffloadHardwareInterface getOffloadHardwareInterface(android.os.Handler,android.net.util.SharedLog) -> getOffloadHardwareInterface
    159:159:com.android.networkstack.tethering.PrivateAddressCoordinator getPrivateAddressCoordinator(android.content.Context,com.android.networkstack.tethering.TetheringConfiguration) -> getPrivateAddressCoordinator
    77:77:com.android.networkstack.tethering.UpstreamNetworkMonitor getUpstreamNetworkMonitor(android.content.Context,com.android.networkstack.tethering.util.StateMachine,android.net.util.SharedLog,int) -> getUpstreamNetworkMonitor
    151:151:boolean isTetheringDenied() -> isTetheringDenied
com.android.networkstack.tethering.TetheringInterfaceUtils -> com.android.networkstack.tethering.TetheringInterfaceUtils:
    34:36:void <clinit>() -> <clinit>
    97:99:java.net.InetAddress getByAddress(byte[]) -> getByAddress
    73:84:java.lang.String getIPv6Interface(com.android.networkstack.tethering.UpstreamNetworkState) -> getIPv6Interface
    90:92:java.lang.String getInterfaceForDestination(android.net.LinkProperties,java.net.InetAddress) -> getInterfaceForDestination
    47:51:android.net.util.InterfaceSet getTetheringInterfaces(com.android.networkstack.tethering.UpstreamNetworkState) -> getTetheringInterfaces
com.android.networkstack.tethering.TetheringNotificationUpdater -> com.android.networkstack.tethering.TetheringNotificationUpdater:
    134:137:void <clinit>() -> <clinit>
    104:150:void <init>(android.content.Context,android.os.Looper) -> <init>
    64:64:void access$000(com.android.networkstack.tethering.TetheringNotificationUpdater) -> access$000
    254:254:void clearNotification(int) -> clearNotification
    191:191:android.os.Handler getHandler() -> getHandler
    197:209:android.content.res.Resources getResourcesForSubId(android.content.Context,int) -> getResourcesForSubId
    259:262:java.lang.String getSettingsPackageName(android.content.pm.PackageManager) -> getSettingsPackageName
    267:281:void notifyTetheringDisabledByRestriction() -> notifyTetheringDisabledByRestriction
    286:302:void notifyTetheringNoUpstream() -> notifyTetheringNoUpstream
    176:176:void onActiveDataSubscriptionIdChanged(int) -> onActiveDataSubscriptionIdChanged
    170:170:void onDownstreamChanged(int) -> onDownstreamChanged
    183:184:void onUpstreamCapabilitiesChanged(android.net.NetworkCapabilities) -> onUpstreamCapabilitiesChanged
    332:338:boolean setupNoUpstreamNotification() -> setupNoUpstreamNotification
    307:326:boolean setupRoamingNotification() -> setupRoamingNotification
    346:360:void showNotification(int,java.lang.String,java.lang.String,int,boolean,android.app.PendingIntent,android.app.Notification$Action[]) -> showNotification
    250:250:void tetheringRestrictionLifted() -> tetheringRestrictionLifted
    216:228:void updateActiveNotifications(int,int,boolean,boolean) -> updateActiveNotifications
    232:236:void updateNoUpstreamNotification() -> updateNoUpstreamNotification
    241:244:void updateRoamingNotification() -> updateRoamingNotification
com.android.networkstack.tethering.TetheringNotificationUpdater$MccMncOverrideInfo -> com.android.networkstack.tethering.TetheringNotificationUpdater$MccMncOverrideInfo:
    127:130:void <init>(java.lang.String,int,int) -> <init>
com.android.networkstack.tethering.TetheringNotificationUpdater$NotificationHandler -> com.android.networkstack.tethering.TetheringNotificationUpdater$NotificationHandler:
    154:155:void <init>(com.android.networkstack.tethering.TetheringNotificationUpdater,android.os.Looper) -> <init>
    160:162:void handleMessage(android.os.Message) -> handleMessage
com.android.networkstack.tethering.TetheringService -> com.android.networkstack.tethering.TetheringService:
    67:67:void <clinit>() -> <clinit>
    66:66:void <init>() -> <init>
    66:66:java.lang.String access$100() -> access$100
    301:301:boolean checkAndNoteWriteSettingsOperation(android.content.Context,int,java.lang.String,java.lang.String,boolean) -> checkAndNoteWriteSettingsOperation
    87:87:com.android.networkstack.tethering.Tethering makeTethering(com.android.networkstack.tethering.TetheringDependencies) -> makeTethering
    310:310:com.android.networkstack.tethering.TetheringDependencies makeTetheringDependencies() -> makeTetheringDependencies
    93:93:android.os.IBinder onBind(android.content.Intent) -> onBind
    74:79:void onCreate() -> onCreate
com.android.networkstack.tethering.TetheringService$1 -> com.android.networkstack.tethering.TetheringService$1:
    310:310:void <init>(com.android.networkstack.tethering.TetheringService) -> <init>
    310:310:android.net.INetworkStackConnector access$000(com.android.networkstack.tethering.TetheringService$1) -> access$000
    367:367:android.bluetooth.BluetoothAdapter getBluetoothAdapter() -> getBluetoothAdapter
    320:320:android.content.Context getContext() -> getContext
    325:325:android.net.ip.IpServer$Dependencies getIpServerDependencies() -> getIpServerDependencies
    350:362:android.net.INetworkStackConnector getNetworkStackConnector() -> getNetworkStackConnector
    313:315:android.os.Looper getTetheringLooper() -> getTetheringLooper
com.android.networkstack.tethering.TetheringService$1$1 -> com.android.networkstack.tethering.TetheringService$1$1:
    325:325:void <init>(com.android.networkstack.tethering.TetheringService$1) -> <init>
    330:337:void makeDhcpServer(java.lang.String,android.net.dhcp.DhcpServingParamsParcel,android.net.dhcp.DhcpServerCallbacks) -> makeDhcpServer
com.android.networkstack.tethering.TetheringService$TetheringConnector -> com.android.networkstack.tethering.TetheringService$TetheringConnector:
    100:102:void <init>(com.android.networkstack.tethering.Tethering,com.android.networkstack.tethering.TetheringService) -> <init>
    214:214:boolean checkAndNotifyCommonError(java.lang.String,java.lang.String,android.net.IIntResultListener) -> checkAndNotifyCommonError
    222:228:boolean checkAndNotifyCommonError(java.lang.String,java.lang.String,boolean,android.net.IIntResultListener) -> checkAndNotifyCommonError
    240:246:boolean checkAndNotifyCommonError(java.lang.String,java.lang.String,android.os.ResultReceiver) -> checkAndNotifyCommonError
    263:263:boolean checkCallingOrSelfPermission(java.lang.String) -> checkCallingOrSelfPermission
    209:209:void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    254:255:boolean hasNetworkStackPermission() -> hasNetworkStackPermission
    284:286:boolean hasTetherAccessPermission() -> hasTetherAccessPermission
    268:279:boolean hasTetherChangePermission(java.lang.String,java.lang.String,boolean) -> hasTetherChangePermission
    259:259:boolean hasTetherPrivilegedPermission() -> hasTetherPrivilegedPermission
    199:202:void isTetheringSupported(java.lang.String,java.lang.String,android.net.IIntResultListener) -> isTetheringSupported
    165:169:void registerTetheringEventCallback(android.net.ITetheringEventCallback,java.lang.String) -> registerTetheringEventCallback
    156:158:void requestLatestTetheringEntitlementResult(int,android.os.ResultReceiver,boolean,java.lang.String,java.lang.String) -> requestLatestTetheringEntitlementResult
    124:126:void setUsbTethering(boolean,java.lang.String,java.lang.String,android.net.IIntResultListener) -> setUsbTethering
    132:139:void startTethering(android.net.TetheringRequestParcel,java.lang.String,java.lang.String,android.net.IIntResultListener) -> startTethering
    188:192:void stopAllTethering(java.lang.String,java.lang.String,android.net.IIntResultListener) -> stopAllTethering
    145:149:void stopTethering(int,java.lang.String,java.lang.String,android.net.IIntResultListener) -> stopTethering
    108:110:void tether(java.lang.String,java.lang.String,java.lang.String,android.net.IIntResultListener) -> tether
    177:181:void unregisterTetheringEventCallback(android.net.ITetheringEventCallback,java.lang.String) -> unregisterTetheringEventCallback
    116:118:void untether(java.lang.String,java.lang.String,java.lang.String,android.net.IIntResultListener) -> untether
com.android.networkstack.tethering.UpstreamNetworkMonitor -> com.android.networkstack.tethering.UpstreamNetworkMonitor:
    105:112:void <clinit>() -> <clinit>
    120:152:void <init>(android.content.Context,com.android.networkstack.tethering.util.StateMachine,android.net.util.SharedLog,int) -> <init>
    86:86:void access$000(com.android.networkstack.tethering.UpstreamNetworkMonitor,android.net.Network) -> access$000
    86:86:boolean access$100(android.net.NetworkCapabilities) -> access$100
    86:86:java.lang.String access$1000() -> access$1000
    86:86:void access$1100(com.android.networkstack.tethering.UpstreamNetworkMonitor,int,android.net.Network) -> access$1100
    86:86:void access$1200(com.android.networkstack.tethering.UpstreamNetworkMonitor,android.net.Network) -> access$1200
    86:86:boolean access$200(com.android.networkstack.tethering.UpstreamNetworkMonitor) -> access$200
    86:86:boolean access$202(com.android.networkstack.tethering.UpstreamNetworkMonitor,boolean) -> access$202
    86:86:com.android.networkstack.tethering.EntitlementManager access$300(com.android.networkstack.tethering.UpstreamNetworkMonitor) -> access$300
    86:86:void access$400(com.android.networkstack.tethering.UpstreamNetworkMonitor,android.net.Network,android.net.NetworkCapabilities) -> access$400
    86:86:com.android.networkstack.tethering.UpstreamNetworkState access$500(com.android.networkstack.tethering.UpstreamNetworkMonitor,android.net.Network,android.net.LinkProperties) -> access$500
    86:86:void access$600(com.android.networkstack.tethering.UpstreamNetworkMonitor,android.net.Network) -> access$600
    86:86:void access$700(com.android.networkstack.tethering.UpstreamNetworkMonitor,android.net.Network,android.net.LinkProperties) -> access$700
    86:86:void access$800(com.android.networkstack.tethering.UpstreamNetworkMonitor) -> access$800
    86:86:android.net.Network access$902(com.android.networkstack.tethering.UpstreamNetworkMonitor,android.net.Network) -> access$902
    641:646:java.util.HashSet allLocalPrefixes(java.lang.Iterable) -> allLocalPrefixes
    496:500:android.net.ConnectivityManager cm() -> cm
    612:632:com.android.networkstack.tethering.UpstreamNetworkMonitor$TypeStatePair findFirstAvailableUpstreamByType(java.lang.Iterable,java.lang.Iterable,boolean) -> findFirstAvailableUpstreamByType
    679:680:com.android.networkstack.tethering.UpstreamNetworkState findFirstDunNetwork(java.lang.Iterable) -> findFirstDunNetwork
    337:353:com.android.networkstack.tethering.UpstreamNetworkState getCurrentPreferredUpstream() -> getCurrentPreferredUpstream
    363:363:java.util.Set getLocalPrefixes() -> getLocalPrefixes
    376:379:void handleAvailable(android.net.Network) -> handleAvailable
    432:434:void handleLinkProp(android.net.Network,android.net.LinkProperties) -> handleLinkProp
    448:465:void handleLost(android.net.Network) -> handleLost
    383:401:void handleNetCap(android.net.Network,android.net.NetworkCapabilities) -> handleNetCap
    663:664:boolean hasCapability(com.android.networkstack.tethering.UpstreamNetworkState,int) -> hasCapability
    654:654:boolean isCellular(com.android.networkstack.tethering.UpstreamNetworkState) -> isCellular
    658:659:boolean isCellular(android.net.NetworkCapabilities) -> isCellular
    367:368:boolean isCellularUpstreamPermitted() -> isCellularUpstreamPermitted
    668:669:boolean isNetworkUsableAndNotCellular(com.android.networkstack.tethering.UpstreamNetworkState) -> isNetworkUsableAndNotCellular
    673:674:boolean isVpnInternetNetwork(android.net.NetworkCapabilities) -> isVpnInternetNetwork
    469:483:void maybeHandleNetworkSwitch(android.net.Network) -> maybeHandleNetworkSwitch
    246:246:boolean mobileNetworkRequested() -> mobileNetworkRequested
    692:709:android.net.NetworkCapabilities networkCapabilitiesForType(int) -> networkCapabilitiesForType
    597:597:void notifyTarget(int,android.net.Network) -> notifyTarget
    601:601:void notifyTarget(int,java.lang.Object) -> notifyTarget
    487:490:void recomputeLocalPrefixes() -> recomputeLocalPrefixes
    211:224:void reevaluateUpstreamRequirements(boolean,boolean,boolean) -> reevaluateUpstreamRequirements
    251:289:void registerMobileNetworkRequest() -> registerMobileNetworkRequest
    593:593:void releaseCallback(android.net.ConnectivityManager$NetworkCallback) -> releaseCallback
    295:298:void releaseMobileNetworkRequest() -> releaseMobileNetworkRequest
    310:327:com.android.networkstack.tethering.UpstreamNetworkState selectPreferredUpstreamType(java.lang.Iterable) -> selectPreferredUpstreamType
    358:358:void setCurrentUpstream(android.net.Network) -> setCurrentUpstream
    236:236:void setTryCell(boolean) -> setTryCell
    241:241:void setUpstreamConfig(boolean,boolean) -> setUpstreamConfig
    182:187:void startObserveAllNetworks() -> startObserveAllNetworks
    163:176:void startTrackDefaultNetwork(com.android.networkstack.tethering.EntitlementManager) -> startTrackDefaultNetwork
    198:205:void stop() -> stop
    406:427:com.android.networkstack.tethering.UpstreamNetworkState updateLinkProperties(android.net.Network,android.net.LinkProperties) -> updateLinkProperties
com.android.networkstack.tethering.UpstreamNetworkMonitor$TypeStatePair -> com.android.networkstack.tethering.UpstreamNetworkMonitor$TypeStatePair:
    604:606:void <init>() -> <init>
    604:604:void <init>(com.android.networkstack.tethering.UpstreamNetworkMonitor$1) -> <init>
com.android.networkstack.tethering.UpstreamNetworkMonitor$UpstreamNetworkCallback -> com.android.networkstack.tethering.UpstreamNetworkMonitor$UpstreamNetworkCallback:
    511:512:void <init>(com.android.networkstack.tethering.UpstreamNetworkMonitor,int) -> <init>
    517:517:void onAvailable(android.net.Network) -> onAvailable
    522:547:void onCapabilitiesChanged(android.net.Network,android.net.NetworkCapabilities) -> onCapabilitiesChanged
    552:567:void onLinkPropertiesChanged(android.net.Network,android.net.LinkProperties) -> onLinkPropertiesChanged
    573:587:void onLost(android.net.Network) -> onLost
com.android.networkstack.tethering.UpstreamNetworkState -> com.android.networkstack.tethering.UpstreamNetworkState:
    39:42:void <init>(android.net.LinkProperties,android.net.NetworkCapabilities,android.net.Network) -> <init>
    56:56:boolean isVcnInterface(java.lang.String) -> isVcnInterface
    48:51:java.lang.String toString() -> toString
com.android.networkstack.tethering.apishim.api30.BpfCoordinatorShimImpl -> com.android.networkstack.tethering.apishim.api30.BpfCoordinatorShimImpl:
    50:52:void <init>(com.android.networkstack.tethering.BpfCoordinator$Dependencies) -> <init>
    141:146:com.android.networkstack.tethering.TetherStatsValue tetherOffloadGetAndClearStats(int) -> tetherOffloadGetAndClearStats
    104:110:android.util.SparseArray tetherOffloadGetStats() -> tetherOffloadGetStats
    63:65:boolean tetherOffloadRuleAdd(com.android.networkstack.tethering.BpfCoordinator$Ipv6ForwardingRule) -> tetherOffloadRuleAdd
    75:77:boolean tetherOffloadRuleRemove(com.android.networkstack.tethering.BpfCoordinator$Ipv6ForwardingRule) -> tetherOffloadRuleRemove
    116:118:boolean tetherOffloadSetInterfaceQuota(int,long) -> tetherOffloadSetInterfaceQuota
    127:130:android.util.SparseArray toTetherStatsValueSparseArray(android.net.TetherStatsParcel[]) -> toTetherStatsValueSparseArray
com.android.networkstack.tethering.apishim.api31.BpfCoordinatorShimImpl -> com.android.networkstack.tethering.apishim.api31.BpfCoordinatorShimImpl:
    107:155:void <init>(com.android.networkstack.tethering.BpfCoordinator$Dependencies) -> <init>
    461:466:boolean addDevMap(int) -> addDevMap
    429:434:boolean attachProgram(java.lang.String,boolean) -> attachProgram
    442:447:boolean detachProgram(java.lang.String) -> detachProgram
    456:456:boolean isAnyIpv4RuleOnUpstream(int) -> isAnyIpv4RuleOnUpstream
    161:161:boolean isInitialized() -> isInitialized
    241:241:void lambda$tetherOffloadGetStats$0(android.util.SparseArray,com.android.networkstack.tethering.TetherStatsKey,com.android.networkstack.tethering.TetherStatsValue) -> lambda$tetherOffloadGetStats$0
    486:486:java.lang.String mapStatus(com.android.networkstack.tethering.BpfMap,java.lang.String) -> mapStatus
    203:211:boolean startUpstreamIpv6Forwarding(int,int,android.net.MacAddress,android.net.MacAddress,android.net.MacAddress,int) -> startUpstreamIpv6Forwarding
    220:226:boolean stopUpstreamIpv6Forwarding(int,int,android.net.MacAddress) -> stopUpstreamIpv6Forwarding
    516:528:int synchronizeKernelRCU() -> synchronizeKernelRCU
    308:345:com.android.networkstack.tethering.TetherStatsValue tetherOffloadGetAndClearStats(int) -> tetherOffloadGetAndClearStats
    235:243:android.util.SparseArray tetherOffloadGetStats() -> tetherOffloadGetStats
    168:176:boolean tetherOffloadRuleAdd(com.android.networkstack.tethering.BpfCoordinator$Ipv6ForwardingRule) -> tetherOffloadRuleAdd
    355:369:boolean tetherOffloadRuleAdd(boolean,com.android.networkstack.tethering.Tether4Key,com.android.networkstack.tethering.Tether4Value) -> tetherOffloadRuleAdd
    414:423:void tetherOffloadRuleForEach(boolean,java.util.function.BiConsumer) -> tetherOffloadRuleForEach
    185:192:boolean tetherOffloadRuleRemove(com.android.networkstack.tethering.BpfCoordinator$Ipv6ForwardingRule) -> tetherOffloadRuleRemove
    380:405:boolean tetherOffloadRuleRemove(boolean,com.android.networkstack.tethering.Tether4Key) -> tetherOffloadRuleRemove
    251:298:boolean tetherOffloadSetInterfaceQuota(int,long) -> tetherOffloadSetInterfaceQuota
    491:498:java.lang.String toString() -> toString
com.android.networkstack.tethering.apishim.api31.BpfCoordinatorShimImpl$$ExternalSyntheticLambda0 -> com.android.networkstack.tethering.apishim.api31.BpfCoordinatorShimImpl$$ExternalSyntheticLambda0:
    android.util.SparseArray com.android.networkstack.tethering.apishim.api31.BpfCoordinatorShimImpl$$InternalSyntheticLambda$1$11a9ebeaf6a1f7bd7bfa8f562cea0105fb74de196c3168da55bcdf0cb585c000$0.f$0 -> f$0
    void com.android.networkstack.tethering.apishim.api31.BpfCoordinatorShimImpl$$InternalSyntheticLambda$1$11a9ebeaf6a1f7bd7bfa8f562cea0105fb74de196c3168da55bcdf0cb585c000$0.<init>(android.util.SparseArray) -> <init>
    void com.android.networkstack.tethering.apishim.api31.BpfCoordinatorShimImpl$$InternalSyntheticLambda$1$11a9ebeaf6a1f7bd7bfa8f562cea0105fb74de196c3168da55bcdf0cb585c000$0.accept(java.lang.Object,java.lang.Object) -> accept
com.android.networkstack.tethering.apishim.common.BpfCoordinatorShim -> com.android.networkstack.tethering.apishim.common.BpfCoordinatorShim:
    36:36:void <init>() -> <init>
    42:46:com.android.networkstack.tethering.apishim.common.BpfCoordinatorShim getBpfCoordinatorShim(com.android.networkstack.tethering.BpfCoordinator$Dependencies) -> getBpfCoordinatorShim
com.android.networkstack.tethering.util.BaseNetdUnsolicitedEventListener -> com.android.networkstack.tethering.util.BaseNetdUnsolicitedEventListener:
    26:26:void <init>() -> <init>
com.android.networkstack.tethering.util.DeviceConfigUtils -> com.android.networkstack.tethering.util.DeviceConfigUtils:
    69:69:java.lang.String getDeviceConfigProperty(java.lang.String,java.lang.String,java.lang.String) -> getDeviceConfigProperty
    82:84:int getDeviceConfigPropertyInt(java.lang.String,java.lang.String,int) -> getDeviceConfigPropertyInt
    216:239:long getModuleVersion(android.content.Context,java.lang.String) -> getModuleVersion
    187:190:boolean isFeatureEnabled(android.content.Context,java.lang.String,java.lang.String,java.lang.String,boolean) -> isFeatureEnabled
    206:206:boolean isFeatureEnabled(android.content.Context,long,java.lang.String,java.lang.String,boolean) -> isFeatureEnabled
    196:200:boolean maybeUseFixedPackageVersion(android.content.Context) -> maybeUseFixedPackageVersion
    41:42:void resetPackageVersionCacheForTest() -> resetPackageVersionCacheForTest
com.android.networkstack.tethering.util.DnsSdTxtRecord -> com.android.networkstack.tethering.util.DnsSdTxtRecord:
    313:313:void <clinit>() -> <clinit>
    48:49:void <init>() -> <init>
    42:42:byte[] access$000(com.android.networkstack.tethering.util.DnsSdTxtRecord) -> access$000
    289:294:boolean equals(java.lang.Object) -> equals
    197:208:java.lang.String getKey(int) -> getKey
    222:233:byte[] getValue(int) -> getValue
    242:243:java.lang.String getValueAsString(int) -> getValueAsString
    299:299:int hashCode() -> hashCode
    269:279:java.lang.String toString() -> toString
    309:309:void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.android.networkstack.tethering.util.DnsSdTxtRecord$1 -> com.android.networkstack.tethering.util.DnsSdTxtRecord$1:
    314:314:void <init>() -> <init>
    314:314:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    316:317:com.android.networkstack.tethering.util.DnsSdTxtRecord createFromParcel(android.os.Parcel) -> createFromParcel
    314:314:java.lang.Object[] newArray(int) -> newArray
    322:322:com.android.networkstack.tethering.util.DnsSdTxtRecord[] newArray(int) -> newArray
com.android.networkstack.tethering.util.FdEventsReader -> com.android.networkstack.tethering.util.FdEventsReader:
    92:95:void <init>(android.os.Handler,java.lang.Object) -> <init>
    87:87:void closeFd(java.io.FileDescriptor) -> closeFd
    185:210:boolean createAndRegisterFd() -> createAndRegisterFd
    101:101:android.os.MessageQueue getMessageQueue() -> getMessageQueue
    220:249:boolean handleInput() -> handleInput
    215:215:boolean isRunning() -> isRunning
    204:205:int lambda$createAndRegisterFd$0(java.io.FileDescriptor,int) -> lambda$createAndRegisterFd$0
    266:266:boolean onCorrectThread() -> onCorrectThread
    106:110:boolean start() -> start
    115:119:void stop() -> stop
    257:262:void unregisterAndDestroyFd() -> unregisterAndDestroyFd
com.android.networkstack.tethering.util.FdEventsReader$$ExternalSyntheticLambda0 -> com.android.networkstack.tethering.util.FdEventsReader$$ExternalSyntheticLambda0:
    com.android.networkstack.tethering.util.FdEventsReader com.android.networkstack.tethering.util.FdEventsReader$$InternalSyntheticLambda$1$00314bcf67fee4bddd80e72f15ea85b549faa848321af38ef1b2d4863cc4efaf$0.f$0 -> f$0
    void com.android.networkstack.tethering.util.FdEventsReader$$InternalSyntheticLambda$1$00314bcf67fee4bddd80e72f15ea85b549faa848321af38ef1b2d4863cc4efaf$0.<init>(com.android.networkstack.tethering.util.FdEventsReader) -> <init>
    int com.android.networkstack.tethering.util.FdEventsReader$$InternalSyntheticLambda$1$00314bcf67fee4bddd80e72f15ea85b549faa848321af38ef1b2d4863cc4efaf$0.onFileDescriptorEvents(java.io.FileDescriptor,int) -> onFileDescriptorEvents
com.android.networkstack.tethering.util.HexDump -> com.android.networkstack.tethering.util.HexDump:
    25:27:void <clinit>() -> <clinit>
    116:116:java.lang.String toHexString(byte[]) -> toHexString
    149:159:java.lang.String toHexString(byte[],int,int,boolean) -> toHexString
com.android.networkstack.tethering.util.IndentingPrintWriter -> com.android.networkstack.tethering.util.IndentingPrintWriter:
    32:32:void <init>(java.io.Writer,java.lang.String) -> <init>
    27:27:android.util.IndentingPrintWriter decreaseIndent() -> decreaseIndent
    61:61:com.android.networkstack.tethering.util.IndentingPrintWriter decreaseIndent() -> decreaseIndent
    27:27:android.util.IndentingPrintWriter increaseIndent() -> increaseIndent
    55:55:com.android.networkstack.tethering.util.IndentingPrintWriter increaseIndent() -> increaseIndent
    27:27:android.util.IndentingPrintWriter setIndent(int) -> setIndent
    27:27:android.util.IndentingPrintWriter setIndent(java.lang.String) -> setIndent
    44:44:com.android.networkstack.tethering.util.IndentingPrintWriter setIndent(java.lang.String) -> setIndent
    49:49:com.android.networkstack.tethering.util.IndentingPrintWriter setIndent(int) -> setIndent
com.android.networkstack.tethering.util.Inet4AddressUtils -> com.android.networkstack.tethering.util.Inet4AddressUtils:
    69:70:int inet4AddressToIntHTH(java.net.Inet4Address) -> inet4AddressToIntHTH
    52:54:java.net.Inet4Address intToInet4AddressHTH(int) -> intToInet4AddressHTH
    93:93:int prefixLengthToV4NetmaskIntHTH(int) -> prefixLengthToV4NetmaskIntHTH
com.android.networkstack.tethering.util.LocalLog -> com.android.networkstack.tethering.util.LocalLog:
    48:48:void <init>(int) -> <init>
    51:54:void <init>(int,boolean) -> <init>
    72:76:void append(java.lang.String) -> append
    84:85:void dump(java.io.PrintWriter) -> dump
    94:98:void dump(java.lang.String,java.io.PrintWriter) -> dump
    59:68:void log(java.lang.String) -> log
    133:133:com.android.networkstack.tethering.util.LocalLog$ReadOnlyLocalLog readOnlyLocalLog() -> readOnlyLocalLog
com.android.networkstack.tethering.util.LocalLog$ReadOnlyLocalLog -> com.android.networkstack.tethering.util.LocalLog$ReadOnlyLocalLog:
    113:114:void <init>(com.android.networkstack.tethering.util.LocalLog) -> <init>
    118:118:void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
com.android.networkstack.tethering.util.MessageUtils -> com.android.networkstack.tethering.util.MessageUtils:
    119:119:void <clinit>() -> <clinit>
    53:101:android.util.SparseArray findMessageNames(java.lang.Class[],java.lang.String[]) -> findMessageNames
    129:129:android.util.SparseArray findMessageNames(java.lang.Class[]) -> findMessageNames
com.android.networkstack.tethering.util.MessageUtils$DuplicateConstantError -> com.android.networkstack.tethering.util.MessageUtils$DuplicateConstantError:
    38:39:void <init>(java.lang.String,java.lang.String,int) -> <init>
com.android.networkstack.tethering.util.NetUtils -> com.android.networkstack.tethering.util.NetUtils:
    41:41:boolean addressTypeMatches(java.net.InetAddress,java.net.InetAddress) -> addressTypeMatches
    59:66:android.net.RouteInfo selectBestRoute(java.util.Collection,java.net.InetAddress) -> selectBestRoute
com.android.networkstack.tethering.util.PacketReader -> com.android.networkstack.tethering.util.PacketReader:
    37:37:void <init>(android.os.Handler) -> <init>
    41:41:void <init>(android.os.Handler,int) -> <init>
    32:32:int readPacket(java.io.FileDescriptor,java.lang.Object) -> readPacket
    57:57:int readPacket(java.io.FileDescriptor,byte[]) -> readPacket
com.android.networkstack.tethering.util.State -> com.android.networkstack.tethering.util.State:
    36:36:void <init>() -> <init>
    79:81:java.lang.String getName() -> getName
com.android.networkstack.tethering.util.StateMachine -> com.android.networkstack.tethering.util.StateMachine:
    1319:1320:void <init>(java.lang.String,android.os.Looper) -> <init>
    424:424:android.os.HandlerThread access$400(com.android.networkstack.tethering.util.StateMachine) -> access$400
    424:424:android.os.HandlerThread access$402(com.android.networkstack.tethering.util.StateMachine,android.os.HandlerThread) -> access$402
    424:424:com.android.networkstack.tethering.util.StateMachine$SmHandler access$502(com.android.networkstack.tethering.util.StateMachine,com.android.networkstack.tethering.util.StateMachine$SmHandler) -> access$502
    424:424:java.lang.String access$700(com.android.networkstack.tethering.util.StateMachine) -> access$700
    1354:1354:void addState(com.android.networkstack.tethering.util.State,com.android.networkstack.tethering.util.State) -> addState
    1363:1363:void addState(com.android.networkstack.tethering.util.State) -> addState
    1603:1603:android.os.Handler getHandler() -> getHandler
    1522:1524:int getLogRecMaxSize() -> getLogRecMaxSize
    1295:1296:void initStateMachine(java.lang.String,android.os.Looper) -> initStateMachine
    2128:2128:void log(java.lang.String) -> log
    2173:2173:void loge(java.lang.String) -> loge
    1632:1632:android.os.Message obtainMessage(int) -> obtainMessage
    1649:1649:android.os.Message obtainMessage(int,java.lang.Object) -> obtainMessage
    1706:1706:android.os.Message obtainMessage(int,int,int,java.lang.Object) -> obtainMessage
    1717:1720:void sendMessage(int) -> sendMessage
    1731:1734:void sendMessage(int,java.lang.Object) -> sendMessage
    1772:1775:void sendMessage(int,int,int,java.lang.Object) -> sendMessage
    1799:1802:void sendMessageDelayed(int,long) -> sendMessageDelayed
    1382:1382:void setInitialState(com.android.networkstack.tethering.util.State) -> setInitialState
    2073:2077:void start() -> start
    2104:2109:java.lang.String toString() -> toString
    1421:1421:void transitionTo(com.android.networkstack.tethering.util.IState) -> transitionTo
    1454:1454:void unhandledMessage(android.os.Message) -> unhandledMessage
com.android.networkstack.tethering.util.StateMachine$LogRec -> com.android.networkstack.tethering.util.StateMachine$LogRec:
    472:473:void <init>(com.android.networkstack.tethering.util.StateMachine,android.os.Message,java.lang.String,com.android.networkstack.tethering.util.IState,com.android.networkstack.tethering.util.IState,com.android.networkstack.tethering.util.IState) -> <init>
    537:562:java.lang.String toString() -> toString
    484:490:void update(com.android.networkstack.tethering.util.StateMachine,android.os.Message,java.lang.String,com.android.networkstack.tethering.util.IState,com.android.networkstack.tethering.util.IState,com.android.networkstack.tethering.util.IState) -> update
com.android.networkstack.tethering.util.StateMachine$LogRecords -> com.android.networkstack.tethering.util.StateMachine$LogRecords:
    577:577:void <init>(com.android.networkstack.tethering.util.StateMachine$1) -> <init>
    581:590:void <init>() -> <init>
    577:577:int access$1900(com.android.networkstack.tethering.util.StateMachine$LogRecords) -> access$1900
    668:679:void add(com.android.networkstack.tethering.util.StateMachine,android.os.Message,java.lang.String,com.android.networkstack.tethering.util.IState,com.android.networkstack.tethering.util.IState,com.android.networkstack.tethering.util.IState) -> add
    634:635:void cleanup() -> cleanup
    613:613:boolean logOnlyTransitions() -> logOnlyTransitions
com.android.networkstack.tethering.util.StateMachine$SmHandler -> com.android.networkstack.tethering.util.StateMachine$SmHandler:
    691:691:void <clinit>() -> <clinit>
    682:682:void <init>(android.os.Looper,com.android.networkstack.tethering.util.StateMachine,com.android.networkstack.tethering.util.StateMachine$1) -> <init>
    685:1226:void <init>(android.os.Looper,com.android.networkstack.tethering.util.StateMachine) -> <init>
    682:682:void access$1100(com.android.networkstack.tethering.util.StateMachine$SmHandler,com.android.networkstack.tethering.util.State) -> access$1100
    682:682:com.android.networkstack.tethering.util.IState access$1300(com.android.networkstack.tethering.util.StateMachine$SmHandler) -> access$1300
    682:682:void access$1400(com.android.networkstack.tethering.util.StateMachine$SmHandler,com.android.networkstack.tethering.util.IState) -> access$1400
    682:682:boolean access$1700(com.android.networkstack.tethering.util.StateMachine$SmHandler) -> access$1700
    682:682:com.android.networkstack.tethering.util.StateMachine$LogRecords access$1800(com.android.networkstack.tethering.util.StateMachine$SmHandler) -> access$1800
    682:682:com.android.networkstack.tethering.util.StateMachine access$300(com.android.networkstack.tethering.util.StateMachine$SmHandler) -> access$300
    682:682:void access$3000(com.android.networkstack.tethering.util.StateMachine$SmHandler) -> access$3000
    682:682:com.android.networkstack.tethering.util.StateMachine$SmHandler$StateInfo access$900(com.android.networkstack.tethering.util.StateMachine$SmHandler,com.android.networkstack.tethering.util.State,com.android.networkstack.tethering.util.State) -> access$900
    1165:1191:com.android.networkstack.tethering.util.StateMachine$SmHandler$StateInfo addState(com.android.networkstack.tethering.util.State,com.android.networkstack.tethering.util.State) -> addState
    927:943:void cleanupAfterQuitting() -> cleanupAfterQuitting
    950:975:void completeConstruction() -> completeConstruction
    1152:1152:com.android.networkstack.tethering.util.IState getCurrentState() -> getCurrentState
    796:826:void handleMessage(android.os.Message) -> handleMessage
    1032:1041:void invokeEnterMethods(int) -> invokeEnterMethods
    1018:1024:void invokeExitMethods(com.android.networkstack.tethering.util.StateMachine$SmHandler$StateInfo) -> invokeExitMethods
    1270:1270:boolean isQuit(android.os.Message) -> isQuit
    1054:1059:void moveDeferredMessageAtFrontOfQueue() -> moveDeferredMessageAtFrontOfQueue
    1070:1084:int moveTempStateStackToStateStack() -> moveTempStateStackToStateStack
    841:918:void performTransitions(com.android.networkstack.tethering.util.State,android.os.Message) -> performTransitions
    985:1010:com.android.networkstack.tethering.util.State processMsg(android.os.Message) -> processMsg
    1231:1232:void setInitialState(com.android.networkstack.tethering.util.State) -> setInitialState
    1125:1138:void setupInitialStateStack() -> setupInitialStateStack
    1107:1115:com.android.networkstack.tethering.util.StateMachine$SmHandler$StateInfo setupTempStateStackWithStatesToEnter(com.android.networkstack.tethering.util.State) -> setupTempStateStackWithStatesToEnter
    1237:1242:void transitionTo(com.android.networkstack.tethering.util.IState) -> transitionTo
com.android.networkstack.tethering.util.StateMachine$SmHandler$HaltingState -> com.android.networkstack.tethering.util.StateMachine$SmHandler$HaltingState:
    770:770:void <init>(com.android.networkstack.tethering.util.StateMachine$SmHandler) -> <init>
    770:770:void <init>(com.android.networkstack.tethering.util.StateMachine$SmHandler,com.android.networkstack.tethering.util.StateMachine$1) -> <init>
    773:773:boolean processMessage(android.os.Message) -> processMessage
com.android.networkstack.tethering.util.StateMachine$SmHandler$QuittingState -> com.android.networkstack.tethering.util.StateMachine$SmHandler$QuittingState:
    781:781:void <init>(com.android.networkstack.tethering.util.StateMachine$SmHandler) -> <init>
    781:781:void <init>(com.android.networkstack.tethering.util.StateMachine$SmHandler,com.android.networkstack.tethering.util.StateMachine$1) -> <init>
com.android.networkstack.tethering.util.StateMachine$SmHandler$StateInfo -> com.android.networkstack.tethering.util.StateMachine$SmHandler$StateInfo:
    727:727:void <init>(com.android.networkstack.tethering.util.StateMachine$SmHandler) -> <init>
    727:727:void <init>(com.android.networkstack.tethering.util.StateMachine$SmHandler,com.android.networkstack.tethering.util.StateMachine$1) -> <init>
    742:743:java.lang.String toString() -> toString
com.android.networkstack.tethering.util.Struct -> com.android.networkstack.tethering.util.Struct:
    159:159:void <clinit>() -> <clinit>
    105:105:void <init>() -> <init>
    264:265:boolean allFieldsFinal(com.android.networkstack.tethering.util.Struct$FieldInfo[],boolean) -> allFieldsFinal
    333:340:byte[] bigIntegerToU64Bytes(java.math.BigInteger,java.nio.ByteOrder,com.android.networkstack.tethering.util.Struct$Type) -> bigIntegerToU64Bytes
    162:206:void checkAnnotationType(com.android.networkstack.tethering.util.Struct$Field,java.lang.Class) -> checkAnnotationType
    614:617:void checkByteArraySize(byte[],com.android.networkstack.tethering.util.Struct$FieldInfo) -> checkByteArraySize
    671:687:boolean equals(java.lang.Object) -> equals
    257:258:int getAnnotationFieldCount(java.lang.Class) -> getAnnotationFieldCount
    518:551:com.android.networkstack.tethering.util.Struct$FieldInfo[] getClassFieldInfo(java.lang.Class) -> getClassFieldInfo
    211:248:int getFieldLength(com.android.networkstack.tethering.util.Struct$Field) -> getFieldLength
    349:427:java.lang.Object getFieldValue(java.nio.ByteBuffer,com.android.networkstack.tethering.util.Struct$FieldInfo) -> getFieldValue
    435:437:java.lang.Object getFieldValue(java.lang.reflect.Field) -> getFieldValue
    310:315:byte[] getLast8Bytes(byte[]) -> getLast8Bytes
    636:637:int getSize(java.lang.Class) -> getSize
    603:604:int getSizeInternal(com.android.networkstack.tethering.util.Struct$FieldInfo[]) -> getSizeInternal
    271:272:boolean hasBothMutableAndImmutableFields(com.android.networkstack.tethering.util.Struct$FieldInfo[]) -> hasBothMutableAndImmutableFields
    695:708:int hashCode() -> hashCode
    252:252:boolean isStructSubclass(java.lang.Class) -> isStructSubclass
    276:279:boolean matchConstructor(java.lang.reflect.Constructor,com.android.networkstack.tethering.util.Struct$FieldInfo[]) -> matchConstructor
    565:597:java.lang.Object parse(java.lang.Class,java.nio.ByteBuffer) -> parse
    443:514:void putFieldValue(java.nio.ByteBuffer,com.android.networkstack.tethering.util.Struct$FieldInfo,java.lang.Object) -> putFieldValue
    297:301:java.math.BigInteger readBigInteger(java.nio.ByteBuffer,com.android.networkstack.tethering.util.Struct$Type) -> readBigInteger
    713:730:java.lang.String toString() -> toString
    646:647:void writeToByteBuffer(java.nio.ByteBuffer) -> writeToByteBuffer
    622:627:void writeToByteBufferInternal(java.nio.ByteBuffer,com.android.networkstack.tethering.util.Struct$FieldInfo[]) -> writeToByteBufferInternal
    656:660:byte[] writeToBytes(java.nio.ByteOrder) -> writeToBytes
    666:666:byte[] writeToBytes() -> writeToBytes
com.android.networkstack.tethering.util.Struct$1 -> com.android.networkstack.tethering.util.Struct$1:
    162:162:void <clinit>() -> <clinit>
com.android.networkstack.tethering.util.Struct$FieldInfo -> com.android.networkstack.tethering.util.Struct$FieldInfo:
    154:156:void <init>(com.android.networkstack.tethering.util.Struct$Field,java.lang.reflect.Field) -> <init>
com.android.networkstack.tethering.util.Struct$Type -> com.android.networkstack.tethering.util.Struct$Type:
    106:123:void <clinit>() -> <clinit>
    106:106:void <init>(java.lang.String,int) -> <init>
    106:106:com.android.networkstack.tethering.util.Struct$Type valueOf(java.lang.String) -> valueOf
    106:106:com.android.networkstack.tethering.util.Struct$Type[] values() -> values
com.android.networkstack.tethering.util.structs.Icmpv6Header -> com.android.networkstack.tethering.util.structs.Icmpv6Header:
    40:43:void <init>(short,short,short) -> <init>
com.android.networkstack.tethering.util.structs.LlaOption -> com.android.networkstack.tethering.util.structs.LlaOption:
    48:51:void <init>(byte,byte,android.net.MacAddress) -> <init>
    58:59:java.nio.ByteBuffer build(byte,android.net.MacAddress) -> build
com.android.networkstack.tethering.util.structs.MtuOption -> com.android.networkstack.tethering.util.structs.MtuOption:
    50:54:void <init>(byte,byte,short,long) -> <init>
    61:63:java.nio.ByteBuffer build(long) -> build
com.android.networkstack.tethering.util.structs.PrefixInformationOption -> com.android.networkstack.tethering.util.structs.PrefixInformationOption:
    75:83:void <init>(byte,byte,byte,byte,long,long,int,byte[]) -> <init>
    91:95:java.nio.ByteBuffer build(android.net.IpPrefix,byte,long,long) -> build
com.android.networkstack.tethering.util.structs.RaHeader -> com.android.networkstack.tethering.util.structs.RaHeader:
    55:60:void <init>(byte,byte,int,long,long) -> <init>
com.android.networkstack.tethering.util.structs.RdnssOption -> com.android.networkstack.tethering.util.structs.RdnssOption:
    56:60:void <init>(byte,byte,short,long) -> <init>
    67:75:java.nio.ByteBuffer build(long,java.net.Inet6Address[]) -> build
    85:89:java.nio.ByteBuffer build(long,java.lang.String[]) -> build
lineageos.providers.LineageSettings -> lineageos.providers.LineageSettings:
    355:391:void <clinit>() -> <clinit>
    53:53:lineageos.providers.LineageSettings$Validator access$100() -> access$100
    53:53:lineageos.providers.LineageSettings$Validator access$400() -> access$400
lineageos.providers.LineageSettings$1 -> lineageos.providers.LineageSettings$1:
    358:358:void <init>() -> <init>
lineageos.providers.LineageSettings$2 -> lineageos.providers.LineageSettings$2:
    369:369:void <init>() -> <init>
lineageos.providers.LineageSettings$3 -> lineageos.providers.LineageSettings$3:
    384:384:void <init>() -> <init>
lineageos.providers.LineageSettings$4 -> lineageos.providers.LineageSettings$4:
    391:391:void <init>() -> <init>
lineageos.providers.LineageSettings$ContentProviderHolder -> lineageos.providers.LineageSettings$ContentProviderHolder:
    175:182:void <init>(android.net.Uri) -> <init>
    174:174:android.net.Uri access$000(lineageos.providers.LineageSettings$ContentProviderHolder) -> access$000
    186:192:android.content.IContentProvider getProvider(android.content.ContentResolver) -> getProvider
lineageos.providers.LineageSettings$DiscreteValueValidator -> lineageos.providers.LineageSettings$DiscreteValueValidator:
    401:402:void <init>(java.lang.String[]) -> <init>
lineageos.providers.LineageSettings$Global -> lineageos.providers.LineageSettings$Global:
    3068:3523:void <clinit>() -> <clinit>
    3158:3158:java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int) -> getStringForUser
lineageos.providers.LineageSettings$InclusiveIntegerRangeValidator -> lineageos.providers.LineageSettings$InclusiveIntegerRangeValidator:
    415:417:void <init>(int,int) -> <init>
lineageos.providers.LineageSettings$NameValueCache -> lineageos.providers.LineageSettings$NameValueCache:
    202:202:void <clinit>() -> <clinit>
    207:221:void <init>(java.lang.String,android.net.Uri,java.lang.String,java.lang.String,lineageos.providers.LineageSettings$ContentProviderHolder) -> <init>
    258:344:java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int) -> getStringForUser
lineageos.providers.LineageSettings$Secure -> lineageos.providers.LineageSettings$Secure:
    2336:3058:void <clinit>() -> <clinit>
    2476:2476:int getInt(android.content.ContentResolver,java.lang.String,int) -> getInt
    2481:2483:int getIntForUser(android.content.ContentResolver,java.lang.String,int,int) -> getIntForUser
    2431:2436:java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int) -> getStringForUser
    2403:2403:android.net.Uri getUriFor(java.lang.String) -> getUriFor
