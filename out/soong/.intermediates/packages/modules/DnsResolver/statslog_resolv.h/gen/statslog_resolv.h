// This file is autogenerated

#pragma once

#include <stdint.h>
#include <vector>
#include <map>
#include <set>

namespace android {
namespace net {
namespace stats {

/*
 * API For logging statistics events.
 */

/**
 * Constants for atom codes.
 */
enum {

    /**
     * NetworkDnsEventReported network_dns_event_reported
     * Usage: stats_write(StatsLog.NETWORK_DNS_EVENT_REPORTED, int32_t event_type, int32_t return_code, int32_t latency_micros, int32_t hints_ai_flags, int32_t res_nsend_flags, int32_t network_type, int32_t private_dns_modes, const BytesField& dns_query_events, int32_t sampling_rate_denom);
     */
    NETWORK_DNS_EVENT_REPORTED = 116

};

//
// Constants for enum values
//

// Values for NetworkDnsEventReported.event_type
const int32_t NETWORK_DNS_EVENT_REPORTED__EVENT_TYPE__EVENT_UNKNOWN = 0;
const int32_t NETWORK_DNS_EVENT_REPORTED__EVENT_TYPE__EVENT_GETADDRINFO = 1;
const int32_t NETWORK_DNS_EVENT_REPORTED__EVENT_TYPE__EVENT_GETHOSTBYNAME = 2;
const int32_t NETWORK_DNS_EVENT_REPORTED__EVENT_TYPE__EVENT_GETHOSTBYADDR = 3;
const int32_t NETWORK_DNS_EVENT_REPORTED__EVENT_TYPE__EVENT_RES_NSEND = 4;

// Values for NetworkDnsEventReported.return_code
const int32_t NETWORK_DNS_EVENT_REPORTED__RETURN_CODE__RC_EAI_NO_ERROR = 0;
const int32_t NETWORK_DNS_EVENT_REPORTED__RETURN_CODE__RC_EAI_ADDRFAMILY = 1;
const int32_t NETWORK_DNS_EVENT_REPORTED__RETURN_CODE__RC_EAI_AGAIN = 2;
const int32_t NETWORK_DNS_EVENT_REPORTED__RETURN_CODE__RC_EAI_BADFLAGS = 3;
const int32_t NETWORK_DNS_EVENT_REPORTED__RETURN_CODE__RC_EAI_FAIL = 4;
const int32_t NETWORK_DNS_EVENT_REPORTED__RETURN_CODE__RC_EAI_FAMILY = 5;
const int32_t NETWORK_DNS_EVENT_REPORTED__RETURN_CODE__RC_EAI_MEMORY = 6;
const int32_t NETWORK_DNS_EVENT_REPORTED__RETURN_CODE__RC_EAI_NODATA = 7;
const int32_t NETWORK_DNS_EVENT_REPORTED__RETURN_CODE__RC_EAI_NONAME = 8;
const int32_t NETWORK_DNS_EVENT_REPORTED__RETURN_CODE__RC_EAI_SERVICE = 9;
const int32_t NETWORK_DNS_EVENT_REPORTED__RETURN_CODE__RC_EAI_SOCKTYPE = 10;
const int32_t NETWORK_DNS_EVENT_REPORTED__RETURN_CODE__RC_EAI_SYSTEM = 11;
const int32_t NETWORK_DNS_EVENT_REPORTED__RETURN_CODE__RC_EAI_BADHINTS = 12;
const int32_t NETWORK_DNS_EVENT_REPORTED__RETURN_CODE__RC_EAI_PROTOCOL = 13;
const int32_t NETWORK_DNS_EVENT_REPORTED__RETURN_CODE__RC_EAI_OVERFLOW = 14;
const int32_t NETWORK_DNS_EVENT_REPORTED__RETURN_CODE__RC_RESOLV_INTERNAL_ERROR = 254;
const int32_t NETWORK_DNS_EVENT_REPORTED__RETURN_CODE__RC_RESOLV_TIMEOUT = 255;
const int32_t NETWORK_DNS_EVENT_REPORTED__RETURN_CODE__RC_EAI_MAX = 256;

// Values for NetworkDnsEventReported.network_type
const int32_t NETWORK_DNS_EVENT_REPORTED__NETWORK_TYPE__NT_UNKNOWN = 0;
const int32_t NETWORK_DNS_EVENT_REPORTED__NETWORK_TYPE__NT_CELLULAR = 1;
const int32_t NETWORK_DNS_EVENT_REPORTED__NETWORK_TYPE__NT_WIFI = 2;
const int32_t NETWORK_DNS_EVENT_REPORTED__NETWORK_TYPE__NT_BLUETOOTH = 3;
const int32_t NETWORK_DNS_EVENT_REPORTED__NETWORK_TYPE__NT_ETHERNET = 4;
const int32_t NETWORK_DNS_EVENT_REPORTED__NETWORK_TYPE__NT_VPN = 5;
const int32_t NETWORK_DNS_EVENT_REPORTED__NETWORK_TYPE__NT_WIFI_AWARE = 6;
const int32_t NETWORK_DNS_EVENT_REPORTED__NETWORK_TYPE__NT_LOWPAN = 7;
const int32_t NETWORK_DNS_EVENT_REPORTED__NETWORK_TYPE__NT_CELLULAR_VPN = 8;
const int32_t NETWORK_DNS_EVENT_REPORTED__NETWORK_TYPE__NT_WIFI_VPN = 9;
const int32_t NETWORK_DNS_EVENT_REPORTED__NETWORK_TYPE__NT_BLUETOOTH_VPN = 10;
const int32_t NETWORK_DNS_EVENT_REPORTED__NETWORK_TYPE__NT_ETHERNET_VPN = 11;
const int32_t NETWORK_DNS_EVENT_REPORTED__NETWORK_TYPE__NT_WIFI_CELLULAR_VPN = 12;

// Values for NetworkDnsEventReported.private_dns_modes
const int32_t NETWORK_DNS_EVENT_REPORTED__PRIVATE_DNS_MODES__PDM_UNKNOWN = 0;
const int32_t NETWORK_DNS_EVENT_REPORTED__PRIVATE_DNS_MODES__PDM_OFF = 1;
const int32_t NETWORK_DNS_EVENT_REPORTED__PRIVATE_DNS_MODES__PDM_OPPORTUNISTIC = 2;
const int32_t NETWORK_DNS_EVENT_REPORTED__PRIVATE_DNS_MODES__PDM_STRICT = 3;

struct BytesField {
  BytesField(char const* array, size_t len) : arg(array), arg_length(len) {}
  char const* arg;
  size_t arg_length;
};

//
// Write methods
//
int stats_write(int32_t code, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, const BytesField& arg8, int32_t arg9);

//
// Write flattened methods
//

//
// Add AStatsEvent methods
//

} // namespace stats
} // namespace net
} // namespace android
