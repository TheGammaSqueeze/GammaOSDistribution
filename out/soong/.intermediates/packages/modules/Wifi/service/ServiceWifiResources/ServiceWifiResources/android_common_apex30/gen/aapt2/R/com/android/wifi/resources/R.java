/* AUTO-GENERATED FILE. DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found. It
 * should not be modified by hand.
 */

package com.android.wifi.resources;

public final class R {
  public static final class array {
    /**
     * list of package names for which WifiManager.startScan() will not be throttled when the app
     * is in background.
     */
    public static final int config_wifiBackgroundScanThrottleExceptionList=0x7f010000;
    /**
     * Array describing scanning schedule in seconds when device is connected and screen is on
     */
    public static final int config_wifiConnectedScanIntervalScheduleSec=0x7f010001;
    /**
     * Array describing scanning schedule in seconds when device is disconnected and screen is on
     */
    public static final int config_wifiDisconnectedScanIntervalScheduleSec=0x7f010002;
    /**
     * list of package names for which WifiManager.startScan() will not be throttled when the app
     * is in foreground.
     */
    public static final int config_wifiForegroundScanThrottleExceptionList=0x7f010003;
    /**
     * Controls the mapping between RSSI and RSSI levels.
     * RSSI                                    RSSI Level
     * (-infinity, thresholds[0])                       0
     * [threshold[0], threshold[1])                     1
     * [threshold[1], threshold[2])                     2
     * ...                                            ...
     * [threshold[len-2], threshold[len-1])         len-1
     * [threshold[len-1], +infinity)                  len
     * where:
     * [a, b) is the range of integers `n` such that a <= n < b
     * `threshold[i]` represents the i'th element of the config_wifiRssiLevelThresholds array
     * and `len` is the length of the config_wifiRssiLevelThresholds array.
     */
    public static final int config_wifiRssiLevelThresholds=0x7f010004;
    /**
     * Array describing scanning schedule in seconds when device is connected and screen is on
     * and the connected network is the only saved network.
     * When this array is set to an empty array, the noraml connected scan schedule defined
     * in config_wifiConnectedScanIntervalScheduleSec will be used
     */
    public static final int config_wifiSingleSavedNetworkConnectedScanIntervalScheduleSec=0x7f010005;
    /**
     * list of SSIDs to enable aggressive MAC randomization on
     */
    public static final int config_wifi_aggressive_randomization_ssid_allowlist=0x7f010006;
    /**
     * list of SSIDs to disable aggressive MAC randomization on. If a SSID is in both the
     * allowlist and blocklist, then aggressive MAC randomization will still be disabled.
     */
    public static final int config_wifi_aggressive_randomization_ssid_blocklist=0x7f010007;
    /**
     * Array indicating wifi fatal firmware alert error code list from driver
     */
    public static final int config_wifi_fatal_firmware_alert_error_code_list=0x7f010008;
  }
  public static final class bool {
    /**
     * Indicates that 11ax mode is supported on this device
     * Note that if this flag is set to true, then 11ax is assumed to be supported.
     * However, if it is left to the default value of false, the 11ax support will
     * be checked via NL80211 interface
     */
    public static final int config_wifi11axSupportOverride=0x7f020000;
    /**
     * boolean indicating whether the WiFi chipset has 24GHz band support
     */
    public static final int config_wifi24ghzSupport=0x7f020001;
    /**
     * boolean indicating whether the WiFi chipset has 5GHz band support.
     * Note: This config is replacing the config_wifi_dual_band_support
     * since more bands may now be supported (such as 6GHz), the naming dual_band
     * is no longer indicative, and a separate config now exists for each band
     */
    public static final int config_wifi5ghzSupport=0x7f020002;
    /**
     * boolean indicating whether the WiFi chipset has 60GHz band support
     */
    public static final int config_wifi60ghzSupport=0x7f020003;
    /**
     * boolean indicating whether the WiFi chipset has 6GHz band support
     */
    public static final int config_wifi6ghzSupport=0x7f020004;
    /**
     * Indicates that enhanced MAC randomization is allowed on open networks that do not
     * use captive portals
     */
    public static final int config_wifiAllowEnhancedMacRandomizationOnOpenSsids=0x7f020005;
    /**
     * Whether to allow Settings or SUW to create insecure Enterprise networks where server
     * certificate is not validated, by not specifying a Root CA certificate and/or server domain
     * name. It is STRONGLY RECOMMENDED to be set to false
     */
    public static final int config_wifiAllowInsecureEnterpriseConfigurationsForSettingsAndSUW=0x7f020006;
    /**
     * Boolean indicating that wifi may link networks whose gateways have not yet been determined
     */
    public static final int config_wifiAllowLinkingUnknownDefaultGatewayConfigurations=0x7f020007;
    /**
     * Enable Aware NDP interface selection on interface that already has network set up.
     * Note: the default AOSP Android does not support multiple networks on the same Aware NDI.
     * Enabling this configuration will restore legacy behavior but may result in incorrect behavior.
     */
    public static final int config_wifiAllowMultipleNetworksOnSameAwareNdi=0x7f020008;
    /**
     * Indicates that bridged AP mode is supported on this device
     */
    public static final int config_wifiBridgedSoftApSupported=0x7f020009;
    /**
     * Override channel utilization estimation with fixed value
     */
    public static final int config_wifiChannelUtilizationOverrideEnabled=0x7f02000a;
    /**
     * Enable the default coex channel avoidance algorithm and disable the functionality of
     * WifiManager#setCoexUnsafeChannels.
     */
    public static final int config_wifiDefaultCoexAlgorithmEnabled=0x7f02000b;
    /**
     * Boolean indicating whether the wifi module should always scan the 6Ghz Preferred Scanning
     * Channels when performing full connectivity scans.
     * If set to true, the wifi module will scan 6Ghz PSC channels in addition to the 2.4Ghz,
     * 5Ghz, and 6Ghz channels co-located with 2.4/5Ghz APs when doing full connectivity scans.
     * If set to false, the wifi module will only scan the 2.4Ghz, 5Ghz,
     * and 6Ghz channels co-located with 2.4/5Ghz APs when doing full connectivity scans.
     */
    public static final int config_wifiEnable6ghzPscScanning=0x7f02000c;
    /**
     * Whether we should apply APF filters on non primary STA connections when STA + STA is active.
     * Defaults to false since most wifi chips cannot support concurrent APF filter set needed for STA + STA
     */
    public static final int config_wifiEnableApfOnNonPrimarySta=0x7f02000d;
    /**
     * Boolean indicating that enable roaming between linked networks
     */
    public static final int config_wifiEnableLinkedNetworkRoaming=0x7f02000e;
    /**
     * Boolean indicating performing a partial initial scan is enabled
     */
    public static final int config_wifiEnablePartialInitialScan=0x7f02000f;
    /**
     * Flush ANQP cache on Wi-Fi toggle off event
     */
    public static final int config_wifiFlushAnqpCacheOnWifiToggleOffEvent=0x7f020010;
    /**
     * Indicates whether to enable overriding the max number of spatial stream supported by the device
     * If true, config_wifiFrameworkMaxNumSpatialStreamDeviceOverrideValue
     * will be used to override the max number of spatial stream supported by the device.
     * If false, it will be left to WifiCond to derive the value from NL80211 interface
     */
    public static final int config_wifiFrameworkMaxNumSpatialStreamDeviceOverrideEnable=0x7f020011;
    /**
     * Network selection optimization at DEVICE_MOBILITY_STATE_HIGH_MVMT
     */
    public static final int config_wifiHighMovementNetworkSelectionOptimizationEnabled=0x7f020012;
    /**
     * Ignore the open saved network if from carrier provisioning app, there is a same open suggestion and a secure suggestion from same carrier available
     */
    public static final int config_wifiIgnoreOpenSavedNetworkWhenSecureSuggestionAvailable=0x7f020013;
    /**
     * Enable logging WifiIsUnusableEvent in metrics which gets triggered when wifi becomes unusable.
     */
    public static final int config_wifiIsUnusableEventMetricsEnabled=0x7f020014;
    /**
     * Enable aggregation of Wifi link layer radio stats from all radios.
     * Defaults to false will fetch radio stats only from Radio 0. This is to avoid
     * incorrect behavior due to driver/firmware returning bogus radio stats from other radios.
     * Note: Full DBS capable devices interested in radio stats from all the radios can enable this
     * configuration.
     */
    public static final int config_wifiLinkLayerAllRadiosStatsAggregationEnabled=0x7f020015;
    /**
     * Enable logging Wifi LinkSpeedCounts in metrics.
     */
    public static final int config_wifiLinkSpeedMetricsEnabled=0x7f020016;
    /**
     * Indicates that local-only hotspot should be brought up at 6GHz if possible.
     * This option is for automotive builds only (the one that have
     * PackageManager#FEATURE_AUTOMOTIVE)
     */
    public static final int config_wifiLocalOnlyHotspot6ghz=0x7f020017;
    /**
     * Enable adding minimum confirmation duration when sending network score to connectivity service.
     */
    public static final int config_wifiMinConfirmationDurationSendNetworkScoreEnabled=0x7f020018;
    /**
     * Enable concurrent peer to peer + internet connectivity
     * Note: this is conditional on the device supporting dual concurrent STAs.
     */
    public static final int config_wifiMultiStaLocalOnlyConcurrencyEnabled=0x7f020019;
    /**
     * Enable Make-Before-Break Wifi network switching.
     * Note: this is conditional on the device supporting dual concurrent STAs.
     */
    public static final int config_wifiMultiStaNetworkSwitchingMakeBeforeBreakEnabled=0x7f02001a;
    /**
     * Enable concurrent restricted connectivity + internet connectivity
     * Note: this is conditional on the device supporting dual concurrent STAs.
     */
    public static final int config_wifiMultiStaRestrictedConcurrencyEnabled=0x7f02001b;
    /**
     * Enable Open to OWE auto-upgrade
     */
    public static final int config_wifiOweUpgradeEnabled=0x7f02001c;
    /**
     * Enable the PNO frequency culling optimization.
     */
    public static final int config_wifiPnoFrequencyCullingEnabled=0x7f02001d;
    /**
     * Enable the PNO frequency culling optimization.
     */
    public static final int config_wifiPnoRecencySortingEnabled=0x7f02001e;
    /**
     * Indicates that SAE Hash-to-Element is supported on this device
     */
    public static final int config_wifiSaeH2eSupported=0x7f02001f;
    /**
     * Enable WPA2 to WPA3 auto-upgrade
     */
    public static final int config_wifiSaeUpgradeEnabled=0x7f020020;
    /**
     * Enable WPA2 to WPA3 auto-upgrade offload to capable Driver/Firmware
     */
    public static final int config_wifiSaeUpgradeOffloadEnabled=0x7f020021;
    /**
     * Indicates that hidden networks are to be scanned during scan only mode
     */
    public static final int config_wifiScanHiddenNetworksScanOnlyMode=0x7f020022;
    /**
     * Do a single scan when cell data loss is detected.
     */
    public static final int config_wifiScanOnCellularDataLossEnabled=0x7f020023;
    /**
     * Wifi Hal supports force client disconnect for softap
     */
    public static final int config_wifiSofapClientForceDisconnectSupported=0x7f020024;
    /**
     * Indicates that dynamic country code update in AP mode is supported on this device
     */
    public static final int config_wifiSoftApDynamicCountryCodeUpdateSupported=0x7f020025;
    /**
     * Wifi driver supports 2.4GHz band for softap when chip support 24GHz
     */
    public static final int config_wifiSoftap24ghzSupported=0x7f020026;
    /**
     * Wifi driver supports 5GHz band for softap when chip support 5GHz
     */
    public static final int config_wifiSoftap5ghzSupported=0x7f020027;
    /**
     * Wifi driver supports 60GHz band for softap when chip support 60GHz
     */
    public static final int config_wifiSoftap60ghzSupported=0x7f020028;
    /**
     * Wifi driver supports 6GHz band for softap when chip support 6GHz
     */
    public static final int config_wifiSoftap6ghzSupported=0x7f020029;
    /**
     * Wifi driver Automatic channel selection (ACS) for softap to include DFS channels
     */
    public static final int config_wifiSoftapAcsIncludeDfs=0x7f02002a;
    /**
     * Wifi driver supports IEEE80211AX multiple user beamformer for softap
     */
    public static final int config_wifiSoftapHeMuBeamformerSupported=0x7f02002b;
    /**
     * Wifi driver supports IEEE80211AX single user beamformee for softap
     */
    public static final int config_wifiSoftapHeSuBeamformeeSupported=0x7f02002c;
    /**
     * Wifi driver supports IEEE80211AX single user beamformer for softap
     */
    public static final int config_wifiSoftapHeSuBeamformerSupported=0x7f02002d;
    /**
     * Wifi driver supports IEEE80211AX TWT (Target Wake Time) for softap
     */
    public static final int config_wifiSoftapHeTwtSupported=0x7f02002e;
    /**
     * Wifi driver supports IEEE80211AX for softap
     */
    public static final int config_wifiSoftapIeee80211axSupported=0x7f02002f;
    /**
     * Wifi driver supports Mac address customization for softap
     */
    public static final int config_wifiSoftapMacAddressCustomizationSupported=0x7f020030;
    /**
     * Boolean indicating that softap passphrase need to enable ASCII encodable check
     */
    public static final int config_wifiSoftapPassphraseAsciiEncodableCheck=0x7f020031;
    /**
     * boolean indicating whether or not to reset auto shotdown configuration during cloud configuration restore
     */
    public static final int config_wifiSoftapResetAutoShutdownTimerConfig=0x7f020032;
    /**
     * boolean indicating whether or not to reset channel configuration during cloud configuration restore
     */
    public static final int config_wifiSoftapResetChannelConfig=0x7f020033;
    /**
     * boolean indicating whether or not to reset hiddenSsid configuration during cloud configuration restore
     */
    public static final int config_wifiSoftapResetHiddenConfig=0x7f020034;
    /**
     * boolean indicating whether or not to reset max client setting configuration during cloud configuration restore
     */
    public static final int config_wifiSoftapResetMaxClientSettingConfig=0x7f020035;
    /**
     * boolean indicating whether or not to reset user control configuration during cloud configuration restore
     */
    public static final int config_wifiSoftapResetUserControlConfig=0x7f020036;
    /**
     * Indicates that STA + bridged AP concurrency mode is supported on this device
     */
    public static final int config_wifiStaWithBridgedSoftApConcurrencySupported=0x7f020037;
    /**
     * Suspend optimization.
     */
    public static final int config_wifiSuspendOptimizationsEnabled=0x7f020038;
    /**
     * Whether to use the explicit vendor HAL API: IWifiStaIface.setRoamingState for disabling fw roaming (only needed if
     * setting the bssid on the connection alone does not disable fw roaming on this chip)
     */
    public static final int config_wifiUseHalApiToDisableFwRoaming=0x7f020039;
    /**
     * Indicates that AP mode MAC randomization is supported on this device
     */
    public static final int config_wifi_ap_mac_randomization_supported=0x7f02003a;
    /**
     * Boolean indicating whether the wifi chipset supports background scanning mechanism.
     * This mechanism allows the host to remain in suspend state and the dongle to actively
     * scan and wake the host when a configured SSID is detected by the dongle. This chipset
     * capability can provide power savings when wifi needs to be always kept on.
     */
    public static final int config_wifi_background_scan_support=0x7f02003b;
    /**
     * Indicates that connected MAC randomization is supported on this device
     */
    public static final int config_wifi_connected_mac_randomization_supported=0x7f02003c;
    /**
     * Indicates that a full bugreport should be triggered when wifi diagnostics detects an error on non-user (i.e debug) builds
     */
    public static final int config_wifi_diagnostics_bugreport_enabled=0x7f02003d;
    /**
     * Boolean indicating whether 802.11r Fast BSS Transition is enabled on this platform
     */
    public static final int config_wifi_fast_bss_transition_enabled=0x7f02003e;
    /**
     * Boolean indicating associated network selection is allowed
     */
    public static final int config_wifi_framework_enable_associated_network_selection=0x7f02003f;
    /**
     * Boolean indicating whether framework needs to set the tx power limit for meeting SAR requirements
     */
    public static final int config_wifi_framework_enable_sar_tx_power_limit=0x7f020040;
    /**
     * Boolean indicating whether framework should use detection of softAP mode to set the tx
     * power limit for meeting SAR requirements
     */
    public static final int config_wifi_framework_enable_soft_ap_sar_tx_power_limit=0x7f020041;
    /**
     * Boolean indicating whether single radio chain scan results are to be used for network selection
     */
    public static final int config_wifi_framework_use_single_radio_chain_scan_results_network_selection=0x7f020042;
    /**
     * Indicates that wifi link probing is supported on this device
     */
    public static final int config_wifi_link_probing_supported=0x7f020043;
    /**
     * Indicates that local-only hotspot should be brought up at 5GHz if 6GHz is not enabled
     * or feasible.  This option is for automotive builds only (the one that have
     * PackageManager#FEATURE_AUTOMOTIVE)
     */
    public static final int config_wifi_local_only_hotspot_5ghz=0x7f020044;
    /**
     * Boolean indicating that only configurations that have the same pre-shared key will be linked
     */
    public static final int config_wifi_only_link_same_credential_configurations=0x7f020045;
    /**
     * Indicates that p2p MAC randomization is supported on this device
     */
    public static final int config_wifi_p2p_mac_randomization_supported=0x7f020046;
    /**
     * Boolean indicating whether or not to revert to default country code when cellular
     * radio is unable to find any MCC information to infer wifi country code from
     */
    public static final int config_wifi_revert_country_code_on_cellular_loss=0x7f020047;
    /**
     * Wifi driver supports Automatic channel selection (ACS) for softap
     */
    public static final int config_wifi_softap_acs_supported=0x7f020048;
    /**
     * Wifi driver supports IEEE80211AC for softap
     */
    public static final int config_wifi_softap_ieee80211ac_supported=0x7f020049;
    /**
     * Wifi driver supports WPA3 Simultaneous Authentication of Equals (WPA3-SAE) for softap
     */
    public static final int config_wifi_softap_sae_supported=0x7f02004a;
    /**
     * Boolean indicating whether or not wifi should turn off when emergency call is made
     */
    public static final int config_wifi_turn_off_during_emergency_call=0x7f02004b;
    /**
     * Indicates that wifi watchdog is enabled on this device
     */
    public static final int config_wifi_watchdog_enabled=0x7f02004c;
  }
  public static final class drawable {
    public static final int ic_wifi_settings=0x7f030000;
    public static final int stat_notify_wifi_in_range=0x7f030001;
  }
  public static final class id {
    public static final int enter_pin_section=0x7f040000;
    public static final int info=0x7f040001;
    public static final int name=0x7f040002;
    public static final int value=0x7f040003;
    public static final int wifi_p2p_wps_pin=0x7f040004;
  }
  public static final class integer {
    /**
     * Configures 2 things:
     * 1. The maximum duration in minutes that all non-carrier-merged wifi becomes disabled when
     * WifiManager#startRestrictingAutoJoinToSubscriptionId is called.
     * 2. The maximum duration in minutes that a network is disabled when the user manually
     * triggers the "disconnect" feature.
     */
    public static final int config_wifiAllNonCarrierMergedWifiMaxDisableDurationMinutes=0x7f050000;
    /**
     * The minimum duration in minutes that all non-carrier-merged wifi becomes disabled when
     * WifiManager#startRestrictingAutoJoinToSubscriptionId is called.
     */
    public static final int config_wifiAllNonCarrierMergedWifiMinDisableDurationMinutes=0x7f050001;
    /**
     * If a non-locally generated disconnect happens within this time window after association,
     * then count it as a failure with reason code REASON_ABNORMAL_DISCONNECT (default = 30 seconds)
     */
    public static final int config_wifiBssidBlocklistAbnormalDisconnectTimeWindowMs=0x7f050002;
    public static final int config_wifiBssidBlocklistMonitorAbnormalDisconnectThreshold=0x7f050003;
    /**
     * List of constants that indicate the number of consecutive failures per type needed to block a BSSID.
     * A blocked BSSID will not be considered in network selection and firmware roaming.
     */
    public static final int config_wifiBssidBlocklistMonitorApUnableToHandleNewStaThreshold=0x7f050004;
    public static final int config_wifiBssidBlocklistMonitorAssociationRejectionThreshold=0x7f050005;
    public static final int config_wifiBssidBlocklistMonitorAssociationTimeoutThreshold=0x7f050006;
    public static final int config_wifiBssidBlocklistMonitorAuthenticationFailureThreshold=0x7f050007;
    /**
     * Base duration to block a BSSID after consecutive failures happen. (default = 5 mins)
     * The blocklist duration is increased exponentially for a BSSID that consecutively gets added to the blocklist.
     * ie. 5/10/20/40/80/160/320/640 minutes - capped at 640 minutes because the default for
     * config_wifiBssidBlocklistMonitorFailureStreakCap is set to 7
     */
    public static final int config_wifiBssidBlocklistMonitorBaseBlockDurationMs=0x7f050008;
    /**
     * Base duration to block a BSSID after the external connected scorer sets wifi as unusable.
     * The block duration is increased exponentially if the same BSSID is repeated marked as unusable.
     * ie. 0.5/1/2/4/8/16/32/64 minutes - capped at 64 minutes because the default for
     * config_wifiBssidBlocklistMonitorFailureStreakCap is set to 7. The block duration is reset to
     * the base value 3 hours after the latest connection to this BSSID.
     */
    public static final int config_wifiBssidBlocklistMonitorConnectedScoreBaseBlockDurationMs=0x7f050009;
    public static final int config_wifiBssidBlocklistMonitorDhcpFailureThreshold=0x7f05000a;
    public static final int config_wifiBssidBlocklistMonitorEapFailureThreshold=0x7f05000b;
    /**
     * The failure streak is the number of times a BSSID consecutively gets blocked without ever
     * successfully connecting in between, and is used to calculate the exponentially growing blocklist time.
     * The config_wifiBssidBlocklistMonitorFailureStreakCap controls how many times the block duration
     * could exponentially grow when a BSSID keeps failing.
     * ie. A value of 0 means BSSIDs are always blocked for the flat base duration defined by
     * config_wifiBssidBlocklistMonitorBaseBlockDurationMs.
     */
    public static final int config_wifiBssidBlocklistMonitorFailureStreakCap=0x7f05000c;
    public static final int config_wifiBssidBlocklistMonitorNetworkValidationFailureThreshold=0x7f05000d;
    public static final int config_wifiBssidBlocklistMonitorNonlocalDisconnectConnectingThreshold=0x7f05000e;
    public static final int config_wifiBssidBlocklistMonitorWrongPasswordThreshold=0x7f05000f;
    /**
     * Integer values represent the channel utilization in different RF bands when
     * config_wifiChannelUtilizationOverridingEnabled is true.
     * They should be set to [0, 255] corresponding to utilization ratio between 0 and 1
     */
    public static final int config_wifiChannelUtilizationOverride2g=0x7f050010;
    public static final int config_wifiChannelUtilizationOverride5g=0x7f050011;
    public static final int config_wifiChannelUtilizationOverride6g=0x7f050012;
    /**
     * Indicate max number of log records for WifiClientModeImpl
     */
    public static final int config_wifiClientModeImplNumLogRecs=0x7f050013;
    /**
     * Integer for minimum time between the last network selection and next high RSSI scan
     * in seconds when device is connected and screen is on
     */
    public static final int config_wifiConnectedHighRssiScanMinimumWindowSizeSec=0x7f050014;
    public static final int config_wifiConnectivityLocalLogMaxLinesHighRam=0x7f050015;
    /**
     * Indicate the max lines for connectivity local log based on the device ram size
     */
    public static final int config_wifiConnectivityLocalLogMaxLinesLowRam=0x7f050016;
    /**
     * The minimum number of txBad the framework has to observe to trigger a wifi data stall.
     */
    public static final int config_wifiDataStallMinTxBad=0x7f050017;
    /**
     * The minimum number of txSuccess the framework has to observe
     * to trigger a wifi data stall when rxSuccess is 0.
     */
    public static final int config_wifiDataStallMinTxSuccessWithoutRx=0x7f050018;
    /**
     * integer indicating additional disconnect delay (in ms) after IMS onLost() indication is received
     */
    public static final int config_wifiDelayDisconnectOnImsLostMs=0x7f050019;
    /**
     * List of constants to indicate how many failures are needed to temporarily disable a network
     * from auto-connect
     */
    public static final int config_wifiDisableReasonAssociationRejectionThreshold=0x7f05001a;
    /**
     * A value to indicate the duration (in ms) to disable a network from auto-connect based on
     * Carrier requirement. -1 represents disabling a network permanently
     */
    public static final int config_wifiDisableReasonAuthenticationFailureCarrierSpecificDurationMs=0x7f05001b;
    /**
     * A value to indicate how many failures are needed to temporarily or permanently
     * (depends on config_wifiDisableReasonAuthenticationFailureCarrierSpecificDurationMs)
     * disable a network from auto-connect based on Carrier requirement
     */
    public static final int config_wifiDisableReasonAuthenticationFailureCarrierSpecificThreshold=0x7f05001c;
    public static final int config_wifiDisableReasonAuthenticationFailureThreshold=0x7f05001d;
    public static final int config_wifiDisableReasonDhcpFailureThreshold=0x7f05001e;
    public static final int config_wifiDisableReasonNetworkNotFoundThreshold=0x7f05001f;
    /**
     * The estimate RSSI error margin in dBs to account minor differences in the environment and
     * the device's orientation.
     */
    public static final int config_wifiEstimateRssiErrorMarginDb=0x7f050020;
    /**
     * Integer specifying the minimum bonus for current network
     */
    public static final int config_wifiFrameworkCurrentNetworkBonusMin=0x7f050021;
    /**
     * Integer specifying the percent bonus for current network. The percent is applied to
     * the sum of rssi base score and throughput score
     */
    public static final int config_wifiFrameworkCurrentNetworkBonusPercent=0x7f050022;
    /**
     * The duration in minutes to strongly favor the last-selected network over other options.
     */
    public static final int config_wifiFrameworkLastSelectionMinutes=0x7f050023;
    public static final int config_wifiFrameworkMaxNumSpatialStreamDeviceOverrideValue=0x7f050024;
    /**
     * Integer specifying the min packet Tx/Rx rates in packets per second to be considered
     * active traffic so that network selection and scan could be skipped
     */
    public static final int config_wifiFrameworkMinPacketPerSecondActiveTraffic=0x7f050025;
    /**
     * Integer specifying the min packet Tx/Rx rates in packets per second to be considered
     * high traffic so that the device should stay on WiFi even if RSSI is very low
     */
    public static final int config_wifiFrameworkMinPacketPerSecondHighTraffic=0x7f050026;
    /**
     * The default values chosen here establish four non-overlapping categories:
     * saved, unmetered
     * unsaved, unmetered
     * saved, metered
     * unsaved, metered
     * These values can be reduced to allow overlapping between categories.
     */
    public static final int config_wifiFrameworkSavedNetworkBonus=0x7f050027;
    public static final int config_wifiFrameworkScoreBadRssiThreshold6ghz=0x7f050028;
    public static final int config_wifiFrameworkScoreEntryRssiThreshold6ghz=0x7f050029;
    public static final int config_wifiFrameworkScoreGoodRssiThreshold6ghz=0x7f05002a;
    public static final int config_wifiFrameworkScoreLowRssiThreshold6ghz=0x7f05002b;
    public static final int config_wifiFrameworkSecureNetworkBonus=0x7f05002c;
    /**
     * Integer delay in milliseconds before shutting down idle soft AP instance.
     * This timer is the inactivity timer for transitioning a Dual AP to Single AP mode
     * by shutting down one of the APs that has been inactive/unused.
     * If both APs in Dual AP mode are idle, it shuts down the AP in higher band.
     */
    public static final int config_wifiFrameworkSoftApShutDownIdleInstanceInBridgedModeTimeoutMillisecond=0x7f05002d;
    /**
     * Integer delay in milliseconds before shutting down soft AP when there
     * are no connected devices.
     */
    public static final int config_wifiFrameworkSoftApShutDownTimeoutMilliseconds=0x7f05002e;
    public static final int config_wifiFrameworkThroughputBonusDenominator=0x7f05002f;
    /**
     * Maximum contribution (in score points) due to the estimated throughput.
     */
    public static final int config_wifiFrameworkThroughputBonusLimit=0x7f050030;
    /**
     * The ratio of the next two parameters is the multiplier that converts the estimated
     * throughput in Mbps to score points.
     */
    public static final int config_wifiFrameworkThroughputBonusNumerator=0x7f050031;
    public static final int config_wifiFrameworkUnmeteredNetworkBonus=0x7f050032;
    /**
     * Integer indicating maximum hardware supported client number of soft ap
     */
    public static final int config_wifiHardwareSoftapMaxClientCount=0x7f050033;
    /**
     * When config_wifiHighMovementNetworkSelectionOptimizationEnabled is true, BSSIDs with RSSI
     * from 2 consecutive scans that differ in either direction by more than this threshold will be
     * filtered out from network selection. (default = 10 dBs)
     */
    public static final int config_wifiHighMovementNetworkSelectionOptimizationRssiDelta=0x7f050034;
    /**
     * Duration for the delayed scan used to verify access points are staying relatively stationary
     * to the device at high mobility state. (default = 10 seconds)
     */
    public static final int config_wifiHighMovementNetworkSelectionOptimizationScanDelayMs=0x7f050035;
    /**
     * Integer for maximum age for scan results used to identify channels for partial initial
     * scan in minutes
     */
    public static final int config_wifiInitialPartialScanChannelCacheAgeMins=0x7f050036;
    /**
     * Integer for maximum number of channels to use in initial partial scan. If equals to 0, means add all available channels for networks
     */
    public static final int config_wifiInitialPartialScanChannelMaxCount=0x7f050037;
    /**
     * A value to decide when NetworkCapabilities are updated to reflect the latest link
     * bandwidth. If the bandwidth change is above this value, NetworkCapabilities are updated
     */
    public static final int config_wifiLinkBandwidthUpdateThresholdPercent=0x7f050038;
    /**
     * Number of self recoveries to be attempted per hour. Any fatal errors beyond this will
     * cause the wifi stack to turn wifi off and wait for user input.
     * Set to 0 to turn off recovery attempts and always turn off wifi on failures
     */
    public static final int config_wifiMaxNativeFailureSelfRecoveryPerHour=0x7f050039;
    /**
     * Integer threshold for max number of WifiConfigurations that can be saved on the device.
     * A value of -1 indicates no limit. If a max number is specified, then under-used configs will
     * be deleted to make room for new configs.
     */
    public static final int config_wifiMaxNumWifiConfigurations=0x7f05003a;
    /**
     * Maximum number of SSIDs that can be PNO scanned concurrently
     */
    public static final int config_wifiMaxPnoSsidCount=0x7f05003b;
    /**
     * Initial PNO scan interval, in milliseconds, when the device is moving (i.e.
     * WifiManager.DEVICE_MOBILITY_STATE_UNKNOWN, WifiManager.DEVICE_MOBILITY_STATE_HIGH_MVMT, or
     * WifiManager.DEVICE_MOBILITY_STATE_LOW_MVMT).
     * The scan interval backs off from this initial interval on subsequent scans.
     * This scan is performed when screen is off and disconnected.
     */
    public static final int config_wifiMovingPnoScanIntervalMillis=0x7f05003c;
    /**
     * Indicate how many digits the postfix are. If the value is negative or smaller than 4,
     * the postfix will fallback to the first digit of ANDROID_ID.
     */
    public static final int config_wifiP2pDeviceNamePostfixNumDigits=0x7f05003d;
    /**
     * Integer specifying maximum wait time in seconds for next PNO scan when a network is found
     * by PNO scan but gets rejected by Wifi Network Selector due to its low RSSI value
     */
    public static final int config_wifiPnoScanLowRssiNetworkRetryMaxDelaySec=0x7f05003e;
    /**
     * Integer specifying minimum wait time in seconds for next PNO scan when a network is found
     * by PNO scan but gets rejected by Wifi Network Selector due to its low RSSI value
     */
    public static final int config_wifiPnoScanLowRssiNetworkRetryStartDelaySec=0x7f05003f;
    /**
     * When disconnected and PNO scan is enabled, wake up to do a single scan every
     * config_wifiPnoWatchdogIntervalMs in case PNO scan failed. (default = 20 minutes)
     */
    public static final int config_wifiPnoWatchdogIntervalMs=0x7f050040;
    /**
     * Integer indicating the RSSI and link layer stats polling interval in milliseconds when device is connected and screen is on
     */
    public static final int config_wifiPollRssiIntervalMilliseconds=0x7f050041;
    /**
     * Duration in minutes a recent failure should be displayed in the wifi picker UI.
     */
    public static final int config_wifiRecentFailureReasonExpirationMinutes=0x7f050042;
    /**
     * The interval in milliseconds at which wifi rtt ranging requests will be throttled when
     * they are coming from the background apps (default = 30 mins).
     */
    public static final int config_wifiRttBackgroundExecGapMs=0x7f050043;
    /**
     * Initial PNO scan interval, in milliseconds, when the device is stationary (i.e.
     * WifiManager.DEVICE_MOBILITY_STATE_STATIONARY).
     * The scan interval backs off from this initial interval on subsequent scans.
     * This scan is performed when screen is off and disconnected.
     */
    public static final int config_wifiStationaryPnoScanIntervalMillis=0x7f050044;
    /**
     * Integer duration after connection that a user-selected network is considered sufficient (milliseconds)
     */
    public static final int config_wifiSufficientDurationAfterUserSelectionMilliseconds=0x7f050045;
    public static final int config_wifiTrafficPollerRxPacketThreshold=0x7f050046;
    /**
     * Integer threshold for minimum packets required to notify clients of data activity
     */
    public static final int config_wifiTrafficPollerTxPacketThreshold=0x7f050047;
    /**
     * Integer indicating associated full scan max num active channels
     */
    public static final int config_wifi_framework_associated_partial_scan_max_num_active_channels=0x7f050048;
    /**
     * Integer delay in milliseconds before set wlan interface up during watchdog recovery
     */
    public static final int config_wifi_framework_recovery_timeout_delay=0x7f050049;
    public static final int config_wifi_framework_wifi_score_bad_rssi_threshold_24GHz=0x7f05004a;
    /**
     * Integer threshold for low network score, should be somewhat less than the entry threshhold
     */
    public static final int config_wifi_framework_wifi_score_bad_rssi_threshold_5GHz=0x7f05004b;
    public static final int config_wifi_framework_wifi_score_entry_rssi_threshold_24GHz=0x7f05004c;
    /**
     * Integer threshold, do not connect to APs with RSSI lower than the entry threshold
     */
    public static final int config_wifi_framework_wifi_score_entry_rssi_threshold_5GHz=0x7f05004d;
    public static final int config_wifi_framework_wifi_score_good_rssi_threshold_24GHz=0x7f05004e;
    public static final int config_wifi_framework_wifi_score_good_rssi_threshold_5GHz=0x7f05004f;
    public static final int config_wifi_framework_wifi_score_low_rssi_threshold_24GHz=0x7f050050;
    public static final int config_wifi_framework_wifi_score_low_rssi_threshold_5GHz=0x7f050051;
    /**
     * Integer size limit, in KB, for a single WifiLogger ringbuffer, in default logging mode
     */
    public static final int config_wifi_logger_ring_buffer_default_size_limit_kb=0x7f050052;
    /**
     * Integer size limit, in KB, for a single WifiLogger ringbuffer, in verbose logging mode
     */
    public static final int config_wifi_logger_ring_buffer_verbose_size_limit_kb=0x7f050053;
  }
  public static final class layout {
    public static final int wifi_p2p_dialog=0x7f060000;
    public static final int wifi_p2p_dialog_row=0x7f060001;
  }
  public static final class string {
    public static final int accept=0x7f070000;
    /**
     * Filepath of the xml table of parameters used by Wifi coex channel avoidance.
     */
    public static final int config_wifiCoexTableFilepath=0x7f070001;
    /**
     * Indicate the prefix of wifi p2p device name, the length should be between 1 ~ 28.
     */
    public static final int config_wifiP2pDeviceNamePrefix=0x7f070002;
    /**
     * List of allowed channels in 2GHz band for softap. If the device doesn't want to restrict
     * channels this should be empty. Values is a comma separated channel string and/or channel
     * range string like '1-6,11'.
     */
    public static final int config_wifiSoftap2gChannelList=0x7f070003;
    /**
     * List of allowed channels in 5GHz band for softap. If the device doesn't want to restrict
     * channels this should be empty. Values is a comma separated channel string and/or channel
     * range string like '36-48,149'.
     */
    public static final int config_wifiSoftap5gChannelList=0x7f070004;
    /**
     * List of allowed channels in 60GHz band for softap. If the device doesn't want to restrict
     * channels this should be empty. Values is a comma separated channel string and/or channel
     * range string like '1-2,4'.
     */
    public static final int config_wifiSoftap60gChannelList=0x7f070005;
    /**
     * List of allowed channels in 6GHz band for softap. If the device doesn't want to restrict
     * channels this should be empty. Values is a comma separated channel string and/or channel
     * range string like '36-48,149'.
     */
    public static final int config_wifiSoftap6gChannelList=0x7f070006;
    /**
     * Device type information conforming to Annex B format in WiFi Direct specification.
     * The default represents a dual-mode smartphone
     */
    public static final int config_wifi_p2p_device_type=0x7f070007;
    /**
     * Configure wifi tcp buffersizes in the form:
     * rmem_min,rmem_def,rmem_max,wmem_min,wmem_def,wmem_max
     */
    public static final int config_wifi_tcp_buffers=0x7f070008;
    public static final int decline=0x7f070009;
    /**
     * Dialog ok button
     */
    public static final int dlg_ok=0x7f07000a;
    /**
     * Text shown when viewing channel settings for notifications related to network alerts
     */
    public static final int notification_channel_network_alerts=0x7f07000b;
    /**
     * Text shown when viewing the channel settings for notification about open nearby wireless networks.
     */
    public static final int notification_channel_network_available=0x7f07000c;
    /**
     * Text shown when viewing channel settings for notifications related to network status
     */
    public static final int notification_channel_network_status=0x7f07000d;
    public static final int ok=0x7f07000e;
    /**
     * Official label of the wifi stack
     */
    public static final int wifiResourcesAppLabel=0x7f07000f;
    /**
     * Notification action name for opening the wifi picker, showing the user all the nearby networks.
     */
    public static final int wifi_available_action_all_networks=0x7f070010;
    /**
     * Notification action name for connecting to the network specified in the notification body.
     */
    public static final int wifi_available_action_connect=0x7f070011;
    /**
     * Notification content when the system failed to connect to the specified network. This informs the user that tapping on this notification will open the wifi picker.
     */
    public static final int wifi_available_content_failed_to_connect=0x7f070012;
    /**
     * Notification title for a nearby open wireless network.
     */
    public static final int wifi_available_title=0x7f070013;
    /**
     * Notification title when the system has connected to the network. The network name is specified in the notification content.
     */
    public static final int wifi_available_title_connected=0x7f070014;
    /**
     * Notification title when the system is connecting to the specified network. The network name is specified in the notification content.
     */
    public static final int wifi_available_title_connecting=0x7f070015;
    /**
     * Notification title when the system failed to connect to the specified network.
     */
    public static final int wifi_available_title_failed_to_connect=0x7f070016;
    public static final int wifi_cannot_connect_with_randomized_mac_message=0x7f070017;
    /**
     * Start of string constants used to inform the user that the current network may be failing to connect due to not supporting randomized MAC
     */
    public static final int wifi_cannot_connect_with_randomized_mac_title=0x7f070018;
    /**
     * message explaining who is connecting to what
     */
    public static final int wifi_connect_alert_message=0x7f070019;
    /**
     * title for this message
     */
    public static final int wifi_connect_alert_title=0x7f07001a;
    /**
     * default application in case name can not be found
     */
    public static final int wifi_connect_default_application=0x7f07001b;
    public static final int wifi_disable_mac_randomization_dialog_confirm_text=0x7f07001c;
    public static final int wifi_disable_mac_randomization_dialog_failure=0x7f07001d;
    public static final int wifi_disable_mac_randomization_dialog_message=0x7f07001e;
    public static final int wifi_disable_mac_randomization_dialog_network_not_found=0x7f07001f;
    public static final int wifi_disable_mac_randomization_dialog_success=0x7f070020;
    public static final int wifi_disable_mac_randomization_dialog_title=0x7f070021;
    /**
     * A notification is shown when eap failure happens. It should be overridden by carrier-specific overlays.
     * A notification is shown when eap failure happens. It should be overridden by carrier-specific overlays.
     * A notification is shown when eap failure happens. It should be overridden by carrier-specific overlays.
     */
    public static final int wifi_eap_error_message_code_32760=0x7f070022;
    public static final int wifi_eap_error_message_code_32761=0x7f070023;
    public static final int wifi_eap_error_message_code_32762=0x7f070024;
    public static final int wifi_eap_error_message_code_32763=0x7f070025;
    public static final int wifi_eap_error_message_code_32764=0x7f070026;
    public static final int wifi_eap_error_message_code_32765=0x7f070027;
    public static final int wifi_eap_error_message_code_32766=0x7f070028;
    /**
     * Do not translate. Default access point SSID used for local only hotspot
     */
    public static final int wifi_localhotspot_configure_ssid_default=0x7f070029;
    public static final int wifi_p2p_enter_pin_message=0x7f07002a;
    public static final int wifi_p2p_frequency_conflict_message=0x7f07002b;
    public static final int wifi_p2p_from_message=0x7f07002c;
    public static final int wifi_p2p_invitation_sent_title=0x7f07002d;
    public static final int wifi_p2p_invitation_to_connect_title=0x7f07002e;
    public static final int wifi_p2p_show_pin_message=0x7f07002f;
    public static final int wifi_p2p_to_message=0x7f070030;
    public static final int wifi_sim_required_message=0x7f070031;
    /**
     * A notification is shown when eap-sim/aka/aka' wifi network is disconnected due to sim removal
     */
    public static final int wifi_sim_required_title=0x7f070032;
    public static final int wifi_softap_auto_shutdown_timeout_expired_summary=0x7f070033;
    /**
     * A notification is shown when softap auto shutdown timeout expired. It should be overridden by carrier-specific overlays.
     */
    public static final int wifi_softap_auto_shutdown_timeout_expired_title=0x7f070034;
    /**
     * Notification action for allowing app specified in the notification body.
     */
    public static final int wifi_suggestion_action_allow_app=0x7f070035;
    /**
     * Notification action for allowing carrier specified in the notification body.
     */
    public static final int wifi_suggestion_action_allow_imsi_privacy_exemption_carrier=0x7f070036;
    /**
     * Confirmation dialog action for allowing carrier specified in the dialog body
     */
    public static final int wifi_suggestion_action_allow_imsi_privacy_exemption_confirmation=0x7f070037;
    /**
     * Notification action for disallowing app specified in the notification body.
     */
    public static final int wifi_suggestion_action_disallow_app=0x7f070038;
    /**
     * Notification action for disallowing carrier specified in the notification body.
     */
    public static final int wifi_suggestion_action_disallow_imsi_privacy_exemption_carrier=0x7f070039;
    /**
     * Confirmation dialog action for disallowing carrier specified in the dialog body
     */
    public static final int wifi_suggestion_action_disallow_imsi_privacy_exemption_confirmation=0x7f07003a;
    /**
     * Notification content for a connection to a app suggested wireless network.
     */
    public static final int wifi_suggestion_content=0x7f07003b;
    /**
     * Notification content for a connection to a SIM-based carrier network without IMSI privacy protection.
     */
    public static final int wifi_suggestion_imsi_privacy_content=0x7f07003c;
    /**
     * Confirmation dialog content for a connection to a SIM-based carrier network without IMSI privacy protection.
     */
    public static final int wifi_suggestion_imsi_privacy_exemption_confirmation_content=0x7f07003d;
    /**
     * Confirmation dialog title for a connection to a SIM-based carrier network without IMSI privacy protection.
     */
    public static final int wifi_suggestion_imsi_privacy_exemption_confirmation_title=0x7f07003e;
    /**
     * Notification title for a connection to a SIM-based carrier network without IMSI privacy protection.
     */
    public static final int wifi_suggestion_imsi_privacy_title=0x7f07003f;
    /**
     * Notification title for a connection to a app suggested wireless network.
     */
    public static final int wifi_suggestion_title=0x7f070040;
    /**
     * Do not translate. Default access point SSID used for tethering
     */
    public static final int wifi_tether_configure_ssid_default=0x7f070041;
    /**
     * Notification content for when Wi-Fi Wake enables Wi-Fi. %1$s is the SSID of the nearby saved network that triggered the wakeup.
     */
    public static final int wifi_wakeup_enabled_content=0x7f070042;
    /**
     * Notification title for when Wi-Fi Wake enables Wi-Fi.
     */
    public static final int wifi_wakeup_enabled_title=0x7f070043;
    /**
     * Notification action to disable Wi-Fi Wake during onboarding.
     */
    public static final int wifi_wakeup_onboarding_action_disable=0x7f070044;
    /**
     * Notification subtext for Wi-Fi Wake onboarding.
     */
    public static final int wifi_wakeup_onboarding_subtext=0x7f070045;
    /**
     * Notification title for Wi-Fi Wake onboarding. This is displayed the first time a user disables Wi-Fi with the feature enabled.
     */
    public static final int wifi_wakeup_onboarding_title=0x7f070046;
    /**
     * A notification is shown when a user's selected SSID is later disabled due to connectivity problems.  This is the notification's title / ticker.
     */
    public static final int wifi_watchdog_network_disabled=0x7f070047;
    /**
     * A notification is shown when a user's selected SSID is later disabled due to connectivity problems.  The complete alert msg is: <hotspot name> + this string, i.e. "Linksys has a poor internet connection"
     */
    public static final int wifi_watchdog_network_disabled_detailed=0x7f070048;
  }
  public static final class style {
    /**
     * Wifi dialog styles
     */
    public static final int wifi_item=0x7f080000;
    public static final int wifi_item_content=0x7f080001;
    public static final int wifi_item_label=0x7f080002;
    public static final int wifi_section=0x7f080003;
  }
}