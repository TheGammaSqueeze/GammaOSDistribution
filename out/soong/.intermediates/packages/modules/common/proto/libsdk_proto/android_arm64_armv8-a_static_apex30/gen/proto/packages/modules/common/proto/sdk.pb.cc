// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packages/modules/common/proto/sdk.proto

#include "packages/modules/common/proto/sdk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fcommon_2fproto_2fsdk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExtensionVersion_packages_2fmodules_2fcommon_2fproto_2fsdk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fcommon_2fproto_2fsdk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExtensionVersion_ModuleRequirement_packages_2fmodules_2fcommon_2fproto_2fsdk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fcommon_2fproto_2fsdk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SdkVersion_packages_2fmodules_2fcommon_2fproto_2fsdk_2eproto;
class SdkVersionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SdkVersion> _instance;
} _SdkVersion_default_instance_;
class ExtensionVersion_ModuleRequirementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExtensionVersion_ModuleRequirement> _instance;
} _ExtensionVersion_ModuleRequirement_default_instance_;
class ExtensionVersionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExtensionVersion> _instance;
} _ExtensionVersion_default_instance_;
class ExtensionDatabaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExtensionDatabase> _instance;
} _ExtensionDatabase_default_instance_;
static void InitDefaultsscc_info_ExtensionDatabase_packages_2fmodules_2fcommon_2fproto_2fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ExtensionDatabase_default_instance_;
    new (ptr) ::ExtensionDatabase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ExtensionDatabase::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExtensionDatabase_packages_2fmodules_2fcommon_2fproto_2fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ExtensionDatabase_packages_2fmodules_2fcommon_2fproto_2fsdk_2eproto}, {
      &scc_info_ExtensionVersion_packages_2fmodules_2fcommon_2fproto_2fsdk_2eproto.base,}};

static void InitDefaultsscc_info_ExtensionVersion_packages_2fmodules_2fcommon_2fproto_2fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ExtensionVersion_default_instance_;
    new (ptr) ::ExtensionVersion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ExtensionVersion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExtensionVersion_packages_2fmodules_2fcommon_2fproto_2fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ExtensionVersion_packages_2fmodules_2fcommon_2fproto_2fsdk_2eproto}, {
      &scc_info_ExtensionVersion_ModuleRequirement_packages_2fmodules_2fcommon_2fproto_2fsdk_2eproto.base,}};

static void InitDefaultsscc_info_ExtensionVersion_ModuleRequirement_packages_2fmodules_2fcommon_2fproto_2fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ExtensionVersion_ModuleRequirement_default_instance_;
    new (ptr) ::ExtensionVersion_ModuleRequirement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ExtensionVersion_ModuleRequirement::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExtensionVersion_ModuleRequirement_packages_2fmodules_2fcommon_2fproto_2fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ExtensionVersion_ModuleRequirement_packages_2fmodules_2fcommon_2fproto_2fsdk_2eproto}, {
      &scc_info_SdkVersion_packages_2fmodules_2fcommon_2fproto_2fsdk_2eproto.base,}};

static void InitDefaultsscc_info_SdkVersion_packages_2fmodules_2fcommon_2fproto_2fsdk_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SdkVersion_default_instance_;
    new (ptr) ::SdkVersion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SdkVersion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SdkVersion_packages_2fmodules_2fcommon_2fproto_2fsdk_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SdkVersion_packages_2fmodules_2fcommon_2fproto_2fsdk_2eproto}, {}};

bool SdkModule_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SdkModule_strings[11] = {};

static const char SdkModule_names[] =
  "ART"
  "CONSCRYPT"
  "IPSEC"
  "MEDIA"
  "MEDIA_PROVIDER"
  "PERMISSIONS"
  "SCHEDULING"
  "SDK_EXTENSIONS"
  "STATSD"
  "TETHERING"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SdkModule_entries[] = {
  { {SdkModule_names + 0, 3}, 8 },
  { {SdkModule_names + 3, 9}, 10 },
  { {SdkModule_names + 12, 5}, 1 },
  { {SdkModule_names + 17, 5}, 2 },
  { {SdkModule_names + 22, 14}, 3 },
  { {SdkModule_names + 36, 11}, 4 },
  { {SdkModule_names + 47, 10}, 9 },
  { {SdkModule_names + 57, 14}, 5 },
  { {SdkModule_names + 71, 6}, 6 },
  { {SdkModule_names + 77, 9}, 7 },
  { {SdkModule_names + 86, 7}, 0 },
};

static const int SdkModule_entries_by_number[] = {
  10, // 0 -> UNKNOWN
  2, // 1 -> IPSEC
  3, // 2 -> MEDIA
  4, // 3 -> MEDIA_PROVIDER
  5, // 4 -> PERMISSIONS
  7, // 5 -> SDK_EXTENSIONS
  8, // 6 -> STATSD
  9, // 7 -> TETHERING
  0, // 8 -> ART
  6, // 9 -> SCHEDULING
  1, // 10 -> CONSCRYPT
};

const std::string& SdkModule_Name(
    SdkModule value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SdkModule_entries,
          SdkModule_entries_by_number,
          11, SdkModule_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SdkModule_entries,
      SdkModule_entries_by_number,
      11, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SdkModule_strings[idx].get();
}
bool SdkModule_Parse(
    const std::string& name, SdkModule* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SdkModule_entries, 11, name, &int_value);
  if (success) {
    *value = static_cast<SdkModule>(int_value);
  }
  return success;
}

// ===================================================================

void SdkVersion::InitAsDefaultInstance() {
}
class SdkVersion::_Internal {
 public:
};

SdkVersion::SdkVersion()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SdkVersion)
}
SdkVersion::SdkVersion(const SdkVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:SdkVersion)
}

void SdkVersion::SharedCtor() {
  version_ = 0;
}

SdkVersion::~SdkVersion() {
  // @@protoc_insertion_point(destructor:SdkVersion)
  SharedDtor();
}

void SdkVersion::SharedDtor() {
}

void SdkVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SdkVersion& SdkVersion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SdkVersion_packages_2fmodules_2fcommon_2fproto_2fsdk_2eproto.base);
  return *internal_default_instance();
}


void SdkVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:SdkVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SdkVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SdkVersion::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:SdkVersion)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 version = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SdkVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SdkVersion)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SdkVersion::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SdkVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->version() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:SdkVersion)
}

size_t SdkVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SdkVersion)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->version());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SdkVersion::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SdkVersion*>(
      &from));
}

void SdkVersion::MergeFrom(const SdkVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SdkVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version() != 0) {
    set_version(from.version());
  }
}

void SdkVersion::CopyFrom(const SdkVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SdkVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SdkVersion::IsInitialized() const {
  return true;
}

void SdkVersion::InternalSwap(SdkVersion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(version_, other->version_);
}

std::string SdkVersion::GetTypeName() const {
  return "SdkVersion";
}


// ===================================================================

void ExtensionVersion_ModuleRequirement::InitAsDefaultInstance() {
  ::_ExtensionVersion_ModuleRequirement_default_instance_._instance.get_mutable()->version_ = const_cast< ::SdkVersion*>(
      ::SdkVersion::internal_default_instance());
}
class ExtensionVersion_ModuleRequirement::_Internal {
 public:
  static const ::SdkVersion& version(const ExtensionVersion_ModuleRequirement* msg);
};

const ::SdkVersion&
ExtensionVersion_ModuleRequirement::_Internal::version(const ExtensionVersion_ModuleRequirement* msg) {
  return *msg->version_;
}
ExtensionVersion_ModuleRequirement::ExtensionVersion_ModuleRequirement()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ExtensionVersion.ModuleRequirement)
}
ExtensionVersion_ModuleRequirement::ExtensionVersion_ModuleRequirement(const ExtensionVersion_ModuleRequirement& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_version()) {
    version_ = new ::SdkVersion(*from.version_);
  } else {
    version_ = nullptr;
  }
  module_ = from.module_;
  // @@protoc_insertion_point(copy_constructor:ExtensionVersion.ModuleRequirement)
}

void ExtensionVersion_ModuleRequirement::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExtensionVersion_ModuleRequirement_packages_2fmodules_2fcommon_2fproto_2fsdk_2eproto.base);
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&module_) -
      reinterpret_cast<char*>(&version_)) + sizeof(module_));
}

ExtensionVersion_ModuleRequirement::~ExtensionVersion_ModuleRequirement() {
  // @@protoc_insertion_point(destructor:ExtensionVersion.ModuleRequirement)
  SharedDtor();
}

void ExtensionVersion_ModuleRequirement::SharedDtor() {
  if (this != internal_default_instance()) delete version_;
}

void ExtensionVersion_ModuleRequirement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExtensionVersion_ModuleRequirement& ExtensionVersion_ModuleRequirement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExtensionVersion_ModuleRequirement_packages_2fmodules_2fcommon_2fproto_2fsdk_2eproto.base);
  return *internal_default_instance();
}


void ExtensionVersion_ModuleRequirement::Clear() {
// @@protoc_insertion_point(message_clear_start:ExtensionVersion.ModuleRequirement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
  module_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExtensionVersion_ModuleRequirement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .SdkModule module = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_module(static_cast<::SdkModule>(val));
        } else goto handle_unusual;
        continue;
      // .SdkVersion version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExtensionVersion_ModuleRequirement::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ExtensionVersion.ModuleRequirement)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .SdkModule module = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_module(static_cast< ::SdkModule >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SdkVersion version = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ExtensionVersion.ModuleRequirement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ExtensionVersion.ModuleRequirement)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExtensionVersion_ModuleRequirement::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ExtensionVersion.ModuleRequirement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .SdkModule module = 1;
  if (this->module() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->module(), output);
  }

  // .SdkVersion version = 2;
  if (this->has_version()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::version(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ExtensionVersion.ModuleRequirement)
}

size_t ExtensionVersion_ModuleRequirement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ExtensionVersion.ModuleRequirement)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SdkVersion version = 2;
  if (this->has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_);
  }

  // .SdkModule module = 1;
  if (this->module() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->module());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtensionVersion_ModuleRequirement::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ExtensionVersion_ModuleRequirement*>(
      &from));
}

void ExtensionVersion_ModuleRequirement::MergeFrom(const ExtensionVersion_ModuleRequirement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ExtensionVersion.ModuleRequirement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_version()) {
    mutable_version()->::SdkVersion::MergeFrom(from.version());
  }
  if (from.module() != 0) {
    set_module(from.module());
  }
}

void ExtensionVersion_ModuleRequirement::CopyFrom(const ExtensionVersion_ModuleRequirement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ExtensionVersion.ModuleRequirement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionVersion_ModuleRequirement::IsInitialized() const {
  return true;
}

void ExtensionVersion_ModuleRequirement::InternalSwap(ExtensionVersion_ModuleRequirement* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(version_, other->version_);
  swap(module_, other->module_);
}

std::string ExtensionVersion_ModuleRequirement::GetTypeName() const {
  return "ExtensionVersion.ModuleRequirement";
}


// ===================================================================

void ExtensionVersion::InitAsDefaultInstance() {
}
class ExtensionVersion::_Internal {
 public:
};

ExtensionVersion::ExtensionVersion()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ExtensionVersion)
}
ExtensionVersion::ExtensionVersion(const ExtensionVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      requirements_(from.requirements_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:ExtensionVersion)
}

void ExtensionVersion::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExtensionVersion_packages_2fmodules_2fcommon_2fproto_2fsdk_2eproto.base);
  version_ = 0;
}

ExtensionVersion::~ExtensionVersion() {
  // @@protoc_insertion_point(destructor:ExtensionVersion)
  SharedDtor();
}

void ExtensionVersion::SharedDtor() {
}

void ExtensionVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExtensionVersion& ExtensionVersion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExtensionVersion_packages_2fmodules_2fcommon_2fproto_2fsdk_2eproto.base);
  return *internal_default_instance();
}


void ExtensionVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:ExtensionVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requirements_.Clear();
  version_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExtensionVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ExtensionVersion.ModuleRequirement requirements = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_requirements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExtensionVersion::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ExtensionVersion)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 version = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ExtensionVersion.ModuleRequirement requirements = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_requirements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ExtensionVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ExtensionVersion)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExtensionVersion::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ExtensionVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->version() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // repeated .ExtensionVersion.ModuleRequirement requirements = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->requirements_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->requirements(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ExtensionVersion)
}

size_t ExtensionVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ExtensionVersion)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ExtensionVersion.ModuleRequirement requirements = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->requirements_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->requirements(static_cast<int>(i)));
    }
  }

  // int32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->version());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtensionVersion::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ExtensionVersion*>(
      &from));
}

void ExtensionVersion::MergeFrom(const ExtensionVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ExtensionVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requirements_.MergeFrom(from.requirements_);
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void ExtensionVersion::CopyFrom(const ExtensionVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ExtensionVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionVersion::IsInitialized() const {
  return true;
}

void ExtensionVersion::InternalSwap(ExtensionVersion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&requirements_)->InternalSwap(CastToBase(&other->requirements_));
  swap(version_, other->version_);
}

std::string ExtensionVersion::GetTypeName() const {
  return "ExtensionVersion";
}


// ===================================================================

void ExtensionDatabase::InitAsDefaultInstance() {
}
class ExtensionDatabase::_Internal {
 public:
};

ExtensionDatabase::ExtensionDatabase()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ExtensionDatabase)
}
ExtensionDatabase::ExtensionDatabase(const ExtensionDatabase& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      versions_(from.versions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ExtensionDatabase)
}

void ExtensionDatabase::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExtensionDatabase_packages_2fmodules_2fcommon_2fproto_2fsdk_2eproto.base);
}

ExtensionDatabase::~ExtensionDatabase() {
  // @@protoc_insertion_point(destructor:ExtensionDatabase)
  SharedDtor();
}

void ExtensionDatabase::SharedDtor() {
}

void ExtensionDatabase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExtensionDatabase& ExtensionDatabase::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExtensionDatabase_packages_2fmodules_2fcommon_2fproto_2fsdk_2eproto.base);
  return *internal_default_instance();
}


void ExtensionDatabase::Clear() {
// @@protoc_insertion_point(message_clear_start:ExtensionDatabase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  versions_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExtensionDatabase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ExtensionVersion versions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_versions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExtensionDatabase::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ExtensionDatabase)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ExtensionVersion versions = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_versions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ExtensionDatabase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ExtensionDatabase)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExtensionDatabase::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ExtensionDatabase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ExtensionVersion versions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->versions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->versions(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ExtensionDatabase)
}

size_t ExtensionDatabase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ExtensionDatabase)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ExtensionVersion versions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->versions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->versions(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtensionDatabase::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ExtensionDatabase*>(
      &from));
}

void ExtensionDatabase::MergeFrom(const ExtensionDatabase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ExtensionDatabase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  versions_.MergeFrom(from.versions_);
}

void ExtensionDatabase::CopyFrom(const ExtensionDatabase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ExtensionDatabase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionDatabase::IsInitialized() const {
  return true;
}

void ExtensionDatabase::InternalSwap(ExtensionDatabase* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&versions_)->InternalSwap(CastToBase(&other->versions_));
}

std::string ExtensionDatabase::GetTypeName() const {
  return "ExtensionDatabase";
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SdkVersion* Arena::CreateMaybeMessage< ::SdkVersion >(Arena* arena) {
  return Arena::CreateInternal< ::SdkVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::ExtensionVersion_ModuleRequirement* Arena::CreateMaybeMessage< ::ExtensionVersion_ModuleRequirement >(Arena* arena) {
  return Arena::CreateInternal< ::ExtensionVersion_ModuleRequirement >(arena);
}
template<> PROTOBUF_NOINLINE ::ExtensionVersion* Arena::CreateMaybeMessage< ::ExtensionVersion >(Arena* arena) {
  return Arena::CreateInternal< ::ExtensionVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::ExtensionDatabase* Arena::CreateMaybeMessage< ::ExtensionDatabase >(Arena* arena) {
  return Arena::CreateInternal< ::ExtensionDatabase >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
