// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packages/modules/adb/proto/app_processes.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_packages_2fmodules_2fadb_2fproto_2fapp_5fprocesses_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_packages_2fmodules_2fadb_2fproto_2fapp_5fprocesses_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fadb_2fproto_2fapp_5fprocesses_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_packages_2fmodules_2fadb_2fproto_2fapp_5fprocesses_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace adb {
namespace proto {
class AppProcesses;
class AppProcessesDefaultTypeInternal;
extern AppProcessesDefaultTypeInternal _AppProcesses_default_instance_;
class ProcessEntry;
class ProcessEntryDefaultTypeInternal;
extern ProcessEntryDefaultTypeInternal _ProcessEntry_default_instance_;
}  // namespace proto
}  // namespace adb
PROTOBUF_NAMESPACE_OPEN
template<> ::adb::proto::AppProcesses* Arena::CreateMaybeMessage<::adb::proto::AppProcesses>(Arena*);
template<> ::adb::proto::ProcessEntry* Arena::CreateMaybeMessage<::adb::proto::ProcessEntry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace adb {
namespace proto {

// ===================================================================

class ProcessEntry :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:adb.proto.ProcessEntry) */ {
 public:
  ProcessEntry();
  virtual ~ProcessEntry();

  ProcessEntry(const ProcessEntry& from);
  ProcessEntry(ProcessEntry&& from) noexcept
    : ProcessEntry() {
    *this = ::std::move(from);
  }

  inline ProcessEntry& operator=(const ProcessEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessEntry& operator=(ProcessEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ProcessEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessEntry* internal_default_instance() {
    return reinterpret_cast<const ProcessEntry*>(
               &_ProcessEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProcessEntry& a, ProcessEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessEntry* New() const final {
    return CreateMaybeMessage<ProcessEntry>(nullptr);
  }

  ProcessEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessEntry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ProcessEntry& from);
  void MergeFrom(const ProcessEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProcessEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "adb.proto.ProcessEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArchitectureFieldNumber = 4,
    kPidFieldNumber = 1,
    kDebuggableFieldNumber = 2,
    kProfileableFieldNumber = 3,
  };
  // string architecture = 4;
  void clear_architecture();
  const std::string& architecture() const;
  void set_architecture(const std::string& value);
  void set_architecture(std::string&& value);
  void set_architecture(const char* value);
  void set_architecture(const char* value, size_t size);
  std::string* mutable_architecture();
  std::string* release_architecture();
  void set_allocated_architecture(std::string* architecture);

  // int64 pid = 1;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::int64 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // bool debuggable = 2;
  void clear_debuggable();
  bool debuggable() const;
  void set_debuggable(bool value);

  // bool profileable = 3;
  void clear_profileable();
  bool profileable() const;
  void set_profileable(bool value);

  // @@protoc_insertion_point(class_scope:adb.proto.ProcessEntry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr architecture_;
  ::PROTOBUF_NAMESPACE_ID::int64 pid_;
  bool debuggable_;
  bool profileable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packages_2fmodules_2fadb_2fproto_2fapp_5fprocesses_2eproto;
};
// -------------------------------------------------------------------

class AppProcesses :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:adb.proto.AppProcesses) */ {
 public:
  AppProcesses();
  virtual ~AppProcesses();

  AppProcesses(const AppProcesses& from);
  AppProcesses(AppProcesses&& from) noexcept
    : AppProcesses() {
    *this = ::std::move(from);
  }

  inline AppProcesses& operator=(const AppProcesses& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppProcesses& operator=(AppProcesses&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const AppProcesses& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppProcesses* internal_default_instance() {
    return reinterpret_cast<const AppProcesses*>(
               &_AppProcesses_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AppProcesses& a, AppProcesses& b) {
    a.Swap(&b);
  }
  inline void Swap(AppProcesses* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppProcesses* New() const final {
    return CreateMaybeMessage<AppProcesses>(nullptr);
  }

  AppProcesses* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppProcesses>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AppProcesses& from);
  void MergeFrom(const AppProcesses& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AppProcesses* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "adb.proto.AppProcesses";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessFieldNumber = 1,
  };
  // repeated .adb.proto.ProcessEntry process = 1;
  int process_size() const;
  void clear_process();
  ::adb::proto::ProcessEntry* mutable_process(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::adb::proto::ProcessEntry >*
      mutable_process();
  const ::adb::proto::ProcessEntry& process(int index) const;
  ::adb::proto::ProcessEntry* add_process();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::adb::proto::ProcessEntry >&
      process() const;

  // @@protoc_insertion_point(class_scope:adb.proto.AppProcesses)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::adb::proto::ProcessEntry > process_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packages_2fmodules_2fadb_2fproto_2fapp_5fprocesses_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProcessEntry

// int64 pid = 1;
inline void ProcessEntry::clear_pid() {
  pid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProcessEntry::pid() const {
  // @@protoc_insertion_point(field_get:adb.proto.ProcessEntry.pid)
  return pid_;
}
inline void ProcessEntry::set_pid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:adb.proto.ProcessEntry.pid)
}

// bool debuggable = 2;
inline void ProcessEntry::clear_debuggable() {
  debuggable_ = false;
}
inline bool ProcessEntry::debuggable() const {
  // @@protoc_insertion_point(field_get:adb.proto.ProcessEntry.debuggable)
  return debuggable_;
}
inline void ProcessEntry::set_debuggable(bool value) {
  
  debuggable_ = value;
  // @@protoc_insertion_point(field_set:adb.proto.ProcessEntry.debuggable)
}

// bool profileable = 3;
inline void ProcessEntry::clear_profileable() {
  profileable_ = false;
}
inline bool ProcessEntry::profileable() const {
  // @@protoc_insertion_point(field_get:adb.proto.ProcessEntry.profileable)
  return profileable_;
}
inline void ProcessEntry::set_profileable(bool value) {
  
  profileable_ = value;
  // @@protoc_insertion_point(field_set:adb.proto.ProcessEntry.profileable)
}

// string architecture = 4;
inline void ProcessEntry::clear_architecture() {
  architecture_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProcessEntry::architecture() const {
  // @@protoc_insertion_point(field_get:adb.proto.ProcessEntry.architecture)
  return architecture_.GetNoArena();
}
inline void ProcessEntry::set_architecture(const std::string& value) {
  
  architecture_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:adb.proto.ProcessEntry.architecture)
}
inline void ProcessEntry::set_architecture(std::string&& value) {
  
  architecture_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:adb.proto.ProcessEntry.architecture)
}
inline void ProcessEntry::set_architecture(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  architecture_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:adb.proto.ProcessEntry.architecture)
}
inline void ProcessEntry::set_architecture(const char* value, size_t size) {
  
  architecture_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:adb.proto.ProcessEntry.architecture)
}
inline std::string* ProcessEntry::mutable_architecture() {
  
  // @@protoc_insertion_point(field_mutable:adb.proto.ProcessEntry.architecture)
  return architecture_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessEntry::release_architecture() {
  // @@protoc_insertion_point(field_release:adb.proto.ProcessEntry.architecture)
  
  return architecture_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessEntry::set_allocated_architecture(std::string* architecture) {
  if (architecture != nullptr) {
    
  } else {
    
  }
  architecture_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), architecture);
  // @@protoc_insertion_point(field_set_allocated:adb.proto.ProcessEntry.architecture)
}

// -------------------------------------------------------------------

// AppProcesses

// repeated .adb.proto.ProcessEntry process = 1;
inline int AppProcesses::process_size() const {
  return process_.size();
}
inline void AppProcesses::clear_process() {
  process_.Clear();
}
inline ::adb::proto::ProcessEntry* AppProcesses::mutable_process(int index) {
  // @@protoc_insertion_point(field_mutable:adb.proto.AppProcesses.process)
  return process_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::adb::proto::ProcessEntry >*
AppProcesses::mutable_process() {
  // @@protoc_insertion_point(field_mutable_list:adb.proto.AppProcesses.process)
  return &process_;
}
inline const ::adb::proto::ProcessEntry& AppProcesses::process(int index) const {
  // @@protoc_insertion_point(field_get:adb.proto.AppProcesses.process)
  return process_.Get(index);
}
inline ::adb::proto::ProcessEntry* AppProcesses::add_process() {
  // @@protoc_insertion_point(field_add:adb.proto.AppProcesses.process)
  return process_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::adb::proto::ProcessEntry >&
AppProcesses::process() const {
  // @@protoc_insertion_point(field_list:adb.proto.AppProcesses.process)
  return process_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace adb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_packages_2fmodules_2fadb_2fproto_2fapp_5fprocesses_2eproto
