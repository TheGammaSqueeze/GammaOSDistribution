// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packages/modules/adb/proto/key_type.proto

#include "packages/modules/adb/proto/key_type.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace adb {
namespace proto {
}  // namespace proto
}  // namespace adb
namespace adb {
namespace proto {
bool KeyType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> KeyType_strings[1] = {};

static const char KeyType_names[] =
  "RSA_2048";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry KeyType_entries[] = {
  { {KeyType_names + 0, 8}, 0 },
};

static const int KeyType_entries_by_number[] = {
  0, // 0 -> RSA_2048
};

const std::string& KeyType_Name(
    KeyType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          KeyType_entries,
          KeyType_entries_by_number,
          1, KeyType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      KeyType_entries,
      KeyType_entries_by_number,
      1, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     KeyType_strings[idx].get();
}
bool KeyType_Parse(
    const std::string& name, KeyType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      KeyType_entries, 1, name, &int_value);
  if (success) {
    *value = static_cast<KeyType>(int_value);
  }
  return success;
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace adb
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
