// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packages/modules/adb/proto/adb_known_hosts.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_packages_2fmodules_2fadb_2fproto_2fadb_5fknown_5fhosts_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_packages_2fmodules_2fadb_2fproto_2fadb_5fknown_5fhosts_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fadb_2fproto_2fadb_5fknown_5fhosts_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_packages_2fmodules_2fadb_2fproto_2fadb_5fknown_5fhosts_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace adb {
namespace proto {
class AdbKnownHosts;
class AdbKnownHostsDefaultTypeInternal;
extern AdbKnownHostsDefaultTypeInternal _AdbKnownHosts_default_instance_;
class HostInfo;
class HostInfoDefaultTypeInternal;
extern HostInfoDefaultTypeInternal _HostInfo_default_instance_;
}  // namespace proto
}  // namespace adb
PROTOBUF_NAMESPACE_OPEN
template<> ::adb::proto::AdbKnownHosts* Arena::CreateMaybeMessage<::adb::proto::AdbKnownHosts>(Arena*);
template<> ::adb::proto::HostInfo* Arena::CreateMaybeMessage<::adb::proto::HostInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace adb {
namespace proto {

// ===================================================================

class HostInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:adb.proto.HostInfo) */ {
 public:
  HostInfo();
  virtual ~HostInfo();

  HostInfo(const HostInfo& from);
  HostInfo(HostInfo&& from) noexcept
    : HostInfo() {
    *this = ::std::move(from);
  }

  inline HostInfo& operator=(const HostInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostInfo& operator=(HostInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const HostInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostInfo* internal_default_instance() {
    return reinterpret_cast<const HostInfo*>(
               &_HostInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HostInfo& a, HostInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(HostInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostInfo* New() const final {
    return CreateMaybeMessage<HostInfo>(nullptr);
  }

  HostInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const HostInfo& from);
  void MergeFrom(const HostInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HostInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "adb.proto.HostInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuidFieldNumber = 1,
  };
  // string guid = 1;
  void clear_guid();
  const std::string& guid() const;
  void set_guid(const std::string& value);
  void set_guid(std::string&& value);
  void set_guid(const char* value);
  void set_guid(const char* value, size_t size);
  std::string* mutable_guid();
  std::string* release_guid();
  void set_allocated_guid(std::string* guid);

  // @@protoc_insertion_point(class_scope:adb.proto.HostInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packages_2fmodules_2fadb_2fproto_2fadb_5fknown_5fhosts_2eproto;
};
// -------------------------------------------------------------------

class AdbKnownHosts :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:adb.proto.AdbKnownHosts) */ {
 public:
  AdbKnownHosts();
  virtual ~AdbKnownHosts();

  AdbKnownHosts(const AdbKnownHosts& from);
  AdbKnownHosts(AdbKnownHosts&& from) noexcept
    : AdbKnownHosts() {
    *this = ::std::move(from);
  }

  inline AdbKnownHosts& operator=(const AdbKnownHosts& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdbKnownHosts& operator=(AdbKnownHosts&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const AdbKnownHosts& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdbKnownHosts* internal_default_instance() {
    return reinterpret_cast<const AdbKnownHosts*>(
               &_AdbKnownHosts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AdbKnownHosts& a, AdbKnownHosts& b) {
    a.Swap(&b);
  }
  inline void Swap(AdbKnownHosts* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdbKnownHosts* New() const final {
    return CreateMaybeMessage<AdbKnownHosts>(nullptr);
  }

  AdbKnownHosts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdbKnownHosts>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AdbKnownHosts& from);
  void MergeFrom(const AdbKnownHosts& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AdbKnownHosts* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "adb.proto.AdbKnownHosts";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostInfosFieldNumber = 1,
  };
  // repeated .adb.proto.HostInfo host_infos = 1;
  int host_infos_size() const;
  void clear_host_infos();
  ::adb::proto::HostInfo* mutable_host_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::adb::proto::HostInfo >*
      mutable_host_infos();
  const ::adb::proto::HostInfo& host_infos(int index) const;
  ::adb::proto::HostInfo* add_host_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::adb::proto::HostInfo >&
      host_infos() const;

  // @@protoc_insertion_point(class_scope:adb.proto.AdbKnownHosts)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::adb::proto::HostInfo > host_infos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packages_2fmodules_2fadb_2fproto_2fadb_5fknown_5fhosts_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HostInfo

// string guid = 1;
inline void HostInfo::clear_guid() {
  guid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HostInfo::guid() const {
  // @@protoc_insertion_point(field_get:adb.proto.HostInfo.guid)
  return guid_.GetNoArena();
}
inline void HostInfo::set_guid(const std::string& value) {
  
  guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:adb.proto.HostInfo.guid)
}
inline void HostInfo::set_guid(std::string&& value) {
  
  guid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:adb.proto.HostInfo.guid)
}
inline void HostInfo::set_guid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:adb.proto.HostInfo.guid)
}
inline void HostInfo::set_guid(const char* value, size_t size) {
  
  guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:adb.proto.HostInfo.guid)
}
inline std::string* HostInfo::mutable_guid() {
  
  // @@protoc_insertion_point(field_mutable:adb.proto.HostInfo.guid)
  return guid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HostInfo::release_guid() {
  // @@protoc_insertion_point(field_release:adb.proto.HostInfo.guid)
  
  return guid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HostInfo::set_allocated_guid(std::string* guid) {
  if (guid != nullptr) {
    
  } else {
    
  }
  guid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), guid);
  // @@protoc_insertion_point(field_set_allocated:adb.proto.HostInfo.guid)
}

// -------------------------------------------------------------------

// AdbKnownHosts

// repeated .adb.proto.HostInfo host_infos = 1;
inline int AdbKnownHosts::host_infos_size() const {
  return host_infos_.size();
}
inline void AdbKnownHosts::clear_host_infos() {
  host_infos_.Clear();
}
inline ::adb::proto::HostInfo* AdbKnownHosts::mutable_host_infos(int index) {
  // @@protoc_insertion_point(field_mutable:adb.proto.AdbKnownHosts.host_infos)
  return host_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::adb::proto::HostInfo >*
AdbKnownHosts::mutable_host_infos() {
  // @@protoc_insertion_point(field_mutable_list:adb.proto.AdbKnownHosts.host_infos)
  return &host_infos_;
}
inline const ::adb::proto::HostInfo& AdbKnownHosts::host_infos(int index) const {
  // @@protoc_insertion_point(field_get:adb.proto.AdbKnownHosts.host_infos)
  return host_infos_.Get(index);
}
inline ::adb::proto::HostInfo* AdbKnownHosts::add_host_infos() {
  // @@protoc_insertion_point(field_add:adb.proto.AdbKnownHosts.host_infos)
  return host_infos_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::adb::proto::HostInfo >&
AdbKnownHosts::host_infos() const {
  // @@protoc_insertion_point(field_list:adb.proto.AdbKnownHosts.host_infos)
  return host_infos_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace adb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_packages_2fmodules_2fadb_2fproto_2fadb_5fknown_5fhosts_2eproto
