// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packages/modules/adb/proto/pairing.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_packages_2fmodules_2fadb_2fproto_2fpairing_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_packages_2fmodules_2fadb_2fproto_2fpairing_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fadb_2fproto_2fpairing_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_packages_2fmodules_2fadb_2fproto_2fpairing_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace adb {
namespace proto {
class PairingPacket;
class PairingPacketDefaultTypeInternal;
extern PairingPacketDefaultTypeInternal _PairingPacket_default_instance_;
}  // namespace proto
}  // namespace adb
PROTOBUF_NAMESPACE_OPEN
template<> ::adb::proto::PairingPacket* Arena::CreateMaybeMessage<::adb::proto::PairingPacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace adb {
namespace proto {

enum PairingPacket_Type : int {
  PairingPacket_Type_SPAKE2_MSG = 0,
  PairingPacket_Type_PEER_INFO = 1,
  PairingPacket_Type_PairingPacket_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PairingPacket_Type_PairingPacket_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PairingPacket_Type_IsValid(int value);
constexpr PairingPacket_Type PairingPacket_Type_Type_MIN = PairingPacket_Type_SPAKE2_MSG;
constexpr PairingPacket_Type PairingPacket_Type_Type_MAX = PairingPacket_Type_PEER_INFO;
constexpr int PairingPacket_Type_Type_ARRAYSIZE = PairingPacket_Type_Type_MAX + 1;

const std::string& PairingPacket_Type_Name(PairingPacket_Type value);
template<typename T>
inline const std::string& PairingPacket_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PairingPacket_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PairingPacket_Type_Name.");
  return PairingPacket_Type_Name(static_cast<PairingPacket_Type>(enum_t_value));
}
bool PairingPacket_Type_Parse(
    const std::string& name, PairingPacket_Type* value);
// ===================================================================

class PairingPacket :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:adb.proto.PairingPacket) */ {
 public:
  PairingPacket();
  virtual ~PairingPacket();

  PairingPacket(const PairingPacket& from);
  PairingPacket(PairingPacket&& from) noexcept
    : PairingPacket() {
    *this = ::std::move(from);
  }

  inline PairingPacket& operator=(const PairingPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline PairingPacket& operator=(PairingPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PairingPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PairingPacket* internal_default_instance() {
    return reinterpret_cast<const PairingPacket*>(
               &_PairingPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PairingPacket& a, PairingPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(PairingPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PairingPacket* New() const final {
    return CreateMaybeMessage<PairingPacket>(nullptr);
  }

  PairingPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PairingPacket>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PairingPacket& from);
  void MergeFrom(const PairingPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PairingPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "adb.proto.PairingPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PairingPacket_Type Type;
  static constexpr Type SPAKE2_MSG =
    PairingPacket_Type_SPAKE2_MSG;
  static constexpr Type PEER_INFO =
    PairingPacket_Type_PEER_INFO;
  static inline bool Type_IsValid(int value) {
    return PairingPacket_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    PairingPacket_Type_Type_MIN;
  static constexpr Type Type_MAX =
    PairingPacket_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    PairingPacket_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return PairingPacket_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return PairingPacket_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:adb.proto.PairingPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packages_2fmodules_2fadb_2fproto_2fpairing_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PairingPacket

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace adb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::adb::proto::PairingPacket_Type> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_packages_2fmodules_2fadb_2fproto_2fpairing_2eproto
