!gles1_stubbed_in_translator_namespace

%#include <GLES/gl.h>
%#include <GL/GLcorearb.h>
%#define GL_APICALL KHRONOS_APICALL

namespaces translator,gles1
void glClipPlane(GLenum plane, const GLdouble *equation);
void glColor4fv( const GLfloat *v );
void glColor4ubv( const GLubyte *v );
void glNormal3fv( const GLfloat *v );
void glNormal3sv( const GLshort *v );
void glTexGenf(GLenum coord, GLenum pname, GLfloat param );
void glTexGeni(GLenum coord, GLenum pname, GLint param );
void glTexGenfv(GLenum coord, GLenum pname, const GLfloat *params );
void glTexGeniv(GLenum coord, GLenum pname, const GLint *params );
void glImportSemaphoreFdEXT(GLuint semaphore, GLenum handleType, GLint fd);
void glImportSemaphoreWin32HandleEXT(GLuint semaphore, GLenum handleType, void* handle);
void glGenSemaphoresEXT(GLsizei n, GLuint *semaphores);
void glDeleteSemaphoresEXT(GLsizei n, const GLuint *semaphores);
GLboolean glIsSemaphoreEXT(GLuint semaphore);
void glSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, const GLuint64 *params);
void glGetSemaphoreParameterui64vEXT(GLuint semaphore, GLenum pname, GLuint64 *params);
void glWaitSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *srcLayouts);
void glSignalSemaphoreEXT(GLuint semaphore, GLuint numBufferBarriers, const GLuint *buffers, GLuint numTextureBarriers, const GLuint *textures, const GLenum *dstLayouts);
void glClearDepth(GLclampd depth);
void glDepthRange(GLclampd zNear, GLclampd zFar);
void glPushAttrib( GLbitfield mask );
void glPushClientAttrib( GLbitfield mask );
void glPopAttrib( void );
void glPopClientAttrib( void );
GLboolean glIsRenderbufferEXT(GLuint renderbuffer);
void glBindRenderbufferEXT(GLenum target, GLuint renderbuffer);
void glDeleteRenderbuffersEXT(GLsizei n, const GLuint *renderbuffers);
void glGenRenderbuffersEXT(GLsizei n, GLuint *renderbuffers);
void glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
void glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint *params);
GLboolean glIsFramebufferEXT(GLuint framebuffer);
void glBindFramebufferEXT(GLenum target, GLuint framebuffer);
void glDeleteFramebuffersEXT(GLsizei n, const GLuint *framebuffers);
void glGenFramebuffersEXT(GLsizei n, GLuint *framebuffers);
GLenum glCheckFramebufferStatusEXT(GLenum target);
void glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
void glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint *params);
void glGenerateMipmapEXT(GLenum target);
GLenum glGetGraphicsResetStatusEXT(void);
void glReadnPixelsEXT(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
void glGetnUniformfvEXT(GLuint program, GLint location, GLsizei bufSize, float *params);
void glGetnUniformivEXT(GLuint program, GLint location, GLsizei bufSize, GLint *params);
void glGetDoublev( GLenum pname, GLdouble *params );
void glGetTexGenfv(GLenum coord, GLenum pname, GLfloat *params );
void glGetTexGeniv(GLenum coord, GLenum pname, GLint *params );
void glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid * pixels);
void glGetClipPlane(GLenum plane, GLdouble *equation);
void glBlendEquation( GLenum mode );
GLuint glGetGlobalTexName(GLuint localTexName);
void glMultiTexCoord2fv( GLenum target, const GLfloat *v );
void glMultiTexCoord2sv( GLenum target, const GLshort *v );
void glMultiTexCoord3fv( GLenum target, const GLfloat *v );
void glMultiTexCoord3sv( GLenum target, const GLshort *v );
void glMultiTexCoord4fv( GLenum target, const GLfloat *v );
void glMultiTexCoord4sv( GLenum target, const GLshort *v );
void glWeightPointerARB(GLint size, GLenum type, GLsizei stride, const GLvoid* pointer);
void glBlendFuncSeparate(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
void glImportMemoryFdEXT(GLuint memory, GLuint64 size, GLenum handleType, GLint fd);
void glImportMemoryWin32HandleEXT(GLuint memory, GLuint64 size, GLenum handleType, void* handle);
void glDeleteMemoryObjectsEXT(GLsizei n, const GLuint *memoryObjects); 
GLboolean glIsMemoryObjectEXT(GLuint memoryObject);
void glCreateMemoryObjectsEXT(GLsizei n, GLuint *memoryObjects);
void glMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, const GLint *params);
void glGetMemoryObjectParameterivEXT(GLuint memoryObject, GLenum pname, GLint *params);
void glTexStorageMem2DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLuint memory, GLuint64 offset);
void glTexStorageMem2DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
void glTexStorageMem3DEXT(GLenum target, GLsizei levels, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLuint memory, GLuint64 offset);
void glTexStorageMem3DMultisampleEXT(GLenum target, GLsizei samples, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations, GLuint memory, GLuint64 offset);
void glBufferStorageMemEXT(GLenum target, GLsizeiptr size, GLuint memory, GLuint64 offset);
void glTexParameteriHOST(GLenum target, GLenum pname, GLint param);
void glMatrixIndexuivARB(GLint size, GLuint * indices);
void glDrawArraysNullAEMU(GLenum mode, GLint first, GLsizei count);
void glDrawElementsNullAEMU(GLenum mode, GLsizei count, GLenum type, const void *indices);
void glGetUnsignedBytevEXT(GLenum pname, GLubyte* data);
void glGetUnsignedBytei_vEXT(GLenum target, GLuint index, GLubyte* data);
void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);
void glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, const GLvoid* pointer);
void glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params);
void glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params);
void glCurrentPaletteMatrixARB(GLint index);
void glEnd(void);
void glBegin( GLenum mode );
void glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
void glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
void glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
void glFramebufferTexture3DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
void glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
