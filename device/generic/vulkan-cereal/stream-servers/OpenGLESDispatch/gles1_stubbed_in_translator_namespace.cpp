// Auto-generated with: android/scripts/gen-entries.py --mode=static_translator_namespaced_stubs android/android-emugl/host/libs/libOpenGLESDispatch/gles1_stubbed_in_translator_namespace.entries --output=android/android-emugl/host/libs/libOpenGLESDispatch/gles1_stubbed_in_translator_namespace.cpp
// DO NOT EDIT THIS FILE

#include <GLES/gl.h>
#include <GL/GLcorearb.h>
#define GL_APICALL KHRONOS_APICALL
namespace translator {
namespace gles1 {
GL_APICALL void GL_APIENTRY glClipPlane(GLenum, const GLdouble *) { return; }
GL_APICALL void GL_APIENTRY glColor4fv(const GLfloat *) { return; }
GL_APICALL void GL_APIENTRY glColor4ubv(const GLubyte *) { return; }
GL_APICALL void GL_APIENTRY glNormal3fv(const GLfloat *) { return; }
GL_APICALL void GL_APIENTRY glNormal3sv(const GLshort *) { return; }
GL_APICALL void GL_APIENTRY glTexGenf(GLenum, GLenum, GLfloat) { return; }
GL_APICALL void GL_APIENTRY glTexGeni(GLenum, GLenum, GLint) { return; }
GL_APICALL void GL_APIENTRY glTexGenfv(GLenum, GLenum, const GLfloat *) { return; }
GL_APICALL void GL_APIENTRY glTexGeniv(GLenum, GLenum, const GLint *) { return; }
GL_APICALL void GL_APIENTRY glImportSemaphoreFdEXT(GLuint, GLenum, GLint) { return; }
GL_APICALL void GL_APIENTRY glImportSemaphoreWin32HandleEXT(GLuint, GLenum, void*) { return; }
GL_APICALL void GL_APIENTRY glGenSemaphoresEXT(GLsizei, GLuint *) { return; }
GL_APICALL void GL_APIENTRY glDeleteSemaphoresEXT(GLsizei, const GLuint *) { return; }
GL_APICALL GLboolean GL_APIENTRY glIsSemaphoreEXT(GLuint) { return (GLboolean)0; }
GL_APICALL void GL_APIENTRY glSemaphoreParameterui64vEXT(GLuint, GLenum, const GLuint64 *) { return; }
GL_APICALL void GL_APIENTRY glGetSemaphoreParameterui64vEXT(GLuint, GLenum, GLuint64 *) { return; }
GL_APICALL void GL_APIENTRY glWaitSemaphoreEXT(GLuint, GLuint, const GLuint *, GLuint, const GLuint *, const GLenum *) { return; }
GL_APICALL void GL_APIENTRY glSignalSemaphoreEXT(GLuint, GLuint, const GLuint *, GLuint, const GLuint *, const GLenum *) { return; }
GL_APICALL void GL_APIENTRY glClearDepth(GLclampd) { return; }
GL_APICALL void GL_APIENTRY glDepthRange(GLclampd, GLclampd) { return; }
GL_APICALL void GL_APIENTRY glPushAttrib(GLbitfield) { return; }
GL_APICALL void GL_APIENTRY glPushClientAttrib(GLbitfield) { return; }
GL_APICALL void GL_APIENTRY glPopAttrib() { return; }
GL_APICALL void GL_APIENTRY glPopClientAttrib() { return; }
GL_APICALL GLboolean GL_APIENTRY glIsRenderbufferEXT(GLuint) { return (GLboolean)0; }
GL_APICALL void GL_APIENTRY glBindRenderbufferEXT(GLenum, GLuint) { return; }
GL_APICALL void GL_APIENTRY glDeleteRenderbuffersEXT(GLsizei, const GLuint *) { return; }
GL_APICALL void GL_APIENTRY glGenRenderbuffersEXT(GLsizei, GLuint *) { return; }
GL_APICALL void GL_APIENTRY glRenderbufferStorageEXT(GLenum, GLenum, GLsizei, GLsizei) { return; }
GL_APICALL void GL_APIENTRY glGetRenderbufferParameterivEXT(GLenum, GLenum, GLint *) { return; }
GL_APICALL GLboolean GL_APIENTRY glIsFramebufferEXT(GLuint) { return (GLboolean)0; }
GL_APICALL void GL_APIENTRY glBindFramebufferEXT(GLenum, GLuint) { return; }
GL_APICALL void GL_APIENTRY glDeleteFramebuffersEXT(GLsizei, const GLuint *) { return; }
GL_APICALL void GL_APIENTRY glGenFramebuffersEXT(GLsizei, GLuint *) { return; }
GL_APICALL GLenum GL_APIENTRY glCheckFramebufferStatusEXT(GLenum) { return (GLenum)0; }
GL_APICALL void GL_APIENTRY glFramebufferTexture1DEXT(GLenum, GLenum, GLenum, GLuint, GLint) { return; }
GL_APICALL void GL_APIENTRY glFramebufferTexture2DEXT(GLenum, GLenum, GLenum, GLuint, GLint) { return; }
GL_APICALL void GL_APIENTRY glFramebufferTexture3DEXT(GLenum, GLenum, GLenum, GLuint, GLint, GLint) { return; }
GL_APICALL void GL_APIENTRY glFramebufferRenderbufferEXT(GLenum, GLenum, GLenum, GLuint) { return; }
GL_APICALL void GL_APIENTRY glGetFramebufferAttachmentParameterivEXT(GLenum, GLenum, GLenum, GLint *) { return; }
GL_APICALL void GL_APIENTRY glGenerateMipmapEXT(GLenum) { return; }
GL_APICALL GLenum GL_APIENTRY glGetGraphicsResetStatusEXT() { return (GLenum)0; }
GL_APICALL void GL_APIENTRY glReadnPixelsEXT(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *) { return; }
GL_APICALL void GL_APIENTRY glGetnUniformfvEXT(GLuint, GLint, GLsizei, float *) { return; }
GL_APICALL void GL_APIENTRY glGetnUniformivEXT(GLuint, GLint, GLsizei, GLint *) { return; }
GL_APICALL void GL_APIENTRY glGetDoublev(GLenum, GLdouble *) { return; }
GL_APICALL void GL_APIENTRY glGetTexGenfv(GLenum, GLenum, GLfloat *) { return; }
GL_APICALL void GL_APIENTRY glGetTexGeniv(GLenum, GLenum, GLint *) { return; }
GL_APICALL void GL_APIENTRY glGetTexImage(GLenum, GLint, GLenum, GLenum, GLvoid *) { return; }
GL_APICALL void GL_APIENTRY glGetClipPlane(GLenum, GLdouble *) { return; }
GL_APICALL void GL_APIENTRY glBlendEquation(GLenum) { return; }
GL_APICALL GLuint GL_APIENTRY glGetGlobalTexName(GLuint) { return (GLuint)0; }
GL_APICALL void GL_APIENTRY glMultiTexCoord2fv(GLenum, const GLfloat *) { return; }
GL_APICALL void GL_APIENTRY glMultiTexCoord2sv(GLenum, const GLshort *) { return; }
GL_APICALL void GL_APIENTRY glMultiTexCoord3fv(GLenum, const GLfloat *) { return; }
GL_APICALL void GL_APIENTRY glMultiTexCoord3sv(GLenum, const GLshort *) { return; }
GL_APICALL void GL_APIENTRY glMultiTexCoord4fv(GLenum, const GLfloat *) { return; }
GL_APICALL void GL_APIENTRY glMultiTexCoord4sv(GLenum, const GLshort *) { return; }
GL_APICALL void GL_APIENTRY glWeightPointerARB(GLint, GLenum, GLsizei, const GLvoid*) { return; }
GL_APICALL void GL_APIENTRY glBlendFuncSeparate(GLenum, GLenum, GLenum, GLenum) { return; }
GL_APICALL void GL_APIENTRY glImportMemoryFdEXT(GLuint, GLuint64, GLenum, GLint) { return; }
GL_APICALL void GL_APIENTRY glImportMemoryWin32HandleEXT(GLuint, GLuint64, GLenum, void*) { return; }
GL_APICALL void GL_APIENTRY glDeleteMemoryObjectsEXT(GLsizei, const GLuint *) { return; }
GL_APICALL GLboolean GL_APIENTRY glIsMemoryObjectEXT(GLuint) { return (GLboolean)0; }
GL_APICALL void GL_APIENTRY glCreateMemoryObjectsEXT(GLsizei, GLuint *) { return; }
GL_APICALL void GL_APIENTRY glMemoryObjectParameterivEXT(GLuint, GLenum, const GLint *) { return; }
GL_APICALL void GL_APIENTRY glGetMemoryObjectParameterivEXT(GLuint, GLenum, GLint *) { return; }
GL_APICALL void GL_APIENTRY glTexStorageMem2DEXT(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64) { return; }
GL_APICALL void GL_APIENTRY glTexStorageMem2DMultisampleEXT(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) { return; }
GL_APICALL void GL_APIENTRY glTexStorageMem3DEXT(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64) { return; }
GL_APICALL void GL_APIENTRY glTexStorageMem3DMultisampleEXT(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) { return; }
GL_APICALL void GL_APIENTRY glBufferStorageMemEXT(GLenum, GLsizeiptr, GLuint, GLuint64) { return; }
GL_APICALL void GL_APIENTRY glTexParameteriHOST(GLenum, GLenum, GLint) { return; }
GL_APICALL void GL_APIENTRY glMatrixIndexuivARB(GLint, GLuint *) { return; }
GL_APICALL void GL_APIENTRY glDrawArraysNullAEMU(GLenum, GLint, GLsizei) { return; }
GL_APICALL void GL_APIENTRY glDrawElementsNullAEMU(GLenum, GLsizei, GLenum, const void *) { return; }
GL_APICALL void GL_APIENTRY glGetUnsignedBytevEXT(GLenum, GLubyte*) { return; }
GL_APICALL void GL_APIENTRY glGetUnsignedBytei_vEXT(GLenum, GLuint, GLubyte*) { return; }
GL_APICALL void GL_APIENTRY glBlendEquationSeparate(GLenum, GLenum) { return; }
GL_APICALL void GL_APIENTRY glMatrixIndexPointerARB(GLint, GLenum, GLsizei, const GLvoid*) { return; }
GL_APICALL void GL_APIENTRY glGetTexLevelParameteriv(GLenum, GLint, GLenum, GLint *) { return; }
GL_APICALL void GL_APIENTRY glGetTexLevelParameterfv(GLenum, GLint, GLenum, GLfloat *) { return; }
GL_APICALL void GL_APIENTRY glCurrentPaletteMatrixARB(GLint) { return; }
GL_APICALL void GL_APIENTRY glEnd() { return; }
GL_APICALL void GL_APIENTRY glBegin(GLenum) { return; }
GL_APICALL void GL_APIENTRY glOrtho(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) { return; }
GL_APICALL void GL_APIENTRY glColor4d(GLdouble, GLdouble, GLdouble, GLdouble) { return; }
GL_APICALL void GL_APIENTRY glFrustum(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) { return; }
GL_APICALL void GL_APIENTRY glFramebufferTexture3DOES(GLenum, GLenum, GLenum, GLuint, GLint, GLint) { return; }
GL_APICALL void GL_APIENTRY glRenderbufferStorageMultisample(GLenum, GLsizei, GLenum, GLsizei, GLsizei) { return; }
} // namespace translator
} // namespace gles1
