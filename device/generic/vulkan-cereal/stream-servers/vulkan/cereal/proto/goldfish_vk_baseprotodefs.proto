// Copyright (C) 2018 The Android Open Source Project
// Copyright (C) 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto2";
package goldfish_vk_proto;
message VkApplicationInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None char pApplicationName. stringarray? 0 string? 1 hasLenInfo? 1
    optional string pApplicationName = 3;
    // Original field: None uint32_t applicationVersion. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 applicationVersion = 4;
    // Original field: None char pEngineName. stringarray? 0 string? 1 hasLenInfo? 1
    optional string pEngineName = 5;
    // Original field: None uint32_t engineVersion. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 engineVersion = 6;
    // Original field: None uint32_t apiVersion. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 apiVersion = 7;
}
message VkInstanceCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkInstanceCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: struct VkApplicationInfo pApplicationInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkApplicationInfo pApplicationInfo = 4;
    // Original field: None uint32_t enabledLayerCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 enabledLayerCount = 5;
    // Original field: None char ppEnabledLayerNames. stringarray? 1 string? 1 hasLenInfo? 1
    repeated string ppEnabledLayerNames = 6;
    // Original field: None uint32_t enabledExtensionCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 enabledExtensionCount = 7;
    // Original field: None char ppEnabledExtensionNames. stringarray? 1 string? 1 hasLenInfo? 1
    repeated string ppEnabledExtensionNames = 8;
}
message VkAllocationCallbacks
{
    // Original field: None void pUserData. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pUserData = 1;
    // Original field: funcpointer PFN_vkAllocationFunction pfnAllocation. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pfnAllocation = 2;
    // Original field: funcpointer PFN_vkReallocationFunction pfnReallocation. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pfnReallocation = 3;
    // Original field: funcpointer PFN_vkFreeFunction pfnFree. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pfnFree = 4;
    // Original field: funcpointer PFN_vkInternalAllocationNotification pfnInternalAllocation. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pfnInternalAllocation = 5;
    // Original field: funcpointer PFN_vkInternalFreeNotification pfnInternalFree. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pfnInternalFree = 6;
}
message vkCreateInstance
{
    // Original field: struct VkInstanceCreateInfo pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkInstanceCreateInfo pCreateInfo = 1;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 2;
    // Original field: handle VkInstance pInstance. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pInstance = 3;
}
message vkDestroyInstance
{
    // Original field: handle VkInstance instance. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 instance = 1;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 2;
}
message vkEnumeratePhysicalDevices
{
    // Original field: handle VkInstance instance. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 instance = 1;
    // Original field: None uint32_t pPhysicalDeviceCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pPhysicalDeviceCount = 2;
    // Original field: handle VkPhysicalDevice pPhysicalDevices. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pPhysicalDevices = 3;
}
message VkPhysicalDeviceFeatures
{
    // Original field: basetype VkBool32 robustBufferAccess. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 robustBufferAccess = 1;
    // Original field: basetype VkBool32 fullDrawIndexUint32. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 fullDrawIndexUint32 = 2;
    // Original field: basetype VkBool32 imageCubeArray. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 imageCubeArray = 3;
    // Original field: basetype VkBool32 independentBlend. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 independentBlend = 4;
    // Original field: basetype VkBool32 geometryShader. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 geometryShader = 5;
    // Original field: basetype VkBool32 tessellationShader. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 tessellationShader = 6;
    // Original field: basetype VkBool32 sampleRateShading. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sampleRateShading = 7;
    // Original field: basetype VkBool32 dualSrcBlend. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dualSrcBlend = 8;
    // Original field: basetype VkBool32 logicOp. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 logicOp = 9;
    // Original field: basetype VkBool32 multiDrawIndirect. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 multiDrawIndirect = 10;
    // Original field: basetype VkBool32 drawIndirectFirstInstance. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 drawIndirectFirstInstance = 11;
    // Original field: basetype VkBool32 depthClamp. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 depthClamp = 12;
    // Original field: basetype VkBool32 depthBiasClamp. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 depthBiasClamp = 13;
    // Original field: basetype VkBool32 fillModeNonSolid. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 fillModeNonSolid = 14;
    // Original field: basetype VkBool32 depthBounds. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 depthBounds = 15;
    // Original field: basetype VkBool32 wideLines. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 wideLines = 16;
    // Original field: basetype VkBool32 largePoints. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 largePoints = 17;
    // Original field: basetype VkBool32 alphaToOne. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 alphaToOne = 18;
    // Original field: basetype VkBool32 multiViewport. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 multiViewport = 19;
    // Original field: basetype VkBool32 samplerAnisotropy. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 samplerAnisotropy = 20;
    // Original field: basetype VkBool32 textureCompressionETC2. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 textureCompressionETC2 = 21;
    // Original field: basetype VkBool32 textureCompressionASTC_LDR. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 textureCompressionASTC_LDR = 22;
    // Original field: basetype VkBool32 textureCompressionBC. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 textureCompressionBC = 23;
    // Original field: basetype VkBool32 occlusionQueryPrecise. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 occlusionQueryPrecise = 24;
    // Original field: basetype VkBool32 pipelineStatisticsQuery. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pipelineStatisticsQuery = 25;
    // Original field: basetype VkBool32 vertexPipelineStoresAndAtomics. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 vertexPipelineStoresAndAtomics = 26;
    // Original field: basetype VkBool32 fragmentStoresAndAtomics. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 fragmentStoresAndAtomics = 27;
    // Original field: basetype VkBool32 shaderTessellationAndGeometryPointSize. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderTessellationAndGeometryPointSize = 28;
    // Original field: basetype VkBool32 shaderImageGatherExtended. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderImageGatherExtended = 29;
    // Original field: basetype VkBool32 shaderStorageImageExtendedFormats. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderStorageImageExtendedFormats = 30;
    // Original field: basetype VkBool32 shaderStorageImageMultisample. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderStorageImageMultisample = 31;
    // Original field: basetype VkBool32 shaderStorageImageReadWithoutFormat. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderStorageImageReadWithoutFormat = 32;
    // Original field: basetype VkBool32 shaderStorageImageWriteWithoutFormat. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderStorageImageWriteWithoutFormat = 33;
    // Original field: basetype VkBool32 shaderUniformBufferArrayDynamicIndexing. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderUniformBufferArrayDynamicIndexing = 34;
    // Original field: basetype VkBool32 shaderSampledImageArrayDynamicIndexing. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderSampledImageArrayDynamicIndexing = 35;
    // Original field: basetype VkBool32 shaderStorageBufferArrayDynamicIndexing. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderStorageBufferArrayDynamicIndexing = 36;
    // Original field: basetype VkBool32 shaderStorageImageArrayDynamicIndexing. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderStorageImageArrayDynamicIndexing = 37;
    // Original field: basetype VkBool32 shaderClipDistance. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderClipDistance = 38;
    // Original field: basetype VkBool32 shaderCullDistance. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderCullDistance = 39;
    // Original field: basetype VkBool32 shaderFloat64. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderFloat64 = 40;
    // Original field: basetype VkBool32 shaderInt64. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderInt64 = 41;
    // Original field: basetype VkBool32 shaderInt16. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderInt16 = 42;
    // Original field: basetype VkBool32 shaderResourceResidency. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderResourceResidency = 43;
    // Original field: basetype VkBool32 shaderResourceMinLod. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderResourceMinLod = 44;
    // Original field: basetype VkBool32 sparseBinding. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sparseBinding = 45;
    // Original field: basetype VkBool32 sparseResidencyBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sparseResidencyBuffer = 46;
    // Original field: basetype VkBool32 sparseResidencyImage2D. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sparseResidencyImage2D = 47;
    // Original field: basetype VkBool32 sparseResidencyImage3D. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sparseResidencyImage3D = 48;
    // Original field: basetype VkBool32 sparseResidency2Samples. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sparseResidency2Samples = 49;
    // Original field: basetype VkBool32 sparseResidency4Samples. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sparseResidency4Samples = 50;
    // Original field: basetype VkBool32 sparseResidency8Samples. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sparseResidency8Samples = 51;
    // Original field: basetype VkBool32 sparseResidency16Samples. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sparseResidency16Samples = 52;
    // Original field: basetype VkBool32 sparseResidencyAliased. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sparseResidencyAliased = 53;
    // Original field: basetype VkBool32 variableMultisampleRate. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 variableMultisampleRate = 54;
    // Original field: basetype VkBool32 inheritedQueries. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 inheritedQueries = 55;
}
message vkGetPhysicalDeviceFeatures
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: struct VkPhysicalDeviceFeatures pFeatures. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPhysicalDeviceFeatures pFeatures = 2;
}
message VkFormatProperties
{
    // Original field: bitmask VkFormatFeatureFlags linearTilingFeatures. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 linearTilingFeatures = 1;
    // Original field: bitmask VkFormatFeatureFlags optimalTilingFeatures. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 optimalTilingFeatures = 2;
    // Original field: bitmask VkFormatFeatureFlags bufferFeatures. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 bufferFeatures = 3;
}
message vkGetPhysicalDeviceFormatProperties
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: enum VkFormat format. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 format = 2;
    // Original field: struct VkFormatProperties pFormatProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkFormatProperties pFormatProperties = 3;
}
message VkExtent3D
{
    // Original field: None uint32_t width. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 width = 1;
    // Original field: None uint32_t height. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 height = 2;
    // Original field: None uint32_t depth. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 depth = 3;
}
message VkImageFormatProperties
{
    // Original field: struct VkExtent3D maxExtent. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtent3D maxExtent = 1;
    // Original field: None uint32_t maxMipLevels. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxMipLevels = 2;
    // Original field: None uint32_t maxArrayLayers. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxArrayLayers = 3;
    // Original field: bitmask VkSampleCountFlags sampleCounts. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sampleCounts = 4;
    // Original field: basetype VkDeviceSize maxResourceSize. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 maxResourceSize = 5;
}
message vkGetPhysicalDeviceImageFormatProperties
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: enum VkFormat format. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 format = 2;
    // Original field: enum VkImageType type. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 type = 3;
    // Original field: enum VkImageTiling tiling. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 tiling = 4;
    // Original field: bitmask VkImageUsageFlags usage. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 usage = 5;
    // Original field: bitmask VkImageCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 6;
    // Original field: struct VkImageFormatProperties pImageFormatProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkImageFormatProperties pImageFormatProperties = 7;
}
message VkPhysicalDeviceLimits
{
    // Original field: None uint32_t maxImageDimension1D. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxImageDimension1D = 1;
    // Original field: None uint32_t maxImageDimension2D. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxImageDimension2D = 2;
    // Original field: None uint32_t maxImageDimension3D. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxImageDimension3D = 3;
    // Original field: None uint32_t maxImageDimensionCube. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxImageDimensionCube = 4;
    // Original field: None uint32_t maxImageArrayLayers. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxImageArrayLayers = 5;
    // Original field: None uint32_t maxTexelBufferElements. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxTexelBufferElements = 6;
    // Original field: None uint32_t maxUniformBufferRange. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxUniformBufferRange = 7;
    // Original field: None uint32_t maxStorageBufferRange. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxStorageBufferRange = 8;
    // Original field: None uint32_t maxPushConstantsSize. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxPushConstantsSize = 9;
    // Original field: None uint32_t maxMemoryAllocationCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxMemoryAllocationCount = 10;
    // Original field: None uint32_t maxSamplerAllocationCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxSamplerAllocationCount = 11;
    // Original field: basetype VkDeviceSize bufferImageGranularity. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 bufferImageGranularity = 12;
    // Original field: basetype VkDeviceSize sparseAddressSpaceSize. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 sparseAddressSpaceSize = 13;
    // Original field: None uint32_t maxBoundDescriptorSets. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxBoundDescriptorSets = 14;
    // Original field: None uint32_t maxPerStageDescriptorSamplers. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxPerStageDescriptorSamplers = 15;
    // Original field: None uint32_t maxPerStageDescriptorUniformBuffers. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxPerStageDescriptorUniformBuffers = 16;
    // Original field: None uint32_t maxPerStageDescriptorStorageBuffers. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxPerStageDescriptorStorageBuffers = 17;
    // Original field: None uint32_t maxPerStageDescriptorSampledImages. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxPerStageDescriptorSampledImages = 18;
    // Original field: None uint32_t maxPerStageDescriptorStorageImages. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxPerStageDescriptorStorageImages = 19;
    // Original field: None uint32_t maxPerStageDescriptorInputAttachments. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxPerStageDescriptorInputAttachments = 20;
    // Original field: None uint32_t maxPerStageResources. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxPerStageResources = 21;
    // Original field: None uint32_t maxDescriptorSetSamplers. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxDescriptorSetSamplers = 22;
    // Original field: None uint32_t maxDescriptorSetUniformBuffers. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxDescriptorSetUniformBuffers = 23;
    // Original field: None uint32_t maxDescriptorSetUniformBuffersDynamic. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxDescriptorSetUniformBuffersDynamic = 24;
    // Original field: None uint32_t maxDescriptorSetStorageBuffers. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxDescriptorSetStorageBuffers = 25;
    // Original field: None uint32_t maxDescriptorSetStorageBuffersDynamic. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxDescriptorSetStorageBuffersDynamic = 26;
    // Original field: None uint32_t maxDescriptorSetSampledImages. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxDescriptorSetSampledImages = 27;
    // Original field: None uint32_t maxDescriptorSetStorageImages. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxDescriptorSetStorageImages = 28;
    // Original field: None uint32_t maxDescriptorSetInputAttachments. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxDescriptorSetInputAttachments = 29;
    // Original field: None uint32_t maxVertexInputAttributes. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxVertexInputAttributes = 30;
    // Original field: None uint32_t maxVertexInputBindings. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxVertexInputBindings = 31;
    // Original field: None uint32_t maxVertexInputAttributeOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxVertexInputAttributeOffset = 32;
    // Original field: None uint32_t maxVertexInputBindingStride. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxVertexInputBindingStride = 33;
    // Original field: None uint32_t maxVertexOutputComponents. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxVertexOutputComponents = 34;
    // Original field: None uint32_t maxTessellationGenerationLevel. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxTessellationGenerationLevel = 35;
    // Original field: None uint32_t maxTessellationPatchSize. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxTessellationPatchSize = 36;
    // Original field: None uint32_t maxTessellationControlPerVertexInputComponents. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxTessellationControlPerVertexInputComponents = 37;
    // Original field: None uint32_t maxTessellationControlPerVertexOutputComponents. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxTessellationControlPerVertexOutputComponents = 38;
    // Original field: None uint32_t maxTessellationControlPerPatchOutputComponents. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxTessellationControlPerPatchOutputComponents = 39;
    // Original field: None uint32_t maxTessellationControlTotalOutputComponents. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxTessellationControlTotalOutputComponents = 40;
    // Original field: None uint32_t maxTessellationEvaluationInputComponents. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxTessellationEvaluationInputComponents = 41;
    // Original field: None uint32_t maxTessellationEvaluationOutputComponents. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxTessellationEvaluationOutputComponents = 42;
    // Original field: None uint32_t maxGeometryShaderInvocations. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxGeometryShaderInvocations = 43;
    // Original field: None uint32_t maxGeometryInputComponents. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxGeometryInputComponents = 44;
    // Original field: None uint32_t maxGeometryOutputComponents. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxGeometryOutputComponents = 45;
    // Original field: None uint32_t maxGeometryOutputVertices. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxGeometryOutputVertices = 46;
    // Original field: None uint32_t maxGeometryTotalOutputComponents. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxGeometryTotalOutputComponents = 47;
    // Original field: None uint32_t maxFragmentInputComponents. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxFragmentInputComponents = 48;
    // Original field: None uint32_t maxFragmentOutputAttachments. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxFragmentOutputAttachments = 49;
    // Original field: None uint32_t maxFragmentDualSrcAttachments. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxFragmentDualSrcAttachments = 50;
    // Original field: None uint32_t maxFragmentCombinedOutputResources. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxFragmentCombinedOutputResources = 51;
    // Original field: None uint32_t maxComputeSharedMemorySize. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxComputeSharedMemorySize = 52;
    // Original field: None uint32_t maxComputeWorkGroupCount. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 maxComputeWorkGroupCount = 53;
    // Original field: None uint32_t maxComputeWorkGroupInvocations. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxComputeWorkGroupInvocations = 54;
    // Original field: None uint32_t maxComputeWorkGroupSize. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 maxComputeWorkGroupSize = 55;
    // Original field: None uint32_t subPixelPrecisionBits. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 subPixelPrecisionBits = 56;
    // Original field: None uint32_t subTexelPrecisionBits. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 subTexelPrecisionBits = 57;
    // Original field: None uint32_t mipmapPrecisionBits. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 mipmapPrecisionBits = 58;
    // Original field: None uint32_t maxDrawIndexedIndexValue. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxDrawIndexedIndexValue = 59;
    // Original field: None uint32_t maxDrawIndirectCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxDrawIndirectCount = 60;
    // Original field: None float maxSamplerLodBias. stringarray? 0 string? 0 hasLenInfo? 0
    optional float maxSamplerLodBias = 61;
    // Original field: None float maxSamplerAnisotropy. stringarray? 0 string? 0 hasLenInfo? 0
    optional float maxSamplerAnisotropy = 62;
    // Original field: None uint32_t maxViewports. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxViewports = 63;
    // Original field: None uint32_t maxViewportDimensions. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 maxViewportDimensions = 64;
    // Original field: None float viewportBoundsRange. stringarray? 0 string? 0 hasLenInfo? 1
    repeated float viewportBoundsRange = 65;
    // Original field: None uint32_t viewportSubPixelBits. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 viewportSubPixelBits = 66;
    // Original field: None size_t minMemoryMapAlignment. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 minMemoryMapAlignment = 67;
    // Original field: basetype VkDeviceSize minTexelBufferOffsetAlignment. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 minTexelBufferOffsetAlignment = 68;
    // Original field: basetype VkDeviceSize minUniformBufferOffsetAlignment. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 minUniformBufferOffsetAlignment = 69;
    // Original field: basetype VkDeviceSize minStorageBufferOffsetAlignment. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 minStorageBufferOffsetAlignment = 70;
    // Original field: None int32_t minTexelOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional int32 minTexelOffset = 71;
    // Original field: None uint32_t maxTexelOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxTexelOffset = 72;
    // Original field: None int32_t minTexelGatherOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional int32 minTexelGatherOffset = 73;
    // Original field: None uint32_t maxTexelGatherOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxTexelGatherOffset = 74;
    // Original field: None float minInterpolationOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional float minInterpolationOffset = 75;
    // Original field: None float maxInterpolationOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional float maxInterpolationOffset = 76;
    // Original field: None uint32_t subPixelInterpolationOffsetBits. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 subPixelInterpolationOffsetBits = 77;
    // Original field: None uint32_t maxFramebufferWidth. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxFramebufferWidth = 78;
    // Original field: None uint32_t maxFramebufferHeight. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxFramebufferHeight = 79;
    // Original field: None uint32_t maxFramebufferLayers. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxFramebufferLayers = 80;
    // Original field: bitmask VkSampleCountFlags framebufferColorSampleCounts. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 framebufferColorSampleCounts = 81;
    // Original field: bitmask VkSampleCountFlags framebufferDepthSampleCounts. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 framebufferDepthSampleCounts = 82;
    // Original field: bitmask VkSampleCountFlags framebufferStencilSampleCounts. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 framebufferStencilSampleCounts = 83;
    // Original field: bitmask VkSampleCountFlags framebufferNoAttachmentsSampleCounts. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 framebufferNoAttachmentsSampleCounts = 84;
    // Original field: None uint32_t maxColorAttachments. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxColorAttachments = 85;
    // Original field: bitmask VkSampleCountFlags sampledImageColorSampleCounts. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sampledImageColorSampleCounts = 86;
    // Original field: bitmask VkSampleCountFlags sampledImageIntegerSampleCounts. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sampledImageIntegerSampleCounts = 87;
    // Original field: bitmask VkSampleCountFlags sampledImageDepthSampleCounts. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sampledImageDepthSampleCounts = 88;
    // Original field: bitmask VkSampleCountFlags sampledImageStencilSampleCounts. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sampledImageStencilSampleCounts = 89;
    // Original field: bitmask VkSampleCountFlags storageImageSampleCounts. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 storageImageSampleCounts = 90;
    // Original field: None uint32_t maxSampleMaskWords. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxSampleMaskWords = 91;
    // Original field: basetype VkBool32 timestampComputeAndGraphics. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 timestampComputeAndGraphics = 92;
    // Original field: None float timestampPeriod. stringarray? 0 string? 0 hasLenInfo? 0
    optional float timestampPeriod = 93;
    // Original field: None uint32_t maxClipDistances. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxClipDistances = 94;
    // Original field: None uint32_t maxCullDistances. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxCullDistances = 95;
    // Original field: None uint32_t maxCombinedClipAndCullDistances. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxCombinedClipAndCullDistances = 96;
    // Original field: None uint32_t discreteQueuePriorities. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 discreteQueuePriorities = 97;
    // Original field: None float pointSizeRange. stringarray? 0 string? 0 hasLenInfo? 1
    repeated float pointSizeRange = 98;
    // Original field: None float lineWidthRange. stringarray? 0 string? 0 hasLenInfo? 1
    repeated float lineWidthRange = 99;
    // Original field: None float pointSizeGranularity. stringarray? 0 string? 0 hasLenInfo? 0
    optional float pointSizeGranularity = 100;
    // Original field: None float lineWidthGranularity. stringarray? 0 string? 0 hasLenInfo? 0
    optional float lineWidthGranularity = 101;
    // Original field: basetype VkBool32 strictLines. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 strictLines = 102;
    // Original field: basetype VkBool32 standardSampleLocations. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 standardSampleLocations = 103;
    // Original field: basetype VkDeviceSize optimalBufferCopyOffsetAlignment. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 optimalBufferCopyOffsetAlignment = 104;
    // Original field: basetype VkDeviceSize optimalBufferCopyRowPitchAlignment. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 optimalBufferCopyRowPitchAlignment = 105;
    // Original field: basetype VkDeviceSize nonCoherentAtomSize. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 nonCoherentAtomSize = 106;
}
message VkPhysicalDeviceSparseProperties
{
    // Original field: basetype VkBool32 residencyStandard2DBlockShape. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 residencyStandard2DBlockShape = 1;
    // Original field: basetype VkBool32 residencyStandard2DMultisampleBlockShape. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 residencyStandard2DMultisampleBlockShape = 2;
    // Original field: basetype VkBool32 residencyStandard3DBlockShape. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 residencyStandard3DBlockShape = 3;
    // Original field: basetype VkBool32 residencyAlignedMipSize. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 residencyAlignedMipSize = 4;
    // Original field: basetype VkBool32 residencyNonResidentStrict. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 residencyNonResidentStrict = 5;
}
message VkPhysicalDeviceProperties
{
    // Original field: None uint32_t apiVersion. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 apiVersion = 1;
    // Original field: None uint32_t driverVersion. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 driverVersion = 2;
    // Original field: None uint32_t vendorID. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 vendorID = 3;
    // Original field: None uint32_t deviceID. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 deviceID = 4;
    // Original field: enum VkPhysicalDeviceType deviceType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 deviceType = 5;
    // Original field: None char deviceName. stringarray? 0 string? 1 hasLenInfo? 1
    optional string deviceName = 6;
    // Original field: None uint8_t pipelineCacheUUID. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pipelineCacheUUID = 7;
    // Original field: struct VkPhysicalDeviceLimits limits. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPhysicalDeviceLimits limits = 8;
    // Original field: struct VkPhysicalDeviceSparseProperties sparseProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPhysicalDeviceSparseProperties sparseProperties = 9;
}
message vkGetPhysicalDeviceProperties
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: struct VkPhysicalDeviceProperties pProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPhysicalDeviceProperties pProperties = 2;
}
message VkQueueFamilyProperties
{
    // Original field: bitmask VkQueueFlags queueFlags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 queueFlags = 1;
    // Original field: None uint32_t queueCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 queueCount = 2;
    // Original field: None uint32_t timestampValidBits. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 timestampValidBits = 3;
    // Original field: struct VkExtent3D minImageTransferGranularity. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtent3D minImageTransferGranularity = 4;
}
message vkGetPhysicalDeviceQueueFamilyProperties
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: None uint32_t pQueueFamilyPropertyCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pQueueFamilyPropertyCount = 2;
    // Original field: struct VkQueueFamilyProperties pQueueFamilyProperties. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkQueueFamilyProperties pQueueFamilyProperties = 3;
}
message VkMemoryType
{
    // Original field: bitmask VkMemoryPropertyFlags propertyFlags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 propertyFlags = 1;
    // Original field: None uint32_t heapIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 heapIndex = 2;
}
message VkMemoryHeap
{
    // Original field: basetype VkDeviceSize size. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 size = 1;
    // Original field: bitmask VkMemoryHeapFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 2;
}
message VkPhysicalDeviceMemoryProperties
{
    // Original field: None uint32_t memoryTypeCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 memoryTypeCount = 1;
    // Original field: struct VkMemoryType memoryTypes. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkMemoryType memoryTypes = 2;
    // Original field: None uint32_t memoryHeapCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 memoryHeapCount = 3;
    // Original field: struct VkMemoryHeap memoryHeaps. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkMemoryHeap memoryHeaps = 4;
}
message vkGetPhysicalDeviceMemoryProperties
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: struct VkPhysicalDeviceMemoryProperties pMemoryProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPhysicalDeviceMemoryProperties pMemoryProperties = 2;
}
message vkGetInstanceProcAddr
{
    // Original field: handle VkInstance instance. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 instance = 1;
    // Original field: None char pName. stringarray? 0 string? 1 hasLenInfo? 1
    optional string pName = 2;
}
message vkGetDeviceProcAddr
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: None char pName. stringarray? 0 string? 1 hasLenInfo? 1
    optional string pName = 2;
}
message VkDeviceQueueCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkDeviceQueueCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: None uint32_t queueFamilyIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 queueFamilyIndex = 4;
    // Original field: None uint32_t queueCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 queueCount = 5;
    // Original field: None float pQueuePriorities. stringarray? 0 string? 0 hasLenInfo? 1
    repeated float pQueuePriorities = 6;
}
message VkDeviceCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkDeviceCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: None uint32_t queueCreateInfoCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 queueCreateInfoCount = 4;
    // Original field: struct VkDeviceQueueCreateInfo pQueueCreateInfos. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkDeviceQueueCreateInfo pQueueCreateInfos = 5;
    // Original field: None uint32_t enabledLayerCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 enabledLayerCount = 6;
    // Original field: None char ppEnabledLayerNames. stringarray? 1 string? 1 hasLenInfo? 1
    repeated string ppEnabledLayerNames = 7;
    // Original field: None uint32_t enabledExtensionCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 enabledExtensionCount = 8;
    // Original field: None char ppEnabledExtensionNames. stringarray? 1 string? 1 hasLenInfo? 1
    repeated string ppEnabledExtensionNames = 9;
    // Original field: struct VkPhysicalDeviceFeatures pEnabledFeatures. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPhysicalDeviceFeatures pEnabledFeatures = 10;
}
message vkCreateDevice
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: struct VkDeviceCreateInfo pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDeviceCreateInfo pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkDevice pDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pDevice = 4;
}
message vkDestroyDevice
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 2;
}
message VkExtensionProperties
{
    // Original field: None char extensionName. stringarray? 0 string? 1 hasLenInfo? 1
    optional string extensionName = 1;
    // Original field: None uint32_t specVersion. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 specVersion = 2;
}
message vkEnumerateInstanceExtensionProperties
{
    // Original field: None char pLayerName. stringarray? 0 string? 1 hasLenInfo? 1
    optional string pLayerName = 1;
    // Original field: None uint32_t pPropertyCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pPropertyCount = 2;
    // Original field: struct VkExtensionProperties pProperties. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkExtensionProperties pProperties = 3;
}
message vkEnumerateDeviceExtensionProperties
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: None char pLayerName. stringarray? 0 string? 1 hasLenInfo? 1
    optional string pLayerName = 2;
    // Original field: None uint32_t pPropertyCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pPropertyCount = 3;
    // Original field: struct VkExtensionProperties pProperties. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkExtensionProperties pProperties = 4;
}
message VkLayerProperties
{
    // Original field: None char layerName. stringarray? 0 string? 1 hasLenInfo? 1
    optional string layerName = 1;
    // Original field: None uint32_t specVersion. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 specVersion = 2;
    // Original field: None uint32_t implementationVersion. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 implementationVersion = 3;
    // Original field: None char description. stringarray? 0 string? 1 hasLenInfo? 1
    optional string description = 4;
}
message vkEnumerateInstanceLayerProperties
{
    // Original field: None uint32_t pPropertyCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pPropertyCount = 1;
    // Original field: struct VkLayerProperties pProperties. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkLayerProperties pProperties = 2;
}
message vkEnumerateDeviceLayerProperties
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: None uint32_t pPropertyCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pPropertyCount = 2;
    // Original field: struct VkLayerProperties pProperties. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkLayerProperties pProperties = 3;
}
message vkGetDeviceQueue
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: None uint32_t queueFamilyIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 queueFamilyIndex = 2;
    // Original field: None uint32_t queueIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 queueIndex = 3;
    // Original field: handle VkQueue pQueue. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pQueue = 4;
}
message VkSubmitInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t waitSemaphoreCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 waitSemaphoreCount = 3;
    // Original field: handle VkSemaphore pWaitSemaphores. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pWaitSemaphores = 4;
    // Original field: bitmask VkPipelineStageFlags pWaitDstStageMask. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pWaitDstStageMask = 5;
    // Original field: None uint32_t commandBufferCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 commandBufferCount = 6;
    // Original field: handle VkCommandBuffer pCommandBuffers. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pCommandBuffers = 7;
    // Original field: None uint32_t signalSemaphoreCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 signalSemaphoreCount = 8;
    // Original field: handle VkSemaphore pSignalSemaphores. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pSignalSemaphores = 9;
}
message vkQueueSubmit
{
    // Original field: handle VkQueue queue. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 queue = 1;
    // Original field: None uint32_t submitCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 submitCount = 2;
    // Original field: struct VkSubmitInfo pSubmits. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkSubmitInfo pSubmits = 3;
    // Original field: handle VkFence fence. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 fence = 4;
}
message vkQueueWaitIdle
{
    // Original field: handle VkQueue queue. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 queue = 1;
}
message vkDeviceWaitIdle
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
}
message VkMemoryAllocateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: basetype VkDeviceSize allocationSize. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 allocationSize = 3;
    // Original field: None uint32_t memoryTypeIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 memoryTypeIndex = 4;
}
message vkAllocateMemory
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkMemoryAllocateInfo pAllocateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkMemoryAllocateInfo pAllocateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkDeviceMemory pMemory. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pMemory = 4;
}
message vkFreeMemory
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkDeviceMemory memory. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 memory = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
}
message vkMapMemory
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkDeviceMemory memory. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 memory = 2;
    // Original field: basetype VkDeviceSize offset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 offset = 3;
    // Original field: basetype VkDeviceSize size. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 size = 4;
    // Original field: bitmask VkMemoryMapFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 5;
    // Original field: None void ppData. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 ppData = 6;
}
message vkUnmapMemory
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkDeviceMemory memory. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 memory = 2;
}
message VkMappedMemoryRange
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: handle VkDeviceMemory memory. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 memory = 3;
    // Original field: basetype VkDeviceSize offset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 offset = 4;
    // Original field: basetype VkDeviceSize size. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 size = 5;
}
message vkFlushMappedMemoryRanges
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: None uint32_t memoryRangeCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 memoryRangeCount = 2;
    // Original field: struct VkMappedMemoryRange pMemoryRanges. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkMappedMemoryRange pMemoryRanges = 3;
}
message vkInvalidateMappedMemoryRanges
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: None uint32_t memoryRangeCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 memoryRangeCount = 2;
    // Original field: struct VkMappedMemoryRange pMemoryRanges. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkMappedMemoryRange pMemoryRanges = 3;
}
message vkGetDeviceMemoryCommitment
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkDeviceMemory memory. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 memory = 2;
    // Original field: basetype VkDeviceSize pCommittedMemoryInBytes. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pCommittedMemoryInBytes = 3;
}
message vkBindBufferMemory
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkBuffer buffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 buffer = 2;
    // Original field: handle VkDeviceMemory memory. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 memory = 3;
    // Original field: basetype VkDeviceSize memoryOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 memoryOffset = 4;
}
message vkBindImageMemory
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkImage image. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 image = 2;
    // Original field: handle VkDeviceMemory memory. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 memory = 3;
    // Original field: basetype VkDeviceSize memoryOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 memoryOffset = 4;
}
message VkMemoryRequirements
{
    // Original field: basetype VkDeviceSize size. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 size = 1;
    // Original field: basetype VkDeviceSize alignment. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 alignment = 2;
    // Original field: None uint32_t memoryTypeBits. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 memoryTypeBits = 3;
}
message vkGetBufferMemoryRequirements
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkBuffer buffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 buffer = 2;
    // Original field: struct VkMemoryRequirements pMemoryRequirements. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkMemoryRequirements pMemoryRequirements = 3;
}
message vkGetImageMemoryRequirements
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkImage image. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 image = 2;
    // Original field: struct VkMemoryRequirements pMemoryRequirements. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkMemoryRequirements pMemoryRequirements = 3;
}
message VkSparseImageFormatProperties
{
    // Original field: bitmask VkImageAspectFlags aspectMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 aspectMask = 1;
    // Original field: struct VkExtent3D imageGranularity. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtent3D imageGranularity = 2;
    // Original field: bitmask VkSparseImageFormatFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
}
message VkSparseImageMemoryRequirements
{
    // Original field: struct VkSparseImageFormatProperties formatProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkSparseImageFormatProperties formatProperties = 1;
    // Original field: None uint32_t imageMipTailFirstLod. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 imageMipTailFirstLod = 2;
    // Original field: basetype VkDeviceSize imageMipTailSize. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 imageMipTailSize = 3;
    // Original field: basetype VkDeviceSize imageMipTailOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 imageMipTailOffset = 4;
    // Original field: basetype VkDeviceSize imageMipTailStride. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 imageMipTailStride = 5;
}
message vkGetImageSparseMemoryRequirements
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkImage image. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 image = 2;
    // Original field: None uint32_t pSparseMemoryRequirementCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pSparseMemoryRequirementCount = 3;
    // Original field: struct VkSparseImageMemoryRequirements pSparseMemoryRequirements. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkSparseImageMemoryRequirements pSparseMemoryRequirements = 4;
}
message vkGetPhysicalDeviceSparseImageFormatProperties
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: enum VkFormat format. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 format = 2;
    // Original field: enum VkImageType type. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 type = 3;
    // Original field: enum VkSampleCountFlagBits samples. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 samples = 4;
    // Original field: bitmask VkImageUsageFlags usage. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 usage = 5;
    // Original field: enum VkImageTiling tiling. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 tiling = 6;
    // Original field: None uint32_t pPropertyCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pPropertyCount = 7;
    // Original field: struct VkSparseImageFormatProperties pProperties. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkSparseImageFormatProperties pProperties = 8;
}
message VkSparseMemoryBind
{
    // Original field: basetype VkDeviceSize resourceOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 resourceOffset = 1;
    // Original field: basetype VkDeviceSize size. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 size = 2;
    // Original field: handle VkDeviceMemory memory. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 memory = 3;
    // Original field: basetype VkDeviceSize memoryOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 memoryOffset = 4;
    // Original field: bitmask VkSparseMemoryBindFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 5;
}
message VkSparseBufferMemoryBindInfo
{
    // Original field: handle VkBuffer buffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 buffer = 1;
    // Original field: None uint32_t bindCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 bindCount = 2;
    // Original field: struct VkSparseMemoryBind pBinds. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkSparseMemoryBind pBinds = 3;
}
message VkSparseImageOpaqueMemoryBindInfo
{
    // Original field: handle VkImage image. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 image = 1;
    // Original field: None uint32_t bindCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 bindCount = 2;
    // Original field: struct VkSparseMemoryBind pBinds. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkSparseMemoryBind pBinds = 3;
}
message VkImageSubresource
{
    // Original field: bitmask VkImageAspectFlags aspectMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 aspectMask = 1;
    // Original field: None uint32_t mipLevel. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 mipLevel = 2;
    // Original field: None uint32_t arrayLayer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 arrayLayer = 3;
}
message VkOffset3D
{
    // Original field: None int32_t x. stringarray? 0 string? 0 hasLenInfo? 0
    optional int32 x = 1;
    // Original field: None int32_t y. stringarray? 0 string? 0 hasLenInfo? 0
    optional int32 y = 2;
    // Original field: None int32_t z. stringarray? 0 string? 0 hasLenInfo? 0
    optional int32 z = 3;
}
message VkSparseImageMemoryBind
{
    // Original field: struct VkImageSubresource subresource. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkImageSubresource subresource = 1;
    // Original field: struct VkOffset3D offset. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkOffset3D offset = 2;
    // Original field: struct VkExtent3D extent. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtent3D extent = 3;
    // Original field: handle VkDeviceMemory memory. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 memory = 4;
    // Original field: basetype VkDeviceSize memoryOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 memoryOffset = 5;
    // Original field: bitmask VkSparseMemoryBindFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 6;
}
message VkSparseImageMemoryBindInfo
{
    // Original field: handle VkImage image. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 image = 1;
    // Original field: None uint32_t bindCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 bindCount = 2;
    // Original field: struct VkSparseImageMemoryBind pBinds. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkSparseImageMemoryBind pBinds = 3;
}
message VkBindSparseInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t waitSemaphoreCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 waitSemaphoreCount = 3;
    // Original field: handle VkSemaphore pWaitSemaphores. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pWaitSemaphores = 4;
    // Original field: None uint32_t bufferBindCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 bufferBindCount = 5;
    // Original field: struct VkSparseBufferMemoryBindInfo pBufferBinds. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkSparseBufferMemoryBindInfo pBufferBinds = 6;
    // Original field: None uint32_t imageOpaqueBindCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 imageOpaqueBindCount = 7;
    // Original field: struct VkSparseImageOpaqueMemoryBindInfo pImageOpaqueBinds. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkSparseImageOpaqueMemoryBindInfo pImageOpaqueBinds = 8;
    // Original field: None uint32_t imageBindCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 imageBindCount = 9;
    // Original field: struct VkSparseImageMemoryBindInfo pImageBinds. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkSparseImageMemoryBindInfo pImageBinds = 10;
    // Original field: None uint32_t signalSemaphoreCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 signalSemaphoreCount = 11;
    // Original field: handle VkSemaphore pSignalSemaphores. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pSignalSemaphores = 12;
}
message vkQueueBindSparse
{
    // Original field: handle VkQueue queue. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 queue = 1;
    // Original field: None uint32_t bindInfoCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 bindInfoCount = 2;
    // Original field: struct VkBindSparseInfo pBindInfo. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkBindSparseInfo pBindInfo = 3;
    // Original field: handle VkFence fence. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 fence = 4;
}
message VkFenceCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkFenceCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
}
message vkCreateFence
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkFenceCreateInfo pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkFenceCreateInfo pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkFence pFence. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pFence = 4;
}
message vkDestroyFence
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkFence fence. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 fence = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
}
message vkResetFences
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: None uint32_t fenceCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 fenceCount = 2;
    // Original field: handle VkFence pFences. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pFences = 3;
}
message vkGetFenceStatus
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkFence fence. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 fence = 2;
}
message vkWaitForFences
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: None uint32_t fenceCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 fenceCount = 2;
    // Original field: handle VkFence pFences. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pFences = 3;
    // Original field: basetype VkBool32 waitAll. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 waitAll = 4;
    // Original field: None uint64_t timeout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 timeout = 5;
}
message VkSemaphoreCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkSemaphoreCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
}
message vkCreateSemaphore
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkSemaphoreCreateInfo pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkSemaphoreCreateInfo pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkSemaphore pSemaphore. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pSemaphore = 4;
}
message vkDestroySemaphore
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkSemaphore semaphore. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 semaphore = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
}
message VkEventCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkEventCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
}
message vkCreateEvent
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkEventCreateInfo pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkEventCreateInfo pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkEvent pEvent. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pEvent = 4;
}
message vkDestroyEvent
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkEvent event. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 event = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
}
message vkGetEventStatus
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkEvent event. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 event = 2;
}
message vkSetEvent
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkEvent event. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 event = 2;
}
message vkResetEvent
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkEvent event. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 event = 2;
}
message VkQueryPoolCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkQueryPoolCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: enum VkQueryType queryType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 queryType = 4;
    // Original field: None uint32_t queryCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 queryCount = 5;
    // Original field: bitmask VkQueryPipelineStatisticFlags pipelineStatistics. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pipelineStatistics = 6;
}
message vkCreateQueryPool
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkQueryPoolCreateInfo pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkQueryPoolCreateInfo pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkQueryPool pQueryPool. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pQueryPool = 4;
}
message vkDestroyQueryPool
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkQueryPool queryPool. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 queryPool = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
}
message vkGetQueryPoolResults
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkQueryPool queryPool. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 queryPool = 2;
    // Original field: None uint32_t firstQuery. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 firstQuery = 3;
    // Original field: None uint32_t queryCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 queryCount = 4;
    // Original field: None size_t dataSize. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 dataSize = 5;
    // Original field: None void pData. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pData = 6;
    // Original field: basetype VkDeviceSize stride. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 stride = 7;
    // Original field: bitmask VkQueryResultFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 8;
}
message VkBufferCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkBufferCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: basetype VkDeviceSize size. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 size = 4;
    // Original field: bitmask VkBufferUsageFlags usage. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 usage = 5;
    // Original field: enum VkSharingMode sharingMode. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sharingMode = 6;
    // Original field: None uint32_t queueFamilyIndexCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 queueFamilyIndexCount = 7;
    // Original field: None uint32_t pQueueFamilyIndices. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pQueueFamilyIndices = 8;
}
message vkCreateBuffer
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkBufferCreateInfo pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkBufferCreateInfo pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkBuffer pBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pBuffer = 4;
}
message vkDestroyBuffer
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkBuffer buffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 buffer = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
}
message VkBufferViewCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkBufferViewCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: handle VkBuffer buffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 buffer = 4;
    // Original field: enum VkFormat format. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 format = 5;
    // Original field: basetype VkDeviceSize offset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 offset = 6;
    // Original field: basetype VkDeviceSize range. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 range = 7;
}
message vkCreateBufferView
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkBufferViewCreateInfo pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkBufferViewCreateInfo pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkBufferView pView. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pView = 4;
}
message vkDestroyBufferView
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkBufferView bufferView. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 bufferView = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
}
message VkImageCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkImageCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: enum VkImageType imageType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 imageType = 4;
    // Original field: enum VkFormat format. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 format = 5;
    // Original field: struct VkExtent3D extent. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtent3D extent = 6;
    // Original field: None uint32_t mipLevels. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 mipLevels = 7;
    // Original field: None uint32_t arrayLayers. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 arrayLayers = 8;
    // Original field: enum VkSampleCountFlagBits samples. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 samples = 9;
    // Original field: enum VkImageTiling tiling. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 tiling = 10;
    // Original field: bitmask VkImageUsageFlags usage. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 usage = 11;
    // Original field: enum VkSharingMode sharingMode. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sharingMode = 12;
    // Original field: None uint32_t queueFamilyIndexCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 queueFamilyIndexCount = 13;
    // Original field: None uint32_t pQueueFamilyIndices. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pQueueFamilyIndices = 14;
    // Original field: enum VkImageLayout initialLayout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 initialLayout = 15;
}
message vkCreateImage
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkImageCreateInfo pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkImageCreateInfo pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkImage pImage. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pImage = 4;
}
message vkDestroyImage
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkImage image. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 image = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
}
message VkSubresourceLayout
{
    // Original field: basetype VkDeviceSize offset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 offset = 1;
    // Original field: basetype VkDeviceSize size. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 size = 2;
    // Original field: basetype VkDeviceSize rowPitch. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 rowPitch = 3;
    // Original field: basetype VkDeviceSize arrayPitch. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 arrayPitch = 4;
    // Original field: basetype VkDeviceSize depthPitch. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 depthPitch = 5;
}
message vkGetImageSubresourceLayout
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkImage image. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 image = 2;
    // Original field: struct VkImageSubresource pSubresource. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkImageSubresource pSubresource = 3;
    // Original field: struct VkSubresourceLayout pLayout. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkSubresourceLayout pLayout = 4;
}
message VkComponentMapping
{
    // Original field: enum VkComponentSwizzle r. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 r = 1;
    // Original field: enum VkComponentSwizzle g. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 g = 2;
    // Original field: enum VkComponentSwizzle b. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 b = 3;
    // Original field: enum VkComponentSwizzle a. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 a = 4;
}
message VkImageSubresourceRange
{
    // Original field: bitmask VkImageAspectFlags aspectMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 aspectMask = 1;
    // Original field: None uint32_t baseMipLevel. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 baseMipLevel = 2;
    // Original field: None uint32_t levelCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 levelCount = 3;
    // Original field: None uint32_t baseArrayLayer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 baseArrayLayer = 4;
    // Original field: None uint32_t layerCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 layerCount = 5;
}
message VkImageViewCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkImageViewCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: handle VkImage image. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 image = 4;
    // Original field: enum VkImageViewType viewType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 viewType = 5;
    // Original field: enum VkFormat format. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 format = 6;
    // Original field: struct VkComponentMapping components. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkComponentMapping components = 7;
    // Original field: struct VkImageSubresourceRange subresourceRange. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkImageSubresourceRange subresourceRange = 8;
}
message vkCreateImageView
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkImageViewCreateInfo pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkImageViewCreateInfo pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkImageView pView. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pView = 4;
}
message vkDestroyImageView
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkImageView imageView. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 imageView = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
}
message VkShaderModuleCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkShaderModuleCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: None size_t codeSize. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 codeSize = 4;
    // Original field: None uint32_t pCode. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pCode = 5;
}
message vkCreateShaderModule
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkShaderModuleCreateInfo pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkShaderModuleCreateInfo pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkShaderModule pShaderModule. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pShaderModule = 4;
}
message vkDestroyShaderModule
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkShaderModule shaderModule. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 shaderModule = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
}
message VkPipelineCacheCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkPipelineCacheCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: None size_t initialDataSize. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 initialDataSize = 4;
    // Original field: None void pInitialData. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pInitialData = 5;
}
message vkCreatePipelineCache
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkPipelineCacheCreateInfo pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPipelineCacheCreateInfo pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkPipelineCache pPipelineCache. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pPipelineCache = 4;
}
message vkDestroyPipelineCache
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkPipelineCache pipelineCache. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pipelineCache = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
}
message vkGetPipelineCacheData
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkPipelineCache pipelineCache. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pipelineCache = 2;
    // Original field: None size_t pDataSize. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pDataSize = 3;
    // Original field: None void pData. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pData = 4;
}
message vkMergePipelineCaches
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkPipelineCache dstCache. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 dstCache = 2;
    // Original field: None uint32_t srcCacheCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 srcCacheCount = 3;
    // Original field: handle VkPipelineCache pSrcCaches. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pSrcCaches = 4;
}
message VkSpecializationMapEntry
{
    // Original field: None uint32_t constantID. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 constantID = 1;
    // Original field: None uint32_t offset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 offset = 2;
    // Original field: None size_t size. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 size = 3;
}
message VkSpecializationInfo
{
    // Original field: None uint32_t mapEntryCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 mapEntryCount = 1;
    // Original field: struct VkSpecializationMapEntry pMapEntries. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkSpecializationMapEntry pMapEntries = 2;
    // Original field: None size_t dataSize. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 dataSize = 3;
    // Original field: None void pData. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pData = 4;
}
message VkPipelineShaderStageCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkPipelineShaderStageCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: enum VkShaderStageFlagBits stage. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 stage = 4;
    // Original field: handle VkShaderModule module. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 module = 5;
    // Original field: None char pName. stringarray? 0 string? 1 hasLenInfo? 1
    optional string pName = 6;
    // Original field: struct VkSpecializationInfo pSpecializationInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkSpecializationInfo pSpecializationInfo = 7;
}
message VkVertexInputBindingDescription
{
    // Original field: None uint32_t binding. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 binding = 1;
    // Original field: None uint32_t stride. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 stride = 2;
    // Original field: enum VkVertexInputRate inputRate. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 inputRate = 3;
}
message VkVertexInputAttributeDescription
{
    // Original field: None uint32_t location. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 location = 1;
    // Original field: None uint32_t binding. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 binding = 2;
    // Original field: enum VkFormat format. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 format = 3;
    // Original field: None uint32_t offset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 offset = 4;
}
message VkPipelineVertexInputStateCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkPipelineVertexInputStateCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: None uint32_t vertexBindingDescriptionCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 vertexBindingDescriptionCount = 4;
    // Original field: struct VkVertexInputBindingDescription pVertexBindingDescriptions. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkVertexInputBindingDescription pVertexBindingDescriptions = 5;
    // Original field: None uint32_t vertexAttributeDescriptionCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 vertexAttributeDescriptionCount = 6;
    // Original field: struct VkVertexInputAttributeDescription pVertexAttributeDescriptions. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkVertexInputAttributeDescription pVertexAttributeDescriptions = 7;
}
message VkPipelineInputAssemblyStateCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkPipelineInputAssemblyStateCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: enum VkPrimitiveTopology topology. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 topology = 4;
    // Original field: basetype VkBool32 primitiveRestartEnable. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 primitiveRestartEnable = 5;
}
message VkPipelineTessellationStateCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkPipelineTessellationStateCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: None uint32_t patchControlPoints. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 patchControlPoints = 4;
}
message VkViewport
{
    // Original field: None float x. stringarray? 0 string? 0 hasLenInfo? 0
    optional float x = 1;
    // Original field: None float y. stringarray? 0 string? 0 hasLenInfo? 0
    optional float y = 2;
    // Original field: None float width. stringarray? 0 string? 0 hasLenInfo? 0
    optional float width = 3;
    // Original field: None float height. stringarray? 0 string? 0 hasLenInfo? 0
    optional float height = 4;
    // Original field: None float minDepth. stringarray? 0 string? 0 hasLenInfo? 0
    optional float minDepth = 5;
    // Original field: None float maxDepth. stringarray? 0 string? 0 hasLenInfo? 0
    optional float maxDepth = 6;
}
message VkOffset2D
{
    // Original field: None int32_t x. stringarray? 0 string? 0 hasLenInfo? 0
    optional int32 x = 1;
    // Original field: None int32_t y. stringarray? 0 string? 0 hasLenInfo? 0
    optional int32 y = 2;
}
message VkExtent2D
{
    // Original field: None uint32_t width. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 width = 1;
    // Original field: None uint32_t height. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 height = 2;
}
message VkRect2D
{
    // Original field: struct VkOffset2D offset. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkOffset2D offset = 1;
    // Original field: struct VkExtent2D extent. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtent2D extent = 2;
}
message VkPipelineViewportStateCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkPipelineViewportStateCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: None uint32_t viewportCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 viewportCount = 4;
    // Original field: struct VkViewport pViewports. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkViewport pViewports = 5;
    // Original field: None uint32_t scissorCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 scissorCount = 6;
    // Original field: struct VkRect2D pScissors. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkRect2D pScissors = 7;
}
message VkPipelineRasterizationStateCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkPipelineRasterizationStateCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: basetype VkBool32 depthClampEnable. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 depthClampEnable = 4;
    // Original field: basetype VkBool32 rasterizerDiscardEnable. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 rasterizerDiscardEnable = 5;
    // Original field: enum VkPolygonMode polygonMode. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 polygonMode = 6;
    // Original field: bitmask VkCullModeFlags cullMode. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 cullMode = 7;
    // Original field: enum VkFrontFace frontFace. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 frontFace = 8;
    // Original field: basetype VkBool32 depthBiasEnable. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 depthBiasEnable = 9;
    // Original field: None float depthBiasConstantFactor. stringarray? 0 string? 0 hasLenInfo? 0
    optional float depthBiasConstantFactor = 10;
    // Original field: None float depthBiasClamp. stringarray? 0 string? 0 hasLenInfo? 0
    optional float depthBiasClamp = 11;
    // Original field: None float depthBiasSlopeFactor. stringarray? 0 string? 0 hasLenInfo? 0
    optional float depthBiasSlopeFactor = 12;
    // Original field: None float lineWidth. stringarray? 0 string? 0 hasLenInfo? 0
    optional float lineWidth = 13;
}
message VkPipelineMultisampleStateCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkPipelineMultisampleStateCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: enum VkSampleCountFlagBits rasterizationSamples. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 rasterizationSamples = 4;
    // Original field: basetype VkBool32 sampleShadingEnable. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sampleShadingEnable = 5;
    // Original field: None float minSampleShading. stringarray? 0 string? 0 hasLenInfo? 0
    optional float minSampleShading = 6;
    // Original field: basetype VkSampleMask pSampleMask. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pSampleMask = 7;
    // Original field: basetype VkBool32 alphaToCoverageEnable. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 alphaToCoverageEnable = 8;
    // Original field: basetype VkBool32 alphaToOneEnable. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 alphaToOneEnable = 9;
}
message VkStencilOpState
{
    // Original field: enum VkStencilOp failOp. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 failOp = 1;
    // Original field: enum VkStencilOp passOp. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 passOp = 2;
    // Original field: enum VkStencilOp depthFailOp. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 depthFailOp = 3;
    // Original field: enum VkCompareOp compareOp. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 compareOp = 4;
    // Original field: None uint32_t compareMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 compareMask = 5;
    // Original field: None uint32_t writeMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 writeMask = 6;
    // Original field: None uint32_t reference. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 reference = 7;
}
message VkPipelineDepthStencilStateCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkPipelineDepthStencilStateCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: basetype VkBool32 depthTestEnable. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 depthTestEnable = 4;
    // Original field: basetype VkBool32 depthWriteEnable. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 depthWriteEnable = 5;
    // Original field: enum VkCompareOp depthCompareOp. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 depthCompareOp = 6;
    // Original field: basetype VkBool32 depthBoundsTestEnable. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 depthBoundsTestEnable = 7;
    // Original field: basetype VkBool32 stencilTestEnable. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 stencilTestEnable = 8;
    // Original field: struct VkStencilOpState front. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkStencilOpState front = 9;
    // Original field: struct VkStencilOpState back. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkStencilOpState back = 10;
    // Original field: None float minDepthBounds. stringarray? 0 string? 0 hasLenInfo? 0
    optional float minDepthBounds = 11;
    // Original field: None float maxDepthBounds. stringarray? 0 string? 0 hasLenInfo? 0
    optional float maxDepthBounds = 12;
}
message VkPipelineColorBlendAttachmentState
{
    // Original field: basetype VkBool32 blendEnable. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 blendEnable = 1;
    // Original field: enum VkBlendFactor srcColorBlendFactor. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 srcColorBlendFactor = 2;
    // Original field: enum VkBlendFactor dstColorBlendFactor. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dstColorBlendFactor = 3;
    // Original field: enum VkBlendOp colorBlendOp. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 colorBlendOp = 4;
    // Original field: enum VkBlendFactor srcAlphaBlendFactor. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 srcAlphaBlendFactor = 5;
    // Original field: enum VkBlendFactor dstAlphaBlendFactor. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dstAlphaBlendFactor = 6;
    // Original field: enum VkBlendOp alphaBlendOp. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 alphaBlendOp = 7;
    // Original field: bitmask VkColorComponentFlags colorWriteMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 colorWriteMask = 8;
}
message VkPipelineColorBlendStateCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkPipelineColorBlendStateCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: basetype VkBool32 logicOpEnable. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 logicOpEnable = 4;
    // Original field: enum VkLogicOp logicOp. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 logicOp = 5;
    // Original field: None uint32_t attachmentCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 attachmentCount = 6;
    // Original field: struct VkPipelineColorBlendAttachmentState pAttachments. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkPipelineColorBlendAttachmentState pAttachments = 7;
    // Original field: None float blendConstants. stringarray? 0 string? 0 hasLenInfo? 1
    repeated float blendConstants = 8;
}
message VkPipelineDynamicStateCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkPipelineDynamicStateCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: None uint32_t dynamicStateCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dynamicStateCount = 4;
    // Original field: enum VkDynamicState pDynamicStates. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pDynamicStates = 5;
}
message VkGraphicsPipelineCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkPipelineCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: None uint32_t stageCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 stageCount = 4;
    // Original field: struct VkPipelineShaderStageCreateInfo pStages. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkPipelineShaderStageCreateInfo pStages = 5;
    // Original field: struct VkPipelineVertexInputStateCreateInfo pVertexInputState. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPipelineVertexInputStateCreateInfo pVertexInputState = 6;
    // Original field: struct VkPipelineInputAssemblyStateCreateInfo pInputAssemblyState. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPipelineInputAssemblyStateCreateInfo pInputAssemblyState = 7;
    // Original field: struct VkPipelineTessellationStateCreateInfo pTessellationState. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPipelineTessellationStateCreateInfo pTessellationState = 8;
    // Original field: struct VkPipelineViewportStateCreateInfo pViewportState. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPipelineViewportStateCreateInfo pViewportState = 9;
    // Original field: struct VkPipelineRasterizationStateCreateInfo pRasterizationState. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPipelineRasterizationStateCreateInfo pRasterizationState = 10;
    // Original field: struct VkPipelineMultisampleStateCreateInfo pMultisampleState. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPipelineMultisampleStateCreateInfo pMultisampleState = 11;
    // Original field: struct VkPipelineDepthStencilStateCreateInfo pDepthStencilState. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPipelineDepthStencilStateCreateInfo pDepthStencilState = 12;
    // Original field: struct VkPipelineColorBlendStateCreateInfo pColorBlendState. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPipelineColorBlendStateCreateInfo pColorBlendState = 13;
    // Original field: struct VkPipelineDynamicStateCreateInfo pDynamicState. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPipelineDynamicStateCreateInfo pDynamicState = 14;
    // Original field: handle VkPipelineLayout layout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 layout = 15;
    // Original field: handle VkRenderPass renderPass. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 renderPass = 16;
    // Original field: None uint32_t subpass. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 subpass = 17;
    // Original field: handle VkPipeline basePipelineHandle. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 basePipelineHandle = 18;
    // Original field: None int32_t basePipelineIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional int32 basePipelineIndex = 19;
}
message vkCreateGraphicsPipelines
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkPipelineCache pipelineCache. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pipelineCache = 2;
    // Original field: None uint32_t createInfoCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 createInfoCount = 3;
    // Original field: struct VkGraphicsPipelineCreateInfo pCreateInfos. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkGraphicsPipelineCreateInfo pCreateInfos = 4;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 5;
    // Original field: handle VkPipeline pPipelines. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pPipelines = 6;
}
message VkComputePipelineCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkPipelineCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: struct VkPipelineShaderStageCreateInfo stage. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPipelineShaderStageCreateInfo stage = 4;
    // Original field: handle VkPipelineLayout layout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 layout = 5;
    // Original field: handle VkPipeline basePipelineHandle. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 basePipelineHandle = 6;
    // Original field: None int32_t basePipelineIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional int32 basePipelineIndex = 7;
}
message vkCreateComputePipelines
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkPipelineCache pipelineCache. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pipelineCache = 2;
    // Original field: None uint32_t createInfoCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 createInfoCount = 3;
    // Original field: struct VkComputePipelineCreateInfo pCreateInfos. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkComputePipelineCreateInfo pCreateInfos = 4;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 5;
    // Original field: handle VkPipeline pPipelines. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pPipelines = 6;
}
message vkDestroyPipeline
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkPipeline pipeline. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pipeline = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
}
message VkPushConstantRange
{
    // Original field: bitmask VkShaderStageFlags stageFlags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 stageFlags = 1;
    // Original field: None uint32_t offset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 offset = 2;
    // Original field: None uint32_t size. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 size = 3;
}
message VkPipelineLayoutCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkPipelineLayoutCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: None uint32_t setLayoutCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 setLayoutCount = 4;
    // Original field: handle VkDescriptorSetLayout pSetLayouts. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pSetLayouts = 5;
    // Original field: None uint32_t pushConstantRangeCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pushConstantRangeCount = 6;
    // Original field: struct VkPushConstantRange pPushConstantRanges. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkPushConstantRange pPushConstantRanges = 7;
}
message vkCreatePipelineLayout
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkPipelineLayoutCreateInfo pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPipelineLayoutCreateInfo pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkPipelineLayout pPipelineLayout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pPipelineLayout = 4;
}
message vkDestroyPipelineLayout
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkPipelineLayout pipelineLayout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pipelineLayout = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
}
message VkSamplerCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkSamplerCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: enum VkFilter magFilter. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 magFilter = 4;
    // Original field: enum VkFilter minFilter. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 minFilter = 5;
    // Original field: enum VkSamplerMipmapMode mipmapMode. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 mipmapMode = 6;
    // Original field: enum VkSamplerAddressMode addressModeU. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 addressModeU = 7;
    // Original field: enum VkSamplerAddressMode addressModeV. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 addressModeV = 8;
    // Original field: enum VkSamplerAddressMode addressModeW. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 addressModeW = 9;
    // Original field: None float mipLodBias. stringarray? 0 string? 0 hasLenInfo? 0
    optional float mipLodBias = 10;
    // Original field: basetype VkBool32 anisotropyEnable. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 anisotropyEnable = 11;
    // Original field: None float maxAnisotropy. stringarray? 0 string? 0 hasLenInfo? 0
    optional float maxAnisotropy = 12;
    // Original field: basetype VkBool32 compareEnable. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 compareEnable = 13;
    // Original field: enum VkCompareOp compareOp. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 compareOp = 14;
    // Original field: None float minLod. stringarray? 0 string? 0 hasLenInfo? 0
    optional float minLod = 15;
    // Original field: None float maxLod. stringarray? 0 string? 0 hasLenInfo? 0
    optional float maxLod = 16;
    // Original field: enum VkBorderColor borderColor. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 borderColor = 17;
    // Original field: basetype VkBool32 unnormalizedCoordinates. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 unnormalizedCoordinates = 18;
}
message vkCreateSampler
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkSamplerCreateInfo pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkSamplerCreateInfo pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkSampler pSampler. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pSampler = 4;
}
message vkDestroySampler
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkSampler sampler. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 sampler = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
}
message VkDescriptorSetLayoutBinding
{
    // Original field: None uint32_t binding. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 binding = 1;
    // Original field: enum VkDescriptorType descriptorType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 descriptorType = 2;
    // Original field: None uint32_t descriptorCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 descriptorCount = 3;
    // Original field: bitmask VkShaderStageFlags stageFlags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 stageFlags = 4;
    // Original field: handle VkSampler pImmutableSamplers. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pImmutableSamplers = 5;
}
message VkDescriptorSetLayoutCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkDescriptorSetLayoutCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: None uint32_t bindingCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 bindingCount = 4;
    // Original field: struct VkDescriptorSetLayoutBinding pBindings. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkDescriptorSetLayoutBinding pBindings = 5;
}
message vkCreateDescriptorSetLayout
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkDescriptorSetLayoutCreateInfo pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDescriptorSetLayoutCreateInfo pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkDescriptorSetLayout pSetLayout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pSetLayout = 4;
}
message vkDestroyDescriptorSetLayout
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkDescriptorSetLayout descriptorSetLayout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 descriptorSetLayout = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
}
message VkDescriptorPoolSize
{
    // Original field: enum VkDescriptorType type. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 type = 1;
    // Original field: None uint32_t descriptorCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 descriptorCount = 2;
}
message VkDescriptorPoolCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkDescriptorPoolCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: None uint32_t maxSets. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxSets = 4;
    // Original field: None uint32_t poolSizeCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 poolSizeCount = 5;
    // Original field: struct VkDescriptorPoolSize pPoolSizes. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkDescriptorPoolSize pPoolSizes = 6;
}
message vkCreateDescriptorPool
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkDescriptorPoolCreateInfo pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDescriptorPoolCreateInfo pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkDescriptorPool pDescriptorPool. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pDescriptorPool = 4;
}
message vkDestroyDescriptorPool
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkDescriptorPool descriptorPool. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 descriptorPool = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
}
message vkResetDescriptorPool
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkDescriptorPool descriptorPool. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 descriptorPool = 2;
    // Original field: bitmask VkDescriptorPoolResetFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
}
message VkDescriptorSetAllocateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: handle VkDescriptorPool descriptorPool. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 descriptorPool = 3;
    // Original field: None uint32_t descriptorSetCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 descriptorSetCount = 4;
    // Original field: handle VkDescriptorSetLayout pSetLayouts. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pSetLayouts = 5;
}
message vkAllocateDescriptorSets
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkDescriptorSetAllocateInfo pAllocateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDescriptorSetAllocateInfo pAllocateInfo = 2;
    // Original field: handle VkDescriptorSet pDescriptorSets. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pDescriptorSets = 3;
}
message vkFreeDescriptorSets
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkDescriptorPool descriptorPool. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 descriptorPool = 2;
    // Original field: None uint32_t descriptorSetCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 descriptorSetCount = 3;
    // Original field: handle VkDescriptorSet pDescriptorSets. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pDescriptorSets = 4;
}
message VkDescriptorImageInfo
{
    // Original field: handle VkSampler sampler. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 sampler = 1;
    // Original field: handle VkImageView imageView. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 imageView = 2;
    // Original field: enum VkImageLayout imageLayout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 imageLayout = 3;
}
message VkDescriptorBufferInfo
{
    // Original field: handle VkBuffer buffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 buffer = 1;
    // Original field: basetype VkDeviceSize offset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 offset = 2;
    // Original field: basetype VkDeviceSize range. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 range = 3;
}
message VkWriteDescriptorSet
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: handle VkDescriptorSet dstSet. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 dstSet = 3;
    // Original field: None uint32_t dstBinding. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dstBinding = 4;
    // Original field: None uint32_t dstArrayElement. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dstArrayElement = 5;
    // Original field: None uint32_t descriptorCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 descriptorCount = 6;
    // Original field: enum VkDescriptorType descriptorType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 descriptorType = 7;
    // Original field: struct VkDescriptorImageInfo pImageInfo. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkDescriptorImageInfo pImageInfo = 8;
    // Original field: struct VkDescriptorBufferInfo pBufferInfo. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkDescriptorBufferInfo pBufferInfo = 9;
    // Original field: handle VkBufferView pTexelBufferView. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pTexelBufferView = 10;
}
message VkCopyDescriptorSet
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: handle VkDescriptorSet srcSet. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 srcSet = 3;
    // Original field: None uint32_t srcBinding. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 srcBinding = 4;
    // Original field: None uint32_t srcArrayElement. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 srcArrayElement = 5;
    // Original field: handle VkDescriptorSet dstSet. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 dstSet = 6;
    // Original field: None uint32_t dstBinding. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dstBinding = 7;
    // Original field: None uint32_t dstArrayElement. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dstArrayElement = 8;
    // Original field: None uint32_t descriptorCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 descriptorCount = 9;
}
message vkUpdateDescriptorSets
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: None uint32_t descriptorWriteCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 descriptorWriteCount = 2;
    // Original field: struct VkWriteDescriptorSet pDescriptorWrites. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkWriteDescriptorSet pDescriptorWrites = 3;
    // Original field: None uint32_t descriptorCopyCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 descriptorCopyCount = 4;
    // Original field: struct VkCopyDescriptorSet pDescriptorCopies. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkCopyDescriptorSet pDescriptorCopies = 5;
}
message VkFramebufferCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkFramebufferCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: handle VkRenderPass renderPass. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 renderPass = 4;
    // Original field: None uint32_t attachmentCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 attachmentCount = 5;
    // Original field: handle VkImageView pAttachments. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pAttachments = 6;
    // Original field: None uint32_t width. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 width = 7;
    // Original field: None uint32_t height. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 height = 8;
    // Original field: None uint32_t layers. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 layers = 9;
}
message vkCreateFramebuffer
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkFramebufferCreateInfo pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkFramebufferCreateInfo pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkFramebuffer pFramebuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pFramebuffer = 4;
}
message vkDestroyFramebuffer
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkFramebuffer framebuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 framebuffer = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
}
message VkAttachmentDescription
{
    // Original field: bitmask VkAttachmentDescriptionFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 1;
    // Original field: enum VkFormat format. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 format = 2;
    // Original field: enum VkSampleCountFlagBits samples. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 samples = 3;
    // Original field: enum VkAttachmentLoadOp loadOp. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 loadOp = 4;
    // Original field: enum VkAttachmentStoreOp storeOp. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 storeOp = 5;
    // Original field: enum VkAttachmentLoadOp stencilLoadOp. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 stencilLoadOp = 6;
    // Original field: enum VkAttachmentStoreOp stencilStoreOp. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 stencilStoreOp = 7;
    // Original field: enum VkImageLayout initialLayout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 initialLayout = 8;
    // Original field: enum VkImageLayout finalLayout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 finalLayout = 9;
}
message VkAttachmentReference
{
    // Original field: None uint32_t attachment. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 attachment = 1;
    // Original field: enum VkImageLayout layout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 layout = 2;
}
message VkSubpassDescription
{
    // Original field: bitmask VkSubpassDescriptionFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 1;
    // Original field: enum VkPipelineBindPoint pipelineBindPoint. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pipelineBindPoint = 2;
    // Original field: None uint32_t inputAttachmentCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 inputAttachmentCount = 3;
    // Original field: struct VkAttachmentReference pInputAttachments. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkAttachmentReference pInputAttachments = 4;
    // Original field: None uint32_t colorAttachmentCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 colorAttachmentCount = 5;
    // Original field: struct VkAttachmentReference pColorAttachments. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkAttachmentReference pColorAttachments = 6;
    // Original field: struct VkAttachmentReference pResolveAttachments. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkAttachmentReference pResolveAttachments = 7;
    // Original field: struct VkAttachmentReference pDepthStencilAttachment. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAttachmentReference pDepthStencilAttachment = 8;
    // Original field: None uint32_t preserveAttachmentCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 preserveAttachmentCount = 9;
    // Original field: None uint32_t pPreserveAttachments. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pPreserveAttachments = 10;
}
message VkSubpassDependency
{
    // Original field: None uint32_t srcSubpass. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 srcSubpass = 1;
    // Original field: None uint32_t dstSubpass. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dstSubpass = 2;
    // Original field: bitmask VkPipelineStageFlags srcStageMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 srcStageMask = 3;
    // Original field: bitmask VkPipelineStageFlags dstStageMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dstStageMask = 4;
    // Original field: bitmask VkAccessFlags srcAccessMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 srcAccessMask = 5;
    // Original field: bitmask VkAccessFlags dstAccessMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dstAccessMask = 6;
    // Original field: bitmask VkDependencyFlags dependencyFlags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dependencyFlags = 7;
}
message VkRenderPassCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkRenderPassCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: None uint32_t attachmentCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 attachmentCount = 4;
    // Original field: struct VkAttachmentDescription pAttachments. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkAttachmentDescription pAttachments = 5;
    // Original field: None uint32_t subpassCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 subpassCount = 6;
    // Original field: struct VkSubpassDescription pSubpasses. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkSubpassDescription pSubpasses = 7;
    // Original field: None uint32_t dependencyCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dependencyCount = 8;
    // Original field: struct VkSubpassDependency pDependencies. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkSubpassDependency pDependencies = 9;
}
message vkCreateRenderPass
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkRenderPassCreateInfo pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkRenderPassCreateInfo pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkRenderPass pRenderPass. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pRenderPass = 4;
}
message vkDestroyRenderPass
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkRenderPass renderPass. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 renderPass = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
}
message vkGetRenderAreaGranularity
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkRenderPass renderPass. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 renderPass = 2;
    // Original field: struct VkExtent2D pGranularity. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtent2D pGranularity = 3;
}
message VkCommandPoolCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkCommandPoolCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: None uint32_t queueFamilyIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 queueFamilyIndex = 4;
}
message vkCreateCommandPool
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkCommandPoolCreateInfo pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkCommandPoolCreateInfo pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkCommandPool pCommandPool. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pCommandPool = 4;
}
message vkDestroyCommandPool
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkCommandPool commandPool. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandPool = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
}
message vkResetCommandPool
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkCommandPool commandPool. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandPool = 2;
    // Original field: bitmask VkCommandPoolResetFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
}
message VkCommandBufferAllocateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: handle VkCommandPool commandPool. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandPool = 3;
    // Original field: enum VkCommandBufferLevel level. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 level = 4;
    // Original field: None uint32_t commandBufferCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 commandBufferCount = 5;
}
message vkAllocateCommandBuffers
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkCommandBufferAllocateInfo pAllocateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkCommandBufferAllocateInfo pAllocateInfo = 2;
    // Original field: handle VkCommandBuffer pCommandBuffers. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pCommandBuffers = 3;
}
message vkFreeCommandBuffers
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkCommandPool commandPool. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandPool = 2;
    // Original field: None uint32_t commandBufferCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 commandBufferCount = 3;
    // Original field: handle VkCommandBuffer pCommandBuffers. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pCommandBuffers = 4;
}
message VkCommandBufferInheritanceInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: handle VkRenderPass renderPass. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 renderPass = 3;
    // Original field: None uint32_t subpass. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 subpass = 4;
    // Original field: handle VkFramebuffer framebuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 framebuffer = 5;
    // Original field: basetype VkBool32 occlusionQueryEnable. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 occlusionQueryEnable = 6;
    // Original field: bitmask VkQueryControlFlags queryFlags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 queryFlags = 7;
    // Original field: bitmask VkQueryPipelineStatisticFlags pipelineStatistics. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pipelineStatistics = 8;
}
message VkCommandBufferBeginInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkCommandBufferUsageFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: struct VkCommandBufferInheritanceInfo pInheritanceInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkCommandBufferInheritanceInfo pInheritanceInfo = 4;
}
message vkBeginCommandBuffer
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: struct VkCommandBufferBeginInfo pBeginInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkCommandBufferBeginInfo pBeginInfo = 2;
}
message vkEndCommandBuffer
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
}
message vkResetCommandBuffer
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: bitmask VkCommandBufferResetFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 2;
}
message vkCmdBindPipeline
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: enum VkPipelineBindPoint pipelineBindPoint. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pipelineBindPoint = 2;
    // Original field: handle VkPipeline pipeline. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pipeline = 3;
}
message vkCmdSetViewport
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: None uint32_t firstViewport. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 firstViewport = 2;
    // Original field: None uint32_t viewportCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 viewportCount = 3;
    // Original field: struct VkViewport pViewports. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkViewport pViewports = 4;
}
message vkCmdSetScissor
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: None uint32_t firstScissor. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 firstScissor = 2;
    // Original field: None uint32_t scissorCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 scissorCount = 3;
    // Original field: struct VkRect2D pScissors. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkRect2D pScissors = 4;
}
message vkCmdSetLineWidth
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: None float lineWidth. stringarray? 0 string? 0 hasLenInfo? 0
    optional float lineWidth = 2;
}
message vkCmdSetDepthBias
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: None float depthBiasConstantFactor. stringarray? 0 string? 0 hasLenInfo? 0
    optional float depthBiasConstantFactor = 2;
    // Original field: None float depthBiasClamp. stringarray? 0 string? 0 hasLenInfo? 0
    optional float depthBiasClamp = 3;
    // Original field: None float depthBiasSlopeFactor. stringarray? 0 string? 0 hasLenInfo? 0
    optional float depthBiasSlopeFactor = 4;
}
message vkCmdSetBlendConstants
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: None float blendConstants. stringarray? 0 string? 0 hasLenInfo? 1
    repeated float blendConstants = 2;
}
message vkCmdSetDepthBounds
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: None float minDepthBounds. stringarray? 0 string? 0 hasLenInfo? 0
    optional float minDepthBounds = 2;
    // Original field: None float maxDepthBounds. stringarray? 0 string? 0 hasLenInfo? 0
    optional float maxDepthBounds = 3;
}
message vkCmdSetStencilCompareMask
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: bitmask VkStencilFaceFlags faceMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 faceMask = 2;
    // Original field: None uint32_t compareMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 compareMask = 3;
}
message vkCmdSetStencilWriteMask
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: bitmask VkStencilFaceFlags faceMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 faceMask = 2;
    // Original field: None uint32_t writeMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 writeMask = 3;
}
message vkCmdSetStencilReference
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: bitmask VkStencilFaceFlags faceMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 faceMask = 2;
    // Original field: None uint32_t reference. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 reference = 3;
}
message vkCmdBindDescriptorSets
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: enum VkPipelineBindPoint pipelineBindPoint. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pipelineBindPoint = 2;
    // Original field: handle VkPipelineLayout layout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 layout = 3;
    // Original field: None uint32_t firstSet. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 firstSet = 4;
    // Original field: None uint32_t descriptorSetCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 descriptorSetCount = 5;
    // Original field: handle VkDescriptorSet pDescriptorSets. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pDescriptorSets = 6;
    // Original field: None uint32_t dynamicOffsetCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dynamicOffsetCount = 7;
    // Original field: None uint32_t pDynamicOffsets. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pDynamicOffsets = 8;
}
message vkCmdBindIndexBuffer
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: handle VkBuffer buffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 buffer = 2;
    // Original field: basetype VkDeviceSize offset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 offset = 3;
    // Original field: enum VkIndexType indexType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 indexType = 4;
}
message vkCmdBindVertexBuffers
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: None uint32_t firstBinding. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 firstBinding = 2;
    // Original field: None uint32_t bindingCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 bindingCount = 3;
    // Original field: handle VkBuffer pBuffers. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pBuffers = 4;
    // Original field: basetype VkDeviceSize pOffsets. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pOffsets = 5;
}
message vkCmdDraw
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: None uint32_t vertexCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 vertexCount = 2;
    // Original field: None uint32_t instanceCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 instanceCount = 3;
    // Original field: None uint32_t firstVertex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 firstVertex = 4;
    // Original field: None uint32_t firstInstance. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 firstInstance = 5;
}
message vkCmdDrawIndexed
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: None uint32_t indexCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 indexCount = 2;
    // Original field: None uint32_t instanceCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 instanceCount = 3;
    // Original field: None uint32_t firstIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 firstIndex = 4;
    // Original field: None int32_t vertexOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional int32 vertexOffset = 5;
    // Original field: None uint32_t firstInstance. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 firstInstance = 6;
}
message vkCmdDrawIndirect
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: handle VkBuffer buffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 buffer = 2;
    // Original field: basetype VkDeviceSize offset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 offset = 3;
    // Original field: None uint32_t drawCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 drawCount = 4;
    // Original field: None uint32_t stride. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 stride = 5;
}
message vkCmdDrawIndexedIndirect
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: handle VkBuffer buffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 buffer = 2;
    // Original field: basetype VkDeviceSize offset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 offset = 3;
    // Original field: None uint32_t drawCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 drawCount = 4;
    // Original field: None uint32_t stride. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 stride = 5;
}
message vkCmdDispatch
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: None uint32_t groupCountX. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 groupCountX = 2;
    // Original field: None uint32_t groupCountY. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 groupCountY = 3;
    // Original field: None uint32_t groupCountZ. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 groupCountZ = 4;
}
message vkCmdDispatchIndirect
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: handle VkBuffer buffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 buffer = 2;
    // Original field: basetype VkDeviceSize offset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 offset = 3;
}
message VkBufferCopy
{
    // Original field: basetype VkDeviceSize srcOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 srcOffset = 1;
    // Original field: basetype VkDeviceSize dstOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 dstOffset = 2;
    // Original field: basetype VkDeviceSize size. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 size = 3;
}
message vkCmdCopyBuffer
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: handle VkBuffer srcBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 srcBuffer = 2;
    // Original field: handle VkBuffer dstBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 dstBuffer = 3;
    // Original field: None uint32_t regionCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 regionCount = 4;
    // Original field: struct VkBufferCopy pRegions. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkBufferCopy pRegions = 5;
}
message VkImageSubresourceLayers
{
    // Original field: bitmask VkImageAspectFlags aspectMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 aspectMask = 1;
    // Original field: None uint32_t mipLevel. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 mipLevel = 2;
    // Original field: None uint32_t baseArrayLayer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 baseArrayLayer = 3;
    // Original field: None uint32_t layerCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 layerCount = 4;
}
message VkImageCopy
{
    // Original field: struct VkImageSubresourceLayers srcSubresource. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkImageSubresourceLayers srcSubresource = 1;
    // Original field: struct VkOffset3D srcOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkOffset3D srcOffset = 2;
    // Original field: struct VkImageSubresourceLayers dstSubresource. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkImageSubresourceLayers dstSubresource = 3;
    // Original field: struct VkOffset3D dstOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkOffset3D dstOffset = 4;
    // Original field: struct VkExtent3D extent. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtent3D extent = 5;
}
message vkCmdCopyImage
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: handle VkImage srcImage. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 srcImage = 2;
    // Original field: enum VkImageLayout srcImageLayout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 srcImageLayout = 3;
    // Original field: handle VkImage dstImage. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 dstImage = 4;
    // Original field: enum VkImageLayout dstImageLayout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dstImageLayout = 5;
    // Original field: None uint32_t regionCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 regionCount = 6;
    // Original field: struct VkImageCopy pRegions. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkImageCopy pRegions = 7;
}
message VkImageBlit
{
    // Original field: struct VkImageSubresourceLayers srcSubresource. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkImageSubresourceLayers srcSubresource = 1;
    // Original field: struct VkOffset3D srcOffsets. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkOffset3D srcOffsets = 2;
    // Original field: struct VkImageSubresourceLayers dstSubresource. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkImageSubresourceLayers dstSubresource = 3;
    // Original field: struct VkOffset3D dstOffsets. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkOffset3D dstOffsets = 4;
}
message vkCmdBlitImage
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: handle VkImage srcImage. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 srcImage = 2;
    // Original field: enum VkImageLayout srcImageLayout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 srcImageLayout = 3;
    // Original field: handle VkImage dstImage. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 dstImage = 4;
    // Original field: enum VkImageLayout dstImageLayout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dstImageLayout = 5;
    // Original field: None uint32_t regionCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 regionCount = 6;
    // Original field: struct VkImageBlit pRegions. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkImageBlit pRegions = 7;
    // Original field: enum VkFilter filter. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 filter = 8;
}
message VkBufferImageCopy
{
    // Original field: basetype VkDeviceSize bufferOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 bufferOffset = 1;
    // Original field: None uint32_t bufferRowLength. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 bufferRowLength = 2;
    // Original field: None uint32_t bufferImageHeight. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 bufferImageHeight = 3;
    // Original field: struct VkImageSubresourceLayers imageSubresource. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkImageSubresourceLayers imageSubresource = 4;
    // Original field: struct VkOffset3D imageOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkOffset3D imageOffset = 5;
    // Original field: struct VkExtent3D imageExtent. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtent3D imageExtent = 6;
}
message vkCmdCopyBufferToImage
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: handle VkBuffer srcBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 srcBuffer = 2;
    // Original field: handle VkImage dstImage. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 dstImage = 3;
    // Original field: enum VkImageLayout dstImageLayout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dstImageLayout = 4;
    // Original field: None uint32_t regionCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 regionCount = 5;
    // Original field: struct VkBufferImageCopy pRegions. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkBufferImageCopy pRegions = 6;
}
message vkCmdCopyImageToBuffer
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: handle VkImage srcImage. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 srcImage = 2;
    // Original field: enum VkImageLayout srcImageLayout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 srcImageLayout = 3;
    // Original field: handle VkBuffer dstBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 dstBuffer = 4;
    // Original field: None uint32_t regionCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 regionCount = 5;
    // Original field: struct VkBufferImageCopy pRegions. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkBufferImageCopy pRegions = 6;
}
message vkCmdUpdateBuffer
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: handle VkBuffer dstBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 dstBuffer = 2;
    // Original field: basetype VkDeviceSize dstOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 dstOffset = 3;
    // Original field: basetype VkDeviceSize dataSize. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 dataSize = 4;
    // Original field: None void pData. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pData = 5;
}
message vkCmdFillBuffer
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: handle VkBuffer dstBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 dstBuffer = 2;
    // Original field: basetype VkDeviceSize dstOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 dstOffset = 3;
    // Original field: basetype VkDeviceSize size. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 size = 4;
    // Original field: None uint32_t data. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 data = 5;
}
message VkClearColorValue
{
    // Original field: None float float32. stringarray? 0 string? 0 hasLenInfo? 1
    repeated float float32 = 1;
    // Original field: None int32_t int32. stringarray? 0 string? 0 hasLenInfo? 1
    repeated int32 int32 = 2;
    // Original field: None uint32_t uint32. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 uint32 = 3;
}
message vkCmdClearColorImage
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: handle VkImage image. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 image = 2;
    // Original field: enum VkImageLayout imageLayout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 imageLayout = 3;
    // Original field: union VkClearColorValue pColor. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkClearColorValue pColor = 4;
    // Original field: None uint32_t rangeCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 rangeCount = 5;
    // Original field: struct VkImageSubresourceRange pRanges. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkImageSubresourceRange pRanges = 6;
}
message VkClearDepthStencilValue
{
    // Original field: None float depth. stringarray? 0 string? 0 hasLenInfo? 0
    optional float depth = 1;
    // Original field: None uint32_t stencil. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 stencil = 2;
}
message vkCmdClearDepthStencilImage
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: handle VkImage image. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 image = 2;
    // Original field: enum VkImageLayout imageLayout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 imageLayout = 3;
    // Original field: struct VkClearDepthStencilValue pDepthStencil. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkClearDepthStencilValue pDepthStencil = 4;
    // Original field: None uint32_t rangeCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 rangeCount = 5;
    // Original field: struct VkImageSubresourceRange pRanges. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkImageSubresourceRange pRanges = 6;
}
message VkClearValue
{
    // Original field: union VkClearColorValue color. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkClearColorValue color = 1;
    // Original field: struct VkClearDepthStencilValue depthStencil. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkClearDepthStencilValue depthStencil = 2;
}
message VkClearAttachment
{
    // Original field: bitmask VkImageAspectFlags aspectMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 aspectMask = 1;
    // Original field: None uint32_t colorAttachment. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 colorAttachment = 2;
    // Original field: union VkClearValue clearValue. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkClearValue clearValue = 3;
}
message VkClearRect
{
    // Original field: struct VkRect2D rect. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkRect2D rect = 1;
    // Original field: None uint32_t baseArrayLayer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 baseArrayLayer = 2;
    // Original field: None uint32_t layerCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 layerCount = 3;
}
message vkCmdClearAttachments
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: None uint32_t attachmentCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 attachmentCount = 2;
    // Original field: struct VkClearAttachment pAttachments. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkClearAttachment pAttachments = 3;
    // Original field: None uint32_t rectCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 rectCount = 4;
    // Original field: struct VkClearRect pRects. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkClearRect pRects = 5;
}
message VkImageResolve
{
    // Original field: struct VkImageSubresourceLayers srcSubresource. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkImageSubresourceLayers srcSubresource = 1;
    // Original field: struct VkOffset3D srcOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkOffset3D srcOffset = 2;
    // Original field: struct VkImageSubresourceLayers dstSubresource. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkImageSubresourceLayers dstSubresource = 3;
    // Original field: struct VkOffset3D dstOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkOffset3D dstOffset = 4;
    // Original field: struct VkExtent3D extent. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtent3D extent = 5;
}
message vkCmdResolveImage
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: handle VkImage srcImage. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 srcImage = 2;
    // Original field: enum VkImageLayout srcImageLayout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 srcImageLayout = 3;
    // Original field: handle VkImage dstImage. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 dstImage = 4;
    // Original field: enum VkImageLayout dstImageLayout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dstImageLayout = 5;
    // Original field: None uint32_t regionCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 regionCount = 6;
    // Original field: struct VkImageResolve pRegions. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkImageResolve pRegions = 7;
}
message vkCmdSetEvent
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: handle VkEvent event. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 event = 2;
    // Original field: bitmask VkPipelineStageFlags stageMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 stageMask = 3;
}
message vkCmdResetEvent
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: handle VkEvent event. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 event = 2;
    // Original field: bitmask VkPipelineStageFlags stageMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 stageMask = 3;
}
message VkMemoryBarrier
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkAccessFlags srcAccessMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 srcAccessMask = 3;
    // Original field: bitmask VkAccessFlags dstAccessMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dstAccessMask = 4;
}
message VkBufferMemoryBarrier
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkAccessFlags srcAccessMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 srcAccessMask = 3;
    // Original field: bitmask VkAccessFlags dstAccessMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dstAccessMask = 4;
    // Original field: None uint32_t srcQueueFamilyIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 srcQueueFamilyIndex = 5;
    // Original field: None uint32_t dstQueueFamilyIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dstQueueFamilyIndex = 6;
    // Original field: handle VkBuffer buffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 buffer = 7;
    // Original field: basetype VkDeviceSize offset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 offset = 8;
    // Original field: basetype VkDeviceSize size. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 size = 9;
}
message VkImageMemoryBarrier
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkAccessFlags srcAccessMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 srcAccessMask = 3;
    // Original field: bitmask VkAccessFlags dstAccessMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dstAccessMask = 4;
    // Original field: enum VkImageLayout oldLayout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 oldLayout = 5;
    // Original field: enum VkImageLayout newLayout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 newLayout = 6;
    // Original field: None uint32_t srcQueueFamilyIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 srcQueueFamilyIndex = 7;
    // Original field: None uint32_t dstQueueFamilyIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dstQueueFamilyIndex = 8;
    // Original field: handle VkImage image. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 image = 9;
    // Original field: struct VkImageSubresourceRange subresourceRange. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkImageSubresourceRange subresourceRange = 10;
}
message vkCmdWaitEvents
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: None uint32_t eventCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 eventCount = 2;
    // Original field: handle VkEvent pEvents. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pEvents = 3;
    // Original field: bitmask VkPipelineStageFlags srcStageMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 srcStageMask = 4;
    // Original field: bitmask VkPipelineStageFlags dstStageMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dstStageMask = 5;
    // Original field: None uint32_t memoryBarrierCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 memoryBarrierCount = 6;
    // Original field: struct VkMemoryBarrier pMemoryBarriers. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkMemoryBarrier pMemoryBarriers = 7;
    // Original field: None uint32_t bufferMemoryBarrierCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 bufferMemoryBarrierCount = 8;
    // Original field: struct VkBufferMemoryBarrier pBufferMemoryBarriers. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkBufferMemoryBarrier pBufferMemoryBarriers = 9;
    // Original field: None uint32_t imageMemoryBarrierCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 imageMemoryBarrierCount = 10;
    // Original field: struct VkImageMemoryBarrier pImageMemoryBarriers. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkImageMemoryBarrier pImageMemoryBarriers = 11;
}
message vkCmdPipelineBarrier
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: bitmask VkPipelineStageFlags srcStageMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 srcStageMask = 2;
    // Original field: bitmask VkPipelineStageFlags dstStageMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dstStageMask = 3;
    // Original field: bitmask VkDependencyFlags dependencyFlags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dependencyFlags = 4;
    // Original field: None uint32_t memoryBarrierCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 memoryBarrierCount = 5;
    // Original field: struct VkMemoryBarrier pMemoryBarriers. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkMemoryBarrier pMemoryBarriers = 6;
    // Original field: None uint32_t bufferMemoryBarrierCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 bufferMemoryBarrierCount = 7;
    // Original field: struct VkBufferMemoryBarrier pBufferMemoryBarriers. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkBufferMemoryBarrier pBufferMemoryBarriers = 8;
    // Original field: None uint32_t imageMemoryBarrierCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 imageMemoryBarrierCount = 9;
    // Original field: struct VkImageMemoryBarrier pImageMemoryBarriers. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkImageMemoryBarrier pImageMemoryBarriers = 10;
}
message vkCmdBeginQuery
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: handle VkQueryPool queryPool. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 queryPool = 2;
    // Original field: None uint32_t query. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 query = 3;
    // Original field: bitmask VkQueryControlFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 4;
}
message vkCmdEndQuery
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: handle VkQueryPool queryPool. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 queryPool = 2;
    // Original field: None uint32_t query. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 query = 3;
}
message vkCmdResetQueryPool
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: handle VkQueryPool queryPool. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 queryPool = 2;
    // Original field: None uint32_t firstQuery. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 firstQuery = 3;
    // Original field: None uint32_t queryCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 queryCount = 4;
}
message vkCmdWriteTimestamp
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: enum VkPipelineStageFlagBits pipelineStage. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pipelineStage = 2;
    // Original field: handle VkQueryPool queryPool. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 queryPool = 3;
    // Original field: None uint32_t query. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 query = 4;
}
message vkCmdCopyQueryPoolResults
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: handle VkQueryPool queryPool. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 queryPool = 2;
    // Original field: None uint32_t firstQuery. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 firstQuery = 3;
    // Original field: None uint32_t queryCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 queryCount = 4;
    // Original field: handle VkBuffer dstBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 dstBuffer = 5;
    // Original field: basetype VkDeviceSize dstOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 dstOffset = 6;
    // Original field: basetype VkDeviceSize stride. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 stride = 7;
    // Original field: bitmask VkQueryResultFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 8;
}
message vkCmdPushConstants
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: handle VkPipelineLayout layout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 layout = 2;
    // Original field: bitmask VkShaderStageFlags stageFlags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 stageFlags = 3;
    // Original field: None uint32_t offset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 offset = 4;
    // Original field: None uint32_t size. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 size = 5;
    // Original field: None void pValues. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pValues = 6;
}
message VkRenderPassBeginInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: handle VkRenderPass renderPass. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 renderPass = 3;
    // Original field: handle VkFramebuffer framebuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 framebuffer = 4;
    // Original field: struct VkRect2D renderArea. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkRect2D renderArea = 5;
    // Original field: None uint32_t clearValueCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 clearValueCount = 6;
    // Original field: union VkClearValue pClearValues. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkClearValue pClearValues = 7;
}
message vkCmdBeginRenderPass
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: struct VkRenderPassBeginInfo pRenderPassBegin. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkRenderPassBeginInfo pRenderPassBegin = 2;
    // Original field: enum VkSubpassContents contents. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 contents = 3;
}
message vkCmdNextSubpass
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: enum VkSubpassContents contents. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 contents = 2;
}
message vkCmdEndRenderPass
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
}
message vkCmdExecuteCommands
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: None uint32_t commandBufferCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 commandBufferCount = 2;
    // Original field: handle VkCommandBuffer pCommandBuffers. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pCommandBuffers = 3;
}
message VkDispatchIndirectCommand
{
    // Original field: None uint32_t x. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 x = 1;
    // Original field: None uint32_t y. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 y = 2;
    // Original field: None uint32_t z. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 z = 3;
}
message VkDrawIndexedIndirectCommand
{
    // Original field: None uint32_t indexCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 indexCount = 1;
    // Original field: None uint32_t instanceCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 instanceCount = 2;
    // Original field: None uint32_t firstIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 firstIndex = 3;
    // Original field: None int32_t vertexOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional int32 vertexOffset = 4;
    // Original field: None uint32_t firstInstance. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 firstInstance = 5;
}
message VkDrawIndirectCommand
{
    // Original field: None uint32_t vertexCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 vertexCount = 1;
    // Original field: None uint32_t instanceCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 instanceCount = 2;
    // Original field: None uint32_t firstVertex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 firstVertex = 3;
    // Original field: None uint32_t firstInstance. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 firstInstance = 4;
}
message VkBaseOutStructure
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: struct VkBaseOutStructure pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkBaseOutStructure pNext = 2;
}
message VkBaseInStructure
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: struct VkBaseInStructure pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkBaseInStructure pNext = 2;
}
message vkEnumerateInstanceVersion
{
    // Original field: None uint32_t pApiVersion. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pApiVersion = 1;
}
message VkPhysicalDeviceSubgroupProperties
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t subgroupSize. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 subgroupSize = 3;
    // Original field: bitmask VkShaderStageFlags supportedStages. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 supportedStages = 4;
    // Original field: bitmask VkSubgroupFeatureFlags supportedOperations. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 supportedOperations = 5;
    // Original field: basetype VkBool32 quadOperationsInAllStages. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 quadOperationsInAllStages = 6;
}
message VkBindBufferMemoryInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: handle VkBuffer buffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 buffer = 3;
    // Original field: handle VkDeviceMemory memory. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 memory = 4;
    // Original field: basetype VkDeviceSize memoryOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 memoryOffset = 5;
}
message VkBindImageMemoryInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: handle VkImage image. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 image = 3;
    // Original field: handle VkDeviceMemory memory. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 memory = 4;
    // Original field: basetype VkDeviceSize memoryOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 memoryOffset = 5;
}
message vkBindBufferMemory2
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: None uint32_t bindInfoCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 bindInfoCount = 2;
    // Original field: struct VkBindBufferMemoryInfo pBindInfos. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkBindBufferMemoryInfo pBindInfos = 3;
}
message vkBindImageMemory2
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: None uint32_t bindInfoCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 bindInfoCount = 2;
    // Original field: struct VkBindImageMemoryInfo pBindInfos. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkBindImageMemoryInfo pBindInfos = 3;
}
message VkPhysicalDevice16BitStorageFeatures
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: basetype VkBool32 storageBuffer16BitAccess. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 storageBuffer16BitAccess = 3;
    // Original field: basetype VkBool32 uniformAndStorageBuffer16BitAccess. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 uniformAndStorageBuffer16BitAccess = 4;
    // Original field: basetype VkBool32 storagePushConstant16. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 storagePushConstant16 = 5;
    // Original field: basetype VkBool32 storageInputOutput16. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 storageInputOutput16 = 6;
}
message VkMemoryDedicatedRequirements
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: basetype VkBool32 prefersDedicatedAllocation. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 prefersDedicatedAllocation = 3;
    // Original field: basetype VkBool32 requiresDedicatedAllocation. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 requiresDedicatedAllocation = 4;
}
message VkMemoryDedicatedAllocateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: handle VkImage image. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 image = 3;
    // Original field: handle VkBuffer buffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 buffer = 4;
}
message VkMemoryAllocateFlagsInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkMemoryAllocateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: None uint32_t deviceMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 deviceMask = 4;
}
message VkDeviceGroupRenderPassBeginInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t deviceMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 deviceMask = 3;
    // Original field: None uint32_t deviceRenderAreaCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 deviceRenderAreaCount = 4;
    // Original field: struct VkRect2D pDeviceRenderAreas. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkRect2D pDeviceRenderAreas = 5;
}
message VkDeviceGroupCommandBufferBeginInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t deviceMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 deviceMask = 3;
}
message VkDeviceGroupSubmitInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t waitSemaphoreCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 waitSemaphoreCount = 3;
    // Original field: None uint32_t pWaitSemaphoreDeviceIndices. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pWaitSemaphoreDeviceIndices = 4;
    // Original field: None uint32_t commandBufferCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 commandBufferCount = 5;
    // Original field: None uint32_t pCommandBufferDeviceMasks. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pCommandBufferDeviceMasks = 6;
    // Original field: None uint32_t signalSemaphoreCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 signalSemaphoreCount = 7;
    // Original field: None uint32_t pSignalSemaphoreDeviceIndices. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pSignalSemaphoreDeviceIndices = 8;
}
message VkDeviceGroupBindSparseInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t resourceDeviceIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 resourceDeviceIndex = 3;
    // Original field: None uint32_t memoryDeviceIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 memoryDeviceIndex = 4;
}
message vkGetDeviceGroupPeerMemoryFeatures
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: None uint32_t heapIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 heapIndex = 2;
    // Original field: None uint32_t localDeviceIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 localDeviceIndex = 3;
    // Original field: None uint32_t remoteDeviceIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 remoteDeviceIndex = 4;
    // Original field: bitmask VkPeerMemoryFeatureFlags pPeerMemoryFeatures. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pPeerMemoryFeatures = 5;
}
message vkCmdSetDeviceMask
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: None uint32_t deviceMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 deviceMask = 2;
}
message vkCmdDispatchBase
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: None uint32_t baseGroupX. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 baseGroupX = 2;
    // Original field: None uint32_t baseGroupY. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 baseGroupY = 3;
    // Original field: None uint32_t baseGroupZ. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 baseGroupZ = 4;
    // Original field: None uint32_t groupCountX. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 groupCountX = 5;
    // Original field: None uint32_t groupCountY. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 groupCountY = 6;
    // Original field: None uint32_t groupCountZ. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 groupCountZ = 7;
}
message VkBindBufferMemoryDeviceGroupInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t deviceIndexCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 deviceIndexCount = 3;
    // Original field: None uint32_t pDeviceIndices. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pDeviceIndices = 4;
}
message VkBindImageMemoryDeviceGroupInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t deviceIndexCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 deviceIndexCount = 3;
    // Original field: None uint32_t pDeviceIndices. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pDeviceIndices = 4;
    // Original field: None uint32_t splitInstanceBindRegionCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 splitInstanceBindRegionCount = 5;
    // Original field: struct VkRect2D pSplitInstanceBindRegions. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkRect2D pSplitInstanceBindRegions = 6;
}
message VkPhysicalDeviceGroupProperties
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t physicalDeviceCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 physicalDeviceCount = 3;
    // Original field: handle VkPhysicalDevice physicalDevices. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 physicalDevices = 4;
    // Original field: basetype VkBool32 subsetAllocation. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 subsetAllocation = 5;
}
message VkDeviceGroupDeviceCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t physicalDeviceCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 physicalDeviceCount = 3;
    // Original field: handle VkPhysicalDevice pPhysicalDevices. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pPhysicalDevices = 4;
}
message vkEnumeratePhysicalDeviceGroups
{
    // Original field: handle VkInstance instance. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 instance = 1;
    // Original field: None uint32_t pPhysicalDeviceGroupCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pPhysicalDeviceGroupCount = 2;
    // Original field: struct VkPhysicalDeviceGroupProperties pPhysicalDeviceGroupProperties. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkPhysicalDeviceGroupProperties pPhysicalDeviceGroupProperties = 3;
}
message VkBufferMemoryRequirementsInfo2
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: handle VkBuffer buffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 buffer = 3;
}
message VkImageMemoryRequirementsInfo2
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: handle VkImage image. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 image = 3;
}
message VkImageSparseMemoryRequirementsInfo2
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: handle VkImage image. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 image = 3;
}
message VkMemoryRequirements2
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: struct VkMemoryRequirements memoryRequirements. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkMemoryRequirements memoryRequirements = 3;
}
message VkSparseImageMemoryRequirements2
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: struct VkSparseImageMemoryRequirements memoryRequirements. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkSparseImageMemoryRequirements memoryRequirements = 3;
}
message vkGetImageMemoryRequirements2
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkImageMemoryRequirementsInfo2 pInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkImageMemoryRequirementsInfo2 pInfo = 2;
    // Original field: struct VkMemoryRequirements2 pMemoryRequirements. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkMemoryRequirements2 pMemoryRequirements = 3;
}
message vkGetBufferMemoryRequirements2
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkBufferMemoryRequirementsInfo2 pInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkBufferMemoryRequirementsInfo2 pInfo = 2;
    // Original field: struct VkMemoryRequirements2 pMemoryRequirements. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkMemoryRequirements2 pMemoryRequirements = 3;
}
message vkGetImageSparseMemoryRequirements2
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkImageSparseMemoryRequirementsInfo2 pInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkImageSparseMemoryRequirementsInfo2 pInfo = 2;
    // Original field: None uint32_t pSparseMemoryRequirementCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pSparseMemoryRequirementCount = 3;
    // Original field: struct VkSparseImageMemoryRequirements2 pSparseMemoryRequirements. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkSparseImageMemoryRequirements2 pSparseMemoryRequirements = 4;
}
message VkPhysicalDeviceFeatures2
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: struct VkPhysicalDeviceFeatures features. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPhysicalDeviceFeatures features = 3;
}
message VkPhysicalDeviceProperties2
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: struct VkPhysicalDeviceProperties properties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPhysicalDeviceProperties properties = 3;
}
message VkFormatProperties2
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: struct VkFormatProperties formatProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkFormatProperties formatProperties = 3;
}
message VkImageFormatProperties2
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: struct VkImageFormatProperties imageFormatProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkImageFormatProperties imageFormatProperties = 3;
}
message VkPhysicalDeviceImageFormatInfo2
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: enum VkFormat format. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 format = 3;
    // Original field: enum VkImageType type. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 type = 4;
    // Original field: enum VkImageTiling tiling. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 tiling = 5;
    // Original field: bitmask VkImageUsageFlags usage. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 usage = 6;
    // Original field: bitmask VkImageCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 7;
}
message VkQueueFamilyProperties2
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: struct VkQueueFamilyProperties queueFamilyProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkQueueFamilyProperties queueFamilyProperties = 3;
}
message VkPhysicalDeviceMemoryProperties2
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: struct VkPhysicalDeviceMemoryProperties memoryProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPhysicalDeviceMemoryProperties memoryProperties = 3;
}
message VkSparseImageFormatProperties2
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: struct VkSparseImageFormatProperties properties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkSparseImageFormatProperties properties = 3;
}
message VkPhysicalDeviceSparseImageFormatInfo2
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: enum VkFormat format. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 format = 3;
    // Original field: enum VkImageType type. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 type = 4;
    // Original field: enum VkSampleCountFlagBits samples. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 samples = 5;
    // Original field: bitmask VkImageUsageFlags usage. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 usage = 6;
    // Original field: enum VkImageTiling tiling. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 tiling = 7;
}
message vkGetPhysicalDeviceFeatures2
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: struct VkPhysicalDeviceFeatures2 pFeatures. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPhysicalDeviceFeatures2 pFeatures = 2;
}
message vkGetPhysicalDeviceProperties2
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: struct VkPhysicalDeviceProperties2 pProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPhysicalDeviceProperties2 pProperties = 2;
}
message vkGetPhysicalDeviceFormatProperties2
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: enum VkFormat format. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 format = 2;
    // Original field: struct VkFormatProperties2 pFormatProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkFormatProperties2 pFormatProperties = 3;
}
message vkGetPhysicalDeviceImageFormatProperties2
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: struct VkPhysicalDeviceImageFormatInfo2 pImageFormatInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPhysicalDeviceImageFormatInfo2 pImageFormatInfo = 2;
    // Original field: struct VkImageFormatProperties2 pImageFormatProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkImageFormatProperties2 pImageFormatProperties = 3;
}
message vkGetPhysicalDeviceQueueFamilyProperties2
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: None uint32_t pQueueFamilyPropertyCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pQueueFamilyPropertyCount = 2;
    // Original field: struct VkQueueFamilyProperties2 pQueueFamilyProperties. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkQueueFamilyProperties2 pQueueFamilyProperties = 3;
}
message vkGetPhysicalDeviceMemoryProperties2
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: struct VkPhysicalDeviceMemoryProperties2 pMemoryProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPhysicalDeviceMemoryProperties2 pMemoryProperties = 2;
}
message vkGetPhysicalDeviceSparseImageFormatProperties2
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: struct VkPhysicalDeviceSparseImageFormatInfo2 pFormatInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPhysicalDeviceSparseImageFormatInfo2 pFormatInfo = 2;
    // Original field: None uint32_t pPropertyCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pPropertyCount = 3;
    // Original field: struct VkSparseImageFormatProperties2 pProperties. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkSparseImageFormatProperties2 pProperties = 4;
}
message vkTrimCommandPool
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkCommandPool commandPool. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandPool = 2;
    // Original field: bitmask VkCommandPoolTrimFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
}
message VkPhysicalDevicePointClippingProperties
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: enum VkPointClippingBehavior pointClippingBehavior. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pointClippingBehavior = 3;
}
message VkInputAttachmentAspectReference
{
    // Original field: None uint32_t subpass. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 subpass = 1;
    // Original field: None uint32_t inputAttachmentIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 inputAttachmentIndex = 2;
    // Original field: bitmask VkImageAspectFlags aspectMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 aspectMask = 3;
}
message VkRenderPassInputAttachmentAspectCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t aspectReferenceCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 aspectReferenceCount = 3;
    // Original field: struct VkInputAttachmentAspectReference pAspectReferences. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkInputAttachmentAspectReference pAspectReferences = 4;
}
message VkImageViewUsageCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkImageUsageFlags usage. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 usage = 3;
}
message VkPipelineTessellationDomainOriginStateCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: enum VkTessellationDomainOrigin domainOrigin. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 domainOrigin = 3;
}
message VkRenderPassMultiviewCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t subpassCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 subpassCount = 3;
    // Original field: None uint32_t pViewMasks. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pViewMasks = 4;
    // Original field: None uint32_t dependencyCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dependencyCount = 5;
    // Original field: None int32_t pViewOffsets. stringarray? 0 string? 0 hasLenInfo? 1
    repeated int32 pViewOffsets = 6;
    // Original field: None uint32_t correlationMaskCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 correlationMaskCount = 7;
    // Original field: None uint32_t pCorrelationMasks. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pCorrelationMasks = 8;
}
message VkPhysicalDeviceMultiviewFeatures
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: basetype VkBool32 multiview. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 multiview = 3;
    // Original field: basetype VkBool32 multiviewGeometryShader. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 multiviewGeometryShader = 4;
    // Original field: basetype VkBool32 multiviewTessellationShader. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 multiviewTessellationShader = 5;
}
message VkPhysicalDeviceMultiviewProperties
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t maxMultiviewViewCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxMultiviewViewCount = 3;
    // Original field: None uint32_t maxMultiviewInstanceIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxMultiviewInstanceIndex = 4;
}
message VkPhysicalDeviceVariablePointerFeatures
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: basetype VkBool32 variablePointersStorageBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 variablePointersStorageBuffer = 3;
    // Original field: basetype VkBool32 variablePointers. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 variablePointers = 4;
}
message VkPhysicalDeviceProtectedMemoryFeatures
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: basetype VkBool32 protectedMemory. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 protectedMemory = 3;
}
message VkPhysicalDeviceProtectedMemoryProperties
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: basetype VkBool32 protectedNoFault. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 protectedNoFault = 3;
}
message VkDeviceQueueInfo2
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkDeviceQueueCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: None uint32_t queueFamilyIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 queueFamilyIndex = 4;
    // Original field: None uint32_t queueIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 queueIndex = 5;
}
message VkProtectedSubmitInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: basetype VkBool32 protectedSubmit. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 protectedSubmit = 3;
}
message vkGetDeviceQueue2
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkDeviceQueueInfo2 pQueueInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDeviceQueueInfo2 pQueueInfo = 2;
    // Original field: handle VkQueue pQueue. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pQueue = 3;
}
message VkSamplerYcbcrConversionCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: enum VkFormat format. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 format = 3;
    // Original field: enum VkSamplerYcbcrModelConversion ycbcrModel. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 ycbcrModel = 4;
    // Original field: enum VkSamplerYcbcrRange ycbcrRange. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 ycbcrRange = 5;
    // Original field: struct VkComponentMapping components. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkComponentMapping components = 6;
    // Original field: enum VkChromaLocation xChromaOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 xChromaOffset = 7;
    // Original field: enum VkChromaLocation yChromaOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 yChromaOffset = 8;
    // Original field: enum VkFilter chromaFilter. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 chromaFilter = 9;
    // Original field: basetype VkBool32 forceExplicitReconstruction. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 forceExplicitReconstruction = 10;
}
message VkSamplerYcbcrConversionInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: handle VkSamplerYcbcrConversion conversion. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 conversion = 3;
}
message VkBindImagePlaneMemoryInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: enum VkImageAspectFlagBits planeAspect. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 planeAspect = 3;
}
message VkImagePlaneMemoryRequirementsInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: enum VkImageAspectFlagBits planeAspect. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 planeAspect = 3;
}
message VkPhysicalDeviceSamplerYcbcrConversionFeatures
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: basetype VkBool32 samplerYcbcrConversion. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 samplerYcbcrConversion = 3;
}
message VkSamplerYcbcrConversionImageFormatProperties
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t combinedImageSamplerDescriptorCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 combinedImageSamplerDescriptorCount = 3;
}
message vkCreateSamplerYcbcrConversion
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkSamplerYcbcrConversionCreateInfo pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkSamplerYcbcrConversionCreateInfo pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkSamplerYcbcrConversion pYcbcrConversion. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pYcbcrConversion = 4;
}
message vkDestroySamplerYcbcrConversion
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkSamplerYcbcrConversion ycbcrConversion. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 ycbcrConversion = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
}
message VkDescriptorUpdateTemplateEntry
{
    // Original field: None uint32_t dstBinding. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dstBinding = 1;
    // Original field: None uint32_t dstArrayElement. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dstArrayElement = 2;
    // Original field: None uint32_t descriptorCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 descriptorCount = 3;
    // Original field: enum VkDescriptorType descriptorType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 descriptorType = 4;
    // Original field: None size_t offset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 offset = 5;
    // Original field: None size_t stride. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 stride = 6;
}
message VkDescriptorUpdateTemplateCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkDescriptorUpdateTemplateCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: None uint32_t descriptorUpdateEntryCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 descriptorUpdateEntryCount = 4;
    // Original field: struct VkDescriptorUpdateTemplateEntry pDescriptorUpdateEntries. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkDescriptorUpdateTemplateEntry pDescriptorUpdateEntries = 5;
    // Original field: enum VkDescriptorUpdateTemplateType templateType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 templateType = 6;
    // Original field: handle VkDescriptorSetLayout descriptorSetLayout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 descriptorSetLayout = 7;
    // Original field: enum VkPipelineBindPoint pipelineBindPoint. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pipelineBindPoint = 8;
    // Original field: handle VkPipelineLayout pipelineLayout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pipelineLayout = 9;
    // Original field: None uint32_t set. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 set = 10;
}
message vkCreateDescriptorUpdateTemplate
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkDescriptorUpdateTemplateCreateInfo pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDescriptorUpdateTemplateCreateInfo pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkDescriptorUpdateTemplate pDescriptorUpdateTemplate. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pDescriptorUpdateTemplate = 4;
}
message vkDestroyDescriptorUpdateTemplate
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkDescriptorUpdateTemplate descriptorUpdateTemplate. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 descriptorUpdateTemplate = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
}
message vkUpdateDescriptorSetWithTemplate
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkDescriptorSet descriptorSet. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 descriptorSet = 2;
    // Original field: handle VkDescriptorUpdateTemplate descriptorUpdateTemplate. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 descriptorUpdateTemplate = 3;
    // Original field: None void pData. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pData = 4;
}
message VkExternalMemoryProperties
{
    // Original field: bitmask VkExternalMemoryFeatureFlags externalMemoryFeatures. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 externalMemoryFeatures = 1;
    // Original field: bitmask VkExternalMemoryHandleTypeFlags exportFromImportedHandleTypes. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 exportFromImportedHandleTypes = 2;
    // Original field: bitmask VkExternalMemoryHandleTypeFlags compatibleHandleTypes. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 compatibleHandleTypes = 3;
}
message VkPhysicalDeviceExternalImageFormatInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: enum VkExternalMemoryHandleTypeFlagBits handleType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 handleType = 3;
}
message VkExternalImageFormatProperties
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: struct VkExternalMemoryProperties externalMemoryProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExternalMemoryProperties externalMemoryProperties = 3;
}
message VkPhysicalDeviceExternalBufferInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkBufferCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: bitmask VkBufferUsageFlags usage. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 usage = 4;
    // Original field: enum VkExternalMemoryHandleTypeFlagBits handleType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 handleType = 5;
}
message VkExternalBufferProperties
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: struct VkExternalMemoryProperties externalMemoryProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExternalMemoryProperties externalMemoryProperties = 3;
}
message VkPhysicalDeviceIDProperties
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint8_t deviceUUID. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 deviceUUID = 3;
    // Original field: None uint8_t driverUUID. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 driverUUID = 4;
    // Original field: None uint8_t deviceLUID. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 deviceLUID = 5;
    // Original field: None uint32_t deviceNodeMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 deviceNodeMask = 6;
    // Original field: basetype VkBool32 deviceLUIDValid. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 deviceLUIDValid = 7;
}
message vkGetPhysicalDeviceExternalBufferProperties
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: struct VkPhysicalDeviceExternalBufferInfo pExternalBufferInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPhysicalDeviceExternalBufferInfo pExternalBufferInfo = 2;
    // Original field: struct VkExternalBufferProperties pExternalBufferProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExternalBufferProperties pExternalBufferProperties = 3;
}
message VkExternalMemoryImageCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkExternalMemoryHandleTypeFlags handleTypes. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 handleTypes = 3;
}
message VkExternalMemoryBufferCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkExternalMemoryHandleTypeFlags handleTypes. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 handleTypes = 3;
}
message VkExportMemoryAllocateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkExternalMemoryHandleTypeFlags handleTypes. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 handleTypes = 3;
}
message VkPhysicalDeviceExternalFenceInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: enum VkExternalFenceHandleTypeFlagBits handleType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 handleType = 3;
}
message VkExternalFenceProperties
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkExternalFenceHandleTypeFlags exportFromImportedHandleTypes. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 exportFromImportedHandleTypes = 3;
    // Original field: bitmask VkExternalFenceHandleTypeFlags compatibleHandleTypes. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 compatibleHandleTypes = 4;
    // Original field: bitmask VkExternalFenceFeatureFlags externalFenceFeatures. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 externalFenceFeatures = 5;
}
message vkGetPhysicalDeviceExternalFenceProperties
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: struct VkPhysicalDeviceExternalFenceInfo pExternalFenceInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPhysicalDeviceExternalFenceInfo pExternalFenceInfo = 2;
    // Original field: struct VkExternalFenceProperties pExternalFenceProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExternalFenceProperties pExternalFenceProperties = 3;
}
message VkExportFenceCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkExternalFenceHandleTypeFlags handleTypes. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 handleTypes = 3;
}
message VkExportSemaphoreCreateInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkExternalSemaphoreHandleTypeFlags handleTypes. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 handleTypes = 3;
}
message VkPhysicalDeviceExternalSemaphoreInfo
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: enum VkExternalSemaphoreHandleTypeFlagBits handleType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 handleType = 3;
}
message VkExternalSemaphoreProperties
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkExternalSemaphoreHandleTypeFlags exportFromImportedHandleTypes. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 exportFromImportedHandleTypes = 3;
    // Original field: bitmask VkExternalSemaphoreHandleTypeFlags compatibleHandleTypes. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 compatibleHandleTypes = 4;
    // Original field: bitmask VkExternalSemaphoreFeatureFlags externalSemaphoreFeatures. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 externalSemaphoreFeatures = 5;
}
message vkGetPhysicalDeviceExternalSemaphoreProperties
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: struct VkPhysicalDeviceExternalSemaphoreInfo pExternalSemaphoreInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPhysicalDeviceExternalSemaphoreInfo pExternalSemaphoreInfo = 2;
    // Original field: struct VkExternalSemaphoreProperties pExternalSemaphoreProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExternalSemaphoreProperties pExternalSemaphoreProperties = 3;
}
message VkPhysicalDeviceMaintenance3Properties
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t maxPerSetDescriptors. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxPerSetDescriptors = 3;
    // Original field: basetype VkDeviceSize maxMemoryAllocationSize. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 maxMemoryAllocationSize = 4;
}
message VkDescriptorSetLayoutSupport
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: basetype VkBool32 supported. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 supported = 3;
}
message vkGetDescriptorSetLayoutSupport
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkDescriptorSetLayoutCreateInfo pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDescriptorSetLayoutCreateInfo pCreateInfo = 2;
    // Original field: struct VkDescriptorSetLayoutSupport pSupport. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDescriptorSetLayoutSupport pSupport = 3;
}
message VkPhysicalDeviceShaderDrawParameterFeatures
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: basetype VkBool32 shaderDrawParameters. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderDrawParameters = 3;
}
message vkDestroySurfaceKHR
{
    // Original field: handle VkInstance instance. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 instance = 1;
    // Original field: handle VkSurfaceKHR surface. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 surface = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
}
message vkGetPhysicalDeviceSurfaceSupportKHR
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: None uint32_t queueFamilyIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 queueFamilyIndex = 2;
    // Original field: handle VkSurfaceKHR surface. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 surface = 3;
    // Original field: basetype VkBool32 pSupported. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pSupported = 4;
}
message VkSurfaceCapabilitiesKHR
{
    // Original field: None uint32_t minImageCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 minImageCount = 1;
    // Original field: None uint32_t maxImageCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxImageCount = 2;
    // Original field: struct VkExtent2D currentExtent. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtent2D currentExtent = 3;
    // Original field: struct VkExtent2D minImageExtent. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtent2D minImageExtent = 4;
    // Original field: struct VkExtent2D maxImageExtent. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtent2D maxImageExtent = 5;
    // Original field: None uint32_t maxImageArrayLayers. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxImageArrayLayers = 6;
    // Original field: bitmask VkSurfaceTransformFlagsKHR supportedTransforms. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 supportedTransforms = 7;
    // Original field: enum VkSurfaceTransformFlagBitsKHR currentTransform. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 currentTransform = 8;
    // Original field: bitmask VkCompositeAlphaFlagsKHR supportedCompositeAlpha. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 supportedCompositeAlpha = 9;
    // Original field: bitmask VkImageUsageFlags supportedUsageFlags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 supportedUsageFlags = 10;
}
message vkGetPhysicalDeviceSurfaceCapabilitiesKHR
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: handle VkSurfaceKHR surface. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 surface = 2;
    // Original field: struct VkSurfaceCapabilitiesKHR pSurfaceCapabilities. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkSurfaceCapabilitiesKHR pSurfaceCapabilities = 3;
}
message VkSurfaceFormatKHR
{
    // Original field: enum VkFormat format. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 format = 1;
    // Original field: enum VkColorSpaceKHR colorSpace. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 colorSpace = 2;
}
message vkGetPhysicalDeviceSurfaceFormatsKHR
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: handle VkSurfaceKHR surface. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 surface = 2;
    // Original field: None uint32_t pSurfaceFormatCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pSurfaceFormatCount = 3;
    // Original field: struct VkSurfaceFormatKHR pSurfaceFormats. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkSurfaceFormatKHR pSurfaceFormats = 4;
}
message vkGetPhysicalDeviceSurfacePresentModesKHR
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: handle VkSurfaceKHR surface. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 surface = 2;
    // Original field: None uint32_t pPresentModeCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pPresentModeCount = 3;
    // Original field: enum VkPresentModeKHR pPresentModes. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pPresentModes = 4;
}
message VkSwapchainCreateInfoKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkSwapchainCreateFlagsKHR flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: handle VkSurfaceKHR surface. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 surface = 4;
    // Original field: None uint32_t minImageCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 minImageCount = 5;
    // Original field: enum VkFormat imageFormat. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 imageFormat = 6;
    // Original field: enum VkColorSpaceKHR imageColorSpace. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 imageColorSpace = 7;
    // Original field: struct VkExtent2D imageExtent. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtent2D imageExtent = 8;
    // Original field: None uint32_t imageArrayLayers. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 imageArrayLayers = 9;
    // Original field: bitmask VkImageUsageFlags imageUsage. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 imageUsage = 10;
    // Original field: enum VkSharingMode imageSharingMode. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 imageSharingMode = 11;
    // Original field: None uint32_t queueFamilyIndexCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 queueFamilyIndexCount = 12;
    // Original field: None uint32_t pQueueFamilyIndices. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pQueueFamilyIndices = 13;
    // Original field: enum VkSurfaceTransformFlagBitsKHR preTransform. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 preTransform = 14;
    // Original field: enum VkCompositeAlphaFlagBitsKHR compositeAlpha. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 compositeAlpha = 15;
    // Original field: enum VkPresentModeKHR presentMode. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 presentMode = 16;
    // Original field: basetype VkBool32 clipped. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 clipped = 17;
    // Original field: handle VkSwapchainKHR oldSwapchain. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 oldSwapchain = 18;
}
message vkCreateSwapchainKHR
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkSwapchainCreateInfoKHR pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkSwapchainCreateInfoKHR pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkSwapchainKHR pSwapchain. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pSwapchain = 4;
}
message vkDestroySwapchainKHR
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkSwapchainKHR swapchain. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 swapchain = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
}
message vkGetSwapchainImagesKHR
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkSwapchainKHR swapchain. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 swapchain = 2;
    // Original field: None uint32_t pSwapchainImageCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pSwapchainImageCount = 3;
    // Original field: handle VkImage pSwapchainImages. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pSwapchainImages = 4;
}
message vkAcquireNextImageKHR
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkSwapchainKHR swapchain. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 swapchain = 2;
    // Original field: None uint64_t timeout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 timeout = 3;
    // Original field: handle VkSemaphore semaphore. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 semaphore = 4;
    // Original field: handle VkFence fence. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 fence = 5;
    // Original field: None uint32_t pImageIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pImageIndex = 6;
}
message VkPresentInfoKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t waitSemaphoreCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 waitSemaphoreCount = 3;
    // Original field: handle VkSemaphore pWaitSemaphores. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pWaitSemaphores = 4;
    // Original field: None uint32_t swapchainCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 swapchainCount = 5;
    // Original field: handle VkSwapchainKHR pSwapchains. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pSwapchains = 6;
    // Original field: None uint32_t pImageIndices. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pImageIndices = 7;
    // Original field: enum VkResult pResults. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pResults = 8;
}
message vkQueuePresentKHR
{
    // Original field: handle VkQueue queue. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 queue = 1;
    // Original field: struct VkPresentInfoKHR pPresentInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPresentInfoKHR pPresentInfo = 2;
}
message VkImageSwapchainCreateInfoKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: handle VkSwapchainKHR swapchain. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 swapchain = 3;
}
message VkBindImageMemorySwapchainInfoKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: handle VkSwapchainKHR swapchain. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 swapchain = 3;
    // Original field: None uint32_t imageIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 imageIndex = 4;
}
message VkAcquireNextImageInfoKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: handle VkSwapchainKHR swapchain. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 swapchain = 3;
    // Original field: None uint64_t timeout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 timeout = 4;
    // Original field: handle VkSemaphore semaphore. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 semaphore = 5;
    // Original field: handle VkFence fence. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 fence = 6;
    // Original field: None uint32_t deviceMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 deviceMask = 7;
}
message VkDeviceGroupPresentCapabilitiesKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t presentMask. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 presentMask = 3;
    // Original field: bitmask VkDeviceGroupPresentModeFlagsKHR modes. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 modes = 4;
}
message VkDeviceGroupPresentInfoKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t swapchainCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 swapchainCount = 3;
    // Original field: None uint32_t pDeviceMasks. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pDeviceMasks = 4;
    // Original field: enum VkDeviceGroupPresentModeFlagBitsKHR mode. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 mode = 5;
}
message VkDeviceGroupSwapchainCreateInfoKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkDeviceGroupPresentModeFlagsKHR modes. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 modes = 3;
}
message vkGetDeviceGroupPresentCapabilitiesKHR
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkDeviceGroupPresentCapabilitiesKHR pDeviceGroupPresentCapabilities. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDeviceGroupPresentCapabilitiesKHR pDeviceGroupPresentCapabilities = 2;
}
message vkGetDeviceGroupSurfacePresentModesKHR
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkSurfaceKHR surface. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 surface = 2;
    // Original field: bitmask VkDeviceGroupPresentModeFlagsKHR pModes. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pModes = 3;
}
message vkGetPhysicalDevicePresentRectanglesKHR
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: handle VkSurfaceKHR surface. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 surface = 2;
    // Original field: None uint32_t pRectCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pRectCount = 3;
    // Original field: struct VkRect2D pRects. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkRect2D pRects = 4;
}
message vkAcquireNextImage2KHR
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkAcquireNextImageInfoKHR pAcquireInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAcquireNextImageInfoKHR pAcquireInfo = 2;
    // Original field: None uint32_t pImageIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pImageIndex = 3;
}
message VkDisplayPropertiesKHR
{
    // Original field: handle VkDisplayKHR display. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 display = 1;
    // Original field: None char displayName. stringarray? 0 string? 1 hasLenInfo? 1
    optional string displayName = 2;
    // Original field: struct VkExtent2D physicalDimensions. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtent2D physicalDimensions = 3;
    // Original field: struct VkExtent2D physicalResolution. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtent2D physicalResolution = 4;
    // Original field: bitmask VkSurfaceTransformFlagsKHR supportedTransforms. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 supportedTransforms = 5;
    // Original field: basetype VkBool32 planeReorderPossible. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 planeReorderPossible = 6;
    // Original field: basetype VkBool32 persistentContent. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 persistentContent = 7;
}
message VkDisplayModeParametersKHR
{
    // Original field: struct VkExtent2D visibleRegion. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtent2D visibleRegion = 1;
    // Original field: None uint32_t refreshRate. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 refreshRate = 2;
}
message VkDisplayModePropertiesKHR
{
    // Original field: handle VkDisplayModeKHR displayMode. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 displayMode = 1;
    // Original field: struct VkDisplayModeParametersKHR parameters. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDisplayModeParametersKHR parameters = 2;
}
message VkDisplayModeCreateInfoKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkDisplayModeCreateFlagsKHR flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: struct VkDisplayModeParametersKHR parameters. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDisplayModeParametersKHR parameters = 4;
}
message VkDisplayPlaneCapabilitiesKHR
{
    // Original field: bitmask VkDisplayPlaneAlphaFlagsKHR supportedAlpha. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 supportedAlpha = 1;
    // Original field: struct VkOffset2D minSrcPosition. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkOffset2D minSrcPosition = 2;
    // Original field: struct VkOffset2D maxSrcPosition. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkOffset2D maxSrcPosition = 3;
    // Original field: struct VkExtent2D minSrcExtent. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtent2D minSrcExtent = 4;
    // Original field: struct VkExtent2D maxSrcExtent. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtent2D maxSrcExtent = 5;
    // Original field: struct VkOffset2D minDstPosition. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkOffset2D minDstPosition = 6;
    // Original field: struct VkOffset2D maxDstPosition. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkOffset2D maxDstPosition = 7;
    // Original field: struct VkExtent2D minDstExtent. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtent2D minDstExtent = 8;
    // Original field: struct VkExtent2D maxDstExtent. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtent2D maxDstExtent = 9;
}
message VkDisplayPlanePropertiesKHR
{
    // Original field: handle VkDisplayKHR currentDisplay. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 currentDisplay = 1;
    // Original field: None uint32_t currentStackIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 currentStackIndex = 2;
}
message VkDisplaySurfaceCreateInfoKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkDisplaySurfaceCreateFlagsKHR flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: handle VkDisplayModeKHR displayMode. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 displayMode = 4;
    // Original field: None uint32_t planeIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 planeIndex = 5;
    // Original field: None uint32_t planeStackIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 planeStackIndex = 6;
    // Original field: enum VkSurfaceTransformFlagBitsKHR transform. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 transform = 7;
    // Original field: None float globalAlpha. stringarray? 0 string? 0 hasLenInfo? 0
    optional float globalAlpha = 8;
    // Original field: enum VkDisplayPlaneAlphaFlagBitsKHR alphaMode. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 alphaMode = 9;
    // Original field: struct VkExtent2D imageExtent. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtent2D imageExtent = 10;
}
message vkGetPhysicalDeviceDisplayPropertiesKHR
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: None uint32_t pPropertyCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pPropertyCount = 2;
    // Original field: struct VkDisplayPropertiesKHR pProperties. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkDisplayPropertiesKHR pProperties = 3;
}
message vkGetPhysicalDeviceDisplayPlanePropertiesKHR
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: None uint32_t pPropertyCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pPropertyCount = 2;
    // Original field: struct VkDisplayPlanePropertiesKHR pProperties. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkDisplayPlanePropertiesKHR pProperties = 3;
}
message vkGetDisplayPlaneSupportedDisplaysKHR
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: None uint32_t planeIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 planeIndex = 2;
    // Original field: None uint32_t pDisplayCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pDisplayCount = 3;
    // Original field: handle VkDisplayKHR pDisplays. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pDisplays = 4;
}
message vkGetDisplayModePropertiesKHR
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: handle VkDisplayKHR display. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 display = 2;
    // Original field: None uint32_t pPropertyCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pPropertyCount = 3;
    // Original field: struct VkDisplayModePropertiesKHR pProperties. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkDisplayModePropertiesKHR pProperties = 4;
}
message vkCreateDisplayModeKHR
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: handle VkDisplayKHR display. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 display = 2;
    // Original field: struct VkDisplayModeCreateInfoKHR pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDisplayModeCreateInfoKHR pCreateInfo = 3;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 4;
    // Original field: handle VkDisplayModeKHR pMode. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pMode = 5;
}
message vkGetDisplayPlaneCapabilitiesKHR
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: handle VkDisplayModeKHR mode. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 mode = 2;
    // Original field: None uint32_t planeIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 planeIndex = 3;
    // Original field: struct VkDisplayPlaneCapabilitiesKHR pCapabilities. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDisplayPlaneCapabilitiesKHR pCapabilities = 4;
}
message vkCreateDisplayPlaneSurfaceKHR
{
    // Original field: handle VkInstance instance. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 instance = 1;
    // Original field: struct VkDisplaySurfaceCreateInfoKHR pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDisplaySurfaceCreateInfoKHR pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkSurfaceKHR pSurface. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pSurface = 4;
}
message VkDisplayPresentInfoKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: struct VkRect2D srcRect. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkRect2D srcRect = 3;
    // Original field: struct VkRect2D dstRect. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkRect2D dstRect = 4;
    // Original field: basetype VkBool32 persistent. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 persistent = 5;
}
message vkCreateSharedSwapchainsKHR
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: None uint32_t swapchainCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 swapchainCount = 2;
    // Original field: struct VkSwapchainCreateInfoKHR pCreateInfos. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkSwapchainCreateInfoKHR pCreateInfos = 3;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 4;
    // Original field: handle VkSwapchainKHR pSwapchains. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pSwapchains = 5;
}
message VkXlibSurfaceCreateInfoKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkXlibSurfaceCreateFlagsKHR flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: None Display dpy. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 dpy = 4;
    // Original field: None Window window. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 window = 5;
}
message vkCreateXlibSurfaceKHR
{
    // Original field: handle VkInstance instance. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 instance = 1;
    // Original field: struct VkXlibSurfaceCreateInfoKHR pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkXlibSurfaceCreateInfoKHR pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkSurfaceKHR pSurface. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pSurface = 4;
}
message vkGetPhysicalDeviceXlibPresentationSupportKHR
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: None uint32_t queueFamilyIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 queueFamilyIndex = 2;
    // Original field: None Display dpy. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 dpy = 3;
    // Original field: None VisualID visualID. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 visualID = 4;
}
message VkXcbSurfaceCreateInfoKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkXcbSurfaceCreateFlagsKHR flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: None xcb_connection_t connection. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 connection = 4;
    // Original field: None xcb_window_t window. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 window = 5;
}
message vkCreateXcbSurfaceKHR
{
    // Original field: handle VkInstance instance. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 instance = 1;
    // Original field: struct VkXcbSurfaceCreateInfoKHR pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkXcbSurfaceCreateInfoKHR pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkSurfaceKHR pSurface. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pSurface = 4;
}
message vkGetPhysicalDeviceXcbPresentationSupportKHR
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: None uint32_t queueFamilyIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 queueFamilyIndex = 2;
    // Original field: None xcb_connection_t connection. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 connection = 3;
    // Original field: None xcb_visualid_t visual_id. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 visual_id = 4;
}
message VkWaylandSurfaceCreateInfoKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkWaylandSurfaceCreateFlagsKHR flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: None wl_display display. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 display = 4;
    // Original field: None wl_surface surface. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 surface = 5;
}
message vkCreateWaylandSurfaceKHR
{
    // Original field: handle VkInstance instance. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 instance = 1;
    // Original field: struct VkWaylandSurfaceCreateInfoKHR pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkWaylandSurfaceCreateInfoKHR pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkSurfaceKHR pSurface. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pSurface = 4;
}
message vkGetPhysicalDeviceWaylandPresentationSupportKHR
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: None uint32_t queueFamilyIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 queueFamilyIndex = 2;
    // Original field: None wl_display display. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 display = 3;
}
message VkMirSurfaceCreateInfoKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkMirSurfaceCreateFlagsKHR flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: None MirConnection connection. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 connection = 4;
    // Original field: None MirSurface mirSurface. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 mirSurface = 5;
}
message vkCreateMirSurfaceKHR
{
    // Original field: handle VkInstance instance. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 instance = 1;
    // Original field: struct VkMirSurfaceCreateInfoKHR pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkMirSurfaceCreateInfoKHR pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkSurfaceKHR pSurface. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pSurface = 4;
}
message vkGetPhysicalDeviceMirPresentationSupportKHR
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: None uint32_t queueFamilyIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 queueFamilyIndex = 2;
    // Original field: None MirConnection connection. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 connection = 3;
}
message VkAndroidSurfaceCreateInfoKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkAndroidSurfaceCreateFlagsKHR flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: define ANativeWindow window. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 window = 4;
}
message vkCreateAndroidSurfaceKHR
{
    // Original field: handle VkInstance instance. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 instance = 1;
    // Original field: struct VkAndroidSurfaceCreateInfoKHR pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAndroidSurfaceCreateInfoKHR pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkSurfaceKHR pSurface. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pSurface = 4;
}
message VkWin32SurfaceCreateInfoKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkWin32SurfaceCreateFlagsKHR flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: None HINSTANCE hinstance. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 hinstance = 4;
    // Original field: None HWND hwnd. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 hwnd = 5;
}
message vkCreateWin32SurfaceKHR
{
    // Original field: handle VkInstance instance. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 instance = 1;
    // Original field: struct VkWin32SurfaceCreateInfoKHR pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkWin32SurfaceCreateInfoKHR pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkSurfaceKHR pSurface. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pSurface = 4;
}
message vkGetPhysicalDeviceWin32PresentationSupportKHR
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: None uint32_t queueFamilyIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 queueFamilyIndex = 2;
}
message vkGetPhysicalDeviceFeatures2KHR
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: struct VkPhysicalDeviceFeatures2 pFeatures. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPhysicalDeviceFeatures2 pFeatures = 2;
}
message vkGetPhysicalDeviceProperties2KHR
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: struct VkPhysicalDeviceProperties2 pProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPhysicalDeviceProperties2 pProperties = 2;
}
message vkGetPhysicalDeviceFormatProperties2KHR
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: enum VkFormat format. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 format = 2;
    // Original field: struct VkFormatProperties2 pFormatProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkFormatProperties2 pFormatProperties = 3;
}
message vkGetPhysicalDeviceImageFormatProperties2KHR
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: struct VkPhysicalDeviceImageFormatInfo2 pImageFormatInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPhysicalDeviceImageFormatInfo2 pImageFormatInfo = 2;
    // Original field: struct VkImageFormatProperties2 pImageFormatProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkImageFormatProperties2 pImageFormatProperties = 3;
}
message vkGetPhysicalDeviceQueueFamilyProperties2KHR
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: None uint32_t pQueueFamilyPropertyCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pQueueFamilyPropertyCount = 2;
    // Original field: struct VkQueueFamilyProperties2 pQueueFamilyProperties. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkQueueFamilyProperties2 pQueueFamilyProperties = 3;
}
message vkGetPhysicalDeviceMemoryProperties2KHR
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: struct VkPhysicalDeviceMemoryProperties2 pMemoryProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPhysicalDeviceMemoryProperties2 pMemoryProperties = 2;
}
message vkGetPhysicalDeviceSparseImageFormatProperties2KHR
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: struct VkPhysicalDeviceSparseImageFormatInfo2 pFormatInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPhysicalDeviceSparseImageFormatInfo2 pFormatInfo = 2;
    // Original field: None uint32_t pPropertyCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pPropertyCount = 3;
    // Original field: struct VkSparseImageFormatProperties2 pProperties. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkSparseImageFormatProperties2 pProperties = 4;
}
message vkGetDeviceGroupPeerMemoryFeaturesKHR
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: None uint32_t heapIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 heapIndex = 2;
    // Original field: None uint32_t localDeviceIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 localDeviceIndex = 3;
    // Original field: None uint32_t remoteDeviceIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 remoteDeviceIndex = 4;
    // Original field: bitmask VkPeerMemoryFeatureFlags pPeerMemoryFeatures. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pPeerMemoryFeatures = 5;
}
message vkCmdSetDeviceMaskKHR
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: None uint32_t deviceMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 deviceMask = 2;
}
message vkCmdDispatchBaseKHR
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: None uint32_t baseGroupX. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 baseGroupX = 2;
    // Original field: None uint32_t baseGroupY. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 baseGroupY = 3;
    // Original field: None uint32_t baseGroupZ. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 baseGroupZ = 4;
    // Original field: None uint32_t groupCountX. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 groupCountX = 5;
    // Original field: None uint32_t groupCountY. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 groupCountY = 6;
    // Original field: None uint32_t groupCountZ. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 groupCountZ = 7;
}
message vkTrimCommandPoolKHR
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkCommandPool commandPool. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandPool = 2;
    // Original field: bitmask VkCommandPoolTrimFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
}
message vkEnumeratePhysicalDeviceGroupsKHR
{
    // Original field: handle VkInstance instance. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 instance = 1;
    // Original field: None uint32_t pPhysicalDeviceGroupCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pPhysicalDeviceGroupCount = 2;
    // Original field: struct VkPhysicalDeviceGroupProperties pPhysicalDeviceGroupProperties. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkPhysicalDeviceGroupProperties pPhysicalDeviceGroupProperties = 3;
}
message vkGetPhysicalDeviceExternalBufferPropertiesKHR
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: struct VkPhysicalDeviceExternalBufferInfo pExternalBufferInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPhysicalDeviceExternalBufferInfo pExternalBufferInfo = 2;
    // Original field: struct VkExternalBufferProperties pExternalBufferProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExternalBufferProperties pExternalBufferProperties = 3;
}
message VkImportMemoryWin32HandleInfoKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: enum VkExternalMemoryHandleTypeFlagBits handleType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 handleType = 3;
    // Original field: None HANDLE handle. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 handle = 4;
    // Original field: None LPCWSTR name. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 name = 5;
}
message VkExportMemoryWin32HandleInfoKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None SECURITY_ATTRIBUTES pAttributes. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pAttributes = 3;
    // Original field: None DWORD dwAccess. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 dwAccess = 4;
    // Original field: None LPCWSTR name. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 name = 5;
}
message VkMemoryWin32HandlePropertiesKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t memoryTypeBits. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 memoryTypeBits = 3;
}
message VkMemoryGetWin32HandleInfoKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: handle VkDeviceMemory memory. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 memory = 3;
    // Original field: enum VkExternalMemoryHandleTypeFlagBits handleType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 handleType = 4;
}
message vkGetMemoryWin32HandleKHR
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkMemoryGetWin32HandleInfoKHR pGetWin32HandleInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkMemoryGetWin32HandleInfoKHR pGetWin32HandleInfo = 2;
    // Original field: None HANDLE pHandle. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pHandle = 3;
}
message vkGetMemoryWin32HandlePropertiesKHR
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: enum VkExternalMemoryHandleTypeFlagBits handleType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 handleType = 2;
    // Original field: None HANDLE handle. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 handle = 3;
    // Original field: struct VkMemoryWin32HandlePropertiesKHR pMemoryWin32HandleProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkMemoryWin32HandlePropertiesKHR pMemoryWin32HandleProperties = 4;
}
message VkImportMemoryFdInfoKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: enum VkExternalMemoryHandleTypeFlagBits handleType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 handleType = 3;
    // Original field: None int fd. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 fd = 4;
}
message VkMemoryFdPropertiesKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t memoryTypeBits. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 memoryTypeBits = 3;
}
message VkMemoryGetFdInfoKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: handle VkDeviceMemory memory. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 memory = 3;
    // Original field: enum VkExternalMemoryHandleTypeFlagBits handleType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 handleType = 4;
}
message vkGetMemoryFdKHR
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkMemoryGetFdInfoKHR pGetFdInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkMemoryGetFdInfoKHR pGetFdInfo = 2;
    // Original field: None int pFd. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pFd = 3;
}
message vkGetMemoryFdPropertiesKHR
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: enum VkExternalMemoryHandleTypeFlagBits handleType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 handleType = 2;
    // Original field: None int fd. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 fd = 3;
    // Original field: struct VkMemoryFdPropertiesKHR pMemoryFdProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkMemoryFdPropertiesKHR pMemoryFdProperties = 4;
}
message VkWin32KeyedMutexAcquireReleaseInfoKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t acquireCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 acquireCount = 3;
    // Original field: handle VkDeviceMemory pAcquireSyncs. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pAcquireSyncs = 4;
    // Original field: None uint64_t pAcquireKeys. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pAcquireKeys = 5;
    // Original field: None uint32_t pAcquireTimeouts. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pAcquireTimeouts = 6;
    // Original field: None uint32_t releaseCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 releaseCount = 7;
    // Original field: handle VkDeviceMemory pReleaseSyncs. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pReleaseSyncs = 8;
    // Original field: None uint64_t pReleaseKeys. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pReleaseKeys = 9;
}
message vkGetPhysicalDeviceExternalSemaphorePropertiesKHR
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: struct VkPhysicalDeviceExternalSemaphoreInfo pExternalSemaphoreInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPhysicalDeviceExternalSemaphoreInfo pExternalSemaphoreInfo = 2;
    // Original field: struct VkExternalSemaphoreProperties pExternalSemaphoreProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExternalSemaphoreProperties pExternalSemaphoreProperties = 3;
}
message VkImportSemaphoreWin32HandleInfoKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: handle VkSemaphore semaphore. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 semaphore = 3;
    // Original field: bitmask VkSemaphoreImportFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 4;
    // Original field: enum VkExternalSemaphoreHandleTypeFlagBits handleType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 handleType = 5;
    // Original field: None HANDLE handle. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 handle = 6;
    // Original field: None LPCWSTR name. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 name = 7;
}
message VkExportSemaphoreWin32HandleInfoKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None SECURITY_ATTRIBUTES pAttributes. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pAttributes = 3;
    // Original field: None DWORD dwAccess. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 dwAccess = 4;
    // Original field: None LPCWSTR name. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 name = 5;
}
message VkD3D12FenceSubmitInfoKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t waitSemaphoreValuesCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 waitSemaphoreValuesCount = 3;
    // Original field: None uint64_t pWaitSemaphoreValues. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pWaitSemaphoreValues = 4;
    // Original field: None uint32_t signalSemaphoreValuesCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 signalSemaphoreValuesCount = 5;
    // Original field: None uint64_t pSignalSemaphoreValues. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pSignalSemaphoreValues = 6;
}
message VkSemaphoreGetWin32HandleInfoKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: handle VkSemaphore semaphore. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 semaphore = 3;
    // Original field: enum VkExternalSemaphoreHandleTypeFlagBits handleType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 handleType = 4;
}
message vkImportSemaphoreWin32HandleKHR
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkImportSemaphoreWin32HandleInfoKHR pImportSemaphoreWin32HandleInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkImportSemaphoreWin32HandleInfoKHR pImportSemaphoreWin32HandleInfo = 2;
}
message vkGetSemaphoreWin32HandleKHR
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkSemaphoreGetWin32HandleInfoKHR pGetWin32HandleInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkSemaphoreGetWin32HandleInfoKHR pGetWin32HandleInfo = 2;
    // Original field: None HANDLE pHandle. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pHandle = 3;
}
message VkImportSemaphoreFdInfoKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: handle VkSemaphore semaphore. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 semaphore = 3;
    // Original field: bitmask VkSemaphoreImportFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 4;
    // Original field: enum VkExternalSemaphoreHandleTypeFlagBits handleType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 handleType = 5;
    // Original field: None int fd. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 fd = 6;
}
message VkSemaphoreGetFdInfoKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: handle VkSemaphore semaphore. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 semaphore = 3;
    // Original field: enum VkExternalSemaphoreHandleTypeFlagBits handleType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 handleType = 4;
}
message vkImportSemaphoreFdKHR
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkImportSemaphoreFdInfoKHR pImportSemaphoreFdInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkImportSemaphoreFdInfoKHR pImportSemaphoreFdInfo = 2;
}
message vkGetSemaphoreFdKHR
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkSemaphoreGetFdInfoKHR pGetFdInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkSemaphoreGetFdInfoKHR pGetFdInfo = 2;
    // Original field: None int pFd. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pFd = 3;
}
message VkPhysicalDevicePushDescriptorPropertiesKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t maxPushDescriptors. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxPushDescriptors = 3;
}
message vkCmdPushDescriptorSetKHR
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: enum VkPipelineBindPoint pipelineBindPoint. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pipelineBindPoint = 2;
    // Original field: handle VkPipelineLayout layout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 layout = 3;
    // Original field: None uint32_t set. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 set = 4;
    // Original field: None uint32_t descriptorWriteCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 descriptorWriteCount = 5;
    // Original field: struct VkWriteDescriptorSet pDescriptorWrites. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkWriteDescriptorSet pDescriptorWrites = 6;
}
message vkCmdPushDescriptorSetWithTemplateKHR
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: handle VkDescriptorUpdateTemplate descriptorUpdateTemplate. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 descriptorUpdateTemplate = 2;
    // Original field: handle VkPipelineLayout layout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 layout = 3;
    // Original field: None uint32_t set. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 set = 4;
    // Original field: None void pData. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pData = 5;
}
message VkRectLayerKHR
{
    // Original field: struct VkOffset2D offset. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkOffset2D offset = 1;
    // Original field: struct VkExtent2D extent. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtent2D extent = 2;
    // Original field: None uint32_t layer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 layer = 3;
}
message VkPresentRegionKHR
{
    // Original field: None uint32_t rectangleCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 rectangleCount = 1;
    // Original field: struct VkRectLayerKHR pRectangles. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkRectLayerKHR pRectangles = 2;
}
message VkPresentRegionsKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t swapchainCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 swapchainCount = 3;
    // Original field: struct VkPresentRegionKHR pRegions. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkPresentRegionKHR pRegions = 4;
}
message vkCreateDescriptorUpdateTemplateKHR
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkDescriptorUpdateTemplateCreateInfo pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDescriptorUpdateTemplateCreateInfo pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkDescriptorUpdateTemplate pDescriptorUpdateTemplate. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pDescriptorUpdateTemplate = 4;
}
message vkDestroyDescriptorUpdateTemplateKHR
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkDescriptorUpdateTemplate descriptorUpdateTemplate. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 descriptorUpdateTemplate = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
}
message vkUpdateDescriptorSetWithTemplateKHR
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkDescriptorSet descriptorSet. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 descriptorSet = 2;
    // Original field: handle VkDescriptorUpdateTemplate descriptorUpdateTemplate. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 descriptorUpdateTemplate = 3;
    // Original field: None void pData. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pData = 4;
}
message VkAttachmentDescription2KHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkAttachmentDescriptionFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: enum VkFormat format. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 format = 4;
    // Original field: enum VkSampleCountFlagBits samples. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 samples = 5;
    // Original field: enum VkAttachmentLoadOp loadOp. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 loadOp = 6;
    // Original field: enum VkAttachmentStoreOp storeOp. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 storeOp = 7;
    // Original field: enum VkAttachmentLoadOp stencilLoadOp. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 stencilLoadOp = 8;
    // Original field: enum VkAttachmentStoreOp stencilStoreOp. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 stencilStoreOp = 9;
    // Original field: enum VkImageLayout initialLayout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 initialLayout = 10;
    // Original field: enum VkImageLayout finalLayout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 finalLayout = 11;
}
message VkAttachmentReference2KHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t attachment. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 attachment = 3;
    // Original field: enum VkImageLayout layout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 layout = 4;
    // Original field: bitmask VkImageAspectFlags aspectMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 aspectMask = 5;
}
message VkSubpassDescription2KHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkSubpassDescriptionFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: enum VkPipelineBindPoint pipelineBindPoint. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pipelineBindPoint = 4;
    // Original field: None uint32_t viewMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 viewMask = 5;
    // Original field: None uint32_t inputAttachmentCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 inputAttachmentCount = 6;
    // Original field: struct VkAttachmentReference2KHR pInputAttachments. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkAttachmentReference2KHR pInputAttachments = 7;
    // Original field: None uint32_t colorAttachmentCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 colorAttachmentCount = 8;
    // Original field: struct VkAttachmentReference2KHR pColorAttachments. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkAttachmentReference2KHR pColorAttachments = 9;
    // Original field: struct VkAttachmentReference2KHR pResolveAttachments. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkAttachmentReference2KHR pResolveAttachments = 10;
    // Original field: struct VkAttachmentReference2KHR pDepthStencilAttachment. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAttachmentReference2KHR pDepthStencilAttachment = 11;
    // Original field: None uint32_t preserveAttachmentCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 preserveAttachmentCount = 12;
    // Original field: None uint32_t pPreserveAttachments. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pPreserveAttachments = 13;
}
message VkSubpassDependency2KHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t srcSubpass. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 srcSubpass = 3;
    // Original field: None uint32_t dstSubpass. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dstSubpass = 4;
    // Original field: bitmask VkPipelineStageFlags srcStageMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 srcStageMask = 5;
    // Original field: bitmask VkPipelineStageFlags dstStageMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dstStageMask = 6;
    // Original field: bitmask VkAccessFlags srcAccessMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 srcAccessMask = 7;
    // Original field: bitmask VkAccessFlags dstAccessMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dstAccessMask = 8;
    // Original field: bitmask VkDependencyFlags dependencyFlags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dependencyFlags = 9;
    // Original field: None int32_t viewOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional int32 viewOffset = 10;
}
message VkRenderPassCreateInfo2KHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkRenderPassCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: None uint32_t attachmentCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 attachmentCount = 4;
    // Original field: struct VkAttachmentDescription2KHR pAttachments. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkAttachmentDescription2KHR pAttachments = 5;
    // Original field: None uint32_t subpassCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 subpassCount = 6;
    // Original field: struct VkSubpassDescription2KHR pSubpasses. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkSubpassDescription2KHR pSubpasses = 7;
    // Original field: None uint32_t dependencyCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dependencyCount = 8;
    // Original field: struct VkSubpassDependency2KHR pDependencies. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkSubpassDependency2KHR pDependencies = 9;
    // Original field: None uint32_t correlatedViewMaskCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 correlatedViewMaskCount = 10;
    // Original field: None uint32_t pCorrelatedViewMasks. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pCorrelatedViewMasks = 11;
}
message vkCreateRenderPass2KHR
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkRenderPassCreateInfo2KHR pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkRenderPassCreateInfo2KHR pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkRenderPass pRenderPass. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pRenderPass = 4;
}
message VkSubpassBeginInfoKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: enum VkSubpassContents contents. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 contents = 3;
}
message vkCmdBeginRenderPass2KHR
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: struct VkRenderPassBeginInfo pRenderPassBegin. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkRenderPassBeginInfo pRenderPassBegin = 2;
    // Original field: struct VkSubpassBeginInfoKHR pSubpassBeginInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkSubpassBeginInfoKHR pSubpassBeginInfo = 3;
}
message VkSubpassEndInfoKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
}
message vkCmdNextSubpass2KHR
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: struct VkSubpassBeginInfoKHR pSubpassBeginInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkSubpassBeginInfoKHR pSubpassBeginInfo = 2;
    // Original field: struct VkSubpassEndInfoKHR pSubpassEndInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkSubpassEndInfoKHR pSubpassEndInfo = 3;
}
message vkCmdEndRenderPass2KHR
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: struct VkSubpassEndInfoKHR pSubpassEndInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkSubpassEndInfoKHR pSubpassEndInfo = 2;
}
message VkSharedPresentSurfaceCapabilitiesKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkImageUsageFlags sharedPresentSupportedUsageFlags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sharedPresentSupportedUsageFlags = 3;
}
message vkGetSwapchainStatusKHR
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkSwapchainKHR swapchain. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 swapchain = 2;
}
message vkGetPhysicalDeviceExternalFencePropertiesKHR
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: struct VkPhysicalDeviceExternalFenceInfo pExternalFenceInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPhysicalDeviceExternalFenceInfo pExternalFenceInfo = 2;
    // Original field: struct VkExternalFenceProperties pExternalFenceProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExternalFenceProperties pExternalFenceProperties = 3;
}
message VkImportFenceWin32HandleInfoKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: handle VkFence fence. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 fence = 3;
    // Original field: bitmask VkFenceImportFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 4;
    // Original field: enum VkExternalFenceHandleTypeFlagBits handleType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 handleType = 5;
    // Original field: None HANDLE handle. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 handle = 6;
    // Original field: None LPCWSTR name. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 name = 7;
}
message VkExportFenceWin32HandleInfoKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None SECURITY_ATTRIBUTES pAttributes. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pAttributes = 3;
    // Original field: None DWORD dwAccess. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 dwAccess = 4;
    // Original field: None LPCWSTR name. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 name = 5;
}
message VkFenceGetWin32HandleInfoKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: handle VkFence fence. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 fence = 3;
    // Original field: enum VkExternalFenceHandleTypeFlagBits handleType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 handleType = 4;
}
message vkImportFenceWin32HandleKHR
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkImportFenceWin32HandleInfoKHR pImportFenceWin32HandleInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkImportFenceWin32HandleInfoKHR pImportFenceWin32HandleInfo = 2;
}
message vkGetFenceWin32HandleKHR
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkFenceGetWin32HandleInfoKHR pGetWin32HandleInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkFenceGetWin32HandleInfoKHR pGetWin32HandleInfo = 2;
    // Original field: None HANDLE pHandle. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pHandle = 3;
}
message VkImportFenceFdInfoKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: handle VkFence fence. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 fence = 3;
    // Original field: bitmask VkFenceImportFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 4;
    // Original field: enum VkExternalFenceHandleTypeFlagBits handleType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 handleType = 5;
    // Original field: None int fd. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 fd = 6;
}
message VkFenceGetFdInfoKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: handle VkFence fence. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 fence = 3;
    // Original field: enum VkExternalFenceHandleTypeFlagBits handleType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 handleType = 4;
}
message vkImportFenceFdKHR
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkImportFenceFdInfoKHR pImportFenceFdInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkImportFenceFdInfoKHR pImportFenceFdInfo = 2;
}
message vkGetFenceFdKHR
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkFenceGetFdInfoKHR pGetFdInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkFenceGetFdInfoKHR pGetFdInfo = 2;
    // Original field: None int pFd. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pFd = 3;
}
message VkPhysicalDeviceSurfaceInfo2KHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: handle VkSurfaceKHR surface. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 surface = 3;
}
message VkSurfaceCapabilities2KHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: struct VkSurfaceCapabilitiesKHR surfaceCapabilities. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkSurfaceCapabilitiesKHR surfaceCapabilities = 3;
}
message VkSurfaceFormat2KHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: struct VkSurfaceFormatKHR surfaceFormat. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkSurfaceFormatKHR surfaceFormat = 3;
}
message vkGetPhysicalDeviceSurfaceCapabilities2KHR
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: struct VkPhysicalDeviceSurfaceInfo2KHR pSurfaceInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPhysicalDeviceSurfaceInfo2KHR pSurfaceInfo = 2;
    // Original field: struct VkSurfaceCapabilities2KHR pSurfaceCapabilities. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkSurfaceCapabilities2KHR pSurfaceCapabilities = 3;
}
message vkGetPhysicalDeviceSurfaceFormats2KHR
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: struct VkPhysicalDeviceSurfaceInfo2KHR pSurfaceInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkPhysicalDeviceSurfaceInfo2KHR pSurfaceInfo = 2;
    // Original field: None uint32_t pSurfaceFormatCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pSurfaceFormatCount = 3;
    // Original field: struct VkSurfaceFormat2KHR pSurfaceFormats. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkSurfaceFormat2KHR pSurfaceFormats = 4;
}
message VkDisplayProperties2KHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: struct VkDisplayPropertiesKHR displayProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDisplayPropertiesKHR displayProperties = 3;
}
message VkDisplayPlaneProperties2KHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: struct VkDisplayPlanePropertiesKHR displayPlaneProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDisplayPlanePropertiesKHR displayPlaneProperties = 3;
}
message VkDisplayModeProperties2KHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: struct VkDisplayModePropertiesKHR displayModeProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDisplayModePropertiesKHR displayModeProperties = 3;
}
message VkDisplayPlaneInfo2KHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: handle VkDisplayModeKHR mode. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 mode = 3;
    // Original field: None uint32_t planeIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 planeIndex = 4;
}
message VkDisplayPlaneCapabilities2KHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: struct VkDisplayPlaneCapabilitiesKHR capabilities. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDisplayPlaneCapabilitiesKHR capabilities = 3;
}
message vkGetPhysicalDeviceDisplayProperties2KHR
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: None uint32_t pPropertyCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pPropertyCount = 2;
    // Original field: struct VkDisplayProperties2KHR pProperties. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkDisplayProperties2KHR pProperties = 3;
}
message vkGetPhysicalDeviceDisplayPlaneProperties2KHR
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: None uint32_t pPropertyCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pPropertyCount = 2;
    // Original field: struct VkDisplayPlaneProperties2KHR pProperties. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkDisplayPlaneProperties2KHR pProperties = 3;
}
message vkGetDisplayModeProperties2KHR
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: handle VkDisplayKHR display. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 display = 2;
    // Original field: None uint32_t pPropertyCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pPropertyCount = 3;
    // Original field: struct VkDisplayModeProperties2KHR pProperties. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkDisplayModeProperties2KHR pProperties = 4;
}
message vkGetDisplayPlaneCapabilities2KHR
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: struct VkDisplayPlaneInfo2KHR pDisplayPlaneInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDisplayPlaneInfo2KHR pDisplayPlaneInfo = 2;
    // Original field: struct VkDisplayPlaneCapabilities2KHR pCapabilities. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDisplayPlaneCapabilities2KHR pCapabilities = 3;
}
message vkGetImageMemoryRequirements2KHR
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkImageMemoryRequirementsInfo2 pInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkImageMemoryRequirementsInfo2 pInfo = 2;
    // Original field: struct VkMemoryRequirements2 pMemoryRequirements. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkMemoryRequirements2 pMemoryRequirements = 3;
}
message vkGetBufferMemoryRequirements2KHR
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkBufferMemoryRequirementsInfo2 pInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkBufferMemoryRequirementsInfo2 pInfo = 2;
    // Original field: struct VkMemoryRequirements2 pMemoryRequirements. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkMemoryRequirements2 pMemoryRequirements = 3;
}
message vkGetImageSparseMemoryRequirements2KHR
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkImageSparseMemoryRequirementsInfo2 pInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkImageSparseMemoryRequirementsInfo2 pInfo = 2;
    // Original field: None uint32_t pSparseMemoryRequirementCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pSparseMemoryRequirementCount = 3;
    // Original field: struct VkSparseImageMemoryRequirements2 pSparseMemoryRequirements. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkSparseImageMemoryRequirements2 pSparseMemoryRequirements = 4;
}
message VkImageFormatListCreateInfoKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t viewFormatCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 viewFormatCount = 3;
    // Original field: enum VkFormat pViewFormats. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pViewFormats = 4;
}
message vkCreateSamplerYcbcrConversionKHR
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkSamplerYcbcrConversionCreateInfo pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkSamplerYcbcrConversionCreateInfo pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkSamplerYcbcrConversion pYcbcrConversion. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pYcbcrConversion = 4;
}
message vkDestroySamplerYcbcrConversionKHR
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkSamplerYcbcrConversion ycbcrConversion. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 ycbcrConversion = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
}
message vkBindBufferMemory2KHR
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: None uint32_t bindInfoCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 bindInfoCount = 2;
    // Original field: struct VkBindBufferMemoryInfo pBindInfos. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkBindBufferMemoryInfo pBindInfos = 3;
}
message vkBindImageMemory2KHR
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: None uint32_t bindInfoCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 bindInfoCount = 2;
    // Original field: struct VkBindImageMemoryInfo pBindInfos. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkBindImageMemoryInfo pBindInfos = 3;
}
message vkGetDescriptorSetLayoutSupportKHR
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkDescriptorSetLayoutCreateInfo pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDescriptorSetLayoutCreateInfo pCreateInfo = 2;
    // Original field: struct VkDescriptorSetLayoutSupport pSupport. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDescriptorSetLayoutSupport pSupport = 3;
}
message vkCmdDrawIndirectCountKHR
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: handle VkBuffer buffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 buffer = 2;
    // Original field: basetype VkDeviceSize offset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 offset = 3;
    // Original field: handle VkBuffer countBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 countBuffer = 4;
    // Original field: basetype VkDeviceSize countBufferOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 countBufferOffset = 5;
    // Original field: None uint32_t maxDrawCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxDrawCount = 6;
    // Original field: None uint32_t stride. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 stride = 7;
}
message vkCmdDrawIndexedIndirectCountKHR
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: handle VkBuffer buffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 buffer = 2;
    // Original field: basetype VkDeviceSize offset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 offset = 3;
    // Original field: handle VkBuffer countBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 countBuffer = 4;
    // Original field: basetype VkDeviceSize countBufferOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 countBufferOffset = 5;
    // Original field: None uint32_t maxDrawCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxDrawCount = 6;
    // Original field: None uint32_t stride. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 stride = 7;
}
message VkPhysicalDevice8BitStorageFeaturesKHR
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: basetype VkBool32 storageBuffer8BitAccess. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 storageBuffer8BitAccess = 3;
    // Original field: basetype VkBool32 uniformAndStorageBuffer8BitAccess. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 uniformAndStorageBuffer8BitAccess = 4;
    // Original field: basetype VkBool32 storagePushConstant8. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 storagePushConstant8 = 5;
}
message VkNativeBufferANDROID
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t handle. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 handle = 3;
    // Original field: None int stride. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 stride = 4;
    // Original field: None int format. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 format = 5;
    // Original field: None int usage. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 usage = 6;
    // Original field: None uint64_t consumer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 consumer = 7;
    // Original field: None uint64_t producer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 producer = 8;
}
message vkGetSwapchainGrallocUsageANDROID
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: enum VkFormat format. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 format = 2;
    // Original field: bitmask VkImageUsageFlags imageUsage. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 imageUsage = 3;
    // Original field: None int grallocUsage. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 grallocUsage = 4;
}
message vkAcquireImageANDROID
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkImage image. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 image = 2;
    // Original field: None int nativeFenceFd. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 nativeFenceFd = 3;
    // Original field: handle VkSemaphore semaphore. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 semaphore = 4;
    // Original field: handle VkFence fence. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 fence = 5;
}
message vkQueueSignalReleaseImageANDROID
{
    // Original field: handle VkQueue queue. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 queue = 1;
    // Original field: None uint32_t waitSemaphoreCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 waitSemaphoreCount = 2;
    // Original field: handle VkSemaphore pWaitSemaphores. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pWaitSemaphores = 3;
    // Original field: handle VkImage image. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 image = 4;
    // Original field: None int pNativeFenceFd. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pNativeFenceFd = 5;
}
message VkDebugReportCallbackCreateInfoEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkDebugReportFlagsEXT flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: funcpointer PFN_vkDebugReportCallbackEXT pfnCallback. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pfnCallback = 4;
    // Original field: None void pUserData. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pUserData = 5;
}
message vkCreateDebugReportCallbackEXT
{
    // Original field: handle VkInstance instance. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 instance = 1;
    // Original field: struct VkDebugReportCallbackCreateInfoEXT pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDebugReportCallbackCreateInfoEXT pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkDebugReportCallbackEXT pCallback. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pCallback = 4;
}
message vkDestroyDebugReportCallbackEXT
{
    // Original field: handle VkInstance instance. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 instance = 1;
    // Original field: handle VkDebugReportCallbackEXT callback. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 callback = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
}
message vkDebugReportMessageEXT
{
    // Original field: handle VkInstance instance. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 instance = 1;
    // Original field: bitmask VkDebugReportFlagsEXT flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 2;
    // Original field: enum VkDebugReportObjectTypeEXT objectType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 objectType = 3;
    // Original field: None uint64_t object. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 object = 4;
    // Original field: None size_t location. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 location = 5;
    // Original field: None int32_t messageCode. stringarray? 0 string? 0 hasLenInfo? 0
    optional int32 messageCode = 6;
    // Original field: None char pLayerPrefix. stringarray? 0 string? 1 hasLenInfo? 1
    optional string pLayerPrefix = 7;
    // Original field: None char pMessage. stringarray? 0 string? 1 hasLenInfo? 1
    optional string pMessage = 8;
}
message VkPipelineRasterizationStateRasterizationOrderAMD
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: enum VkRasterizationOrderAMD rasterizationOrder. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 rasterizationOrder = 3;
}
message VkDebugMarkerObjectNameInfoEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: enum VkDebugReportObjectTypeEXT objectType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 objectType = 3;
    // Original field: None uint64_t object. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 object = 4;
    // Original field: None char pObjectName. stringarray? 0 string? 1 hasLenInfo? 1
    optional string pObjectName = 5;
}
message VkDebugMarkerObjectTagInfoEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: enum VkDebugReportObjectTypeEXT objectType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 objectType = 3;
    // Original field: None uint64_t object. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 object = 4;
    // Original field: None uint64_t tagName. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 tagName = 5;
    // Original field: None size_t tagSize. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 tagSize = 6;
    // Original field: None void pTag. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pTag = 7;
}
message VkDebugMarkerMarkerInfoEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None char pMarkerName. stringarray? 0 string? 1 hasLenInfo? 1
    optional string pMarkerName = 3;
    // Original field: None float color. stringarray? 0 string? 0 hasLenInfo? 1
    repeated float color = 4;
}
message vkDebugMarkerSetObjectTagEXT
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkDebugMarkerObjectTagInfoEXT pTagInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDebugMarkerObjectTagInfoEXT pTagInfo = 2;
}
message vkDebugMarkerSetObjectNameEXT
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkDebugMarkerObjectNameInfoEXT pNameInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDebugMarkerObjectNameInfoEXT pNameInfo = 2;
}
message vkCmdDebugMarkerBeginEXT
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: struct VkDebugMarkerMarkerInfoEXT pMarkerInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDebugMarkerMarkerInfoEXT pMarkerInfo = 2;
}
message vkCmdDebugMarkerEndEXT
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
}
message vkCmdDebugMarkerInsertEXT
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: struct VkDebugMarkerMarkerInfoEXT pMarkerInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDebugMarkerMarkerInfoEXT pMarkerInfo = 2;
}
message VkDedicatedAllocationImageCreateInfoNV
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: basetype VkBool32 dedicatedAllocation. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dedicatedAllocation = 3;
}
message VkDedicatedAllocationBufferCreateInfoNV
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: basetype VkBool32 dedicatedAllocation. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dedicatedAllocation = 3;
}
message VkDedicatedAllocationMemoryAllocateInfoNV
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: handle VkImage image. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 image = 3;
    // Original field: handle VkBuffer buffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 buffer = 4;
}
message vkCmdDrawIndirectCountAMD
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: handle VkBuffer buffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 buffer = 2;
    // Original field: basetype VkDeviceSize offset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 offset = 3;
    // Original field: handle VkBuffer countBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 countBuffer = 4;
    // Original field: basetype VkDeviceSize countBufferOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 countBufferOffset = 5;
    // Original field: None uint32_t maxDrawCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxDrawCount = 6;
    // Original field: None uint32_t stride. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 stride = 7;
}
message vkCmdDrawIndexedIndirectCountAMD
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: handle VkBuffer buffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 buffer = 2;
    // Original field: basetype VkDeviceSize offset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 offset = 3;
    // Original field: handle VkBuffer countBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 countBuffer = 4;
    // Original field: basetype VkDeviceSize countBufferOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 countBufferOffset = 5;
    // Original field: None uint32_t maxDrawCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxDrawCount = 6;
    // Original field: None uint32_t stride. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 stride = 7;
}
message VkTextureLODGatherFormatPropertiesAMD
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: basetype VkBool32 supportsTextureGatherLODBiasAMD. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 supportsTextureGatherLODBiasAMD = 3;
}
message VkShaderResourceUsageAMD
{
    // Original field: None uint32_t numUsedVgprs. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 numUsedVgprs = 1;
    // Original field: None uint32_t numUsedSgprs. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 numUsedSgprs = 2;
    // Original field: None uint32_t ldsSizePerLocalWorkGroup. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 ldsSizePerLocalWorkGroup = 3;
    // Original field: None size_t ldsUsageSizeInBytes. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 ldsUsageSizeInBytes = 4;
    // Original field: None size_t scratchMemUsageInBytes. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 scratchMemUsageInBytes = 5;
}
message VkShaderStatisticsInfoAMD
{
    // Original field: bitmask VkShaderStageFlags shaderStageMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderStageMask = 1;
    // Original field: struct VkShaderResourceUsageAMD resourceUsage. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkShaderResourceUsageAMD resourceUsage = 2;
    // Original field: None uint32_t numPhysicalVgprs. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 numPhysicalVgprs = 3;
    // Original field: None uint32_t numPhysicalSgprs. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 numPhysicalSgprs = 4;
    // Original field: None uint32_t numAvailableVgprs. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 numAvailableVgprs = 5;
    // Original field: None uint32_t numAvailableSgprs. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 numAvailableSgprs = 6;
    // Original field: None uint32_t computeWorkGroupSize. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 computeWorkGroupSize = 7;
}
message vkGetShaderInfoAMD
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkPipeline pipeline. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pipeline = 2;
    // Original field: enum VkShaderStageFlagBits shaderStage. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderStage = 3;
    // Original field: enum VkShaderInfoTypeAMD infoType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 infoType = 4;
    // Original field: None size_t pInfoSize. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pInfoSize = 5;
    // Original field: None void pInfo. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pInfo = 6;
}
message VkExternalImageFormatPropertiesNV
{
    // Original field: struct VkImageFormatProperties imageFormatProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkImageFormatProperties imageFormatProperties = 1;
    // Original field: bitmask VkExternalMemoryFeatureFlagsNV externalMemoryFeatures. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 externalMemoryFeatures = 2;
    // Original field: bitmask VkExternalMemoryHandleTypeFlagsNV exportFromImportedHandleTypes. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 exportFromImportedHandleTypes = 3;
    // Original field: bitmask VkExternalMemoryHandleTypeFlagsNV compatibleHandleTypes. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 compatibleHandleTypes = 4;
}
message vkGetPhysicalDeviceExternalImageFormatPropertiesNV
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: enum VkFormat format. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 format = 2;
    // Original field: enum VkImageType type. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 type = 3;
    // Original field: enum VkImageTiling tiling. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 tiling = 4;
    // Original field: bitmask VkImageUsageFlags usage. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 usage = 5;
    // Original field: bitmask VkImageCreateFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 6;
    // Original field: bitmask VkExternalMemoryHandleTypeFlagsNV externalHandleType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 externalHandleType = 7;
    // Original field: struct VkExternalImageFormatPropertiesNV pExternalImageFormatProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExternalImageFormatPropertiesNV pExternalImageFormatProperties = 8;
}
message VkExternalMemoryImageCreateInfoNV
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkExternalMemoryHandleTypeFlagsNV handleTypes. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 handleTypes = 3;
}
message VkExportMemoryAllocateInfoNV
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkExternalMemoryHandleTypeFlagsNV handleTypes. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 handleTypes = 3;
}
message VkImportMemoryWin32HandleInfoNV
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkExternalMemoryHandleTypeFlagsNV handleType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 handleType = 3;
    // Original field: None HANDLE handle. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 handle = 4;
}
message VkExportMemoryWin32HandleInfoNV
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None SECURITY_ATTRIBUTES pAttributes. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pAttributes = 3;
    // Original field: None DWORD dwAccess. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 dwAccess = 4;
}
message vkGetMemoryWin32HandleNV
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkDeviceMemory memory. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 memory = 2;
    // Original field: bitmask VkExternalMemoryHandleTypeFlagsNV handleType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 handleType = 3;
    // Original field: None HANDLE pHandle. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pHandle = 4;
}
message VkWin32KeyedMutexAcquireReleaseInfoNV
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t acquireCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 acquireCount = 3;
    // Original field: handle VkDeviceMemory pAcquireSyncs. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pAcquireSyncs = 4;
    // Original field: None uint64_t pAcquireKeys. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pAcquireKeys = 5;
    // Original field: None uint32_t pAcquireTimeoutMilliseconds. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pAcquireTimeoutMilliseconds = 6;
    // Original field: None uint32_t releaseCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 releaseCount = 7;
    // Original field: handle VkDeviceMemory pReleaseSyncs. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pReleaseSyncs = 8;
    // Original field: None uint64_t pReleaseKeys. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pReleaseKeys = 9;
}
message VkValidationFlagsEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t disabledValidationCheckCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 disabledValidationCheckCount = 3;
    // Original field: enum VkValidationCheckEXT pDisabledValidationChecks. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pDisabledValidationChecks = 4;
}
message VkViSurfaceCreateInfoNN
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkViSurfaceCreateFlagsNN flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: None void window. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 window = 4;
}
message vkCreateViSurfaceNN
{
    // Original field: handle VkInstance instance. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 instance = 1;
    // Original field: struct VkViSurfaceCreateInfoNN pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkViSurfaceCreateInfoNN pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkSurfaceKHR pSurface. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pSurface = 4;
}
message VkConditionalRenderingBeginInfoEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: handle VkBuffer buffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 buffer = 3;
    // Original field: basetype VkDeviceSize offset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 offset = 4;
    // Original field: bitmask VkConditionalRenderingFlagsEXT flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 5;
}
message VkPhysicalDeviceConditionalRenderingFeaturesEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: basetype VkBool32 conditionalRendering. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 conditionalRendering = 3;
    // Original field: basetype VkBool32 inheritedConditionalRendering. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 inheritedConditionalRendering = 4;
}
message VkCommandBufferInheritanceConditionalRenderingInfoEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: basetype VkBool32 conditionalRenderingEnable. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 conditionalRenderingEnable = 3;
}
message vkCmdBeginConditionalRenderingEXT
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: struct VkConditionalRenderingBeginInfoEXT pConditionalRenderingBegin. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkConditionalRenderingBeginInfoEXT pConditionalRenderingBegin = 2;
}
message vkCmdEndConditionalRenderingEXT
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
}
message VkDeviceGeneratedCommandsFeaturesNVX
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: basetype VkBool32 computeBindingPointSupport. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 computeBindingPointSupport = 3;
}
message VkDeviceGeneratedCommandsLimitsNVX
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t maxIndirectCommandsLayoutTokenCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxIndirectCommandsLayoutTokenCount = 3;
    // Original field: None uint32_t maxObjectEntryCounts. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxObjectEntryCounts = 4;
    // Original field: None uint32_t minSequenceCountBufferOffsetAlignment. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 minSequenceCountBufferOffsetAlignment = 5;
    // Original field: None uint32_t minSequenceIndexBufferOffsetAlignment. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 minSequenceIndexBufferOffsetAlignment = 6;
    // Original field: None uint32_t minCommandsTokenBufferOffsetAlignment. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 minCommandsTokenBufferOffsetAlignment = 7;
}
message VkIndirectCommandsTokenNVX
{
    // Original field: enum VkIndirectCommandsTokenTypeNVX tokenType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 tokenType = 1;
    // Original field: handle VkBuffer buffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 buffer = 2;
    // Original field: basetype VkDeviceSize offset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 offset = 3;
}
message VkIndirectCommandsLayoutTokenNVX
{
    // Original field: enum VkIndirectCommandsTokenTypeNVX tokenType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 tokenType = 1;
    // Original field: None uint32_t bindingUnit. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 bindingUnit = 2;
    // Original field: None uint32_t dynamicCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dynamicCount = 3;
    // Original field: None uint32_t divisor. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 divisor = 4;
}
message VkIndirectCommandsLayoutCreateInfoNVX
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: enum VkPipelineBindPoint pipelineBindPoint. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pipelineBindPoint = 3;
    // Original field: bitmask VkIndirectCommandsLayoutUsageFlagsNVX flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 4;
    // Original field: None uint32_t tokenCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 tokenCount = 5;
    // Original field: struct VkIndirectCommandsLayoutTokenNVX pTokens. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkIndirectCommandsLayoutTokenNVX pTokens = 6;
}
message VkCmdProcessCommandsInfoNVX
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: handle VkObjectTableNVX objectTable. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 objectTable = 3;
    // Original field: handle VkIndirectCommandsLayoutNVX indirectCommandsLayout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 indirectCommandsLayout = 4;
    // Original field: None uint32_t indirectCommandsTokenCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 indirectCommandsTokenCount = 5;
    // Original field: struct VkIndirectCommandsTokenNVX pIndirectCommandsTokens. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkIndirectCommandsTokenNVX pIndirectCommandsTokens = 6;
    // Original field: None uint32_t maxSequencesCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxSequencesCount = 7;
    // Original field: handle VkCommandBuffer targetCommandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 targetCommandBuffer = 8;
    // Original field: handle VkBuffer sequencesCountBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 sequencesCountBuffer = 9;
    // Original field: basetype VkDeviceSize sequencesCountOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 sequencesCountOffset = 10;
    // Original field: handle VkBuffer sequencesIndexBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 sequencesIndexBuffer = 11;
    // Original field: basetype VkDeviceSize sequencesIndexOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 sequencesIndexOffset = 12;
}
message VkCmdReserveSpaceForCommandsInfoNVX
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: handle VkObjectTableNVX objectTable. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 objectTable = 3;
    // Original field: handle VkIndirectCommandsLayoutNVX indirectCommandsLayout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 indirectCommandsLayout = 4;
    // Original field: None uint32_t maxSequencesCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxSequencesCount = 5;
}
message VkObjectTableCreateInfoNVX
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t objectCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 objectCount = 3;
    // Original field: enum VkObjectEntryTypeNVX pObjectEntryTypes. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pObjectEntryTypes = 4;
    // Original field: None uint32_t pObjectEntryCounts. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pObjectEntryCounts = 5;
    // Original field: bitmask VkObjectEntryUsageFlagsNVX pObjectEntryUsageFlags. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pObjectEntryUsageFlags = 6;
    // Original field: None uint32_t maxUniformBuffersPerDescriptor. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxUniformBuffersPerDescriptor = 7;
    // Original field: None uint32_t maxStorageBuffersPerDescriptor. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxStorageBuffersPerDescriptor = 8;
    // Original field: None uint32_t maxStorageImagesPerDescriptor. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxStorageImagesPerDescriptor = 9;
    // Original field: None uint32_t maxSampledImagesPerDescriptor. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxSampledImagesPerDescriptor = 10;
    // Original field: None uint32_t maxPipelineLayouts. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxPipelineLayouts = 11;
}
message VkObjectTableEntryNVX
{
    // Original field: enum VkObjectEntryTypeNVX type. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 type = 1;
    // Original field: bitmask VkObjectEntryUsageFlagsNVX flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 2;
}
message VkObjectTablePipelineEntryNVX
{
    // Original field: enum VkObjectEntryTypeNVX type. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 type = 1;
    // Original field: bitmask VkObjectEntryUsageFlagsNVX flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 2;
    // Original field: handle VkPipeline pipeline. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pipeline = 3;
}
message VkObjectTableDescriptorSetEntryNVX
{
    // Original field: enum VkObjectEntryTypeNVX type. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 type = 1;
    // Original field: bitmask VkObjectEntryUsageFlagsNVX flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 2;
    // Original field: handle VkPipelineLayout pipelineLayout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pipelineLayout = 3;
    // Original field: handle VkDescriptorSet descriptorSet. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 descriptorSet = 4;
}
message VkObjectTableVertexBufferEntryNVX
{
    // Original field: enum VkObjectEntryTypeNVX type. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 type = 1;
    // Original field: bitmask VkObjectEntryUsageFlagsNVX flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 2;
    // Original field: handle VkBuffer buffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 buffer = 3;
}
message VkObjectTableIndexBufferEntryNVX
{
    // Original field: enum VkObjectEntryTypeNVX type. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 type = 1;
    // Original field: bitmask VkObjectEntryUsageFlagsNVX flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 2;
    // Original field: handle VkBuffer buffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 buffer = 3;
    // Original field: enum VkIndexType indexType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 indexType = 4;
}
message VkObjectTablePushConstantEntryNVX
{
    // Original field: enum VkObjectEntryTypeNVX type. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 type = 1;
    // Original field: bitmask VkObjectEntryUsageFlagsNVX flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 2;
    // Original field: handle VkPipelineLayout pipelineLayout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pipelineLayout = 3;
    // Original field: bitmask VkShaderStageFlags stageFlags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 stageFlags = 4;
}
message vkCmdProcessCommandsNVX
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: struct VkCmdProcessCommandsInfoNVX pProcessCommandsInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkCmdProcessCommandsInfoNVX pProcessCommandsInfo = 2;
}
message vkCmdReserveSpaceForCommandsNVX
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: struct VkCmdReserveSpaceForCommandsInfoNVX pReserveSpaceInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkCmdReserveSpaceForCommandsInfoNVX pReserveSpaceInfo = 2;
}
message vkCreateIndirectCommandsLayoutNVX
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkIndirectCommandsLayoutCreateInfoNVX pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkIndirectCommandsLayoutCreateInfoNVX pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkIndirectCommandsLayoutNVX pIndirectCommandsLayout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pIndirectCommandsLayout = 4;
}
message vkDestroyIndirectCommandsLayoutNVX
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkIndirectCommandsLayoutNVX indirectCommandsLayout. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 indirectCommandsLayout = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
}
message vkCreateObjectTableNVX
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkObjectTableCreateInfoNVX pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkObjectTableCreateInfoNVX pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkObjectTableNVX pObjectTable. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pObjectTable = 4;
}
message vkDestroyObjectTableNVX
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkObjectTableNVX objectTable. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 objectTable = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
}
message vkRegisterObjectsNVX
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkObjectTableNVX objectTable. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 objectTable = 2;
    // Original field: None uint32_t objectCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 objectCount = 3;
    // Original field: struct VkObjectTableEntryNVX ppObjectTableEntries. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkObjectTableEntryNVX ppObjectTableEntries = 4;
    // Original field: None uint32_t pObjectIndices. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pObjectIndices = 5;
}
message vkUnregisterObjectsNVX
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkObjectTableNVX objectTable. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 objectTable = 2;
    // Original field: None uint32_t objectCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 objectCount = 3;
    // Original field: enum VkObjectEntryTypeNVX pObjectEntryTypes. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pObjectEntryTypes = 4;
    // Original field: None uint32_t pObjectIndices. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pObjectIndices = 5;
}
message vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: struct VkDeviceGeneratedCommandsFeaturesNVX pFeatures. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDeviceGeneratedCommandsFeaturesNVX pFeatures = 2;
    // Original field: struct VkDeviceGeneratedCommandsLimitsNVX pLimits. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDeviceGeneratedCommandsLimitsNVX pLimits = 3;
}
message VkViewportWScalingNV
{
    // Original field: None float xcoeff. stringarray? 0 string? 0 hasLenInfo? 0
    optional float xcoeff = 1;
    // Original field: None float ycoeff. stringarray? 0 string? 0 hasLenInfo? 0
    optional float ycoeff = 2;
}
message VkPipelineViewportWScalingStateCreateInfoNV
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: basetype VkBool32 viewportWScalingEnable. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 viewportWScalingEnable = 3;
    // Original field: None uint32_t viewportCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 viewportCount = 4;
    // Original field: struct VkViewportWScalingNV pViewportWScalings. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkViewportWScalingNV pViewportWScalings = 5;
}
message vkCmdSetViewportWScalingNV
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: None uint32_t firstViewport. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 firstViewport = 2;
    // Original field: None uint32_t viewportCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 viewportCount = 3;
    // Original field: struct VkViewportWScalingNV pViewportWScalings. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkViewportWScalingNV pViewportWScalings = 4;
}
message vkReleaseDisplayEXT
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: handle VkDisplayKHR display. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 display = 2;
}
message vkAcquireXlibDisplayEXT
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: None Display dpy. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 dpy = 2;
    // Original field: handle VkDisplayKHR display. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 display = 3;
}
message vkGetRandROutputDisplayEXT
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: None Display dpy. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 dpy = 2;
    // Original field: None RROutput rrOutput. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 rrOutput = 3;
    // Original field: handle VkDisplayKHR pDisplay. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pDisplay = 4;
}
message VkSurfaceCapabilities2EXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t minImageCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 minImageCount = 3;
    // Original field: None uint32_t maxImageCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxImageCount = 4;
    // Original field: struct VkExtent2D currentExtent. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtent2D currentExtent = 5;
    // Original field: struct VkExtent2D minImageExtent. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtent2D minImageExtent = 6;
    // Original field: struct VkExtent2D maxImageExtent. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtent2D maxImageExtent = 7;
    // Original field: None uint32_t maxImageArrayLayers. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxImageArrayLayers = 8;
    // Original field: bitmask VkSurfaceTransformFlagsKHR supportedTransforms. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 supportedTransforms = 9;
    // Original field: enum VkSurfaceTransformFlagBitsKHR currentTransform. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 currentTransform = 10;
    // Original field: bitmask VkCompositeAlphaFlagsKHR supportedCompositeAlpha. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 supportedCompositeAlpha = 11;
    // Original field: bitmask VkImageUsageFlags supportedUsageFlags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 supportedUsageFlags = 12;
    // Original field: bitmask VkSurfaceCounterFlagsEXT supportedSurfaceCounters. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 supportedSurfaceCounters = 13;
}
message vkGetPhysicalDeviceSurfaceCapabilities2EXT
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: handle VkSurfaceKHR surface. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 surface = 2;
    // Original field: struct VkSurfaceCapabilities2EXT pSurfaceCapabilities. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkSurfaceCapabilities2EXT pSurfaceCapabilities = 3;
}
message VkDisplayPowerInfoEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: enum VkDisplayPowerStateEXT powerState. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 powerState = 3;
}
message VkDeviceEventInfoEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: enum VkDeviceEventTypeEXT deviceEvent. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 deviceEvent = 3;
}
message VkDisplayEventInfoEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: enum VkDisplayEventTypeEXT displayEvent. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 displayEvent = 3;
}
message VkSwapchainCounterCreateInfoEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkSurfaceCounterFlagsEXT surfaceCounters. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 surfaceCounters = 3;
}
message vkDisplayPowerControlEXT
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkDisplayKHR display. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 display = 2;
    // Original field: struct VkDisplayPowerInfoEXT pDisplayPowerInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDisplayPowerInfoEXT pDisplayPowerInfo = 3;
}
message vkRegisterDeviceEventEXT
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkDeviceEventInfoEXT pDeviceEventInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDeviceEventInfoEXT pDeviceEventInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkFence pFence. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pFence = 4;
}
message vkRegisterDisplayEventEXT
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkDisplayKHR display. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 display = 2;
    // Original field: struct VkDisplayEventInfoEXT pDisplayEventInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDisplayEventInfoEXT pDisplayEventInfo = 3;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 4;
    // Original field: handle VkFence pFence. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pFence = 5;
}
message vkGetSwapchainCounterEXT
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkSwapchainKHR swapchain. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 swapchain = 2;
    // Original field: enum VkSurfaceCounterFlagBitsEXT counter. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 counter = 3;
    // Original field: None uint64_t pCounterValue. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pCounterValue = 4;
}
message VkRefreshCycleDurationGOOGLE
{
    // Original field: None uint64_t refreshDuration. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 refreshDuration = 1;
}
message VkPastPresentationTimingGOOGLE
{
    // Original field: None uint32_t presentID. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 presentID = 1;
    // Original field: None uint64_t desiredPresentTime. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 desiredPresentTime = 2;
    // Original field: None uint64_t actualPresentTime. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 actualPresentTime = 3;
    // Original field: None uint64_t earliestPresentTime. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 earliestPresentTime = 4;
    // Original field: None uint64_t presentMargin. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 presentMargin = 5;
}
message VkPresentTimeGOOGLE
{
    // Original field: None uint32_t presentID. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 presentID = 1;
    // Original field: None uint64_t desiredPresentTime. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 desiredPresentTime = 2;
}
message VkPresentTimesInfoGOOGLE
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t swapchainCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 swapchainCount = 3;
    // Original field: struct VkPresentTimeGOOGLE pTimes. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkPresentTimeGOOGLE pTimes = 4;
}
message vkGetRefreshCycleDurationGOOGLE
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkSwapchainKHR swapchain. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 swapchain = 2;
    // Original field: struct VkRefreshCycleDurationGOOGLE pDisplayTimingProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkRefreshCycleDurationGOOGLE pDisplayTimingProperties = 3;
}
message vkGetPastPresentationTimingGOOGLE
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkSwapchainKHR swapchain. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 swapchain = 2;
    // Original field: None uint32_t pPresentationTimingCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pPresentationTimingCount = 3;
    // Original field: struct VkPastPresentationTimingGOOGLE pPresentationTimings. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkPastPresentationTimingGOOGLE pPresentationTimings = 4;
}
message VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: basetype VkBool32 perViewPositionAllComponents. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 perViewPositionAllComponents = 3;
}
message VkViewportSwizzleNV
{
    // Original field: enum VkViewportCoordinateSwizzleNV x. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 x = 1;
    // Original field: enum VkViewportCoordinateSwizzleNV y. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 y = 2;
    // Original field: enum VkViewportCoordinateSwizzleNV z. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 z = 3;
    // Original field: enum VkViewportCoordinateSwizzleNV w. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 w = 4;
}
message VkPipelineViewportSwizzleStateCreateInfoNV
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkPipelineViewportSwizzleStateCreateFlagsNV flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: None uint32_t viewportCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 viewportCount = 4;
    // Original field: struct VkViewportSwizzleNV pViewportSwizzles. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkViewportSwizzleNV pViewportSwizzles = 5;
}
message VkPhysicalDeviceDiscardRectanglePropertiesEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t maxDiscardRectangles. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxDiscardRectangles = 3;
}
message VkPipelineDiscardRectangleStateCreateInfoEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkPipelineDiscardRectangleStateCreateFlagsEXT flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: enum VkDiscardRectangleModeEXT discardRectangleMode. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 discardRectangleMode = 4;
    // Original field: None uint32_t discardRectangleCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 discardRectangleCount = 5;
    // Original field: struct VkRect2D pDiscardRectangles. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkRect2D pDiscardRectangles = 6;
}
message vkCmdSetDiscardRectangleEXT
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: None uint32_t firstDiscardRectangle. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 firstDiscardRectangle = 2;
    // Original field: None uint32_t discardRectangleCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 discardRectangleCount = 3;
    // Original field: struct VkRect2D pDiscardRectangles. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkRect2D pDiscardRectangles = 4;
}
message VkPhysicalDeviceConservativeRasterizationPropertiesEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None float primitiveOverestimationSize. stringarray? 0 string? 0 hasLenInfo? 0
    optional float primitiveOverestimationSize = 3;
    // Original field: None float maxExtraPrimitiveOverestimationSize. stringarray? 0 string? 0 hasLenInfo? 0
    optional float maxExtraPrimitiveOverestimationSize = 4;
    // Original field: None float extraPrimitiveOverestimationSizeGranularity. stringarray? 0 string? 0 hasLenInfo? 0
    optional float extraPrimitiveOverestimationSizeGranularity = 5;
    // Original field: basetype VkBool32 primitiveUnderestimation. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 primitiveUnderestimation = 6;
    // Original field: basetype VkBool32 conservativePointAndLineRasterization. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 conservativePointAndLineRasterization = 7;
    // Original field: basetype VkBool32 degenerateTrianglesRasterized. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 degenerateTrianglesRasterized = 8;
    // Original field: basetype VkBool32 degenerateLinesRasterized. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 degenerateLinesRasterized = 9;
    // Original field: basetype VkBool32 fullyCoveredFragmentShaderInputVariable. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 fullyCoveredFragmentShaderInputVariable = 10;
    // Original field: basetype VkBool32 conservativeRasterizationPostDepthCoverage. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 conservativeRasterizationPostDepthCoverage = 11;
}
message VkPipelineRasterizationConservativeStateCreateInfoEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkPipelineRasterizationConservativeStateCreateFlagsEXT flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: enum VkConservativeRasterizationModeEXT conservativeRasterizationMode. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 conservativeRasterizationMode = 4;
    // Original field: None float extraPrimitiveOverestimationSize. stringarray? 0 string? 0 hasLenInfo? 0
    optional float extraPrimitiveOverestimationSize = 5;
}
message VkXYColorEXT
{
    // Original field: None float x. stringarray? 0 string? 0 hasLenInfo? 0
    optional float x = 1;
    // Original field: None float y. stringarray? 0 string? 0 hasLenInfo? 0
    optional float y = 2;
}
message VkHdrMetadataEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: struct VkXYColorEXT displayPrimaryRed. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkXYColorEXT displayPrimaryRed = 3;
    // Original field: struct VkXYColorEXT displayPrimaryGreen. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkXYColorEXT displayPrimaryGreen = 4;
    // Original field: struct VkXYColorEXT displayPrimaryBlue. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkXYColorEXT displayPrimaryBlue = 5;
    // Original field: struct VkXYColorEXT whitePoint. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkXYColorEXT whitePoint = 6;
    // Original field: None float maxLuminance. stringarray? 0 string? 0 hasLenInfo? 0
    optional float maxLuminance = 7;
    // Original field: None float minLuminance. stringarray? 0 string? 0 hasLenInfo? 0
    optional float minLuminance = 8;
    // Original field: None float maxContentLightLevel. stringarray? 0 string? 0 hasLenInfo? 0
    optional float maxContentLightLevel = 9;
    // Original field: None float maxFrameAverageLightLevel. stringarray? 0 string? 0 hasLenInfo? 0
    optional float maxFrameAverageLightLevel = 10;
}
message vkSetHdrMetadataEXT
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: None uint32_t swapchainCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 swapchainCount = 2;
    // Original field: handle VkSwapchainKHR pSwapchains. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pSwapchains = 3;
    // Original field: struct VkHdrMetadataEXT pMetadata. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkHdrMetadataEXT pMetadata = 4;
}
message VkIOSSurfaceCreateInfoMVK
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkIOSSurfaceCreateFlagsMVK flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: None void pView. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pView = 4;
}
message vkCreateIOSSurfaceMVK
{
    // Original field: handle VkInstance instance. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 instance = 1;
    // Original field: struct VkIOSSurfaceCreateInfoMVK pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkIOSSurfaceCreateInfoMVK pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkSurfaceKHR pSurface. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pSurface = 4;
}
message VkMacOSSurfaceCreateInfoMVK
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkMacOSSurfaceCreateFlagsMVK flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: None void pView. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pView = 4;
}
message vkCreateMacOSSurfaceMVK
{
    // Original field: handle VkInstance instance. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 instance = 1;
    // Original field: struct VkMacOSSurfaceCreateInfoMVK pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkMacOSSurfaceCreateInfoMVK pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkSurfaceKHR pSurface. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pSurface = 4;
}
message VkDebugUtilsObjectNameInfoEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: enum VkObjectType objectType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 objectType = 3;
    // Original field: None uint64_t objectHandle. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 objectHandle = 4;
    // Original field: None char pObjectName. stringarray? 0 string? 1 hasLenInfo? 1
    optional string pObjectName = 5;
}
message VkDebugUtilsObjectTagInfoEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: enum VkObjectType objectType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 objectType = 3;
    // Original field: None uint64_t objectHandle. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 objectHandle = 4;
    // Original field: None uint64_t tagName. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 tagName = 5;
    // Original field: None size_t tagSize. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 tagSize = 6;
    // Original field: None void pTag. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pTag = 7;
}
message VkDebugUtilsLabelEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None char pLabelName. stringarray? 0 string? 1 hasLenInfo? 1
    optional string pLabelName = 3;
    // Original field: None float color. stringarray? 0 string? 0 hasLenInfo? 1
    repeated float color = 4;
}
message VkDebugUtilsMessengerCallbackDataEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkDebugUtilsMessengerCallbackDataFlagsEXT flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: None char pMessageIdName. stringarray? 0 string? 1 hasLenInfo? 1
    optional string pMessageIdName = 4;
    // Original field: None int32_t messageIdNumber. stringarray? 0 string? 0 hasLenInfo? 0
    optional int32 messageIdNumber = 5;
    // Original field: None char pMessage. stringarray? 0 string? 1 hasLenInfo? 1
    optional string pMessage = 6;
    // Original field: None uint32_t queueLabelCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 queueLabelCount = 7;
    // Original field: struct VkDebugUtilsLabelEXT pQueueLabels. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkDebugUtilsLabelEXT pQueueLabels = 8;
    // Original field: None uint32_t cmdBufLabelCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 cmdBufLabelCount = 9;
    // Original field: struct VkDebugUtilsLabelEXT pCmdBufLabels. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkDebugUtilsLabelEXT pCmdBufLabels = 10;
    // Original field: None uint32_t objectCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 objectCount = 11;
    // Original field: struct VkDebugUtilsObjectNameInfoEXT pObjects. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkDebugUtilsObjectNameInfoEXT pObjects = 12;
}
message VkDebugUtilsMessengerCreateInfoEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkDebugUtilsMessengerCreateFlagsEXT flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: bitmask VkDebugUtilsMessageSeverityFlagsEXT messageSeverity. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 messageSeverity = 4;
    // Original field: bitmask VkDebugUtilsMessageTypeFlagsEXT messageType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 messageType = 5;
    // Original field: funcpointer PFN_vkDebugUtilsMessengerCallbackEXT pfnUserCallback. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pfnUserCallback = 6;
    // Original field: None void pUserData. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pUserData = 7;
}
message vkSetDebugUtilsObjectNameEXT
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkDebugUtilsObjectNameInfoEXT pNameInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDebugUtilsObjectNameInfoEXT pNameInfo = 2;
}
message vkSetDebugUtilsObjectTagEXT
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkDebugUtilsObjectTagInfoEXT pTagInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDebugUtilsObjectTagInfoEXT pTagInfo = 2;
}
message vkQueueBeginDebugUtilsLabelEXT
{
    // Original field: handle VkQueue queue. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 queue = 1;
    // Original field: struct VkDebugUtilsLabelEXT pLabelInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDebugUtilsLabelEXT pLabelInfo = 2;
}
message vkQueueEndDebugUtilsLabelEXT
{
    // Original field: handle VkQueue queue. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 queue = 1;
}
message vkQueueInsertDebugUtilsLabelEXT
{
    // Original field: handle VkQueue queue. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 queue = 1;
    // Original field: struct VkDebugUtilsLabelEXT pLabelInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDebugUtilsLabelEXT pLabelInfo = 2;
}
message vkCmdBeginDebugUtilsLabelEXT
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: struct VkDebugUtilsLabelEXT pLabelInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDebugUtilsLabelEXT pLabelInfo = 2;
}
message vkCmdEndDebugUtilsLabelEXT
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
}
message vkCmdInsertDebugUtilsLabelEXT
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: struct VkDebugUtilsLabelEXT pLabelInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDebugUtilsLabelEXT pLabelInfo = 2;
}
message vkCreateDebugUtilsMessengerEXT
{
    // Original field: handle VkInstance instance. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 instance = 1;
    // Original field: struct VkDebugUtilsMessengerCreateInfoEXT pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDebugUtilsMessengerCreateInfoEXT pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkDebugUtilsMessengerEXT pMessenger. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pMessenger = 4;
}
message vkDestroyDebugUtilsMessengerEXT
{
    // Original field: handle VkInstance instance. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 instance = 1;
    // Original field: handle VkDebugUtilsMessengerEXT messenger. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 messenger = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
}
message vkSubmitDebugUtilsMessageEXT
{
    // Original field: handle VkInstance instance. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 instance = 1;
    // Original field: enum VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 messageSeverity = 2;
    // Original field: bitmask VkDebugUtilsMessageTypeFlagsEXT messageTypes. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 messageTypes = 3;
    // Original field: struct VkDebugUtilsMessengerCallbackDataEXT pCallbackData. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkDebugUtilsMessengerCallbackDataEXT pCallbackData = 4;
}
message VkAndroidHardwareBufferUsageANDROID
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint64_t androidHardwareBufferUsage. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 androidHardwareBufferUsage = 3;
}
message VkAndroidHardwareBufferPropertiesANDROID
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: basetype VkDeviceSize allocationSize. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 allocationSize = 3;
    // Original field: None uint32_t memoryTypeBits. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 memoryTypeBits = 4;
}
message VkAndroidHardwareBufferFormatPropertiesANDROID
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: enum VkFormat format. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 format = 3;
    // Original field: None uint64_t externalFormat. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 externalFormat = 4;
    // Original field: bitmask VkFormatFeatureFlags formatFeatures. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 formatFeatures = 5;
    // Original field: struct VkComponentMapping samplerYcbcrConversionComponents. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkComponentMapping samplerYcbcrConversionComponents = 6;
    // Original field: enum VkSamplerYcbcrModelConversion suggestedYcbcrModel. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 suggestedYcbcrModel = 7;
    // Original field: enum VkSamplerYcbcrRange suggestedYcbcrRange. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 suggestedYcbcrRange = 8;
    // Original field: enum VkChromaLocation suggestedXChromaOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 suggestedXChromaOffset = 9;
    // Original field: enum VkChromaLocation suggestedYChromaOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 suggestedYChromaOffset = 10;
}
message VkImportAndroidHardwareBufferInfoANDROID
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: define AHardwareBuffer buffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 buffer = 3;
}
message VkMemoryGetAndroidHardwareBufferInfoANDROID
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: handle VkDeviceMemory memory. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 memory = 3;
}
message VkExternalFormatANDROID
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint64_t externalFormat. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 externalFormat = 3;
}
message vkGetAndroidHardwareBufferPropertiesANDROID
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: define AHardwareBuffer buffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 buffer = 2;
    // Original field: struct VkAndroidHardwareBufferPropertiesANDROID pProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAndroidHardwareBufferPropertiesANDROID pProperties = 3;
}
message vkGetMemoryAndroidHardwareBufferANDROID
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkMemoryGetAndroidHardwareBufferInfoANDROID pInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkMemoryGetAndroidHardwareBufferInfoANDROID pInfo = 2;
    // Original field: define AHardwareBuffer pBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pBuffer = 3;
}
message VkSamplerReductionModeCreateInfoEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: enum VkSamplerReductionModeEXT reductionMode. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 reductionMode = 3;
}
message VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: basetype VkBool32 filterMinmaxSingleComponentFormats. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 filterMinmaxSingleComponentFormats = 3;
    // Original field: basetype VkBool32 filterMinmaxImageComponentMapping. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 filterMinmaxImageComponentMapping = 4;
}
message VkSampleLocationEXT
{
    // Original field: None float x. stringarray? 0 string? 0 hasLenInfo? 0
    optional float x = 1;
    // Original field: None float y. stringarray? 0 string? 0 hasLenInfo? 0
    optional float y = 2;
}
message VkSampleLocationsInfoEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: enum VkSampleCountFlagBits sampleLocationsPerPixel. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sampleLocationsPerPixel = 3;
    // Original field: struct VkExtent2D sampleLocationGridSize. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtent2D sampleLocationGridSize = 4;
    // Original field: None uint32_t sampleLocationsCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sampleLocationsCount = 5;
    // Original field: struct VkSampleLocationEXT pSampleLocations. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkSampleLocationEXT pSampleLocations = 6;
}
message VkAttachmentSampleLocationsEXT
{
    // Original field: None uint32_t attachmentIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 attachmentIndex = 1;
    // Original field: struct VkSampleLocationsInfoEXT sampleLocationsInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkSampleLocationsInfoEXT sampleLocationsInfo = 2;
}
message VkSubpassSampleLocationsEXT
{
    // Original field: None uint32_t subpassIndex. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 subpassIndex = 1;
    // Original field: struct VkSampleLocationsInfoEXT sampleLocationsInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkSampleLocationsInfoEXT sampleLocationsInfo = 2;
}
message VkRenderPassSampleLocationsBeginInfoEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t attachmentInitialSampleLocationsCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 attachmentInitialSampleLocationsCount = 3;
    // Original field: struct VkAttachmentSampleLocationsEXT pAttachmentInitialSampleLocations. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkAttachmentSampleLocationsEXT pAttachmentInitialSampleLocations = 4;
    // Original field: None uint32_t postSubpassSampleLocationsCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 postSubpassSampleLocationsCount = 5;
    // Original field: struct VkSubpassSampleLocationsEXT pPostSubpassSampleLocations. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkSubpassSampleLocationsEXT pPostSubpassSampleLocations = 6;
}
message VkPipelineSampleLocationsStateCreateInfoEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: basetype VkBool32 sampleLocationsEnable. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sampleLocationsEnable = 3;
    // Original field: struct VkSampleLocationsInfoEXT sampleLocationsInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkSampleLocationsInfoEXT sampleLocationsInfo = 4;
}
message VkPhysicalDeviceSampleLocationsPropertiesEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkSampleCountFlags sampleLocationSampleCounts. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sampleLocationSampleCounts = 3;
    // Original field: struct VkExtent2D maxSampleLocationGridSize. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtent2D maxSampleLocationGridSize = 4;
    // Original field: None float sampleLocationCoordinateRange. stringarray? 0 string? 0 hasLenInfo? 1
    repeated float sampleLocationCoordinateRange = 5;
    // Original field: None uint32_t sampleLocationSubPixelBits. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sampleLocationSubPixelBits = 6;
    // Original field: basetype VkBool32 variableSampleLocations. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 variableSampleLocations = 7;
}
message VkMultisamplePropertiesEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: struct VkExtent2D maxSampleLocationGridSize. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtent2D maxSampleLocationGridSize = 3;
}
message vkCmdSetSampleLocationsEXT
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: struct VkSampleLocationsInfoEXT pSampleLocationsInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkSampleLocationsInfoEXT pSampleLocationsInfo = 2;
}
message vkGetPhysicalDeviceMultisamplePropertiesEXT
{
    // Original field: handle VkPhysicalDevice physicalDevice. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalDevice = 1;
    // Original field: enum VkSampleCountFlagBits samples. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 samples = 2;
    // Original field: struct VkMultisamplePropertiesEXT pMultisampleProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkMultisamplePropertiesEXT pMultisampleProperties = 3;
}
message VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: basetype VkBool32 advancedBlendCoherentOperations. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 advancedBlendCoherentOperations = 3;
}
message VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t advancedBlendMaxColorAttachments. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 advancedBlendMaxColorAttachments = 3;
    // Original field: basetype VkBool32 advancedBlendIndependentBlend. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 advancedBlendIndependentBlend = 4;
    // Original field: basetype VkBool32 advancedBlendNonPremultipliedSrcColor. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 advancedBlendNonPremultipliedSrcColor = 5;
    // Original field: basetype VkBool32 advancedBlendNonPremultipliedDstColor. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 advancedBlendNonPremultipliedDstColor = 6;
    // Original field: basetype VkBool32 advancedBlendCorrelatedOverlap. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 advancedBlendCorrelatedOverlap = 7;
    // Original field: basetype VkBool32 advancedBlendAllOperations. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 advancedBlendAllOperations = 8;
}
message VkPipelineColorBlendAdvancedStateCreateInfoEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: basetype VkBool32 srcPremultiplied. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 srcPremultiplied = 3;
    // Original field: basetype VkBool32 dstPremultiplied. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 dstPremultiplied = 4;
    // Original field: enum VkBlendOverlapEXT blendOverlap. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 blendOverlap = 5;
}
message VkPipelineCoverageToColorStateCreateInfoNV
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkPipelineCoverageToColorStateCreateFlagsNV flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: basetype VkBool32 coverageToColorEnable. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 coverageToColorEnable = 4;
    // Original field: None uint32_t coverageToColorLocation. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 coverageToColorLocation = 5;
}
message VkPipelineCoverageModulationStateCreateInfoNV
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkPipelineCoverageModulationStateCreateFlagsNV flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: enum VkCoverageModulationModeNV coverageModulationMode. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 coverageModulationMode = 4;
    // Original field: basetype VkBool32 coverageModulationTableEnable. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 coverageModulationTableEnable = 5;
    // Original field: None uint32_t coverageModulationTableCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 coverageModulationTableCount = 6;
    // Original field: None float pCoverageModulationTable. stringarray? 0 string? 0 hasLenInfo? 1
    repeated float pCoverageModulationTable = 7;
}
message VkValidationCacheCreateInfoEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkValidationCacheCreateFlagsEXT flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 3;
    // Original field: None size_t initialDataSize. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 initialDataSize = 4;
    // Original field: None void pInitialData. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pInitialData = 5;
}
message VkShaderModuleValidationCacheCreateInfoEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: handle VkValidationCacheEXT validationCache. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 validationCache = 3;
}
message vkCreateValidationCacheEXT
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkValidationCacheCreateInfoEXT pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkValidationCacheCreateInfoEXT pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkValidationCacheEXT pValidationCache. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pValidationCache = 4;
}
message vkDestroyValidationCacheEXT
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkValidationCacheEXT validationCache. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 validationCache = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
}
message vkMergeValidationCachesEXT
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkValidationCacheEXT dstCache. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 dstCache = 2;
    // Original field: None uint32_t srcCacheCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 srcCacheCount = 3;
    // Original field: handle VkValidationCacheEXT pSrcCaches. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pSrcCaches = 4;
}
message vkGetValidationCacheDataEXT
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkValidationCacheEXT validationCache. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 validationCache = 2;
    // Original field: None size_t pDataSize. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pDataSize = 3;
    // Original field: None void pData. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pData = 4;
}
message VkDescriptorSetLayoutBindingFlagsCreateInfoEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t bindingCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 bindingCount = 3;
    // Original field: bitmask VkDescriptorBindingFlagsEXT pBindingFlags. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pBindingFlags = 4;
}
message VkPhysicalDeviceDescriptorIndexingFeaturesEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: basetype VkBool32 shaderInputAttachmentArrayDynamicIndexing. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderInputAttachmentArrayDynamicIndexing = 3;
    // Original field: basetype VkBool32 shaderUniformTexelBufferArrayDynamicIndexing. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderUniformTexelBufferArrayDynamicIndexing = 4;
    // Original field: basetype VkBool32 shaderStorageTexelBufferArrayDynamicIndexing. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderStorageTexelBufferArrayDynamicIndexing = 5;
    // Original field: basetype VkBool32 shaderUniformBufferArrayNonUniformIndexing. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderUniformBufferArrayNonUniformIndexing = 6;
    // Original field: basetype VkBool32 shaderSampledImageArrayNonUniformIndexing. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderSampledImageArrayNonUniformIndexing = 7;
    // Original field: basetype VkBool32 shaderStorageBufferArrayNonUniformIndexing. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderStorageBufferArrayNonUniformIndexing = 8;
    // Original field: basetype VkBool32 shaderStorageImageArrayNonUniformIndexing. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderStorageImageArrayNonUniformIndexing = 9;
    // Original field: basetype VkBool32 shaderInputAttachmentArrayNonUniformIndexing. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderInputAttachmentArrayNonUniformIndexing = 10;
    // Original field: basetype VkBool32 shaderUniformTexelBufferArrayNonUniformIndexing. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderUniformTexelBufferArrayNonUniformIndexing = 11;
    // Original field: basetype VkBool32 shaderStorageTexelBufferArrayNonUniformIndexing. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderStorageTexelBufferArrayNonUniformIndexing = 12;
    // Original field: basetype VkBool32 descriptorBindingUniformBufferUpdateAfterBind. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 descriptorBindingUniformBufferUpdateAfterBind = 13;
    // Original field: basetype VkBool32 descriptorBindingSampledImageUpdateAfterBind. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 descriptorBindingSampledImageUpdateAfterBind = 14;
    // Original field: basetype VkBool32 descriptorBindingStorageImageUpdateAfterBind. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 descriptorBindingStorageImageUpdateAfterBind = 15;
    // Original field: basetype VkBool32 descriptorBindingStorageBufferUpdateAfterBind. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 descriptorBindingStorageBufferUpdateAfterBind = 16;
    // Original field: basetype VkBool32 descriptorBindingUniformTexelBufferUpdateAfterBind. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 descriptorBindingUniformTexelBufferUpdateAfterBind = 17;
    // Original field: basetype VkBool32 descriptorBindingStorageTexelBufferUpdateAfterBind. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 descriptorBindingStorageTexelBufferUpdateAfterBind = 18;
    // Original field: basetype VkBool32 descriptorBindingUpdateUnusedWhilePending. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 descriptorBindingUpdateUnusedWhilePending = 19;
    // Original field: basetype VkBool32 descriptorBindingPartiallyBound. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 descriptorBindingPartiallyBound = 20;
    // Original field: basetype VkBool32 descriptorBindingVariableDescriptorCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 descriptorBindingVariableDescriptorCount = 21;
    // Original field: basetype VkBool32 runtimeDescriptorArray. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 runtimeDescriptorArray = 22;
}
message VkPhysicalDeviceDescriptorIndexingPropertiesEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t maxUpdateAfterBindDescriptorsInAllPools. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxUpdateAfterBindDescriptorsInAllPools = 3;
    // Original field: basetype VkBool32 shaderUniformBufferArrayNonUniformIndexingNative. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderUniformBufferArrayNonUniformIndexingNative = 4;
    // Original field: basetype VkBool32 shaderSampledImageArrayNonUniformIndexingNative. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderSampledImageArrayNonUniformIndexingNative = 5;
    // Original field: basetype VkBool32 shaderStorageBufferArrayNonUniformIndexingNative. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderStorageBufferArrayNonUniformIndexingNative = 6;
    // Original field: basetype VkBool32 shaderStorageImageArrayNonUniformIndexingNative. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderStorageImageArrayNonUniformIndexingNative = 7;
    // Original field: basetype VkBool32 shaderInputAttachmentArrayNonUniformIndexingNative. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderInputAttachmentArrayNonUniformIndexingNative = 8;
    // Original field: basetype VkBool32 robustBufferAccessUpdateAfterBind. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 robustBufferAccessUpdateAfterBind = 9;
    // Original field: basetype VkBool32 quadDivergentImplicitLod. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 quadDivergentImplicitLod = 10;
    // Original field: None uint32_t maxPerStageDescriptorUpdateAfterBindSamplers. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxPerStageDescriptorUpdateAfterBindSamplers = 11;
    // Original field: None uint32_t maxPerStageDescriptorUpdateAfterBindUniformBuffers. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxPerStageDescriptorUpdateAfterBindUniformBuffers = 12;
    // Original field: None uint32_t maxPerStageDescriptorUpdateAfterBindStorageBuffers. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxPerStageDescriptorUpdateAfterBindStorageBuffers = 13;
    // Original field: None uint32_t maxPerStageDescriptorUpdateAfterBindSampledImages. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxPerStageDescriptorUpdateAfterBindSampledImages = 14;
    // Original field: None uint32_t maxPerStageDescriptorUpdateAfterBindStorageImages. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxPerStageDescriptorUpdateAfterBindStorageImages = 15;
    // Original field: None uint32_t maxPerStageDescriptorUpdateAfterBindInputAttachments. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxPerStageDescriptorUpdateAfterBindInputAttachments = 16;
    // Original field: None uint32_t maxPerStageUpdateAfterBindResources. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxPerStageUpdateAfterBindResources = 17;
    // Original field: None uint32_t maxDescriptorSetUpdateAfterBindSamplers. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxDescriptorSetUpdateAfterBindSamplers = 18;
    // Original field: None uint32_t maxDescriptorSetUpdateAfterBindUniformBuffers. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxDescriptorSetUpdateAfterBindUniformBuffers = 19;
    // Original field: None uint32_t maxDescriptorSetUpdateAfterBindUniformBuffersDynamic. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxDescriptorSetUpdateAfterBindUniformBuffersDynamic = 20;
    // Original field: None uint32_t maxDescriptorSetUpdateAfterBindStorageBuffers. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxDescriptorSetUpdateAfterBindStorageBuffers = 21;
    // Original field: None uint32_t maxDescriptorSetUpdateAfterBindStorageBuffersDynamic. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxDescriptorSetUpdateAfterBindStorageBuffersDynamic = 22;
    // Original field: None uint32_t maxDescriptorSetUpdateAfterBindSampledImages. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxDescriptorSetUpdateAfterBindSampledImages = 23;
    // Original field: None uint32_t maxDescriptorSetUpdateAfterBindStorageImages. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxDescriptorSetUpdateAfterBindStorageImages = 24;
    // Original field: None uint32_t maxDescriptorSetUpdateAfterBindInputAttachments. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxDescriptorSetUpdateAfterBindInputAttachments = 25;
}
message VkDescriptorSetVariableDescriptorCountAllocateInfoEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t descriptorSetCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 descriptorSetCount = 3;
    // Original field: None uint32_t pDescriptorCounts. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pDescriptorCounts = 4;
}
message VkDescriptorSetVariableDescriptorCountLayoutSupportEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t maxVariableDescriptorCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxVariableDescriptorCount = 3;
}
message VkDeviceQueueGlobalPriorityCreateInfoEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: enum VkQueueGlobalPriorityEXT globalPriority. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 globalPriority = 3;
}
message VkImportMemoryHostPointerInfoEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: enum VkExternalMemoryHandleTypeFlagBits handleType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 handleType = 3;
    // Original field: None void pHostPointer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pHostPointer = 4;
}
message VkMemoryHostPointerPropertiesEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t memoryTypeBits. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 memoryTypeBits = 3;
}
message VkPhysicalDeviceExternalMemoryHostPropertiesEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: basetype VkDeviceSize minImportedHostPointerAlignment. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 minImportedHostPointerAlignment = 3;
}
message vkGetMemoryHostPointerPropertiesEXT
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: enum VkExternalMemoryHandleTypeFlagBits handleType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 handleType = 2;
    // Original field: None void pHostPointer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pHostPointer = 3;
    // Original field: struct VkMemoryHostPointerPropertiesEXT pMemoryHostPointerProperties. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkMemoryHostPointerPropertiesEXT pMemoryHostPointerProperties = 4;
}
message vkCmdWriteBufferMarkerAMD
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: enum VkPipelineStageFlagBits pipelineStage. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pipelineStage = 2;
    // Original field: handle VkBuffer dstBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 dstBuffer = 3;
    // Original field: basetype VkDeviceSize dstOffset. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 dstOffset = 4;
    // Original field: None uint32_t marker. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 marker = 5;
}
message VkPhysicalDeviceShaderCorePropertiesAMD
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t shaderEngineCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderEngineCount = 3;
    // Original field: None uint32_t shaderArraysPerEngineCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 shaderArraysPerEngineCount = 4;
    // Original field: None uint32_t computeUnitsPerShaderArray. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 computeUnitsPerShaderArray = 5;
    // Original field: None uint32_t simdPerComputeUnit. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 simdPerComputeUnit = 6;
    // Original field: None uint32_t wavefrontsPerSimd. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 wavefrontsPerSimd = 7;
    // Original field: None uint32_t wavefrontSize. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 wavefrontSize = 8;
    // Original field: None uint32_t sgprsPerSimd. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sgprsPerSimd = 9;
    // Original field: None uint32_t minSgprAllocation. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 minSgprAllocation = 10;
    // Original field: None uint32_t maxSgprAllocation. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxSgprAllocation = 11;
    // Original field: None uint32_t sgprAllocationGranularity. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sgprAllocationGranularity = 12;
    // Original field: None uint32_t vgprsPerSimd. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 vgprsPerSimd = 13;
    // Original field: None uint32_t minVgprAllocation. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 minVgprAllocation = 14;
    // Original field: None uint32_t maxVgprAllocation. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxVgprAllocation = 15;
    // Original field: None uint32_t vgprAllocationGranularity. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 vgprAllocationGranularity = 16;
}
message VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t maxVertexAttribDivisor. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 maxVertexAttribDivisor = 3;
}
message VkVertexInputBindingDivisorDescriptionEXT
{
    // Original field: None uint32_t binding. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 binding = 1;
    // Original field: None uint32_t divisor. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 divisor = 2;
}
message VkPipelineVertexInputDivisorStateCreateInfoEXT
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t vertexBindingDivisorCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 vertexBindingDivisorCount = 3;
    // Original field: struct VkVertexInputBindingDivisorDescriptionEXT pVertexBindingDivisors. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkVertexInputBindingDivisorDescriptionEXT pVertexBindingDivisors = 4;
}
message VkQueueFamilyCheckpointPropertiesNV
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: bitmask VkPipelineStageFlags checkpointExecutionStageMask. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 checkpointExecutionStageMask = 3;
}
message VkCheckpointDataNV
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: enum VkPipelineStageFlagBits stage. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 stage = 3;
    // Original field: None void pCheckpointMarker. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pCheckpointMarker = 4;
}
message vkCmdSetCheckpointNV
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: None void pCheckpointMarker. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pCheckpointMarker = 2;
}
message vkGetQueueCheckpointDataNV
{
    // Original field: handle VkQueue queue. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 queue = 1;
    // Original field: None uint32_t pCheckpointDataCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 pCheckpointDataCount = 2;
    // Original field: struct VkCheckpointDataNV pCheckpointData. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkCheckpointDataNV pCheckpointData = 3;
}
message vkMapMemoryIntoAddressSpaceGOOGLE
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkDeviceMemory memory. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 memory = 2;
    // Original field: None uint64_t pAddress. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pAddress = 3;
}
message VkImportColorBufferGOOGLE
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint32_t colorBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 colorBuffer = 3;
}
message VkImportPhysicalAddressGOOGLE
{
    // Original field: enum VkStructureType sType. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sType = 1;
    // Original field: None void pNext. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkExtensionStruct pNext = 2;
    // Original field: None uint64_t physicalAddress. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 physicalAddress = 3;
    // Original field: basetype VkDeviceSize size. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 size = 4;
    // Original field: enum VkFormat format. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 format = 5;
    // Original field: enum VkImageTiling tiling. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 tiling = 6;
    // Original field: None uint32_t tilingParameter. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 tilingParameter = 7;
}
message vkRegisterImageColorBufferGOOGLE
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkImage image. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 image = 2;
    // Original field: None uint32_t colorBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 colorBuffer = 3;
}
message vkRegisterBufferColorBufferGOOGLE
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkBuffer buffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 buffer = 2;
    // Original field: None uint32_t colorBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 colorBuffer = 3;
}
message vkUpdateDescriptorSetWithTemplateSizedGOOGLE
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: handle VkDescriptorSet descriptorSet. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 descriptorSet = 2;
    // Original field: handle VkDescriptorUpdateTemplate descriptorUpdateTemplate. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 descriptorUpdateTemplate = 3;
    // Original field: None uint32_t imageInfoCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 imageInfoCount = 4;
    // Original field: None uint32_t bufferInfoCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 bufferInfoCount = 5;
    // Original field: None uint32_t bufferViewCount. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 bufferViewCount = 6;
    // Original field: None uint32_t pImageInfoEntryIndices. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pImageInfoEntryIndices = 7;
    // Original field: None uint32_t pBufferInfoEntryIndices. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pBufferInfoEntryIndices = 8;
    // Original field: None uint32_t pBufferViewEntryIndices. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint32 pBufferViewEntryIndices = 9;
    // Original field: struct VkDescriptorImageInfo pImageInfos. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkDescriptorImageInfo pImageInfos = 10;
    // Original field: struct VkDescriptorBufferInfo pBufferInfos. stringarray? 0 string? 0 hasLenInfo? 1
    repeated VkDescriptorBufferInfo pBufferInfos = 11;
    // Original field: handle VkBufferView pBufferViews. stringarray? 0 string? 0 hasLenInfo? 1
    repeated uint64 pBufferViews = 12;
}
message vkBeginCommandBufferAsyncGOOGLE
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: struct VkCommandBufferBeginInfo pBeginInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkCommandBufferBeginInfo pBeginInfo = 2;
}
message vkEndCommandBufferAsyncGOOGLE
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
}
message vkResetCommandBufferAsyncGOOGLE
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: bitmask VkCommandBufferResetFlags flags. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 flags = 2;
}
message vkCommandBufferHostSyncGOOGLE
{
    // Original field: handle VkCommandBuffer commandBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 commandBuffer = 1;
    // Original field: None uint32_t needHostSync. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 needHostSync = 2;
    // Original field: None uint32_t sequenceNumber. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint32 sequenceNumber = 3;
}
message vkCreateImageWithRequirementsGOOGLE
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkImageCreateInfo pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkImageCreateInfo pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkImage pImage. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pImage = 4;
    // Original field: struct VkMemoryRequirements pMemoryRequirements. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkMemoryRequirements pMemoryRequirements = 5;
}
message vkCreateBufferWithRequirementsGOOGLE
{
    // Original field: handle VkDevice device. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 device = 1;
    // Original field: struct VkBufferCreateInfo pCreateInfo. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkBufferCreateInfo pCreateInfo = 2;
    // Original field: struct VkAllocationCallbacks pAllocator. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkAllocationCallbacks pAllocator = 3;
    // Original field: handle VkBuffer pBuffer. stringarray? 0 string? 0 hasLenInfo? 0
    optional uint64 pBuffer = 4;
    // Original field: struct VkMemoryRequirements pMemoryRequirements. stringarray? 0 string? 0 hasLenInfo? 0
    optional VkMemoryRequirements pMemoryRequirements = 5;
}
message VkExtensionStruct
{
    oneof struct
    {
        VkPhysicalDeviceSubgroupProperties extension_VkPhysicalDeviceSubgroupProperties = 1;
        VkPhysicalDevice16BitStorageFeatures extension_VkPhysicalDevice16BitStorageFeatures = 2;
        VkMemoryDedicatedRequirements extension_VkMemoryDedicatedRequirements = 3;
        VkMemoryDedicatedAllocateInfo extension_VkMemoryDedicatedAllocateInfo = 4;
        VkMemoryAllocateFlagsInfo extension_VkMemoryAllocateFlagsInfo = 5;
        VkDeviceGroupRenderPassBeginInfo extension_VkDeviceGroupRenderPassBeginInfo = 6;
        VkDeviceGroupCommandBufferBeginInfo extension_VkDeviceGroupCommandBufferBeginInfo = 7;
        VkDeviceGroupSubmitInfo extension_VkDeviceGroupSubmitInfo = 8;
        VkDeviceGroupBindSparseInfo extension_VkDeviceGroupBindSparseInfo = 9;
        VkBindBufferMemoryDeviceGroupInfo extension_VkBindBufferMemoryDeviceGroupInfo = 10;
        VkBindImageMemoryDeviceGroupInfo extension_VkBindImageMemoryDeviceGroupInfo = 11;
        VkDeviceGroupDeviceCreateInfo extension_VkDeviceGroupDeviceCreateInfo = 12;
        VkPhysicalDeviceFeatures2 extension_VkPhysicalDeviceFeatures2 = 13;
        VkPhysicalDevicePointClippingProperties extension_VkPhysicalDevicePointClippingProperties = 14;
        VkRenderPassInputAttachmentAspectCreateInfo extension_VkRenderPassInputAttachmentAspectCreateInfo = 15;
        VkImageViewUsageCreateInfo extension_VkImageViewUsageCreateInfo = 16;
        VkPipelineTessellationDomainOriginStateCreateInfo extension_VkPipelineTessellationDomainOriginStateCreateInfo = 17;
        VkRenderPassMultiviewCreateInfo extension_VkRenderPassMultiviewCreateInfo = 18;
        VkPhysicalDeviceMultiviewFeatures extension_VkPhysicalDeviceMultiviewFeatures = 19;
        VkPhysicalDeviceMultiviewProperties extension_VkPhysicalDeviceMultiviewProperties = 20;
        VkPhysicalDeviceVariablePointerFeatures extension_VkPhysicalDeviceVariablePointerFeatures = 21;
        VkPhysicalDeviceProtectedMemoryFeatures extension_VkPhysicalDeviceProtectedMemoryFeatures = 22;
        VkPhysicalDeviceProtectedMemoryProperties extension_VkPhysicalDeviceProtectedMemoryProperties = 23;
        VkProtectedSubmitInfo extension_VkProtectedSubmitInfo = 24;
        VkSamplerYcbcrConversionInfo extension_VkSamplerYcbcrConversionInfo = 25;
        VkBindImagePlaneMemoryInfo extension_VkBindImagePlaneMemoryInfo = 26;
        VkImagePlaneMemoryRequirementsInfo extension_VkImagePlaneMemoryRequirementsInfo = 27;
        VkPhysicalDeviceSamplerYcbcrConversionFeatures extension_VkPhysicalDeviceSamplerYcbcrConversionFeatures = 28;
        VkSamplerYcbcrConversionImageFormatProperties extension_VkSamplerYcbcrConversionImageFormatProperties = 29;
        VkPhysicalDeviceExternalImageFormatInfo extension_VkPhysicalDeviceExternalImageFormatInfo = 30;
        VkExternalImageFormatProperties extension_VkExternalImageFormatProperties = 31;
        VkPhysicalDeviceIDProperties extension_VkPhysicalDeviceIDProperties = 32;
        VkExternalMemoryImageCreateInfo extension_VkExternalMemoryImageCreateInfo = 33;
        VkExternalMemoryBufferCreateInfo extension_VkExternalMemoryBufferCreateInfo = 34;
        VkExportMemoryAllocateInfo extension_VkExportMemoryAllocateInfo = 35;
        VkExportFenceCreateInfo extension_VkExportFenceCreateInfo = 36;
        VkExportSemaphoreCreateInfo extension_VkExportSemaphoreCreateInfo = 37;
        VkPhysicalDeviceMaintenance3Properties extension_VkPhysicalDeviceMaintenance3Properties = 38;
        VkPhysicalDeviceShaderDrawParameterFeatures extension_VkPhysicalDeviceShaderDrawParameterFeatures = 39;
        VkImageSwapchainCreateInfoKHR extension_VkImageSwapchainCreateInfoKHR = 40;
        VkBindImageMemorySwapchainInfoKHR extension_VkBindImageMemorySwapchainInfoKHR = 41;
        VkDeviceGroupPresentInfoKHR extension_VkDeviceGroupPresentInfoKHR = 42;
        VkDeviceGroupSwapchainCreateInfoKHR extension_VkDeviceGroupSwapchainCreateInfoKHR = 43;
        VkDisplayPresentInfoKHR extension_VkDisplayPresentInfoKHR = 44;
        VkImportMemoryWin32HandleInfoKHR extension_VkImportMemoryWin32HandleInfoKHR = 45;
        VkExportMemoryWin32HandleInfoKHR extension_VkExportMemoryWin32HandleInfoKHR = 46;
        VkImportMemoryFdInfoKHR extension_VkImportMemoryFdInfoKHR = 47;
        VkWin32KeyedMutexAcquireReleaseInfoKHR extension_VkWin32KeyedMutexAcquireReleaseInfoKHR = 48;
        VkExportSemaphoreWin32HandleInfoKHR extension_VkExportSemaphoreWin32HandleInfoKHR = 49;
        VkD3D12FenceSubmitInfoKHR extension_VkD3D12FenceSubmitInfoKHR = 50;
        VkPhysicalDevicePushDescriptorPropertiesKHR extension_VkPhysicalDevicePushDescriptorPropertiesKHR = 51;
        VkPresentRegionsKHR extension_VkPresentRegionsKHR = 52;
        VkSharedPresentSurfaceCapabilitiesKHR extension_VkSharedPresentSurfaceCapabilitiesKHR = 53;
        VkExportFenceWin32HandleInfoKHR extension_VkExportFenceWin32HandleInfoKHR = 54;
        VkImageFormatListCreateInfoKHR extension_VkImageFormatListCreateInfoKHR = 55;
        VkPhysicalDevice8BitStorageFeaturesKHR extension_VkPhysicalDevice8BitStorageFeaturesKHR = 56;
        VkNativeBufferANDROID extension_VkNativeBufferANDROID = 57;
        VkDebugReportCallbackCreateInfoEXT extension_VkDebugReportCallbackCreateInfoEXT = 58;
        VkPipelineRasterizationStateRasterizationOrderAMD extension_VkPipelineRasterizationStateRasterizationOrderAMD = 59;
        VkDedicatedAllocationImageCreateInfoNV extension_VkDedicatedAllocationImageCreateInfoNV = 60;
        VkDedicatedAllocationBufferCreateInfoNV extension_VkDedicatedAllocationBufferCreateInfoNV = 61;
        VkDedicatedAllocationMemoryAllocateInfoNV extension_VkDedicatedAllocationMemoryAllocateInfoNV = 62;
        VkTextureLODGatherFormatPropertiesAMD extension_VkTextureLODGatherFormatPropertiesAMD = 63;
        VkExternalMemoryImageCreateInfoNV extension_VkExternalMemoryImageCreateInfoNV = 64;
        VkExportMemoryAllocateInfoNV extension_VkExportMemoryAllocateInfoNV = 65;
        VkImportMemoryWin32HandleInfoNV extension_VkImportMemoryWin32HandleInfoNV = 66;
        VkExportMemoryWin32HandleInfoNV extension_VkExportMemoryWin32HandleInfoNV = 67;
        VkWin32KeyedMutexAcquireReleaseInfoNV extension_VkWin32KeyedMutexAcquireReleaseInfoNV = 68;
        VkValidationFlagsEXT extension_VkValidationFlagsEXT = 69;
        VkPhysicalDeviceConditionalRenderingFeaturesEXT extension_VkPhysicalDeviceConditionalRenderingFeaturesEXT = 70;
        VkCommandBufferInheritanceConditionalRenderingInfoEXT extension_VkCommandBufferInheritanceConditionalRenderingInfoEXT = 71;
        VkPipelineViewportWScalingStateCreateInfoNV extension_VkPipelineViewportWScalingStateCreateInfoNV = 72;
        VkSwapchainCounterCreateInfoEXT extension_VkSwapchainCounterCreateInfoEXT = 73;
        VkPresentTimesInfoGOOGLE extension_VkPresentTimesInfoGOOGLE = 74;
        VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX extension_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX = 75;
        VkPipelineViewportSwizzleStateCreateInfoNV extension_VkPipelineViewportSwizzleStateCreateInfoNV = 76;
        VkPhysicalDeviceDiscardRectanglePropertiesEXT extension_VkPhysicalDeviceDiscardRectanglePropertiesEXT = 77;
        VkPipelineDiscardRectangleStateCreateInfoEXT extension_VkPipelineDiscardRectangleStateCreateInfoEXT = 78;
        VkPhysicalDeviceConservativeRasterizationPropertiesEXT extension_VkPhysicalDeviceConservativeRasterizationPropertiesEXT = 79;
        VkPipelineRasterizationConservativeStateCreateInfoEXT extension_VkPipelineRasterizationConservativeStateCreateInfoEXT = 80;
        VkDebugUtilsMessengerCreateInfoEXT extension_VkDebugUtilsMessengerCreateInfoEXT = 81;
        VkAndroidHardwareBufferUsageANDROID extension_VkAndroidHardwareBufferUsageANDROID = 82;
        VkAndroidHardwareBufferFormatPropertiesANDROID extension_VkAndroidHardwareBufferFormatPropertiesANDROID = 83;
        VkImportAndroidHardwareBufferInfoANDROID extension_VkImportAndroidHardwareBufferInfoANDROID = 84;
        VkExternalFormatANDROID extension_VkExternalFormatANDROID = 85;
        VkSamplerReductionModeCreateInfoEXT extension_VkSamplerReductionModeCreateInfoEXT = 86;
        VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT extension_VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT = 87;
        VkSampleLocationsInfoEXT extension_VkSampleLocationsInfoEXT = 88;
        VkRenderPassSampleLocationsBeginInfoEXT extension_VkRenderPassSampleLocationsBeginInfoEXT = 89;
        VkPipelineSampleLocationsStateCreateInfoEXT extension_VkPipelineSampleLocationsStateCreateInfoEXT = 90;
        VkPhysicalDeviceSampleLocationsPropertiesEXT extension_VkPhysicalDeviceSampleLocationsPropertiesEXT = 91;
        VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT extension_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT = 92;
        VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT extension_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT = 93;
        VkPipelineColorBlendAdvancedStateCreateInfoEXT extension_VkPipelineColorBlendAdvancedStateCreateInfoEXT = 94;
        VkPipelineCoverageToColorStateCreateInfoNV extension_VkPipelineCoverageToColorStateCreateInfoNV = 95;
        VkPipelineCoverageModulationStateCreateInfoNV extension_VkPipelineCoverageModulationStateCreateInfoNV = 96;
        VkShaderModuleValidationCacheCreateInfoEXT extension_VkShaderModuleValidationCacheCreateInfoEXT = 97;
        VkDescriptorSetLayoutBindingFlagsCreateInfoEXT extension_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT = 98;
        VkPhysicalDeviceDescriptorIndexingFeaturesEXT extension_VkPhysicalDeviceDescriptorIndexingFeaturesEXT = 99;
        VkPhysicalDeviceDescriptorIndexingPropertiesEXT extension_VkPhysicalDeviceDescriptorIndexingPropertiesEXT = 100;
        VkDescriptorSetVariableDescriptorCountAllocateInfoEXT extension_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT = 101;
        VkDescriptorSetVariableDescriptorCountLayoutSupportEXT extension_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT = 102;
        VkDeviceQueueGlobalPriorityCreateInfoEXT extension_VkDeviceQueueGlobalPriorityCreateInfoEXT = 103;
        VkImportMemoryHostPointerInfoEXT extension_VkImportMemoryHostPointerInfoEXT = 104;
        VkPhysicalDeviceExternalMemoryHostPropertiesEXT extension_VkPhysicalDeviceExternalMemoryHostPropertiesEXT = 105;
        VkPhysicalDeviceShaderCorePropertiesAMD extension_VkPhysicalDeviceShaderCorePropertiesAMD = 106;
        VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT extension_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT = 107;
        VkPipelineVertexInputDivisorStateCreateInfoEXT extension_VkPipelineVertexInputDivisorStateCreateInfoEXT = 108;
        VkQueueFamilyCheckpointPropertiesNV extension_VkQueueFamilyCheckpointPropertiesNV = 109;
        VkImportColorBufferGOOGLE extension_VkImportColorBufferGOOGLE = 110;
        VkImportPhysicalAddressGOOGLE extension_VkImportPhysicalAddressGOOGLE = 111;
    }
}
message VkApiCall
{
    oneof api
    {
        vkCreateInstance api_vkCreateInstance = 1;
        vkDestroyInstance api_vkDestroyInstance = 2;
        vkEnumeratePhysicalDevices api_vkEnumeratePhysicalDevices = 3;
        vkGetPhysicalDeviceFeatures api_vkGetPhysicalDeviceFeatures = 4;
        vkGetPhysicalDeviceFormatProperties api_vkGetPhysicalDeviceFormatProperties = 5;
        vkGetPhysicalDeviceImageFormatProperties api_vkGetPhysicalDeviceImageFormatProperties = 6;
        vkGetPhysicalDeviceProperties api_vkGetPhysicalDeviceProperties = 7;
        vkGetPhysicalDeviceQueueFamilyProperties api_vkGetPhysicalDeviceQueueFamilyProperties = 8;
        vkGetPhysicalDeviceMemoryProperties api_vkGetPhysicalDeviceMemoryProperties = 9;
        vkGetInstanceProcAddr api_vkGetInstanceProcAddr = 10;
        vkGetDeviceProcAddr api_vkGetDeviceProcAddr = 11;
        vkCreateDevice api_vkCreateDevice = 12;
        vkDestroyDevice api_vkDestroyDevice = 13;
        vkEnumerateInstanceExtensionProperties api_vkEnumerateInstanceExtensionProperties = 14;
        vkEnumerateDeviceExtensionProperties api_vkEnumerateDeviceExtensionProperties = 15;
        vkEnumerateInstanceLayerProperties api_vkEnumerateInstanceLayerProperties = 16;
        vkEnumerateDeviceLayerProperties api_vkEnumerateDeviceLayerProperties = 17;
        vkGetDeviceQueue api_vkGetDeviceQueue = 18;
        vkQueueSubmit api_vkQueueSubmit = 19;
        vkQueueWaitIdle api_vkQueueWaitIdle = 20;
        vkDeviceWaitIdle api_vkDeviceWaitIdle = 21;
        vkAllocateMemory api_vkAllocateMemory = 22;
        vkFreeMemory api_vkFreeMemory = 23;
        vkMapMemory api_vkMapMemory = 24;
        vkUnmapMemory api_vkUnmapMemory = 25;
        vkFlushMappedMemoryRanges api_vkFlushMappedMemoryRanges = 26;
        vkInvalidateMappedMemoryRanges api_vkInvalidateMappedMemoryRanges = 27;
        vkGetDeviceMemoryCommitment api_vkGetDeviceMemoryCommitment = 28;
        vkBindBufferMemory api_vkBindBufferMemory = 29;
        vkBindImageMemory api_vkBindImageMemory = 30;
        vkGetBufferMemoryRequirements api_vkGetBufferMemoryRequirements = 31;
        vkGetImageMemoryRequirements api_vkGetImageMemoryRequirements = 32;
        vkGetImageSparseMemoryRequirements api_vkGetImageSparseMemoryRequirements = 33;
        vkGetPhysicalDeviceSparseImageFormatProperties api_vkGetPhysicalDeviceSparseImageFormatProperties = 34;
        vkQueueBindSparse api_vkQueueBindSparse = 35;
        vkCreateFence api_vkCreateFence = 36;
        vkDestroyFence api_vkDestroyFence = 37;
        vkResetFences api_vkResetFences = 38;
        vkGetFenceStatus api_vkGetFenceStatus = 39;
        vkWaitForFences api_vkWaitForFences = 40;
        vkCreateSemaphore api_vkCreateSemaphore = 41;
        vkDestroySemaphore api_vkDestroySemaphore = 42;
        vkCreateEvent api_vkCreateEvent = 43;
        vkDestroyEvent api_vkDestroyEvent = 44;
        vkGetEventStatus api_vkGetEventStatus = 45;
        vkSetEvent api_vkSetEvent = 46;
        vkResetEvent api_vkResetEvent = 47;
        vkCreateQueryPool api_vkCreateQueryPool = 48;
        vkDestroyQueryPool api_vkDestroyQueryPool = 49;
        vkGetQueryPoolResults api_vkGetQueryPoolResults = 50;
        vkCreateBuffer api_vkCreateBuffer = 51;
        vkDestroyBuffer api_vkDestroyBuffer = 52;
        vkCreateBufferView api_vkCreateBufferView = 53;
        vkDestroyBufferView api_vkDestroyBufferView = 54;
        vkCreateImage api_vkCreateImage = 55;
        vkDestroyImage api_vkDestroyImage = 56;
        vkGetImageSubresourceLayout api_vkGetImageSubresourceLayout = 57;
        vkCreateImageView api_vkCreateImageView = 58;
        vkDestroyImageView api_vkDestroyImageView = 59;
        vkCreateShaderModule api_vkCreateShaderModule = 60;
        vkDestroyShaderModule api_vkDestroyShaderModule = 61;
        vkCreatePipelineCache api_vkCreatePipelineCache = 62;
        vkDestroyPipelineCache api_vkDestroyPipelineCache = 63;
        vkGetPipelineCacheData api_vkGetPipelineCacheData = 64;
        vkMergePipelineCaches api_vkMergePipelineCaches = 65;
        vkCreateGraphicsPipelines api_vkCreateGraphicsPipelines = 66;
        vkCreateComputePipelines api_vkCreateComputePipelines = 67;
        vkDestroyPipeline api_vkDestroyPipeline = 68;
        vkCreatePipelineLayout api_vkCreatePipelineLayout = 69;
        vkDestroyPipelineLayout api_vkDestroyPipelineLayout = 70;
        vkCreateSampler api_vkCreateSampler = 71;
        vkDestroySampler api_vkDestroySampler = 72;
        vkCreateDescriptorSetLayout api_vkCreateDescriptorSetLayout = 73;
        vkDestroyDescriptorSetLayout api_vkDestroyDescriptorSetLayout = 74;
        vkCreateDescriptorPool api_vkCreateDescriptorPool = 75;
        vkDestroyDescriptorPool api_vkDestroyDescriptorPool = 76;
        vkResetDescriptorPool api_vkResetDescriptorPool = 77;
        vkAllocateDescriptorSets api_vkAllocateDescriptorSets = 78;
        vkFreeDescriptorSets api_vkFreeDescriptorSets = 79;
        vkUpdateDescriptorSets api_vkUpdateDescriptorSets = 80;
        vkCreateFramebuffer api_vkCreateFramebuffer = 81;
        vkDestroyFramebuffer api_vkDestroyFramebuffer = 82;
        vkCreateRenderPass api_vkCreateRenderPass = 83;
        vkDestroyRenderPass api_vkDestroyRenderPass = 84;
        vkGetRenderAreaGranularity api_vkGetRenderAreaGranularity = 85;
        vkCreateCommandPool api_vkCreateCommandPool = 86;
        vkDestroyCommandPool api_vkDestroyCommandPool = 87;
        vkResetCommandPool api_vkResetCommandPool = 88;
        vkAllocateCommandBuffers api_vkAllocateCommandBuffers = 89;
        vkFreeCommandBuffers api_vkFreeCommandBuffers = 90;
        vkBeginCommandBuffer api_vkBeginCommandBuffer = 91;
        vkEndCommandBuffer api_vkEndCommandBuffer = 92;
        vkResetCommandBuffer api_vkResetCommandBuffer = 93;
        vkCmdBindPipeline api_vkCmdBindPipeline = 94;
        vkCmdSetViewport api_vkCmdSetViewport = 95;
        vkCmdSetScissor api_vkCmdSetScissor = 96;
        vkCmdSetLineWidth api_vkCmdSetLineWidth = 97;
        vkCmdSetDepthBias api_vkCmdSetDepthBias = 98;
        vkCmdSetBlendConstants api_vkCmdSetBlendConstants = 99;
        vkCmdSetDepthBounds api_vkCmdSetDepthBounds = 100;
        vkCmdSetStencilCompareMask api_vkCmdSetStencilCompareMask = 101;
        vkCmdSetStencilWriteMask api_vkCmdSetStencilWriteMask = 102;
        vkCmdSetStencilReference api_vkCmdSetStencilReference = 103;
        vkCmdBindDescriptorSets api_vkCmdBindDescriptorSets = 104;
        vkCmdBindIndexBuffer api_vkCmdBindIndexBuffer = 105;
        vkCmdBindVertexBuffers api_vkCmdBindVertexBuffers = 106;
        vkCmdDraw api_vkCmdDraw = 107;
        vkCmdDrawIndexed api_vkCmdDrawIndexed = 108;
        vkCmdDrawIndirect api_vkCmdDrawIndirect = 109;
        vkCmdDrawIndexedIndirect api_vkCmdDrawIndexedIndirect = 110;
        vkCmdDispatch api_vkCmdDispatch = 111;
        vkCmdDispatchIndirect api_vkCmdDispatchIndirect = 112;
        vkCmdCopyBuffer api_vkCmdCopyBuffer = 113;
        vkCmdCopyImage api_vkCmdCopyImage = 114;
        vkCmdBlitImage api_vkCmdBlitImage = 115;
        vkCmdCopyBufferToImage api_vkCmdCopyBufferToImage = 116;
        vkCmdCopyImageToBuffer api_vkCmdCopyImageToBuffer = 117;
        vkCmdUpdateBuffer api_vkCmdUpdateBuffer = 118;
        vkCmdFillBuffer api_vkCmdFillBuffer = 119;
        vkCmdClearColorImage api_vkCmdClearColorImage = 120;
        vkCmdClearDepthStencilImage api_vkCmdClearDepthStencilImage = 121;
        vkCmdClearAttachments api_vkCmdClearAttachments = 122;
        vkCmdResolveImage api_vkCmdResolveImage = 123;
        vkCmdSetEvent api_vkCmdSetEvent = 124;
        vkCmdResetEvent api_vkCmdResetEvent = 125;
        vkCmdWaitEvents api_vkCmdWaitEvents = 126;
        vkCmdPipelineBarrier api_vkCmdPipelineBarrier = 127;
        vkCmdBeginQuery api_vkCmdBeginQuery = 128;
        vkCmdEndQuery api_vkCmdEndQuery = 129;
        vkCmdResetQueryPool api_vkCmdResetQueryPool = 130;
        vkCmdWriteTimestamp api_vkCmdWriteTimestamp = 131;
        vkCmdCopyQueryPoolResults api_vkCmdCopyQueryPoolResults = 132;
        vkCmdPushConstants api_vkCmdPushConstants = 133;
        vkCmdBeginRenderPass api_vkCmdBeginRenderPass = 134;
        vkCmdNextSubpass api_vkCmdNextSubpass = 135;
        vkCmdEndRenderPass api_vkCmdEndRenderPass = 136;
        vkCmdExecuteCommands api_vkCmdExecuteCommands = 137;
        vkEnumerateInstanceVersion api_vkEnumerateInstanceVersion = 138;
        vkBindBufferMemory2 api_vkBindBufferMemory2 = 139;
        vkBindImageMemory2 api_vkBindImageMemory2 = 140;
        vkGetDeviceGroupPeerMemoryFeatures api_vkGetDeviceGroupPeerMemoryFeatures = 141;
        vkCmdSetDeviceMask api_vkCmdSetDeviceMask = 142;
        vkCmdDispatchBase api_vkCmdDispatchBase = 143;
        vkEnumeratePhysicalDeviceGroups api_vkEnumeratePhysicalDeviceGroups = 144;
        vkGetImageMemoryRequirements2 api_vkGetImageMemoryRequirements2 = 145;
        vkGetBufferMemoryRequirements2 api_vkGetBufferMemoryRequirements2 = 146;
        vkGetImageSparseMemoryRequirements2 api_vkGetImageSparseMemoryRequirements2 = 147;
        vkGetPhysicalDeviceFeatures2 api_vkGetPhysicalDeviceFeatures2 = 148;
        vkGetPhysicalDeviceProperties2 api_vkGetPhysicalDeviceProperties2 = 149;
        vkGetPhysicalDeviceFormatProperties2 api_vkGetPhysicalDeviceFormatProperties2 = 150;
        vkGetPhysicalDeviceImageFormatProperties2 api_vkGetPhysicalDeviceImageFormatProperties2 = 151;
        vkGetPhysicalDeviceQueueFamilyProperties2 api_vkGetPhysicalDeviceQueueFamilyProperties2 = 152;
        vkGetPhysicalDeviceMemoryProperties2 api_vkGetPhysicalDeviceMemoryProperties2 = 153;
        vkGetPhysicalDeviceSparseImageFormatProperties2 api_vkGetPhysicalDeviceSparseImageFormatProperties2 = 154;
        vkTrimCommandPool api_vkTrimCommandPool = 155;
        vkGetDeviceQueue2 api_vkGetDeviceQueue2 = 156;
        vkCreateSamplerYcbcrConversion api_vkCreateSamplerYcbcrConversion = 157;
        vkDestroySamplerYcbcrConversion api_vkDestroySamplerYcbcrConversion = 158;
        vkCreateDescriptorUpdateTemplate api_vkCreateDescriptorUpdateTemplate = 159;
        vkDestroyDescriptorUpdateTemplate api_vkDestroyDescriptorUpdateTemplate = 160;
        vkUpdateDescriptorSetWithTemplate api_vkUpdateDescriptorSetWithTemplate = 161;
        vkGetPhysicalDeviceExternalBufferProperties api_vkGetPhysicalDeviceExternalBufferProperties = 162;
        vkGetPhysicalDeviceExternalFenceProperties api_vkGetPhysicalDeviceExternalFenceProperties = 163;
        vkGetPhysicalDeviceExternalSemaphoreProperties api_vkGetPhysicalDeviceExternalSemaphoreProperties = 164;
        vkGetDescriptorSetLayoutSupport api_vkGetDescriptorSetLayoutSupport = 165;
        vkDestroySurfaceKHR api_vkDestroySurfaceKHR = 166;
        vkGetPhysicalDeviceSurfaceSupportKHR api_vkGetPhysicalDeviceSurfaceSupportKHR = 167;
        vkGetPhysicalDeviceSurfaceCapabilitiesKHR api_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = 168;
        vkGetPhysicalDeviceSurfaceFormatsKHR api_vkGetPhysicalDeviceSurfaceFormatsKHR = 169;
        vkGetPhysicalDeviceSurfacePresentModesKHR api_vkGetPhysicalDeviceSurfacePresentModesKHR = 170;
        vkCreateSwapchainKHR api_vkCreateSwapchainKHR = 171;
        vkDestroySwapchainKHR api_vkDestroySwapchainKHR = 172;
        vkGetSwapchainImagesKHR api_vkGetSwapchainImagesKHR = 173;
        vkAcquireNextImageKHR api_vkAcquireNextImageKHR = 174;
        vkQueuePresentKHR api_vkQueuePresentKHR = 175;
        vkGetDeviceGroupPresentCapabilitiesKHR api_vkGetDeviceGroupPresentCapabilitiesKHR = 176;
        vkGetDeviceGroupSurfacePresentModesKHR api_vkGetDeviceGroupSurfacePresentModesKHR = 177;
        vkGetPhysicalDevicePresentRectanglesKHR api_vkGetPhysicalDevicePresentRectanglesKHR = 178;
        vkAcquireNextImage2KHR api_vkAcquireNextImage2KHR = 179;
        vkGetPhysicalDeviceDisplayPropertiesKHR api_vkGetPhysicalDeviceDisplayPropertiesKHR = 180;
        vkGetPhysicalDeviceDisplayPlanePropertiesKHR api_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = 181;
        vkGetDisplayPlaneSupportedDisplaysKHR api_vkGetDisplayPlaneSupportedDisplaysKHR = 182;
        vkGetDisplayModePropertiesKHR api_vkGetDisplayModePropertiesKHR = 183;
        vkCreateDisplayModeKHR api_vkCreateDisplayModeKHR = 184;
        vkGetDisplayPlaneCapabilitiesKHR api_vkGetDisplayPlaneCapabilitiesKHR = 185;
        vkCreateDisplayPlaneSurfaceKHR api_vkCreateDisplayPlaneSurfaceKHR = 186;
        vkCreateSharedSwapchainsKHR api_vkCreateSharedSwapchainsKHR = 187;
        vkCreateXlibSurfaceKHR api_vkCreateXlibSurfaceKHR = 188;
        vkGetPhysicalDeviceXlibPresentationSupportKHR api_vkGetPhysicalDeviceXlibPresentationSupportKHR = 189;
        vkCreateXcbSurfaceKHR api_vkCreateXcbSurfaceKHR = 190;
        vkGetPhysicalDeviceXcbPresentationSupportKHR api_vkGetPhysicalDeviceXcbPresentationSupportKHR = 191;
        vkCreateWaylandSurfaceKHR api_vkCreateWaylandSurfaceKHR = 192;
        vkGetPhysicalDeviceWaylandPresentationSupportKHR api_vkGetPhysicalDeviceWaylandPresentationSupportKHR = 193;
        vkCreateMirSurfaceKHR api_vkCreateMirSurfaceKHR = 194;
        vkGetPhysicalDeviceMirPresentationSupportKHR api_vkGetPhysicalDeviceMirPresentationSupportKHR = 195;
        vkCreateAndroidSurfaceKHR api_vkCreateAndroidSurfaceKHR = 196;
        vkCreateWin32SurfaceKHR api_vkCreateWin32SurfaceKHR = 197;
        vkGetPhysicalDeviceWin32PresentationSupportKHR api_vkGetPhysicalDeviceWin32PresentationSupportKHR = 198;
        vkGetPhysicalDeviceFeatures2KHR api_vkGetPhysicalDeviceFeatures2KHR = 199;
        vkGetPhysicalDeviceProperties2KHR api_vkGetPhysicalDeviceProperties2KHR = 200;
        vkGetPhysicalDeviceFormatProperties2KHR api_vkGetPhysicalDeviceFormatProperties2KHR = 201;
        vkGetPhysicalDeviceImageFormatProperties2KHR api_vkGetPhysicalDeviceImageFormatProperties2KHR = 202;
        vkGetPhysicalDeviceQueueFamilyProperties2KHR api_vkGetPhysicalDeviceQueueFamilyProperties2KHR = 203;
        vkGetPhysicalDeviceMemoryProperties2KHR api_vkGetPhysicalDeviceMemoryProperties2KHR = 204;
        vkGetPhysicalDeviceSparseImageFormatProperties2KHR api_vkGetPhysicalDeviceSparseImageFormatProperties2KHR = 205;
        vkGetDeviceGroupPeerMemoryFeaturesKHR api_vkGetDeviceGroupPeerMemoryFeaturesKHR = 206;
        vkCmdSetDeviceMaskKHR api_vkCmdSetDeviceMaskKHR = 207;
        vkCmdDispatchBaseKHR api_vkCmdDispatchBaseKHR = 208;
        vkTrimCommandPoolKHR api_vkTrimCommandPoolKHR = 209;
        vkEnumeratePhysicalDeviceGroupsKHR api_vkEnumeratePhysicalDeviceGroupsKHR = 210;
        vkGetPhysicalDeviceExternalBufferPropertiesKHR api_vkGetPhysicalDeviceExternalBufferPropertiesKHR = 211;
        vkGetMemoryWin32HandleKHR api_vkGetMemoryWin32HandleKHR = 212;
        vkGetMemoryWin32HandlePropertiesKHR api_vkGetMemoryWin32HandlePropertiesKHR = 213;
        vkGetMemoryFdKHR api_vkGetMemoryFdKHR = 214;
        vkGetMemoryFdPropertiesKHR api_vkGetMemoryFdPropertiesKHR = 215;
        vkGetPhysicalDeviceExternalSemaphorePropertiesKHR api_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = 216;
        vkImportSemaphoreWin32HandleKHR api_vkImportSemaphoreWin32HandleKHR = 217;
        vkGetSemaphoreWin32HandleKHR api_vkGetSemaphoreWin32HandleKHR = 218;
        vkImportSemaphoreFdKHR api_vkImportSemaphoreFdKHR = 219;
        vkGetSemaphoreFdKHR api_vkGetSemaphoreFdKHR = 220;
        vkCmdPushDescriptorSetKHR api_vkCmdPushDescriptorSetKHR = 221;
        vkCmdPushDescriptorSetWithTemplateKHR api_vkCmdPushDescriptorSetWithTemplateKHR = 222;
        vkCreateDescriptorUpdateTemplateKHR api_vkCreateDescriptorUpdateTemplateKHR = 223;
        vkDestroyDescriptorUpdateTemplateKHR api_vkDestroyDescriptorUpdateTemplateKHR = 224;
        vkUpdateDescriptorSetWithTemplateKHR api_vkUpdateDescriptorSetWithTemplateKHR = 225;
        vkCreateRenderPass2KHR api_vkCreateRenderPass2KHR = 226;
        vkCmdBeginRenderPass2KHR api_vkCmdBeginRenderPass2KHR = 227;
        vkCmdNextSubpass2KHR api_vkCmdNextSubpass2KHR = 228;
        vkCmdEndRenderPass2KHR api_vkCmdEndRenderPass2KHR = 229;
        vkGetSwapchainStatusKHR api_vkGetSwapchainStatusKHR = 230;
        vkGetPhysicalDeviceExternalFencePropertiesKHR api_vkGetPhysicalDeviceExternalFencePropertiesKHR = 231;
        vkImportFenceWin32HandleKHR api_vkImportFenceWin32HandleKHR = 232;
        vkGetFenceWin32HandleKHR api_vkGetFenceWin32HandleKHR = 233;
        vkImportFenceFdKHR api_vkImportFenceFdKHR = 234;
        vkGetFenceFdKHR api_vkGetFenceFdKHR = 235;
        vkGetPhysicalDeviceSurfaceCapabilities2KHR api_vkGetPhysicalDeviceSurfaceCapabilities2KHR = 236;
        vkGetPhysicalDeviceSurfaceFormats2KHR api_vkGetPhysicalDeviceSurfaceFormats2KHR = 237;
        vkGetPhysicalDeviceDisplayProperties2KHR api_vkGetPhysicalDeviceDisplayProperties2KHR = 238;
        vkGetPhysicalDeviceDisplayPlaneProperties2KHR api_vkGetPhysicalDeviceDisplayPlaneProperties2KHR = 239;
        vkGetDisplayModeProperties2KHR api_vkGetDisplayModeProperties2KHR = 240;
        vkGetDisplayPlaneCapabilities2KHR api_vkGetDisplayPlaneCapabilities2KHR = 241;
        vkGetImageMemoryRequirements2KHR api_vkGetImageMemoryRequirements2KHR = 242;
        vkGetBufferMemoryRequirements2KHR api_vkGetBufferMemoryRequirements2KHR = 243;
        vkGetImageSparseMemoryRequirements2KHR api_vkGetImageSparseMemoryRequirements2KHR = 244;
        vkCreateSamplerYcbcrConversionKHR api_vkCreateSamplerYcbcrConversionKHR = 245;
        vkDestroySamplerYcbcrConversionKHR api_vkDestroySamplerYcbcrConversionKHR = 246;
        vkBindBufferMemory2KHR api_vkBindBufferMemory2KHR = 247;
        vkBindImageMemory2KHR api_vkBindImageMemory2KHR = 248;
        vkGetDescriptorSetLayoutSupportKHR api_vkGetDescriptorSetLayoutSupportKHR = 249;
        vkCmdDrawIndirectCountKHR api_vkCmdDrawIndirectCountKHR = 250;
        vkCmdDrawIndexedIndirectCountKHR api_vkCmdDrawIndexedIndirectCountKHR = 251;
        vkGetSwapchainGrallocUsageANDROID api_vkGetSwapchainGrallocUsageANDROID = 252;
        vkAcquireImageANDROID api_vkAcquireImageANDROID = 253;
        vkQueueSignalReleaseImageANDROID api_vkQueueSignalReleaseImageANDROID = 254;
        vkCreateDebugReportCallbackEXT api_vkCreateDebugReportCallbackEXT = 255;
        vkDestroyDebugReportCallbackEXT api_vkDestroyDebugReportCallbackEXT = 256;
        vkDebugReportMessageEXT api_vkDebugReportMessageEXT = 257;
        vkDebugMarkerSetObjectTagEXT api_vkDebugMarkerSetObjectTagEXT = 258;
        vkDebugMarkerSetObjectNameEXT api_vkDebugMarkerSetObjectNameEXT = 259;
        vkCmdDebugMarkerBeginEXT api_vkCmdDebugMarkerBeginEXT = 260;
        vkCmdDebugMarkerEndEXT api_vkCmdDebugMarkerEndEXT = 261;
        vkCmdDebugMarkerInsertEXT api_vkCmdDebugMarkerInsertEXT = 262;
        vkCmdDrawIndirectCountAMD api_vkCmdDrawIndirectCountAMD = 263;
        vkCmdDrawIndexedIndirectCountAMD api_vkCmdDrawIndexedIndirectCountAMD = 264;
        vkGetShaderInfoAMD api_vkGetShaderInfoAMD = 265;
        vkGetPhysicalDeviceExternalImageFormatPropertiesNV api_vkGetPhysicalDeviceExternalImageFormatPropertiesNV = 266;
        vkGetMemoryWin32HandleNV api_vkGetMemoryWin32HandleNV = 267;
        vkCreateViSurfaceNN api_vkCreateViSurfaceNN = 268;
        vkCmdBeginConditionalRenderingEXT api_vkCmdBeginConditionalRenderingEXT = 269;
        vkCmdEndConditionalRenderingEXT api_vkCmdEndConditionalRenderingEXT = 270;
        vkCmdProcessCommandsNVX api_vkCmdProcessCommandsNVX = 271;
        vkCmdReserveSpaceForCommandsNVX api_vkCmdReserveSpaceForCommandsNVX = 272;
        vkCreateIndirectCommandsLayoutNVX api_vkCreateIndirectCommandsLayoutNVX = 273;
        vkDestroyIndirectCommandsLayoutNVX api_vkDestroyIndirectCommandsLayoutNVX = 274;
        vkCreateObjectTableNVX api_vkCreateObjectTableNVX = 275;
        vkDestroyObjectTableNVX api_vkDestroyObjectTableNVX = 276;
        vkRegisterObjectsNVX api_vkRegisterObjectsNVX = 277;
        vkUnregisterObjectsNVX api_vkUnregisterObjectsNVX = 278;
        vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX api_vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX = 279;
        vkCmdSetViewportWScalingNV api_vkCmdSetViewportWScalingNV = 280;
        vkReleaseDisplayEXT api_vkReleaseDisplayEXT = 281;
        vkAcquireXlibDisplayEXT api_vkAcquireXlibDisplayEXT = 282;
        vkGetRandROutputDisplayEXT api_vkGetRandROutputDisplayEXT = 283;
        vkGetPhysicalDeviceSurfaceCapabilities2EXT api_vkGetPhysicalDeviceSurfaceCapabilities2EXT = 284;
        vkDisplayPowerControlEXT api_vkDisplayPowerControlEXT = 285;
        vkRegisterDeviceEventEXT api_vkRegisterDeviceEventEXT = 286;
        vkRegisterDisplayEventEXT api_vkRegisterDisplayEventEXT = 287;
        vkGetSwapchainCounterEXT api_vkGetSwapchainCounterEXT = 288;
        vkGetRefreshCycleDurationGOOGLE api_vkGetRefreshCycleDurationGOOGLE = 289;
        vkGetPastPresentationTimingGOOGLE api_vkGetPastPresentationTimingGOOGLE = 290;
        vkCmdSetDiscardRectangleEXT api_vkCmdSetDiscardRectangleEXT = 291;
        vkSetHdrMetadataEXT api_vkSetHdrMetadataEXT = 292;
        vkCreateIOSSurfaceMVK api_vkCreateIOSSurfaceMVK = 293;
        vkCreateMacOSSurfaceMVK api_vkCreateMacOSSurfaceMVK = 294;
        vkSetDebugUtilsObjectNameEXT api_vkSetDebugUtilsObjectNameEXT = 295;
        vkSetDebugUtilsObjectTagEXT api_vkSetDebugUtilsObjectTagEXT = 296;
        vkQueueBeginDebugUtilsLabelEXT api_vkQueueBeginDebugUtilsLabelEXT = 297;
        vkQueueEndDebugUtilsLabelEXT api_vkQueueEndDebugUtilsLabelEXT = 298;
        vkQueueInsertDebugUtilsLabelEXT api_vkQueueInsertDebugUtilsLabelEXT = 299;
        vkCmdBeginDebugUtilsLabelEXT api_vkCmdBeginDebugUtilsLabelEXT = 300;
        vkCmdEndDebugUtilsLabelEXT api_vkCmdEndDebugUtilsLabelEXT = 301;
        vkCmdInsertDebugUtilsLabelEXT api_vkCmdInsertDebugUtilsLabelEXT = 302;
        vkCreateDebugUtilsMessengerEXT api_vkCreateDebugUtilsMessengerEXT = 303;
        vkDestroyDebugUtilsMessengerEXT api_vkDestroyDebugUtilsMessengerEXT = 304;
        vkSubmitDebugUtilsMessageEXT api_vkSubmitDebugUtilsMessageEXT = 305;
        vkGetAndroidHardwareBufferPropertiesANDROID api_vkGetAndroidHardwareBufferPropertiesANDROID = 306;
        vkGetMemoryAndroidHardwareBufferANDROID api_vkGetMemoryAndroidHardwareBufferANDROID = 307;
        vkCmdSetSampleLocationsEXT api_vkCmdSetSampleLocationsEXT = 308;
        vkGetPhysicalDeviceMultisamplePropertiesEXT api_vkGetPhysicalDeviceMultisamplePropertiesEXT = 309;
        vkCreateValidationCacheEXT api_vkCreateValidationCacheEXT = 310;
        vkDestroyValidationCacheEXT api_vkDestroyValidationCacheEXT = 311;
        vkMergeValidationCachesEXT api_vkMergeValidationCachesEXT = 312;
        vkGetValidationCacheDataEXT api_vkGetValidationCacheDataEXT = 313;
        vkGetMemoryHostPointerPropertiesEXT api_vkGetMemoryHostPointerPropertiesEXT = 314;
        vkCmdWriteBufferMarkerAMD api_vkCmdWriteBufferMarkerAMD = 315;
        vkCmdSetCheckpointNV api_vkCmdSetCheckpointNV = 316;
        vkGetQueueCheckpointDataNV api_vkGetQueueCheckpointDataNV = 317;
        vkMapMemoryIntoAddressSpaceGOOGLE api_vkMapMemoryIntoAddressSpaceGOOGLE = 318;
        vkRegisterImageColorBufferGOOGLE api_vkRegisterImageColorBufferGOOGLE = 319;
        vkRegisterBufferColorBufferGOOGLE api_vkRegisterBufferColorBufferGOOGLE = 320;
        vkUpdateDescriptorSetWithTemplateSizedGOOGLE api_vkUpdateDescriptorSetWithTemplateSizedGOOGLE = 321;
        vkBeginCommandBufferAsyncGOOGLE api_vkBeginCommandBufferAsyncGOOGLE = 322;
        vkEndCommandBufferAsyncGOOGLE api_vkEndCommandBufferAsyncGOOGLE = 323;
        vkResetCommandBufferAsyncGOOGLE api_vkResetCommandBufferAsyncGOOGLE = 324;
        vkCommandBufferHostSyncGOOGLE api_vkCommandBufferHostSyncGOOGLE = 325;
        vkCreateImageWithRequirementsGOOGLE api_vkCreateImageWithRequirementsGOOGLE = 326;
        vkCreateBufferWithRequirementsGOOGLE api_vkCreateBufferWithRequirementsGOOGLE = 327;
    }
}
